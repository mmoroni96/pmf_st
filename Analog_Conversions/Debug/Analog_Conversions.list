
Analog_Conversions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e64  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800404c  0800404c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800404c  0800404c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800404c  0800404c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800404c  0800404c  0001404c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004050  08004050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08004060  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004060  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011082  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f90  00000000  00000000  000310be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00033050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  00034158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002708c  00000000  00000000  00035168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bea6  00000000  00000000  0005c1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001088b7  00000000  00000000  0006809a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170951  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004908  00000000  00000000  001709cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004024 	.word	0x08004024

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004024 	.word	0x08004024

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fb00 	bl	8000822 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f82b 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f995 	bl	8000554 <MX_GPIO_Init>
  MX_DMA_Init();
 800022a:	f000 f969 	bl	8000500 <MX_DMA_Init>
  MX_ADC1_Init();
 800022e:	f000 f88f 	bl	8000350 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000232:	f000 f915 	bl	8000460 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint16_t rawValues[3];
  int value1=0;
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
  int value2=0;
 800023a:	2300      	movs	r3, #0
 800023c:	60bb      	str	r3, [r7, #8]

  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 800023e:	217f      	movs	r1, #127	; 0x7f
 8000240:	480b      	ldr	r0, [pc, #44]	; (8000270 <main+0x58>)
 8000242:	f001 fd7d 	bl	8001d40 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim3);
 8000246:	480b      	ldr	r0, [pc, #44]	; (8000274 <main+0x5c>)
 8000248:	f003 fbfc 	bl	8003a44 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawValues, 2);
 800024c:	463b      	mov	r3, r7
 800024e:	2202      	movs	r2, #2
 8000250:	4619      	mov	r1, r3
 8000252:	4807      	ldr	r0, [pc, #28]	; (8000270 <main+0x58>)
 8000254:	f000 ff48 	bl	80010e8 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(!convCompleted);
 8000258:	bf00      	nop
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <main+0x60>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0fa      	beq.n	800025a <main+0x42>
	  value1=rawValues[0];
 8000264:	883b      	ldrh	r3, [r7, #0]
 8000266:	60fb      	str	r3, [r7, #12]
	  value2=rawValues[1];
 8000268:	887b      	ldrh	r3, [r7, #2]
 800026a:	60bb      	str	r3, [r7, #8]
	  while(!convCompleted);
 800026c:	e7f4      	b.n	8000258 <main+0x40>
 800026e:	bf00      	nop
 8000270:	2000006c 	.word	0x2000006c
 8000274:	2000002c 	.word	0x2000002c
 8000278:	20000028 	.word	0x20000028

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b0a8      	sub	sp, #160	; 0xa0
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000286:	2238      	movs	r2, #56	; 0x38
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fec2 	bl	8004014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a0:	463b      	mov	r3, r7
 80002a2:	2254      	movs	r2, #84	; 0x54
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f003 feb4 	bl	8004014 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002ac:	2000      	movs	r0, #0
 80002ae:	f002 fbb1 	bl	8002a14 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b2:	2302      	movs	r3, #2
 80002b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ba:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002bc:	2340      	movs	r3, #64	; 0x40
 80002be:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	2302      	movs	r3, #2
 80002c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c6:	2302      	movs	r3, #2
 80002c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002cc:	2304      	movs	r3, #4
 80002ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002d2:	2355      	movs	r3, #85	; 0x55
 80002d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d8:	2302      	movs	r3, #2
 80002da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002de:	2302      	movs	r3, #2
 80002e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e4:	2302      	movs	r3, #2
 80002e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fc34 	bl	8002b5c <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fa:	f000 f953 	bl	80005a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000302:	2303      	movs	r3, #3
 8000304:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000312:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000316:	2108      	movs	r1, #8
 8000318:	4618      	mov	r0, r3
 800031a:	f002 ff37 	bl	800318c <HAL_RCC_ClockConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000324:	f000 f93e 	bl	80005a4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800032c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800032e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000332:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000334:	463b      	mov	r3, r7
 8000336:	4618      	mov	r0, r3
 8000338:	f003 f90c 	bl	8003554 <HAL_RCCEx_PeriphCLKConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000342:	f000 f92f 	bl	80005a4 <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	37a0      	adds	r7, #160	; 0xa0
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08c      	sub	sp, #48	; 0x30
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2220      	movs	r2, #32
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f003 fe53 	bl	8004014 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800036e:	4b39      	ldr	r3, [pc, #228]	; (8000454 <MX_ADC1_Init+0x104>)
 8000370:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000374:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000376:	4b37      	ldr	r3, [pc, #220]	; (8000454 <MX_ADC1_Init+0x104>)
 8000378:	2200      	movs	r2, #0
 800037a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800037c:	4b35      	ldr	r3, [pc, #212]	; (8000454 <MX_ADC1_Init+0x104>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000382:	4b34      	ldr	r3, [pc, #208]	; (8000454 <MX_ADC1_Init+0x104>)
 8000384:	2200      	movs	r2, #0
 8000386:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000388:	4b32      	ldr	r3, [pc, #200]	; (8000454 <MX_ADC1_Init+0x104>)
 800038a:	2200      	movs	r2, #0
 800038c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800038e:	4b31      	ldr	r3, [pc, #196]	; (8000454 <MX_ADC1_Init+0x104>)
 8000390:	2201      	movs	r2, #1
 8000392:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000394:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <MX_ADC1_Init+0x104>)
 8000396:	2204      	movs	r2, #4
 8000398:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800039a:	4b2e      	ldr	r3, [pc, #184]	; (8000454 <MX_ADC1_Init+0x104>)
 800039c:	2200      	movs	r2, #0
 800039e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003a0:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <MX_ADC1_Init+0x104>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80003a6:	4b2b      	ldr	r3, [pc, #172]	; (8000454 <MX_ADC1_Init+0x104>)
 80003a8:	2202      	movs	r2, #2
 80003aa:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ac:	4b29      	ldr	r3, [pc, #164]	; (8000454 <MX_ADC1_Init+0x104>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80003b4:	4b27      	ldr	r3, [pc, #156]	; (8000454 <MX_ADC1_Init+0x104>)
 80003b6:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80003ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80003bc:	4b25      	ldr	r3, [pc, #148]	; (8000454 <MX_ADC1_Init+0x104>)
 80003be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003c4:	4b23      	ldr	r3, [pc, #140]	; (8000454 <MX_ADC1_Init+0x104>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003cc:	4b21      	ldr	r3, [pc, #132]	; (8000454 <MX_ADC1_Init+0x104>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80003d2:	4b20      	ldr	r3, [pc, #128]	; (8000454 <MX_ADC1_Init+0x104>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003da:	481e      	ldr	r0, [pc, #120]	; (8000454 <MX_ADC1_Init+0x104>)
 80003dc:	f000 fcc4 	bl	8000d68 <HAL_ADC_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80003e6:	f000 f8dd 	bl	80005a4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003ea:	2300      	movs	r3, #0
 80003ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f2:	4619      	mov	r1, r3
 80003f4:	4817      	ldr	r0, [pc, #92]	; (8000454 <MX_ADC1_Init+0x104>)
 80003f6:	f001 fd05 	bl	8001e04 <HAL_ADCEx_MultiModeConfigChannel>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000400:	f000 f8d0 	bl	80005a4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_ADC1_Init+0x108>)
 8000406:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000408:	2306      	movs	r3, #6
 800040a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800040c:	2304      	movs	r3, #4
 800040e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000410:	237f      	movs	r3, #127	; 0x7f
 8000412:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000414:	2304      	movs	r3, #4
 8000416:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	4619      	mov	r1, r3
 8000420:	480c      	ldr	r0, [pc, #48]	; (8000454 <MX_ADC1_Init+0x104>)
 8000422:	f000 ff43 	bl	80012ac <HAL_ADC_ConfigChannel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800042c:	f000 f8ba 	bl	80005a4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <MX_ADC1_Init+0x10c>)
 8000432:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000434:	230c      	movs	r3, #12
 8000436:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_ADC1_Init+0x104>)
 800043e:	f000 ff35 	bl	80012ac <HAL_ADC_ConfigChannel>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000448:	f000 f8ac 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3730      	adds	r7, #48	; 0x30
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	2000006c 	.word	0x2000006c
 8000458:	04300002 	.word	0x04300002
 800045c:	08600004 	.word	0x08600004

08000460 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <MX_TIM3_Init+0x98>)
 8000480:	4a1e      	ldr	r2, [pc, #120]	; (80004fc <MX_TIM3_Init+0x9c>)
 8000482:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000484:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <MX_TIM3_Init+0x98>)
 8000486:	f244 2267 	movw	r2, #16999	; 0x4267
 800048a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048c:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <MX_TIM3_Init+0x98>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000492:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <MX_TIM3_Init+0x98>)
 8000494:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000498:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_TIM3_Init+0x98>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_TIM3_Init+0x98>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004a6:	4814      	ldr	r0, [pc, #80]	; (80004f8 <MX_TIM3_Init+0x98>)
 80004a8:	f003 faa0 	bl	80039ec <HAL_TIM_Base_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80004b2:	f000 f877 	bl	80005a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	480d      	ldr	r0, [pc, #52]	; (80004f8 <MX_TIM3_Init+0x98>)
 80004c4:	f003 fae8 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80004ce:	f000 f869 	bl	80005a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80004d2:	2320      	movs	r3, #32
 80004d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <MX_TIM3_Init+0x98>)
 80004e0:	f003 fd0e 	bl	8003f00 <HAL_TIMEx_MasterConfigSynchronization>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80004ea:	f000 f85b 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	3720      	adds	r7, #32
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	2000002c 	.word	0x2000002c
 80004fc:	40000400 	.word	0x40000400

08000500 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_DMA_Init+0x50>)
 8000508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <MX_DMA_Init+0x50>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6493      	str	r3, [r2, #72]	; 0x48
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_DMA_Init+0x50>)
 8000514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_DMA_Init+0x50>)
 8000520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <MX_DMA_Init+0x50>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6493      	str	r3, [r2, #72]	; 0x48
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_DMA_Init+0x50>)
 800052c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	200b      	movs	r0, #11
 800053c:	f001 fe41 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000540:	200b      	movs	r0, #11
 8000542:	f001 fe58 	bl	80021f6 <HAL_NVIC_EnableIRQ>

}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_GPIO_Init+0x2c>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <MX_GPIO_Init+0x2c>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_GPIO_Init+0x2c>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	convCompleted = 1;
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <HAL_ADC_ConvCpltCallback+0x1c>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 80005be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005c2:	6093      	str	r3, [r2, #8]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40007000 	.word	0x40007000

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <HAL_MspInit+0x44>)
 80005dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_MspInit+0x44>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6613      	str	r3, [r2, #96]	; 0x60
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <HAL_MspInit+0x44>)
 80005e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_MspInit+0x44>)
 80005f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <HAL_MspInit+0x44>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	6593      	str	r3, [r2, #88]	; 0x58
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_MspInit+0x44>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800060a:	f7ff ffd3 	bl	80005b4 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800063c:	d14f      	bne.n	80006de <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800063e:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <HAL_ADC_MspInit+0xcc>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a29      	ldr	r2, [pc, #164]	; (80006e8 <HAL_ADC_MspInit+0xcc>)
 8000644:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <HAL_ADC_MspInit+0xcc>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <HAL_ADC_MspInit+0xcc>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <HAL_ADC_MspInit+0xcc>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <HAL_ADC_MspInit+0xcc>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800066e:	2303      	movs	r3, #3
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f002 f844 	bl	8002710 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <HAL_ADC_MspInit+0xd4>)
 800068c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 8000690:	2205      	movs	r2, #5
 8000692:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 80006a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 80006b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 80006b8:	2220      	movs	r2, #32
 80006ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c2:	480a      	ldr	r0, [pc, #40]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 80006c4:	f001 fdb2 	bl	800222c <HAL_DMA_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80006ce:	f7ff ff69 	bl	80005a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a05      	ldr	r2, [pc, #20]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 80006d6:	655a      	str	r2, [r3, #84]	; 0x54
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <HAL_ADC_MspInit+0xd0>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000
 80006ec:	200000d8 	.word	0x200000d8
 80006f0:	40020008 	.word	0x40020008

080006f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <HAL_TIM_Base_MspInit+0x38>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d10b      	bne.n	800071e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_TIM_Base_MspInit+0x3c>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070a:	4a09      	ldr	r2, [pc, #36]	; (8000730 <HAL_TIM_Base_MspInit+0x3c>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6593      	str	r3, [r2, #88]	; 0x58
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <HAL_TIM_Base_MspInit+0x3c>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40000400 	.word	0x40000400
 8000730:	40021000 	.word	0x40021000

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000788:	f000 f89e 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <DMA1_Channel1_IRQHandler+0x10>)
 8000796:	f001 fe6c 	bl	8002472 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000d8 	.word	0x200000d8

080007a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <SystemInit+0x28>)
 80007aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ae:	4a07      	ldr	r2, [pc, #28]	; (80007cc <SystemInit+0x28>)
 80007b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SystemInit+0x28>)
 80007ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007be:	609a      	str	r2, [r3, #8]
#endif
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <LoopForever+0x6>)
  ldr r1, =_edata
 80007d6:	490e      	ldr	r1, [pc, #56]	; (8000810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d8:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <LoopForever+0xe>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ec:	4c0b      	ldr	r4, [pc, #44]	; (800081c <LoopForever+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007fa:	f7ff ffd3 	bl	80007a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fe:	f003 fbe5 	bl	8003fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000802:	f7ff fd09 	bl	8000218 <main>

08000806 <LoopForever>:

LoopForever:
    b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   r0, =_estack
 8000808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000814:	08004054 	.word	0x08004054
  ldr r2, =_sbss
 8000818:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800081c:	2000013c 	.word	0x2000013c

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>

08000822 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f001 fcbd 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f80e 	bl	8000854 <HAL_InitTick>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	e001      	b.n	8000848 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000844:	f7ff fec6 	bl	80005d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000848:	79fb      	ldrb	r3, [r7, #7]

}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_InitTick+0x68>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d022      	beq.n	80008ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <HAL_InitTick+0x6c>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_InitTick+0x68>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000874:	fbb1 f3f3 	udiv	r3, r1, r3
 8000878:	fbb2 f3f3 	udiv	r3, r2, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fcc8 	bl	8002212 <HAL_SYSTICK_Config>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10f      	bne.n	80008a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b0f      	cmp	r3, #15
 800088c:	d809      	bhi.n	80008a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088e:	2200      	movs	r2, #0
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	f04f 30ff 	mov.w	r0, #4294967295
 8000896:	f001 fc94 	bl	80021c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_InitTick+0x70>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	e007      	b.n	80008b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
 80008a6:	e004      	b.n	80008b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e001      	b.n	80008b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x20>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <HAL_IncTick+0x1c>)
 80008d8:	6013      	str	r3, [r2, #0]
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	20000138 	.word	0x20000138
 80008e8:	20000008 	.word	0x20000008

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <HAL_GetTick+0x14>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000138 	.word	0x20000138

08000904 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	431a      	orrs	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	609a      	str	r2, [r3, #8]
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	431a      	orrs	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	609a      	str	r2, [r3, #8]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800096c:	b490      	push	{r4, r7}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3360      	adds	r3, #96	; 0x60
 800097e:	461a      	mov	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000988:	6822      	ldr	r2, [r4, #0]
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <LL_ADC_SetOffset+0x40>)
 800098c:	4013      	ands	r3, r2
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	430a      	orrs	r2, r1
 8000998:	4313      	orrs	r3, r2
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc90      	pop	{r4, r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	03fff000 	.word	0x03fff000

080009b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80009b0:	b490      	push	{r4, r7}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3360      	adds	r3, #96	; 0x60
 80009be:	461a      	mov	r2, r3
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009c8:	6823      	ldr	r3, [r4, #0]
 80009ca:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc90      	pop	{r4, r7}
 80009d6:	4770      	bx	lr

080009d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80009d8:	b490      	push	{r4, r7}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3360      	adds	r3, #96	; 0x60
 80009e8:	461a      	mov	r2, r3
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4413      	add	r3, r2
 80009f0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc90      	pop	{r4, r7}
 8000a06:	4770      	bx	lr

08000a08 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000a08:	b490      	push	{r4, r7}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3360      	adds	r3, #96	; 0x60
 8000a18:	461a      	mov	r2, r3
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4413      	add	r3, r2
 8000a20:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc90      	pop	{r4, r7}
 8000a36:	4770      	bx	lr

08000a38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000a38:	b490      	push	{r4, r7}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3360      	adds	r3, #96	; 0x60
 8000a48:	461a      	mov	r2, r3
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000a52:	6823      	ldr	r3, [r4, #0]
 8000a54:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc90      	pop	{r4, r7}
 8000a66:	4770      	bx	lr

08000a68 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	615a      	str	r2, [r3, #20]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ab4:	b490      	push	{r4, r7}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3330      	adds	r3, #48	; 0x30
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	f003 030c 	and.w	r3, r3, #12
 8000ad0:	4413      	add	r3, r2
 8000ad2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000ad4:	6822      	ldr	r2, [r4, #0]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	f003 031f 	and.w	r3, r3, #31
 8000adc:	211f      	movs	r1, #31
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	0e9b      	lsrs	r3, r3, #26
 8000aea:	f003 011f 	and.w	r1, r3, #31
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	f003 031f 	and.w	r3, r3, #31
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc90      	pop	{r4, r7}
 8000b04:	4770      	bx	lr

08000b06 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b06:	b490      	push	{r4, r7}
 8000b08:	b084      	sub	sp, #16
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3314      	adds	r3, #20
 8000b16:	461a      	mov	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	0e5b      	lsrs	r3, r3, #25
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	4413      	add	r3, r2
 8000b24:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000b26:	6822      	ldr	r2, [r4, #0]
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	0d1b      	lsrs	r3, r3, #20
 8000b2c:	f003 031f 	and.w	r3, r3, #31
 8000b30:	2107      	movs	r1, #7
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	401a      	ands	r2, r3
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	0d1b      	lsrs	r3, r3, #20
 8000b3e:	f003 031f 	and.w	r3, r3, #31
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc90      	pop	{r4, r7}
 8000b54:	4770      	bx	lr
	...

08000b58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b70:	43db      	mvns	r3, r3
 8000b72:	401a      	ands	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0318 	and.w	r3, r3, #24
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b7c:	40d9      	lsrs	r1, r3
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	400b      	ands	r3, r1
 8000b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b86:	431a      	orrs	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	0007ffff 	.word	0x0007ffff

08000ba0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f003 031f 	and.w	r3, r3, #31
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	6093      	str	r3, [r2, #8]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bf4:	d101      	bne.n	8000bfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000c44:	d101      	bne.n	8000c4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c6c:	f043 0201 	orr.w	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c94:	f043 0202 	orr.w	r2, r3, #2
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d101      	bne.n	8000cc0 <LL_ADC_IsEnabled+0x18>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <LL_ADC_IsEnabled+0x1a>
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d101      	bne.n	8000ce6 <LL_ADC_IsDisableOngoing+0x18>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <LL_ADC_IsDisableOngoing+0x1a>
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d08:	f043 0204 	orr.w	r2, r3, #4
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d101      	bne.n	8000d34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d101      	bne.n	8000d5a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e1ad      	b.n	80010de <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d109      	bne.n	8000da4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff fc43 	bl	800061c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff19 	bl	8000be0 <LL_ADC_IsDeepPowerDownEnabled>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d004      	beq.n	8000dbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff feff 	bl	8000bbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff34 	bl	8000c30 <LL_ADC_IsInternalRegulatorEnabled>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d113      	bne.n	8000df6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff18 	bl	8000c08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000dd8:	4b9e      	ldr	r3, [pc, #632]	; (8001054 <HAL_ADC_Init+0x2ec>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	099b      	lsrs	r3, r3, #6
 8000dde:	4a9e      	ldr	r2, [pc, #632]	; (8001058 <HAL_ADC_Init+0x2f0>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	099b      	lsrs	r3, r3, #6
 8000de6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000de8:	e002      	b.n	8000df0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f9      	bne.n	8000dea <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff18 	bl	8000c30 <LL_ADC_IsInternalRegulatorEnabled>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10d      	bne.n	8000e22 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e0a:	f043 0210 	orr.w	r2, r3, #16
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff78 	bl	8000d1c <LL_ADC_REG_IsConversionOngoing>
 8000e2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f040 8148 	bne.w	80010cc <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8144 	bne.w	80010cc <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e4c:	f043 0202 	orr.w	r2, r3, #2
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff25 	bl	8000ca8 <LL_ADC_IsEnabled>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d141      	bne.n	8000ee8 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e6c:	d004      	beq.n	8000e78 <HAL_ADC_Init+0x110>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a7a      	ldr	r2, [pc, #488]	; (800105c <HAL_ADC_Init+0x2f4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d10f      	bne.n	8000e98 <HAL_ADC_Init+0x130>
 8000e78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e7c:	f7ff ff14 	bl	8000ca8 <LL_ADC_IsEnabled>
 8000e80:	4604      	mov	r4, r0
 8000e82:	4876      	ldr	r0, [pc, #472]	; (800105c <HAL_ADC_Init+0x2f4>)
 8000e84:	f7ff ff10 	bl	8000ca8 <LL_ADC_IsEnabled>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4323      	orrs	r3, r4
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	bf0c      	ite	eq
 8000e90:	2301      	moveq	r3, #1
 8000e92:	2300      	movne	r3, #0
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	e012      	b.n	8000ebe <HAL_ADC_Init+0x156>
 8000e98:	4871      	ldr	r0, [pc, #452]	; (8001060 <HAL_ADC_Init+0x2f8>)
 8000e9a:	f7ff ff05 	bl	8000ca8 <LL_ADC_IsEnabled>
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	4870      	ldr	r0, [pc, #448]	; (8001064 <HAL_ADC_Init+0x2fc>)
 8000ea2:	f7ff ff01 	bl	8000ca8 <LL_ADC_IsEnabled>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	431c      	orrs	r4, r3
 8000eaa:	486f      	ldr	r0, [pc, #444]	; (8001068 <HAL_ADC_Init+0x300>)
 8000eac:	f7ff fefc 	bl	8000ca8 <LL_ADC_IsEnabled>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4323      	orrs	r3, r4
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d012      	beq.n	8000ee8 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eca:	d004      	beq.n	8000ed6 <HAL_ADC_Init+0x16e>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a62      	ldr	r2, [pc, #392]	; (800105c <HAL_ADC_Init+0x2f4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Init+0x172>
 8000ed6:	4a65      	ldr	r2, [pc, #404]	; (800106c <HAL_ADC_Init+0x304>)
 8000ed8:	e000      	b.n	8000edc <HAL_ADC_Init+0x174>
 8000eda:	4a65      	ldr	r2, [pc, #404]	; (8001070 <HAL_ADC_Init+0x308>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	f7ff fd0e 	bl	8000904 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7f5b      	ldrb	r3, [r3, #29]
 8000eec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ef2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000ef8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000efe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f06:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d106      	bne.n	8000f24 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	045b      	lsls	r3, r3, #17
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d009      	beq.n	8000f40 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	4b4b      	ldr	r3, [pc, #300]	; (8001074 <HAL_ADC_Init+0x30c>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	69b9      	ldr	r1, [r7, #24]
 8000f50:	430b      	orrs	r3, r1
 8000f52:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fed4 	bl	8000d1c <LL_ADC_REG_IsConversionOngoing>
 8000f74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fee1 	bl	8000d42 <LL_ADC_INJ_IsConversionOngoing>
 8000f80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d17f      	bne.n	8001088 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d17c      	bne.n	8001088 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f92:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f9a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000faa:	f023 0302 	bic.w	r3, r3, #2
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	6812      	ldr	r2, [r2, #0]
 8000fb2:	69b9      	ldr	r1, [r7, #24]
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d017      	beq.n	8000ff0 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000fd8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	6911      	ldr	r1, [r2, #16]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000fee:	e013      	b.n	8001018 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ffe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001014:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800101e:	2b01      	cmp	r3, #1
 8001020:	d12a      	bne.n	8001078 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001038:	4311      	orrs	r1, r2
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800103e:	4311      	orrs	r1, r2
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001044:	430a      	orrs	r2, r1
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f042 0201 	orr.w	r2, r2, #1
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	e019      	b.n	8001088 <HAL_ADC_Init+0x320>
 8001054:	20000000 	.word	0x20000000
 8001058:	053e2d63 	.word	0x053e2d63
 800105c:	50000100 	.word	0x50000100
 8001060:	50000400 	.word	0x50000400
 8001064:	50000500 	.word	0x50000500
 8001068:	50000600 	.word	0x50000600
 800106c:	50000300 	.word	0x50000300
 8001070:	50000700 	.word	0x50000700
 8001074:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	691a      	ldr	r2, [r3, #16]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d10c      	bne.n	80010aa <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f023 010f 	bic.w	r1, r3, #15
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	1e5a      	subs	r2, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
 80010a8:	e007      	b.n	80010ba <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 020f 	bic.w	r2, r2, #15
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010be:	f023 0303 	bic.w	r3, r3, #3
 80010c2:	f043 0201 	orr.w	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80010ca:	e007      	b.n	80010dc <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d0:	f043 0210 	orr.w	r2, r3, #16
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	bf00      	nop

080010e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fc:	d004      	beq.n	8001108 <HAL_ADC_Start_DMA+0x20>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a58      	ldr	r2, [pc, #352]	; (8001264 <HAL_ADC_Start_DMA+0x17c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d101      	bne.n	800110c <HAL_ADC_Start_DMA+0x24>
 8001108:	4b57      	ldr	r3, [pc, #348]	; (8001268 <HAL_ADC_Start_DMA+0x180>)
 800110a:	e000      	b.n	800110e <HAL_ADC_Start_DMA+0x26>
 800110c:	4b57      	ldr	r3, [pc, #348]	; (800126c <HAL_ADC_Start_DMA+0x184>)
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fd46 	bl	8000ba0 <LL_ADC_GetMultimode>
 8001114:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fdfe 	bl	8000d1c <LL_ADC_REG_IsConversionOngoing>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 8096 	bne.w	8001254 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <HAL_ADC_Start_DMA+0x4e>
 8001132:	2302      	movs	r3, #2
 8001134:	e091      	b.n	800125a <HAL_ADC_Start_DMA+0x172>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d002      	beq.n	8001150 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	2b09      	cmp	r3, #9
 800114e:	d17a      	bne.n	8001246 <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 fc5b 	bl	8001a0c <ADC_Enable>
 8001156:	4603      	mov	r3, r0
 8001158:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d16d      	bne.n	800123c <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a3a      	ldr	r2, [pc, #232]	; (8001264 <HAL_ADC_Start_DMA+0x17c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d009      	beq.n	8001192 <HAL_ADC_Start_DMA+0xaa>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a3b      	ldr	r2, [pc, #236]	; (8001270 <HAL_ADC_Start_DMA+0x188>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d002      	beq.n	800118e <HAL_ADC_Start_DMA+0xa6>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	e003      	b.n	8001196 <HAL_ADC_Start_DMA+0xae>
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <HAL_ADC_Start_DMA+0x18c>)
 8001190:	e001      	b.n	8001196 <HAL_ADC_Start_DMA+0xae>
 8001192:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	4293      	cmp	r3, r2
 800119c:	d002      	beq.n	80011a4 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c0:	f023 0206 	bic.w	r2, r3, #6
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	661a      	str	r2, [r3, #96]	; 0x60
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d4:	4a28      	ldr	r2, [pc, #160]	; (8001278 <HAL_ADC_Start_DMA+0x190>)
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011dc:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_ADC_Start_DMA+0x194>)
 80011de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e4:	4a26      	ldr	r2, [pc, #152]	; (8001280 <HAL_ADC_Start_DMA+0x198>)
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	221c      	movs	r2, #28
 80011ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0210 	orr.w	r2, r2, #16
 8001206:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3340      	adds	r3, #64	; 0x40
 8001222:	4619      	mov	r1, r3
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f001 f8a8 	bl	800237c <HAL_DMA_Start_IT>
 800122c:	4603      	mov	r3, r0
 800122e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fd5d 	bl	8000cf4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800123a:	e00d      	b.n	8001258 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001244:	e008      	b.n	8001258 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001252:	e001      	b.n	8001258 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001254:	2302      	movs	r3, #2
 8001256:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001258:	7dfb      	ldrb	r3, [r7, #23]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	50000100 	.word	0x50000100
 8001268:	50000300 	.word	0x50000300
 800126c:	50000700 	.word	0x50000700
 8001270:	50000500 	.word	0x50000500
 8001274:	50000400 	.word	0x50000400
 8001278:	08001b71 	.word	0x08001b71
 800127c:	08001c49 	.word	0x08001c49
 8001280:	08001c65 	.word	0x08001c65

08001284 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0a6      	sub	sp, #152	; 0x98
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x22>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e38e      	b.n	80019ec <HAL_ADC_ConfigChannel+0x740>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fd1e 	bl	8000d1c <LL_ADC_REG_IsConversionOngoing>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 836f 	bne.w	80019c6 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	f7ff fbdd 	bl	8000ab4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fd0c 	bl	8000d1c <LL_ADC_REG_IsConversionOngoing>
 8001304:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fd18 	bl	8000d42 <LL_ADC_INJ_IsConversionOngoing>
 8001312:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001316:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800131a:	2b00      	cmp	r3, #0
 800131c:	f040 817b 	bne.w	8001616 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001320:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001324:	2b00      	cmp	r3, #0
 8001326:	f040 8176 	bne.w	8001616 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001332:	d10f      	bne.n	8001354 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2200      	movs	r2, #0
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fbe1 	bl	8000b06 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fb8b 	bl	8000a68 <LL_ADC_SetSamplingTimeCommonConfig>
 8001352:	e00e      	b.n	8001372 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	6819      	ldr	r1, [r3, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	461a      	mov	r2, r3
 8001362:	f7ff fbd0 	bl	8000b06 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fb7b 	bl	8000a68 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d022      	beq.n	80013da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	6919      	ldr	r1, [r3, #16]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013a4:	f7ff fae2 	bl	800096c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	6919      	ldr	r1, [r3, #16]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	461a      	mov	r2, r3
 80013b6:	f7ff fb27 	bl	8000a08 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	6919      	ldr	r1, [r3, #16]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	7f1b      	ldrb	r3, [r3, #28]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d102      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x124>
 80013ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ce:	e000      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x126>
 80013d0:	2300      	movs	r3, #0
 80013d2:	461a      	mov	r2, r3
 80013d4:	f7ff fb30 	bl	8000a38 <LL_ADC_SetOffsetSaturation>
 80013d8:	e11d      	b.n	8001616 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fae5 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10a      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x15a>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fada 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	0e9b      	lsrs	r3, r3, #26
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	e012      	b.n	800142c <HAL_ADC_ConfigChannel+0x180>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff facf 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001422:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001424:	fab3 f383 	clz	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	461a      	mov	r2, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001434:	2b00      	cmp	r3, #0
 8001436:	d105      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x198>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0e9b      	lsrs	r3, r3, #26
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	e00a      	b.n	800145a <HAL_ADC_ConfigChannel+0x1ae>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	429a      	cmp	r2, r3
 800145c:	d106      	bne.n	800146c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fab6 	bl	80009d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2101      	movs	r1, #1
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fa9c 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10a      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x1ec>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fa91 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	0e9b      	lsrs	r3, r3, #26
 8001492:	f003 021f 	and.w	r2, r3, #31
 8001496:	e010      	b.n	80014ba <HAL_ADC_ConfigChannel+0x20e>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fa86 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80014b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b2:	fab3 f383 	clz	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d105      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x226>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	0e9b      	lsrs	r3, r3, #26
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	e00a      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x23c>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80014e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014e2:	fab3 f383 	clz	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d106      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2200      	movs	r2, #0
 80014f2:	2101      	movs	r1, #1
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fa6f 	bl	80009d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2102      	movs	r1, #2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fa55 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10a      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x27a>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2102      	movs	r1, #2
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fa4a 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	0e9b      	lsrs	r3, r3, #26
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	e010      	b.n	8001548 <HAL_ADC_ConfigChannel+0x29c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2102      	movs	r1, #2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fa3f 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001538:	fa93 f3a3 	rbit	r3, r3
 800153c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800153e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x2b4>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0e9b      	lsrs	r3, r3, #26
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	e00a      	b.n	8001576 <HAL_ADC_ConfigChannel+0x2ca>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800156e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	429a      	cmp	r2, r3
 8001578:	d106      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	2102      	movs	r1, #2
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fa28 	bl	80009d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2103      	movs	r1, #3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fa0e 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10a      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x308>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2103      	movs	r1, #3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fa03 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	0e9b      	lsrs	r3, r3, #26
 80015ae:	f003 021f 	and.w	r2, r3, #31
 80015b2:	e010      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x32a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2103      	movs	r1, #3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f9f8 	bl	80009b0 <LL_ADC_GetOffsetChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80015cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d105      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x342>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0e9b      	lsrs	r3, r3, #26
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	e00a      	b.n	8001604 <HAL_ADC_ConfigChannel+0x358>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015f6:	fa93 f3a3 	rbit	r3, r3
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80015fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015fe:	fab3 f383 	clz	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	429a      	cmp	r2, r3
 8001606:	d106      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2200      	movs	r2, #0
 800160e:	2103      	movs	r1, #3
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f9e1 	bl	80009d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fb44 	bl	8000ca8 <LL_ADC_IsEnabled>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	f040 810c 	bne.w	8001840 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	461a      	mov	r2, r3
 8001636:	f7ff fa8f 	bl	8000b58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	4aaf      	ldr	r2, [pc, #700]	; (80018fc <HAL_ADC_ConfigChannel+0x650>)
 8001640:	4293      	cmp	r3, r2
 8001642:	f040 80fd 	bne.w	8001840 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10b      	bne.n	800166e <HAL_ADC_ConfigChannel+0x3c2>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	0e9b      	lsrs	r3, r3, #26
 800165c:	3301      	adds	r3, #1
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	2b09      	cmp	r3, #9
 8001664:	bf94      	ite	ls
 8001666:	2301      	movls	r3, #1
 8001668:	2300      	movhi	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	e012      	b.n	8001694 <HAL_ADC_ConfigChannel+0x3e8>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800167c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800167e:	fab3 f383 	clz	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	3301      	adds	r3, #1
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2b09      	cmp	r3, #9
 800168c:	bf94      	ite	ls
 800168e:	2301      	movls	r3, #1
 8001690:	2300      	movhi	r3, #0
 8001692:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001694:	2b00      	cmp	r3, #0
 8001696:	d064      	beq.n	8001762 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d107      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x408>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0e9b      	lsrs	r3, r3, #26
 80016aa:	3301      	adds	r3, #1
 80016ac:	069b      	lsls	r3, r3, #26
 80016ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016b2:	e00e      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x426>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80016c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	069b      	lsls	r3, r3, #26
 80016ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x446>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	0e9b      	lsrs	r3, r3, #26
 80016e4:	3301      	adds	r3, #1
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	e010      	b.n	8001714 <HAL_ADC_ConfigChannel+0x468>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001702:	fab3 f383 	clz	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	3301      	adds	r3, #1
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	2101      	movs	r1, #1
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	ea42 0103 	orr.w	r1, r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10a      	bne.n	800173a <HAL_ADC_ConfigChannel+0x48e>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0e9b      	lsrs	r3, r3, #26
 800172a:	3301      	adds	r3, #1
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	051b      	lsls	r3, r3, #20
 8001738:	e011      	b.n	800175e <HAL_ADC_ConfigChannel+0x4b2>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3301      	adds	r3, #1
 8001752:	f003 021f 	and.w	r2, r3, #31
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800175e:	430b      	orrs	r3, r1
 8001760:	e069      	b.n	8001836 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176a:	2b00      	cmp	r3, #0
 800176c:	d107      	bne.n	800177e <HAL_ADC_ConfigChannel+0x4d2>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0e9b      	lsrs	r3, r3, #26
 8001774:	3301      	adds	r3, #1
 8001776:	069b      	lsls	r3, r3, #26
 8001778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800177c:	e00e      	b.n	800179c <HAL_ADC_ConfigChannel+0x4f0>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	61fb      	str	r3, [r7, #28]
  return result;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	3301      	adds	r3, #1
 8001796:	069b      	lsls	r3, r3, #26
 8001798:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x510>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0e9b      	lsrs	r3, r3, #26
 80017ae:	3301      	adds	r3, #1
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	2101      	movs	r1, #1
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	e010      	b.n	80017de <HAL_ADC_ConfigChannel+0x532>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	617b      	str	r3, [r7, #20]
  return result;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	ea42 0103 	orr.w	r1, r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10d      	bne.n	800180a <HAL_ADC_ConfigChannel+0x55e>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0e9b      	lsrs	r3, r3, #26
 80017f4:	3301      	adds	r3, #1
 80017f6:	f003 021f 	and.w	r2, r3, #31
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	3b1e      	subs	r3, #30
 8001802:	051b      	lsls	r3, r3, #20
 8001804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001808:	e014      	b.n	8001834 <HAL_ADC_ConfigChannel+0x588>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	60fb      	str	r3, [r7, #12]
  return result;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	3301      	adds	r3, #1
 8001822:	f003 021f 	and.w	r2, r3, #31
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	3b1e      	subs	r3, #30
 800182e:	051b      	lsls	r3, r3, #20
 8001830:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001834:	430b      	orrs	r3, r1
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	6892      	ldr	r2, [r2, #8]
 800183a:	4619      	mov	r1, r3
 800183c:	f7ff f963 	bl	8000b06 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_ADC_ConfigChannel+0x654>)
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80c9 	beq.w	80019e0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001856:	d004      	beq.n	8001862 <HAL_ADC_ConfigChannel+0x5b6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a29      	ldr	r2, [pc, #164]	; (8001904 <HAL_ADC_ConfigChannel+0x658>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x5ba>
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <HAL_ADC_ConfigChannel+0x65c>)
 8001864:	e000      	b.n	8001868 <HAL_ADC_ConfigChannel+0x5bc>
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <HAL_ADC_ConfigChannel+0x660>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff f871 	bl	8000950 <LL_ADC_GetCommonPathInternalCh>
 800186e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a26      	ldr	r2, [pc, #152]	; (8001910 <HAL_ADC_ConfigChannel+0x664>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d004      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x5da>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a24      	ldr	r2, [pc, #144]	; (8001914 <HAL_ADC_ConfigChannel+0x668>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d14e      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001886:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800188a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d148      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800189a:	d005      	beq.n	80018a8 <HAL_ADC_ConfigChannel+0x5fc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <HAL_ADC_ConfigChannel+0x66c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	f040 8099 	bne.w	80019da <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b0:	d004      	beq.n	80018bc <HAL_ADC_ConfigChannel+0x610>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a13      	ldr	r2, [pc, #76]	; (8001904 <HAL_ADC_ConfigChannel+0x658>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x614>
 80018bc:	4a12      	ldr	r2, [pc, #72]	; (8001908 <HAL_ADC_ConfigChannel+0x65c>)
 80018be:	e000      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x616>
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <HAL_ADC_ConfigChannel+0x660>)
 80018c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f7ff f82c 	bl	800092a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_ADC_ConfigChannel+0x670>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	099b      	lsrs	r3, r3, #6
 80018d8:	4a11      	ldr	r2, [pc, #68]	; (8001920 <HAL_ADC_ConfigChannel+0x674>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	099a      	lsrs	r2, r3, #6
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80018ea:	e002      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f9      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018f8:	e06f      	b.n	80019da <HAL_ADC_ConfigChannel+0x72e>
 80018fa:	bf00      	nop
 80018fc:	407f0000 	.word	0x407f0000
 8001900:	80080000 	.word	0x80080000
 8001904:	50000100 	.word	0x50000100
 8001908:	50000300 	.word	0x50000300
 800190c:	50000700 	.word	0x50000700
 8001910:	c3210000 	.word	0xc3210000
 8001914:	90c00010 	.word	0x90c00010
 8001918:	50000600 	.word	0x50000600
 800191c:	20000000 	.word	0x20000000
 8001920:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a32      	ldr	r2, [pc, #200]	; (80019f4 <HAL_ADC_ConfigChannel+0x748>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d125      	bne.n	800197a <HAL_ADC_ConfigChannel+0x6ce>
 800192e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d11f      	bne.n	800197a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a2e      	ldr	r2, [pc, #184]	; (80019f8 <HAL_ADC_ConfigChannel+0x74c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d104      	bne.n	800194e <HAL_ADC_ConfigChannel+0x6a2>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <HAL_ADC_ConfigChannel+0x750>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d047      	beq.n	80019de <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001956:	d004      	beq.n	8001962 <HAL_ADC_ConfigChannel+0x6b6>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a26      	ldr	r2, [pc, #152]	; (80019f8 <HAL_ADC_ConfigChannel+0x74c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x6ba>
 8001962:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <HAL_ADC_ConfigChannel+0x754>)
 8001964:	e000      	b.n	8001968 <HAL_ADC_ConfigChannel+0x6bc>
 8001966:	4a27      	ldr	r2, [pc, #156]	; (8001a04 <HAL_ADC_ConfigChannel+0x758>)
 8001968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800196c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001970:	4619      	mov	r1, r3
 8001972:	4610      	mov	r0, r2
 8001974:	f7fe ffd9 	bl	800092a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001978:	e031      	b.n	80019de <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <HAL_ADC_ConfigChannel+0x75c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d12d      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d127      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_ADC_ConfigChannel+0x74c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d022      	beq.n	80019e0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a2:	d004      	beq.n	80019ae <HAL_ADC_ConfigChannel+0x702>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <HAL_ADC_ConfigChannel+0x74c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x706>
 80019ae:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <HAL_ADC_ConfigChannel+0x754>)
 80019b0:	e000      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x708>
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <HAL_ADC_ConfigChannel+0x758>)
 80019b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f7fe ffb3 	bl	800092a <LL_ADC_SetCommonPathInternalCh>
 80019c4:	e00c      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	f043 0220 	orr.w	r2, r3, #32
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80019d8:	e002      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019da:	bf00      	nop
 80019dc:	e000      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019de:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80019e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3798      	adds	r7, #152	; 0x98
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	c7520000 	.word	0xc7520000
 80019f8:	50000100 	.word	0x50000100
 80019fc:	50000500 	.word	0x50000500
 8001a00:	50000300 	.word	0x50000300
 8001a04:	50000700 	.word	0x50000700
 8001a08:	cb840000 	.word	0xcb840000

08001a0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f945 	bl	8000ca8 <LL_ADC_IsEnabled>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d146      	bne.n	8001ab2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <ADC_Enable+0xb0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00d      	beq.n	8001a4e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	f043 0210 	orr.w	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e032      	b.n	8001ab4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f900 	bl	8000c58 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001a58:	f7fe ff48 	bl	80008ec <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a5e:	e021      	b.n	8001aa4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff f91f 	bl	8000ca8 <LL_ADC_IsEnabled>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d104      	bne.n	8001a7a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f8ef 	bl	8000c58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a7a:	f7fe ff37 	bl	80008ec <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d90d      	bls.n	8001aa4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	f043 0210 	orr.w	r2, r3, #16
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e007      	b.n	8001ab4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d1d6      	bne.n	8001a60 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	8000003f 	.word	0x8000003f

08001ac0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f8fe 	bl	8000cce <LL_ADC_IsDisableOngoing>
 8001ad2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff f8e5 	bl	8000ca8 <LL_ADC_IsEnabled>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d040      	beq.n	8001b66 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d13d      	bne.n	8001b66 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030d 	and.w	r3, r3, #13
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d10c      	bne.n	8001b12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f8bf 	bl	8000c80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2203      	movs	r2, #3
 8001b08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b0a:	f7fe feef 	bl	80008ec <HAL_GetTick>
 8001b0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001b10:	e022      	b.n	8001b58 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e01c      	b.n	8001b68 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b2e:	f7fe fedd 	bl	80008ec <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d90d      	bls.n	8001b58 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	f043 0210 	orr.w	r2, r3, #16
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4c:	f043 0201 	orr.w	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e007      	b.n	8001b68 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1e3      	bne.n	8001b2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d14b      	bne.n	8001c22 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d021      	beq.n	8001be8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe ff70 	bl	8000a8e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d032      	beq.n	8001c1a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d12b      	bne.n	8001c1a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d11f      	bne.n	8001c1a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001be6:	e018      	b.n	8001c1a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d111      	bne.n	8001c1a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7fe fcb2 	bl	8000584 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c20:	e00e      	b.n	8001c40 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7ff fb32 	bl	8001298 <HAL_ADC_ErrorCallback>
}
 8001c34:	e004      	b.n	8001c40 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7ff fb14 	bl	8001284 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	f043 0204 	orr.w	r2, r3, #4
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f7ff fb04 	bl	8001298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <LL_ADC_IsEnabled>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <LL_ADC_IsEnabled+0x18>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <LL_ADC_IsEnabled+0x1a>
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_StartCalibration>:
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001cd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_IsCalibrationOnGoing>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d04:	d101      	bne.n	8001d0a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_REG_IsConversionOngoing>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d101      	bne.n	8001d30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_ADCEx_Calibration_Start+0x1c>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e04d      	b.n	8001df8 <HAL_ADCEx_Calibration_Start+0xb8>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff feab 	bl	8001ac0 <ADC_Disable>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d136      	bne.n	8001de2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d7c:	f023 0302 	bic.w	r3, r3, #2
 8001d80:	f043 0202 	orr.w	r2, r3, #2
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff95 	bl	8001cbe <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001d94:	e014      	b.n	8001dc0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <HAL_ADCEx_Calibration_Start+0xc0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d90d      	bls.n	8001dc0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	f023 0312 	bic.w	r3, r3, #18
 8001dac:	f043 0210 	orr.w	r2, r3, #16
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e01b      	b.n	8001df8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff93 	bl	8001cf0 <LL_ADC_IsCalibrationOnGoing>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1e2      	bne.n	8001d96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	f023 0303 	bic.w	r3, r3, #3
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	65da      	str	r2, [r3, #92]	; 0x5c
 8001de0:	e005      	b.n	8001dee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	f043 0210 	orr.w	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	0004de01 	.word	0x0004de01

08001e04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b0a1      	sub	sp, #132	; 0x84
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e0e3      	b.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e32:	d102      	bne.n	8001e3a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001e34:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	e009      	b.n	8001e4e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d102      	bne.n	8001e4a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8001e44:	4b6d      	ldr	r3, [pc, #436]	; (8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	e001      	b.n	8001e4e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0be      	b.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff52 	bl	8001d18 <LL_ADC_REG_IsConversionOngoing>
 8001e74:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff4c 	bl	8001d18 <LL_ADC_REG_IsConversionOngoing>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 80a0 	bne.w	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 809c 	bne.w	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a55      	ldr	r2, [pc, #340]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8001ea4:	4b56      	ldr	r3, [pc, #344]	; (8002000 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001ea6:	e000      	b.n	8001eaa <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8001ea8:	4b56      	ldr	r3, [pc, #344]	; (8002004 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001eaa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d04b      	beq.n	8001f4c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ec6:	035b      	lsls	r3, r3, #13
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ece:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed8:	d004      	beq.n	8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a45      	ldr	r2, [pc, #276]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d10f      	bne.n	8001f04 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8001ee4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ee8:	f7ff fed6 	bl	8001c98 <LL_ADC_IsEnabled>
 8001eec:	4604      	mov	r4, r0
 8001eee:	4841      	ldr	r0, [pc, #260]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8001ef0:	f7ff fed2 	bl	8001c98 <LL_ADC_IsEnabled>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4323      	orrs	r3, r4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e012      	b.n	8001f2a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8001f04:	483c      	ldr	r0, [pc, #240]	; (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8001f06:	f7ff fec7 	bl	8001c98 <LL_ADC_IsEnabled>
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	483b      	ldr	r0, [pc, #236]	; (8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001f0e:	f7ff fec3 	bl	8001c98 <LL_ADC_IsEnabled>
 8001f12:	4603      	mov	r3, r0
 8001f14:	431c      	orrs	r4, r3
 8001f16:	483c      	ldr	r0, [pc, #240]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8001f18:	f7ff febe 	bl	8001c98 <LL_ADC_IsEnabled>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4323      	orrs	r3, r4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d056      	beq.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f36:	f023 030f 	bic.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	6811      	ldr	r1, [r2, #0]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	6892      	ldr	r2, [r2, #8]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f48:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f4a:	e047      	b.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f56:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f60:	d004      	beq.n	8001f6c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a23      	ldr	r2, [pc, #140]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d10f      	bne.n	8001f8c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001f6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f70:	f7ff fe92 	bl	8001c98 <LL_ADC_IsEnabled>
 8001f74:	4604      	mov	r4, r0
 8001f76:	481f      	ldr	r0, [pc, #124]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8001f78:	f7ff fe8e 	bl	8001c98 <LL_ADC_IsEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4323      	orrs	r3, r4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	e012      	b.n	8001fb2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8001f8c:	481a      	ldr	r0, [pc, #104]	; (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8001f8e:	f7ff fe83 	bl	8001c98 <LL_ADC_IsEnabled>
 8001f92:	4604      	mov	r4, r0
 8001f94:	4819      	ldr	r0, [pc, #100]	; (8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001f96:	f7ff fe7f 	bl	8001c98 <LL_ADC_IsEnabled>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	431c      	orrs	r4, r3
 8001f9e:	481a      	ldr	r0, [pc, #104]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8001fa0:	f7ff fe7a 	bl	8001c98 <LL_ADC_IsEnabled>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4323      	orrs	r3, r4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d012      	beq.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fbe:	f023 030f 	bic.w	r3, r3, #15
 8001fc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fc4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc6:	e009      	b.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001fda:	e000      	b.n	8001fde <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fe6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3784      	adds	r7, #132	; 0x84
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	50000100 	.word	0x50000100
 8001ff8:	50000400 	.word	0x50000400
 8001ffc:	50000500 	.word	0x50000500
 8002000:	50000300 	.word	0x50000300
 8002004:	50000700 	.word	0x50000700
 8002008:	50000600 	.word	0x50000600

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <__NVIC_EnableIRQ+0x38>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff8e 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff29 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff40 	bl	8002054 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff90 	bl	8002100 <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5f 	bl	80020ac <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff33 	bl	8002070 <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa4 	bl	8002168 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e08d      	b.n	800235a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_DMA_Init+0x138>)
 8002246:	429a      	cmp	r2, r3
 8002248:	d80f      	bhi.n	800226a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	4b45      	ldr	r3, [pc, #276]	; (8002368 <HAL_DMA_Init+0x13c>)
 8002252:	4413      	add	r3, r2
 8002254:	4a45      	ldr	r2, [pc, #276]	; (800236c <HAL_DMA_Init+0x140>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	009a      	lsls	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a42      	ldr	r2, [pc, #264]	; (8002370 <HAL_DMA_Init+0x144>)
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
 8002268:	e00e      	b.n	8002288 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	4b40      	ldr	r3, [pc, #256]	; (8002374 <HAL_DMA_Init+0x148>)
 8002272:	4413      	add	r3, r2
 8002274:	4a3d      	ldr	r2, [pc, #244]	; (800236c <HAL_DMA_Init+0x140>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	009a      	lsls	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a3c      	ldr	r2, [pc, #240]	; (8002378 <HAL_DMA_Init+0x14c>)
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f9b6 	bl	800264c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022e8:	d102      	bne.n	80022f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002304:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d010      	beq.n	8002330 <HAL_DMA_Init+0x104>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b04      	cmp	r3, #4
 8002314:	d80c      	bhi.n	8002330 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f9d6 	bl	80026c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	e008      	b.n	8002342 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40020407 	.word	0x40020407
 8002368:	bffdfff8 	.word	0xbffdfff8
 800236c:	cccccccd 	.word	0xcccccccd
 8002370:	40020000 	.word	0x40020000
 8002374:	bffdfbf8 	.word	0xbffdfbf8
 8002378:	40020400 	.word	0x40020400

0800237c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_DMA_Start_IT+0x20>
 8002398:	2302      	movs	r3, #2
 800239a:	e066      	b.n	800246a <HAL_DMA_Start_IT+0xee>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d155      	bne.n	800245c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f8fb 	bl	80025d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 020e 	orr.w	r2, r2, #14
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e00f      	b.n	8002414 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0204 	bic.w	r2, r2, #4
 8002402:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 020a 	orr.w	r2, r2, #10
 8002412:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002430:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002448:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e005      	b.n	8002468 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002464:	2302      	movs	r3, #2
 8002466:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002468:	7dfb      	ldrb	r3, [r7, #23]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2204      	movs	r2, #4
 8002494:	409a      	lsls	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d026      	beq.n	80024ec <HAL_DMA_IRQHandler+0x7a>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d021      	beq.n	80024ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0204 	bic.w	r2, r2, #4
 80024c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f003 021f 	and.w	r2, r3, #31
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2104      	movs	r1, #4
 80024d4:	fa01 f202 	lsl.w	r2, r1, r2
 80024d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d071      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80024ea:	e06c      	b.n	80025c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2202      	movs	r2, #2
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d02e      	beq.n	800255e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d029      	beq.n	800255e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 020a 	bic.w	r2, r2, #10
 8002526:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	2102      	movs	r1, #2
 800253e:	fa01 f202 	lsl.w	r2, r1, r2
 8002542:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d038      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800255c:	e033      	b.n	80025c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2208      	movs	r2, #8
 8002568:	409a      	lsls	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d02a      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d025      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 020e 	bic.w	r2, r2, #14
 800258a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d004      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
}
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f202 	lsl.w	r2, r1, r2
 800260c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b10      	cmp	r3, #16
 800261c:	d108      	bne.n	8002630 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800262e:	e007      	b.n	8002640 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	60da      	str	r2, [r3, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800265c:	429a      	cmp	r2, r3
 800265e:	d802      	bhi.n	8002666 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	e001      	b.n	800266a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002668:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3b08      	subs	r3, #8
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	009a      	lsls	r2, r3, #2
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	461a      	mov	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002696:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2201      	movs	r2, #1
 80026a0:	409a      	lsls	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40020407 	.word	0x40020407
 80026b8:	40020800 	.word	0x40020800
 80026bc:	40020820 	.word	0x40020820
 80026c0:	cccccccd 	.word	0xcccccccd
 80026c4:	40020880 	.word	0x40020880

080026c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	461a      	mov	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a08      	ldr	r2, [pc, #32]	; (800270c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80026ea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2201      	movs	r2, #1
 80026f6:	409a      	lsls	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	1000823f 	.word	0x1000823f
 800270c:	40020940 	.word	0x40020940

08002710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800271e:	e15a      	b.n	80029d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 814c 	beq.w	80029d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x38>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b12      	cmp	r3, #18
 8002746:	d123      	bne.n	8002790 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	08da      	lsrs	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3208      	adds	r2, #8
 8002750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002754:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3208      	adds	r2, #8
 800278a:	6939      	ldr	r1, [r7, #16]
 800278c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0203 	and.w	r2, r3, #3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d00b      	beq.n	80027e4 <HAL_GPIO_Init+0xd4>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d007      	beq.n	80027e4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027d8:	2b11      	cmp	r3, #17
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b12      	cmp	r3, #18
 80027e2:	d130      	bne.n	8002846 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800281a:	2201      	movs	r2, #1
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	f003 0201 	and.w	r2, r3, #1
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80a6 	beq.w	80029d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002884:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <HAL_GPIO_Init+0x2e4>)
 8002886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002888:	4a5a      	ldr	r2, [pc, #360]	; (80029f4 <HAL_GPIO_Init+0x2e4>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6613      	str	r3, [r2, #96]	; 0x60
 8002890:	4b58      	ldr	r3, [pc, #352]	; (80029f4 <HAL_GPIO_Init+0x2e4>)
 8002892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800289c:	4a56      	ldr	r2, [pc, #344]	; (80029f8 <HAL_GPIO_Init+0x2e8>)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028c6:	d01f      	beq.n	8002908 <HAL_GPIO_Init+0x1f8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a4c      	ldr	r2, [pc, #304]	; (80029fc <HAL_GPIO_Init+0x2ec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d019      	beq.n	8002904 <HAL_GPIO_Init+0x1f4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a4b      	ldr	r2, [pc, #300]	; (8002a00 <HAL_GPIO_Init+0x2f0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d013      	beq.n	8002900 <HAL_GPIO_Init+0x1f0>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a4a      	ldr	r2, [pc, #296]	; (8002a04 <HAL_GPIO_Init+0x2f4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00d      	beq.n	80028fc <HAL_GPIO_Init+0x1ec>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a49      	ldr	r2, [pc, #292]	; (8002a08 <HAL_GPIO_Init+0x2f8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d007      	beq.n	80028f8 <HAL_GPIO_Init+0x1e8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a48      	ldr	r2, [pc, #288]	; (8002a0c <HAL_GPIO_Init+0x2fc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d101      	bne.n	80028f4 <HAL_GPIO_Init+0x1e4>
 80028f0:	2305      	movs	r3, #5
 80028f2:	e00a      	b.n	800290a <HAL_GPIO_Init+0x1fa>
 80028f4:	2306      	movs	r3, #6
 80028f6:	e008      	b.n	800290a <HAL_GPIO_Init+0x1fa>
 80028f8:	2304      	movs	r3, #4
 80028fa:	e006      	b.n	800290a <HAL_GPIO_Init+0x1fa>
 80028fc:	2303      	movs	r3, #3
 80028fe:	e004      	b.n	800290a <HAL_GPIO_Init+0x1fa>
 8002900:	2302      	movs	r3, #2
 8002902:	e002      	b.n	800290a <HAL_GPIO_Init+0x1fa>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_GPIO_Init+0x1fa>
 8002908:	2300      	movs	r3, #0
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	f002 0203 	and.w	r2, r2, #3
 8002910:	0092      	lsls	r2, r2, #2
 8002912:	4093      	lsls	r3, r2
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291a:	4937      	ldr	r1, [pc, #220]	; (80029f8 <HAL_GPIO_Init+0x2e8>)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002928:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_GPIO_Init+0x300>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800294c:	4a30      	ldr	r2, [pc, #192]	; (8002a10 <HAL_GPIO_Init+0x300>)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002952:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_GPIO_Init+0x300>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002976:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <HAL_GPIO_Init+0x300>)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_GPIO_Init+0x300>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HAL_GPIO_Init+0x300>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029a6:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_GPIO_Init+0x300>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ca:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <HAL_GPIO_Init+0x300>)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3301      	adds	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f47f ae9d 	bne.w	8002720 <HAL_GPIO_Init+0x10>
  }
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40010000 	.word	0x40010000
 80029fc:	48000400 	.word	0x48000400
 8002a00:	48000800 	.word	0x48000800
 8002a04:	48000c00 	.word	0x48000c00
 8002a08:	48001000 	.word	0x48001000
 8002a0c:	48001400 	.word	0x48001400
 8002a10:	40010400 	.word	0x40010400

08002a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d141      	bne.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a22:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2e:	d131      	bne.n	8002a94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a30:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a36:	4a46      	ldr	r2, [pc, #280]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a40:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a48:	4a41      	ldr	r2, [pc, #260]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a50:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2232      	movs	r2, #50	; 0x32
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	4a3f      	ldr	r2, [pc, #252]	; (8002b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	0c9b      	lsrs	r3, r3, #18
 8002a62:	3301      	adds	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a66:	e002      	b.n	8002a6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a6e:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7a:	d102      	bne.n	8002a82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f2      	bne.n	8002a68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a82:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8e:	d158      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e057      	b.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a94:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a9a:	4a2d      	ldr	r2, [pc, #180]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002aa4:	e04d      	b.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aac:	d141      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aae:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d131      	bne.n	8002b20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ac2:	4a23      	ldr	r2, [pc, #140]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2232      	movs	r2, #50	; 0x32
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	0c9b      	lsrs	r3, r3, #18
 8002aee:	3301      	adds	r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002af2:	e002      	b.n	8002afa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b06:	d102      	bne.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f2      	bne.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1a:	d112      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e011      	b.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b30:	e007      	b.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40007000 	.word	0x40007000
 8002b54:	20000000 	.word	0x20000000
 8002b58:	431bde83 	.word	0x431bde83

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e308      	b.n	8003180 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d075      	beq.n	8002c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7a:	4ba3      	ldr	r3, [pc, #652]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b84:	4ba0      	ldr	r3, [pc, #640]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d102      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3e>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d002      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x44>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	4b99      	ldr	r3, [pc, #612]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d05b      	beq.n	8002c64 <HAL_RCC_OscConfig+0x108>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d157      	bne.n	8002c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e2e3      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x74>
 8002bc2:	4b91      	ldr	r3, [pc, #580]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a90      	ldr	r2, [pc, #576]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b8b      	ldr	r3, [pc, #556]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a8a      	ldr	r2, [pc, #552]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b88      	ldr	r3, [pc, #544]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a87      	ldr	r2, [pc, #540]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bf4:	4b84      	ldr	r3, [pc, #528]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a83      	ldr	r2, [pc, #524]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b81      	ldr	r3, [pc, #516]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a80      	ldr	r2, [pc, #512]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fd fe6a 	bl	80008ec <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fd fe66 	bl	80008ec <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e2a8      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xc0>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fd fe56 	bl	80008ec <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fd fe52 	bl	80008ec <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e294      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c56:	4b6c      	ldr	r3, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0xe8>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d075      	beq.n	8002d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c72:	4b65      	ldr	r3, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7c:	4b62      	ldr	r3, [pc, #392]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b0c      	cmp	r3, #12
 8002c8a:	d102      	bne.n	8002c92 <HAL_RCC_OscConfig+0x136>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d002      	beq.n	8002c98 <HAL_RCC_OscConfig+0x13c>
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11f      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c98:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x154>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e267      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb0:	4b55      	ldr	r3, [pc, #340]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	4952      	ldr	r1, [pc, #328]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cc4:	4b51      	ldr	r3, [pc, #324]	; (8002e0c <HAL_RCC_OscConfig+0x2b0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fdc3 	bl	8000854 <HAL_InitTick>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d043      	beq.n	8002d5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e253      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d023      	beq.n	8002d28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce0:	4b49      	ldr	r3, [pc, #292]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a48      	ldr	r2, [pc, #288]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fd fdfe 	bl	80008ec <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7fd fdfa 	bl	80008ec <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e23c      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d06:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b3d      	ldr	r3, [pc, #244]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	4939      	ldr	r1, [pc, #228]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
 8002d26:	e01a      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d28:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a36      	ldr	r2, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fd fdda 	bl	80008ec <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7fd fdd6 	bl	80008ec <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e218      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d4e:	4b2e      	ldr	r3, [pc, #184]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x1e0>
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03c      	beq.n	8002de4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01c      	beq.n	8002dac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d78:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fd fdb3 	bl	80008ec <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7fd fdaf 	bl	80008ec <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e1f1      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ef      	beq.n	8002d8a <HAL_RCC_OscConfig+0x22e>
 8002daa:	e01b      	b.n	8002de4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db2:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fd fd96 	bl	80008ec <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fd fd92 	bl	80008ec <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1d4      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ef      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80ab 	beq.w	8002f48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002df6:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_RCC_OscConfig+0x2b4>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e005      	b.n	8002e12 <HAL_RCC_OscConfig+0x2b6>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	20000004 	.word	0x20000004
 8002e10:	2300      	movs	r3, #0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	4baf      	ldr	r3, [pc, #700]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	4aae      	ldr	r2, [pc, #696]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e20:	6593      	str	r3, [r2, #88]	; 0x58
 8002e22:	4bac      	ldr	r3, [pc, #688]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e32:	4ba9      	ldr	r3, [pc, #676]	; (80030d8 <HAL_RCC_OscConfig+0x57c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d118      	bne.n	8002e70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e3e:	4ba6      	ldr	r3, [pc, #664]	; (80030d8 <HAL_RCC_OscConfig+0x57c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4aa5      	ldr	r2, [pc, #660]	; (80030d8 <HAL_RCC_OscConfig+0x57c>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4a:	f7fd fd4f 	bl	80008ec <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e52:	f7fd fd4b 	bl	80008ec <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e18d      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e64:	4b9c      	ldr	r3, [pc, #624]	; (80030d8 <HAL_RCC_OscConfig+0x57c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d108      	bne.n	8002e8a <HAL_RCC_OscConfig+0x32e>
 8002e78:	4b96      	ldr	r3, [pc, #600]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	4a95      	ldr	r2, [pc, #596]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e88:	e024      	b.n	8002ed4 <HAL_RCC_OscConfig+0x378>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d110      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x358>
 8002e92:	4b90      	ldr	r3, [pc, #576]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	4a8e      	ldr	r2, [pc, #568]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea2:	4b8c      	ldr	r3, [pc, #560]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	4a8a      	ldr	r2, [pc, #552]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb2:	e00f      	b.n	8002ed4 <HAL_RCC_OscConfig+0x378>
 8002eb4:	4b87      	ldr	r3, [pc, #540]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	4a86      	ldr	r2, [pc, #536]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec4:	4b83      	ldr	r3, [pc, #524]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	4a82      	ldr	r2, [pc, #520]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d016      	beq.n	8002f0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fd fd06 	bl	80008ec <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fd fd02 	bl	80008ec <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e142      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efa:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ed      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x388>
 8002f08:	e015      	b.n	8002f36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0a:	f7fd fcef 	bl	80008ec <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fd fceb 	bl	80008ec <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e12b      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ed      	bne.n	8002f12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f36:	7ffb      	ldrb	r3, [r7, #31]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3c:	4b65      	ldr	r3, [pc, #404]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	4a64      	ldr	r2, [pc, #400]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d03c      	beq.n	8002fce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01c      	beq.n	8002f96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f5c:	4b5d      	ldr	r3, [pc, #372]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f62:	4a5c      	ldr	r2, [pc, #368]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fd fcbe 	bl	80008ec <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f74:	f7fd fcba 	bl	80008ec <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e0fc      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f86:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ef      	beq.n	8002f74 <HAL_RCC_OscConfig+0x418>
 8002f94:	e01b      	b.n	8002fce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f96:	4b4f      	ldr	r3, [pc, #316]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f9c:	4a4d      	ldr	r2, [pc, #308]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fd fca1 	bl	80008ec <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fae:	f7fd fc9d 	bl	80008ec <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0df      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fc0:	4b44      	ldr	r3, [pc, #272]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1ef      	bne.n	8002fae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80d3 	beq.w	800317e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fd8:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b0c      	cmp	r3, #12
 8002fe2:	f000 808d 	beq.w	8003100 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d15a      	bne.n	80030a4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fee:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a38      	ldr	r2, [pc, #224]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002ff4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fd fc77 	bl	80008ec <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7fd fc73 	bl	80008ec <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0b5      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003014:	4b2f      	ldr	r3, [pc, #188]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003020:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_OscConfig+0x580>)
 8003026:	4013      	ands	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6a11      	ldr	r1, [r2, #32]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003030:	3a01      	subs	r2, #1
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	4311      	orrs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800303a:	0212      	lsls	r2, r2, #8
 800303c:	4311      	orrs	r1, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003042:	0852      	lsrs	r2, r2, #1
 8003044:	3a01      	subs	r2, #1
 8003046:	0552      	lsls	r2, r2, #21
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800304e:	0852      	lsrs	r2, r2, #1
 8003050:	3a01      	subs	r2, #1
 8003052:	0652      	lsls	r2, r2, #25
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800305a:	06d2      	lsls	r2, r2, #27
 800305c:	430a      	orrs	r2, r1
 800305e:	491d      	ldr	r1, [pc, #116]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003060:	4313      	orrs	r3, r2
 8003062:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1a      	ldr	r2, [pc, #104]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 800306a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fd fc36 	bl	80008ec <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fd fc32 	bl	80008ec <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e074      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x528>
 80030a2:	e06c      	b.n	800317e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 80030c2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fd fc0e 	bl	80008ec <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d2:	e00e      	b.n	80030f2 <HAL_RCC_OscConfig+0x596>
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40007000 	.word	0x40007000
 80030dc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fd fc04 	bl	80008ec <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e046      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f2:	4b25      	ldr	r3, [pc, #148]	; (8003188 <HAL_RCC_OscConfig+0x62c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x584>
 80030fe:	e03e      	b.n	800317e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e039      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_RCC_OscConfig+0x62c>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 0203 	and.w	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	429a      	cmp	r2, r3
 800311e:	d12c      	bne.n	800317a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	3b01      	subs	r3, #1
 800312c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d123      	bne.n	800317a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d11b      	bne.n	800317a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d113      	bne.n	800317a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	3b01      	subs	r3, #1
 8003160:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d109      	bne.n	800317a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	3b01      	subs	r3, #1
 8003174:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d001      	beq.n	800317e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e11e      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b91      	ldr	r3, [pc, #580]	; (80033ec <HAL_RCC_ClockConfig+0x260>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d910      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b8e      	ldr	r3, [pc, #568]	; (80033ec <HAL_RCC_ClockConfig+0x260>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 020f 	bic.w	r2, r3, #15
 80031ba:	498c      	ldr	r1, [pc, #560]	; (80033ec <HAL_RCC_ClockConfig+0x260>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b8a      	ldr	r3, [pc, #552]	; (80033ec <HAL_RCC_ClockConfig+0x260>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e106      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d073      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d129      	bne.n	800323c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e8:	4b81      	ldr	r3, [pc, #516]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0f4      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031f8:	f000 f966 	bl	80034c8 <RCC_GetSysClockFreqFromPLLSource>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4a7c      	ldr	r2, [pc, #496]	; (80033f4 <HAL_RCC_ClockConfig+0x268>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d93f      	bls.n	8003286 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003206:	4b7a      	ldr	r3, [pc, #488]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800321a:	2b00      	cmp	r3, #0
 800321c:	d033      	beq.n	8003286 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003222:	2b00      	cmp	r3, #0
 8003224:	d12f      	bne.n	8003286 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003226:	4b72      	ldr	r3, [pc, #456]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800322e:	4a70      	ldr	r2, [pc, #448]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003234:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e024      	b.n	8003286 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d107      	bne.n	8003254 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003244:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0c6      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003254:	4b66      	ldr	r3, [pc, #408]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0be      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003264:	f000 f8ce 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 8003268:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4a61      	ldr	r2, [pc, #388]	; (80033f4 <HAL_RCC_ClockConfig+0x268>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d909      	bls.n	8003286 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003272:	4b5f      	ldr	r3, [pc, #380]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800327a:	4a5d      	ldr	r2, [pc, #372]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 800327c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003280:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003286:	4b5a      	ldr	r3, [pc, #360]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f023 0203 	bic.w	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4957      	ldr	r1, [pc, #348]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003294:	4313      	orrs	r3, r2
 8003296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003298:	f7fd fb28 	bl	80008ec <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a0:	f7fd fb24 	bl	80008ec <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e095      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 020c 	and.w	r2, r3, #12
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d1eb      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d023      	beq.n	800331c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e0:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a42      	ldr	r2, [pc, #264]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80032e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032f8:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003300:	4a3b      	ldr	r2, [pc, #236]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003302:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003306:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4936      	ldr	r1, [pc, #216]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
 800331a:	e008      	b.n	800332e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b80      	cmp	r3, #128	; 0x80
 8003320:	d105      	bne.n	800332e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003322:	4b33      	ldr	r3, [pc, #204]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4a32      	ldr	r2, [pc, #200]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003328:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800332c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800332e:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_RCC_ClockConfig+0x260>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d21d      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_ClockConfig+0x260>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 020f 	bic.w	r2, r3, #15
 8003344:	4929      	ldr	r1, [pc, #164]	; (80033ec <HAL_RCC_ClockConfig+0x260>)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800334c:	f7fd face 	bl	80008ec <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fd faca 	bl	80008ec <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e03b      	b.n	80033e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_RCC_ClockConfig+0x260>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d1ed      	bne.n	8003354 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4917      	ldr	r1, [pc, #92]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	490f      	ldr	r1, [pc, #60]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033b6:	f000 f825 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 80033ba:	4601      	mov	r1, r0
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <HAL_RCC_ClockConfig+0x264>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	4a0c      	ldr	r2, [pc, #48]	; (80033f8 <HAL_RCC_ClockConfig+0x26c>)
 80033c8:	5cd3      	ldrb	r3, [r2, r3]
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	fa21 f303 	lsr.w	r3, r1, r3
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_RCC_ClockConfig+0x270>)
 80033d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_RCC_ClockConfig+0x274>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fa3a 	bl	8000854 <HAL_InitTick>
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40022000 	.word	0x40022000
 80033f0:	40021000 	.word	0x40021000
 80033f4:	04c4b400 	.word	0x04c4b400
 80033f8:	0800403c 	.word	0x0800403c
 80033fc:	20000000 	.word	0x20000000
 8003400:	20000004 	.word	0x20000004

08003404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b04      	cmp	r3, #4
 8003414:	d102      	bne.n	800341c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003416:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	e047      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b08      	cmp	r3, #8
 8003426:	d102      	bne.n	800342e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003428:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	e03e      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800342e:	4b23      	ldr	r3, [pc, #140]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d136      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3301      	adds	r3, #1
 8003450:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d10c      	bne.n	8003472 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003458:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	4a16      	ldr	r2, [pc, #88]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003462:	68d2      	ldr	r2, [r2, #12]
 8003464:	0a12      	lsrs	r2, r2, #8
 8003466:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	617b      	str	r3, [r7, #20]
      break;
 8003470:	e00c      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003472:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	4a10      	ldr	r2, [pc, #64]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800347c:	68d2      	ldr	r2, [r2, #12]
 800347e:	0a12      	lsrs	r2, r2, #8
 8003480:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003484:	fb02 f303 	mul.w	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]
      break;
 800348a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	0e5b      	lsrs	r3, r3, #25
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	e001      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034ac:	693b      	ldr	r3, [r7, #16]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	016e3600 	.word	0x016e3600

080034c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ce:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	3301      	adds	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d10c      	bne.n	8003506 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034ec:	4a17      	ldr	r2, [pc, #92]	; (800354c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034f6:	68d2      	ldr	r2, [r2, #12]
 80034f8:	0a12      	lsrs	r2, r2, #8
 80034fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	617b      	str	r3, [r7, #20]
    break;
 8003504:	e00c      	b.n	8003520 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003506:	4a12      	ldr	r2, [pc, #72]	; (8003550 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003510:	68d2      	ldr	r2, [r2, #12]
 8003512:	0a12      	lsrs	r2, r2, #8
 8003514:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
    break;
 800351e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0e5b      	lsrs	r3, r3, #25
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	3301      	adds	r3, #1
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800353a:	687b      	ldr	r3, [r7, #4]
}
 800353c:	4618      	mov	r0, r3
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40021000 	.word	0x40021000
 800354c:	016e3600 	.word	0x016e3600
 8003550:	00f42400 	.word	0x00f42400

08003554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800355c:	2300      	movs	r3, #0
 800355e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003560:	2300      	movs	r3, #0
 8003562:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8098 	beq.w	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4b43      	ldr	r3, [pc, #268]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	4b40      	ldr	r3, [pc, #256]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	4a3f      	ldr	r2, [pc, #252]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6593      	str	r3, [r2, #88]	; 0x58
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359e:	4b3a      	ldr	r3, [pc, #232]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a39      	ldr	r2, [pc, #228]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035aa:	f7fd f99f 	bl	80008ec <HAL_GetTick>
 80035ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035b0:	e009      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fd f99b 	bl	80008ec <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d902      	bls.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	74fb      	strb	r3, [r7, #19]
        break;
 80035c4:	e005      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035c6:	4b30      	ldr	r3, [pc, #192]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0ef      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d159      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035d8:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01e      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d019      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035f4:	4b23      	ldr	r3, [pc, #140]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003600:	4b20      	ldr	r3, [pc, #128]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003610:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003620:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d016      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fd f95b 	bl	80008ec <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003638:	e00b      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fd f957 	bl	80008ec <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d902      	bls.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	74fb      	strb	r3, [r7, #19]
            break;
 8003650:	e006      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ec      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003674:	4903      	ldr	r1, [pc, #12]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800367c:	e008      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	74bb      	strb	r3, [r7, #18]
 8003682:	e005      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003684:	40021000 	.word	0x40021000
 8003688:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003690:	7c7b      	ldrb	r3, [r7, #17]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003696:	4baf      	ldr	r3, [pc, #700]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	4aae      	ldr	r2, [pc, #696]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800369c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ae:	4ba9      	ldr	r3, [pc, #676]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f023 0203 	bic.w	r2, r3, #3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	49a5      	ldr	r1, [pc, #660]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036d0:	4ba0      	ldr	r3, [pc, #640]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d6:	f023 020c 	bic.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	499d      	ldr	r1, [pc, #628]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036f2:	4b98      	ldr	r3, [pc, #608]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4994      	ldr	r1, [pc, #592]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003714:	4b8f      	ldr	r3, [pc, #572]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	498c      	ldr	r1, [pc, #560]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003736:	4b87      	ldr	r3, [pc, #540]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	4983      	ldr	r1, [pc, #524]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003758:	4b7e      	ldr	r3, [pc, #504]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	497b      	ldr	r1, [pc, #492]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800377a:	4b76      	ldr	r3, [pc, #472]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003780:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	4972      	ldr	r1, [pc, #456]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800379c:	4b6d      	ldr	r3, [pc, #436]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	496a      	ldr	r1, [pc, #424]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037be:	4b65      	ldr	r3, [pc, #404]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	4961      	ldr	r1, [pc, #388]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037e0:	4b5c      	ldr	r3, [pc, #368]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	4959      	ldr	r1, [pc, #356]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003802:	4b54      	ldr	r3, [pc, #336]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	4950      	ldr	r1, [pc, #320]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003824:	4b4b      	ldr	r3, [pc, #300]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4948      	ldr	r1, [pc, #288]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003842:	d105      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4a42      	ldr	r2, [pc, #264]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800384a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800384e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003858:	2b00      	cmp	r3, #0
 800385a:	d015      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800385c:	4b3d      	ldr	r3, [pc, #244]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386a:	493a      	ldr	r1, [pc, #232]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800387a:	d105      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800387c:	4b35      	ldr	r3, [pc, #212]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a34      	ldr	r2, [pc, #208]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003886:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d015      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003894:	4b2f      	ldr	r3, [pc, #188]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	492c      	ldr	r1, [pc, #176]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b2:	d105      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b4:	4b27      	ldr	r3, [pc, #156]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a26      	ldr	r2, [pc, #152]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038cc:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	491e      	ldr	r1, [pc, #120]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ea:	d105      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4a18      	ldr	r2, [pc, #96]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d015      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	4910      	ldr	r1, [pc, #64]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003922:	d105      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800392a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800392e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d018      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	4902      	ldr	r1, [pc, #8]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003952:	e001      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003954:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003960:	d105      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003962:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	4a20      	ldr	r2, [pc, #128]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d015      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003988:	4917      	ldr	r1, [pc, #92]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003998:	d105      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800399a:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	4a12      	ldr	r2, [pc, #72]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a4:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d015      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80039b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c0:	4909      	ldr	r1, [pc, #36]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039d0:	d105      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80039d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039dc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80039de:	7cbb      	ldrb	r3, [r7, #18]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000

080039ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e01d      	b.n	8003a3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fc fe6e 	bl	80006f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f000 f924 	bl	8003c78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <HAL_TIM_Base_Start+0x50>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d00b      	beq.n	8003a7e <HAL_TIM_Base_Start+0x3a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6c:	d007      	beq.n	8003a7e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	00010007 	.word	0x00010007

08003a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_TIM_ConfigClockSource+0x18>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e0d2      	b.n	8003c56 <HAL_TIM_ConfigClockSource+0x1be>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ada:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aec:	f000 80a9 	beq.w	8003c42 <HAL_TIM_ConfigClockSource+0x1aa>
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d81a      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x94>
 8003af6:	2b30      	cmp	r3, #48	; 0x30
 8003af8:	f000 809a 	beq.w	8003c30 <HAL_TIM_ConfigClockSource+0x198>
 8003afc:	2b30      	cmp	r3, #48	; 0x30
 8003afe:	d809      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x7c>
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	f000 8095 	beq.w	8003c30 <HAL_TIM_ConfigClockSource+0x198>
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	f000 8092 	beq.w	8003c30 <HAL_TIM_ConfigClockSource+0x198>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 808f 	beq.w	8003c30 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b12:	e097      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003b14:	2b50      	cmp	r3, #80	; 0x50
 8003b16:	d05b      	beq.n	8003bd0 <HAL_TIM_ConfigClockSource+0x138>
 8003b18:	2b50      	cmp	r3, #80	; 0x50
 8003b1a:	d802      	bhi.n	8003b22 <HAL_TIM_ConfigClockSource+0x8a>
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d077      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b20:	e090      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003b22:	2b60      	cmp	r3, #96	; 0x60
 8003b24:	d064      	beq.n	8003bf0 <HAL_TIM_ConfigClockSource+0x158>
 8003b26:	2b70      	cmp	r3, #112	; 0x70
 8003b28:	d028      	beq.n	8003b7c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8003b2a:	e08b      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003b2c:	4a4c      	ldr	r2, [pc, #304]	; (8003c60 <HAL_TIM_ConfigClockSource+0x1c8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d07e      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0x198>
 8003b32:	4a4b      	ldr	r2, [pc, #300]	; (8003c60 <HAL_TIM_ConfigClockSource+0x1c8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d810      	bhi.n	8003b5a <HAL_TIM_ConfigClockSource+0xc2>
 8003b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b3c:	d078      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0x198>
 8003b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b42:	d803      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0xb4>
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b48:	d02f      	beq.n	8003baa <HAL_TIM_ConfigClockSource+0x112>
      break;
 8003b4a:	e07b      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003b4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003b50:	d06e      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0x198>
 8003b52:	4a44      	ldr	r2, [pc, #272]	; (8003c64 <HAL_TIM_ConfigClockSource+0x1cc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d06b      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003b58:	e074      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003b5a:	4a43      	ldr	r2, [pc, #268]	; (8003c68 <HAL_TIM_ConfigClockSource+0x1d0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d067      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0x198>
 8003b60:	4a41      	ldr	r2, [pc, #260]	; (8003c68 <HAL_TIM_ConfigClockSource+0x1d0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d803      	bhi.n	8003b6e <HAL_TIM_ConfigClockSource+0xd6>
 8003b66:	4a41      	ldr	r2, [pc, #260]	; (8003c6c <HAL_TIM_ConfigClockSource+0x1d4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d061      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003b6c:	e06a      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003b6e:	4a40      	ldr	r2, [pc, #256]	; (8003c70 <HAL_TIM_ConfigClockSource+0x1d8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d05d      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0x198>
 8003b74:	4a3f      	ldr	r2, [pc, #252]	; (8003c74 <HAL_TIM_ConfigClockSource+0x1dc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d05a      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003b7a:	e063      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6899      	ldr	r1, [r3, #8]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f000 f998 	bl	8003ec0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	609a      	str	r2, [r3, #8]
      break;
 8003ba8:	e04c      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6899      	ldr	r1, [r3, #8]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f000 f981 	bl	8003ec0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bcc:	609a      	str	r2, [r3, #8]
      break;
 8003bce:	e039      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f000 f8f3 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2150      	movs	r1, #80	; 0x50
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f94c 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 8003bee:	e029      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f000 f912 	bl	8003e26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2160      	movs	r1, #96	; 0x60
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f93c 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 8003c0e:	e019      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	f000 f8d3 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2140      	movs	r1, #64	; 0x40
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 f92c 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 8003c2e:	e009      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f000 f923 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 8003c40:	e000      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8003c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	00100030 	.word	0x00100030
 8003c64:	00100020 	.word	0x00100020
 8003c68:	00100050 	.word	0x00100050
 8003c6c:	00100040 	.word	0x00100040
 8003c70:	00100060 	.word	0x00100060
 8003c74:	00100070 	.word	0x00100070

08003c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a46      	ldr	r2, [pc, #280]	; (8003da4 <TIM_Base_SetConfig+0x12c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d017      	beq.n	8003cc0 <TIM_Base_SetConfig+0x48>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c96:	d013      	beq.n	8003cc0 <TIM_Base_SetConfig+0x48>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a43      	ldr	r2, [pc, #268]	; (8003da8 <TIM_Base_SetConfig+0x130>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00f      	beq.n	8003cc0 <TIM_Base_SetConfig+0x48>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a42      	ldr	r2, [pc, #264]	; (8003dac <TIM_Base_SetConfig+0x134>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00b      	beq.n	8003cc0 <TIM_Base_SetConfig+0x48>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a41      	ldr	r2, [pc, #260]	; (8003db0 <TIM_Base_SetConfig+0x138>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d007      	beq.n	8003cc0 <TIM_Base_SetConfig+0x48>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a40      	ldr	r2, [pc, #256]	; (8003db4 <TIM_Base_SetConfig+0x13c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_Base_SetConfig+0x48>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <TIM_Base_SetConfig+0x140>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d108      	bne.n	8003cd2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a33      	ldr	r2, [pc, #204]	; (8003da4 <TIM_Base_SetConfig+0x12c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d023      	beq.n	8003d22 <TIM_Base_SetConfig+0xaa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce0:	d01f      	beq.n	8003d22 <TIM_Base_SetConfig+0xaa>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a30      	ldr	r2, [pc, #192]	; (8003da8 <TIM_Base_SetConfig+0x130>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01b      	beq.n	8003d22 <TIM_Base_SetConfig+0xaa>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a2f      	ldr	r2, [pc, #188]	; (8003dac <TIM_Base_SetConfig+0x134>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d017      	beq.n	8003d22 <TIM_Base_SetConfig+0xaa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a2e      	ldr	r2, [pc, #184]	; (8003db0 <TIM_Base_SetConfig+0x138>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <TIM_Base_SetConfig+0xaa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2d      	ldr	r2, [pc, #180]	; (8003db4 <TIM_Base_SetConfig+0x13c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00f      	beq.n	8003d22 <TIM_Base_SetConfig+0xaa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2d      	ldr	r2, [pc, #180]	; (8003dbc <TIM_Base_SetConfig+0x144>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00b      	beq.n	8003d22 <TIM_Base_SetConfig+0xaa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a2c      	ldr	r2, [pc, #176]	; (8003dc0 <TIM_Base_SetConfig+0x148>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d007      	beq.n	8003d22 <TIM_Base_SetConfig+0xaa>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a2b      	ldr	r2, [pc, #172]	; (8003dc4 <TIM_Base_SetConfig+0x14c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d003      	beq.n	8003d22 <TIM_Base_SetConfig+0xaa>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <TIM_Base_SetConfig+0x140>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d108      	bne.n	8003d34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <TIM_Base_SetConfig+0x12c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <TIM_Base_SetConfig+0x110>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <TIM_Base_SetConfig+0x13c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00f      	beq.n	8003d88 <TIM_Base_SetConfig+0x110>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <TIM_Base_SetConfig+0x144>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_Base_SetConfig+0x110>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a13      	ldr	r2, [pc, #76]	; (8003dc0 <TIM_Base_SetConfig+0x148>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d007      	beq.n	8003d88 <TIM_Base_SetConfig+0x110>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <TIM_Base_SetConfig+0x14c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0x110>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <TIM_Base_SetConfig+0x140>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d103      	bne.n	8003d90 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	615a      	str	r2, [r3, #20]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40013400 	.word	0x40013400
 8003db8:	40015000 	.word	0x40015000
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	40014400 	.word	0x40014400
 8003dc4:	40014800 	.word	0x40014800

08003dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f023 0201 	bic.w	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f023 030a 	bic.w	r3, r3, #10
 8003e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f023 0210 	bic.w	r2, r3, #16
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	031b      	lsls	r3, r3, #12
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b085      	sub	sp, #20
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f043 0307 	orr.w	r3, r3, #7
 8003eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	609a      	str	r2, [r3, #8]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	609a      	str	r2, [r3, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e04c      	b.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1f      	ldr	r2, [pc, #124]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d108      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f84:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40013400 	.word	0x40013400
 8003fc8:	40015000 	.word	0x40015000

08003fcc <__libc_init_array>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	4e0d      	ldr	r6, [pc, #52]	; (8004004 <__libc_init_array+0x38>)
 8003fd0:	4c0d      	ldr	r4, [pc, #52]	; (8004008 <__libc_init_array+0x3c>)
 8003fd2:	1ba4      	subs	r4, r4, r6
 8003fd4:	10a4      	asrs	r4, r4, #2
 8003fd6:	2500      	movs	r5, #0
 8003fd8:	42a5      	cmp	r5, r4
 8003fda:	d109      	bne.n	8003ff0 <__libc_init_array+0x24>
 8003fdc:	4e0b      	ldr	r6, [pc, #44]	; (800400c <__libc_init_array+0x40>)
 8003fde:	4c0c      	ldr	r4, [pc, #48]	; (8004010 <__libc_init_array+0x44>)
 8003fe0:	f000 f820 	bl	8004024 <_init>
 8003fe4:	1ba4      	subs	r4, r4, r6
 8003fe6:	10a4      	asrs	r4, r4, #2
 8003fe8:	2500      	movs	r5, #0
 8003fea:	42a5      	cmp	r5, r4
 8003fec:	d105      	bne.n	8003ffa <__libc_init_array+0x2e>
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ff4:	4798      	blx	r3
 8003ff6:	3501      	adds	r5, #1
 8003ff8:	e7ee      	b.n	8003fd8 <__libc_init_array+0xc>
 8003ffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ffe:	4798      	blx	r3
 8004000:	3501      	adds	r5, #1
 8004002:	e7f2      	b.n	8003fea <__libc_init_array+0x1e>
 8004004:	0800404c 	.word	0x0800404c
 8004008:	0800404c 	.word	0x0800404c
 800400c:	0800404c 	.word	0x0800404c
 8004010:	08004050 	.word	0x08004050

08004014 <memset>:
 8004014:	4402      	add	r2, r0
 8004016:	4603      	mov	r3, r0
 8004018:	4293      	cmp	r3, r2
 800401a:	d100      	bne.n	800401e <memset+0xa>
 800401c:	4770      	bx	lr
 800401e:	f803 1b01 	strb.w	r1, [r3], #1
 8004022:	e7f9      	b.n	8004018 <memset+0x4>

08004024 <_init>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr

08004030 <_fini>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	bf00      	nop
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr
