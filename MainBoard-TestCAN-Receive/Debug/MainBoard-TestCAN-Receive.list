
MainBoard-TestCAN-Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004770  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004980  08004980  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004988  08004988  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  0800499c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800499c  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c74d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018e4  00000000  00000000  0002c789  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  0002e070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002eba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002439d  00000000  00000000  0002f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009051  00000000  00000000  00053995  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e859e  00000000  00000000  0005c9e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144f84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e14  00000000  00000000  00145000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004930 	.word	0x08004930

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004930 	.word	0x08004930

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fbbd 	bl	8000c9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f866 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f99e 	bl	8000864 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f956 	bl	80007d8 <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 800052c:	f000 f8ca 	bl	80006c4 <MX_FDCAN1_Init>
  MX_FDCAN3_Init();
 8000530:	f000 f90e 	bl	8000750 <MX_FDCAN3_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.Identifier = 0x01;
 8000534:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <main+0xcc>)
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800053a:	4b2a      	ldr	r3, [pc, #168]	; (80005e4 <main+0xcc>)
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <main+0xcc>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000546:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <main+0xcc>)
 8000548:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800054c:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800054e:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <main+0xcc>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000554:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <main+0xcc>)
 8000556:	2200      	movs	r2, #0
 8000558:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800055a:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <main+0xcc>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <main+0xcc>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <main+0xcc>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  TxData[0]=1;
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <main+0xd0>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
  TxData[1]=2;
 8000572:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <main+0xd0>)
 8000574:	2202      	movs	r2, #2
 8000576:	705a      	strb	r2, [r3, #1]
  TxData[2]=3;
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <main+0xd0>)
 800057a:	2203      	movs	r2, #3
 800057c:	709a      	strb	r2, [r3, #2]
  TxData[3]=4;
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <main+0xd0>)
 8000580:	2204      	movs	r2, #4
 8000582:	70da      	strb	r2, [r3, #3]
  TxData[4]=5;
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <main+0xd0>)
 8000586:	2205      	movs	r2, #5
 8000588:	711a      	strb	r2, [r3, #4]
  TxData[5]=6;
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <main+0xd0>)
 800058c:	2206      	movs	r2, #6
 800058e:	715a      	strb	r2, [r3, #5]
  TxData[6]=7;
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <main+0xd0>)
 8000592:	2207      	movs	r2, #7
 8000594:	719a      	strb	r2, [r3, #6]
  TxData[7]=8;
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <main+0xd0>)
 8000598:	2208      	movs	r2, #8
 800059a:	71da      	strb	r2, [r3, #7]
  sFilterConfig.FilterMaskIdHigh=0;
  sFilterConfig.FilterMaskIdLow=0;
  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
  sFilterConfig.FilterActivation=ENABLE;*/

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800059c:	4813      	ldr	r0, [pc, #76]	; (80005ec <main+0xd4>)
 800059e:	f000 fe57 	bl	8001250 <HAL_FDCAN_Start>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <main+0x94>
      {
        /* Start Error */
        Error_Handler();
 80005a8:	f000 f9e8 	bl	800097c <Error_Handler>
      }
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80005ac:	2200      	movs	r2, #0
 80005ae:	2101      	movs	r1, #1
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <main+0xd4>)
 80005b2:	f000 ff93 	bl	80014dc <HAL_FDCAN_ActivateNotification>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <main+0xa8>
      {
        /* Notification Error */
        Error_Handler();
 80005bc:	f000 f9de 	bl	800097c <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80005c0:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <main+0xd0>)
 80005c2:	4908      	ldr	r1, [pc, #32]	; (80005e4 <main+0xcc>)
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <main+0xd4>)
 80005c6:	f000 fe6b 	bl	80012a0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <main+0xbc>
	  	  	{
	  	  	  // Transmission request Error
	  	  	  Error_Handler();
 80005d0:	f000 f9d4 	bl	800097c <Error_Handler>
	  	  	}
	  TxData[7]=TxData[7]+1;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <main+0xd0>)
 80005d6:	79db      	ldrb	r3, [r3, #7]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <main+0xd0>)
 80005de:	71da      	strb	r2, [r3, #7]
	 if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80005e0:	e7ee      	b.n	80005c0 <main+0xa8>
 80005e2:	bf00      	nop
 80005e4:	2000021c 	.word	0x2000021c
 80005e8:	200001d0 	.word	0x200001d0
 80005ec:	2000016c 	.word	0x2000016c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0a8      	sub	sp, #160	; 0xa0
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005fa:	2238      	movs	r2, #56	; 0x38
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 f98e 	bl	8004920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000614:	463b      	mov	r3, r7
 8000616:	2254      	movs	r2, #84	; 0x54
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 f980 	bl	8004920 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000624:	f001 fca2 	bl	8001f6c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000638:	2303      	movs	r3, #3
 800063a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 800063e:	2303      	movs	r3, #3
 8000640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000644:	2310      	movs	r3, #16
 8000646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fd27 	bl	80020b4 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800066c:	f000 f986 	bl	800097c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2303      	movs	r3, #3
 8000676:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000684:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000688:	2103      	movs	r1, #3
 800068a:	4618      	mov	r0, r3
 800068c:	f002 f82a 	bl	80026e4 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000696:	f000 f971 	bl	800097c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_FDCAN;
 800069a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800069e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fa35 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006b8:	f000 f960 	bl	800097c <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	37a0      	adds	r7, #160	; 0xa0
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_FDCAN1_Init+0x84>)
 80006ca:	4a20      	ldr	r2, [pc, #128]	; (800074c <MX_FDCAN1_Init+0x88>)
 80006cc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_FDCAN1_Init+0x84>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_FDCAN1_Init+0x84>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_FDCAN1_Init+0x84>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_FDCAN1_Init+0x84>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_FDCAN1_Init+0x84>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_FDCAN1_Init+0x84>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_FDCAN1_Init+0x84>)
 80006f4:	2205      	movs	r2, #5
 80006f6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_FDCAN1_Init+0x84>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_FDCAN1_Init+0x84>)
 8000700:	220d      	movs	r2, #13
 8000702:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_FDCAN1_Init+0x84>)
 8000706:	2202      	movs	r2, #2
 8000708:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_FDCAN1_Init+0x84>)
 800070c:	2201      	movs	r2, #1
 800070e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_FDCAN1_Init+0x84>)
 8000712:	2201      	movs	r2, #1
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_FDCAN1_Init+0x84>)
 8000718:	2201      	movs	r2, #1
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_FDCAN1_Init+0x84>)
 800071e:	2201      	movs	r2, #1
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_FDCAN1_Init+0x84>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_FDCAN1_Init+0x84>)
 800072a:	2200      	movs	r2, #0
 800072c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_FDCAN1_Init+0x84>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_FDCAN1_Init+0x84>)
 8000736:	f000 fc31 	bl	8000f9c <HAL_FDCAN_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000740:	f000 f91c 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000016c 	.word	0x2000016c
 800074c:	40006400 	.word	0x40006400

08000750 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 8000756:	4a1f      	ldr	r2, [pc, #124]	; (80007d4 <MX_FDCAN3_Init+0x84>)
 8000758:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 8000768:	2200      	movs	r2, #0
 800076a:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 800076e:	2200      	movs	r2, #0
 8000770:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 8000774:	2200      	movs	r2, #0
 8000776:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 800077a:	2201      	movs	r2, #1
 800077c:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 8000780:	2201      	movs	r2, #1
 8000782:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 8000786:	2202      	movs	r2, #2
 8000788:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 800078c:	2202      	movs	r2, #2
 800078e:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 8000792:	2201      	movs	r2, #1
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 8000798:	2201      	movs	r2, #1
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 800079e:	2201      	movs	r2, #1
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_FDCAN3_Init+0x80>)
 80007bc:	f000 fbee 	bl	8000f9c <HAL_FDCAN_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_FDCAN3_Init+0x7a>
  {
    Error_Handler();
 80007c6:	f000 f8d9 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000034 	.word	0x20000034
 80007d4:	40006c00 	.word	0x40006c00

080007d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 80007de:	4a20      	ldr	r2, [pc, #128]	; (8000860 <MX_LPUART1_UART_Init+0x88>)
 80007e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000814:	4811      	ldr	r0, [pc, #68]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 8000816:	f002 fbcd 	bl	8002fb4 <HAL_UART_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 f8ac 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000824:	2100      	movs	r1, #0
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 8000828:	f003 ff71 	bl	800470e <HAL_UARTEx_SetTxFifoThreshold>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000832:	f000 f8a3 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 800083a:	f003 ffa6 	bl	800478a <HAL_UARTEx_SetRxFifoThreshold>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8000844:	f000 f89a 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_LPUART1_UART_Init+0x84>)
 800084a:	f003 ff27 	bl	800469c <HAL_UARTEx_DisableFifoMode>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8000854:	f000 f892 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000e0 	.word	0x200000e0
 8000860:	40008000 	.word	0x40008000

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <MX_GPIO_Init+0xd4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a2e      	ldr	r2, [pc, #184]	; (8000938 <MX_GPIO_Init+0xd4>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <MX_GPIO_Init+0xd4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_GPIO_Init+0xd4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a28      	ldr	r2, [pc, #160]	; (8000938 <MX_GPIO_Init+0xd4>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_GPIO_Init+0xd4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0320 	and.w	r3, r3, #32
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_GPIO_Init+0xd4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a22      	ldr	r2, [pc, #136]	; (8000938 <MX_GPIO_Init+0xd4>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_GPIO_Init+0xd4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_GPIO_Init+0xd4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <MX_GPIO_Init+0xd4>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_GPIO_Init+0xd4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2120      	movs	r1, #32
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f001 faed 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_GPIO_Init+0xd8>)
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4811      	ldr	r0, [pc, #68]	; (8000940 <MX_GPIO_Init+0xdc>)
 80008fc:	f001 f95e 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f001 f94f 	bl	8001bbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2028      	movs	r0, #40	; 0x28
 8000924:	f000 fb05 	bl	8000f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000928:	2028      	movs	r0, #40	; 0x28
 800092a:	f000 fb1c 	bl	8000f66 <HAL_NVIC_EnableIRQ>

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	10110000 	.word	0x10110000
 8000940:	48000800 	.word	0x48000800

08000944 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
	HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,RxData);
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x28>)
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000952:	2140      	movs	r1, #64	; 0x40
 8000954:	4807      	ldr	r0, [pc, #28]	; (8000974 <HAL_FDCAN_RxFifo0Callback+0x30>)
 8000956:	f000 fce7 	bl	8001328 <HAL_FDCAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 800095a:	2104      	movs	r1, #4
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x34>)
 800095e:	f001 fac7 	bl	8001ef0 <HAL_GPIO_TogglePin>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200001d8 	.word	0x200001d8
 8000970:	20000240 	.word	0x20000240
 8000974:	2000016c 	.word	0x2000016c
 8000978:	48000400 	.word	0x48000400

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099a:	6093      	str	r3, [r2, #8]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40007000 	.word	0x40007000

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_MspInit+0x44>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6613      	str	r3, [r2, #96]	; 0x60
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x44>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6593      	str	r3, [r2, #88]	; 0x58
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80009e2:	f7ff ffd3 	bl	800098c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a3c      	ldr	r2, [pc, #240]	; (8000b04 <HAL_FDCAN_MspInit+0x110>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d13b      	bne.n	8000a8e <HAL_FDCAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000a16:	4b3c      	ldr	r3, [pc, #240]	; (8000b08 <HAL_FDCAN_MspInit+0x114>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a3a      	ldr	r2, [pc, #232]	; (8000b08 <HAL_FDCAN_MspInit+0x114>)
 8000a1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000a20:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <HAL_FDCAN_MspInit+0x114>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d10b      	bne.n	8000a40 <HAL_FDCAN_MspInit+0x4c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a28:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2c:	4a37      	ldr	r2, [pc, #220]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000a2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a32:	6593      	str	r3, [r2, #88]	; 0x58
 8000a34:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b32      	ldr	r3, [pc, #200]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a6a:	2309      	movs	r3, #9
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f001 f8a0 	bl	8001bbc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2015      	movs	r0, #21
 8000a82:	f000 fa56 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a86:	2015      	movs	r0, #21
 8000a88:	f000 fa6d 	bl	8000f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000a8c:	e035      	b.n	8000afa <HAL_FDCAN_MspInit+0x106>
  else if(hfdcan->Instance==FDCAN3)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <HAL_FDCAN_MspInit+0x11c>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d130      	bne.n	8000afa <HAL_FDCAN_MspInit+0x106>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <HAL_FDCAN_MspInit+0x114>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a1a      	ldr	r2, [pc, #104]	; (8000b08 <HAL_FDCAN_MspInit+0x114>)
 8000aa0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <HAL_FDCAN_MspInit+0x114>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d10b      	bne.n	8000ac2 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000ab0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_FDCAN_MspInit+0x118>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000ada:	2318      	movs	r3, #24
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000aea:	230b      	movs	r3, #11
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_FDCAN_MspInit+0x120>)
 8000af6:	f001 f861 	bl	8001bbc <HAL_GPIO_Init>
}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	; 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40006400 	.word	0x40006400
 8000b08:	20000028 	.word	0x20000028
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40006c00 	.word	0x40006c00
 8000b14:	48000400 	.word	0x48000400

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0x7c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d128      	bne.n	8000b8c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3e:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_UART_MspInit+0x80>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f001 f818 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40008000 	.word	0x40008000
 8000b98:	40021000 	.word	0x40021000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f8a6 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <FDCAN1_IT0_IRQHandler+0x10>)
 8000bfe:	f000 fd53 	bl	80016a8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000016c 	.word	0x2000016c

08000c0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c14:	f001 f986 	bl	8001f24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <SystemInit+0x28>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <SystemInit+0x28>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <SystemInit+0x28>)
 8000c32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c36:	609a      	str	r2, [r3, #8]
#endif
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4e:	490e      	ldr	r1, [pc, #56]	; (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c64:	4c0b      	ldr	r4, [pc, #44]	; (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c72:	f7ff ffd3 	bl	8000c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f003 fe2f 	bl	80048d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7a:	f7ff fc4d 	bl	8000518 <main>

08000c7e <LoopForever>:

LoopForever:
    b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   r0, =_estack
 8000c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c8c:	08004990 	.word	0x08004990
  ldr r2, =_sbss
 8000c90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c94:	2000026c 	.word	0x2000026c

08000c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_2_IRQHandler>

08000c9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f939 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f80e 	bl	8000ccc <HAL_InitTick>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	e001      	b.n	8000cc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cbc:	f7ff fe76 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc0:	79fb      	ldrb	r3, [r7, #7]

}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_InitTick+0x68>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d022      	beq.n	8000d26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_InitTick+0x6c>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_InitTick+0x68>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f944 	bl	8000f82 <HAL_SYSTICK_Config>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10f      	bne.n	8000d20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b0f      	cmp	r3, #15
 8000d04:	d809      	bhi.n	8000d1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d06:	2200      	movs	r2, #0
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0e:	f000 f910 	bl	8000f32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_InitTick+0x70>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	e007      	b.n	8000d2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e004      	b.n	8000d2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e001      	b.n	8000d2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x20>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d50:	6013      	str	r3, [r2, #0]
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	20000268 	.word	0x20000268
 8000d60:	20000008 	.word	0x20000008

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000268 	.word	0x20000268

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	; (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff8e 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff29 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff40 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff90 	bl	8000e70 <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5f 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff33 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffa4 	bl	8000ed8 <SysTick_Config>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e147      	b.n	800123e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d106      	bne.n	8000fc8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fd16 	bl	80009f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	699a      	ldr	r2, [r3, #24]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0210 	bic.w	r2, r2, #16
 8000fd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fd8:	f7ff fec4 	bl	8000d64 <HAL_GetTick>
 8000fdc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000fde:	e012      	b.n	8001006 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000fe0:	f7ff fec0 	bl	8000d64 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b0a      	cmp	r3, #10
 8000fec:	d90b      	bls.n	8001006 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e11b      	b.n	800123e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	2b08      	cmp	r3, #8
 8001012:	d0e5      	beq.n	8000fe0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	699a      	ldr	r2, [r3, #24]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0201 	orr.w	r2, r2, #1
 8001022:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001024:	f7ff fe9e 	bl	8000d64 <HAL_GetTick>
 8001028:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800102a:	e012      	b.n	8001052 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800102c:	f7ff fe9a 	bl	8000d64 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d90b      	bls.n	8001052 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2203      	movs	r2, #3
 800104a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e0f5      	b.n	800123e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0e5      	beq.n	800102c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0202 	orr.w	r2, r2, #2
 800106e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a74      	ldr	r2, [pc, #464]	; (8001248 <HAL_FDCAN_Init+0x2ac>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d103      	bne.n	8001082 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800107a:	4a74      	ldr	r2, [pc, #464]	; (800124c <HAL_FDCAN_Init+0x2b0>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7c1b      	ldrb	r3, [r3, #16]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d108      	bne.n	800109c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	699a      	ldr	r2, [r3, #24]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001098:	619a      	str	r2, [r3, #24]
 800109a:	e007      	b.n	80010ac <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	699a      	ldr	r2, [r3, #24]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7c5b      	ldrb	r3, [r3, #17]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d108      	bne.n	80010c6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	699a      	ldr	r2, [r3, #24]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010c2:	619a      	str	r2, [r3, #24]
 80010c4:	e007      	b.n	80010d6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	699a      	ldr	r2, [r3, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7c9b      	ldrb	r3, [r3, #18]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d108      	bne.n	80010f0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	699a      	ldr	r2, [r3, #24]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010ec:	619a      	str	r2, [r3, #24]
 80010ee:	e007      	b.n	8001100 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	699a      	ldr	r2, [r3, #24]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010fe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	699a      	ldr	r2, [r3, #24]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001124:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0210 	bic.w	r2, r2, #16
 8001134:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 0204 	orr.w	r2, r2, #4
 800114c:	619a      	str	r2, [r3, #24]
 800114e:	e02c      	b.n	80011aa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d028      	beq.n	80011aa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d01c      	beq.n	800119a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	699a      	ldr	r2, [r3, #24]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800116e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0210 	orr.w	r2, r2, #16
 800117e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d110      	bne.n	80011aa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699a      	ldr	r2, [r3, #24]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0220 	orr.w	r2, r2, #32
 8001196:	619a      	str	r2, [r3, #24]
 8001198:	e007      	b.n	80011aa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	699a      	ldr	r2, [r3, #24]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f042 0220 	orr.w	r2, r2, #32
 80011a8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011ba:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80011c2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011d2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011d4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011de:	d115      	bne.n	800120c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	3b01      	subs	r3, #1
 80011ec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011ee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	3b01      	subs	r3, #1
 80011f6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011f8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	3b01      	subs	r3, #1
 8001202:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001208:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800120a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	430a      	orrs	r2, r1
 800121e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fbe2 	bl	80019ec <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40006400 	.word	0x40006400
 800124c:	40006500 	.word	0x40006500

08001250 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d110      	bne.n	8001286 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2202      	movs	r2, #2
 8001268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699a      	ldr	r2, [r3, #24]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e006      	b.n	8001294 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128a:	f043 0204 	orr.w	r2, r3, #4
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
  }
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d12c      	bne.n	8001312 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d007      	beq.n	80012d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e023      	b.n	8001320 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012e0:	0c1b      	lsrs	r3, r3, #16
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 fbe8 	bl	8001ac4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001304:	2201      	movs	r2, #1
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	409a      	lsls	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e006      	b.n	8001320 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	f043 0208 	orr.w	r2, r3, #8
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
  }
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001328:	b480      	push	{r7}
 800132a:	b08b      	sub	sp, #44	; 0x2c
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800133c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800133e:	7efb      	ldrb	r3, [r7, #27]
 8001340:	2b02      	cmp	r3, #2
 8001342:	f040 80bc 	bne.w	80014be <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b40      	cmp	r3, #64	; 0x40
 800134a:	d121      	bne.n	8001390 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	2b00      	cmp	r3, #0
 800135a:	d107      	bne.n	800136c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001360:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0af      	b.n	80014cc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	4613      	mov	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	440b      	add	r3, r1
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
 800138e:	e020      	b.n	80013d2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	2b00      	cmp	r3, #0
 800139e:	d107      	bne.n	80013b0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e08d      	b.n	80014cc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d107      	bne.n	80013f6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	0c9b      	lsrs	r3, r3, #18
 80013ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e005      	b.n	8001402 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	3304      	adds	r3, #4
 800141e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0e1b      	lsrs	r3, r3, #24
 8001454:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0fda      	lsrs	r2, r3, #31
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	3304      	adds	r3, #4
 800146a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
 8001474:	e00a      	b.n	800148c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	441a      	add	r2, r3
 800147c:	6839      	ldr	r1, [r7, #0]
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	440b      	add	r3, r1
 8001482:	7812      	ldrb	r2, [r2, #0]
 8001484:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	3301      	adds	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0c1b      	lsrs	r3, r3, #16
 8001492:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001494:	5cd3      	ldrb	r3, [r2, r3]
 8001496:	461a      	mov	r2, r3
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	4293      	cmp	r3, r2
 800149c:	d3eb      	bcc.n	8001476 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b40      	cmp	r3, #64	; 0x40
 80014a2:	d105      	bne.n	80014b0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80014ae:	e004      	b.n	80014ba <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e006      	b.n	80014cc <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c2:	f043 0208 	orr.w	r2, r3, #8
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
  }
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	372c      	adds	r7, #44	; 0x2c
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	08004970 	.word	0x08004970

080014dc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014ee:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d003      	beq.n	80014fe <HAL_FDCAN_ActivateNotification+0x22>
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	f040 80c8 	bne.w	800168e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <HAL_FDCAN_ActivateNotification+0x3e>
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d03b      	beq.n	8001592 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d031      	beq.n	8001592 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b00      	cmp	r3, #0
 8001540:	d027      	beq.n	8001592 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d01d      	beq.n	8001592 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	d013      	beq.n	8001592 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f003 0320 	and.w	r3, r3, #32
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00c      	beq.n	80015a2 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158e:	2b00      	cmp	r3, #0
 8001590:	d107      	bne.n	80015a2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d004      	beq.n	80015b6 <HAL_FDCAN_ActivateNotification+0xda>
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d13b      	bne.n	800162e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d131      	bne.n	800162e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d127      	bne.n	800162e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d004      	beq.n	80015f2 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d11d      	bne.n	800162e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d004      	beq.n	8001606 <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	2b00      	cmp	r3, #0
 8001604:	d113      	bne.n	800162e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00c      	beq.n	800163e <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162a:	2b00      	cmp	r3, #0
 800162c:	d007      	beq.n	800163e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0202 	orr.w	r2, r2, #2
 800163c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	430a      	orrs	r2, r1
 8001658:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	430a      	orrs	r2, r1
 8001676:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	430a      	orrs	r2, r1
 8001688:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e006      	b.n	800169c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	f043 0202 	orr.w	r2, r3, #2
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
  }
}
 800169c:	4618      	mov	r0, r3
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c4:	4013      	ands	r3, r2
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016da:	6a3a      	ldr	r2, [r7, #32]
 80016dc:	4013      	ands	r3, r2
 80016de:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016ea:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fe:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001702:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001716:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800171a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4013      	ands	r3, r2
 8001726:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800172e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00d      	beq.n	8001752 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2240      	movs	r2, #64	; 0x40
 800174a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f92e 	bl	80019ae <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01b      	beq.n	8001798 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d014      	beq.n	8001798 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001776:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001790:	6939      	ldr	r1, [r7, #16]
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f8ec 	bl	8001970 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80017a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f8b6 	bl	800191a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d007      	beq.n	80017c4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6a3a      	ldr	r2, [r7, #32]
 80017ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80017bc:	6a39      	ldr	r1, [r7, #32]
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff f8c0 	bl	8000944 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80017d2:	69f9      	ldr	r1, [r7, #28]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f8ab 	bl	8001930 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00e      	beq.n	8001806 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f8a0 	bl	8001946 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001810:	2b00      	cmp	r3, #0
 8001812:	d01a      	beq.n	800184a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181e:	2b00      	cmp	r3, #0
 8001820:	d013      	beq.n	800184a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800182a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f888 	bl	800195a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00e      	beq.n	8001876 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d007      	beq.n	8001876 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f888 	bl	8001986 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00e      	beq.n	80018a2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800189a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f87c 	bl	800199a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d011      	beq.n	80018d4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00a      	beq.n	80018d4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80018e2:	6979      	ldr	r1, [r7, #20]
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f876 	bl	80019d6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f858 	bl	80019c2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80019f6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2f      	ldr	r2, [pc, #188]	; (8001abc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d103      	bne.n	8001a0a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001a08:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a2c      	ldr	r2, [pc, #176]	; (8001ac0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d103      	bne.n	8001a1c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001a1a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a2a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	041a      	lsls	r2, r3, #16
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a50:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a58:	061a      	lsls	r2, r3, #24
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e005      	b.n	8001a9e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d3f3      	bcc.n	8001a92 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	4000a400 	.word	0x4000a400
 8001abc:	40006800 	.word	0x40006800
 8001ac0:	40006c00 	.word	0x40006c00

08001ac4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10a      	bne.n	8001af0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001ae2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e00a      	b.n	8001b06 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001af8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001afe:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b04:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001b10:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001b16:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001b1c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	3304      	adds	r3, #4
 8001b42:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e020      	b.n	8001b98 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3303      	adds	r3, #3
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3302      	adds	r3, #2
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	440b      	add	r3, r1
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b6e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	440b      	add	r3, r1
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001b7c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	440a      	add	r2, r1
 8001b84:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001b86:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3304      	adds	r3, #4
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0c1b      	lsrs	r3, r3, #16
 8001b9e:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <FDCAN_CopyMessageToRAM+0xf4>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d3d5      	bcc.n	8001b56 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001baa:	bf00      	nop
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	08004970 	.word	0x08004970

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bca:	e15a      	b.n	8001e82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 814c 	beq.w	8001e7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d00b      	beq.n	8001c04 <HAL_GPIO_Init+0x48>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d007      	beq.n	8001c04 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf8:	2b11      	cmp	r3, #17
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b12      	cmp	r3, #18
 8001c02:	d130      	bne.n	8001c66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	f003 0201 	and.w	r2, r3, #1
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0xea>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b12      	cmp	r3, #18
 8001ca4:	d123      	bne.n	8001cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	6939      	ldr	r1, [r7, #16]
 8001cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0203 	and.w	r2, r3, #3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80a6 	beq.w	8001e7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d30:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <HAL_GPIO_Init+0x2e4>)
 8001d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d34:	4a5a      	ldr	r2, [pc, #360]	; (8001ea0 <HAL_GPIO_Init+0x2e4>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d3c:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <HAL_GPIO_Init+0x2e4>)
 8001d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d48:	4a56      	ldr	r2, [pc, #344]	; (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	220f      	movs	r2, #15
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d72:	d01f      	beq.n	8001db4 <HAL_GPIO_Init+0x1f8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <HAL_GPIO_Init+0x2ec>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d019      	beq.n	8001db0 <HAL_GPIO_Init+0x1f4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a4b      	ldr	r2, [pc, #300]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_GPIO_Init+0x1f0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <HAL_GPIO_Init+0x2f4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00d      	beq.n	8001da8 <HAL_GPIO_Init+0x1ec>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <HAL_GPIO_Init+0x2f8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0x1e8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a48      	ldr	r2, [pc, #288]	; (8001eb8 <HAL_GPIO_Init+0x2fc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_GPIO_Init+0x1e4>
 8001d9c:	2305      	movs	r3, #5
 8001d9e:	e00a      	b.n	8001db6 <HAL_GPIO_Init+0x1fa>
 8001da0:	2306      	movs	r3, #6
 8001da2:	e008      	b.n	8001db6 <HAL_GPIO_Init+0x1fa>
 8001da4:	2304      	movs	r3, #4
 8001da6:	e006      	b.n	8001db6 <HAL_GPIO_Init+0x1fa>
 8001da8:	2303      	movs	r3, #3
 8001daa:	e004      	b.n	8001db6 <HAL_GPIO_Init+0x1fa>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x1fa>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_GPIO_Init+0x1fa>
 8001db4:	2300      	movs	r3, #0
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	f002 0203 	and.w	r2, r2, #3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc6:	4937      	ldr	r1, [pc, #220]	; (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dd4:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001df8:	4a30      	ldr	r2, [pc, #192]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e22:	4a26      	ldr	r2, [pc, #152]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e28:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e76:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f47f ae9d 	bne.w	8001bcc <HAL_GPIO_Init+0x10>
  }
}
 8001e92:	bf00      	nop
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	48000400 	.word	0x48000400
 8001eac:	48000800 	.word	0x48000800
 8001eb0:	48000c00 	.word	0x48000c00
 8001eb4:	48001000 	.word	0x48001000
 8001eb8:	48001400 	.word	0x48001400
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001edc:	e002      	b.n	8001ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f08:	887a      	ldrh	r2, [r7, #2]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001f0e:	e002      	b.n	8001f16 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f10:	887a      	ldrh	r2, [r7, #2]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	619a      	str	r2, [r3, #24]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f806 	bl	8001f54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40010400 	.word	0x40010400

08001f54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d141      	bne.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f7a:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f86:	d131      	bne.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f88:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f8e:	4a46      	ldr	r2, [pc, #280]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f98:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fa0:	4a41      	ldr	r2, [pc, #260]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fa8:	4b40      	ldr	r3, [pc, #256]	; (80020ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2232      	movs	r2, #50	; 0x32
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	4a3f      	ldr	r2, [pc, #252]	; (80020b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	0c9b      	lsrs	r3, r3, #18
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fbe:	e002      	b.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc6:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd2:	d102      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f2      	bne.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fda:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe6:	d158      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e057      	b.n	800209c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ff2:	4a2d      	ldr	r2, [pc, #180]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ff8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ffc:	e04d      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002004:	d141      	bne.n	800208a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002012:	d131      	bne.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002014:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800201a:	4a23      	ldr	r2, [pc, #140]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002020:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002024:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800202c:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002032:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2232      	movs	r2, #50	; 0x32
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	0c9b      	lsrs	r3, r3, #18
 8002046:	3301      	adds	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800204a:	e002      	b.n	8002052 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3b01      	subs	r3, #1
 8002050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205e:	d102      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f2      	bne.n	800204c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002072:	d112      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e011      	b.n	800209c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002088:	e007      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002098:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40007000 	.word	0x40007000
 80020ac:	20000000 	.word	0x20000000
 80020b0:	431bde83 	.word	0x431bde83

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e308      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d075      	beq.n	80021be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d2:	4ba3      	ldr	r3, [pc, #652]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020dc:	4ba0      	ldr	r3, [pc, #640]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3e>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_OscConfig+0x44>
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d10b      	bne.n	8002110 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	4b99      	ldr	r3, [pc, #612]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d05b      	beq.n	80021bc <HAL_RCC_OscConfig+0x108>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d157      	bne.n	80021bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e2e3      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002118:	d106      	bne.n	8002128 <HAL_RCC_OscConfig+0x74>
 800211a:	4b91      	ldr	r3, [pc, #580]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a90      	ldr	r2, [pc, #576]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0xb0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x98>
 8002132:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a8a      	ldr	r2, [pc, #552]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b88      	ldr	r3, [pc, #544]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a87      	ldr	r2, [pc, #540]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xb0>
 800214c:	4b84      	ldr	r3, [pc, #528]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a83      	ldr	r2, [pc, #524]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b81      	ldr	r3, [pc, #516]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a80      	ldr	r2, [pc, #512]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe fdfa 	bl	8000d64 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7fe fdf6 	bl	8000d64 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e2a8      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002186:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xc0>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe fde6 	bl	8000d64 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7fe fde2 	bl	8000d64 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e294      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ae:	4b6c      	ldr	r3, [pc, #432]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0xe8>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d075      	beq.n	80022b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ca:	4b65      	ldr	r3, [pc, #404]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d4:	4b62      	ldr	r3, [pc, #392]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_OscConfig+0x136>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_OscConfig+0x13c>
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d11f      	bne.n	8002230 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f0:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_OscConfig+0x154>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e267      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b55      	ldr	r3, [pc, #340]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	4952      	ldr	r1, [pc, #328]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800221c:	4b51      	ldr	r3, [pc, #324]	; (8002364 <HAL_RCC_OscConfig+0x2b0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fd53 	bl	8000ccc <HAL_InitTick>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d043      	beq.n	80022b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e253      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	4b49      	ldr	r3, [pc, #292]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a48      	ldr	r2, [pc, #288]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fd8e 	bl	8000d64 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7fe fd8a 	bl	8000d64 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e23c      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225e:	4b40      	ldr	r3, [pc, #256]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	061b      	lsls	r3, r3, #24
 8002278:	4939      	ldr	r1, [pc, #228]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
 800227e:	e01a      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a36      	ldr	r2, [pc, #216]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fd6a 	bl	8000d64 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7fe fd66 	bl	8000d64 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e218      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a6:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1e0>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d03c      	beq.n	800233c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01c      	beq.n	8002304 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d0:	4a23      	ldr	r2, [pc, #140]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7fe fd43 	bl	8000d64 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e2:	f7fe fd3f 	bl	8000d64 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e1f1      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ef      	beq.n	80022e2 <HAL_RCC_OscConfig+0x22e>
 8002302:	e01b      	b.n	800233c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230a:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fe fd26 	bl	8000d64 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7fe fd22 	bl	8000d64 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1d4      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1ef      	bne.n	800231c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80ab 	beq.w	80024a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x2b4>
 800235a:	2301      	movs	r3, #1
 800235c:	e005      	b.n	800236a <HAL_RCC_OscConfig+0x2b6>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	20000004 	.word	0x20000004
 8002368:	2300      	movs	r3, #0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00d      	beq.n	800238a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4baf      	ldr	r3, [pc, #700]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	4aae      	ldr	r2, [pc, #696]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	6593      	str	r3, [r2, #88]	; 0x58
 800237a:	4bac      	ldr	r3, [pc, #688]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238a:	4ba9      	ldr	r3, [pc, #676]	; (8002630 <HAL_RCC_OscConfig+0x57c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002396:	4ba6      	ldr	r3, [pc, #664]	; (8002630 <HAL_RCC_OscConfig+0x57c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4aa5      	ldr	r2, [pc, #660]	; (8002630 <HAL_RCC_OscConfig+0x57c>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7fe fcdf 	bl	8000d64 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7fe fcdb 	bl	8000d64 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e18d      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	4b9c      	ldr	r3, [pc, #624]	; (8002630 <HAL_RCC_OscConfig+0x57c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d108      	bne.n	80023e2 <HAL_RCC_OscConfig+0x32e>
 80023d0:	4b96      	ldr	r3, [pc, #600]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	4a95      	ldr	r2, [pc, #596]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e0:	e024      	b.n	800242c <HAL_RCC_OscConfig+0x378>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d110      	bne.n	800240c <HAL_RCC_OscConfig+0x358>
 80023ea:	4b90      	ldr	r3, [pc, #576]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	4a8e      	ldr	r2, [pc, #568]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fa:	4b8c      	ldr	r3, [pc, #560]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	4a8a      	ldr	r2, [pc, #552]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240a:	e00f      	b.n	800242c <HAL_RCC_OscConfig+0x378>
 800240c:	4b87      	ldr	r3, [pc, #540]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	4a86      	ldr	r2, [pc, #536]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800241c:	4b83      	ldr	r3, [pc, #524]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	4a82      	ldr	r2, [pc, #520]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d016      	beq.n	8002462 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe fc96 	bl	8000d64 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fc92 	bl	8000d64 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e142      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002452:	4b76      	ldr	r3, [pc, #472]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ed      	beq.n	800243c <HAL_RCC_OscConfig+0x388>
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe fc7f 	bl	8000d64 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fc7b 	bl	8000d64 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e12b      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ed      	bne.n	800246a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800248e:	7ffb      	ldrb	r3, [r7, #31]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b65      	ldr	r3, [pc, #404]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	4a64      	ldr	r2, [pc, #400]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800249a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d03c      	beq.n	8002526 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01c      	beq.n	80024ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024b4:	4b5d      	ldr	r3, [pc, #372]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80024b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ba:	4a5c      	ldr	r2, [pc, #368]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7fe fc4e 	bl	8000d64 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024cc:	f7fe fc4a 	bl	8000d64 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0fc      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024de:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80024e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ef      	beq.n	80024cc <HAL_RCC_OscConfig+0x418>
 80024ec:	e01b      	b.n	8002526 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ee:	4b4f      	ldr	r3, [pc, #316]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80024f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f4:	4a4d      	ldr	r2, [pc, #308]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe fc31 	bl	8000d64 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002506:	f7fe fc2d 	bl	8000d64 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0df      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002518:	4b44      	ldr	r3, [pc, #272]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800251a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1ef      	bne.n	8002506 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80d3 	beq.w	80026d6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002530:	4b3e      	ldr	r3, [pc, #248]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b0c      	cmp	r3, #12
 800253a:	f000 808d 	beq.w	8002658 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d15a      	bne.n	80025fc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a38      	ldr	r2, [pc, #224]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800254c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe fc07 	bl	8000d64 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe fc03 	bl	8000d64 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0b5      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256c:	4b2f      	ldr	r3, [pc, #188]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002578:	4b2c      	ldr	r3, [pc, #176]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCC_OscConfig+0x580>)
 800257e:	4013      	ands	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6a11      	ldr	r1, [r2, #32]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002588:	3a01      	subs	r2, #1
 800258a:	0112      	lsls	r2, r2, #4
 800258c:	4311      	orrs	r1, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002592:	0212      	lsls	r2, r2, #8
 8002594:	4311      	orrs	r1, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800259a:	0852      	lsrs	r2, r2, #1
 800259c:	3a01      	subs	r2, #1
 800259e:	0552      	lsls	r2, r2, #21
 80025a0:	4311      	orrs	r1, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025a6:	0852      	lsrs	r2, r2, #1
 80025a8:	3a01      	subs	r2, #1
 80025aa:	0652      	lsls	r2, r2, #25
 80025ac:	4311      	orrs	r1, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025b2:	06d2      	lsls	r2, r2, #27
 80025b4:	430a      	orrs	r2, r1
 80025b6:	491d      	ldr	r1, [pc, #116]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1a      	ldr	r2, [pc, #104]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fbc6 	bl	8000d64 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe fbc2 	bl	8000d64 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e074      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x528>
 80025fa:	e06c      	b.n	80026d6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002606:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800261a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800261e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002622:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fb9e 	bl	8000d64 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262a:	e00e      	b.n	800264a <HAL_RCC_OscConfig+0x596>
 800262c:	40021000 	.word	0x40021000
 8002630:	40007000 	.word	0x40007000
 8002634:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fb94 	bl	8000d64 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e046      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_RCC_OscConfig+0x62c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x584>
 8002656:	e03e      	b.n	80026d6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e039      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002664:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <HAL_RCC_OscConfig+0x62c>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0203 	and.w	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	429a      	cmp	r2, r3
 8002676:	d12c      	bne.n	80026d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	3b01      	subs	r3, #1
 8002684:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d123      	bne.n	80026d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d11b      	bne.n	80026d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d113      	bne.n	80026d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	3b01      	subs	r3, #1
 80026b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d109      	bne.n	80026d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	3b01      	subs	r3, #1
 80026cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e11e      	b.n	800293a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026fc:	4b91      	ldr	r3, [pc, #580]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d910      	bls.n	800272c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b8e      	ldr	r3, [pc, #568]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 020f 	bic.w	r2, r3, #15
 8002712:	498c      	ldr	r1, [pc, #560]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b8a      	ldr	r3, [pc, #552]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e106      	b.n	800293a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d073      	beq.n	8002820 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d129      	bne.n	8002794 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002740:	4b81      	ldr	r3, [pc, #516]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0f4      	b.n	800293a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002750:	f000 f99e 	bl	8002a90 <RCC_GetSysClockFreqFromPLLSource>
 8002754:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4a7c      	ldr	r2, [pc, #496]	; (800294c <HAL_RCC_ClockConfig+0x268>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d93f      	bls.n	80027de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800275e:	4b7a      	ldr	r3, [pc, #488]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002772:	2b00      	cmp	r3, #0
 8002774:	d033      	beq.n	80027de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800277a:	2b00      	cmp	r3, #0
 800277c:	d12f      	bne.n	80027de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800277e:	4b72      	ldr	r3, [pc, #456]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002786:	4a70      	ldr	r2, [pc, #448]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e024      	b.n	80027de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d107      	bne.n	80027ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279c:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d109      	bne.n	80027bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0c6      	b.n	800293a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ac:	4b66      	ldr	r3, [pc, #408]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0be      	b.n	800293a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027bc:	f000 f8ce 	bl	800295c <HAL_RCC_GetSysClockFreq>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4a61      	ldr	r2, [pc, #388]	; (800294c <HAL_RCC_ClockConfig+0x268>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d909      	bls.n	80027de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027ca:	4b5f      	ldr	r3, [pc, #380]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027d2:	4a5d      	ldr	r2, [pc, #372]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 80027d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027de:	4b5a      	ldr	r3, [pc, #360]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f023 0203 	bic.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4957      	ldr	r1, [pc, #348]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f0:	f7fe fab8 	bl	8000d64 <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	e00a      	b.n	800280e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7fe fab4 	bl	8000d64 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e095      	b.n	800293a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	4b4e      	ldr	r3, [pc, #312]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 020c 	and.w	r2, r3, #12
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	429a      	cmp	r2, r3
 800281e:	d1eb      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d023      	beq.n	8002874 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	4b43      	ldr	r3, [pc, #268]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a42      	ldr	r2, [pc, #264]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 800283e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002842:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002850:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002858:	4a3b      	ldr	r2, [pc, #236]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 800285a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800285e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4936      	ldr	r1, [pc, #216]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
 8002872:	e008      	b.n	8002886 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b80      	cmp	r3, #128	; 0x80
 8002878:	d105      	bne.n	8002886 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800287a:	4b33      	ldr	r3, [pc, #204]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4a32      	ldr	r2, [pc, #200]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 8002880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002884:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002886:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d21d      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 020f 	bic.w	r2, r3, #15
 800289c:	4929      	ldr	r1, [pc, #164]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fa5e 	bl	8000d64 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ac:	f7fe fa5a 	bl	8000d64 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e03b      	b.n	800293a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1ed      	bne.n	80028ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4917      	ldr	r1, [pc, #92]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	490f      	ldr	r1, [pc, #60]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800290e:	f000 f825 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8002912:	4601      	mov	r1, r0
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_RCC_ClockConfig+0x26c>)
 8002920:	5cd3      	ldrb	r3, [r2, r3]
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	fa21 f303 	lsr.w	r3, r1, r3
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x270>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_ClockConfig+0x274>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe f9ca 	bl	8000ccc <HAL_InitTick>
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40022000 	.word	0x40022000
 8002948:	40021000 	.word	0x40021000
 800294c:	04c4b400 	.word	0x04c4b400
 8002950:	08004958 	.word	0x08004958
 8002954:	20000000 	.word	0x20000000
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002962:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b04      	cmp	r3, #4
 800296c:	d102      	bne.n	8002974 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800296e:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	e047      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b08      	cmp	r3, #8
 800297e:	d102      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	e03e      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d136      	bne.n	8002a00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002992:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	3301      	adds	r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d10c      	bne.n	80029ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029b0:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ba:	68d2      	ldr	r2, [r2, #12]
 80029bc:	0a12      	lsrs	r2, r2, #8
 80029be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	617b      	str	r3, [r7, #20]
      break;
 80029c8:	e00c      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d4:	68d2      	ldr	r2, [r2, #12]
 80029d6:	0a12      	lsrs	r2, r2, #8
 80029d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029dc:	fb02 f303 	mul.w	r3, r2, r3
 80029e0:	617b      	str	r3, [r7, #20]
      break;
 80029e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	0e5b      	lsrs	r3, r3, #25
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	3301      	adds	r3, #1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	e001      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a04:	693b      	ldr	r3, [r7, #16]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	00f42400 	.word	0x00f42400
 8002a1c:	016e3600 	.word	0x016e3600

08002a20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000000 	.word	0x20000000

08002a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a3c:	f7ff fff0 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a40:	4601      	mov	r1, r0
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	08004968 	.word	0x08004968

08002a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a68:	f7ff ffda 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a6c:	4601      	mov	r1, r0
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	0adb      	lsrs	r3, r3, #11
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08004968 	.word	0x08004968

08002a90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d10c      	bne.n	8002ace <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ab4:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002abe:	68d2      	ldr	r2, [r2, #12]
 8002ac0:	0a12      	lsrs	r2, r2, #8
 8002ac2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	617b      	str	r3, [r7, #20]
    break;
 8002acc:	e00c      	b.n	8002ae8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ace:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ad8:	68d2      	ldr	r2, [r2, #12]
 8002ada:	0a12      	lsrs	r2, r2, #8
 8002adc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
    break;
 8002ae6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0e5b      	lsrs	r3, r3, #25
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	3301      	adds	r3, #1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b02:	687b      	ldr	r3, [r7, #4]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40021000 	.word	0x40021000
 8002b14:	016e3600 	.word	0x016e3600
 8002b18:	00f42400 	.word	0x00f42400

08002b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b24:	2300      	movs	r3, #0
 8002b26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b28:	2300      	movs	r3, #0
 8002b2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8098 	beq.w	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3e:	4b43      	ldr	r3, [pc, #268]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10d      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	4b40      	ldr	r3, [pc, #256]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	4a3f      	ldr	r2, [pc, #252]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b54:	6593      	str	r3, [r2, #88]	; 0x58
 8002b56:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b62:	2301      	movs	r3, #1
 8002b64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b66:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a39      	ldr	r2, [pc, #228]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b72:	f7fe f8f7 	bl	8000d64 <HAL_GetTick>
 8002b76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b78:	e009      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7a:	f7fe f8f3 	bl	8000d64 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d902      	bls.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	74fb      	strb	r3, [r7, #19]
        break;
 8002b8c:	e005      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b8e:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0ef      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d159      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ba0:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d01e      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d019      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bbc:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bc8:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd8:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bde:	4a1b      	ldr	r2, [pc, #108]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002be8:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe f8b3 	bl	8000d64 <HAL_GetTick>
 8002bfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c00:	e00b      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe f8af 	bl	8000d64 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d902      	bls.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	74fb      	strb	r3, [r7, #19]
            break;
 8002c18:	e006      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ec      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10b      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c2e:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3c:	4903      	ldr	r1, [pc, #12]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c44:	e008      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	74bb      	strb	r3, [r7, #18]
 8002c4a:	e005      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c58:	7c7b      	ldrb	r3, [r7, #17]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d105      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5e:	4baf      	ldr	r3, [pc, #700]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	4aae      	ldr	r2, [pc, #696]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c76:	4ba9      	ldr	r3, [pc, #676]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f023 0203 	bic.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	49a5      	ldr	r1, [pc, #660]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c98:	4ba0      	ldr	r3, [pc, #640]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f023 020c 	bic.w	r2, r3, #12
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	499d      	ldr	r1, [pc, #628]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cba:	4b98      	ldr	r3, [pc, #608]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4994      	ldr	r1, [pc, #592]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cdc:	4b8f      	ldr	r3, [pc, #572]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	498c      	ldr	r1, [pc, #560]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cfe:	4b87      	ldr	r3, [pc, #540]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	4983      	ldr	r1, [pc, #524]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d20:	4b7e      	ldr	r3, [pc, #504]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	497b      	ldr	r1, [pc, #492]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d42:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4972      	ldr	r1, [pc, #456]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d64:	4b6d      	ldr	r3, [pc, #436]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	496a      	ldr	r1, [pc, #424]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	4961      	ldr	r1, [pc, #388]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002da8:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	4959      	ldr	r1, [pc, #356]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dca:	4b54      	ldr	r3, [pc, #336]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	4950      	ldr	r1, [pc, #320]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d015      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dec:	4b4b      	ldr	r3, [pc, #300]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4948      	ldr	r1, [pc, #288]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e0a:	d105      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a42      	ldr	r2, [pc, #264]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d015      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e24:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e32:	493a      	ldr	r1, [pc, #232]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e42:	d105      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e44:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a34      	ldr	r2, [pc, #208]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d015      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e5c:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6a:	492c      	ldr	r1, [pc, #176]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e7c:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4a26      	ldr	r2, [pc, #152]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e86:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d015      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea2:	491e      	ldr	r1, [pc, #120]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002eba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ebe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d015      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4910      	ldr	r1, [pc, #64]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ef6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d018      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	4902      	ldr	r1, [pc, #8]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f1a:	e001      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002f1c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f28:	d105      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4a20      	ldr	r2, [pc, #128]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d015      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f50:	4917      	ldr	r1, [pc, #92]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f60:	d105      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d015      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f88:	4909      	ldr	r1, [pc, #36]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f98:	d105      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002fa6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e042      	b.n	800304c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7fd fd9d 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2224      	movs	r2, #36	; 0x24
 8002fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f82e 	bl	8003058 <UART_SetConfig>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e022      	b.n	800304c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f001 fa10 	bl	8004434 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f001 fa97 	bl	8004578 <UART_CheckIdleState>
 800304a:	4603      	mov	r3, r0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	0000      	movs	r0, r0
	...

08003058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003058:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800305c:	b08a      	sub	sp, #40	; 0x28
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	4313      	orrs	r3, r2
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800308a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308c:	4313      	orrs	r3, r2
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4baa      	ldr	r3, [pc, #680]	; (8003340 <UART_SetConfig+0x2e8>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a9f      	ldr	r2, [pc, #636]	; (8003344 <UART_SetConfig+0x2ec>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d004      	beq.n	80030d4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d0:	4313      	orrs	r3, r2
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80030de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f023 010f 	bic.w	r1, r3, #15
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a90      	ldr	r2, [pc, #576]	; (8003348 <UART_SetConfig+0x2f0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d126      	bne.n	800315a <UART_SetConfig+0x102>
 800310c:	4b8f      	ldr	r3, [pc, #572]	; (800334c <UART_SetConfig+0x2f4>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b03      	cmp	r3, #3
 8003118:	d81a      	bhi.n	8003150 <UART_SetConfig+0xf8>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <UART_SetConfig+0xc8>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003131 	.word	0x08003131
 8003124:	08003141 	.word	0x08003141
 8003128:	08003139 	.word	0x08003139
 800312c:	08003149 	.word	0x08003149
 8003130:	2301      	movs	r3, #1
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e116      	b.n	8003366 <UART_SetConfig+0x30e>
 8003138:	2302      	movs	r3, #2
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313e:	e112      	b.n	8003366 <UART_SetConfig+0x30e>
 8003140:	2304      	movs	r3, #4
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003146:	e10e      	b.n	8003366 <UART_SetConfig+0x30e>
 8003148:	2308      	movs	r3, #8
 800314a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314e:	e10a      	b.n	8003366 <UART_SetConfig+0x30e>
 8003150:	2310      	movs	r3, #16
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003156:	bf00      	nop
 8003158:	e105      	b.n	8003366 <UART_SetConfig+0x30e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7c      	ldr	r2, [pc, #496]	; (8003350 <UART_SetConfig+0x2f8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d138      	bne.n	80031d6 <UART_SetConfig+0x17e>
 8003164:	4b79      	ldr	r3, [pc, #484]	; (800334c <UART_SetConfig+0x2f4>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d82c      	bhi.n	80031cc <UART_SetConfig+0x174>
 8003172:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <UART_SetConfig+0x120>)
 8003174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003178:	080031ad 	.word	0x080031ad
 800317c:	080031cd 	.word	0x080031cd
 8003180:	080031cd 	.word	0x080031cd
 8003184:	080031cd 	.word	0x080031cd
 8003188:	080031bd 	.word	0x080031bd
 800318c:	080031cd 	.word	0x080031cd
 8003190:	080031cd 	.word	0x080031cd
 8003194:	080031cd 	.word	0x080031cd
 8003198:	080031b5 	.word	0x080031b5
 800319c:	080031cd 	.word	0x080031cd
 80031a0:	080031cd 	.word	0x080031cd
 80031a4:	080031cd 	.word	0x080031cd
 80031a8:	080031c5 	.word	0x080031c5
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b2:	e0d8      	b.n	8003366 <UART_SetConfig+0x30e>
 80031b4:	2302      	movs	r3, #2
 80031b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ba:	e0d4      	b.n	8003366 <UART_SetConfig+0x30e>
 80031bc:	2304      	movs	r3, #4
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c2:	e0d0      	b.n	8003366 <UART_SetConfig+0x30e>
 80031c4:	2308      	movs	r3, #8
 80031c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ca:	e0cc      	b.n	8003366 <UART_SetConfig+0x30e>
 80031cc:	2310      	movs	r3, #16
 80031ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d2:	bf00      	nop
 80031d4:	e0c7      	b.n	8003366 <UART_SetConfig+0x30e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a5e      	ldr	r2, [pc, #376]	; (8003354 <UART_SetConfig+0x2fc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d125      	bne.n	800322c <UART_SetConfig+0x1d4>
 80031e0:	4b5a      	ldr	r3, [pc, #360]	; (800334c <UART_SetConfig+0x2f4>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d011      	beq.n	8003212 <UART_SetConfig+0x1ba>
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d802      	bhi.n	80031f8 <UART_SetConfig+0x1a0>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <UART_SetConfig+0x1aa>
 80031f6:	e014      	b.n	8003222 <UART_SetConfig+0x1ca>
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d006      	beq.n	800320a <UART_SetConfig+0x1b2>
 80031fc:	2b30      	cmp	r3, #48	; 0x30
 80031fe:	d00c      	beq.n	800321a <UART_SetConfig+0x1c2>
 8003200:	e00f      	b.n	8003222 <UART_SetConfig+0x1ca>
 8003202:	2300      	movs	r3, #0
 8003204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003208:	e0ad      	b.n	8003366 <UART_SetConfig+0x30e>
 800320a:	2302      	movs	r3, #2
 800320c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003210:	e0a9      	b.n	8003366 <UART_SetConfig+0x30e>
 8003212:	2304      	movs	r3, #4
 8003214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003218:	e0a5      	b.n	8003366 <UART_SetConfig+0x30e>
 800321a:	2308      	movs	r3, #8
 800321c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003220:	e0a1      	b.n	8003366 <UART_SetConfig+0x30e>
 8003222:	2310      	movs	r3, #16
 8003224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003228:	bf00      	nop
 800322a:	e09c      	b.n	8003366 <UART_SetConfig+0x30e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a49      	ldr	r2, [pc, #292]	; (8003358 <UART_SetConfig+0x300>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d125      	bne.n	8003282 <UART_SetConfig+0x22a>
 8003236:	4b45      	ldr	r3, [pc, #276]	; (800334c <UART_SetConfig+0x2f4>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	d011      	beq.n	8003268 <UART_SetConfig+0x210>
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d802      	bhi.n	800324e <UART_SetConfig+0x1f6>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <UART_SetConfig+0x200>
 800324c:	e014      	b.n	8003278 <UART_SetConfig+0x220>
 800324e:	2b80      	cmp	r3, #128	; 0x80
 8003250:	d006      	beq.n	8003260 <UART_SetConfig+0x208>
 8003252:	2bc0      	cmp	r3, #192	; 0xc0
 8003254:	d00c      	beq.n	8003270 <UART_SetConfig+0x218>
 8003256:	e00f      	b.n	8003278 <UART_SetConfig+0x220>
 8003258:	2300      	movs	r3, #0
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325e:	e082      	b.n	8003366 <UART_SetConfig+0x30e>
 8003260:	2302      	movs	r3, #2
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e07e      	b.n	8003366 <UART_SetConfig+0x30e>
 8003268:	2304      	movs	r3, #4
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e07a      	b.n	8003366 <UART_SetConfig+0x30e>
 8003270:	2308      	movs	r3, #8
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e076      	b.n	8003366 <UART_SetConfig+0x30e>
 8003278:	2310      	movs	r3, #16
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	bf00      	nop
 8003280:	e071      	b.n	8003366 <UART_SetConfig+0x30e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a35      	ldr	r2, [pc, #212]	; (800335c <UART_SetConfig+0x304>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d129      	bne.n	80032e0 <UART_SetConfig+0x288>
 800328c:	4b2f      	ldr	r3, [pc, #188]	; (800334c <UART_SetConfig+0x2f4>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329a:	d014      	beq.n	80032c6 <UART_SetConfig+0x26e>
 800329c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a0:	d802      	bhi.n	80032a8 <UART_SetConfig+0x250>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <UART_SetConfig+0x25e>
 80032a6:	e016      	b.n	80032d6 <UART_SetConfig+0x27e>
 80032a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ac:	d007      	beq.n	80032be <UART_SetConfig+0x266>
 80032ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032b2:	d00c      	beq.n	80032ce <UART_SetConfig+0x276>
 80032b4:	e00f      	b.n	80032d6 <UART_SetConfig+0x27e>
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032bc:	e053      	b.n	8003366 <UART_SetConfig+0x30e>
 80032be:	2302      	movs	r3, #2
 80032c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c4:	e04f      	b.n	8003366 <UART_SetConfig+0x30e>
 80032c6:	2304      	movs	r3, #4
 80032c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032cc:	e04b      	b.n	8003366 <UART_SetConfig+0x30e>
 80032ce:	2308      	movs	r3, #8
 80032d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d4:	e047      	b.n	8003366 <UART_SetConfig+0x30e>
 80032d6:	2310      	movs	r3, #16
 80032d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032dc:	bf00      	nop
 80032de:	e042      	b.n	8003366 <UART_SetConfig+0x30e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a17      	ldr	r2, [pc, #92]	; (8003344 <UART_SetConfig+0x2ec>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d13a      	bne.n	8003360 <UART_SetConfig+0x308>
 80032ea:	4b18      	ldr	r3, [pc, #96]	; (800334c <UART_SetConfig+0x2f4>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f8:	d014      	beq.n	8003324 <UART_SetConfig+0x2cc>
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d802      	bhi.n	8003306 <UART_SetConfig+0x2ae>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <UART_SetConfig+0x2bc>
 8003304:	e016      	b.n	8003334 <UART_SetConfig+0x2dc>
 8003306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330a:	d007      	beq.n	800331c <UART_SetConfig+0x2c4>
 800330c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003310:	d00c      	beq.n	800332c <UART_SetConfig+0x2d4>
 8003312:	e00f      	b.n	8003334 <UART_SetConfig+0x2dc>
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331a:	e024      	b.n	8003366 <UART_SetConfig+0x30e>
 800331c:	2302      	movs	r3, #2
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003322:	e020      	b.n	8003366 <UART_SetConfig+0x30e>
 8003324:	2304      	movs	r3, #4
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332a:	e01c      	b.n	8003366 <UART_SetConfig+0x30e>
 800332c:	2308      	movs	r3, #8
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003332:	e018      	b.n	8003366 <UART_SetConfig+0x30e>
 8003334:	2310      	movs	r3, #16
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333a:	bf00      	nop
 800333c:	e013      	b.n	8003366 <UART_SetConfig+0x30e>
 800333e:	bf00      	nop
 8003340:	cfff69f3 	.word	0xcfff69f3
 8003344:	40008000 	.word	0x40008000
 8003348:	40013800 	.word	0x40013800
 800334c:	40021000 	.word	0x40021000
 8003350:	40004400 	.word	0x40004400
 8003354:	40004800 	.word	0x40004800
 8003358:	40004c00 	.word	0x40004c00
 800335c:	40005000 	.word	0x40005000
 8003360:	2310      	movs	r3, #16
 8003362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a86      	ldr	r2, [pc, #536]	; (8003584 <UART_SetConfig+0x52c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	f040 8422 	bne.w	8003bb6 <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003376:	2b08      	cmp	r3, #8
 8003378:	f200 8173 	bhi.w	8003662 <UART_SetConfig+0x60a>
 800337c:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <UART_SetConfig+0x32c>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	080033a9 	.word	0x080033a9
 8003388:	08003663 	.word	0x08003663
 800338c:	0800344b 	.word	0x0800344b
 8003390:	08003663 	.word	0x08003663
 8003394:	080034e3 	.word	0x080034e3
 8003398:	08003663 	.word	0x08003663
 800339c:	08003663 	.word	0x08003663
 80033a0:	08003663 	.word	0x08003663
 80033a4:	080035b5 	.word	0x080035b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80033a8:	f7ff fb46 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d044      	beq.n	8003440 <UART_SetConfig+0x3e8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d03e      	beq.n	800343c <UART_SetConfig+0x3e4>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d038      	beq.n	8003438 <UART_SetConfig+0x3e0>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d032      	beq.n	8003434 <UART_SetConfig+0x3dc>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d02c      	beq.n	8003430 <UART_SetConfig+0x3d8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d026      	beq.n	800342c <UART_SetConfig+0x3d4>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b06      	cmp	r3, #6
 80033e4:	d020      	beq.n	8003428 <UART_SetConfig+0x3d0>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b07      	cmp	r3, #7
 80033ec:	d01a      	beq.n	8003424 <UART_SetConfig+0x3cc>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d014      	beq.n	8003420 <UART_SetConfig+0x3c8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b09      	cmp	r3, #9
 80033fc:	d00e      	beq.n	800341c <UART_SetConfig+0x3c4>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b0a      	cmp	r3, #10
 8003404:	d008      	beq.n	8003418 <UART_SetConfig+0x3c0>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2b0b      	cmp	r3, #11
 800340c:	d102      	bne.n	8003414 <UART_SetConfig+0x3bc>
 800340e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003412:	e016      	b.n	8003442 <UART_SetConfig+0x3ea>
 8003414:	2301      	movs	r3, #1
 8003416:	e014      	b.n	8003442 <UART_SetConfig+0x3ea>
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	e012      	b.n	8003442 <UART_SetConfig+0x3ea>
 800341c:	2340      	movs	r3, #64	; 0x40
 800341e:	e010      	b.n	8003442 <UART_SetConfig+0x3ea>
 8003420:	2320      	movs	r3, #32
 8003422:	e00e      	b.n	8003442 <UART_SetConfig+0x3ea>
 8003424:	2310      	movs	r3, #16
 8003426:	e00c      	b.n	8003442 <UART_SetConfig+0x3ea>
 8003428:	230c      	movs	r3, #12
 800342a:	e00a      	b.n	8003442 <UART_SetConfig+0x3ea>
 800342c:	230a      	movs	r3, #10
 800342e:	e008      	b.n	8003442 <UART_SetConfig+0x3ea>
 8003430:	2308      	movs	r3, #8
 8003432:	e006      	b.n	8003442 <UART_SetConfig+0x3ea>
 8003434:	2306      	movs	r3, #6
 8003436:	e004      	b.n	8003442 <UART_SetConfig+0x3ea>
 8003438:	2304      	movs	r3, #4
 800343a:	e002      	b.n	8003442 <UART_SetConfig+0x3ea>
 800343c:	2302      	movs	r3, #2
 800343e:	e000      	b.n	8003442 <UART_SetConfig+0x3ea>
 8003440:	2301      	movs	r3, #1
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	617b      	str	r3, [r7, #20]
        break;
 8003448:	e10e      	b.n	8003668 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d044      	beq.n	80034dc <UART_SetConfig+0x484>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b01      	cmp	r3, #1
 8003458:	d03e      	beq.n	80034d8 <UART_SetConfig+0x480>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2b02      	cmp	r3, #2
 8003460:	d038      	beq.n	80034d4 <UART_SetConfig+0x47c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b03      	cmp	r3, #3
 8003468:	d032      	beq.n	80034d0 <UART_SetConfig+0x478>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2b04      	cmp	r3, #4
 8003470:	d02c      	beq.n	80034cc <UART_SetConfig+0x474>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b05      	cmp	r3, #5
 8003478:	d026      	beq.n	80034c8 <UART_SetConfig+0x470>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2b06      	cmp	r3, #6
 8003480:	d020      	beq.n	80034c4 <UART_SetConfig+0x46c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	2b07      	cmp	r3, #7
 8003488:	d01a      	beq.n	80034c0 <UART_SetConfig+0x468>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	2b08      	cmp	r3, #8
 8003490:	d014      	beq.n	80034bc <UART_SetConfig+0x464>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	2b09      	cmp	r3, #9
 8003498:	d00e      	beq.n	80034b8 <UART_SetConfig+0x460>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b0a      	cmp	r3, #10
 80034a0:	d008      	beq.n	80034b4 <UART_SetConfig+0x45c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	2b0b      	cmp	r3, #11
 80034a8:	d102      	bne.n	80034b0 <UART_SetConfig+0x458>
 80034aa:	f24f 4324 	movw	r3, #62500	; 0xf424
 80034ae:	e016      	b.n	80034de <UART_SetConfig+0x486>
 80034b0:	4b35      	ldr	r3, [pc, #212]	; (8003588 <UART_SetConfig+0x530>)
 80034b2:	e014      	b.n	80034de <UART_SetConfig+0x486>
 80034b4:	4b35      	ldr	r3, [pc, #212]	; (800358c <UART_SetConfig+0x534>)
 80034b6:	e012      	b.n	80034de <UART_SetConfig+0x486>
 80034b8:	4b35      	ldr	r3, [pc, #212]	; (8003590 <UART_SetConfig+0x538>)
 80034ba:	e010      	b.n	80034de <UART_SetConfig+0x486>
 80034bc:	4b35      	ldr	r3, [pc, #212]	; (8003594 <UART_SetConfig+0x53c>)
 80034be:	e00e      	b.n	80034de <UART_SetConfig+0x486>
 80034c0:	4b35      	ldr	r3, [pc, #212]	; (8003598 <UART_SetConfig+0x540>)
 80034c2:	e00c      	b.n	80034de <UART_SetConfig+0x486>
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <UART_SetConfig+0x544>)
 80034c6:	e00a      	b.n	80034de <UART_SetConfig+0x486>
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <UART_SetConfig+0x548>)
 80034ca:	e008      	b.n	80034de <UART_SetConfig+0x486>
 80034cc:	4b35      	ldr	r3, [pc, #212]	; (80035a4 <UART_SetConfig+0x54c>)
 80034ce:	e006      	b.n	80034de <UART_SetConfig+0x486>
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <UART_SetConfig+0x550>)
 80034d2:	e004      	b.n	80034de <UART_SetConfig+0x486>
 80034d4:	4b35      	ldr	r3, [pc, #212]	; (80035ac <UART_SetConfig+0x554>)
 80034d6:	e002      	b.n	80034de <UART_SetConfig+0x486>
 80034d8:	4b35      	ldr	r3, [pc, #212]	; (80035b0 <UART_SetConfig+0x558>)
 80034da:	e000      	b.n	80034de <UART_SetConfig+0x486>
 80034dc:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <UART_SetConfig+0x530>)
 80034de:	617b      	str	r3, [r7, #20]
        break;
 80034e0:	e0c2      	b.n	8003668 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80034e2:	f7ff fa3b 	bl	800295c <HAL_RCC_GetSysClockFreq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d044      	beq.n	800357a <UART_SetConfig+0x522>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d03e      	beq.n	8003576 <UART_SetConfig+0x51e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d038      	beq.n	8003572 <UART_SetConfig+0x51a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	2b03      	cmp	r3, #3
 8003506:	d032      	beq.n	800356e <UART_SetConfig+0x516>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	2b04      	cmp	r3, #4
 800350e:	d02c      	beq.n	800356a <UART_SetConfig+0x512>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2b05      	cmp	r3, #5
 8003516:	d026      	beq.n	8003566 <UART_SetConfig+0x50e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	2b06      	cmp	r3, #6
 800351e:	d020      	beq.n	8003562 <UART_SetConfig+0x50a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	2b07      	cmp	r3, #7
 8003526:	d01a      	beq.n	800355e <UART_SetConfig+0x506>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	2b08      	cmp	r3, #8
 800352e:	d014      	beq.n	800355a <UART_SetConfig+0x502>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	2b09      	cmp	r3, #9
 8003536:	d00e      	beq.n	8003556 <UART_SetConfig+0x4fe>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2b0a      	cmp	r3, #10
 800353e:	d008      	beq.n	8003552 <UART_SetConfig+0x4fa>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	2b0b      	cmp	r3, #11
 8003546:	d102      	bne.n	800354e <UART_SetConfig+0x4f6>
 8003548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800354c:	e016      	b.n	800357c <UART_SetConfig+0x524>
 800354e:	2301      	movs	r3, #1
 8003550:	e014      	b.n	800357c <UART_SetConfig+0x524>
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	e012      	b.n	800357c <UART_SetConfig+0x524>
 8003556:	2340      	movs	r3, #64	; 0x40
 8003558:	e010      	b.n	800357c <UART_SetConfig+0x524>
 800355a:	2320      	movs	r3, #32
 800355c:	e00e      	b.n	800357c <UART_SetConfig+0x524>
 800355e:	2310      	movs	r3, #16
 8003560:	e00c      	b.n	800357c <UART_SetConfig+0x524>
 8003562:	230c      	movs	r3, #12
 8003564:	e00a      	b.n	800357c <UART_SetConfig+0x524>
 8003566:	230a      	movs	r3, #10
 8003568:	e008      	b.n	800357c <UART_SetConfig+0x524>
 800356a:	2308      	movs	r3, #8
 800356c:	e006      	b.n	800357c <UART_SetConfig+0x524>
 800356e:	2306      	movs	r3, #6
 8003570:	e004      	b.n	800357c <UART_SetConfig+0x524>
 8003572:	2304      	movs	r3, #4
 8003574:	e002      	b.n	800357c <UART_SetConfig+0x524>
 8003576:	2302      	movs	r3, #2
 8003578:	e000      	b.n	800357c <UART_SetConfig+0x524>
 800357a:	2301      	movs	r3, #1
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	617b      	str	r3, [r7, #20]
        break;
 8003582:	e071      	b.n	8003668 <UART_SetConfig+0x610>
 8003584:	40008000 	.word	0x40008000
 8003588:	00f42400 	.word	0x00f42400
 800358c:	0001e848 	.word	0x0001e848
 8003590:	0003d090 	.word	0x0003d090
 8003594:	0007a120 	.word	0x0007a120
 8003598:	000f4240 	.word	0x000f4240
 800359c:	00145855 	.word	0x00145855
 80035a0:	00186a00 	.word	0x00186a00
 80035a4:	001e8480 	.word	0x001e8480
 80035a8:	0028b0aa 	.word	0x0028b0aa
 80035ac:	003d0900 	.word	0x003d0900
 80035b0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d04e      	beq.n	800365a <UART_SetConfig+0x602>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d047      	beq.n	8003654 <UART_SetConfig+0x5fc>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d040      	beq.n	800364e <UART_SetConfig+0x5f6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d039      	beq.n	8003648 <UART_SetConfig+0x5f0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d032      	beq.n	8003642 <UART_SetConfig+0x5ea>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d02b      	beq.n	800363c <UART_SetConfig+0x5e4>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	2b06      	cmp	r3, #6
 80035ea:	d024      	beq.n	8003636 <UART_SetConfig+0x5de>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	2b07      	cmp	r3, #7
 80035f2:	d01d      	beq.n	8003630 <UART_SetConfig+0x5d8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d016      	beq.n	800362a <UART_SetConfig+0x5d2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	2b09      	cmp	r3, #9
 8003602:	d00f      	beq.n	8003624 <UART_SetConfig+0x5cc>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	2b0a      	cmp	r3, #10
 800360a:	d008      	beq.n	800361e <UART_SetConfig+0x5c6>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2b0b      	cmp	r3, #11
 8003612:	d101      	bne.n	8003618 <UART_SetConfig+0x5c0>
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	e022      	b.n	800365e <UART_SetConfig+0x606>
 8003618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361c:	e01f      	b.n	800365e <UART_SetConfig+0x606>
 800361e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003622:	e01c      	b.n	800365e <UART_SetConfig+0x606>
 8003624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003628:	e019      	b.n	800365e <UART_SetConfig+0x606>
 800362a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800362e:	e016      	b.n	800365e <UART_SetConfig+0x606>
 8003630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003634:	e013      	b.n	800365e <UART_SetConfig+0x606>
 8003636:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800363a:	e010      	b.n	800365e <UART_SetConfig+0x606>
 800363c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003640:	e00d      	b.n	800365e <UART_SetConfig+0x606>
 8003642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003646:	e00a      	b.n	800365e <UART_SetConfig+0x606>
 8003648:	f241 5355 	movw	r3, #5461	; 0x1555
 800364c:	e007      	b.n	800365e <UART_SetConfig+0x606>
 800364e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003652:	e004      	b.n	800365e <UART_SetConfig+0x606>
 8003654:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003658:	e001      	b.n	800365e <UART_SetConfig+0x606>
 800365a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365e:	617b      	str	r3, [r7, #20]
        break;
 8003660:	e002      	b.n	8003668 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	76fb      	strb	r3, [r7, #27]
        break;
 8003666:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 86b7 	beq.w	80043de <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	429a      	cmp	r2, r3
 800367e:	d305      	bcc.n	800368c <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	d903      	bls.n	8003694 <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	76fb      	strb	r3, [r7, #27]
 8003690:	f000 bea5 	b.w	80043de <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 8003694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003698:	2b08      	cmp	r3, #8
 800369a:	f200 8277 	bhi.w	8003b8c <UART_SetConfig+0xb34>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x64c>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	08003b8d 	.word	0x08003b8d
 80036ac:	08003807 	.word	0x08003807
 80036b0:	08003b8d 	.word	0x08003b8d
 80036b4:	080038fd 	.word	0x080038fd
 80036b8:	08003b8d 	.word	0x08003b8d
 80036bc:	08003b8d 	.word	0x08003b8d
 80036c0:	08003b8d 	.word	0x08003b8d
 80036c4:	08003a3b 	.word	0x08003a3b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7ff f9b6 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 80036cc:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d067      	beq.n	80037ae <UART_SetConfig+0x756>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d05e      	beq.n	80037a4 <UART_SetConfig+0x74c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d055      	beq.n	800379a <UART_SetConfig+0x742>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d04c      	beq.n	8003790 <UART_SetConfig+0x738>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d043      	beq.n	8003786 <UART_SetConfig+0x72e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	2b05      	cmp	r3, #5
 8003704:	d03a      	beq.n	800377c <UART_SetConfig+0x724>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b06      	cmp	r3, #6
 800370c:	d031      	beq.n	8003772 <UART_SetConfig+0x71a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	2b07      	cmp	r3, #7
 8003714:	d028      	beq.n	8003768 <UART_SetConfig+0x710>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2b08      	cmp	r3, #8
 800371c:	d01f      	beq.n	800375e <UART_SetConfig+0x706>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	2b09      	cmp	r3, #9
 8003724:	d016      	beq.n	8003754 <UART_SetConfig+0x6fc>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2b0a      	cmp	r3, #10
 800372c:	d00d      	beq.n	800374a <UART_SetConfig+0x6f2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b0b      	cmp	r3, #11
 8003734:	d104      	bne.n	8003740 <UART_SetConfig+0x6e8>
 8003736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800373a:	f04f 0400 	mov.w	r4, #0
 800373e:	e03a      	b.n	80037b6 <UART_SetConfig+0x75e>
 8003740:	f04f 0301 	mov.w	r3, #1
 8003744:	f04f 0400 	mov.w	r4, #0
 8003748:	e035      	b.n	80037b6 <UART_SetConfig+0x75e>
 800374a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800374e:	f04f 0400 	mov.w	r4, #0
 8003752:	e030      	b.n	80037b6 <UART_SetConfig+0x75e>
 8003754:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	e02b      	b.n	80037b6 <UART_SetConfig+0x75e>
 800375e:	f04f 0320 	mov.w	r3, #32
 8003762:	f04f 0400 	mov.w	r4, #0
 8003766:	e026      	b.n	80037b6 <UART_SetConfig+0x75e>
 8003768:	f04f 0310 	mov.w	r3, #16
 800376c:	f04f 0400 	mov.w	r4, #0
 8003770:	e021      	b.n	80037b6 <UART_SetConfig+0x75e>
 8003772:	f04f 030c 	mov.w	r3, #12
 8003776:	f04f 0400 	mov.w	r4, #0
 800377a:	e01c      	b.n	80037b6 <UART_SetConfig+0x75e>
 800377c:	f04f 030a 	mov.w	r3, #10
 8003780:	f04f 0400 	mov.w	r4, #0
 8003784:	e017      	b.n	80037b6 <UART_SetConfig+0x75e>
 8003786:	f04f 0308 	mov.w	r3, #8
 800378a:	f04f 0400 	mov.w	r4, #0
 800378e:	e012      	b.n	80037b6 <UART_SetConfig+0x75e>
 8003790:	f04f 0306 	mov.w	r3, #6
 8003794:	f04f 0400 	mov.w	r4, #0
 8003798:	e00d      	b.n	80037b6 <UART_SetConfig+0x75e>
 800379a:	f04f 0304 	mov.w	r3, #4
 800379e:	f04f 0400 	mov.w	r4, #0
 80037a2:	e008      	b.n	80037b6 <UART_SetConfig+0x75e>
 80037a4:	f04f 0302 	mov.w	r3, #2
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	e003      	b.n	80037b6 <UART_SetConfig+0x75e>
 80037ae:	f04f 0301 	mov.w	r3, #1
 80037b2:	f04f 0400 	mov.w	r4, #0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4623      	mov	r3, r4
 80037ba:	f7fc fd2d 	bl	8000218 <__aeabi_uldivmod>
 80037be:	4603      	mov	r3, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	4619      	mov	r1, r3
 80037c4:	4622      	mov	r2, r4
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	f04f 0400 	mov.w	r4, #0
 80037ce:	0214      	lsls	r4, r2, #8
 80037d0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80037d4:	020b      	lsls	r3, r1, #8
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6852      	ldr	r2, [r2, #4]
 80037da:	0852      	lsrs	r2, r2, #1
 80037dc:	4611      	mov	r1, r2
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	eb13 0b01 	adds.w	fp, r3, r1
 80037e6:	eb44 0c02 	adc.w	ip, r4, r2
 80037ea:	4658      	mov	r0, fp
 80037ec:	4661      	mov	r1, ip
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f04f 0400 	mov.w	r4, #0
 80037f6:	461a      	mov	r2, r3
 80037f8:	4623      	mov	r3, r4
 80037fa:	f7fc fd0d 	bl	8000218 <__aeabi_uldivmod>
 80037fe:	4603      	mov	r3, r0
 8003800:	460c      	mov	r4, r1
 8003802:	61fb      	str	r3, [r7, #28]
            break;
 8003804:	e1c5      	b.n	8003b92 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	2b00      	cmp	r3, #0
 800380c:	d05b      	beq.n	80038c6 <UART_SetConfig+0x86e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2b01      	cmp	r3, #1
 8003814:	d053      	beq.n	80038be <UART_SetConfig+0x866>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b02      	cmp	r3, #2
 800381c:	d04b      	beq.n	80038b6 <UART_SetConfig+0x85e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2b03      	cmp	r3, #3
 8003824:	d043      	beq.n	80038ae <UART_SetConfig+0x856>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2b04      	cmp	r3, #4
 800382c:	d03b      	beq.n	80038a6 <UART_SetConfig+0x84e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b05      	cmp	r3, #5
 8003834:	d033      	beq.n	800389e <UART_SetConfig+0x846>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	2b06      	cmp	r3, #6
 800383c:	d02b      	beq.n	8003896 <UART_SetConfig+0x83e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	2b07      	cmp	r3, #7
 8003844:	d023      	beq.n	800388e <UART_SetConfig+0x836>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b08      	cmp	r3, #8
 800384c:	d01b      	beq.n	8003886 <UART_SetConfig+0x82e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2b09      	cmp	r3, #9
 8003854:	d013      	beq.n	800387e <UART_SetConfig+0x826>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	2b0a      	cmp	r3, #10
 800385c:	d00b      	beq.n	8003876 <UART_SetConfig+0x81e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b0b      	cmp	r3, #11
 8003864:	d103      	bne.n	800386e <UART_SetConfig+0x816>
 8003866:	4bae      	ldr	r3, [pc, #696]	; (8003b20 <UART_SetConfig+0xac8>)
 8003868:	f04f 0400 	mov.w	r4, #0
 800386c:	e02e      	b.n	80038cc <UART_SetConfig+0x874>
 800386e:	4bad      	ldr	r3, [pc, #692]	; (8003b24 <UART_SetConfig+0xacc>)
 8003870:	f04f 0400 	mov.w	r4, #0
 8003874:	e02a      	b.n	80038cc <UART_SetConfig+0x874>
 8003876:	4bac      	ldr	r3, [pc, #688]	; (8003b28 <UART_SetConfig+0xad0>)
 8003878:	f04f 0400 	mov.w	r4, #0
 800387c:	e026      	b.n	80038cc <UART_SetConfig+0x874>
 800387e:	4bab      	ldr	r3, [pc, #684]	; (8003b2c <UART_SetConfig+0xad4>)
 8003880:	f04f 0400 	mov.w	r4, #0
 8003884:	e022      	b.n	80038cc <UART_SetConfig+0x874>
 8003886:	4baa      	ldr	r3, [pc, #680]	; (8003b30 <UART_SetConfig+0xad8>)
 8003888:	f04f 0400 	mov.w	r4, #0
 800388c:	e01e      	b.n	80038cc <UART_SetConfig+0x874>
 800388e:	4ba9      	ldr	r3, [pc, #676]	; (8003b34 <UART_SetConfig+0xadc>)
 8003890:	f04f 0400 	mov.w	r4, #0
 8003894:	e01a      	b.n	80038cc <UART_SetConfig+0x874>
 8003896:	a49e      	add	r4, pc, #632	; (adr r4, 8003b10 <UART_SetConfig+0xab8>)
 8003898:	e9d4 3400 	ldrd	r3, r4, [r4]
 800389c:	e016      	b.n	80038cc <UART_SetConfig+0x874>
 800389e:	4ba6      	ldr	r3, [pc, #664]	; (8003b38 <UART_SetConfig+0xae0>)
 80038a0:	f04f 0400 	mov.w	r4, #0
 80038a4:	e012      	b.n	80038cc <UART_SetConfig+0x874>
 80038a6:	4ba5      	ldr	r3, [pc, #660]	; (8003b3c <UART_SetConfig+0xae4>)
 80038a8:	f04f 0400 	mov.w	r4, #0
 80038ac:	e00e      	b.n	80038cc <UART_SetConfig+0x874>
 80038ae:	a49a      	add	r4, pc, #616	; (adr r4, 8003b18 <UART_SetConfig+0xac0>)
 80038b0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80038b4:	e00a      	b.n	80038cc <UART_SetConfig+0x874>
 80038b6:	4ba2      	ldr	r3, [pc, #648]	; (8003b40 <UART_SetConfig+0xae8>)
 80038b8:	f04f 0400 	mov.w	r4, #0
 80038bc:	e006      	b.n	80038cc <UART_SetConfig+0x874>
 80038be:	4ba1      	ldr	r3, [pc, #644]	; (8003b44 <UART_SetConfig+0xaec>)
 80038c0:	f04f 0400 	mov.w	r4, #0
 80038c4:	e002      	b.n	80038cc <UART_SetConfig+0x874>
 80038c6:	4b97      	ldr	r3, [pc, #604]	; (8003b24 <UART_SetConfig+0xacc>)
 80038c8:	f04f 0400 	mov.w	r4, #0
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6852      	ldr	r2, [r2, #4]
 80038d0:	0852      	lsrs	r2, r2, #1
 80038d2:	4611      	mov	r1, r2
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	eb13 0b01 	adds.w	fp, r3, r1
 80038dc:	eb44 0c02 	adc.w	ip, r4, r2
 80038e0:	4658      	mov	r0, fp
 80038e2:	4661      	mov	r1, ip
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f04f 0400 	mov.w	r4, #0
 80038ec:	461a      	mov	r2, r3
 80038ee:	4623      	mov	r3, r4
 80038f0:	f7fc fc92 	bl	8000218 <__aeabi_uldivmod>
 80038f4:	4603      	mov	r3, r0
 80038f6:	460c      	mov	r4, r1
 80038f8:	61fb      	str	r3, [r7, #28]
            break;
 80038fa:	e14a      	b.n	8003b92 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80038fc:	f7ff f82e 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8003900:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4618      	mov	r0, r3
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	2b00      	cmp	r3, #0
 8003910:	d067      	beq.n	80039e2 <UART_SetConfig+0x98a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	2b01      	cmp	r3, #1
 8003918:	d05e      	beq.n	80039d8 <UART_SetConfig+0x980>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	2b02      	cmp	r3, #2
 8003920:	d055      	beq.n	80039ce <UART_SetConfig+0x976>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	2b03      	cmp	r3, #3
 8003928:	d04c      	beq.n	80039c4 <UART_SetConfig+0x96c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	2b04      	cmp	r3, #4
 8003930:	d043      	beq.n	80039ba <UART_SetConfig+0x962>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	2b05      	cmp	r3, #5
 8003938:	d03a      	beq.n	80039b0 <UART_SetConfig+0x958>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2b06      	cmp	r3, #6
 8003940:	d031      	beq.n	80039a6 <UART_SetConfig+0x94e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	2b07      	cmp	r3, #7
 8003948:	d028      	beq.n	800399c <UART_SetConfig+0x944>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	2b08      	cmp	r3, #8
 8003950:	d01f      	beq.n	8003992 <UART_SetConfig+0x93a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	2b09      	cmp	r3, #9
 8003958:	d016      	beq.n	8003988 <UART_SetConfig+0x930>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	2b0a      	cmp	r3, #10
 8003960:	d00d      	beq.n	800397e <UART_SetConfig+0x926>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	2b0b      	cmp	r3, #11
 8003968:	d104      	bne.n	8003974 <UART_SetConfig+0x91c>
 800396a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800396e:	f04f 0400 	mov.w	r4, #0
 8003972:	e03a      	b.n	80039ea <UART_SetConfig+0x992>
 8003974:	f04f 0301 	mov.w	r3, #1
 8003978:	f04f 0400 	mov.w	r4, #0
 800397c:	e035      	b.n	80039ea <UART_SetConfig+0x992>
 800397e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003982:	f04f 0400 	mov.w	r4, #0
 8003986:	e030      	b.n	80039ea <UART_SetConfig+0x992>
 8003988:	f04f 0340 	mov.w	r3, #64	; 0x40
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	e02b      	b.n	80039ea <UART_SetConfig+0x992>
 8003992:	f04f 0320 	mov.w	r3, #32
 8003996:	f04f 0400 	mov.w	r4, #0
 800399a:	e026      	b.n	80039ea <UART_SetConfig+0x992>
 800399c:	f04f 0310 	mov.w	r3, #16
 80039a0:	f04f 0400 	mov.w	r4, #0
 80039a4:	e021      	b.n	80039ea <UART_SetConfig+0x992>
 80039a6:	f04f 030c 	mov.w	r3, #12
 80039aa:	f04f 0400 	mov.w	r4, #0
 80039ae:	e01c      	b.n	80039ea <UART_SetConfig+0x992>
 80039b0:	f04f 030a 	mov.w	r3, #10
 80039b4:	f04f 0400 	mov.w	r4, #0
 80039b8:	e017      	b.n	80039ea <UART_SetConfig+0x992>
 80039ba:	f04f 0308 	mov.w	r3, #8
 80039be:	f04f 0400 	mov.w	r4, #0
 80039c2:	e012      	b.n	80039ea <UART_SetConfig+0x992>
 80039c4:	f04f 0306 	mov.w	r3, #6
 80039c8:	f04f 0400 	mov.w	r4, #0
 80039cc:	e00d      	b.n	80039ea <UART_SetConfig+0x992>
 80039ce:	f04f 0304 	mov.w	r3, #4
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	e008      	b.n	80039ea <UART_SetConfig+0x992>
 80039d8:	f04f 0302 	mov.w	r3, #2
 80039dc:	f04f 0400 	mov.w	r4, #0
 80039e0:	e003      	b.n	80039ea <UART_SetConfig+0x992>
 80039e2:	f04f 0301 	mov.w	r3, #1
 80039e6:	f04f 0400 	mov.w	r4, #0
 80039ea:	461a      	mov	r2, r3
 80039ec:	4623      	mov	r3, r4
 80039ee:	f7fc fc13 	bl	8000218 <__aeabi_uldivmod>
 80039f2:	4603      	mov	r3, r0
 80039f4:	460c      	mov	r4, r1
 80039f6:	4619      	mov	r1, r3
 80039f8:	4622      	mov	r2, r4
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	f04f 0400 	mov.w	r4, #0
 8003a02:	0214      	lsls	r4, r2, #8
 8003a04:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003a08:	020b      	lsls	r3, r1, #8
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6852      	ldr	r2, [r2, #4]
 8003a0e:	0852      	lsrs	r2, r2, #1
 8003a10:	4611      	mov	r1, r2
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	eb13 0b01 	adds.w	fp, r3, r1
 8003a1a:	eb44 0c02 	adc.w	ip, r4, r2
 8003a1e:	4658      	mov	r0, fp
 8003a20:	4661      	mov	r1, ip
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f04f 0400 	mov.w	r4, #0
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4623      	mov	r3, r4
 8003a2e:	f7fc fbf3 	bl	8000218 <__aeabi_uldivmod>
 8003a32:	4603      	mov	r3, r0
 8003a34:	460c      	mov	r4, r1
 8003a36:	61fb      	str	r3, [r7, #28]
            break;
 8003a38:	e0ab      	b.n	8003b92 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8088 	beq.w	8003b54 <UART_SetConfig+0xafc>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d05b      	beq.n	8003b04 <UART_SetConfig+0xaac>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d052      	beq.n	8003afa <UART_SetConfig+0xaa2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d04a      	beq.n	8003af2 <UART_SetConfig+0xa9a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d041      	beq.n	8003ae8 <UART_SetConfig+0xa90>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d039      	beq.n	8003ae0 <UART_SetConfig+0xa88>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	2b06      	cmp	r3, #6
 8003a72:	d031      	beq.n	8003ad8 <UART_SetConfig+0xa80>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2b07      	cmp	r3, #7
 8003a7a:	d028      	beq.n	8003ace <UART_SetConfig+0xa76>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d01f      	beq.n	8003ac4 <UART_SetConfig+0xa6c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	2b09      	cmp	r3, #9
 8003a8a:	d016      	beq.n	8003aba <UART_SetConfig+0xa62>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2b0a      	cmp	r3, #10
 8003a92:	d00d      	beq.n	8003ab0 <UART_SetConfig+0xa58>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	2b0b      	cmp	r3, #11
 8003a9a:	d104      	bne.n	8003aa6 <UART_SetConfig+0xa4e>
 8003a9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aa0:	f04f 0400 	mov.w	r4, #0
 8003aa4:	e05a      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003aa6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003aaa:	f04f 0400 	mov.w	r4, #0
 8003aae:	e055      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ab4:	f04f 0400 	mov.w	r4, #0
 8003ab8:	e050      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003abe:	f04f 0400 	mov.w	r4, #0
 8003ac2:	e04b      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003ac4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ac8:	f04f 0400 	mov.w	r4, #0
 8003acc:	e046      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003ace:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ad2:	f04f 0400 	mov.w	r4, #0
 8003ad6:	e041      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <UART_SetConfig+0xaf0>)
 8003ada:	f04f 0400 	mov.w	r4, #0
 8003ade:	e03d      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <UART_SetConfig+0xaf4>)
 8003ae2:	f04f 0400 	mov.w	r4, #0
 8003ae6:	e039      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003ae8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003aec:	f04f 0400 	mov.w	r4, #0
 8003af0:	e034      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003af2:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <UART_SetConfig+0xaf8>)
 8003af4:	f04f 0400 	mov.w	r4, #0
 8003af8:	e030      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003afa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003afe:	f04f 0400 	mov.w	r4, #0
 8003b02:	e02b      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003b04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b08:	f04f 0400 	mov.w	r4, #0
 8003b0c:	e026      	b.n	8003b5c <UART_SetConfig+0xb04>
 8003b0e:	bf00      	nop
 8003b10:	14585500 	.word	0x14585500
 8003b14:	00000000 	.word	0x00000000
 8003b18:	28b0aa00 	.word	0x28b0aa00
 8003b1c:	00000000 	.word	0x00000000
 8003b20:	00f42400 	.word	0x00f42400
 8003b24:	f4240000 	.word	0xf4240000
 8003b28:	01e84800 	.word	0x01e84800
 8003b2c:	03d09000 	.word	0x03d09000
 8003b30:	07a12000 	.word	0x07a12000
 8003b34:	0f424000 	.word	0x0f424000
 8003b38:	186a0000 	.word	0x186a0000
 8003b3c:	1e848000 	.word	0x1e848000
 8003b40:	3d090000 	.word	0x3d090000
 8003b44:	7a120000 	.word	0x7a120000
 8003b48:	000aaa00 	.word	0x000aaa00
 8003b4c:	000ccc00 	.word	0x000ccc00
 8003b50:	00155500 	.word	0x00155500
 8003b54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003b58:	f04f 0400 	mov.w	r4, #0
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6852      	ldr	r2, [r2, #4]
 8003b60:	0852      	lsrs	r2, r2, #1
 8003b62:	4611      	mov	r1, r2
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	eb13 0b01 	adds.w	fp, r3, r1
 8003b6c:	eb44 0c02 	adc.w	ip, r4, r2
 8003b70:	4658      	mov	r0, fp
 8003b72:	4661      	mov	r1, ip
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f04f 0400 	mov.w	r4, #0
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4623      	mov	r3, r4
 8003b80:	f7fc fb4a 	bl	8000218 <__aeabi_uldivmod>
 8003b84:	4603      	mov	r3, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	61fb      	str	r3, [r7, #28]
            break;
 8003b8a:	e002      	b.n	8003b92 <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	76fb      	strb	r3, [r7, #27]
            break;
 8003b90:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b98:	d309      	bcc.n	8003bae <UART_SetConfig+0xb56>
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba0:	d205      	bcs.n	8003bae <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	f000 bc18 	b.w	80043de <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	76fb      	strb	r3, [r7, #27]
 8003bb2:	f000 bc14 	b.w	80043de <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bbe:	f040 8204 	bne.w	8003fca <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8003bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	f200 81df 	bhi.w	8003f8a <UART_SetConfig+0xf32>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <UART_SetConfig+0xb7c>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003bf9 	.word	0x08003bf9
 8003bd8:	08003cb1 	.word	0x08003cb1
 8003bdc:	08003d69 	.word	0x08003d69
 8003be0:	08003f8b 	.word	0x08003f8b
 8003be4:	08003e11 	.word	0x08003e11
 8003be8:	08003f8b 	.word	0x08003f8b
 8003bec:	08003f8b 	.word	0x08003f8b
 8003bf0:	08003f8b 	.word	0x08003f8b
 8003bf4:	08003ec9 	.word	0x08003ec9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7fe ff1e 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 8003bfc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d044      	beq.n	8003c90 <UART_SetConfig+0xc38>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d03e      	beq.n	8003c8c <UART_SetConfig+0xc34>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d038      	beq.n	8003c88 <UART_SetConfig+0xc30>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d032      	beq.n	8003c84 <UART_SetConfig+0xc2c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d02c      	beq.n	8003c80 <UART_SetConfig+0xc28>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d026      	beq.n	8003c7c <UART_SetConfig+0xc24>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d020      	beq.n	8003c78 <UART_SetConfig+0xc20>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	2b07      	cmp	r3, #7
 8003c3c:	d01a      	beq.n	8003c74 <UART_SetConfig+0xc1c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d014      	beq.n	8003c70 <UART_SetConfig+0xc18>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	2b09      	cmp	r3, #9
 8003c4c:	d00e      	beq.n	8003c6c <UART_SetConfig+0xc14>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b0a      	cmp	r3, #10
 8003c54:	d008      	beq.n	8003c68 <UART_SetConfig+0xc10>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	2b0b      	cmp	r3, #11
 8003c5c:	d102      	bne.n	8003c64 <UART_SetConfig+0xc0c>
 8003c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c62:	e016      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e014      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	e012      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c6c:	2340      	movs	r3, #64	; 0x40
 8003c6e:	e010      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c70:	2320      	movs	r3, #32
 8003c72:	e00e      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c74:	2310      	movs	r3, #16
 8003c76:	e00c      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c78:	230c      	movs	r3, #12
 8003c7a:	e00a      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c7c:	230a      	movs	r3, #10
 8003c7e:	e008      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c80:	2308      	movs	r3, #8
 8003c82:	e006      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c84:	2306      	movs	r3, #6
 8003c86:	e004      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	e002      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e000      	b.n	8003c92 <UART_SetConfig+0xc3a>
 8003c90:	2301      	movs	r3, #1
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	005a      	lsls	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	441a      	add	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	61fb      	str	r3, [r7, #28]
        break;
 8003cae:	e16f      	b.n	8003f90 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb0:	f7fe fed8 	bl	8002a64 <HAL_RCC_GetPCLK2Freq>
 8003cb4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d044      	beq.n	8003d48 <UART_SetConfig+0xcf0>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d03e      	beq.n	8003d44 <UART_SetConfig+0xcec>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d038      	beq.n	8003d40 <UART_SetConfig+0xce8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d032      	beq.n	8003d3c <UART_SetConfig+0xce4>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d02c      	beq.n	8003d38 <UART_SetConfig+0xce0>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b05      	cmp	r3, #5
 8003ce4:	d026      	beq.n	8003d34 <UART_SetConfig+0xcdc>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b06      	cmp	r3, #6
 8003cec:	d020      	beq.n	8003d30 <UART_SetConfig+0xcd8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	2b07      	cmp	r3, #7
 8003cf4:	d01a      	beq.n	8003d2c <UART_SetConfig+0xcd4>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d014      	beq.n	8003d28 <UART_SetConfig+0xcd0>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	2b09      	cmp	r3, #9
 8003d04:	d00e      	beq.n	8003d24 <UART_SetConfig+0xccc>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	2b0a      	cmp	r3, #10
 8003d0c:	d008      	beq.n	8003d20 <UART_SetConfig+0xcc8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2b0b      	cmp	r3, #11
 8003d14:	d102      	bne.n	8003d1c <UART_SetConfig+0xcc4>
 8003d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d1a:	e016      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e014      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	e012      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d24:	2340      	movs	r3, #64	; 0x40
 8003d26:	e010      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d28:	2320      	movs	r3, #32
 8003d2a:	e00e      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	e00c      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d30:	230c      	movs	r3, #12
 8003d32:	e00a      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d34:	230a      	movs	r3, #10
 8003d36:	e008      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d38:	2308      	movs	r3, #8
 8003d3a:	e006      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d3c:	2306      	movs	r3, #6
 8003d3e:	e004      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d40:	2304      	movs	r3, #4
 8003d42:	e002      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e000      	b.n	8003d4a <UART_SetConfig+0xcf2>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	005a      	lsls	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	441a      	add	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	61fb      	str	r3, [r7, #28]
        break;
 8003d66:	e113      	b.n	8003f90 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d043      	beq.n	8003df8 <UART_SetConfig+0xda0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d03d      	beq.n	8003df4 <UART_SetConfig+0xd9c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d037      	beq.n	8003df0 <UART_SetConfig+0xd98>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d031      	beq.n	8003dec <UART_SetConfig+0xd94>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d02b      	beq.n	8003de8 <UART_SetConfig+0xd90>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	2b05      	cmp	r3, #5
 8003d96:	d025      	beq.n	8003de4 <UART_SetConfig+0xd8c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	2b06      	cmp	r3, #6
 8003d9e:	d01f      	beq.n	8003de0 <UART_SetConfig+0xd88>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	2b07      	cmp	r3, #7
 8003da6:	d019      	beq.n	8003ddc <UART_SetConfig+0xd84>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d013      	beq.n	8003dd8 <UART_SetConfig+0xd80>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	2b09      	cmp	r3, #9
 8003db6:	d00d      	beq.n	8003dd4 <UART_SetConfig+0xd7c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	2b0a      	cmp	r3, #10
 8003dbe:	d007      	beq.n	8003dd0 <UART_SetConfig+0xd78>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	2b0b      	cmp	r3, #11
 8003dc6:	d101      	bne.n	8003dcc <UART_SetConfig+0xd74>
 8003dc8:	4b8d      	ldr	r3, [pc, #564]	; (8004000 <UART_SetConfig+0xfa8>)
 8003dca:	e016      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003dcc:	4b8d      	ldr	r3, [pc, #564]	; (8004004 <UART_SetConfig+0xfac>)
 8003dce:	e014      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003dd0:	4b8d      	ldr	r3, [pc, #564]	; (8004008 <UART_SetConfig+0xfb0>)
 8003dd2:	e012      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003dd4:	4b8d      	ldr	r3, [pc, #564]	; (800400c <UART_SetConfig+0xfb4>)
 8003dd6:	e010      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003dd8:	4b8d      	ldr	r3, [pc, #564]	; (8004010 <UART_SetConfig+0xfb8>)
 8003dda:	e00e      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003ddc:	4b8d      	ldr	r3, [pc, #564]	; (8004014 <UART_SetConfig+0xfbc>)
 8003dde:	e00c      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003de0:	4b8d      	ldr	r3, [pc, #564]	; (8004018 <UART_SetConfig+0xfc0>)
 8003de2:	e00a      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003de4:	4b8d      	ldr	r3, [pc, #564]	; (800401c <UART_SetConfig+0xfc4>)
 8003de6:	e008      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003de8:	4b8d      	ldr	r3, [pc, #564]	; (8004020 <UART_SetConfig+0xfc8>)
 8003dea:	e006      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003dec:	4b8d      	ldr	r3, [pc, #564]	; (8004024 <UART_SetConfig+0xfcc>)
 8003dee:	e004      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003df0:	4b8d      	ldr	r3, [pc, #564]	; (8004028 <UART_SetConfig+0xfd0>)
 8003df2:	e002      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003df4:	4b8d      	ldr	r3, [pc, #564]	; (800402c <UART_SetConfig+0xfd4>)
 8003df6:	e000      	b.n	8003dfa <UART_SetConfig+0xda2>
 8003df8:	4b82      	ldr	r3, [pc, #520]	; (8004004 <UART_SetConfig+0xfac>)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6852      	ldr	r2, [r2, #4]
 8003dfe:	0852      	lsrs	r2, r2, #1
 8003e00:	441a      	add	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	61fb      	str	r3, [r7, #28]
        break;
 8003e0e:	e0bf      	b.n	8003f90 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e10:	f7fe fda4 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8003e14:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d044      	beq.n	8003ea8 <UART_SetConfig+0xe50>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d03e      	beq.n	8003ea4 <UART_SetConfig+0xe4c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d038      	beq.n	8003ea0 <UART_SetConfig+0xe48>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d032      	beq.n	8003e9c <UART_SetConfig+0xe44>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d02c      	beq.n	8003e98 <UART_SetConfig+0xe40>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	d026      	beq.n	8003e94 <UART_SetConfig+0xe3c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	2b06      	cmp	r3, #6
 8003e4c:	d020      	beq.n	8003e90 <UART_SetConfig+0xe38>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	2b07      	cmp	r3, #7
 8003e54:	d01a      	beq.n	8003e8c <UART_SetConfig+0xe34>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d014      	beq.n	8003e88 <UART_SetConfig+0xe30>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b09      	cmp	r3, #9
 8003e64:	d00e      	beq.n	8003e84 <UART_SetConfig+0xe2c>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2b0a      	cmp	r3, #10
 8003e6c:	d008      	beq.n	8003e80 <UART_SetConfig+0xe28>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	2b0b      	cmp	r3, #11
 8003e74:	d102      	bne.n	8003e7c <UART_SetConfig+0xe24>
 8003e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e7a:	e016      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e014      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	e012      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003e84:	2340      	movs	r3, #64	; 0x40
 8003e86:	e010      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003e88:	2320      	movs	r3, #32
 8003e8a:	e00e      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	e00c      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003e90:	230c      	movs	r3, #12
 8003e92:	e00a      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003e94:	230a      	movs	r3, #10
 8003e96:	e008      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003e98:	2308      	movs	r3, #8
 8003e9a:	e006      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003e9c:	2306      	movs	r3, #6
 8003e9e:	e004      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	e002      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e000      	b.n	8003eaa <UART_SetConfig+0xe52>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	005a      	lsls	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	441a      	add	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	61fb      	str	r3, [r7, #28]
        break;
 8003ec6:	e063      	b.n	8003f90 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d04f      	beq.n	8003f70 <UART_SetConfig+0xf18>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d048      	beq.n	8003f6a <UART_SetConfig+0xf12>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d041      	beq.n	8003f64 <UART_SetConfig+0xf0c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d03a      	beq.n	8003f5e <UART_SetConfig+0xf06>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d033      	beq.n	8003f58 <UART_SetConfig+0xf00>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d02c      	beq.n	8003f52 <UART_SetConfig+0xefa>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d025      	beq.n	8003f4c <UART_SetConfig+0xef4>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	2b07      	cmp	r3, #7
 8003f06:	d01e      	beq.n	8003f46 <UART_SetConfig+0xeee>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d017      	beq.n	8003f40 <UART_SetConfig+0xee8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	2b09      	cmp	r3, #9
 8003f16:	d010      	beq.n	8003f3a <UART_SetConfig+0xee2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	2b0a      	cmp	r3, #10
 8003f1e:	d009      	beq.n	8003f34 <UART_SetConfig+0xedc>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	2b0b      	cmp	r3, #11
 8003f26:	d102      	bne.n	8003f2e <UART_SetConfig+0xed6>
 8003f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f2c:	e022      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f32:	e01f      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f38:	e01c      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3e:	e019      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f44:	e016      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f4a:	e013      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f4c:	f241 5354 	movw	r3, #5460	; 0x1554
 8003f50:	e010      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f52:	f641 1398 	movw	r3, #6552	; 0x1998
 8003f56:	e00d      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f5c:	e00a      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f5e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8003f62:	e007      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f68:	e004      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6e:	e001      	b.n	8003f74 <UART_SetConfig+0xf1c>
 8003f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6852      	ldr	r2, [r2, #4]
 8003f78:	0852      	lsrs	r2, r2, #1
 8003f7a:	441a      	add	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	61fb      	str	r3, [r7, #28]
        break;
 8003f88:	e002      	b.n	8003f90 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	76fb      	strb	r3, [r7, #27]
        break;
 8003f8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b0f      	cmp	r3, #15
 8003f94:	d916      	bls.n	8003fc4 <UART_SetConfig+0xf6c>
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9c:	d212      	bcs.n	8003fc4 <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f023 030f 	bic.w	r3, r3, #15
 8003fa6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	89fb      	ldrh	r3, [r7, #14]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	89fa      	ldrh	r2, [r7, #14]
 8003fc0:	60da      	str	r2, [r3, #12]
 8003fc2:	e20c      	b.n	80043de <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	76fb      	strb	r3, [r7, #27]
 8003fc8:	e209      	b.n	80043de <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8003fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	f200 81f4 	bhi.w	80043bc <UART_SetConfig+0x1364>
 8003fd4:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <UART_SetConfig+0xf84>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08004031 	.word	0x08004031
 8003fe0:	080040e7 	.word	0x080040e7
 8003fe4:	0800419d 	.word	0x0800419d
 8003fe8:	080043bd 	.word	0x080043bd
 8003fec:	08004247 	.word	0x08004247
 8003ff0:	080043bd 	.word	0x080043bd
 8003ff4:	080043bd 	.word	0x080043bd
 8003ff8:	080043bd 	.word	0x080043bd
 8003ffc:	080042fd 	.word	0x080042fd
 8004000:	0001e848 	.word	0x0001e848
 8004004:	01e84800 	.word	0x01e84800
 8004008:	0003d090 	.word	0x0003d090
 800400c:	0007a120 	.word	0x0007a120
 8004010:	000f4240 	.word	0x000f4240
 8004014:	001e8480 	.word	0x001e8480
 8004018:	0028b0aa 	.word	0x0028b0aa
 800401c:	0030d400 	.word	0x0030d400
 8004020:	003d0900 	.word	0x003d0900
 8004024:	00516154 	.word	0x00516154
 8004028:	007a1200 	.word	0x007a1200
 800402c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004030:	f7fe fd02 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 8004034:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2b00      	cmp	r3, #0
 800403c:	d044      	beq.n	80040c8 <UART_SetConfig+0x1070>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b01      	cmp	r3, #1
 8004044:	d03e      	beq.n	80040c4 <UART_SetConfig+0x106c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	2b02      	cmp	r3, #2
 800404c:	d038      	beq.n	80040c0 <UART_SetConfig+0x1068>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	2b03      	cmp	r3, #3
 8004054:	d032      	beq.n	80040bc <UART_SetConfig+0x1064>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b04      	cmp	r3, #4
 800405c:	d02c      	beq.n	80040b8 <UART_SetConfig+0x1060>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	2b05      	cmp	r3, #5
 8004064:	d026      	beq.n	80040b4 <UART_SetConfig+0x105c>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	2b06      	cmp	r3, #6
 800406c:	d020      	beq.n	80040b0 <UART_SetConfig+0x1058>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	2b07      	cmp	r3, #7
 8004074:	d01a      	beq.n	80040ac <UART_SetConfig+0x1054>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b08      	cmp	r3, #8
 800407c:	d014      	beq.n	80040a8 <UART_SetConfig+0x1050>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b09      	cmp	r3, #9
 8004084:	d00e      	beq.n	80040a4 <UART_SetConfig+0x104c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	2b0a      	cmp	r3, #10
 800408c:	d008      	beq.n	80040a0 <UART_SetConfig+0x1048>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2b0b      	cmp	r3, #11
 8004094:	d102      	bne.n	800409c <UART_SetConfig+0x1044>
 8004096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800409a:	e016      	b.n	80040ca <UART_SetConfig+0x1072>
 800409c:	2301      	movs	r3, #1
 800409e:	e014      	b.n	80040ca <UART_SetConfig+0x1072>
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	e012      	b.n	80040ca <UART_SetConfig+0x1072>
 80040a4:	2340      	movs	r3, #64	; 0x40
 80040a6:	e010      	b.n	80040ca <UART_SetConfig+0x1072>
 80040a8:	2320      	movs	r3, #32
 80040aa:	e00e      	b.n	80040ca <UART_SetConfig+0x1072>
 80040ac:	2310      	movs	r3, #16
 80040ae:	e00c      	b.n	80040ca <UART_SetConfig+0x1072>
 80040b0:	230c      	movs	r3, #12
 80040b2:	e00a      	b.n	80040ca <UART_SetConfig+0x1072>
 80040b4:	230a      	movs	r3, #10
 80040b6:	e008      	b.n	80040ca <UART_SetConfig+0x1072>
 80040b8:	2308      	movs	r3, #8
 80040ba:	e006      	b.n	80040ca <UART_SetConfig+0x1072>
 80040bc:	2306      	movs	r3, #6
 80040be:	e004      	b.n	80040ca <UART_SetConfig+0x1072>
 80040c0:	2304      	movs	r3, #4
 80040c2:	e002      	b.n	80040ca <UART_SetConfig+0x1072>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e000      	b.n	80040ca <UART_SetConfig+0x1072>
 80040c8:	2301      	movs	r3, #1
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	441a      	add	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	61fb      	str	r3, [r7, #28]
        break;
 80040e4:	e16d      	b.n	80043c2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e6:	f7fe fcbd 	bl	8002a64 <HAL_RCC_GetPCLK2Freq>
 80040ea:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d044      	beq.n	800417e <UART_SetConfig+0x1126>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d03e      	beq.n	800417a <UART_SetConfig+0x1122>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	2b02      	cmp	r3, #2
 8004102:	d038      	beq.n	8004176 <UART_SetConfig+0x111e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	2b03      	cmp	r3, #3
 800410a:	d032      	beq.n	8004172 <UART_SetConfig+0x111a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2b04      	cmp	r3, #4
 8004112:	d02c      	beq.n	800416e <UART_SetConfig+0x1116>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2b05      	cmp	r3, #5
 800411a:	d026      	beq.n	800416a <UART_SetConfig+0x1112>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	2b06      	cmp	r3, #6
 8004122:	d020      	beq.n	8004166 <UART_SetConfig+0x110e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	2b07      	cmp	r3, #7
 800412a:	d01a      	beq.n	8004162 <UART_SetConfig+0x110a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2b08      	cmp	r3, #8
 8004132:	d014      	beq.n	800415e <UART_SetConfig+0x1106>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	2b09      	cmp	r3, #9
 800413a:	d00e      	beq.n	800415a <UART_SetConfig+0x1102>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	2b0a      	cmp	r3, #10
 8004142:	d008      	beq.n	8004156 <UART_SetConfig+0x10fe>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	2b0b      	cmp	r3, #11
 800414a:	d102      	bne.n	8004152 <UART_SetConfig+0x10fa>
 800414c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004150:	e016      	b.n	8004180 <UART_SetConfig+0x1128>
 8004152:	2301      	movs	r3, #1
 8004154:	e014      	b.n	8004180 <UART_SetConfig+0x1128>
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	e012      	b.n	8004180 <UART_SetConfig+0x1128>
 800415a:	2340      	movs	r3, #64	; 0x40
 800415c:	e010      	b.n	8004180 <UART_SetConfig+0x1128>
 800415e:	2320      	movs	r3, #32
 8004160:	e00e      	b.n	8004180 <UART_SetConfig+0x1128>
 8004162:	2310      	movs	r3, #16
 8004164:	e00c      	b.n	8004180 <UART_SetConfig+0x1128>
 8004166:	230c      	movs	r3, #12
 8004168:	e00a      	b.n	8004180 <UART_SetConfig+0x1128>
 800416a:	230a      	movs	r3, #10
 800416c:	e008      	b.n	8004180 <UART_SetConfig+0x1128>
 800416e:	2308      	movs	r3, #8
 8004170:	e006      	b.n	8004180 <UART_SetConfig+0x1128>
 8004172:	2306      	movs	r3, #6
 8004174:	e004      	b.n	8004180 <UART_SetConfig+0x1128>
 8004176:	2304      	movs	r3, #4
 8004178:	e002      	b.n	8004180 <UART_SetConfig+0x1128>
 800417a:	2302      	movs	r3, #2
 800417c:	e000      	b.n	8004180 <UART_SetConfig+0x1128>
 800417e:	2301      	movs	r3, #1
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	fbb2 f2f3 	udiv	r2, r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	085b      	lsrs	r3, r3, #1
 800418c:	441a      	add	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	b29b      	uxth	r3, r3
 8004198:	61fb      	str	r3, [r7, #28]
        break;
 800419a:	e112      	b.n	80043c2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d044      	beq.n	800422e <UART_SetConfig+0x11d6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d03e      	beq.n	800422a <UART_SetConfig+0x11d2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d038      	beq.n	8004226 <UART_SetConfig+0x11ce>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d032      	beq.n	8004222 <UART_SetConfig+0x11ca>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d02c      	beq.n	800421e <UART_SetConfig+0x11c6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	2b05      	cmp	r3, #5
 80041ca:	d026      	beq.n	800421a <UART_SetConfig+0x11c2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	2b06      	cmp	r3, #6
 80041d2:	d020      	beq.n	8004216 <UART_SetConfig+0x11be>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	2b07      	cmp	r3, #7
 80041da:	d01a      	beq.n	8004212 <UART_SetConfig+0x11ba>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d014      	beq.n	800420e <UART_SetConfig+0x11b6>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	2b09      	cmp	r3, #9
 80041ea:	d00e      	beq.n	800420a <UART_SetConfig+0x11b2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	2b0a      	cmp	r3, #10
 80041f2:	d008      	beq.n	8004206 <UART_SetConfig+0x11ae>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	2b0b      	cmp	r3, #11
 80041fa:	d102      	bne.n	8004202 <UART_SetConfig+0x11aa>
 80041fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004200:	e016      	b.n	8004230 <UART_SetConfig+0x11d8>
 8004202:	4b81      	ldr	r3, [pc, #516]	; (8004408 <UART_SetConfig+0x13b0>)
 8004204:	e014      	b.n	8004230 <UART_SetConfig+0x11d8>
 8004206:	4b81      	ldr	r3, [pc, #516]	; (800440c <UART_SetConfig+0x13b4>)
 8004208:	e012      	b.n	8004230 <UART_SetConfig+0x11d8>
 800420a:	4b81      	ldr	r3, [pc, #516]	; (8004410 <UART_SetConfig+0x13b8>)
 800420c:	e010      	b.n	8004230 <UART_SetConfig+0x11d8>
 800420e:	4b81      	ldr	r3, [pc, #516]	; (8004414 <UART_SetConfig+0x13bc>)
 8004210:	e00e      	b.n	8004230 <UART_SetConfig+0x11d8>
 8004212:	4b81      	ldr	r3, [pc, #516]	; (8004418 <UART_SetConfig+0x13c0>)
 8004214:	e00c      	b.n	8004230 <UART_SetConfig+0x11d8>
 8004216:	4b81      	ldr	r3, [pc, #516]	; (800441c <UART_SetConfig+0x13c4>)
 8004218:	e00a      	b.n	8004230 <UART_SetConfig+0x11d8>
 800421a:	4b81      	ldr	r3, [pc, #516]	; (8004420 <UART_SetConfig+0x13c8>)
 800421c:	e008      	b.n	8004230 <UART_SetConfig+0x11d8>
 800421e:	4b81      	ldr	r3, [pc, #516]	; (8004424 <UART_SetConfig+0x13cc>)
 8004220:	e006      	b.n	8004230 <UART_SetConfig+0x11d8>
 8004222:	4b81      	ldr	r3, [pc, #516]	; (8004428 <UART_SetConfig+0x13d0>)
 8004224:	e004      	b.n	8004230 <UART_SetConfig+0x11d8>
 8004226:	4b81      	ldr	r3, [pc, #516]	; (800442c <UART_SetConfig+0x13d4>)
 8004228:	e002      	b.n	8004230 <UART_SetConfig+0x11d8>
 800422a:	4b81      	ldr	r3, [pc, #516]	; (8004430 <UART_SetConfig+0x13d8>)
 800422c:	e000      	b.n	8004230 <UART_SetConfig+0x11d8>
 800422e:	4b76      	ldr	r3, [pc, #472]	; (8004408 <UART_SetConfig+0x13b0>)
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6852      	ldr	r2, [r2, #4]
 8004234:	0852      	lsrs	r2, r2, #1
 8004236:	441a      	add	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	b29b      	uxth	r3, r3
 8004242:	61fb      	str	r3, [r7, #28]
        break;
 8004244:	e0bd      	b.n	80043c2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004246:	f7fe fb89 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800424a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d044      	beq.n	80042de <UART_SetConfig+0x1286>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	2b01      	cmp	r3, #1
 800425a:	d03e      	beq.n	80042da <UART_SetConfig+0x1282>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b02      	cmp	r3, #2
 8004262:	d038      	beq.n	80042d6 <UART_SetConfig+0x127e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2b03      	cmp	r3, #3
 800426a:	d032      	beq.n	80042d2 <UART_SetConfig+0x127a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	2b04      	cmp	r3, #4
 8004272:	d02c      	beq.n	80042ce <UART_SetConfig+0x1276>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	2b05      	cmp	r3, #5
 800427a:	d026      	beq.n	80042ca <UART_SetConfig+0x1272>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	2b06      	cmp	r3, #6
 8004282:	d020      	beq.n	80042c6 <UART_SetConfig+0x126e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	2b07      	cmp	r3, #7
 800428a:	d01a      	beq.n	80042c2 <UART_SetConfig+0x126a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	2b08      	cmp	r3, #8
 8004292:	d014      	beq.n	80042be <UART_SetConfig+0x1266>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	2b09      	cmp	r3, #9
 800429a:	d00e      	beq.n	80042ba <UART_SetConfig+0x1262>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	2b0a      	cmp	r3, #10
 80042a2:	d008      	beq.n	80042b6 <UART_SetConfig+0x125e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	2b0b      	cmp	r3, #11
 80042aa:	d102      	bne.n	80042b2 <UART_SetConfig+0x125a>
 80042ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042b0:	e016      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e014      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042b6:	2380      	movs	r3, #128	; 0x80
 80042b8:	e012      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042ba:	2340      	movs	r3, #64	; 0x40
 80042bc:	e010      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042be:	2320      	movs	r3, #32
 80042c0:	e00e      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042c2:	2310      	movs	r3, #16
 80042c4:	e00c      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042c6:	230c      	movs	r3, #12
 80042c8:	e00a      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042ca:	230a      	movs	r3, #10
 80042cc:	e008      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042ce:	2308      	movs	r3, #8
 80042d0:	e006      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042d2:	2306      	movs	r3, #6
 80042d4:	e004      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042d6:	2304      	movs	r3, #4
 80042d8:	e002      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042da:	2302      	movs	r3, #2
 80042dc:	e000      	b.n	80042e0 <UART_SetConfig+0x1288>
 80042de:	2301      	movs	r3, #1
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	441a      	add	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	61fb      	str	r3, [r7, #28]
        break;
 80042fa:	e062      	b.n	80043c2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d04e      	beq.n	80043a2 <UART_SetConfig+0x134a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b01      	cmp	r3, #1
 800430a:	d047      	beq.n	800439c <UART_SetConfig+0x1344>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	2b02      	cmp	r3, #2
 8004312:	d040      	beq.n	8004396 <UART_SetConfig+0x133e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	2b03      	cmp	r3, #3
 800431a:	d039      	beq.n	8004390 <UART_SetConfig+0x1338>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	2b04      	cmp	r3, #4
 8004322:	d032      	beq.n	800438a <UART_SetConfig+0x1332>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2b05      	cmp	r3, #5
 800432a:	d02b      	beq.n	8004384 <UART_SetConfig+0x132c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	2b06      	cmp	r3, #6
 8004332:	d024      	beq.n	800437e <UART_SetConfig+0x1326>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	2b07      	cmp	r3, #7
 800433a:	d01d      	beq.n	8004378 <UART_SetConfig+0x1320>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2b08      	cmp	r3, #8
 8004342:	d016      	beq.n	8004372 <UART_SetConfig+0x131a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	2b09      	cmp	r3, #9
 800434a:	d00f      	beq.n	800436c <UART_SetConfig+0x1314>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	2b0a      	cmp	r3, #10
 8004352:	d008      	beq.n	8004366 <UART_SetConfig+0x130e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	2b0b      	cmp	r3, #11
 800435a:	d101      	bne.n	8004360 <UART_SetConfig+0x1308>
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	e022      	b.n	80043a6 <UART_SetConfig+0x134e>
 8004360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004364:	e01f      	b.n	80043a6 <UART_SetConfig+0x134e>
 8004366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800436a:	e01c      	b.n	80043a6 <UART_SetConfig+0x134e>
 800436c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004370:	e019      	b.n	80043a6 <UART_SetConfig+0x134e>
 8004372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004376:	e016      	b.n	80043a6 <UART_SetConfig+0x134e>
 8004378:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800437c:	e013      	b.n	80043a6 <UART_SetConfig+0x134e>
 800437e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004382:	e010      	b.n	80043a6 <UART_SetConfig+0x134e>
 8004384:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004388:	e00d      	b.n	80043a6 <UART_SetConfig+0x134e>
 800438a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800438e:	e00a      	b.n	80043a6 <UART_SetConfig+0x134e>
 8004390:	f241 5355 	movw	r3, #5461	; 0x1555
 8004394:	e007      	b.n	80043a6 <UART_SetConfig+0x134e>
 8004396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800439a:	e004      	b.n	80043a6 <UART_SetConfig+0x134e>
 800439c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043a0:	e001      	b.n	80043a6 <UART_SetConfig+0x134e>
 80043a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6852      	ldr	r2, [r2, #4]
 80043aa:	0852      	lsrs	r2, r2, #1
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	61fb      	str	r3, [r7, #28]
        break;
 80043ba:	e002      	b.n	80043c2 <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	76fb      	strb	r3, [r7, #27]
        break;
 80043c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d908      	bls.n	80043da <UART_SetConfig+0x1382>
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ce:	d204      	bcs.n	80043da <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	60da      	str	r2, [r3, #12]
 80043d8:	e001      	b.n	80043de <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80043fa:	7efb      	ldrb	r3, [r7, #27]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3728      	adds	r7, #40	; 0x28
 8004400:	46bd      	mov	sp, r7
 8004402:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004406:	bf00      	nop
 8004408:	00f42400 	.word	0x00f42400
 800440c:	0001e848 	.word	0x0001e848
 8004410:	0003d090 	.word	0x0003d090
 8004414:	0007a120 	.word	0x0007a120
 8004418:	000f4240 	.word	0x000f4240
 800441c:	00145855 	.word	0x00145855
 8004420:	00186a00 	.word	0x00186a00
 8004424:	001e8480 	.word	0x001e8480
 8004428:	0028b0aa 	.word	0x0028b0aa
 800442c:	003d0900 	.word	0x003d0900
 8004430:	007a1200 	.word	0x007a1200

08004434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01a      	beq.n	800454a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004532:	d10a      	bne.n	800454a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af02      	add	r7, sp, #8
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004588:	f7fc fbec 	bl	8000d64 <HAL_GetTick>
 800458c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b08      	cmp	r3, #8
 800459a:	d10e      	bne.n	80045ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800459c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f82c 	bl	8004608 <UART_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e022      	b.n	8004600 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d10e      	bne.n	80045e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f816 	bl	8004608 <UART_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e00c      	b.n	8004600 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004618:	e02c      	b.n	8004674 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004620:	d028      	beq.n	8004674 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fc fb9f 	bl	8000d64 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <UART_WaitOnFlagUntilTimeout+0x30>
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11d      	bne.n	8004674 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004646:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e00f      	b.n	8004694 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4013      	ands	r3, r2
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	429a      	cmp	r2, r3
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	429a      	cmp	r2, r3
 8004690:	d0c3      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e027      	b.n	8004702 <HAL_UARTEx_DisableFifoMode+0x66>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2224      	movs	r2, #36	; 0x24
 80046be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004722:	2302      	movs	r3, #2
 8004724:	e02d      	b.n	8004782 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2224      	movs	r2, #36	; 0x24
 8004732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f850 	bl	8004808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800479e:	2302      	movs	r3, #2
 80047a0:	e02d      	b.n	80047fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2224      	movs	r2, #36	; 0x24
 80047ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f812 	bl	8004808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	; 0x24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004810:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <UARTEx_SetNbDataToProcess+0xc8>)
 8004812:	f107 0314 	add.w	r3, r7, #20
 8004816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800481a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800481e:	4a2d      	ldr	r2, [pc, #180]	; (80048d4 <UARTEx_SetNbDataToProcess+0xcc>)
 8004820:	f107 030c 	add.w	r3, r7, #12
 8004824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004828:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004830:	2b00      	cmp	r3, #0
 8004832:	d108      	bne.n	8004846 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004844:	e03d      	b.n	80048c2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004846:	2308      	movs	r3, #8
 8004848:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800484a:	2308      	movs	r3, #8
 800484c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	0e5b      	lsrs	r3, r3, #25
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	0f5b      	lsrs	r3, r3, #29
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800486e:	7fbb      	ldrb	r3, [r7, #30]
 8004870:	7f3a      	ldrb	r2, [r7, #28]
 8004872:	f107 0120 	add.w	r1, r7, #32
 8004876:	440a      	add	r2, r1
 8004878:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800487c:	fb02 f303 	mul.w	r3, r2, r3
 8004880:	7f3a      	ldrb	r2, [r7, #28]
 8004882:	f107 0120 	add.w	r1, r7, #32
 8004886:	440a      	add	r2, r1
 8004888:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800488c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004898:	7ffb      	ldrb	r3, [r7, #31]
 800489a:	7f7a      	ldrb	r2, [r7, #29]
 800489c:	f107 0120 	add.w	r1, r7, #32
 80048a0:	440a      	add	r2, r1
 80048a2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	7f7a      	ldrb	r2, [r7, #29]
 80048ac:	f107 0120 	add.w	r1, r7, #32
 80048b0:	440a      	add	r2, r1
 80048b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80048b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80048c2:	bf00      	nop
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	08004948 	.word	0x08004948
 80048d4:	08004950 	.word	0x08004950

080048d8 <__libc_init_array>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4e0d      	ldr	r6, [pc, #52]	; (8004910 <__libc_init_array+0x38>)
 80048dc:	4c0d      	ldr	r4, [pc, #52]	; (8004914 <__libc_init_array+0x3c>)
 80048de:	1ba4      	subs	r4, r4, r6
 80048e0:	10a4      	asrs	r4, r4, #2
 80048e2:	2500      	movs	r5, #0
 80048e4:	42a5      	cmp	r5, r4
 80048e6:	d109      	bne.n	80048fc <__libc_init_array+0x24>
 80048e8:	4e0b      	ldr	r6, [pc, #44]	; (8004918 <__libc_init_array+0x40>)
 80048ea:	4c0c      	ldr	r4, [pc, #48]	; (800491c <__libc_init_array+0x44>)
 80048ec:	f000 f820 	bl	8004930 <_init>
 80048f0:	1ba4      	subs	r4, r4, r6
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	2500      	movs	r5, #0
 80048f6:	42a5      	cmp	r5, r4
 80048f8:	d105      	bne.n	8004906 <__libc_init_array+0x2e>
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
 80048fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004900:	4798      	blx	r3
 8004902:	3501      	adds	r5, #1
 8004904:	e7ee      	b.n	80048e4 <__libc_init_array+0xc>
 8004906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800490a:	4798      	blx	r3
 800490c:	3501      	adds	r5, #1
 800490e:	e7f2      	b.n	80048f6 <__libc_init_array+0x1e>
 8004910:	08004988 	.word	0x08004988
 8004914:	08004988 	.word	0x08004988
 8004918:	08004988 	.word	0x08004988
 800491c:	0800498c 	.word	0x0800498c

08004920 <memset>:
 8004920:	4402      	add	r2, r0
 8004922:	4603      	mov	r3, r0
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <memset+0xa>
 8004928:	4770      	bx	lr
 800492a:	f803 1b01 	strb.w	r1, [r3], #1
 800492e:	e7f9      	b.n	8004924 <memset+0x4>

08004930 <_init>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr

0800493c <_fini>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	bf00      	nop
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr
