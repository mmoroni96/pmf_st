
SensorBoard_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006e0c  08006e0c  00016e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006efc  08006efc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006efc  08006efc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006efc  08006efc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000000c  08006f10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08006f10  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001731c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002852  00000000  00000000  00037350  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  00039ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b8  00000000  00000000  0003b298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016bcc  00000000  00000000  0003c850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd79  00000000  00000000  0005341c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dc94  00000000  00000000  00061195  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dee29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005740  00000000  00000000  000deea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006df4 	.word	0x08006df4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08006df4 	.word	0x08006df4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fe8e 	bl	8000f48 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fdaf 	bl	8000d94 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fbe5 	bl	8000a0c <__aeabi_fsub>
 8000242:	f000 fda7 	bl	8000d94 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fadd>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	4647      	mov	r7, r8
 8000254:	46ce      	mov	lr, r9
 8000256:	0243      	lsls	r3, r0, #9
 8000258:	0a5b      	lsrs	r3, r3, #9
 800025a:	0044      	lsls	r4, r0, #1
 800025c:	0fc2      	lsrs	r2, r0, #31
 800025e:	469c      	mov	ip, r3
 8000260:	0048      	lsls	r0, r1, #1
 8000262:	00dd      	lsls	r5, r3, #3
 8000264:	024b      	lsls	r3, r1, #9
 8000266:	0e24      	lsrs	r4, r4, #24
 8000268:	0a5b      	lsrs	r3, r3, #9
 800026a:	0e00      	lsrs	r0, r0, #24
 800026c:	b580      	push	{r7, lr}
 800026e:	4698      	mov	r8, r3
 8000270:	0026      	movs	r6, r4
 8000272:	4691      	mov	r9, r2
 8000274:	0fc9      	lsrs	r1, r1, #31
 8000276:	00db      	lsls	r3, r3, #3
 8000278:	1a27      	subs	r7, r4, r0
 800027a:	428a      	cmp	r2, r1
 800027c:	d029      	beq.n	80002d2 <__aeabi_fadd+0x82>
 800027e:	2f00      	cmp	r7, #0
 8000280:	dd15      	ble.n	80002ae <__aeabi_fadd+0x5e>
 8000282:	2800      	cmp	r0, #0
 8000284:	d14a      	bne.n	800031c <__aeabi_fadd+0xcc>
 8000286:	2b00      	cmp	r3, #0
 8000288:	d000      	beq.n	800028c <__aeabi_fadd+0x3c>
 800028a:	e095      	b.n	80003b8 <__aeabi_fadd+0x168>
 800028c:	08ed      	lsrs	r5, r5, #3
 800028e:	2cff      	cmp	r4, #255	; 0xff
 8000290:	d100      	bne.n	8000294 <__aeabi_fadd+0x44>
 8000292:	e088      	b.n	80003a6 <__aeabi_fadd+0x156>
 8000294:	026b      	lsls	r3, r5, #9
 8000296:	0a5b      	lsrs	r3, r3, #9
 8000298:	b2e6      	uxtb	r6, r4
 800029a:	025b      	lsls	r3, r3, #9
 800029c:	05f6      	lsls	r6, r6, #23
 800029e:	0a58      	lsrs	r0, r3, #9
 80002a0:	4330      	orrs	r0, r6
 80002a2:	07d2      	lsls	r2, r2, #31
 80002a4:	4310      	orrs	r0, r2
 80002a6:	bc0c      	pop	{r2, r3}
 80002a8:	4690      	mov	r8, r2
 80002aa:	4699      	mov	r9, r3
 80002ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002ae:	2f00      	cmp	r7, #0
 80002b0:	d000      	beq.n	80002b4 <__aeabi_fadd+0x64>
 80002b2:	e087      	b.n	80003c4 <__aeabi_fadd+0x174>
 80002b4:	1c60      	adds	r0, r4, #1
 80002b6:	b2c0      	uxtb	r0, r0
 80002b8:	2801      	cmp	r0, #1
 80002ba:	dc00      	bgt.n	80002be <__aeabi_fadd+0x6e>
 80002bc:	e0b6      	b.n	800042c <__aeabi_fadd+0x1dc>
 80002be:	1aee      	subs	r6, r5, r3
 80002c0:	0172      	lsls	r2, r6, #5
 80002c2:	d500      	bpl.n	80002c6 <__aeabi_fadd+0x76>
 80002c4:	e0c5      	b.n	8000452 <__aeabi_fadd+0x202>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d13d      	bne.n	8000346 <__aeabi_fadd+0xf6>
 80002ca:	2200      	movs	r2, #0
 80002cc:	2600      	movs	r6, #0
 80002ce:	2300      	movs	r3, #0
 80002d0:	e7e3      	b.n	800029a <__aeabi_fadd+0x4a>
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	dc00      	bgt.n	80002d8 <__aeabi_fadd+0x88>
 80002d6:	e096      	b.n	8000406 <__aeabi_fadd+0x1b6>
 80002d8:	2800      	cmp	r0, #0
 80002da:	d05d      	beq.n	8000398 <__aeabi_fadd+0x148>
 80002dc:	2cff      	cmp	r4, #255	; 0xff
 80002de:	d060      	beq.n	80003a2 <__aeabi_fadd+0x152>
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	04d2      	lsls	r2, r2, #19
 80002e4:	4313      	orrs	r3, r2
 80002e6:	2f1b      	cmp	r7, #27
 80002e8:	dd00      	ble.n	80002ec <__aeabi_fadd+0x9c>
 80002ea:	e0ec      	b.n	80004c6 <__aeabi_fadd+0x276>
 80002ec:	2220      	movs	r2, #32
 80002ee:	1bd2      	subs	r2, r2, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	4093      	lsls	r3, r2
 80002f4:	40f8      	lsrs	r0, r7
 80002f6:	1e5a      	subs	r2, r3, #1
 80002f8:	4193      	sbcs	r3, r2
 80002fa:	4303      	orrs	r3, r0
 80002fc:	18ed      	adds	r5, r5, r3
 80002fe:	016b      	lsls	r3, r5, #5
 8000300:	d57b      	bpl.n	80003fa <__aeabi_fadd+0x1aa>
 8000302:	3401      	adds	r4, #1
 8000304:	2cff      	cmp	r4, #255	; 0xff
 8000306:	d100      	bne.n	800030a <__aeabi_fadd+0xba>
 8000308:	e0b7      	b.n	800047a <__aeabi_fadd+0x22a>
 800030a:	2201      	movs	r2, #1
 800030c:	2607      	movs	r6, #7
 800030e:	402a      	ands	r2, r5
 8000310:	086b      	lsrs	r3, r5, #1
 8000312:	4d9a      	ldr	r5, [pc, #616]	; (800057c <__aeabi_fadd+0x32c>)
 8000314:	401d      	ands	r5, r3
 8000316:	4315      	orrs	r5, r2
 8000318:	402e      	ands	r6, r5
 800031a:	e029      	b.n	8000370 <__aeabi_fadd+0x120>
 800031c:	2cff      	cmp	r4, #255	; 0xff
 800031e:	d0b5      	beq.n	800028c <__aeabi_fadd+0x3c>
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	04d2      	lsls	r2, r2, #19
 8000324:	4313      	orrs	r3, r2
 8000326:	2f1b      	cmp	r7, #27
 8000328:	dd00      	ble.n	800032c <__aeabi_fadd+0xdc>
 800032a:	e0b2      	b.n	8000492 <__aeabi_fadd+0x242>
 800032c:	2220      	movs	r2, #32
 800032e:	1bd2      	subs	r2, r2, r7
 8000330:	0019      	movs	r1, r3
 8000332:	4093      	lsls	r3, r2
 8000334:	40f9      	lsrs	r1, r7
 8000336:	1e5a      	subs	r2, r3, #1
 8000338:	4193      	sbcs	r3, r2
 800033a:	430b      	orrs	r3, r1
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	016b      	lsls	r3, r5, #5
 8000340:	d55b      	bpl.n	80003fa <__aeabi_fadd+0x1aa>
 8000342:	01ad      	lsls	r5, r5, #6
 8000344:	09ae      	lsrs	r6, r5, #6
 8000346:	0030      	movs	r0, r6
 8000348:	f000 fe08 	bl	8000f5c <__clzsi2>
 800034c:	3805      	subs	r0, #5
 800034e:	4086      	lsls	r6, r0
 8000350:	4284      	cmp	r4, r0
 8000352:	dc65      	bgt.n	8000420 <__aeabi_fadd+0x1d0>
 8000354:	1b04      	subs	r4, r0, r4
 8000356:	0033      	movs	r3, r6
 8000358:	2020      	movs	r0, #32
 800035a:	3401      	adds	r4, #1
 800035c:	40e3      	lsrs	r3, r4
 800035e:	1b04      	subs	r4, r0, r4
 8000360:	40a6      	lsls	r6, r4
 8000362:	1e75      	subs	r5, r6, #1
 8000364:	41ae      	sbcs	r6, r5
 8000366:	4333      	orrs	r3, r6
 8000368:	2607      	movs	r6, #7
 800036a:	001d      	movs	r5, r3
 800036c:	2400      	movs	r4, #0
 800036e:	401e      	ands	r6, r3
 8000370:	2201      	movs	r2, #1
 8000372:	464b      	mov	r3, r9
 8000374:	401a      	ands	r2, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d004      	beq.n	8000384 <__aeabi_fadd+0x134>
 800037a:	230f      	movs	r3, #15
 800037c:	402b      	ands	r3, r5
 800037e:	2b04      	cmp	r3, #4
 8000380:	d000      	beq.n	8000384 <__aeabi_fadd+0x134>
 8000382:	3504      	adds	r5, #4
 8000384:	016b      	lsls	r3, r5, #5
 8000386:	d400      	bmi.n	800038a <__aeabi_fadd+0x13a>
 8000388:	e780      	b.n	800028c <__aeabi_fadd+0x3c>
 800038a:	3401      	adds	r4, #1
 800038c:	b2e6      	uxtb	r6, r4
 800038e:	2cff      	cmp	r4, #255	; 0xff
 8000390:	d12f      	bne.n	80003f2 <__aeabi_fadd+0x1a2>
 8000392:	26ff      	movs	r6, #255	; 0xff
 8000394:	2300      	movs	r3, #0
 8000396:	e780      	b.n	800029a <__aeabi_fadd+0x4a>
 8000398:	2b00      	cmp	r3, #0
 800039a:	d152      	bne.n	8000442 <__aeabi_fadd+0x1f2>
 800039c:	2cff      	cmp	r4, #255	; 0xff
 800039e:	d000      	beq.n	80003a2 <__aeabi_fadd+0x152>
 80003a0:	e774      	b.n	800028c <__aeabi_fadd+0x3c>
 80003a2:	000a      	movs	r2, r1
 80003a4:	08ed      	lsrs	r5, r5, #3
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0f3      	beq.n	8000392 <__aeabi_fadd+0x142>
 80003aa:	2380      	movs	r3, #128	; 0x80
 80003ac:	03db      	lsls	r3, r3, #15
 80003ae:	432b      	orrs	r3, r5
 80003b0:	025b      	lsls	r3, r3, #9
 80003b2:	0a5b      	lsrs	r3, r3, #9
 80003b4:	26ff      	movs	r6, #255	; 0xff
 80003b6:	e770      	b.n	800029a <__aeabi_fadd+0x4a>
 80003b8:	3f01      	subs	r7, #1
 80003ba:	2f00      	cmp	r7, #0
 80003bc:	d0be      	beq.n	800033c <__aeabi_fadd+0xec>
 80003be:	2cff      	cmp	r4, #255	; 0xff
 80003c0:	d1b1      	bne.n	8000326 <__aeabi_fadd+0xd6>
 80003c2:	e763      	b.n	800028c <__aeabi_fadd+0x3c>
 80003c4:	2c00      	cmp	r4, #0
 80003c6:	d047      	beq.n	8000458 <__aeabi_fadd+0x208>
 80003c8:	28ff      	cmp	r0, #255	; 0xff
 80003ca:	d069      	beq.n	80004a0 <__aeabi_fadd+0x250>
 80003cc:	2480      	movs	r4, #128	; 0x80
 80003ce:	04e4      	lsls	r4, r4, #19
 80003d0:	427a      	negs	r2, r7
 80003d2:	4325      	orrs	r5, r4
 80003d4:	2a1b      	cmp	r2, #27
 80003d6:	dd00      	ble.n	80003da <__aeabi_fadd+0x18a>
 80003d8:	e0c5      	b.n	8000566 <__aeabi_fadd+0x316>
 80003da:	002c      	movs	r4, r5
 80003dc:	2620      	movs	r6, #32
 80003de:	40d4      	lsrs	r4, r2
 80003e0:	1ab2      	subs	r2, r6, r2
 80003e2:	4095      	lsls	r5, r2
 80003e4:	1e6a      	subs	r2, r5, #1
 80003e6:	4195      	sbcs	r5, r2
 80003e8:	4325      	orrs	r5, r4
 80003ea:	1b5d      	subs	r5, r3, r5
 80003ec:	0004      	movs	r4, r0
 80003ee:	4689      	mov	r9, r1
 80003f0:	e7a5      	b.n	800033e <__aeabi_fadd+0xee>
 80003f2:	01ab      	lsls	r3, r5, #6
 80003f4:	0a5b      	lsrs	r3, r3, #9
 80003f6:	e750      	b.n	800029a <__aeabi_fadd+0x4a>
 80003f8:	2400      	movs	r4, #0
 80003fa:	2201      	movs	r2, #1
 80003fc:	464b      	mov	r3, r9
 80003fe:	401a      	ands	r2, r3
 8000400:	076b      	lsls	r3, r5, #29
 8000402:	d1ba      	bne.n	800037a <__aeabi_fadd+0x12a>
 8000404:	e742      	b.n	800028c <__aeabi_fadd+0x3c>
 8000406:	2f00      	cmp	r7, #0
 8000408:	d13b      	bne.n	8000482 <__aeabi_fadd+0x232>
 800040a:	3401      	adds	r4, #1
 800040c:	b2e0      	uxtb	r0, r4
 800040e:	2801      	cmp	r0, #1
 8000410:	dd4a      	ble.n	80004a8 <__aeabi_fadd+0x258>
 8000412:	2cff      	cmp	r4, #255	; 0xff
 8000414:	d0bd      	beq.n	8000392 <__aeabi_fadd+0x142>
 8000416:	2607      	movs	r6, #7
 8000418:	18ed      	adds	r5, r5, r3
 800041a:	086d      	lsrs	r5, r5, #1
 800041c:	402e      	ands	r6, r5
 800041e:	e7a7      	b.n	8000370 <__aeabi_fadd+0x120>
 8000420:	2307      	movs	r3, #7
 8000422:	4d57      	ldr	r5, [pc, #348]	; (8000580 <__aeabi_fadd+0x330>)
 8000424:	1a24      	subs	r4, r4, r0
 8000426:	4035      	ands	r5, r6
 8000428:	401e      	ands	r6, r3
 800042a:	e7a1      	b.n	8000370 <__aeabi_fadd+0x120>
 800042c:	2c00      	cmp	r4, #0
 800042e:	d11b      	bne.n	8000468 <__aeabi_fadd+0x218>
 8000430:	2d00      	cmp	r5, #0
 8000432:	d16e      	bne.n	8000512 <__aeabi_fadd+0x2c2>
 8000434:	2b00      	cmp	r3, #0
 8000436:	d100      	bne.n	800043a <__aeabi_fadd+0x1ea>
 8000438:	e09a      	b.n	8000570 <__aeabi_fadd+0x320>
 800043a:	000a      	movs	r2, r1
 800043c:	001d      	movs	r5, r3
 800043e:	003c      	movs	r4, r7
 8000440:	e724      	b.n	800028c <__aeabi_fadd+0x3c>
 8000442:	3f01      	subs	r7, #1
 8000444:	2f00      	cmp	r7, #0
 8000446:	d100      	bne.n	800044a <__aeabi_fadd+0x1fa>
 8000448:	e758      	b.n	80002fc <__aeabi_fadd+0xac>
 800044a:	2cff      	cmp	r4, #255	; 0xff
 800044c:	d000      	beq.n	8000450 <__aeabi_fadd+0x200>
 800044e:	e74a      	b.n	80002e6 <__aeabi_fadd+0x96>
 8000450:	e7a7      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000452:	1b5e      	subs	r6, r3, r5
 8000454:	4689      	mov	r9, r1
 8000456:	e776      	b.n	8000346 <__aeabi_fadd+0xf6>
 8000458:	2d00      	cmp	r5, #0
 800045a:	d11c      	bne.n	8000496 <__aeabi_fadd+0x246>
 800045c:	000a      	movs	r2, r1
 800045e:	28ff      	cmp	r0, #255	; 0xff
 8000460:	d01f      	beq.n	80004a2 <__aeabi_fadd+0x252>
 8000462:	0004      	movs	r4, r0
 8000464:	001d      	movs	r5, r3
 8000466:	e711      	b.n	800028c <__aeabi_fadd+0x3c>
 8000468:	2d00      	cmp	r5, #0
 800046a:	d15d      	bne.n	8000528 <__aeabi_fadd+0x2d8>
 800046c:	2b00      	cmp	r3, #0
 800046e:	d117      	bne.n	80004a0 <__aeabi_fadd+0x250>
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	2200      	movs	r2, #0
 8000474:	03db      	lsls	r3, r3, #15
 8000476:	26ff      	movs	r6, #255	; 0xff
 8000478:	e70f      	b.n	800029a <__aeabi_fadd+0x4a>
 800047a:	000a      	movs	r2, r1
 800047c:	26ff      	movs	r6, #255	; 0xff
 800047e:	2300      	movs	r3, #0
 8000480:	e70b      	b.n	800029a <__aeabi_fadd+0x4a>
 8000482:	2c00      	cmp	r4, #0
 8000484:	d121      	bne.n	80004ca <__aeabi_fadd+0x27a>
 8000486:	2d00      	cmp	r5, #0
 8000488:	d166      	bne.n	8000558 <__aeabi_fadd+0x308>
 800048a:	28ff      	cmp	r0, #255	; 0xff
 800048c:	d1e9      	bne.n	8000462 <__aeabi_fadd+0x212>
 800048e:	001d      	movs	r5, r3
 8000490:	e787      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000492:	2301      	movs	r3, #1
 8000494:	e752      	b.n	800033c <__aeabi_fadd+0xec>
 8000496:	1c7a      	adds	r2, r7, #1
 8000498:	d0a7      	beq.n	80003ea <__aeabi_fadd+0x19a>
 800049a:	43fa      	mvns	r2, r7
 800049c:	28ff      	cmp	r0, #255	; 0xff
 800049e:	d199      	bne.n	80003d4 <__aeabi_fadd+0x184>
 80004a0:	000a      	movs	r2, r1
 80004a2:	001d      	movs	r5, r3
 80004a4:	24ff      	movs	r4, #255	; 0xff
 80004a6:	e6f1      	b.n	800028c <__aeabi_fadd+0x3c>
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d121      	bne.n	80004f0 <__aeabi_fadd+0x2a0>
 80004ac:	2d00      	cmp	r5, #0
 80004ae:	d04f      	beq.n	8000550 <__aeabi_fadd+0x300>
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d04c      	beq.n	800054e <__aeabi_fadd+0x2fe>
 80004b4:	18ed      	adds	r5, r5, r3
 80004b6:	016b      	lsls	r3, r5, #5
 80004b8:	d59e      	bpl.n	80003f8 <__aeabi_fadd+0x1a8>
 80004ba:	4b31      	ldr	r3, [pc, #196]	; (8000580 <__aeabi_fadd+0x330>)
 80004bc:	3607      	adds	r6, #7
 80004be:	402e      	ands	r6, r5
 80004c0:	2401      	movs	r4, #1
 80004c2:	401d      	ands	r5, r3
 80004c4:	e754      	b.n	8000370 <__aeabi_fadd+0x120>
 80004c6:	2301      	movs	r3, #1
 80004c8:	e718      	b.n	80002fc <__aeabi_fadd+0xac>
 80004ca:	28ff      	cmp	r0, #255	; 0xff
 80004cc:	d0df      	beq.n	800048e <__aeabi_fadd+0x23e>
 80004ce:	2480      	movs	r4, #128	; 0x80
 80004d0:	04e4      	lsls	r4, r4, #19
 80004d2:	427f      	negs	r7, r7
 80004d4:	4325      	orrs	r5, r4
 80004d6:	2f1b      	cmp	r7, #27
 80004d8:	dc4d      	bgt.n	8000576 <__aeabi_fadd+0x326>
 80004da:	2620      	movs	r6, #32
 80004dc:	1bf6      	subs	r6, r6, r7
 80004de:	002c      	movs	r4, r5
 80004e0:	40b5      	lsls	r5, r6
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	1e6a      	subs	r2, r5, #1
 80004e6:	4195      	sbcs	r5, r2
 80004e8:	4325      	orrs	r5, r4
 80004ea:	18ed      	adds	r5, r5, r3
 80004ec:	0004      	movs	r4, r0
 80004ee:	e706      	b.n	80002fe <__aeabi_fadd+0xae>
 80004f0:	2d00      	cmp	r5, #0
 80004f2:	d0cc      	beq.n	800048e <__aeabi_fadd+0x23e>
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x2aa>
 80004f8:	e753      	b.n	80003a2 <__aeabi_fadd+0x152>
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	4660      	mov	r0, ip
 80004fe:	03c9      	lsls	r1, r1, #15
 8000500:	4208      	tst	r0, r1
 8000502:	d003      	beq.n	800050c <__aeabi_fadd+0x2bc>
 8000504:	4640      	mov	r0, r8
 8000506:	4208      	tst	r0, r1
 8000508:	d100      	bne.n	800050c <__aeabi_fadd+0x2bc>
 800050a:	001d      	movs	r5, r3
 800050c:	2101      	movs	r1, #1
 800050e:	4011      	ands	r1, r2
 8000510:	e747      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000512:	2b00      	cmp	r3, #0
 8000514:	d100      	bne.n	8000518 <__aeabi_fadd+0x2c8>
 8000516:	e6b9      	b.n	800028c <__aeabi_fadd+0x3c>
 8000518:	1aea      	subs	r2, r5, r3
 800051a:	0150      	lsls	r0, r2, #5
 800051c:	d525      	bpl.n	800056a <__aeabi_fadd+0x31a>
 800051e:	2607      	movs	r6, #7
 8000520:	1b5d      	subs	r5, r3, r5
 8000522:	402e      	ands	r6, r5
 8000524:	4689      	mov	r9, r1
 8000526:	e723      	b.n	8000370 <__aeabi_fadd+0x120>
 8000528:	24ff      	movs	r4, #255	; 0xff
 800052a:	2b00      	cmp	r3, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_fadd+0x2e0>
 800052e:	e6ad      	b.n	800028c <__aeabi_fadd+0x3c>
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	4660      	mov	r0, ip
 8000534:	03d2      	lsls	r2, r2, #15
 8000536:	4210      	tst	r0, r2
 8000538:	d004      	beq.n	8000544 <__aeabi_fadd+0x2f4>
 800053a:	4640      	mov	r0, r8
 800053c:	4210      	tst	r0, r2
 800053e:	d101      	bne.n	8000544 <__aeabi_fadd+0x2f4>
 8000540:	001d      	movs	r5, r3
 8000542:	4689      	mov	r9, r1
 8000544:	2201      	movs	r2, #1
 8000546:	464b      	mov	r3, r9
 8000548:	24ff      	movs	r4, #255	; 0xff
 800054a:	401a      	ands	r2, r3
 800054c:	e69e      	b.n	800028c <__aeabi_fadd+0x3c>
 800054e:	002b      	movs	r3, r5
 8000550:	08dd      	lsrs	r5, r3, #3
 8000552:	000a      	movs	r2, r1
 8000554:	2400      	movs	r4, #0
 8000556:	e69d      	b.n	8000294 <__aeabi_fadd+0x44>
 8000558:	1c7a      	adds	r2, r7, #1
 800055a:	d0c6      	beq.n	80004ea <__aeabi_fadd+0x29a>
 800055c:	43ff      	mvns	r7, r7
 800055e:	28ff      	cmp	r0, #255	; 0xff
 8000560:	d1b9      	bne.n	80004d6 <__aeabi_fadd+0x286>
 8000562:	001d      	movs	r5, r3
 8000564:	e71d      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000566:	2501      	movs	r5, #1
 8000568:	e73f      	b.n	80003ea <__aeabi_fadd+0x19a>
 800056a:	1e15      	subs	r5, r2, #0
 800056c:	d000      	beq.n	8000570 <__aeabi_fadd+0x320>
 800056e:	e744      	b.n	80003fa <__aeabi_fadd+0x1aa>
 8000570:	2200      	movs	r2, #0
 8000572:	2300      	movs	r3, #0
 8000574:	e691      	b.n	800029a <__aeabi_fadd+0x4a>
 8000576:	2501      	movs	r5, #1
 8000578:	e7b7      	b.n	80004ea <__aeabi_fadd+0x29a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	7dffffff 	.word	0x7dffffff
 8000580:	fbffffff 	.word	0xfbffffff

08000584 <__aeabi_fdiv>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	4657      	mov	r7, sl
 8000588:	464e      	mov	r6, r9
 800058a:	4645      	mov	r5, r8
 800058c:	46de      	mov	lr, fp
 800058e:	0244      	lsls	r4, r0, #9
 8000590:	b5e0      	push	{r5, r6, r7, lr}
 8000592:	0046      	lsls	r6, r0, #1
 8000594:	4688      	mov	r8, r1
 8000596:	0a64      	lsrs	r4, r4, #9
 8000598:	0e36      	lsrs	r6, r6, #24
 800059a:	0fc7      	lsrs	r7, r0, #31
 800059c:	2e00      	cmp	r6, #0
 800059e:	d063      	beq.n	8000668 <__aeabi_fdiv+0xe4>
 80005a0:	2eff      	cmp	r6, #255	; 0xff
 80005a2:	d024      	beq.n	80005ee <__aeabi_fdiv+0x6a>
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	00e4      	lsls	r4, r4, #3
 80005a8:	04db      	lsls	r3, r3, #19
 80005aa:	431c      	orrs	r4, r3
 80005ac:	2300      	movs	r3, #0
 80005ae:	4699      	mov	r9, r3
 80005b0:	469b      	mov	fp, r3
 80005b2:	3e7f      	subs	r6, #127	; 0x7f
 80005b4:	4643      	mov	r3, r8
 80005b6:	4642      	mov	r2, r8
 80005b8:	025d      	lsls	r5, r3, #9
 80005ba:	0fd2      	lsrs	r2, r2, #31
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	0a6d      	lsrs	r5, r5, #9
 80005c0:	0e1b      	lsrs	r3, r3, #24
 80005c2:	4690      	mov	r8, r2
 80005c4:	4692      	mov	sl, r2
 80005c6:	d065      	beq.n	8000694 <__aeabi_fdiv+0x110>
 80005c8:	2bff      	cmp	r3, #255	; 0xff
 80005ca:	d055      	beq.n	8000678 <__aeabi_fdiv+0xf4>
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	2100      	movs	r1, #0
 80005d0:	00ed      	lsls	r5, r5, #3
 80005d2:	04d2      	lsls	r2, r2, #19
 80005d4:	3b7f      	subs	r3, #127	; 0x7f
 80005d6:	4315      	orrs	r5, r2
 80005d8:	1af6      	subs	r6, r6, r3
 80005da:	4643      	mov	r3, r8
 80005dc:	464a      	mov	r2, r9
 80005de:	407b      	eors	r3, r7
 80005e0:	2a0f      	cmp	r2, #15
 80005e2:	d900      	bls.n	80005e6 <__aeabi_fdiv+0x62>
 80005e4:	e08d      	b.n	8000702 <__aeabi_fdiv+0x17e>
 80005e6:	486d      	ldr	r0, [pc, #436]	; (800079c <__aeabi_fdiv+0x218>)
 80005e8:	0092      	lsls	r2, r2, #2
 80005ea:	5882      	ldr	r2, [r0, r2]
 80005ec:	4697      	mov	pc, r2
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d154      	bne.n	800069c <__aeabi_fdiv+0x118>
 80005f2:	2308      	movs	r3, #8
 80005f4:	4699      	mov	r9, r3
 80005f6:	3b06      	subs	r3, #6
 80005f8:	26ff      	movs	r6, #255	; 0xff
 80005fa:	469b      	mov	fp, r3
 80005fc:	e7da      	b.n	80005b4 <__aeabi_fdiv+0x30>
 80005fe:	2500      	movs	r5, #0
 8000600:	4653      	mov	r3, sl
 8000602:	2902      	cmp	r1, #2
 8000604:	d01b      	beq.n	800063e <__aeabi_fdiv+0xba>
 8000606:	2903      	cmp	r1, #3
 8000608:	d100      	bne.n	800060c <__aeabi_fdiv+0x88>
 800060a:	e0bf      	b.n	800078c <__aeabi_fdiv+0x208>
 800060c:	2901      	cmp	r1, #1
 800060e:	d028      	beq.n	8000662 <__aeabi_fdiv+0xde>
 8000610:	0030      	movs	r0, r6
 8000612:	307f      	adds	r0, #127	; 0x7f
 8000614:	2800      	cmp	r0, #0
 8000616:	dd20      	ble.n	800065a <__aeabi_fdiv+0xd6>
 8000618:	076a      	lsls	r2, r5, #29
 800061a:	d004      	beq.n	8000626 <__aeabi_fdiv+0xa2>
 800061c:	220f      	movs	r2, #15
 800061e:	402a      	ands	r2, r5
 8000620:	2a04      	cmp	r2, #4
 8000622:	d000      	beq.n	8000626 <__aeabi_fdiv+0xa2>
 8000624:	3504      	adds	r5, #4
 8000626:	012a      	lsls	r2, r5, #4
 8000628:	d503      	bpl.n	8000632 <__aeabi_fdiv+0xae>
 800062a:	0030      	movs	r0, r6
 800062c:	4a5c      	ldr	r2, [pc, #368]	; (80007a0 <__aeabi_fdiv+0x21c>)
 800062e:	3080      	adds	r0, #128	; 0x80
 8000630:	4015      	ands	r5, r2
 8000632:	28fe      	cmp	r0, #254	; 0xfe
 8000634:	dc03      	bgt.n	800063e <__aeabi_fdiv+0xba>
 8000636:	01ac      	lsls	r4, r5, #6
 8000638:	0a64      	lsrs	r4, r4, #9
 800063a:	b2c2      	uxtb	r2, r0
 800063c:	e001      	b.n	8000642 <__aeabi_fdiv+0xbe>
 800063e:	22ff      	movs	r2, #255	; 0xff
 8000640:	2400      	movs	r4, #0
 8000642:	0264      	lsls	r4, r4, #9
 8000644:	05d2      	lsls	r2, r2, #23
 8000646:	0a60      	lsrs	r0, r4, #9
 8000648:	07db      	lsls	r3, r3, #31
 800064a:	4310      	orrs	r0, r2
 800064c:	4318      	orrs	r0, r3
 800064e:	bc3c      	pop	{r2, r3, r4, r5}
 8000650:	4690      	mov	r8, r2
 8000652:	4699      	mov	r9, r3
 8000654:	46a2      	mov	sl, r4
 8000656:	46ab      	mov	fp, r5
 8000658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800065a:	2201      	movs	r2, #1
 800065c:	1a10      	subs	r0, r2, r0
 800065e:	281b      	cmp	r0, #27
 8000660:	dd7c      	ble.n	800075c <__aeabi_fdiv+0x1d8>
 8000662:	2200      	movs	r2, #0
 8000664:	2400      	movs	r4, #0
 8000666:	e7ec      	b.n	8000642 <__aeabi_fdiv+0xbe>
 8000668:	2c00      	cmp	r4, #0
 800066a:	d11d      	bne.n	80006a8 <__aeabi_fdiv+0x124>
 800066c:	2304      	movs	r3, #4
 800066e:	4699      	mov	r9, r3
 8000670:	3b03      	subs	r3, #3
 8000672:	2600      	movs	r6, #0
 8000674:	469b      	mov	fp, r3
 8000676:	e79d      	b.n	80005b4 <__aeabi_fdiv+0x30>
 8000678:	3eff      	subs	r6, #255	; 0xff
 800067a:	2d00      	cmp	r5, #0
 800067c:	d120      	bne.n	80006c0 <__aeabi_fdiv+0x13c>
 800067e:	2102      	movs	r1, #2
 8000680:	4643      	mov	r3, r8
 8000682:	464a      	mov	r2, r9
 8000684:	407b      	eors	r3, r7
 8000686:	430a      	orrs	r2, r1
 8000688:	2a0f      	cmp	r2, #15
 800068a:	d8d8      	bhi.n	800063e <__aeabi_fdiv+0xba>
 800068c:	4845      	ldr	r0, [pc, #276]	; (80007a4 <__aeabi_fdiv+0x220>)
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	5882      	ldr	r2, [r0, r2]
 8000692:	4697      	mov	pc, r2
 8000694:	2d00      	cmp	r5, #0
 8000696:	d119      	bne.n	80006cc <__aeabi_fdiv+0x148>
 8000698:	2101      	movs	r1, #1
 800069a:	e7f1      	b.n	8000680 <__aeabi_fdiv+0xfc>
 800069c:	230c      	movs	r3, #12
 800069e:	4699      	mov	r9, r3
 80006a0:	3b09      	subs	r3, #9
 80006a2:	26ff      	movs	r6, #255	; 0xff
 80006a4:	469b      	mov	fp, r3
 80006a6:	e785      	b.n	80005b4 <__aeabi_fdiv+0x30>
 80006a8:	0020      	movs	r0, r4
 80006aa:	f000 fc57 	bl	8000f5c <__clzsi2>
 80006ae:	2676      	movs	r6, #118	; 0x76
 80006b0:	1f43      	subs	r3, r0, #5
 80006b2:	409c      	lsls	r4, r3
 80006b4:	2300      	movs	r3, #0
 80006b6:	4276      	negs	r6, r6
 80006b8:	1a36      	subs	r6, r6, r0
 80006ba:	4699      	mov	r9, r3
 80006bc:	469b      	mov	fp, r3
 80006be:	e779      	b.n	80005b4 <__aeabi_fdiv+0x30>
 80006c0:	464a      	mov	r2, r9
 80006c2:	2303      	movs	r3, #3
 80006c4:	431a      	orrs	r2, r3
 80006c6:	4691      	mov	r9, r2
 80006c8:	2103      	movs	r1, #3
 80006ca:	e786      	b.n	80005da <__aeabi_fdiv+0x56>
 80006cc:	0028      	movs	r0, r5
 80006ce:	f000 fc45 	bl	8000f5c <__clzsi2>
 80006d2:	1f43      	subs	r3, r0, #5
 80006d4:	1836      	adds	r6, r6, r0
 80006d6:	409d      	lsls	r5, r3
 80006d8:	3676      	adds	r6, #118	; 0x76
 80006da:	2100      	movs	r1, #0
 80006dc:	e77d      	b.n	80005da <__aeabi_fdiv+0x56>
 80006de:	2480      	movs	r4, #128	; 0x80
 80006e0:	2300      	movs	r3, #0
 80006e2:	03e4      	lsls	r4, r4, #15
 80006e4:	22ff      	movs	r2, #255	; 0xff
 80006e6:	e7ac      	b.n	8000642 <__aeabi_fdiv+0xbe>
 80006e8:	2500      	movs	r5, #0
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	03db      	lsls	r3, r3, #15
 80006ee:	421c      	tst	r4, r3
 80006f0:	d028      	beq.n	8000744 <__aeabi_fdiv+0x1c0>
 80006f2:	421d      	tst	r5, r3
 80006f4:	d126      	bne.n	8000744 <__aeabi_fdiv+0x1c0>
 80006f6:	432b      	orrs	r3, r5
 80006f8:	025c      	lsls	r4, r3, #9
 80006fa:	0a64      	lsrs	r4, r4, #9
 80006fc:	4643      	mov	r3, r8
 80006fe:	22ff      	movs	r2, #255	; 0xff
 8000700:	e79f      	b.n	8000642 <__aeabi_fdiv+0xbe>
 8000702:	0162      	lsls	r2, r4, #5
 8000704:	016c      	lsls	r4, r5, #5
 8000706:	42a2      	cmp	r2, r4
 8000708:	d224      	bcs.n	8000754 <__aeabi_fdiv+0x1d0>
 800070a:	211b      	movs	r1, #27
 800070c:	2500      	movs	r5, #0
 800070e:	3e01      	subs	r6, #1
 8000710:	2701      	movs	r7, #1
 8000712:	0010      	movs	r0, r2
 8000714:	006d      	lsls	r5, r5, #1
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	2800      	cmp	r0, #0
 800071a:	db01      	blt.n	8000720 <__aeabi_fdiv+0x19c>
 800071c:	4294      	cmp	r4, r2
 800071e:	d801      	bhi.n	8000724 <__aeabi_fdiv+0x1a0>
 8000720:	1b12      	subs	r2, r2, r4
 8000722:	433d      	orrs	r5, r7
 8000724:	3901      	subs	r1, #1
 8000726:	2900      	cmp	r1, #0
 8000728:	d1f3      	bne.n	8000712 <__aeabi_fdiv+0x18e>
 800072a:	0014      	movs	r4, r2
 800072c:	1e62      	subs	r2, r4, #1
 800072e:	4194      	sbcs	r4, r2
 8000730:	4325      	orrs	r5, r4
 8000732:	e76d      	b.n	8000610 <__aeabi_fdiv+0x8c>
 8000734:	46ba      	mov	sl, r7
 8000736:	4659      	mov	r1, fp
 8000738:	0025      	movs	r5, r4
 800073a:	4653      	mov	r3, sl
 800073c:	2902      	cmp	r1, #2
 800073e:	d000      	beq.n	8000742 <__aeabi_fdiv+0x1be>
 8000740:	e761      	b.n	8000606 <__aeabi_fdiv+0x82>
 8000742:	e77c      	b.n	800063e <__aeabi_fdiv+0xba>
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	03db      	lsls	r3, r3, #15
 8000748:	431c      	orrs	r4, r3
 800074a:	0264      	lsls	r4, r4, #9
 800074c:	0a64      	lsrs	r4, r4, #9
 800074e:	003b      	movs	r3, r7
 8000750:	22ff      	movs	r2, #255	; 0xff
 8000752:	e776      	b.n	8000642 <__aeabi_fdiv+0xbe>
 8000754:	1b12      	subs	r2, r2, r4
 8000756:	211a      	movs	r1, #26
 8000758:	2501      	movs	r5, #1
 800075a:	e7d9      	b.n	8000710 <__aeabi_fdiv+0x18c>
 800075c:	369e      	adds	r6, #158	; 0x9e
 800075e:	002a      	movs	r2, r5
 8000760:	40b5      	lsls	r5, r6
 8000762:	002c      	movs	r4, r5
 8000764:	40c2      	lsrs	r2, r0
 8000766:	1e65      	subs	r5, r4, #1
 8000768:	41ac      	sbcs	r4, r5
 800076a:	4314      	orrs	r4, r2
 800076c:	0762      	lsls	r2, r4, #29
 800076e:	d004      	beq.n	800077a <__aeabi_fdiv+0x1f6>
 8000770:	220f      	movs	r2, #15
 8000772:	4022      	ands	r2, r4
 8000774:	2a04      	cmp	r2, #4
 8000776:	d000      	beq.n	800077a <__aeabi_fdiv+0x1f6>
 8000778:	3404      	adds	r4, #4
 800077a:	0162      	lsls	r2, r4, #5
 800077c:	d403      	bmi.n	8000786 <__aeabi_fdiv+0x202>
 800077e:	01a4      	lsls	r4, r4, #6
 8000780:	0a64      	lsrs	r4, r4, #9
 8000782:	2200      	movs	r2, #0
 8000784:	e75d      	b.n	8000642 <__aeabi_fdiv+0xbe>
 8000786:	2201      	movs	r2, #1
 8000788:	2400      	movs	r4, #0
 800078a:	e75a      	b.n	8000642 <__aeabi_fdiv+0xbe>
 800078c:	2480      	movs	r4, #128	; 0x80
 800078e:	03e4      	lsls	r4, r4, #15
 8000790:	432c      	orrs	r4, r5
 8000792:	0264      	lsls	r4, r4, #9
 8000794:	0a64      	lsrs	r4, r4, #9
 8000796:	22ff      	movs	r2, #255	; 0xff
 8000798:	e753      	b.n	8000642 <__aeabi_fdiv+0xbe>
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	08006e2c 	.word	0x08006e2c
 80007a0:	f7ffffff 	.word	0xf7ffffff
 80007a4:	08006e6c 	.word	0x08006e6c

080007a8 <__aeabi_fmul>:
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	464e      	mov	r6, r9
 80007ac:	4657      	mov	r7, sl
 80007ae:	4645      	mov	r5, r8
 80007b0:	46de      	mov	lr, fp
 80007b2:	b5e0      	push	{r5, r6, r7, lr}
 80007b4:	0243      	lsls	r3, r0, #9
 80007b6:	0a5b      	lsrs	r3, r3, #9
 80007b8:	0045      	lsls	r5, r0, #1
 80007ba:	b083      	sub	sp, #12
 80007bc:	1c0f      	adds	r7, r1, #0
 80007be:	4699      	mov	r9, r3
 80007c0:	0e2d      	lsrs	r5, r5, #24
 80007c2:	0fc6      	lsrs	r6, r0, #31
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d057      	beq.n	8000878 <__aeabi_fmul+0xd0>
 80007c8:	2dff      	cmp	r5, #255	; 0xff
 80007ca:	d024      	beq.n	8000816 <__aeabi_fmul+0x6e>
 80007cc:	2080      	movs	r0, #128	; 0x80
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	04c0      	lsls	r0, r0, #19
 80007d2:	4318      	orrs	r0, r3
 80007d4:	2300      	movs	r3, #0
 80007d6:	4681      	mov	r9, r0
 80007d8:	469a      	mov	sl, r3
 80007da:	469b      	mov	fp, r3
 80007dc:	3d7f      	subs	r5, #127	; 0x7f
 80007de:	027c      	lsls	r4, r7, #9
 80007e0:	007a      	lsls	r2, r7, #1
 80007e2:	0ffb      	lsrs	r3, r7, #31
 80007e4:	0a64      	lsrs	r4, r4, #9
 80007e6:	0e12      	lsrs	r2, r2, #24
 80007e8:	4698      	mov	r8, r3
 80007ea:	d023      	beq.n	8000834 <__aeabi_fmul+0x8c>
 80007ec:	2aff      	cmp	r2, #255	; 0xff
 80007ee:	d04b      	beq.n	8000888 <__aeabi_fmul+0xe0>
 80007f0:	00e3      	lsls	r3, r4, #3
 80007f2:	2480      	movs	r4, #128	; 0x80
 80007f4:	2000      	movs	r0, #0
 80007f6:	04e4      	lsls	r4, r4, #19
 80007f8:	3a7f      	subs	r2, #127	; 0x7f
 80007fa:	431c      	orrs	r4, r3
 80007fc:	18ad      	adds	r5, r5, r2
 80007fe:	1c6b      	adds	r3, r5, #1
 8000800:	4647      	mov	r7, r8
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	4653      	mov	r3, sl
 8000806:	4077      	eors	r7, r6
 8000808:	003a      	movs	r2, r7
 800080a:	2b0f      	cmp	r3, #15
 800080c:	d848      	bhi.n	80008a0 <__aeabi_fmul+0xf8>
 800080e:	497d      	ldr	r1, [pc, #500]	; (8000a04 <__aeabi_fmul+0x25c>)
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	58cb      	ldr	r3, [r1, r3]
 8000814:	469f      	mov	pc, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d000      	beq.n	800081c <__aeabi_fmul+0x74>
 800081a:	e085      	b.n	8000928 <__aeabi_fmul+0x180>
 800081c:	3308      	adds	r3, #8
 800081e:	469a      	mov	sl, r3
 8000820:	3b06      	subs	r3, #6
 8000822:	469b      	mov	fp, r3
 8000824:	027c      	lsls	r4, r7, #9
 8000826:	007a      	lsls	r2, r7, #1
 8000828:	0ffb      	lsrs	r3, r7, #31
 800082a:	25ff      	movs	r5, #255	; 0xff
 800082c:	0a64      	lsrs	r4, r4, #9
 800082e:	0e12      	lsrs	r2, r2, #24
 8000830:	4698      	mov	r8, r3
 8000832:	d1db      	bne.n	80007ec <__aeabi_fmul+0x44>
 8000834:	2c00      	cmp	r4, #0
 8000836:	d000      	beq.n	800083a <__aeabi_fmul+0x92>
 8000838:	e090      	b.n	800095c <__aeabi_fmul+0x1b4>
 800083a:	4652      	mov	r2, sl
 800083c:	2301      	movs	r3, #1
 800083e:	431a      	orrs	r2, r3
 8000840:	4692      	mov	sl, r2
 8000842:	2001      	movs	r0, #1
 8000844:	e7db      	b.n	80007fe <__aeabi_fmul+0x56>
 8000846:	464c      	mov	r4, r9
 8000848:	4658      	mov	r0, fp
 800084a:	0017      	movs	r7, r2
 800084c:	2802      	cmp	r0, #2
 800084e:	d024      	beq.n	800089a <__aeabi_fmul+0xf2>
 8000850:	2803      	cmp	r0, #3
 8000852:	d100      	bne.n	8000856 <__aeabi_fmul+0xae>
 8000854:	e0cf      	b.n	80009f6 <__aeabi_fmul+0x24e>
 8000856:	2200      	movs	r2, #0
 8000858:	2300      	movs	r3, #0
 800085a:	2801      	cmp	r0, #1
 800085c:	d14d      	bne.n	80008fa <__aeabi_fmul+0x152>
 800085e:	0258      	lsls	r0, r3, #9
 8000860:	05d2      	lsls	r2, r2, #23
 8000862:	0a40      	lsrs	r0, r0, #9
 8000864:	07ff      	lsls	r7, r7, #31
 8000866:	4310      	orrs	r0, r2
 8000868:	4338      	orrs	r0, r7
 800086a:	b003      	add	sp, #12
 800086c:	bc3c      	pop	{r2, r3, r4, r5}
 800086e:	4690      	mov	r8, r2
 8000870:	4699      	mov	r9, r3
 8000872:	46a2      	mov	sl, r4
 8000874:	46ab      	mov	fp, r5
 8000876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000878:	2b00      	cmp	r3, #0
 800087a:	d15b      	bne.n	8000934 <__aeabi_fmul+0x18c>
 800087c:	2304      	movs	r3, #4
 800087e:	469a      	mov	sl, r3
 8000880:	3b03      	subs	r3, #3
 8000882:	2500      	movs	r5, #0
 8000884:	469b      	mov	fp, r3
 8000886:	e7aa      	b.n	80007de <__aeabi_fmul+0x36>
 8000888:	35ff      	adds	r5, #255	; 0xff
 800088a:	2c00      	cmp	r4, #0
 800088c:	d160      	bne.n	8000950 <__aeabi_fmul+0x1a8>
 800088e:	4652      	mov	r2, sl
 8000890:	2302      	movs	r3, #2
 8000892:	431a      	orrs	r2, r3
 8000894:	4692      	mov	sl, r2
 8000896:	2002      	movs	r0, #2
 8000898:	e7b1      	b.n	80007fe <__aeabi_fmul+0x56>
 800089a:	22ff      	movs	r2, #255	; 0xff
 800089c:	2300      	movs	r3, #0
 800089e:	e7de      	b.n	800085e <__aeabi_fmul+0xb6>
 80008a0:	464b      	mov	r3, r9
 80008a2:	0c1b      	lsrs	r3, r3, #16
 80008a4:	469c      	mov	ip, r3
 80008a6:	464b      	mov	r3, r9
 80008a8:	0426      	lsls	r6, r4, #16
 80008aa:	0c36      	lsrs	r6, r6, #16
 80008ac:	0418      	lsls	r0, r3, #16
 80008ae:	4661      	mov	r1, ip
 80008b0:	0033      	movs	r3, r6
 80008b2:	0c22      	lsrs	r2, r4, #16
 80008b4:	4664      	mov	r4, ip
 80008b6:	0c00      	lsrs	r0, r0, #16
 80008b8:	4343      	muls	r3, r0
 80008ba:	434e      	muls	r6, r1
 80008bc:	4350      	muls	r0, r2
 80008be:	4354      	muls	r4, r2
 80008c0:	1980      	adds	r0, r0, r6
 80008c2:	0c1a      	lsrs	r2, r3, #16
 80008c4:	1812      	adds	r2, r2, r0
 80008c6:	4296      	cmp	r6, r2
 80008c8:	d903      	bls.n	80008d2 <__aeabi_fmul+0x12a>
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	0249      	lsls	r1, r1, #9
 80008ce:	468c      	mov	ip, r1
 80008d0:	4464      	add	r4, ip
 80008d2:	041b      	lsls	r3, r3, #16
 80008d4:	0c1b      	lsrs	r3, r3, #16
 80008d6:	0410      	lsls	r0, r2, #16
 80008d8:	18c0      	adds	r0, r0, r3
 80008da:	0183      	lsls	r3, r0, #6
 80008dc:	1e5e      	subs	r6, r3, #1
 80008de:	41b3      	sbcs	r3, r6
 80008e0:	0e80      	lsrs	r0, r0, #26
 80008e2:	4318      	orrs	r0, r3
 80008e4:	0c13      	lsrs	r3, r2, #16
 80008e6:	191b      	adds	r3, r3, r4
 80008e8:	019b      	lsls	r3, r3, #6
 80008ea:	4303      	orrs	r3, r0
 80008ec:	001c      	movs	r4, r3
 80008ee:	0123      	lsls	r3, r4, #4
 80008f0:	d579      	bpl.n	80009e6 <__aeabi_fmul+0x23e>
 80008f2:	2301      	movs	r3, #1
 80008f4:	0862      	lsrs	r2, r4, #1
 80008f6:	401c      	ands	r4, r3
 80008f8:	4314      	orrs	r4, r2
 80008fa:	9a01      	ldr	r2, [sp, #4]
 80008fc:	327f      	adds	r2, #127	; 0x7f
 80008fe:	2a00      	cmp	r2, #0
 8000900:	dd4d      	ble.n	800099e <__aeabi_fmul+0x1f6>
 8000902:	0763      	lsls	r3, r4, #29
 8000904:	d004      	beq.n	8000910 <__aeabi_fmul+0x168>
 8000906:	230f      	movs	r3, #15
 8000908:	4023      	ands	r3, r4
 800090a:	2b04      	cmp	r3, #4
 800090c:	d000      	beq.n	8000910 <__aeabi_fmul+0x168>
 800090e:	3404      	adds	r4, #4
 8000910:	0123      	lsls	r3, r4, #4
 8000912:	d503      	bpl.n	800091c <__aeabi_fmul+0x174>
 8000914:	4b3c      	ldr	r3, [pc, #240]	; (8000a08 <__aeabi_fmul+0x260>)
 8000916:	9a01      	ldr	r2, [sp, #4]
 8000918:	401c      	ands	r4, r3
 800091a:	3280      	adds	r2, #128	; 0x80
 800091c:	2afe      	cmp	r2, #254	; 0xfe
 800091e:	dcbc      	bgt.n	800089a <__aeabi_fmul+0xf2>
 8000920:	01a3      	lsls	r3, r4, #6
 8000922:	0a5b      	lsrs	r3, r3, #9
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	e79a      	b.n	800085e <__aeabi_fmul+0xb6>
 8000928:	230c      	movs	r3, #12
 800092a:	469a      	mov	sl, r3
 800092c:	3b09      	subs	r3, #9
 800092e:	25ff      	movs	r5, #255	; 0xff
 8000930:	469b      	mov	fp, r3
 8000932:	e754      	b.n	80007de <__aeabi_fmul+0x36>
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fb11 	bl	8000f5c <__clzsi2>
 800093a:	464a      	mov	r2, r9
 800093c:	1f43      	subs	r3, r0, #5
 800093e:	2576      	movs	r5, #118	; 0x76
 8000940:	409a      	lsls	r2, r3
 8000942:	2300      	movs	r3, #0
 8000944:	426d      	negs	r5, r5
 8000946:	4691      	mov	r9, r2
 8000948:	1a2d      	subs	r5, r5, r0
 800094a:	469a      	mov	sl, r3
 800094c:	469b      	mov	fp, r3
 800094e:	e746      	b.n	80007de <__aeabi_fmul+0x36>
 8000950:	4652      	mov	r2, sl
 8000952:	2303      	movs	r3, #3
 8000954:	431a      	orrs	r2, r3
 8000956:	4692      	mov	sl, r2
 8000958:	2003      	movs	r0, #3
 800095a:	e750      	b.n	80007fe <__aeabi_fmul+0x56>
 800095c:	0020      	movs	r0, r4
 800095e:	f000 fafd 	bl	8000f5c <__clzsi2>
 8000962:	1f43      	subs	r3, r0, #5
 8000964:	1a2d      	subs	r5, r5, r0
 8000966:	409c      	lsls	r4, r3
 8000968:	3d76      	subs	r5, #118	; 0x76
 800096a:	2000      	movs	r0, #0
 800096c:	e747      	b.n	80007fe <__aeabi_fmul+0x56>
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	2700      	movs	r7, #0
 8000972:	03db      	lsls	r3, r3, #15
 8000974:	22ff      	movs	r2, #255	; 0xff
 8000976:	e772      	b.n	800085e <__aeabi_fmul+0xb6>
 8000978:	4642      	mov	r2, r8
 800097a:	e766      	b.n	800084a <__aeabi_fmul+0xa2>
 800097c:	464c      	mov	r4, r9
 800097e:	0032      	movs	r2, r6
 8000980:	4658      	mov	r0, fp
 8000982:	e762      	b.n	800084a <__aeabi_fmul+0xa2>
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	464a      	mov	r2, r9
 8000988:	03db      	lsls	r3, r3, #15
 800098a:	421a      	tst	r2, r3
 800098c:	d022      	beq.n	80009d4 <__aeabi_fmul+0x22c>
 800098e:	421c      	tst	r4, r3
 8000990:	d120      	bne.n	80009d4 <__aeabi_fmul+0x22c>
 8000992:	4323      	orrs	r3, r4
 8000994:	025b      	lsls	r3, r3, #9
 8000996:	0a5b      	lsrs	r3, r3, #9
 8000998:	4647      	mov	r7, r8
 800099a:	22ff      	movs	r2, #255	; 0xff
 800099c:	e75f      	b.n	800085e <__aeabi_fmul+0xb6>
 800099e:	2301      	movs	r3, #1
 80009a0:	1a9a      	subs	r2, r3, r2
 80009a2:	2a1b      	cmp	r2, #27
 80009a4:	dc21      	bgt.n	80009ea <__aeabi_fmul+0x242>
 80009a6:	0023      	movs	r3, r4
 80009a8:	9901      	ldr	r1, [sp, #4]
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	319e      	adds	r1, #158	; 0x9e
 80009ae:	408c      	lsls	r4, r1
 80009b0:	001a      	movs	r2, r3
 80009b2:	0023      	movs	r3, r4
 80009b4:	1e5c      	subs	r4, r3, #1
 80009b6:	41a3      	sbcs	r3, r4
 80009b8:	4313      	orrs	r3, r2
 80009ba:	075a      	lsls	r2, r3, #29
 80009bc:	d004      	beq.n	80009c8 <__aeabi_fmul+0x220>
 80009be:	220f      	movs	r2, #15
 80009c0:	401a      	ands	r2, r3
 80009c2:	2a04      	cmp	r2, #4
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fmul+0x220>
 80009c6:	3304      	adds	r3, #4
 80009c8:	015a      	lsls	r2, r3, #5
 80009ca:	d411      	bmi.n	80009f0 <__aeabi_fmul+0x248>
 80009cc:	019b      	lsls	r3, r3, #6
 80009ce:	0a5b      	lsrs	r3, r3, #9
 80009d0:	2200      	movs	r2, #0
 80009d2:	e744      	b.n	800085e <__aeabi_fmul+0xb6>
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	464a      	mov	r2, r9
 80009d8:	03db      	lsls	r3, r3, #15
 80009da:	4313      	orrs	r3, r2
 80009dc:	025b      	lsls	r3, r3, #9
 80009de:	0a5b      	lsrs	r3, r3, #9
 80009e0:	0037      	movs	r7, r6
 80009e2:	22ff      	movs	r2, #255	; 0xff
 80009e4:	e73b      	b.n	800085e <__aeabi_fmul+0xb6>
 80009e6:	9501      	str	r5, [sp, #4]
 80009e8:	e787      	b.n	80008fa <__aeabi_fmul+0x152>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	e736      	b.n	800085e <__aeabi_fmul+0xb6>
 80009f0:	2201      	movs	r2, #1
 80009f2:	2300      	movs	r3, #0
 80009f4:	e733      	b.n	800085e <__aeabi_fmul+0xb6>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	03db      	lsls	r3, r3, #15
 80009fa:	4323      	orrs	r3, r4
 80009fc:	025b      	lsls	r3, r3, #9
 80009fe:	0a5b      	lsrs	r3, r3, #9
 8000a00:	22ff      	movs	r2, #255	; 0xff
 8000a02:	e72c      	b.n	800085e <__aeabi_fmul+0xb6>
 8000a04:	08006eac 	.word	0x08006eac
 8000a08:	f7ffffff 	.word	0xf7ffffff

08000a0c <__aeabi_fsub>:
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	4647      	mov	r7, r8
 8000a10:	46ce      	mov	lr, r9
 8000a12:	0044      	lsls	r4, r0, #1
 8000a14:	0fc2      	lsrs	r2, r0, #31
 8000a16:	b580      	push	{r7, lr}
 8000a18:	0247      	lsls	r7, r0, #9
 8000a1a:	0248      	lsls	r0, r1, #9
 8000a1c:	0a40      	lsrs	r0, r0, #9
 8000a1e:	4684      	mov	ip, r0
 8000a20:	4666      	mov	r6, ip
 8000a22:	0048      	lsls	r0, r1, #1
 8000a24:	0a7f      	lsrs	r7, r7, #9
 8000a26:	0e24      	lsrs	r4, r4, #24
 8000a28:	00f6      	lsls	r6, r6, #3
 8000a2a:	0025      	movs	r5, r4
 8000a2c:	4690      	mov	r8, r2
 8000a2e:	00fb      	lsls	r3, r7, #3
 8000a30:	0e00      	lsrs	r0, r0, #24
 8000a32:	0fc9      	lsrs	r1, r1, #31
 8000a34:	46b1      	mov	r9, r6
 8000a36:	28ff      	cmp	r0, #255	; 0xff
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x30>
 8000a3a:	e085      	b.n	8000b48 <__aeabi_fsub+0x13c>
 8000a3c:	2601      	movs	r6, #1
 8000a3e:	4071      	eors	r1, r6
 8000a40:	1a26      	subs	r6, r4, r0
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d057      	beq.n	8000af6 <__aeabi_fsub+0xea>
 8000a46:	2e00      	cmp	r6, #0
 8000a48:	dd43      	ble.n	8000ad2 <__aeabi_fsub+0xc6>
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fsub+0x44>
 8000a4e:	e07f      	b.n	8000b50 <__aeabi_fsub+0x144>
 8000a50:	4649      	mov	r1, r9
 8000a52:	2900      	cmp	r1, #0
 8000a54:	d100      	bne.n	8000a58 <__aeabi_fsub+0x4c>
 8000a56:	e0aa      	b.n	8000bae <__aeabi_fsub+0x1a2>
 8000a58:	3e01      	subs	r6, #1
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_fsub+0x54>
 8000a5e:	e0f7      	b.n	8000c50 <__aeabi_fsub+0x244>
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	015a      	lsls	r2, r3, #5
 8000a64:	d400      	bmi.n	8000a68 <__aeabi_fsub+0x5c>
 8000a66:	e08b      	b.n	8000b80 <__aeabi_fsub+0x174>
 8000a68:	019b      	lsls	r3, r3, #6
 8000a6a:	099c      	lsrs	r4, r3, #6
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f000 fa75 	bl	8000f5c <__clzsi2>
 8000a72:	3805      	subs	r0, #5
 8000a74:	4084      	lsls	r4, r0
 8000a76:	4285      	cmp	r5, r0
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_fsub+0x70>
 8000a7a:	e0d3      	b.n	8000c24 <__aeabi_fsub+0x218>
 8000a7c:	1b45      	subs	r5, r0, r5
 8000a7e:	0023      	movs	r3, r4
 8000a80:	2020      	movs	r0, #32
 8000a82:	3501      	adds	r5, #1
 8000a84:	40eb      	lsrs	r3, r5
 8000a86:	1b45      	subs	r5, r0, r5
 8000a88:	40ac      	lsls	r4, r5
 8000a8a:	1e62      	subs	r2, r4, #1
 8000a8c:	4194      	sbcs	r4, r2
 8000a8e:	4323      	orrs	r3, r4
 8000a90:	2407      	movs	r4, #7
 8000a92:	2500      	movs	r5, #0
 8000a94:	401c      	ands	r4, r3
 8000a96:	2201      	movs	r2, #1
 8000a98:	4641      	mov	r1, r8
 8000a9a:	400a      	ands	r2, r1
 8000a9c:	2c00      	cmp	r4, #0
 8000a9e:	d004      	beq.n	8000aaa <__aeabi_fsub+0x9e>
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	4019      	ands	r1, r3
 8000aa4:	2904      	cmp	r1, #4
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_fsub+0x9e>
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	0159      	lsls	r1, r3, #5
 8000aac:	d400      	bmi.n	8000ab0 <__aeabi_fsub+0xa4>
 8000aae:	e080      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000ab0:	3501      	adds	r5, #1
 8000ab2:	b2ec      	uxtb	r4, r5
 8000ab4:	2dff      	cmp	r5, #255	; 0xff
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fsub+0xae>
 8000ab8:	e0a3      	b.n	8000c02 <__aeabi_fsub+0x1f6>
 8000aba:	24ff      	movs	r4, #255	; 0xff
 8000abc:	2300      	movs	r3, #0
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	05e4      	lsls	r4, r4, #23
 8000ac2:	0a58      	lsrs	r0, r3, #9
 8000ac4:	07d2      	lsls	r2, r2, #31
 8000ac6:	4320      	orrs	r0, r4
 8000ac8:	4310      	orrs	r0, r2
 8000aca:	bc0c      	pop	{r2, r3}
 8000acc:	4690      	mov	r8, r2
 8000ace:	4699      	mov	r9, r3
 8000ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d174      	bne.n	8000bc0 <__aeabi_fsub+0x1b4>
 8000ad6:	1c60      	adds	r0, r4, #1
 8000ad8:	b2c0      	uxtb	r0, r0
 8000ada:	2801      	cmp	r0, #1
 8000adc:	dc00      	bgt.n	8000ae0 <__aeabi_fsub+0xd4>
 8000ade:	e0a7      	b.n	8000c30 <__aeabi_fsub+0x224>
 8000ae0:	464a      	mov	r2, r9
 8000ae2:	1a9c      	subs	r4, r3, r2
 8000ae4:	0162      	lsls	r2, r4, #5
 8000ae6:	d500      	bpl.n	8000aea <__aeabi_fsub+0xde>
 8000ae8:	e0b6      	b.n	8000c58 <__aeabi_fsub+0x24c>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d1be      	bne.n	8000a6c <__aeabi_fsub+0x60>
 8000aee:	2200      	movs	r2, #0
 8000af0:	2400      	movs	r4, #0
 8000af2:	2300      	movs	r3, #0
 8000af4:	e7e3      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	dc00      	bgt.n	8000afc <__aeabi_fsub+0xf0>
 8000afa:	e085      	b.n	8000c08 <__aeabi_fsub+0x1fc>
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d046      	beq.n	8000b8e <__aeabi_fsub+0x182>
 8000b00:	2cff      	cmp	r4, #255	; 0xff
 8000b02:	d049      	beq.n	8000b98 <__aeabi_fsub+0x18c>
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	4648      	mov	r0, r9
 8000b08:	04d2      	lsls	r2, r2, #19
 8000b0a:	4310      	orrs	r0, r2
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2e1b      	cmp	r6, #27
 8000b12:	dc09      	bgt.n	8000b28 <__aeabi_fsub+0x11c>
 8000b14:	2020      	movs	r0, #32
 8000b16:	464c      	mov	r4, r9
 8000b18:	1b80      	subs	r0, r0, r6
 8000b1a:	4084      	lsls	r4, r0
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	0020      	movs	r0, r4
 8000b20:	40f2      	lsrs	r2, r6
 8000b22:	1e44      	subs	r4, r0, #1
 8000b24:	41a0      	sbcs	r0, r4
 8000b26:	4302      	orrs	r2, r0
 8000b28:	189b      	adds	r3, r3, r2
 8000b2a:	015a      	lsls	r2, r3, #5
 8000b2c:	d528      	bpl.n	8000b80 <__aeabi_fsub+0x174>
 8000b2e:	3501      	adds	r5, #1
 8000b30:	2dff      	cmp	r5, #255	; 0xff
 8000b32:	d100      	bne.n	8000b36 <__aeabi_fsub+0x12a>
 8000b34:	e0a8      	b.n	8000c88 <__aeabi_fsub+0x27c>
 8000b36:	2201      	movs	r2, #1
 8000b38:	2407      	movs	r4, #7
 8000b3a:	4994      	ldr	r1, [pc, #592]	; (8000d8c <__aeabi_fsub+0x380>)
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	085b      	lsrs	r3, r3, #1
 8000b40:	400b      	ands	r3, r1
 8000b42:	4313      	orrs	r3, r2
 8000b44:	401c      	ands	r4, r3
 8000b46:	e7a6      	b.n	8000a96 <__aeabi_fsub+0x8a>
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_fsub+0x142>
 8000b4c:	e778      	b.n	8000a40 <__aeabi_fsub+0x34>
 8000b4e:	e775      	b.n	8000a3c <__aeabi_fsub+0x30>
 8000b50:	2cff      	cmp	r4, #255	; 0xff
 8000b52:	d054      	beq.n	8000bfe <__aeabi_fsub+0x1f2>
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	4649      	mov	r1, r9
 8000b58:	04d2      	lsls	r2, r2, #19
 8000b5a:	4311      	orrs	r1, r2
 8000b5c:	4689      	mov	r9, r1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2e1b      	cmp	r6, #27
 8000b62:	dc09      	bgt.n	8000b78 <__aeabi_fsub+0x16c>
 8000b64:	2120      	movs	r1, #32
 8000b66:	4648      	mov	r0, r9
 8000b68:	1b89      	subs	r1, r1, r6
 8000b6a:	4088      	lsls	r0, r1
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	0001      	movs	r1, r0
 8000b70:	40f2      	lsrs	r2, r6
 8000b72:	1e48      	subs	r0, r1, #1
 8000b74:	4181      	sbcs	r1, r0
 8000b76:	430a      	orrs	r2, r1
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	015a      	lsls	r2, r3, #5
 8000b7c:	d500      	bpl.n	8000b80 <__aeabi_fsub+0x174>
 8000b7e:	e773      	b.n	8000a68 <__aeabi_fsub+0x5c>
 8000b80:	2201      	movs	r2, #1
 8000b82:	4641      	mov	r1, r8
 8000b84:	400a      	ands	r2, r1
 8000b86:	0759      	lsls	r1, r3, #29
 8000b88:	d000      	beq.n	8000b8c <__aeabi_fsub+0x180>
 8000b8a:	e789      	b.n	8000aa0 <__aeabi_fsub+0x94>
 8000b8c:	e011      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000b8e:	4648      	mov	r0, r9
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d158      	bne.n	8000c46 <__aeabi_fsub+0x23a>
 8000b94:	2cff      	cmp	r4, #255	; 0xff
 8000b96:	d10c      	bne.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fsub+0x194>
 8000b9e:	e78c      	b.n	8000aba <__aeabi_fsub+0xae>
 8000ba0:	2080      	movs	r0, #128	; 0x80
 8000ba2:	03c0      	lsls	r0, r0, #15
 8000ba4:	4303      	orrs	r3, r0
 8000ba6:	025b      	lsls	r3, r3, #9
 8000ba8:	0a5b      	lsrs	r3, r3, #9
 8000baa:	24ff      	movs	r4, #255	; 0xff
 8000bac:	e787      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000bae:	2cff      	cmp	r4, #255	; 0xff
 8000bb0:	d025      	beq.n	8000bfe <__aeabi_fsub+0x1f2>
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	2dff      	cmp	r5, #255	; 0xff
 8000bb6:	d0f0      	beq.n	8000b9a <__aeabi_fsub+0x18e>
 8000bb8:	025b      	lsls	r3, r3, #9
 8000bba:	0a5b      	lsrs	r3, r3, #9
 8000bbc:	b2ec      	uxtb	r4, r5
 8000bbe:	e77e      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000bc0:	2c00      	cmp	r4, #0
 8000bc2:	d04d      	beq.n	8000c60 <__aeabi_fsub+0x254>
 8000bc4:	28ff      	cmp	r0, #255	; 0xff
 8000bc6:	d018      	beq.n	8000bfa <__aeabi_fsub+0x1ee>
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	04e4      	lsls	r4, r4, #19
 8000bcc:	4272      	negs	r2, r6
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	2a1b      	cmp	r2, #27
 8000bd2:	dd00      	ble.n	8000bd6 <__aeabi_fsub+0x1ca>
 8000bd4:	e0c4      	b.n	8000d60 <__aeabi_fsub+0x354>
 8000bd6:	001c      	movs	r4, r3
 8000bd8:	2520      	movs	r5, #32
 8000bda:	40d4      	lsrs	r4, r2
 8000bdc:	1aaa      	subs	r2, r5, r2
 8000bde:	4093      	lsls	r3, r2
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	4193      	sbcs	r3, r2
 8000be4:	4323      	orrs	r3, r4
 8000be6:	464a      	mov	r2, r9
 8000be8:	0005      	movs	r5, r0
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	4688      	mov	r8, r1
 8000bee:	e738      	b.n	8000a62 <__aeabi_fsub+0x56>
 8000bf0:	1c72      	adds	r2, r6, #1
 8000bf2:	d0f8      	beq.n	8000be6 <__aeabi_fsub+0x1da>
 8000bf4:	43f2      	mvns	r2, r6
 8000bf6:	28ff      	cmp	r0, #255	; 0xff
 8000bf8:	d1ea      	bne.n	8000bd0 <__aeabi_fsub+0x1c4>
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	25ff      	movs	r5, #255	; 0xff
 8000c00:	e7d7      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000c02:	019b      	lsls	r3, r3, #6
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	e75a      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d141      	bne.n	8000c90 <__aeabi_fsub+0x284>
 8000c0c:	1c65      	adds	r5, r4, #1
 8000c0e:	b2e9      	uxtb	r1, r5
 8000c10:	2901      	cmp	r1, #1
 8000c12:	dd45      	ble.n	8000ca0 <__aeabi_fsub+0x294>
 8000c14:	2dff      	cmp	r5, #255	; 0xff
 8000c16:	d100      	bne.n	8000c1a <__aeabi_fsub+0x20e>
 8000c18:	e74f      	b.n	8000aba <__aeabi_fsub+0xae>
 8000c1a:	2407      	movs	r4, #7
 8000c1c:	444b      	add	r3, r9
 8000c1e:	085b      	lsrs	r3, r3, #1
 8000c20:	401c      	ands	r4, r3
 8000c22:	e738      	b.n	8000a96 <__aeabi_fsub+0x8a>
 8000c24:	2207      	movs	r2, #7
 8000c26:	4b5a      	ldr	r3, [pc, #360]	; (8000d90 <__aeabi_fsub+0x384>)
 8000c28:	1a2d      	subs	r5, r5, r0
 8000c2a:	4023      	ands	r3, r4
 8000c2c:	4014      	ands	r4, r2
 8000c2e:	e732      	b.n	8000a96 <__aeabi_fsub+0x8a>
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d11d      	bne.n	8000c70 <__aeabi_fsub+0x264>
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d17a      	bne.n	8000d2e <__aeabi_fsub+0x322>
 8000c38:	464b      	mov	r3, r9
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fsub+0x234>
 8000c3e:	e091      	b.n	8000d64 <__aeabi_fsub+0x358>
 8000c40:	000a      	movs	r2, r1
 8000c42:	2500      	movs	r5, #0
 8000c44:	e7b5      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000c46:	3e01      	subs	r6, #1
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d119      	bne.n	8000c80 <__aeabi_fsub+0x274>
 8000c4c:	444b      	add	r3, r9
 8000c4e:	e76c      	b.n	8000b2a <__aeabi_fsub+0x11e>
 8000c50:	2cff      	cmp	r4, #255	; 0xff
 8000c52:	d184      	bne.n	8000b5e <__aeabi_fsub+0x152>
 8000c54:	25ff      	movs	r5, #255	; 0xff
 8000c56:	e7ac      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000c58:	464a      	mov	r2, r9
 8000c5a:	4688      	mov	r8, r1
 8000c5c:	1ad4      	subs	r4, r2, r3
 8000c5e:	e705      	b.n	8000a6c <__aeabi_fsub+0x60>
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1c5      	bne.n	8000bf0 <__aeabi_fsub+0x1e4>
 8000c64:	000a      	movs	r2, r1
 8000c66:	28ff      	cmp	r0, #255	; 0xff
 8000c68:	d0c8      	beq.n	8000bfc <__aeabi_fsub+0x1f0>
 8000c6a:	0005      	movs	r5, r0
 8000c6c:	464b      	mov	r3, r9
 8000c6e:	e7a0      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d149      	bne.n	8000d08 <__aeabi_fsub+0x2fc>
 8000c74:	464b      	mov	r3, r9
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d077      	beq.n	8000d6a <__aeabi_fsub+0x35e>
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	25ff      	movs	r5, #255	; 0xff
 8000c7e:	e798      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000c80:	2cff      	cmp	r4, #255	; 0xff
 8000c82:	d000      	beq.n	8000c86 <__aeabi_fsub+0x27a>
 8000c84:	e743      	b.n	8000b0e <__aeabi_fsub+0x102>
 8000c86:	e787      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000c88:	000a      	movs	r2, r1
 8000c8a:	24ff      	movs	r4, #255	; 0xff
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e716      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000c90:	2c00      	cmp	r4, #0
 8000c92:	d115      	bne.n	8000cc0 <__aeabi_fsub+0x2b4>
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d157      	bne.n	8000d48 <__aeabi_fsub+0x33c>
 8000c98:	28ff      	cmp	r0, #255	; 0xff
 8000c9a:	d1e6      	bne.n	8000c6a <__aeabi_fsub+0x25e>
 8000c9c:	464b      	mov	r3, r9
 8000c9e:	e77b      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000ca0:	2c00      	cmp	r4, #0
 8000ca2:	d120      	bne.n	8000ce6 <__aeabi_fsub+0x2da>
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d057      	beq.n	8000d58 <__aeabi_fsub+0x34c>
 8000ca8:	4649      	mov	r1, r9
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d053      	beq.n	8000d56 <__aeabi_fsub+0x34a>
 8000cae:	444b      	add	r3, r9
 8000cb0:	015a      	lsls	r2, r3, #5
 8000cb2:	d568      	bpl.n	8000d86 <__aeabi_fsub+0x37a>
 8000cb4:	2407      	movs	r4, #7
 8000cb6:	4a36      	ldr	r2, [pc, #216]	; (8000d90 <__aeabi_fsub+0x384>)
 8000cb8:	401c      	ands	r4, r3
 8000cba:	2501      	movs	r5, #1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	e6ea      	b.n	8000a96 <__aeabi_fsub+0x8a>
 8000cc0:	28ff      	cmp	r0, #255	; 0xff
 8000cc2:	d0eb      	beq.n	8000c9c <__aeabi_fsub+0x290>
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	04d2      	lsls	r2, r2, #19
 8000cc8:	4276      	negs	r6, r6
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	2e1b      	cmp	r6, #27
 8000cce:	dc53      	bgt.n	8000d78 <__aeabi_fsub+0x36c>
 8000cd0:	2520      	movs	r5, #32
 8000cd2:	1bad      	subs	r5, r5, r6
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	40ab      	lsls	r3, r5
 8000cd8:	40f2      	lsrs	r2, r6
 8000cda:	1e5c      	subs	r4, r3, #1
 8000cdc:	41a3      	sbcs	r3, r4
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	444b      	add	r3, r9
 8000ce2:	0005      	movs	r5, r0
 8000ce4:	e721      	b.n	8000b2a <__aeabi_fsub+0x11e>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0d8      	beq.n	8000c9c <__aeabi_fsub+0x290>
 8000cea:	4649      	mov	r1, r9
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_fsub+0x2e6>
 8000cf0:	e752      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000cf2:	2180      	movs	r1, #128	; 0x80
 8000cf4:	03c9      	lsls	r1, r1, #15
 8000cf6:	420f      	tst	r7, r1
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fsub+0x2f0>
 8000cfa:	e74d      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000cfc:	4660      	mov	r0, ip
 8000cfe:	4208      	tst	r0, r1
 8000d00:	d000      	beq.n	8000d04 <__aeabi_fsub+0x2f8>
 8000d02:	e749      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000d04:	464b      	mov	r3, r9
 8000d06:	e747      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000d08:	4648      	mov	r0, r9
 8000d0a:	25ff      	movs	r5, #255	; 0xff
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_fsub+0x306>
 8000d10:	e74f      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	03d2      	lsls	r2, r2, #15
 8000d16:	4217      	tst	r7, r2
 8000d18:	d004      	beq.n	8000d24 <__aeabi_fsub+0x318>
 8000d1a:	4660      	mov	r0, ip
 8000d1c:	4210      	tst	r0, r2
 8000d1e:	d101      	bne.n	8000d24 <__aeabi_fsub+0x318>
 8000d20:	464b      	mov	r3, r9
 8000d22:	4688      	mov	r8, r1
 8000d24:	2201      	movs	r2, #1
 8000d26:	4641      	mov	r1, r8
 8000d28:	25ff      	movs	r5, #255	; 0xff
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	e741      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000d2e:	4648      	mov	r0, r9
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d01f      	beq.n	8000d74 <__aeabi_fsub+0x368>
 8000d34:	1a1a      	subs	r2, r3, r0
 8000d36:	0150      	lsls	r0, r2, #5
 8000d38:	d520      	bpl.n	8000d7c <__aeabi_fsub+0x370>
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	2407      	movs	r4, #7
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	401c      	ands	r4, r3
 8000d42:	4688      	mov	r8, r1
 8000d44:	2500      	movs	r5, #0
 8000d46:	e6a6      	b.n	8000a96 <__aeabi_fsub+0x8a>
 8000d48:	1c74      	adds	r4, r6, #1
 8000d4a:	d0c9      	beq.n	8000ce0 <__aeabi_fsub+0x2d4>
 8000d4c:	43f6      	mvns	r6, r6
 8000d4e:	28ff      	cmp	r0, #255	; 0xff
 8000d50:	d1bc      	bne.n	8000ccc <__aeabi_fsub+0x2c0>
 8000d52:	464b      	mov	r3, r9
 8000d54:	e720      	b.n	8000b98 <__aeabi_fsub+0x18c>
 8000d56:	4699      	mov	r9, r3
 8000d58:	464b      	mov	r3, r9
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	e72b      	b.n	8000bb8 <__aeabi_fsub+0x1ac>
 8000d60:	2301      	movs	r3, #1
 8000d62:	e740      	b.n	8000be6 <__aeabi_fsub+0x1da>
 8000d64:	2200      	movs	r2, #0
 8000d66:	2300      	movs	r3, #0
 8000d68:	e6a9      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	03db      	lsls	r3, r3, #15
 8000d70:	24ff      	movs	r4, #255	; 0xff
 8000d72:	e6a4      	b.n	8000abe <__aeabi_fsub+0xb2>
 8000d74:	2500      	movs	r5, #0
 8000d76:	e71c      	b.n	8000bb2 <__aeabi_fsub+0x1a6>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e7b1      	b.n	8000ce0 <__aeabi_fsub+0x2d4>
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	d0f1      	beq.n	8000d64 <__aeabi_fsub+0x358>
 8000d80:	0013      	movs	r3, r2
 8000d82:	2500      	movs	r5, #0
 8000d84:	e6fc      	b.n	8000b80 <__aeabi_fsub+0x174>
 8000d86:	2500      	movs	r5, #0
 8000d88:	e6fa      	b.n	8000b80 <__aeabi_fsub+0x174>
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	7dffffff 	.word	0x7dffffff
 8000d90:	fbffffff 	.word	0xfbffffff

08000d94 <__aeabi_f2iz>:
 8000d94:	0241      	lsls	r1, r0, #9
 8000d96:	0042      	lsls	r2, r0, #1
 8000d98:	0fc3      	lsrs	r3, r0, #31
 8000d9a:	0a49      	lsrs	r1, r1, #9
 8000d9c:	0e12      	lsrs	r2, r2, #24
 8000d9e:	2000      	movs	r0, #0
 8000da0:	2a7e      	cmp	r2, #126	; 0x7e
 8000da2:	d90d      	bls.n	8000dc0 <__aeabi_f2iz+0x2c>
 8000da4:	2a9d      	cmp	r2, #157	; 0x9d
 8000da6:	d80c      	bhi.n	8000dc2 <__aeabi_f2iz+0x2e>
 8000da8:	2080      	movs	r0, #128	; 0x80
 8000daa:	0400      	lsls	r0, r0, #16
 8000dac:	4301      	orrs	r1, r0
 8000dae:	2a95      	cmp	r2, #149	; 0x95
 8000db0:	dc0a      	bgt.n	8000dc8 <__aeabi_f2iz+0x34>
 8000db2:	2096      	movs	r0, #150	; 0x96
 8000db4:	1a82      	subs	r2, r0, r2
 8000db6:	40d1      	lsrs	r1, r2
 8000db8:	4248      	negs	r0, r1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_f2iz+0x2c>
 8000dbe:	0008      	movs	r0, r1
 8000dc0:	4770      	bx	lr
 8000dc2:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <__aeabi_f2iz+0x3c>)
 8000dc4:	1898      	adds	r0, r3, r2
 8000dc6:	e7fb      	b.n	8000dc0 <__aeabi_f2iz+0x2c>
 8000dc8:	3a96      	subs	r2, #150	; 0x96
 8000dca:	4091      	lsls	r1, r2
 8000dcc:	e7f4      	b.n	8000db8 <__aeabi_f2iz+0x24>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	7fffffff 	.word	0x7fffffff

08000dd4 <__aeabi_i2f>:
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d03d      	beq.n	8000e56 <__aeabi_i2f+0x82>
 8000dda:	17c3      	asrs	r3, r0, #31
 8000ddc:	18c5      	adds	r5, r0, r3
 8000dde:	405d      	eors	r5, r3
 8000de0:	0fc4      	lsrs	r4, r0, #31
 8000de2:	0028      	movs	r0, r5
 8000de4:	f000 f8ba 	bl	8000f5c <__clzsi2>
 8000de8:	229e      	movs	r2, #158	; 0x9e
 8000dea:	1a12      	subs	r2, r2, r0
 8000dec:	2a96      	cmp	r2, #150	; 0x96
 8000dee:	dc07      	bgt.n	8000e00 <__aeabi_i2f+0x2c>
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	2808      	cmp	r0, #8
 8000df4:	dd33      	ble.n	8000e5e <__aeabi_i2f+0x8a>
 8000df6:	3808      	subs	r0, #8
 8000df8:	4085      	lsls	r5, r0
 8000dfa:	0268      	lsls	r0, r5, #9
 8000dfc:	0a40      	lsrs	r0, r0, #9
 8000dfe:	e023      	b.n	8000e48 <__aeabi_i2f+0x74>
 8000e00:	2a99      	cmp	r2, #153	; 0x99
 8000e02:	dd0b      	ble.n	8000e1c <__aeabi_i2f+0x48>
 8000e04:	2305      	movs	r3, #5
 8000e06:	0029      	movs	r1, r5
 8000e08:	1a1b      	subs	r3, r3, r0
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	331b      	adds	r3, #27
 8000e10:	409d      	lsls	r5, r3
 8000e12:	002b      	movs	r3, r5
 8000e14:	1e5d      	subs	r5, r3, #1
 8000e16:	41ab      	sbcs	r3, r5
 8000e18:	4319      	orrs	r1, r3
 8000e1a:	000d      	movs	r5, r1
 8000e1c:	2805      	cmp	r0, #5
 8000e1e:	dd01      	ble.n	8000e24 <__aeabi_i2f+0x50>
 8000e20:	1f43      	subs	r3, r0, #5
 8000e22:	409d      	lsls	r5, r3
 8000e24:	002b      	movs	r3, r5
 8000e26:	490f      	ldr	r1, [pc, #60]	; (8000e64 <__aeabi_i2f+0x90>)
 8000e28:	400b      	ands	r3, r1
 8000e2a:	076e      	lsls	r6, r5, #29
 8000e2c:	d009      	beq.n	8000e42 <__aeabi_i2f+0x6e>
 8000e2e:	260f      	movs	r6, #15
 8000e30:	4035      	ands	r5, r6
 8000e32:	2d04      	cmp	r5, #4
 8000e34:	d005      	beq.n	8000e42 <__aeabi_i2f+0x6e>
 8000e36:	3304      	adds	r3, #4
 8000e38:	015d      	lsls	r5, r3, #5
 8000e3a:	d502      	bpl.n	8000e42 <__aeabi_i2f+0x6e>
 8000e3c:	229f      	movs	r2, #159	; 0x9f
 8000e3e:	400b      	ands	r3, r1
 8000e40:	1a12      	subs	r2, r2, r0
 8000e42:	019b      	lsls	r3, r3, #6
 8000e44:	0a58      	lsrs	r0, r3, #9
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	0240      	lsls	r0, r0, #9
 8000e4a:	05d2      	lsls	r2, r2, #23
 8000e4c:	0a40      	lsrs	r0, r0, #9
 8000e4e:	07e4      	lsls	r4, r4, #31
 8000e50:	4310      	orrs	r0, r2
 8000e52:	4320      	orrs	r0, r4
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	2400      	movs	r4, #0
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	e7f4      	b.n	8000e48 <__aeabi_i2f+0x74>
 8000e5e:	0268      	lsls	r0, r5, #9
 8000e60:	0a40      	lsrs	r0, r0, #9
 8000e62:	e7f1      	b.n	8000e48 <__aeabi_i2f+0x74>
 8000e64:	fbffffff 	.word	0xfbffffff

08000e68 <__aeabi_ui2f>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	1e04      	subs	r4, r0, #0
 8000e6c:	d034      	beq.n	8000ed8 <__aeabi_ui2f+0x70>
 8000e6e:	f000 f875 	bl	8000f5c <__clzsi2>
 8000e72:	229e      	movs	r2, #158	; 0x9e
 8000e74:	1a12      	subs	r2, r2, r0
 8000e76:	2a96      	cmp	r2, #150	; 0x96
 8000e78:	dc07      	bgt.n	8000e8a <__aeabi_ui2f+0x22>
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	2808      	cmp	r0, #8
 8000e7e:	dd2e      	ble.n	8000ede <__aeabi_ui2f+0x76>
 8000e80:	3808      	subs	r0, #8
 8000e82:	4084      	lsls	r4, r0
 8000e84:	0260      	lsls	r0, r4, #9
 8000e86:	0a40      	lsrs	r0, r0, #9
 8000e88:	e021      	b.n	8000ece <__aeabi_ui2f+0x66>
 8000e8a:	2a99      	cmp	r2, #153	; 0x99
 8000e8c:	dd09      	ble.n	8000ea2 <__aeabi_ui2f+0x3a>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	0021      	movs	r1, r4
 8000e92:	331b      	adds	r3, #27
 8000e94:	4099      	lsls	r1, r3
 8000e96:	1e4b      	subs	r3, r1, #1
 8000e98:	4199      	sbcs	r1, r3
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	1a1b      	subs	r3, r3, r0
 8000e9e:	40dc      	lsrs	r4, r3
 8000ea0:	430c      	orrs	r4, r1
 8000ea2:	2805      	cmp	r0, #5
 8000ea4:	dd01      	ble.n	8000eaa <__aeabi_ui2f+0x42>
 8000ea6:	1f43      	subs	r3, r0, #5
 8000ea8:	409c      	lsls	r4, r3
 8000eaa:	0023      	movs	r3, r4
 8000eac:	490d      	ldr	r1, [pc, #52]	; (8000ee4 <__aeabi_ui2f+0x7c>)
 8000eae:	400b      	ands	r3, r1
 8000eb0:	0765      	lsls	r5, r4, #29
 8000eb2:	d009      	beq.n	8000ec8 <__aeabi_ui2f+0x60>
 8000eb4:	250f      	movs	r5, #15
 8000eb6:	402c      	ands	r4, r5
 8000eb8:	2c04      	cmp	r4, #4
 8000eba:	d005      	beq.n	8000ec8 <__aeabi_ui2f+0x60>
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	015c      	lsls	r4, r3, #5
 8000ec0:	d502      	bpl.n	8000ec8 <__aeabi_ui2f+0x60>
 8000ec2:	229f      	movs	r2, #159	; 0x9f
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	1a12      	subs	r2, r2, r0
 8000ec8:	019b      	lsls	r3, r3, #6
 8000eca:	0a58      	lsrs	r0, r3, #9
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	0240      	lsls	r0, r0, #9
 8000ed0:	05d2      	lsls	r2, r2, #23
 8000ed2:	0a40      	lsrs	r0, r0, #9
 8000ed4:	4310      	orrs	r0, r2
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2000      	movs	r0, #0
 8000edc:	e7f7      	b.n	8000ece <__aeabi_ui2f+0x66>
 8000ede:	0260      	lsls	r0, r4, #9
 8000ee0:	0a40      	lsrs	r0, r0, #9
 8000ee2:	e7f4      	b.n	8000ece <__aeabi_ui2f+0x66>
 8000ee4:	fbffffff 	.word	0xfbffffff

08000ee8 <__aeabi_cfrcmple>:
 8000ee8:	4684      	mov	ip, r0
 8000eea:	1c08      	adds	r0, r1, #0
 8000eec:	4661      	mov	r1, ip
 8000eee:	e7ff      	b.n	8000ef0 <__aeabi_cfcmpeq>

08000ef0 <__aeabi_cfcmpeq>:
 8000ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ef2:	f000 f8c7 	bl	8001084 <__lesf2>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	d401      	bmi.n	8000efe <__aeabi_cfcmpeq+0xe>
 8000efa:	2100      	movs	r1, #0
 8000efc:	42c8      	cmn	r0, r1
 8000efe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f00 <__aeabi_fcmpeq>:
 8000f00:	b510      	push	{r4, lr}
 8000f02:	f000 f849 	bl	8000f98 <__eqsf2>
 8000f06:	4240      	negs	r0, r0
 8000f08:	3001      	adds	r0, #1
 8000f0a:	bd10      	pop	{r4, pc}

08000f0c <__aeabi_fcmplt>:
 8000f0c:	b510      	push	{r4, lr}
 8000f0e:	f000 f8b9 	bl	8001084 <__lesf2>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	db01      	blt.n	8000f1a <__aeabi_fcmplt+0xe>
 8000f16:	2000      	movs	r0, #0
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	bd10      	pop	{r4, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)

08000f20 <__aeabi_fcmple>:
 8000f20:	b510      	push	{r4, lr}
 8000f22:	f000 f8af 	bl	8001084 <__lesf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	dd01      	ble.n	8000f2e <__aeabi_fcmple+0xe>
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	2001      	movs	r0, #1
 8000f30:	bd10      	pop	{r4, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)

08000f34 <__aeabi_fcmpgt>:
 8000f34:	b510      	push	{r4, lr}
 8000f36:	f000 f857 	bl	8000fe8 <__gesf2>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	dc01      	bgt.n	8000f42 <__aeabi_fcmpgt+0xe>
 8000f3e:	2000      	movs	r0, #0
 8000f40:	bd10      	pop	{r4, pc}
 8000f42:	2001      	movs	r0, #1
 8000f44:	bd10      	pop	{r4, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)

08000f48 <__aeabi_fcmpge>:
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	f000 f84d 	bl	8000fe8 <__gesf2>
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	da01      	bge.n	8000f56 <__aeabi_fcmpge+0xe>
 8000f52:	2000      	movs	r0, #0
 8000f54:	bd10      	pop	{r4, pc}
 8000f56:	2001      	movs	r0, #1
 8000f58:	bd10      	pop	{r4, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)

08000f5c <__clzsi2>:
 8000f5c:	211c      	movs	r1, #28
 8000f5e:	2301      	movs	r3, #1
 8000f60:	041b      	lsls	r3, r3, #16
 8000f62:	4298      	cmp	r0, r3
 8000f64:	d301      	bcc.n	8000f6a <__clzsi2+0xe>
 8000f66:	0c00      	lsrs	r0, r0, #16
 8000f68:	3910      	subs	r1, #16
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	4298      	cmp	r0, r3
 8000f6e:	d301      	bcc.n	8000f74 <__clzsi2+0x18>
 8000f70:	0a00      	lsrs	r0, r0, #8
 8000f72:	3908      	subs	r1, #8
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	4298      	cmp	r0, r3
 8000f78:	d301      	bcc.n	8000f7e <__clzsi2+0x22>
 8000f7a:	0900      	lsrs	r0, r0, #4
 8000f7c:	3904      	subs	r1, #4
 8000f7e:	a202      	add	r2, pc, #8	; (adr r2, 8000f88 <__clzsi2+0x2c>)
 8000f80:	5c10      	ldrb	r0, [r2, r0]
 8000f82:	1840      	adds	r0, r0, r1
 8000f84:	4770      	bx	lr
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	02020304 	.word	0x02020304
 8000f8c:	01010101 	.word	0x01010101
	...

08000f98 <__eqsf2>:
 8000f98:	b570      	push	{r4, r5, r6, lr}
 8000f9a:	0042      	lsls	r2, r0, #1
 8000f9c:	024e      	lsls	r6, r1, #9
 8000f9e:	004c      	lsls	r4, r1, #1
 8000fa0:	0245      	lsls	r5, r0, #9
 8000fa2:	0a6d      	lsrs	r5, r5, #9
 8000fa4:	0e12      	lsrs	r2, r2, #24
 8000fa6:	0fc3      	lsrs	r3, r0, #31
 8000fa8:	0a76      	lsrs	r6, r6, #9
 8000faa:	0e24      	lsrs	r4, r4, #24
 8000fac:	0fc9      	lsrs	r1, r1, #31
 8000fae:	2aff      	cmp	r2, #255	; 0xff
 8000fb0:	d00f      	beq.n	8000fd2 <__eqsf2+0x3a>
 8000fb2:	2cff      	cmp	r4, #255	; 0xff
 8000fb4:	d011      	beq.n	8000fda <__eqsf2+0x42>
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	42a2      	cmp	r2, r4
 8000fba:	d000      	beq.n	8000fbe <__eqsf2+0x26>
 8000fbc:	bd70      	pop	{r4, r5, r6, pc}
 8000fbe:	42b5      	cmp	r5, r6
 8000fc0:	d1fc      	bne.n	8000fbc <__eqsf2+0x24>
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d00d      	beq.n	8000fe2 <__eqsf2+0x4a>
 8000fc6:	2a00      	cmp	r2, #0
 8000fc8:	d1f8      	bne.n	8000fbc <__eqsf2+0x24>
 8000fca:	0028      	movs	r0, r5
 8000fcc:	1e45      	subs	r5, r0, #1
 8000fce:	41a8      	sbcs	r0, r5
 8000fd0:	e7f4      	b.n	8000fbc <__eqsf2+0x24>
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	d1f1      	bne.n	8000fbc <__eqsf2+0x24>
 8000fd8:	e7eb      	b.n	8000fb2 <__eqsf2+0x1a>
 8000fda:	2001      	movs	r0, #1
 8000fdc:	2e00      	cmp	r6, #0
 8000fde:	d1ed      	bne.n	8000fbc <__eqsf2+0x24>
 8000fe0:	e7e9      	b.n	8000fb6 <__eqsf2+0x1e>
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	e7ea      	b.n	8000fbc <__eqsf2+0x24>
 8000fe6:	46c0      	nop			; (mov r8, r8)

08000fe8 <__gesf2>:
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	004a      	lsls	r2, r1, #1
 8000fec:	024e      	lsls	r6, r1, #9
 8000fee:	0245      	lsls	r5, r0, #9
 8000ff0:	0044      	lsls	r4, r0, #1
 8000ff2:	0a6d      	lsrs	r5, r5, #9
 8000ff4:	0e24      	lsrs	r4, r4, #24
 8000ff6:	0fc3      	lsrs	r3, r0, #31
 8000ff8:	0a76      	lsrs	r6, r6, #9
 8000ffa:	0e12      	lsrs	r2, r2, #24
 8000ffc:	0fc9      	lsrs	r1, r1, #31
 8000ffe:	2cff      	cmp	r4, #255	; 0xff
 8001000:	d015      	beq.n	800102e <__gesf2+0x46>
 8001002:	2aff      	cmp	r2, #255	; 0xff
 8001004:	d00e      	beq.n	8001024 <__gesf2+0x3c>
 8001006:	2c00      	cmp	r4, #0
 8001008:	d115      	bne.n	8001036 <__gesf2+0x4e>
 800100a:	2a00      	cmp	r2, #0
 800100c:	d101      	bne.n	8001012 <__gesf2+0x2a>
 800100e:	2e00      	cmp	r6, #0
 8001010:	d01c      	beq.n	800104c <__gesf2+0x64>
 8001012:	2d00      	cmp	r5, #0
 8001014:	d014      	beq.n	8001040 <__gesf2+0x58>
 8001016:	428b      	cmp	r3, r1
 8001018:	d027      	beq.n	800106a <__gesf2+0x82>
 800101a:	2002      	movs	r0, #2
 800101c:	3b01      	subs	r3, #1
 800101e:	4018      	ands	r0, r3
 8001020:	3801      	subs	r0, #1
 8001022:	bd70      	pop	{r4, r5, r6, pc}
 8001024:	2e00      	cmp	r6, #0
 8001026:	d0ee      	beq.n	8001006 <__gesf2+0x1e>
 8001028:	2002      	movs	r0, #2
 800102a:	4240      	negs	r0, r0
 800102c:	e7f9      	b.n	8001022 <__gesf2+0x3a>
 800102e:	2d00      	cmp	r5, #0
 8001030:	d1fa      	bne.n	8001028 <__gesf2+0x40>
 8001032:	2aff      	cmp	r2, #255	; 0xff
 8001034:	d00e      	beq.n	8001054 <__gesf2+0x6c>
 8001036:	2a00      	cmp	r2, #0
 8001038:	d10e      	bne.n	8001058 <__gesf2+0x70>
 800103a:	2e00      	cmp	r6, #0
 800103c:	d0ed      	beq.n	800101a <__gesf2+0x32>
 800103e:	e00b      	b.n	8001058 <__gesf2+0x70>
 8001040:	2301      	movs	r3, #1
 8001042:	3901      	subs	r1, #1
 8001044:	4399      	bics	r1, r3
 8001046:	0008      	movs	r0, r1
 8001048:	3001      	adds	r0, #1
 800104a:	e7ea      	b.n	8001022 <__gesf2+0x3a>
 800104c:	2000      	movs	r0, #0
 800104e:	2d00      	cmp	r5, #0
 8001050:	d0e7      	beq.n	8001022 <__gesf2+0x3a>
 8001052:	e7e2      	b.n	800101a <__gesf2+0x32>
 8001054:	2e00      	cmp	r6, #0
 8001056:	d1e7      	bne.n	8001028 <__gesf2+0x40>
 8001058:	428b      	cmp	r3, r1
 800105a:	d1de      	bne.n	800101a <__gesf2+0x32>
 800105c:	4294      	cmp	r4, r2
 800105e:	dd05      	ble.n	800106c <__gesf2+0x84>
 8001060:	2102      	movs	r1, #2
 8001062:	1e58      	subs	r0, r3, #1
 8001064:	4008      	ands	r0, r1
 8001066:	3801      	subs	r0, #1
 8001068:	e7db      	b.n	8001022 <__gesf2+0x3a>
 800106a:	2400      	movs	r4, #0
 800106c:	42a2      	cmp	r2, r4
 800106e:	dc04      	bgt.n	800107a <__gesf2+0x92>
 8001070:	42b5      	cmp	r5, r6
 8001072:	d8d2      	bhi.n	800101a <__gesf2+0x32>
 8001074:	2000      	movs	r0, #0
 8001076:	42b5      	cmp	r5, r6
 8001078:	d2d3      	bcs.n	8001022 <__gesf2+0x3a>
 800107a:	1e58      	subs	r0, r3, #1
 800107c:	2301      	movs	r3, #1
 800107e:	4398      	bics	r0, r3
 8001080:	3001      	adds	r0, #1
 8001082:	e7ce      	b.n	8001022 <__gesf2+0x3a>

08001084 <__lesf2>:
 8001084:	b530      	push	{r4, r5, lr}
 8001086:	0042      	lsls	r2, r0, #1
 8001088:	0244      	lsls	r4, r0, #9
 800108a:	024d      	lsls	r5, r1, #9
 800108c:	0fc3      	lsrs	r3, r0, #31
 800108e:	0048      	lsls	r0, r1, #1
 8001090:	0a64      	lsrs	r4, r4, #9
 8001092:	0e12      	lsrs	r2, r2, #24
 8001094:	0a6d      	lsrs	r5, r5, #9
 8001096:	0e00      	lsrs	r0, r0, #24
 8001098:	0fc9      	lsrs	r1, r1, #31
 800109a:	2aff      	cmp	r2, #255	; 0xff
 800109c:	d012      	beq.n	80010c4 <__lesf2+0x40>
 800109e:	28ff      	cmp	r0, #255	; 0xff
 80010a0:	d00c      	beq.n	80010bc <__lesf2+0x38>
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d112      	bne.n	80010cc <__lesf2+0x48>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	d119      	bne.n	80010de <__lesf2+0x5a>
 80010aa:	2d00      	cmp	r5, #0
 80010ac:	d117      	bne.n	80010de <__lesf2+0x5a>
 80010ae:	2c00      	cmp	r4, #0
 80010b0:	d02b      	beq.n	800110a <__lesf2+0x86>
 80010b2:	2002      	movs	r0, #2
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4018      	ands	r0, r3
 80010b8:	3801      	subs	r0, #1
 80010ba:	e026      	b.n	800110a <__lesf2+0x86>
 80010bc:	2d00      	cmp	r5, #0
 80010be:	d0f0      	beq.n	80010a2 <__lesf2+0x1e>
 80010c0:	2002      	movs	r0, #2
 80010c2:	e022      	b.n	800110a <__lesf2+0x86>
 80010c4:	2c00      	cmp	r4, #0
 80010c6:	d1fb      	bne.n	80010c0 <__lesf2+0x3c>
 80010c8:	28ff      	cmp	r0, #255	; 0xff
 80010ca:	d01f      	beq.n	800110c <__lesf2+0x88>
 80010cc:	2800      	cmp	r0, #0
 80010ce:	d11f      	bne.n	8001110 <__lesf2+0x8c>
 80010d0:	2d00      	cmp	r5, #0
 80010d2:	d11d      	bne.n	8001110 <__lesf2+0x8c>
 80010d4:	2002      	movs	r0, #2
 80010d6:	3b01      	subs	r3, #1
 80010d8:	4018      	ands	r0, r3
 80010da:	3801      	subs	r0, #1
 80010dc:	e015      	b.n	800110a <__lesf2+0x86>
 80010de:	2c00      	cmp	r4, #0
 80010e0:	d00e      	beq.n	8001100 <__lesf2+0x7c>
 80010e2:	428b      	cmp	r3, r1
 80010e4:	d1e5      	bne.n	80010b2 <__lesf2+0x2e>
 80010e6:	2200      	movs	r2, #0
 80010e8:	4290      	cmp	r0, r2
 80010ea:	dc04      	bgt.n	80010f6 <__lesf2+0x72>
 80010ec:	42ac      	cmp	r4, r5
 80010ee:	d8e0      	bhi.n	80010b2 <__lesf2+0x2e>
 80010f0:	2000      	movs	r0, #0
 80010f2:	42ac      	cmp	r4, r5
 80010f4:	d209      	bcs.n	800110a <__lesf2+0x86>
 80010f6:	1e58      	subs	r0, r3, #1
 80010f8:	2301      	movs	r3, #1
 80010fa:	4398      	bics	r0, r3
 80010fc:	3001      	adds	r0, #1
 80010fe:	e004      	b.n	800110a <__lesf2+0x86>
 8001100:	2301      	movs	r3, #1
 8001102:	3901      	subs	r1, #1
 8001104:	4399      	bics	r1, r3
 8001106:	0008      	movs	r0, r1
 8001108:	3001      	adds	r0, #1
 800110a:	bd30      	pop	{r4, r5, pc}
 800110c:	2d00      	cmp	r5, #0
 800110e:	d1d7      	bne.n	80010c0 <__lesf2+0x3c>
 8001110:	428b      	cmp	r3, r1
 8001112:	d1ce      	bne.n	80010b2 <__lesf2+0x2e>
 8001114:	4282      	cmp	r2, r0
 8001116:	dde7      	ble.n	80010e8 <__lesf2+0x64>
 8001118:	2102      	movs	r1, #2
 800111a:	1e58      	subs	r0, r3, #1
 800111c:	4008      	ands	r0, r1
 800111e:	3801      	subs	r0, #1
 8001120:	e7f3      	b.n	800110a <__lesf2+0x86>
 8001122:	46c0      	nop			; (mov r8, r8)

08001124 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	0008      	movs	r0, r1
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	0019      	movs	r1, r3
 8001132:	260b      	movs	r6, #11
 8001134:	19bb      	adds	r3, r7, r6
 8001136:	1c02      	adds	r2, r0, #0
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	2508      	movs	r5, #8
 800113c:	197b      	adds	r3, r7, r5
 800113e:	1c0a      	adds	r2, r1, #0
 8001140:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	685c      	ldr	r4, [r3, #4]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6898      	ldr	r0, [r3, #8]
 800114a:	197b      	adds	r3, r7, r5
 800114c:	881d      	ldrh	r5, [r3, #0]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	19bb      	adds	r3, r7, r6
 8001152:	7819      	ldrb	r1, [r3, #0]
 8001154:	002b      	movs	r3, r5
 8001156:	47a0      	blx	r4
 8001158:	0003      	movs	r3, r0
 800115a:	617b      	str	r3, [r7, #20]
  return ret;
 800115c:	697b      	ldr	r3, [r7, #20]
}
 800115e:	0018      	movs	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	b007      	add	sp, #28
 8001164:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001166 <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8001166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001168:	b087      	sub	sp, #28
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	0008      	movs	r0, r1
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	0019      	movs	r1, r3
 8001174:	260b      	movs	r6, #11
 8001176:	19bb      	adds	r3, r7, r6
 8001178:	1c02      	adds	r2, r0, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	2508      	movs	r5, #8
 800117e:	197b      	adds	r3, r7, r5
 8001180:	1c0a      	adds	r2, r1, #0
 8001182:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681c      	ldr	r4, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6898      	ldr	r0, [r3, #8]
 800118c:	197b      	adds	r3, r7, r5
 800118e:	881d      	ldrh	r5, [r3, #0]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	19bb      	adds	r3, r7, r6
 8001194:	7819      	ldrb	r1, [r3, #0]
 8001196:	002b      	movs	r3, r5
 8001198:	47a0      	blx	r4
 800119a:	0003      	movs	r3, r0
 800119c:	617b      	str	r3, [r7, #20]
  return ret;
 800119e:	697b      	ldr	r3, [r7, #20]
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b007      	add	sp, #28
 80011a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011a8 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	000a      	movs	r2, r1
 80011b2:	1cfb      	adds	r3, r7, #3
 80011b4:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80011b6:	2308      	movs	r3, #8
 80011b8:	18fa      	adds	r2, r7, r3
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	2301      	movs	r3, #1
 80011be:	2120      	movs	r1, #32
 80011c0:	f7ff ffb0 	bl	8001124 <hts221_read_reg>
 80011c4:	0003      	movs	r3, r0
 80011c6:	60fb      	str	r3, [r7, #12]

  if(ret == 0){
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d118      	bne.n	8001200 <hts221_data_rate_set+0x58>
    reg.odr = (uint8_t)val;
 80011ce:	1cfb      	adds	r3, r7, #3
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2203      	movs	r2, #3
 80011d4:	4013      	ands	r3, r2
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	2408      	movs	r4, #8
 80011da:	193b      	adds	r3, r7, r4
 80011dc:	2103      	movs	r1, #3
 80011de:	400a      	ands	r2, r1
 80011e0:	0010      	movs	r0, r2
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	2103      	movs	r1, #3
 80011e6:	438a      	bics	r2, r1
 80011e8:	1c11      	adds	r1, r2, #0
 80011ea:	1c02      	adds	r2, r0, #0
 80011ec:	430a      	orrs	r2, r1
 80011ee:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80011f0:	193a      	adds	r2, r7, r4
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	2301      	movs	r3, #1
 80011f6:	2120      	movs	r1, #32
 80011f8:	f7ff ffb5 	bl	8001166 <hts221_write_reg>
 80011fc:	0003      	movs	r3, r0
 80011fe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001200:	68fb      	ldr	r3, [r7, #12]
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b005      	add	sp, #20
 8001208:	bd90      	pop	{r4, r7, pc}

0800120a <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800120a:	b590      	push	{r4, r7, lr}
 800120c:	b085      	sub	sp, #20
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	000a      	movs	r2, r1
 8001214:	1cfb      	adds	r3, r7, #3
 8001216:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001218:	2308      	movs	r3, #8
 800121a:	18fa      	adds	r2, r7, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	2301      	movs	r3, #1
 8001220:	2120      	movs	r1, #32
 8001222:	f7ff ff7f 	bl	8001124 <hts221_read_reg>
 8001226:	0003      	movs	r3, r0
 8001228:	60fb      	str	r3, [r7, #12]

  if(ret == 0){
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d118      	bne.n	8001262 <hts221_block_data_update_set+0x58>
    reg.bdu = val;
 8001230:	1cfb      	adds	r3, r7, #3
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2201      	movs	r2, #1
 8001236:	4013      	ands	r3, r2
 8001238:	b2da      	uxtb	r2, r3
 800123a:	2408      	movs	r4, #8
 800123c:	193b      	adds	r3, r7, r4
 800123e:	2101      	movs	r1, #1
 8001240:	400a      	ands	r2, r1
 8001242:	0090      	lsls	r0, r2, #2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	2104      	movs	r1, #4
 8001248:	438a      	bics	r2, r1
 800124a:	1c11      	adds	r1, r2, #0
 800124c:	1c02      	adds	r2, r0, #0
 800124e:	430a      	orrs	r2, r1
 8001250:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001252:	193a      	adds	r2, r7, r4
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	2301      	movs	r3, #1
 8001258:	2120      	movs	r1, #32
 800125a:	f7ff ff84 	bl	8001166 <hts221_write_reg>
 800125e:	0003      	movs	r3, r0
 8001260:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b005      	add	sp, #20
 800126a:	bd90      	pop	{r4, r7, pc}

0800126c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	2302      	movs	r3, #2
 800127c:	2128      	movs	r1, #40	; 0x28
 800127e:	f7ff ff51 	bl	8001124 <hts221_read_reg>
 8001282:	0003      	movs	r3, r0
 8001284:	60fb      	str	r3, [r7, #12]
  return ret;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}

08001290 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	2301      	movs	r3, #1
 80012a0:	210f      	movs	r1, #15
 80012a2:	f7ff ff3f 	bl	8001124 <hts221_read_reg>
 80012a6:	0003      	movs	r3, r0
 80012a8:	60fb      	str	r3, [r7, #12]
  return ret;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b004      	add	sp, #16
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	000a      	movs	r2, r1
 80012be:	1cfb      	adds	r3, r7, #3
 80012c0:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80012c2:	2308      	movs	r3, #8
 80012c4:	18fa      	adds	r2, r7, r3
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	2301      	movs	r3, #1
 80012ca:	2120      	movs	r1, #32
 80012cc:	f7ff ff2a 	bl	8001124 <hts221_read_reg>
 80012d0:	0003      	movs	r3, r0
 80012d2:	60fb      	str	r3, [r7, #12]

  if(ret == 0){
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d116      	bne.n	8001308 <hts221_power_on_set+0x54>
    reg.pd = val;
 80012da:	1cfb      	adds	r3, r7, #3
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2201      	movs	r2, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	2408      	movs	r4, #8
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	01d0      	lsls	r0, r2, #7
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	217f      	movs	r1, #127	; 0x7f
 80012ee:	400a      	ands	r2, r1
 80012f0:	1c11      	adds	r1, r2, #0
 80012f2:	1c02      	adds	r2, r0, #0
 80012f4:	430a      	orrs	r2, r1
 80012f6:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80012f8:	193a      	adds	r2, r7, r4
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	2301      	movs	r3, #1
 80012fe:	2120      	movs	r1, #32
 8001300:	f7ff ff31 	bl	8001166 <hts221_write_reg>
 8001304:	0003      	movs	r3, r0
 8001306:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001308:	68fb      	ldr	r3, [r7, #12]
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b005      	add	sp, #20
 8001310:	bd90      	pop	{r4, r7, pc}

08001312 <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t*) val, 1);
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	2301      	movs	r3, #1
 8001322:	2127      	movs	r1, #39	; 0x27
 8001324:	f7ff fefe 	bl	8001124 <hts221_read_reg>
 8001328:	0003      	movs	r3, r0
 800132a:	60fb      	str	r3, [r7, #12]
  return ret;
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b004      	add	sp, #16
 8001334:	bd80      	pop	{r7, pc}

08001336 <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	2301      	movs	r3, #1
 8001346:	2130      	movs	r1, #48	; 0x30
 8001348:	f7ff feec 	bl	8001124 <hts221_read_reg>
 800134c:	0003      	movs	r3, r0
 800134e:	60fb      	str	r3, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	b2da      	uxtb	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	701a      	strb	r2, [r3, #0]

  return ret;
 800135c:	68fb      	ldr	r3, [r7, #12]
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}

08001366 <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	2301      	movs	r3, #1
 8001376:	2131      	movs	r1, #49	; 0x31
 8001378:	f7ff fed4 	bl	8001124 <hts221_read_reg>
 800137c:	0003      	movs	r3, r0
 800137e:	60fb      	str	r3, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	085b      	lsrs	r3, r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	701a      	strb	r2, [r3, #0]

  return ret;
 800138c:	68fb      	ldr	r3, [r7, #12]
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}

08001396 <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	2302      	movs	r3, #2
 80013a6:	2136      	movs	r1, #54	; 0x36
 80013a8:	f7ff febc 	bl	8001124 <hts221_read_reg>
 80013ac:	0003      	movs	r3, r0
 80013ae:	60fb      	str	r3, [r7, #12]
  return ret;
 80013b0:	68fb      	ldr	r3, [r7, #12]
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b004      	add	sp, #16
 80013b8:	bd80      	pop	{r7, pc}

080013ba <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	2302      	movs	r3, #2
 80013ca:	213a      	movs	r1, #58	; 0x3a
 80013cc:	f7ff feaa 	bl	8001124 <hts221_read_reg>
 80013d0:	0003      	movs	r3, r0
 80013d2:	60fb      	str	r3, [r7, #12]
  return ret;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b004      	add	sp, #16
 80013dc:	bd80      	pop	{r7, pc}

080013de <iis3dhhc_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dhhc_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80013de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e0:	b087      	sub	sp, #28
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	0008      	movs	r0, r1
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	0019      	movs	r1, r3
 80013ec:	260b      	movs	r6, #11
 80013ee:	19bb      	adds	r3, r7, r6
 80013f0:	1c02      	adds	r2, r0, #0
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	2508      	movs	r5, #8
 80013f6:	197b      	adds	r3, r7, r5
 80013f8:	1c0a      	adds	r2, r1, #0
 80013fa:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685c      	ldr	r4, [r3, #4]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6898      	ldr	r0, [r3, #8]
 8001404:	197b      	adds	r3, r7, r5
 8001406:	881d      	ldrh	r5, [r3, #0]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	19bb      	adds	r3, r7, r6
 800140c:	7819      	ldrb	r1, [r3, #0]
 800140e:	002b      	movs	r3, r5
 8001410:	47a0      	blx	r4
 8001412:	0003      	movs	r3, r0
 8001414:	617b      	str	r3, [r7, #20]
  return ret;
 8001416:	697b      	ldr	r3, [r7, #20]
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b007      	add	sp, #28
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001420 <iis3dhhc_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dhhc_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	0008      	movs	r0, r1
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	0019      	movs	r1, r3
 800142e:	260b      	movs	r6, #11
 8001430:	19bb      	adds	r3, r7, r6
 8001432:	1c02      	adds	r2, r0, #0
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	2508      	movs	r5, #8
 8001438:	197b      	adds	r3, r7, r5
 800143a:	1c0a      	adds	r2, r1, #0
 800143c:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681c      	ldr	r4, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6898      	ldr	r0, [r3, #8]
 8001446:	197b      	adds	r3, r7, r5
 8001448:	881d      	ldrh	r5, [r3, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	19bb      	adds	r3, r7, r6
 800144e:	7819      	ldrb	r1, [r3, #0]
 8001450:	002b      	movs	r3, r5
 8001452:	47a0      	blx	r4
 8001454:	0003      	movs	r3, r0
 8001456:	617b      	str	r3, [r7, #20]
  return ret;
 8001458:	697b      	ldr	r3, [r7, #20]
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b007      	add	sp, #28
 8001460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001462 <iis3dhhc_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dhhc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001462:	b590      	push	{r4, r7, lr}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	000a      	movs	r2, r1
 800146c:	1cfb      	adds	r3, r7, #3
 800146e:	701a      	strb	r2, [r3, #0]
  iis3dhhc_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis3dhhc_read_reg(ctx, IIS3DHHC_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001470:	2308      	movs	r3, #8
 8001472:	18fa      	adds	r2, r7, r3
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	2301      	movs	r3, #1
 8001478:	2120      	movs	r1, #32
 800147a:	f7ff ffb0 	bl	80013de <iis3dhhc_read_reg>
 800147e:	0003      	movs	r3, r0
 8001480:	60fb      	str	r3, [r7, #12]
  if(ret == 0){
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d118      	bne.n	80014ba <iis3dhhc_block_data_update_set+0x58>
    ctrl_reg1.bdu = val;
 8001488:	1cfb      	adds	r3, r7, #3
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	4013      	ands	r3, r2
 8001490:	b2da      	uxtb	r2, r3
 8001492:	2408      	movs	r4, #8
 8001494:	193b      	adds	r3, r7, r4
 8001496:	2101      	movs	r1, #1
 8001498:	400a      	ands	r2, r1
 800149a:	0010      	movs	r0, r2
 800149c:	781a      	ldrb	r2, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	438a      	bics	r2, r1
 80014a2:	1c11      	adds	r1, r2, #0
 80014a4:	1c02      	adds	r2, r0, #0
 80014a6:	430a      	orrs	r2, r1
 80014a8:	701a      	strb	r2, [r3, #0]
    ret = iis3dhhc_write_reg(ctx, IIS3DHHC_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80014aa:	193a      	adds	r2, r7, r4
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	2301      	movs	r3, #1
 80014b0:	2120      	movs	r1, #32
 80014b2:	f7ff ffb5 	bl	8001420 <iis3dhhc_write_reg>
 80014b6:	0003      	movs	r3, r0
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b005      	add	sp, #20
 80014c2:	bd90      	pop	{r4, r7, pc}

080014c4 <iis3dhhc_data_rate_set>:
  * @param  val    Change the values of norm_mod_en in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dhhc_data_rate_set(stmdev_ctx_t *ctx, iis3dhhc_norm_mod_en_t val)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	000a      	movs	r2, r1
 80014ce:	1cfb      	adds	r3, r7, #3
 80014d0:	701a      	strb	r2, [r3, #0]
  iis3dhhc_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis3dhhc_read_reg(ctx, IIS3DHHC_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80014d2:	2308      	movs	r3, #8
 80014d4:	18fa      	adds	r2, r7, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	2301      	movs	r3, #1
 80014da:	2120      	movs	r1, #32
 80014dc:	f7ff ff7f 	bl	80013de <iis3dhhc_read_reg>
 80014e0:	0003      	movs	r3, r0
 80014e2:	60fb      	str	r3, [r7, #12]
  if(ret == 0){
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <iis3dhhc_data_rate_set+0x54>
    ctrl_reg1.norm_mod_en = (uint8_t)val;
 80014ea:	1cfb      	adds	r3, r7, #3
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2201      	movs	r2, #1
 80014f0:	4013      	ands	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	2408      	movs	r4, #8
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	01d0      	lsls	r0, r2, #7
 80014fa:	781a      	ldrb	r2, [r3, #0]
 80014fc:	217f      	movs	r1, #127	; 0x7f
 80014fe:	400a      	ands	r2, r1
 8001500:	1c11      	adds	r1, r2, #0
 8001502:	1c02      	adds	r2, r0, #0
 8001504:	430a      	orrs	r2, r1
 8001506:	701a      	strb	r2, [r3, #0]
    ret = iis3dhhc_write_reg(ctx, IIS3DHHC_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001508:	193a      	adds	r2, r7, r4
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	2301      	movs	r3, #1
 800150e:	2120      	movs	r1, #32
 8001510:	f7ff ff86 	bl	8001420 <iis3dhhc_write_reg>
 8001514:	0003      	movs	r3, r0
 8001516:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001518:	68fb      	ldr	r3, [r7, #12]
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b005      	add	sp, #20
 8001520:	bd90      	pop	{r4, r7, pc}

08001522 <iis3dhhc_offset_temp_comp_set>:
  * @param  val    Change the values of off_tcomp_en in reg CTRL_REG4
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dhhc_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001522:	b590      	push	{r4, r7, lr}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	000a      	movs	r2, r1
 800152c:	1cfb      	adds	r3, r7, #3
 800152e:	701a      	strb	r2, [r3, #0]
  iis3dhhc_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis3dhhc_read_reg(ctx, IIS3DHHC_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8001530:	2308      	movs	r3, #8
 8001532:	18fa      	adds	r2, r7, r3
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	2301      	movs	r3, #1
 8001538:	2123      	movs	r1, #35	; 0x23
 800153a:	f7ff ff50 	bl	80013de <iis3dhhc_read_reg>
 800153e:	0003      	movs	r3, r0
 8001540:	60fb      	str	r3, [r7, #12]
  if(ret == 0){
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d118      	bne.n	800157a <iis3dhhc_offset_temp_comp_set+0x58>
    ctrl_reg4.off_tcomp_en = val;
 8001548:	1cfb      	adds	r3, r7, #3
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2201      	movs	r2, #1
 800154e:	4013      	ands	r3, r2
 8001550:	b2da      	uxtb	r2, r3
 8001552:	2408      	movs	r4, #8
 8001554:	193b      	adds	r3, r7, r4
 8001556:	2101      	movs	r1, #1
 8001558:	400a      	ands	r2, r1
 800155a:	0010      	movs	r0, r2
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	2101      	movs	r1, #1
 8001560:	438a      	bics	r2, r1
 8001562:	1c11      	adds	r1, r2, #0
 8001564:	1c02      	adds	r2, r0, #0
 8001566:	430a      	orrs	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
    ret = iis3dhhc_write_reg(ctx, IIS3DHHC_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 800156a:	193a      	adds	r2, r7, r4
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	2301      	movs	r3, #1
 8001570:	2123      	movs	r1, #35	; 0x23
 8001572:	f7ff ff55 	bl	8001420 <iis3dhhc_write_reg>
 8001576:	0003      	movs	r3, r0
 8001578:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	b005      	add	sp, #20
 8001582:	bd90      	pop	{r4, r7, pc}

08001584 <iis3dhhc_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dhhc_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dhhc_read_reg(ctx, IIS3DHHC_OUT_X_L_XL, buff, 6);
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	2306      	movs	r3, #6
 8001594:	2128      	movs	r1, #40	; 0x28
 8001596:	f7ff ff22 	bl	80013de <iis3dhhc_read_reg>
 800159a:	0003      	movs	r3, r0
 800159c:	60fb      	str	r3, [r7, #12]
  return ret;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b004      	add	sp, #16
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <iis3dhhc_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dhhc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  //ret = iis3dhhc_read_reg(ctx, 0x00U, buff, 1);
  ret = iis3dhhc_read_reg(ctx, IIS3DHHC_WHO_AM_I, buff, 1);
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	2301      	movs	r3, #1
 80015b8:	210f      	movs	r1, #15
 80015ba:	f7ff ff10 	bl	80013de <iis3dhhc_read_reg>
 80015be:	0003      	movs	r3, r0
 80015c0:	60fb      	str	r3, [r7, #12]
  return ret;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b004      	add	sp, #16
 80015ca:	bd80      	pop	{r7, pc}

080015cc <iis3dhhc_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL_REG1.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dhhc_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	000a      	movs	r2, r1
 80015d6:	1cfb      	adds	r3, r7, #3
 80015d8:	701a      	strb	r2, [r3, #0]
  iis3dhhc_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis3dhhc_read_reg(ctx, IIS3DHHC_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80015da:	2308      	movs	r3, #8
 80015dc:	18fa      	adds	r2, r7, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	2301      	movs	r3, #1
 80015e2:	2120      	movs	r1, #32
 80015e4:	f7ff fefb 	bl	80013de <iis3dhhc_read_reg>
 80015e8:	0003      	movs	r3, r0
 80015ea:	60fb      	str	r3, [r7, #12]
  if(ret == 0){
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d118      	bne.n	8001624 <iis3dhhc_reset_set+0x58>
    ctrl_reg1.sw_reset = val;
 80015f2:	1cfb      	adds	r3, r7, #3
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4013      	ands	r3, r2
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	2408      	movs	r4, #8
 80015fe:	193b      	adds	r3, r7, r4
 8001600:	2101      	movs	r1, #1
 8001602:	400a      	ands	r2, r1
 8001604:	0090      	lsls	r0, r2, #2
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	2104      	movs	r1, #4
 800160a:	438a      	bics	r2, r1
 800160c:	1c11      	adds	r1, r2, #0
 800160e:	1c02      	adds	r2, r0, #0
 8001610:	430a      	orrs	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
    ret = iis3dhhc_write_reg(ctx, IIS3DHHC_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001614:	193a      	adds	r2, r7, r4
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	2301      	movs	r3, #1
 800161a:	2120      	movs	r1, #32
 800161c:	f7ff ff00 	bl	8001420 <iis3dhhc_write_reg>
 8001620:	0003      	movs	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001624:	68fb      	ldr	r3, [r7, #12]
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b005      	add	sp, #20
 800162c:	bd90      	pop	{r4, r7, pc}

0800162e <iis3dhhc_reset_get>:
  * @param  val    Get the values of sw_reset in reg CTRL_REG1.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dhhc_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800162e:	b590      	push	{r4, r7, lr}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  iis3dhhc_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis3dhhc_read_reg(ctx, IIS3DHHC_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001638:	2408      	movs	r4, #8
 800163a:	193a      	adds	r2, r7, r4
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	2301      	movs	r3, #1
 8001640:	2120      	movs	r1, #32
 8001642:	f7ff fecc 	bl	80013de <iis3dhhc_read_reg>
 8001646:	0003      	movs	r3, r0
 8001648:	60fb      	str	r3, [r7, #12]
  *val = ctrl_reg1.sw_reset;
 800164a:	193b      	adds	r3, r7, r4
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	075b      	lsls	r3, r3, #29
 8001650:	0fdb      	lsrs	r3, r3, #31
 8001652:	b2db      	uxtb	r3, r3
 8001654:	001a      	movs	r2, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	701a      	strb	r2, [r3, #0]

  return ret;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b005      	add	sp, #20
 8001662:	bd90      	pop	{r4, r7, pc}

08001664 <iis3dhhc_filter_config_set>:
  * @param  val    Change the values of dsp in reg CTRL_REG4
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dhhc_filter_config_set(stmdev_ctx_t *ctx, iis3dhhc_dsp_t val)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	000a      	movs	r2, r1
 800166e:	1cfb      	adds	r3, r7, #3
 8001670:	701a      	strb	r2, [r3, #0]
  iis3dhhc_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis3dhhc_read_reg(ctx, IIS3DHHC_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8001672:	2308      	movs	r3, #8
 8001674:	18fa      	adds	r2, r7, r3
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	2301      	movs	r3, #1
 800167a:	2123      	movs	r1, #35	; 0x23
 800167c:	f7ff feaf 	bl	80013de <iis3dhhc_read_reg>
 8001680:	0003      	movs	r3, r0
 8001682:	60fb      	str	r3, [r7, #12]
  if(ret == 0){
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d116      	bne.n	80016b8 <iis3dhhc_filter_config_set+0x54>
    ctrl_reg4.dsp = (uint8_t)val;
 800168a:	1cfb      	adds	r3, r7, #3
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2203      	movs	r2, #3
 8001690:	4013      	ands	r3, r2
 8001692:	b2da      	uxtb	r2, r3
 8001694:	2408      	movs	r4, #8
 8001696:	193b      	adds	r3, r7, r4
 8001698:	0190      	lsls	r0, r2, #6
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	213f      	movs	r1, #63	; 0x3f
 800169e:	400a      	ands	r2, r1
 80016a0:	1c11      	adds	r1, r2, #0
 80016a2:	1c02      	adds	r2, r0, #0
 80016a4:	430a      	orrs	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]
    ret = iis3dhhc_write_reg(ctx, IIS3DHHC_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 80016a8:	193a      	adds	r2, r7, r4
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	2301      	movs	r3, #1
 80016ae:	2123      	movs	r1, #35	; 0x23
 80016b0:	f7ff feb6 	bl	8001420 <iis3dhhc_write_reg>
 80016b4:	0003      	movs	r3, r0
 80016b6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016b8:	68fb      	ldr	r3, [r7, #12]
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b005      	add	sp, #20
 80016c0:	bd90      	pop	{r4, r7, pc}

080016c2 <iis3dhhc_status_get>:
  * @param  val    Get registers STATUS.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dhhc_status_get(stmdev_ctx_t *ctx, iis3dhhc_status_t *val)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dhhc_read_reg(ctx, IIS3DHHC_STATUS, (uint8_t*) val, 1);
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	2301      	movs	r3, #1
 80016d2:	2127      	movs	r1, #39	; 0x27
 80016d4:	f7ff fe83 	bl	80013de <iis3dhhc_read_reg>
 80016d8:	0003      	movs	r3, r0
 80016da:	60fb      	str	r3, [r7, #12]
  return ret;
 80016dc:	68fb      	ldr	r3, [r7, #12]
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b004      	add	sp, #16
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <l2g2is_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t l2g2is_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80016e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e8:	b087      	sub	sp, #28
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	0008      	movs	r0, r1
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	0019      	movs	r1, r3
 80016f4:	260b      	movs	r6, #11
 80016f6:	19bb      	adds	r3, r7, r6
 80016f8:	1c02      	adds	r2, r0, #0
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	2508      	movs	r5, #8
 80016fe:	197b      	adds	r3, r7, r5
 8001700:	1c0a      	adds	r2, r1, #0
 8001702:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685c      	ldr	r4, [r3, #4]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6898      	ldr	r0, [r3, #8]
 800170c:	197b      	adds	r3, r7, r5
 800170e:	881d      	ldrh	r5, [r3, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	19bb      	adds	r3, r7, r6
 8001714:	7819      	ldrb	r1, [r3, #0]
 8001716:	002b      	movs	r3, r5
 8001718:	47a0      	blx	r4
 800171a:	0003      	movs	r3, r0
 800171c:	617b      	str	r3, [r7, #20]
  return ret;
 800171e:	697b      	ldr	r3, [r7, #20]
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b007      	add	sp, #28
 8001726:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001728 <l2g2is_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t l2g2is_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8001728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	0008      	movs	r0, r1
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	0019      	movs	r1, r3
 8001736:	260b      	movs	r6, #11
 8001738:	19bb      	adds	r3, r7, r6
 800173a:	1c02      	adds	r2, r0, #0
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	2508      	movs	r5, #8
 8001740:	197b      	adds	r3, r7, r5
 8001742:	1c0a      	adds	r2, r1, #0
 8001744:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681c      	ldr	r4, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6898      	ldr	r0, [r3, #8]
 800174e:	197b      	adds	r3, r7, r5
 8001750:	881d      	ldrh	r5, [r3, #0]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	19bb      	adds	r3, r7, r6
 8001756:	7819      	ldrb	r1, [r3, #0]
 8001758:	002b      	movs	r3, r5
 800175a:	47a0      	blx	r4
 800175c:	0003      	movs	r3, r0
 800175e:	617b      	str	r3, [r7, #20]
  return ret;
 8001760:	697b      	ldr	r3, [r7, #20]
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b007      	add	sp, #28
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800176a <l2g2is_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t l2g2is_gy_data_rate_set(stmdev_ctx_t *ctx,
                                  l2g2is_gy_data_rate_t val)
{
 800176a:	b590      	push	{r4, r7, lr}
 800176c:	b085      	sub	sp, #20
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	000a      	movs	r2, r1
 8001774:	1cfb      	adds	r3, r7, #3
 8001776:	701a      	strb	r2, [r3, #0]
  l2g2is_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = l2g2is_read_reg(ctx, L2G2IS_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001778:	2308      	movs	r3, #8
 800177a:	18fa      	adds	r2, r7, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	2301      	movs	r3, #1
 8001780:	210b      	movs	r1, #11
 8001782:	f7ff ffb0 	bl	80016e6 <l2g2is_read_reg>
 8001786:	0003      	movs	r3, r0
 8001788:	60fb      	str	r3, [r7, #12]
  if(ret == 0){
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d118      	bne.n	80017c2 <l2g2is_gy_data_rate_set+0x58>
    ctrl_reg1.pw = (uint8_t)val;
 8001790:	1cfb      	adds	r3, r7, #3
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2203      	movs	r2, #3
 8001796:	4013      	ands	r3, r2
 8001798:	b2da      	uxtb	r2, r3
 800179a:	2408      	movs	r4, #8
 800179c:	193b      	adds	r3, r7, r4
 800179e:	2103      	movs	r1, #3
 80017a0:	400a      	ands	r2, r1
 80017a2:	0010      	movs	r0, r2
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	2103      	movs	r1, #3
 80017a8:	438a      	bics	r2, r1
 80017aa:	1c11      	adds	r1, r2, #0
 80017ac:	1c02      	adds	r2, r0, #0
 80017ae:	430a      	orrs	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
    ret = l2g2is_write_reg(ctx, L2G2IS_CTRL_REG1,
 80017b2:	193a      	adds	r2, r7, r4
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	2301      	movs	r3, #1
 80017b8:	210b      	movs	r1, #11
 80017ba:	f7ff ffb5 	bl	8001728 <l2g2is_write_reg>
 80017be:	0003      	movs	r3, r0
 80017c0:	60fb      	str	r3, [r7, #12]
                             (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b005      	add	sp, #20
 80017ca:	bd90      	pop	{r4, r7, pc}

080017cc <l2g2is_angular_rate_offset_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t l2g2is_angular_rate_offset_set(stmdev_ctx_t *ctx,
                                         l2g2is_off_t val)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	003b      	movs	r3, r7
 80017d6:	8019      	strh	r1, [r3, #0]
  l2g2is_off_x_t off_x;
  l2g2is_off_y_t off_y;
  int32_t ret;

  ret = l2g2is_read_reg(ctx, L2G2IS_OFF_X, (uint8_t*)&off_x, 1);
 80017d8:	2310      	movs	r3, #16
 80017da:	18fa      	adds	r2, r7, r3
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	2301      	movs	r3, #1
 80017e0:	2111      	movs	r1, #17
 80017e2:	f7ff ff80 	bl	80016e6 <l2g2is_read_reg>
 80017e6:	0003      	movs	r3, r0
 80017e8:	617b      	str	r3, [r7, #20]
  if(ret == 0) {
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d110      	bne.n	8001812 <l2g2is_angular_rate_offset_set+0x46>
    off_x.offx  = val.offx;
 80017f0:	003b      	movs	r3, r7
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	065b      	lsls	r3, r3, #25
 80017f6:	0e5b      	lsrs	r3, r3, #25
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	001a      	movs	r2, r3
 80017fc:	2110      	movs	r1, #16
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	701a      	strb	r2, [r3, #0]
    ret = l2g2is_write_reg(ctx, L2G2IS_OFF_X, (uint8_t*)&off_x, 1);
 8001802:	187a      	adds	r2, r7, r1
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	2301      	movs	r3, #1
 8001808:	2111      	movs	r1, #17
 800180a:	f7ff ff8d 	bl	8001728 <l2g2is_write_reg>
 800180e:	0003      	movs	r3, r0
 8001810:	617b      	str	r3, [r7, #20]
  }
  if(ret == 0) {
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d108      	bne.n	800182a <l2g2is_angular_rate_offset_set+0x5e>
    ret = l2g2is_read_reg(ctx, L2G2IS_OFF_Y, (uint8_t*)&off_y, 1);
 8001818:	230c      	movs	r3, #12
 800181a:	18fa      	adds	r2, r7, r3
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	2301      	movs	r3, #1
 8001820:	2112      	movs	r1, #18
 8001822:	f7ff ff60 	bl	80016e6 <l2g2is_read_reg>
 8001826:	0003      	movs	r3, r0
 8001828:	617b      	str	r3, [r7, #20]
  }
  if(ret == 0) {
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d110      	bne.n	8001852 <l2g2is_angular_rate_offset_set+0x86>
    off_y.offy  = val.offy;
 8001830:	003b      	movs	r3, r7
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	065b      	lsls	r3, r3, #25
 8001836:	0e5b      	lsrs	r3, r3, #25
 8001838:	b2db      	uxtb	r3, r3
 800183a:	001a      	movs	r2, r3
 800183c:	210c      	movs	r1, #12
 800183e:	187b      	adds	r3, r7, r1
 8001840:	701a      	strb	r2, [r3, #0]
    ret = l2g2is_write_reg(ctx, L2G2IS_OFF_Y, (uint8_t*)&off_y, 1);
 8001842:	187a      	adds	r2, r7, r1
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	2301      	movs	r3, #1
 8001848:	2112      	movs	r1, #18
 800184a:	f7ff ff6d 	bl	8001728 <l2g2is_write_reg>
 800184e:	0003      	movs	r3, r0
 8001850:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001852:	697b      	ldr	r3, [r7, #20]
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b006      	add	sp, #24
 800185a:	bd80      	pop	{r7, pc}

0800185c <l2g2is_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t l2g2is_gy_full_scale_set(stmdev_ctx_t *ctx,
                                   l2g2is_gy_fs_t val)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	000a      	movs	r2, r1
 8001866:	1cfb      	adds	r3, r7, #3
 8001868:	701a      	strb	r2, [r3, #0]
  l2g2is_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = l2g2is_read_reg(ctx, L2G2IS_CTRL_REG4,
 800186a:	2308      	movs	r3, #8
 800186c:	18fa      	adds	r2, r7, r3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	2301      	movs	r3, #1
 8001872:	211f      	movs	r1, #31
 8001874:	f7ff ff37 	bl	80016e6 <l2g2is_read_reg>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
                          (uint8_t*)&ctrl_reg4, 1);
  if(ret == 0){
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <l2g2is_gy_full_scale_set+0x58>
    ctrl_reg4.fs = (uint8_t)val;
 8001882:	1cfb      	adds	r3, r7, #3
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	4013      	ands	r3, r2
 800188a:	b2da      	uxtb	r2, r3
 800188c:	2408      	movs	r4, #8
 800188e:	193b      	adds	r3, r7, r4
 8001890:	2101      	movs	r1, #1
 8001892:	400a      	ands	r2, r1
 8001894:	00d0      	lsls	r0, r2, #3
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	2108      	movs	r1, #8
 800189a:	438a      	bics	r2, r1
 800189c:	1c11      	adds	r1, r2, #0
 800189e:	1c02      	adds	r2, r0, #0
 80018a0:	430a      	orrs	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
    ret = l2g2is_write_reg(ctx, L2G2IS_CTRL_REG4,
 80018a4:	193a      	adds	r2, r7, r4
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	2301      	movs	r3, #1
 80018aa:	211f      	movs	r1, #31
 80018ac:	f7ff ff3c 	bl	8001728 <l2g2is_write_reg>
 80018b0:	0003      	movs	r3, r0
 80018b2:	60fb      	str	r3, [r7, #12]
                             (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
 80018b4:	68fb      	ldr	r3, [r7, #12]
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b005      	add	sp, #20
 80018bc:	bd90      	pop	{r4, r7, pc}

080018be <l2g2is_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t l2g2is_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = l2g2is_read_reg(ctx, L2G2IS_OUT_X_L, buff, 4);
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	2304      	movs	r3, #4
 80018ce:	2103      	movs	r1, #3
 80018d0:	f7ff ff09 	bl	80016e6 <l2g2is_read_reg>
 80018d4:	0003      	movs	r3, r0
 80018d6:	60fb      	str	r3, [r7, #12]
  return ret;
 80018d8:	68fb      	ldr	r3, [r7, #12]
}
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	b004      	add	sp, #16
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <l2g2is_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t l2g2is_dev_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = l2g2is_read_reg(ctx, L2G2IS_WHO_AM_I, buff, 1);
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	2301      	movs	r3, #1
 80018f2:	2100      	movs	r1, #0
 80018f4:	f7ff fef7 	bl	80016e6 <l2g2is_read_reg>
 80018f8:	0003      	movs	r3, r0
 80018fa:	60fb      	str	r3, [r7, #12]
  return ret;
 80018fc:	68fb      	ldr	r3, [r7, #12]
}
 80018fe:	0018      	movs	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	b004      	add	sp, #16
 8001904:	bd80      	pop	{r7, pc}

08001906 <l2g2is_dev_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t l2g2is_dev_status_get(stmdev_ctx_t *ctx,
                                l2g2is_dev_status_t *val)
{
 8001906:	b590      	push	{r4, r7, lr}
 8001908:	b085      	sub	sp, #20
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  l2g2is_status_reg_t status_reg;
  int32_t ret;

  ret = l2g2is_read_reg(ctx, L2G2IS_STATUS_REG,
 8001910:	2408      	movs	r4, #8
 8001912:	193a      	adds	r2, r7, r4
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	2301      	movs	r3, #1
 8001918:	2109      	movs	r1, #9
 800191a:	f7ff fee4 	bl	80016e6 <l2g2is_read_reg>
 800191e:	0003      	movs	r3, r0
 8001920:	60fb      	str	r3, [r7, #12]
                          (uint8_t*)&status_reg, 1);
  val->xyda = status_reg.xyda;
 8001922:	193b      	adds	r3, r7, r4
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	071b      	lsls	r3, r3, #28
 8001928:	0fdb      	lsrs	r3, r3, #31
 800192a:	b2da      	uxtb	r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2101      	movs	r1, #1
 8001930:	400a      	ands	r2, r1
 8001932:	0010      	movs	r0, r2
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	2101      	movs	r1, #1
 8001938:	438a      	bics	r2, r1
 800193a:	1c11      	adds	r1, r2, #0
 800193c:	1c02      	adds	r2, r0, #0
 800193e:	430a      	orrs	r2, r1
 8001940:	701a      	strb	r2, [r3, #0]

  return ret;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b005      	add	sp, #20
 800194a:	bd90      	pop	{r4, r7, pc}

0800194c <l2g2is_dev_reset_set>:
  * @param  val    Change the values of sw_rst in reg CTRL_REG2.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t l2g2is_dev_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	000a      	movs	r2, r1
 8001956:	1cfb      	adds	r3, r7, #3
 8001958:	701a      	strb	r2, [r3, #0]
  l2g2is_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = l2g2is_read_reg(ctx, L2G2IS_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800195a:	2308      	movs	r3, #8
 800195c:	18fa      	adds	r2, r7, r3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	2301      	movs	r3, #1
 8001962:	210c      	movs	r1, #12
 8001964:	f7ff febf 	bl	80016e6 <l2g2is_read_reg>
 8001968:	0003      	movs	r3, r0
 800196a:	60fb      	str	r3, [r7, #12]
  if(ret == 0){
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d118      	bne.n	80019a4 <l2g2is_dev_reset_set+0x58>
    ctrl_reg2.sw_rst = (uint8_t)val;
 8001972:	1cfb      	adds	r3, r7, #3
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	b2da      	uxtb	r2, r3
 800197c:	2408      	movs	r4, #8
 800197e:	193b      	adds	r3, r7, r4
 8001980:	2101      	movs	r1, #1
 8001982:	400a      	ands	r2, r1
 8001984:	1890      	adds	r0, r2, r2
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	2102      	movs	r1, #2
 800198a:	438a      	bics	r2, r1
 800198c:	1c11      	adds	r1, r2, #0
 800198e:	1c02      	adds	r2, r0, #0
 8001990:	430a      	orrs	r2, r1
 8001992:	701a      	strb	r2, [r3, #0]
    ret = l2g2is_write_reg(ctx, L2G2IS_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8001994:	193a      	adds	r2, r7, r4
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	2301      	movs	r3, #1
 800199a:	210c      	movs	r1, #12
 800199c:	f7ff fec4 	bl	8001728 <l2g2is_write_reg>
 80019a0:	0003      	movs	r3, r0
 80019a2:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80019a4:	68fb      	ldr	r3, [r7, #12]
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b005      	add	sp, #20
 80019ac:	bd90      	pop	{r4, r7, pc}

080019ae <l2g2is_dev_reset_get>:
  * @param  val    Get the values of sw_rst in reg CTRL_REG2.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t l2g2is_dev_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80019ae:	b590      	push	{r4, r7, lr}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
  l2g2is_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = l2g2is_read_reg(ctx, L2G2IS_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80019b8:	2408      	movs	r4, #8
 80019ba:	193a      	adds	r2, r7, r4
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	2301      	movs	r3, #1
 80019c0:	210c      	movs	r1, #12
 80019c2:	f7ff fe90 	bl	80016e6 <l2g2is_read_reg>
 80019c6:	0003      	movs	r3, r0
 80019c8:	60fb      	str	r3, [r7, #12]
  *val = (uint8_t)ctrl_reg2.sw_rst;
 80019ca:	193b      	adds	r3, r7, r4
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	079b      	lsls	r3, r3, #30
 80019d0:	0fdb      	lsrs	r3, r3, #31
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	001a      	movs	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	701a      	strb	r2, [r3, #0]

  return ret;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	b005      	add	sp, #20
 80019e2:	bd90      	pop	{r4, r7, pc}

080019e4 <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80019e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	0008      	movs	r0, r1
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	0019      	movs	r1, r3
 80019f2:	260b      	movs	r6, #11
 80019f4:	19bb      	adds	r3, r7, r6
 80019f6:	1c02      	adds	r2, r0, #0
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	2508      	movs	r5, #8
 80019fc:	197b      	adds	r3, r7, r5
 80019fe:	1c0a      	adds	r2, r1, #0
 8001a00:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	685c      	ldr	r4, [r3, #4]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6898      	ldr	r0, [r3, #8]
 8001a0a:	197b      	adds	r3, r7, r5
 8001a0c:	881d      	ldrh	r5, [r3, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	19bb      	adds	r3, r7, r6
 8001a12:	7819      	ldrb	r1, [r3, #0]
 8001a14:	002b      	movs	r3, r5
 8001a16:	47a0      	blx	r4
 8001a18:	0003      	movs	r3, r0
 8001a1a:	617b      	str	r3, [r7, #20]
  return ret;
 8001a1c:	697b      	ldr	r3, [r7, #20]
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b007      	add	sp, #28
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a26 <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8001a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a28:	b087      	sub	sp, #28
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	0008      	movs	r0, r1
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	0019      	movs	r1, r3
 8001a34:	260b      	movs	r6, #11
 8001a36:	19bb      	adds	r3, r7, r6
 8001a38:	1c02      	adds	r2, r0, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
 8001a3c:	2508      	movs	r5, #8
 8001a3e:	197b      	adds	r3, r7, r5
 8001a40:	1c0a      	adds	r2, r1, #0
 8001a42:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681c      	ldr	r4, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6898      	ldr	r0, [r3, #8]
 8001a4c:	197b      	adds	r3, r7, r5
 8001a4e:	881d      	ldrh	r5, [r3, #0]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	19bb      	adds	r3, r7, r6
 8001a54:	7819      	ldrb	r1, [r3, #0]
 8001a56:	002b      	movs	r3, r5
 8001a58:	47a0      	blx	r4
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	617b      	str	r3, [r7, #20]
  return ret;
 8001a5e:	697b      	ldr	r3, [r7, #20]
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b007      	add	sp, #28
 8001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a68 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	000a      	movs	r2, r1
 8001a72:	1cfb      	adds	r3, r7, #3
 8001a74:	701a      	strb	r2, [r3, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001a76:	2308      	movs	r3, #8
 8001a78:	18fa      	adds	r2, r7, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	2110      	movs	r1, #16
 8001a80:	f7ff ffb0 	bl	80019e4 <lps22hb_read_reg>
 8001a84:	0003      	movs	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]
  if(ret == 0){
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d118      	bne.n	8001ac0 <lps22hb_low_pass_filter_mode_set+0x58>
    ctrl_reg1.lpfp = (uint8_t)val;
 8001a8e:	1cfb      	adds	r3, r7, #3
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2203      	movs	r2, #3
 8001a94:	4013      	ands	r3, r2
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	2408      	movs	r4, #8
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	2103      	movs	r1, #3
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	0090      	lsls	r0, r2, #2
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	210c      	movs	r1, #12
 8001aa6:	438a      	bics	r2, r1
 8001aa8:	1c11      	adds	r1, r2, #0
 8001aaa:	1c02      	adds	r2, r0, #0
 8001aac:	430a      	orrs	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001ab0:	193a      	adds	r2, r7, r4
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	f7ff ffb5 	bl	8001a26 <lps22hb_write_reg>
 8001abc:	0003      	movs	r3, r0
 8001abe:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b005      	add	sp, #20
 8001ac8:	bd90      	pop	{r4, r7, pc}

08001aca <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8001aca:	b590      	push	{r4, r7, lr}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	000a      	movs	r2, r1
 8001ad4:	1cfb      	adds	r3, r7, #3
 8001ad6:	701a      	strb	r2, [r3, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001ad8:	2308      	movs	r3, #8
 8001ada:	18fa      	adds	r2, r7, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	2110      	movs	r1, #16
 8001ae2:	f7ff ff7f 	bl	80019e4 <lps22hb_read_reg>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	60fb      	str	r3, [r7, #12]
  if(ret == 0){
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d118      	bne.n	8001b22 <lps22hb_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val;
 8001af0:	1cfb      	adds	r3, r7, #3
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2207      	movs	r2, #7
 8001af6:	4013      	ands	r3, r2
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	2408      	movs	r4, #8
 8001afc:	193b      	adds	r3, r7, r4
 8001afe:	2107      	movs	r1, #7
 8001b00:	400a      	ands	r2, r1
 8001b02:	0110      	lsls	r0, r2, #4
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	2170      	movs	r1, #112	; 0x70
 8001b08:	438a      	bics	r2, r1
 8001b0a:	1c11      	adds	r1, r2, #0
 8001b0c:	1c02      	adds	r2, r0, #0
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	701a      	strb	r2, [r3, #0]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001b12:	193a      	adds	r2, r7, r4
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	2301      	movs	r3, #1
 8001b18:	2110      	movs	r1, #16
 8001b1a:	f7ff ff84 	bl	8001a26 <lps22hb_write_reg>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b005      	add	sp, #20
 8001b2a:	bd90      	pop	{r4, r7, pc}

08001b2c <lps22hb_press_data_ready_get>:
  * @param  val    Change the values of p_da in reg STATUS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_press_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  lps22hb_status_t status;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t*)&status, 1);
 8001b36:	2408      	movs	r4, #8
 8001b38:	193a      	adds	r2, r7, r4
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	2127      	movs	r1, #39	; 0x27
 8001b40:	f7ff ff50 	bl	80019e4 <lps22hb_read_reg>
 8001b44:	0003      	movs	r3, r0
 8001b46:	60fb      	str	r3, [r7, #12]
  *val = status.p_da;
 8001b48:	193b      	adds	r3, r7, r4
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	07db      	lsls	r3, r3, #31
 8001b4e:	0fdb      	lsrs	r3, r3, #31
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	001a      	movs	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	701a      	strb	r2, [r3, #0]

  return ret;
 8001b58:	68fb      	ldr	r3, [r7, #12]
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b005      	add	sp, #20
 8001b60:	bd90      	pop	{r4, r7, pc}

08001b62 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	2303      	movs	r3, #3
 8001b72:	2128      	movs	r1, #40	; 0x28
 8001b74:	f7ff ff36 	bl	80019e4 <lps22hb_read_reg>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	60fb      	str	r3, [r7, #12]
  return ret;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b004      	add	sp, #16
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	2302      	movs	r3, #2
 8001b96:	212b      	movs	r1, #43	; 0x2b
 8001b98:	f7ff ff24 	bl	80019e4 <lps22hb_read_reg>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	60fb      	str	r3, [r7, #12]
  return ret;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b004      	add	sp, #16
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	210f      	movs	r1, #15
 8001bbc:	f7ff ff12 	bl	80019e4 <lps22hb_read_reg>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	60fb      	str	r3, [r7, #12]
  return ret;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b004      	add	sp, #16
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <lps22hb_reset_set>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001bce:	b590      	push	{r4, r7, lr}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	1cfb      	adds	r3, r7, #3
 8001bda:	701a      	strb	r2, [r3, #0]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8001bdc:	2308      	movs	r3, #8
 8001bde:	18fa      	adds	r2, r7, r3
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	2301      	movs	r3, #1
 8001be4:	2111      	movs	r1, #17
 8001be6:	f7ff fefd 	bl	80019e4 <lps22hb_read_reg>
 8001bea:	0003      	movs	r3, r0
 8001bec:	60fb      	str	r3, [r7, #12]
  if(ret == 0){
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d118      	bne.n	8001c26 <lps22hb_reset_set+0x58>
    ctrl_reg2.swreset = val;
 8001bf4:	1cfb      	adds	r3, r7, #3
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	2408      	movs	r4, #8
 8001c00:	193b      	adds	r3, r7, r4
 8001c02:	2101      	movs	r1, #1
 8001c04:	400a      	ands	r2, r1
 8001c06:	0090      	lsls	r0, r2, #2
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	438a      	bics	r2, r1
 8001c0e:	1c11      	adds	r1, r2, #0
 8001c10:	1c02      	adds	r2, r0, #0
 8001c12:	430a      	orrs	r2, r1
 8001c14:	701a      	strb	r2, [r3, #0]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8001c16:	193a      	adds	r2, r7, r4
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	2111      	movs	r1, #17
 8001c1e:	f7ff ff02 	bl	8001a26 <lps22hb_write_reg>
 8001c22:	0003      	movs	r3, r0
 8001c24:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b005      	add	sp, #20
 8001c2e:	bd90      	pop	{r4, r7, pc}

08001c30 <lps22hb_reset_get>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8001c3a:	2408      	movs	r4, #8
 8001c3c:	193a      	adds	r2, r7, r4
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	2301      	movs	r3, #1
 8001c42:	2111      	movs	r1, #17
 8001c44:	f7ff fece 	bl	80019e4 <lps22hb_read_reg>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	60fb      	str	r3, [r7, #12]
  *val = ctrl_reg2.swreset;
 8001c4c:	193b      	adds	r3, r7, r4
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	075b      	lsls	r3, r3, #29
 8001c52:	0fdb      	lsrs	r3, r3, #31
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	001a      	movs	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b005      	add	sp, #20
 8001c64:	bd90      	pop	{r4, r7, pc}

08001c66 <linear_interpolation>:
void get_data(void);
uint8_t make_giro_offset(stmdev_ctx_t *ctx,Giro_Off *giro);
void CAN_Config(void);

float linear_interpolation(lin_t *lin, int16_t x)
{
 8001c66:	b5b0      	push	{r4, r5, r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	000a      	movs	r2, r1
 8001c70:	1cbb      	adds	r3, r7, #2
 8001c72:	801a      	strh	r2, [r3, #0]
 return ((lin->y1 - lin->y0) * x +  ((lin->x1 * lin->y0) - (lin->x0 * lin->y1)))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	1c19      	adds	r1, r3, #0
 8001c7e:	1c10      	adds	r0, r2, #0
 8001c80:	f7fe fec4 	bl	8000a0c <__aeabi_fsub>
 8001c84:	1c03      	adds	r3, r0, #0
 8001c86:	1c1c      	adds	r4, r3, #0
 8001c88:	1cbb      	adds	r3, r7, #2
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	5e9b      	ldrsh	r3, [r3, r2]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff f8a0 	bl	8000dd4 <__aeabi_i2f>
 8001c94:	1c03      	adds	r3, r0, #0
 8001c96:	1c19      	adds	r1, r3, #0
 8001c98:	1c20      	adds	r0, r4, #0
 8001c9a:	f7fe fd85 	bl	80007a8 <__aeabi_fmul>
 8001c9e:	1c03      	adds	r3, r0, #0
 8001ca0:	1c1c      	adds	r4, r3, #0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	1c19      	adds	r1, r3, #0
 8001cac:	1c10      	adds	r0, r2, #0
 8001cae:	f7fe fd7b 	bl	80007a8 <__aeabi_fmul>
 8001cb2:	1c03      	adds	r3, r0, #0
 8001cb4:	1c1d      	adds	r5, r3, #0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	1c19      	adds	r1, r3, #0
 8001cc0:	1c10      	adds	r0, r2, #0
 8001cc2:	f7fe fd71 	bl	80007a8 <__aeabi_fmul>
 8001cc6:	1c03      	adds	r3, r0, #0
 8001cc8:	1c19      	adds	r1, r3, #0
 8001cca:	1c28      	adds	r0, r5, #0
 8001ccc:	f7fe fe9e 	bl	8000a0c <__aeabi_fsub>
 8001cd0:	1c03      	adds	r3, r0, #0
 8001cd2:	1c19      	adds	r1, r3, #0
 8001cd4:	1c20      	adds	r0, r4, #0
 8001cd6:	f7fe fabb 	bl	8000250 <__aeabi_fadd>
 8001cda:	1c03      	adds	r3, r0, #0
 8001cdc:	1c1c      	adds	r4, r3, #0
        / (lin->x1 - lin->x0);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	1c19      	adds	r1, r3, #0
 8001ce8:	1c10      	adds	r0, r2, #0
 8001cea:	f7fe fe8f 	bl	8000a0c <__aeabi_fsub>
 8001cee:	1c03      	adds	r3, r0, #0
 8001cf0:	1c19      	adds	r1, r3, #0
 8001cf2:	1c20      	adds	r0, r4, #0
 8001cf4:	f7fe fc46 	bl	8000584 <__aeabi_fdiv>
 8001cf8:	1c03      	adds	r3, r0, #0
}
 8001cfa:	1c18      	adds	r0, r3, #0
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d0a:	f001 fb5f 	bl	80033cc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0e:	f000 fa31 	bl	8002174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d12:	f000 fc71 	bl	80025f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d16:	f000 fac7 	bl	80022a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d1a:	f000 fb05 	bl	8002328 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001d1e:	f000 fb99 	bl	8002454 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001d22:	f000 fb3f 	bl	80023a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001d26:	f000 fbe9 	bl	80024fc <MX_TIM3_Init>
  MX_CAN_Init();
 8001d2a:	f000 fa85 	bl	8002238 <MX_CAN_Init>
  MX_TIM16_Init();
 8001d2e:	f000 fc3b 	bl	80025a8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config();
 8001d32:	f001 f907 	bl	8002f44 <CAN_Config>
  HAL_CAN_Start(&hcan);
 8001d36:	4bc1      	ldr	r3, [pc, #772]	; (800203c <main+0x338>)
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f001 fdbd 	bl	80038b8 <HAL_CAN_Start>

  HAL_Delay(100);
 8001d3e:	2064      	movs	r0, #100	; 0x64
 8001d40:	f001 fba8 	bl	8003494 <HAL_Delay>

	//RICONOSCIMENTO ID TRAMITE PONTICELLO
	if(HAL_GPIO_ReadPin(GPIOB,I0_Pin)){ID=ID|0x01;}
 8001d44:	4bbe      	ldr	r3, [pc, #760]	; (8002040 <main+0x33c>)
 8001d46:	2140      	movs	r1, #64	; 0x40
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f002 f921 	bl	8003f90 <HAL_GPIO_ReadPin>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d006      	beq.n	8001d60 <main+0x5c>
 8001d52:	4bbc      	ldr	r3, [pc, #752]	; (8002044 <main+0x340>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2201      	movs	r2, #1
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4bb9      	ldr	r3, [pc, #740]	; (8002044 <main+0x340>)
 8001d5e:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOB,I1_Pin)){ID=ID|0x02;}
 8001d60:	4bb7      	ldr	r3, [pc, #732]	; (8002040 <main+0x33c>)
 8001d62:	2120      	movs	r1, #32
 8001d64:	0018      	movs	r0, r3
 8001d66:	f002 f913 	bl	8003f90 <HAL_GPIO_ReadPin>
 8001d6a:	1e03      	subs	r3, r0, #0
 8001d6c:	d006      	beq.n	8001d7c <main+0x78>
 8001d6e:	4bb5      	ldr	r3, [pc, #724]	; (8002044 <main+0x340>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2202      	movs	r2, #2
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4bb2      	ldr	r3, [pc, #712]	; (8002044 <main+0x340>)
 8001d7a:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOB,I2_Pin)){ID=ID|0x04;}
 8001d7c:	4bb0      	ldr	r3, [pc, #704]	; (8002040 <main+0x33c>)
 8001d7e:	2110      	movs	r1, #16
 8001d80:	0018      	movs	r0, r3
 8001d82:	f002 f905 	bl	8003f90 <HAL_GPIO_ReadPin>
 8001d86:	1e03      	subs	r3, r0, #0
 8001d88:	d006      	beq.n	8001d98 <main+0x94>
 8001d8a:	4bae      	ldr	r3, [pc, #696]	; (8002044 <main+0x340>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2204      	movs	r2, #4
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	4bab      	ldr	r3, [pc, #684]	; (8002044 <main+0x340>)
 8001d96:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOB,I3_Pin)){ID=ID|0x08;}
 8001d98:	4ba9      	ldr	r3, [pc, #676]	; (8002040 <main+0x33c>)
 8001d9a:	2108      	movs	r1, #8
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f002 f8f7 	bl	8003f90 <HAL_GPIO_ReadPin>
 8001da2:	1e03      	subs	r3, r0, #0
 8001da4:	d006      	beq.n	8001db4 <main+0xb0>
 8001da6:	4ba7      	ldr	r3, [pc, #668]	; (8002044 <main+0x340>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2208      	movs	r2, #8
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4ba4      	ldr	r3, [pc, #656]	; (8002044 <main+0x340>)
 8001db2:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOA,I4_Pin)){ID=ID|0x10;}
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	021a      	lsls	r2, r3, #8
 8001db8:	2390      	movs	r3, #144	; 0x90
 8001dba:	05db      	lsls	r3, r3, #23
 8001dbc:	0011      	movs	r1, r2
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f002 f8e6 	bl	8003f90 <HAL_GPIO_ReadPin>
 8001dc4:	1e03      	subs	r3, r0, #0
 8001dc6:	d006      	beq.n	8001dd6 <main+0xd2>
 8001dc8:	4b9e      	ldr	r3, [pc, #632]	; (8002044 <main+0x340>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b9c      	ldr	r3, [pc, #624]	; (8002044 <main+0x340>)
 8001dd4:	701a      	strb	r2, [r3, #0]
	//OGNI ID VIENE TRASFORMATO IN UN RANGE DA 0 A 9 E SERVIRA' PER TEMPORIZARE L'INVIO
	if(ID>9)IDF=ID-10;
 8001dd6:	4b9b      	ldr	r3, [pc, #620]	; (8002044 <main+0x340>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b09      	cmp	r3, #9
 8001ddc:	d905      	bls.n	8001dea <main+0xe6>
 8001dde:	4b99      	ldr	r3, [pc, #612]	; (8002044 <main+0x340>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	3b0a      	subs	r3, #10
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b98      	ldr	r3, [pc, #608]	; (8002048 <main+0x344>)
 8001de8:	701a      	strb	r2, [r3, #0]
	if(ID>19)IDF=ID-20;
 8001dea:	4b96      	ldr	r3, [pc, #600]	; (8002044 <main+0x340>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b13      	cmp	r3, #19
 8001df0:	d905      	bls.n	8001dfe <main+0xfa>
 8001df2:	4b94      	ldr	r3, [pc, #592]	; (8002044 <main+0x340>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	3b14      	subs	r3, #20
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b93      	ldr	r3, [pc, #588]	; (8002048 <main+0x344>)
 8001dfc:	701a      	strb	r2, [r3, #0]
	//htim1.Init.Period = 1200+IDF*350;
	htim1.Init.Period=1200;
 8001dfe:	4b93      	ldr	r3, [pc, #588]	; (800204c <main+0x348>)
 8001e00:	2296      	movs	r2, #150	; 0x96
 8001e02:	00d2      	lsls	r2, r2, #3
 8001e04:	60da      	str	r2, [r3, #12]
	//TRASMISSIONE SPI DISABILITATA
	HAL_GPIO_WritePin(GPIOB, cs_1_Pin, GPIO_PIN_SET);
 8001e06:	4b8e      	ldr	r3, [pc, #568]	; (8002040 <main+0x33c>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f002 f8dc 	bl	8003fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, cs_2_Pin, GPIO_PIN_SET);
 8001e12:	4b8b      	ldr	r3, [pc, #556]	; (8002040 <main+0x33c>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	2102      	movs	r1, #2
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f002 f8d6 	bl	8003fca <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f001 fb38 	bl	8003494 <HAL_Delay>

	//DEFINIZIONE DEI DEVICE
	// Accelerometer
	dev_ctx_acc.write_reg = accelerometer_write;
 8001e24:	4b8a      	ldr	r3, [pc, #552]	; (8002050 <main+0x34c>)
 8001e26:	4a8b      	ldr	r2, [pc, #556]	; (8002054 <main+0x350>)
 8001e28:	601a      	str	r2, [r3, #0]
	dev_ctx_acc.read_reg = accelerometer_read;
 8001e2a:	4b89      	ldr	r3, [pc, #548]	; (8002050 <main+0x34c>)
 8001e2c:	4a8a      	ldr	r2, [pc, #552]	; (8002058 <main+0x354>)
 8001e2e:	605a      	str	r2, [r3, #4]
	dev_ctx_acc.handle = &hspi1;
 8001e30:	4b87      	ldr	r3, [pc, #540]	; (8002050 <main+0x34c>)
 8001e32:	4a8a      	ldr	r2, [pc, #552]	; (800205c <main+0x358>)
 8001e34:	609a      	str	r2, [r3, #8]
	// Gyroscope
	dev_ctx_gir.write_reg = gyroscope_write;
 8001e36:	4b8a      	ldr	r3, [pc, #552]	; (8002060 <main+0x35c>)
 8001e38:	4a8a      	ldr	r2, [pc, #552]	; (8002064 <main+0x360>)
 8001e3a:	601a      	str	r2, [r3, #0]
	dev_ctx_gir.read_reg = gyroscope_read;
 8001e3c:	4b88      	ldr	r3, [pc, #544]	; (8002060 <main+0x35c>)
 8001e3e:	4a8a      	ldr	r2, [pc, #552]	; (8002068 <main+0x364>)
 8001e40:	605a      	str	r2, [r3, #4]
	dev_ctx_gir.handle = &hspi1;
 8001e42:	4b87      	ldr	r3, [pc, #540]	; (8002060 <main+0x35c>)
 8001e44:	4a85      	ldr	r2, [pc, #532]	; (800205c <main+0x358>)
 8001e46:	609a      	str	r2, [r3, #8]
	// Humidity
	dev_ctx_hum.write_reg = humidity_write;
 8001e48:	4b88      	ldr	r3, [pc, #544]	; (800206c <main+0x368>)
 8001e4a:	4a89      	ldr	r2, [pc, #548]	; (8002070 <main+0x36c>)
 8001e4c:	601a      	str	r2, [r3, #0]
	dev_ctx_hum.read_reg = humidity_read;
 8001e4e:	4b87      	ldr	r3, [pc, #540]	; (800206c <main+0x368>)
 8001e50:	4a88      	ldr	r2, [pc, #544]	; (8002074 <main+0x370>)
 8001e52:	605a      	str	r2, [r3, #4]
	dev_ctx_hum.handle = &hi2c1;
 8001e54:	4b85      	ldr	r3, [pc, #532]	; (800206c <main+0x368>)
 8001e56:	4a88      	ldr	r2, [pc, #544]	; (8002078 <main+0x374>)
 8001e58:	609a      	str	r2, [r3, #8]
	// Barometer
	dev_ctx_bar.write_reg = barometer_write;
 8001e5a:	4b88      	ldr	r3, [pc, #544]	; (800207c <main+0x378>)
 8001e5c:	4a88      	ldr	r2, [pc, #544]	; (8002080 <main+0x37c>)
 8001e5e:	601a      	str	r2, [r3, #0]
	dev_ctx_bar.read_reg = barometer_read;
 8001e60:	4b86      	ldr	r3, [pc, #536]	; (800207c <main+0x378>)
 8001e62:	4a88      	ldr	r2, [pc, #544]	; (8002084 <main+0x380>)
 8001e64:	605a      	str	r2, [r3, #4]
	dev_ctx_bar.handle = &hi2c1;
 8001e66:	4b85      	ldr	r3, [pc, #532]	; (800207c <main+0x378>)
 8001e68:	4a83      	ldr	r2, [pc, #524]	; (8002078 <main+0x374>)
 8001e6a:	609a      	str	r2, [r3, #8]

	//INIZIALIZZAZIONE ACCELEROMETRO E VERIFICA DELLA CONNESSIONE AL BUS
	whoamI = 0;
 8001e6c:	4b86      	ldr	r3, [pc, #536]	; (8002088 <main+0x384>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
	timeStart=STR_MODE;//ATTIVO START PACCHETTI PRESSIONE E UMIDITA'
 8001e72:	4b86      	ldr	r3, [pc, #536]	; (800208c <main+0x388>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
	iis3dhhc_device_id_get(&dev_ctx_acc, &whoamI);
 8001e78:	4a83      	ldr	r2, [pc, #524]	; (8002088 <main+0x384>)
 8001e7a:	4b75      	ldr	r3, [pc, #468]	; (8002050 <main+0x34c>)
 8001e7c:	0011      	movs	r1, r2
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff fb92 	bl	80015a8 <iis3dhhc_device_id_get>
	while(timeStart>T_VALUE){// CONTROLLO SE E' POSSIBILE LA COMUNICAZIONE CON IL SENSORE
 8001e84:	e003      	b.n	8001e8e <main+0x18a>
		if(whoamI != IIS3DHHC_ID){
 8001e86:	4b80      	ldr	r3, [pc, #512]	; (8002088 <main+0x384>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b11      	cmp	r3, #17
 8001e8c:	d104      	bne.n	8001e98 <main+0x194>
	while(timeStart>T_VALUE){// CONTROLLO SE E' POSSIBILE LA COMUNICAZIONE CON IL SENSORE
 8001e8e:	4b7f      	ldr	r3, [pc, #508]	; (800208c <main+0x388>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d8f7      	bhi.n	8001e86 <main+0x182>
 8001e96:	e000      	b.n	8001e9a <main+0x196>
			break;
 8001e98:	46c0      	nop			; (mov r8, r8)
		}
	}
    if(timeStart>T_VALUE){
 8001e9a:	4b7c      	ldr	r3, [pc, #496]	; (800208c <main+0x388>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d906      	bls.n	8001eb0 <main+0x1ac>
    	Err=Err|ACC_ERR;
 8001ea2:	4b7b      	ldr	r3, [pc, #492]	; (8002090 <main+0x38c>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b78      	ldr	r3, [pc, #480]	; (8002090 <main+0x38c>)
 8001eae:	701a      	strb	r2, [r3, #0]
    }
	iis3dhhc_reset_set(&dev_ctx_acc, PROPERTY_ENABLE);//RIPRISTINO SETTAGGI DEFAULT
 8001eb0:	4b67      	ldr	r3, [pc, #412]	; (8002050 <main+0x34c>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff fb89 	bl	80015cc <iis3dhhc_reset_set>
	do{
	  iis3dhhc_reset_get(&dev_ctx_acc, &rst);
 8001eba:	4a76      	ldr	r2, [pc, #472]	; (8002094 <main+0x390>)
 8001ebc:	4b64      	ldr	r3, [pc, #400]	; (8002050 <main+0x34c>)
 8001ebe:	0011      	movs	r1, r2
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff fbb4 	bl	800162e <iis3dhhc_reset_get>
	}while (rst);
 8001ec6:	4b73      	ldr	r3, [pc, #460]	; (8002094 <main+0x390>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f5      	bne.n	8001eba <main+0x1b6>
	iis3dhhc_block_data_update_set(&dev_ctx_acc, PROPERTY_ENABLE);//ABLITAZIONE DATAUPDATE
 8001ece:	4b60      	ldr	r3, [pc, #384]	; (8002050 <main+0x34c>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7ff fac5 	bl	8001462 <iis3dhhc_block_data_update_set>
	iis3dhhc_data_rate_set(&dev_ctx_acc, IIS3DHHC_1kHz1);//SETTAGGIO FREQUENZA DI CAMPIONAMENTO
 8001ed8:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <main+0x34c>)
 8001eda:	2101      	movs	r1, #1
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff faf1 	bl	80014c4 <iis3dhhc_data_rate_set>
	iis3dhhc_filter_config_set(&dev_ctx_acc,3);//SETTAGGIO FILTRO FFR A 235HZ
 8001ee2:	4b5b      	ldr	r3, [pc, #364]	; (8002050 <main+0x34c>)
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7ff fbbc 	bl	8001664 <iis3dhhc_filter_config_set>
	iis3dhhc_offset_temp_comp_set(&dev_ctx_acc, PROPERTY_ENABLE);//ABLITIAZIONE COMPENSAZIONE TEMPERATURA
 8001eec:	4b58      	ldr	r3, [pc, #352]	; (8002050 <main+0x34c>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f7ff fb16 	bl	8001522 <iis3dhhc_offset_temp_comp_set>
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_ACC, GPIO_PIN_SET);*/



	// INIZIALIZZAZIONE GIROSCOPIO E VERIFICA DELLA CONNESSIONE AL BUS
	timeStart=0;
 8001ef6:	4b65      	ldr	r3, [pc, #404]	; (800208c <main+0x388>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
	l2g2is_dev_id_get(&dev_ctx_gir, &whoamI);
 8001efc:	4a62      	ldr	r2, [pc, #392]	; (8002088 <main+0x384>)
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <main+0x35c>)
 8001f00:	0011      	movs	r1, r2
 8001f02:	0018      	movs	r0, r3
 8001f04:	f7ff fced 	bl	80018e2 <l2g2is_dev_id_get>
	while(timeStart>T_VALUE){
 8001f08:	e003      	b.n	8001f12 <main+0x20e>
		if(whoamI == L2G2IS_ID){							// CONTROLLO SE E' POSSIBILE LA COMUNICAZIONE CON IL SENSORE
 8001f0a:	4b5f      	ldr	r3, [pc, #380]	; (8002088 <main+0x384>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2bd9      	cmp	r3, #217	; 0xd9
 8001f10:	d004      	beq.n	8001f1c <main+0x218>
	while(timeStart>T_VALUE){
 8001f12:	4b5e      	ldr	r3, [pc, #376]	; (800208c <main+0x388>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d8f7      	bhi.n	8001f0a <main+0x206>
 8001f1a:	e000      	b.n	8001f1e <main+0x21a>
			break;
 8001f1c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if(timeStart>T_VALUE){
 8001f1e:	4b5b      	ldr	r3, [pc, #364]	; (800208c <main+0x388>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d906      	bls.n	8001f34 <main+0x230>
	    Err=Err|GYR_ERR;
 8001f26:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <main+0x38c>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b57      	ldr	r3, [pc, #348]	; (8002090 <main+0x38c>)
 8001f32:	701a      	strb	r2, [r3, #0]
	}
	l2g2is_dev_reset_set(&dev_ctx_gir, PROPERTY_ENABLE);	// RIPRISTINO SETTAGGI DEFAULT
 8001f34:	4b4a      	ldr	r3, [pc, #296]	; (8002060 <main+0x35c>)
 8001f36:	2101      	movs	r1, #1
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff fd07 	bl	800194c <l2g2is_dev_reset_set>
	do{
		l2g2is_dev_reset_get(&dev_ctx_gir, &rst);
 8001f3e:	4a55      	ldr	r2, [pc, #340]	; (8002094 <main+0x390>)
 8001f40:	4b47      	ldr	r3, [pc, #284]	; (8002060 <main+0x35c>)
 8001f42:	0011      	movs	r1, r2
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7ff fd32 	bl	80019ae <l2g2is_dev_reset_get>
	}while (rst);
 8001f4a:	4b52      	ldr	r3, [pc, #328]	; (8002094 <main+0x390>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f5      	bne.n	8001f3e <main+0x23a>
	l2g2is_gy_full_scale_set(&dev_ctx_gir, L2G2IS_200dps);	// SETTAGGIO SCALA DI MISURA -200DPS +200DPS
 8001f52:	4b43      	ldr	r3, [pc, #268]	; (8002060 <main+0x35c>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7ff fc80 	bl	800185c <l2g2is_gy_full_scale_set>
    //l2g2is_gy_filter_lp_bandwidth_set(&dev_ctx, L2G2IS_LPF_BW_160Hz);//SETTAGGIO FILTRO PASSA BASSO
	//l2g2is_gy_filter_hp_bandwidth_set(&dev_ctx, L2G2IS_HPF_BYPASS);//SETTAGGIO FILTRO PASSA ALTO
	setOffset.offx = 0x00;		//SETTAGGIO OFFSET ASSE X
 8001f5c:	4b4e      	ldr	r3, [pc, #312]	; (8002098 <main+0x394>)
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	217f      	movs	r1, #127	; 0x7f
 8001f62:	438a      	bics	r2, r1
 8001f64:	701a      	strb	r2, [r3, #0]
	setOffset.offy = 0x00;		// SETTAGGIO OFFSET ASSE Y
 8001f66:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <main+0x394>)
 8001f68:	785a      	ldrb	r2, [r3, #1]
 8001f6a:	217f      	movs	r1, #127	; 0x7f
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	705a      	strb	r2, [r3, #1]
	l2g2is_angular_rate_offset_set(&dev_ctx_gir, setOffset);//SETTAGGIO OFFSET ANGULAR RATE
 8001f70:	4b49      	ldr	r3, [pc, #292]	; (8002098 <main+0x394>)
 8001f72:	483b      	ldr	r0, [pc, #236]	; (8002060 <main+0x35c>)
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	785b      	ldrb	r3, [r3, #1]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	0412      	lsls	r2, r2, #16
 8001f80:	0c12      	lsrs	r2, r2, #16
 8001f82:	0c1b      	lsrs	r3, r3, #16
 8001f84:	041b      	lsls	r3, r3, #16
 8001f86:	4313      	orrs	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	f7ff fc1f 	bl	80017cc <l2g2is_angular_rate_offset_set>
	l2g2is_gy_data_rate_set(&dev_ctx_gir, L2G2IS_GY_9k33Hz);//SETTAGGIO FREQUENZA DI CAMPIONAMENTO DEL SENSORE
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <main+0x35c>)
 8001f90:	2103      	movs	r1, #3
 8001f92:	0018      	movs	r0, r3
 8001f94:	f7ff fbe9 	bl	800176a <l2g2is_gy_data_rate_set>
    //Data.Responce_Time_millis=make_giro_offset(&dev_ctx_gir,&giro); OFFSET NON FUNZIONANTE



	// INIZIALIZZAZIONE BAROMETRO E VERIFICA DELLA CONNESSIONE AL BUS
	whoamI=0;
 8001f98:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <main+0x384>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
	timeStart=0;
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <main+0x388>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
	lps22hb_device_id_get(&dev_ctx_bar,&whoamI);
 8001fa4:	4a38      	ldr	r2, [pc, #224]	; (8002088 <main+0x384>)
 8001fa6:	4b35      	ldr	r3, [pc, #212]	; (800207c <main+0x378>)
 8001fa8:	0011      	movs	r1, r2
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7ff fdfd 	bl	8001baa <lps22hb_device_id_get>
    while(timeStart>T_VALUE){
 8001fb0:	e003      	b.n	8001fba <main+0x2b6>
		if( whoamI == LPS22HB_ID ){					// CONTROLLO SE E' POSSIBILE LA COMUNICAZIONE CON IL SENSORE
 8001fb2:	4b35      	ldr	r3, [pc, #212]	; (8002088 <main+0x384>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2bb1      	cmp	r3, #177	; 0xb1
 8001fb8:	d004      	beq.n	8001fc4 <main+0x2c0>
    while(timeStart>T_VALUE){
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <main+0x388>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d8f7      	bhi.n	8001fb2 <main+0x2ae>
 8001fc2:	e000      	b.n	8001fc6 <main+0x2c2>
			break;
 8001fc4:	46c0      	nop			; (mov r8, r8)
		}
	}
	if(timeStart>T_VALUE){
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <main+0x388>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d906      	bls.n	8001fdc <main+0x2d8>
		Err=Err|PRE_ERR;
 8001fce:	4b30      	ldr	r3, [pc, #192]	; (8002090 <main+0x38c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <main+0x38c>)
 8001fda:	701a      	strb	r2, [r3, #0]
	}
	lps22hb_reset_set(&dev_ctx_bar, PROPERTY_ENABLE);// RIPRISTINO SETTAGGI DEFAULT
 8001fdc:	4b27      	ldr	r3, [pc, #156]	; (800207c <main+0x378>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7ff fdf4 	bl	8001bce <lps22hb_reset_set>
	do{
		lps22hb_reset_get(&dev_ctx_bar, &rst_bar);
 8001fe6:	4a2d      	ldr	r2, [pc, #180]	; (800209c <main+0x398>)
 8001fe8:	4b24      	ldr	r3, [pc, #144]	; (800207c <main+0x378>)
 8001fea:	0011      	movs	r1, r2
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff fe1f 	bl	8001c30 <lps22hb_reset_get>
	} while(rst_bar);
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <main+0x398>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f5      	bne.n	8001fe6 <main+0x2e2>
	//lps22hb_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);//ABLITAZIONE DATAUPDATE
	lps22hb_low_pass_filter_mode_set(&dev_ctx_bar, LPS22HB_LPF_ODR_DIV_2);//SETTAGGIO LOW PASS FILTER
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <main+0x378>)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7ff fd32 	bl	8001a68 <lps22hb_low_pass_filter_mode_set>
	//lps22hb_drdy_on_int_set(&dev_ctx, PROPERTY_ENABLE);//INTERRUPT FOR DATA READY INT_DRDY
	lps22hb_data_rate_set(&dev_ctx_bar, LPS22HB_ODR_10_Hz);//SETTAGGIO FREQUENZA DI CAMPIONAMENTO DEL SENSORE
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <main+0x378>)
 8002006:	2102      	movs	r1, #2
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff fd5e 	bl	8001aca <lps22hb_data_rate_set>




	// INIZIALIZZAZIONE SENSORE DI UMIDITA' E VERIFICA DELLA CONNESSIONE AL BUS
	whoamI = 0;
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <main+0x384>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
	timeStart=0;
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <main+0x388>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
	hts221_device_id_get(&dev_ctx_hum, &whoamI);
 800201a:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <main+0x384>)
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <main+0x368>)
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff f935 	bl	8001290 <hts221_device_id_get>
	while(timeStart>T_VALUE){
 8002026:	e003      	b.n	8002030 <main+0x32c>
		if ( whoamI == HTS221_ID ){		// CONTROLLO SE E' POSSIBILE LA COMUNICAZIONE CON IL SENSORE
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <main+0x384>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2bbc      	cmp	r3, #188	; 0xbc
 800202e:	d037      	beq.n	80020a0 <main+0x39c>
	while(timeStart>T_VALUE){
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <main+0x388>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d8f7      	bhi.n	8002028 <main+0x324>
 8002038:	e033      	b.n	80020a2 <main+0x39e>
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	200000f8 	.word	0x200000f8
 8002040:	48000400 	.word	0x48000400
 8002044:	2000004a 	.word	0x2000004a
 8002048:	2000004b 	.word	0x2000004b
 800204c:	200001a0 	.word	0x200001a0
 8002050:	200000ec 	.word	0x200000ec
 8002054:	080027b1 	.word	0x080027b1
 8002058:	08002811 	.word	0x08002811
 800205c:	200001e8 	.word	0x200001e8
 8002060:	20000300 	.word	0x20000300
 8002064:	08002885 	.word	0x08002885
 8002068:	08002901 	.word	0x08002901
 800206c:	200000d0 	.word	0x200000d0
 8002070:	08002a41 	.word	0x08002a41
 8002074:	08002aa5 	.word	0x08002aa5
 8002078:	20000080 	.word	0x20000080
 800207c:	200000dc 	.word	0x200000dc
 8002080:	08002991 	.word	0x08002991
 8002084:	080029e9 	.word	0x080029e9
 8002088:	20000032 	.word	0x20000032
 800208c:	200001e4 	.word	0x200001e4
 8002090:	20000028 	.word	0x20000028
 8002094:	20000033 	.word	0x20000033
 8002098:	20000120 	.word	0x20000120
 800209c:	200000cc 	.word	0x200000cc
			break;
 80020a0:	46c0      	nop			; (mov r8, r8)
		}
	}
	if(timeStart>T_VALUE){
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <main+0x458>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d906      	bls.n	80020b8 <main+0x3b4>
		Err=Err|HUM_ERR;
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <main+0x45c>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2208      	movs	r2, #8
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <main+0x45c>)
 80020b6:	701a      	strb	r2, [r3, #0]
	}

	// Humidity sensor calibration coefficient
	axis1bit16_t coeff;
	hts221_hum_adc_point_0_get(&dev_ctx_hum, coeff.u8bit);
 80020b8:	1d3a      	adds	r2, r7, #4
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <main+0x460>)
 80020bc:	0011      	movs	r1, r2
 80020be:	0018      	movs	r0, r3
 80020c0:	f7ff f969 	bl	8001396 <hts221_hum_adc_point_0_get>
	lin_hum.x0 = (float)coeff.i16bit;
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	2200      	movs	r2, #0
 80020c8:	5e9b      	ldrsh	r3, [r3, r2]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7fe fe82 	bl	8000dd4 <__aeabi_i2f>
 80020d0:	1c02      	adds	r2, r0, #0
 80020d2:	4b25      	ldr	r3, [pc, #148]	; (8002168 <main+0x464>)
 80020d4:	601a      	str	r2, [r3, #0]
	hts221_hum_rh_point_0_get(&dev_ctx_hum, coeff.u8bit);
 80020d6:	1d3a      	adds	r2, r7, #4
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <main+0x460>)
 80020da:	0011      	movs	r1, r2
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff f92a 	bl	8001336 <hts221_hum_rh_point_0_get>
	lin_hum.y0 = (float)coeff.u8bit[0];
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7fe febe 	bl	8000e68 <__aeabi_ui2f>
 80020ec:	1c02      	adds	r2, r0, #0
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <main+0x464>)
 80020f0:	605a      	str	r2, [r3, #4]
	hts221_hum_adc_point_1_get(&dev_ctx_hum, coeff.u8bit);
 80020f2:	1d3a      	adds	r2, r7, #4
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <main+0x460>)
 80020f6:	0011      	movs	r1, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7ff f95e 	bl	80013ba <hts221_hum_adc_point_1_get>
	lin_hum.x1 = (float)coeff.i16bit;
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	2200      	movs	r2, #0
 8002102:	5e9b      	ldrsh	r3, [r3, r2]
 8002104:	0018      	movs	r0, r3
 8002106:	f7fe fe65 	bl	8000dd4 <__aeabi_i2f>
 800210a:	1c02      	adds	r2, r0, #0
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <main+0x464>)
 800210e:	609a      	str	r2, [r3, #8]
	hts221_hum_rh_point_1_get(&dev_ctx_hum, coeff.u8bit);
 8002110:	1d3a      	adds	r2, r7, #4
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <main+0x460>)
 8002114:	0011      	movs	r1, r2
 8002116:	0018      	movs	r0, r3
 8002118:	f7ff f925 	bl	8001366 <hts221_hum_rh_point_1_get>
	lin_hum.y1 = (float)coeff.u8bit[0];
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	0018      	movs	r0, r3
 8002122:	f7fe fea1 	bl	8000e68 <__aeabi_ui2f>
 8002126:	1c02      	adds	r2, r0, #0
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <main+0x464>)
 800212a:	60da      	str	r2, [r3, #12]
	hts221_temp_adc_point_1_get(&dev_ctx_hum, coeff.u8bit);
	lin_temp.x1 = (float)coeff.i16bit;
	hts221_temp_deg_point_1_get(&dev_ctx_hum, coeff.u8bit);
	lin_temp.y1 = (float)coeff.u8bit[0];*/

	hts221_block_data_update_set(&dev_ctx_hum, PROPERTY_ENABLE);	//ABLITAZIONE DATAUPDATE
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <main+0x460>)
 800212e:	2101      	movs	r1, #1
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff f86a 	bl	800120a <hts221_block_data_update_set>
	hts221_data_rate_set(&dev_ctx_hum, HTS221_ODR_1Hz);				//SETTAGGIO DATARATE
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <main+0x460>)
 8002138:	2101      	movs	r1, #1
 800213a:	0018      	movs	r0, r3
 800213c:	f7ff f834 	bl	80011a8 <hts221_data_rate_set>
	hts221_power_on_set(&dev_ctx_hum, PROPERTY_ENABLE);				//ACCENSIONE INVIO DATI DISPOSITIVO
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <main+0x460>)
 8002142:	2101      	movs	r1, #1
 8002144:	0018      	movs	r0, r3
 8002146:	f7ff f8b5 	bl	80012b4 <hts221_power_on_set>




	//HAL_TIM_Base_Start_IT(&htim2);
	HAL_TIM_Base_Start_IT(&htim3);									//AVVIO DEL TIMER 3 E CONSEGUENTE AVVIO DEL PROGRAMMA
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <main+0x468>)
 800214c:	0018      	movs	r0, r3
 800214e:	f004 fa6d 	bl	800662c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);									//AVVIO DEL TIMER 16 PER INVIO DATI PRESSIONE E UMIDITA'
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <main+0x46c>)
 8002154:	0018      	movs	r0, r3
 8002156:	f004 fa69 	bl	800662c <HAL_TIM_Base_Start_IT>
	//int i=0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800215a:	e7fe      	b.n	800215a <main+0x456>
 800215c:	200001e4 	.word	0x200001e4
 8002160:	20000028 	.word	0x20000028
 8002164:	200000d0 	.word	0x200000d0
 8002168:	2000030c 	.word	0x2000030c
 800216c:	20000124 	.word	0x20000124
 8002170:	200002c0 	.word	0x200002c0

08002174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b099      	sub	sp, #100	; 0x64
 8002178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800217a:	242c      	movs	r4, #44	; 0x2c
 800217c:	193b      	adds	r3, r7, r4
 800217e:	0018      	movs	r0, r3
 8002180:	2334      	movs	r3, #52	; 0x34
 8002182:	001a      	movs	r2, r3
 8002184:	2100      	movs	r1, #0
 8002186:	f004 fe2d 	bl	8006de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800218a:	231c      	movs	r3, #28
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	0018      	movs	r0, r3
 8002190:	2310      	movs	r3, #16
 8002192:	001a      	movs	r2, r3
 8002194:	2100      	movs	r1, #0
 8002196:	f004 fe25 	bl	8006de4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	0018      	movs	r0, r3
 800219e:	2318      	movs	r3, #24
 80021a0:	001a      	movs	r2, r3
 80021a2:	2100      	movs	r1, #0
 80021a4:	f004 fe1e 	bl	8006de4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021a8:	0021      	movs	r1, r4
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	2202      	movs	r2, #2
 80021ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021b0:	187b      	adds	r3, r7, r1
 80021b2:	2201      	movs	r2, #1
 80021b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021b6:	187b      	adds	r3, r7, r1
 80021b8:	2210      	movs	r2, #16
 80021ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	2202      	movs	r2, #2
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021c2:	187b      	adds	r3, r7, r1
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	0212      	lsls	r2, r2, #8
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	2200      	movs	r2, #0
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80021d0:	187b      	adds	r3, r7, r1
 80021d2:	2200      	movs	r2, #0
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	0018      	movs	r0, r3
 80021da:	f002 fce1 	bl	8004ba0 <HAL_RCC_OscConfig>
 80021de:	1e03      	subs	r3, r0, #0
 80021e0:	d001      	beq.n	80021e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80021e2:	f000 fee7 	bl	8002fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e6:	211c      	movs	r1, #28
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	2207      	movs	r2, #7
 80021ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2202      	movs	r2, #2
 80021f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021fa:	187b      	adds	r3, r7, r1
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002200:	187b      	adds	r3, r7, r1
 8002202:	2100      	movs	r1, #0
 8002204:	0018      	movs	r0, r3
 8002206:	f003 f851 	bl	80052ac <HAL_RCC_ClockConfig>
 800220a:	1e03      	subs	r3, r0, #0
 800220c:	d001      	beq.n	8002212 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800220e:	f000 fed1 	bl	8002fb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	2220      	movs	r2, #32
 8002216:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	0018      	movs	r0, r3
 8002222:	f003 f99d 	bl	8005560 <HAL_RCCEx_PeriphCLKConfig>
 8002226:	1e03      	subs	r3, r0, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800222a:	f000 fec3 	bl	8002fb4 <Error_Handler>
  }
}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b019      	add	sp, #100	; 0x64
 8002234:	bd90      	pop	{r4, r7, pc}
	...

08002238 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <MX_CAN_Init+0x68>)
 800223e:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <MX_CAN_Init+0x6c>)
 8002240:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <MX_CAN_Init+0x68>)
 8002244:	2201      	movs	r2, #1
 8002246:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <MX_CAN_Init+0x68>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <MX_CAN_Init+0x68>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <MX_CAN_Init+0x68>)
 8002256:	22c0      	movs	r2, #192	; 0xc0
 8002258:	0312      	lsls	r2, r2, #12
 800225a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <MX_CAN_Init+0x68>)
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	0352      	lsls	r2, r2, #13
 8002262:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <MX_CAN_Init+0x68>)
 8002266:	2200      	movs	r2, #0
 8002268:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <MX_CAN_Init+0x68>)
 800226c:	2200      	movs	r2, #0
 800226e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <MX_CAN_Init+0x68>)
 8002272:	2200      	movs	r2, #0
 8002274:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <MX_CAN_Init+0x68>)
 8002278:	2201      	movs	r2, #1
 800227a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <MX_CAN_Init+0x68>)
 800227e:	2200      	movs	r2, #0
 8002280:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <MX_CAN_Init+0x68>)
 8002284:	2201      	movs	r2, #1
 8002286:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <MX_CAN_Init+0x68>)
 800228a:	0018      	movs	r0, r3
 800228c:	f001 f924 	bl	80034d8 <HAL_CAN_Init>
 8002290:	1e03      	subs	r3, r0, #0
 8002292:	d001      	beq.n	8002298 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002294:	f000 fe8e 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	200000f8 	.word	0x200000f8
 80022a4:	40006400 	.word	0x40006400

080022a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MX_I2C1_Init+0x74>)
 80022ae:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <MX_I2C1_Init+0x78>)
 80022b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_I2C1_Init+0x74>)
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <MX_I2C1_Init+0x7c>)
 80022b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <MX_I2C1_Init+0x74>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_I2C1_Init+0x74>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_I2C1_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_I2C1_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <MX_I2C1_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_I2C1_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_I2C1_Init+0x74>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MX_I2C1_Init+0x74>)
 80022e4:	0018      	movs	r0, r3
 80022e6:	f001 fe8d 	bl	8004004 <HAL_I2C_Init>
 80022ea:	1e03      	subs	r3, r0, #0
 80022ec:	d001      	beq.n	80022f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022ee:	f000 fe61 	bl	8002fb4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <MX_I2C1_Init+0x74>)
 80022f4:	2100      	movs	r1, #0
 80022f6:	0018      	movs	r0, r3
 80022f8:	f002 fbba 	bl	8004a70 <HAL_I2CEx_ConfigAnalogFilter>
 80022fc:	1e03      	subs	r3, r0, #0
 80022fe:	d001      	beq.n	8002304 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002300:	f000 fe58 	bl	8002fb4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <MX_I2C1_Init+0x74>)
 8002306:	2100      	movs	r1, #0
 8002308:	0018      	movs	r0, r3
 800230a:	f002 fbfd 	bl	8004b08 <HAL_I2CEx_ConfigDigitalFilter>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d001      	beq.n	8002316 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002312:	f000 fe4f 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000080 	.word	0x20000080
 8002320:	40005400 	.word	0x40005400
 8002324:	0000020b 	.word	0x0000020b

08002328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <MX_SPI1_Init+0x74>)
 800232e:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <MX_SPI1_Init+0x78>)
 8002330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002332:	4b1a      	ldr	r3, [pc, #104]	; (800239c <MX_SPI1_Init+0x74>)
 8002334:	2282      	movs	r2, #130	; 0x82
 8002336:	0052      	lsls	r2, r2, #1
 8002338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <MX_SPI1_Init+0x74>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <MX_SPI1_Init+0x74>)
 8002342:	22e0      	movs	r2, #224	; 0xe0
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <MX_SPI1_Init+0x74>)
 800234a:	2202      	movs	r2, #2
 800234c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <MX_SPI1_Init+0x74>)
 8002350:	2201      	movs	r2, #1
 8002352:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_SPI1_Init+0x74>)
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	0092      	lsls	r2, r2, #2
 800235a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <MX_SPI1_Init+0x74>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_SPI1_Init+0x74>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_SPI1_Init+0x74>)
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_SPI1_Init+0x74>)
 8002370:	2200      	movs	r2, #0
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_SPI1_Init+0x74>)
 8002376:	2207      	movs	r2, #7
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_SPI1_Init+0x74>)
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_SPI1_Init+0x74>)
 8002382:	2200      	movs	r2, #0
 8002384:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <MX_SPI1_Init+0x74>)
 8002388:	0018      	movs	r0, r3
 800238a:	f003 f9d7 	bl	800573c <HAL_SPI_Init>
 800238e:	1e03      	subs	r3, r0, #0
 8002390:	d001      	beq.n	8002396 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002392:	f000 fe0f 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200001e8 	.word	0x200001e8
 80023a0:	40013000 	.word	0x40013000

080023a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023aa:	2308      	movs	r3, #8
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	0018      	movs	r0, r3
 80023b0:	2310      	movs	r3, #16
 80023b2:	001a      	movs	r2, r3
 80023b4:	2100      	movs	r1, #0
 80023b6:	f004 fd15 	bl	8006de4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ba:	003b      	movs	r3, r7
 80023bc:	0018      	movs	r0, r3
 80023be:	2308      	movs	r3, #8
 80023c0:	001a      	movs	r2, r3
 80023c2:	2100      	movs	r1, #0
 80023c4:	f004 fd0e 	bl	8006de4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023c8:	4b20      	ldr	r3, [pc, #128]	; (800244c <MX_TIM1_Init+0xa8>)
 80023ca:	4a21      	ldr	r2, [pc, #132]	; (8002450 <MX_TIM1_Init+0xac>)
 80023cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <MX_TIM1_Init+0xa8>)
 80023d0:	220f      	movs	r2, #15
 80023d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <MX_TIM1_Init+0xa8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80023da:	4b1c      	ldr	r3, [pc, #112]	; (800244c <MX_TIM1_Init+0xa8>)
 80023dc:	22fa      	movs	r2, #250	; 0xfa
 80023de:	00d2      	lsls	r2, r2, #3
 80023e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <MX_TIM1_Init+0xa8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <MX_TIM1_Init+0xa8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <MX_TIM1_Init+0xa8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <MX_TIM1_Init+0xa8>)
 80023f6:	0018      	movs	r0, r3
 80023f8:	f004 f8c2 	bl	8006580 <HAL_TIM_Base_Init>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8002400:	f000 fdd8 	bl	8002fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002404:	2108      	movs	r1, #8
 8002406:	187b      	adds	r3, r7, r1
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	0152      	lsls	r2, r2, #5
 800240c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800240e:	187a      	adds	r2, r7, r1
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <MX_TIM1_Init+0xa8>)
 8002412:	0011      	movs	r1, r2
 8002414:	0018      	movs	r0, r3
 8002416:	f004 fa6b 	bl	80068f0 <HAL_TIM_ConfigClockSource>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800241e:	f000 fdc9 	bl	8002fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002422:	003b      	movs	r3, r7
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002428:	003b      	movs	r3, r7
 800242a:	2200      	movs	r2, #0
 800242c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800242e:	003a      	movs	r2, r7
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <MX_TIM1_Init+0xa8>)
 8002432:	0011      	movs	r1, r2
 8002434:	0018      	movs	r0, r3
 8002436:	f004 fc49 	bl	8006ccc <HAL_TIMEx_MasterConfigSynchronization>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800243e:	f000 fdb9 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b006      	add	sp, #24
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	200001a0 	.word	0x200001a0
 8002450:	40012c00 	.word	0x40012c00

08002454 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245a:	2308      	movs	r3, #8
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	0018      	movs	r0, r3
 8002460:	2310      	movs	r3, #16
 8002462:	001a      	movs	r2, r3
 8002464:	2100      	movs	r1, #0
 8002466:	f004 fcbd 	bl	8006de4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246a:	003b      	movs	r3, r7
 800246c:	0018      	movs	r0, r3
 800246e:	2308      	movs	r3, #8
 8002470:	001a      	movs	r2, r3
 8002472:	2100      	movs	r1, #0
 8002474:	f004 fcb6 	bl	8006de4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002478:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <MX_TIM2_Init+0xa0>)
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	05d2      	lsls	r2, r2, #23
 800247e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8002480:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <MX_TIM2_Init+0xa0>)
 8002482:	220f      	movs	r2, #15
 8002484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002486:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <MX_TIM2_Init+0xa0>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <MX_TIM2_Init+0xa0>)
 800248e:	4a1a      	ldr	r2, [pc, #104]	; (80024f8 <MX_TIM2_Init+0xa4>)
 8002490:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <MX_TIM2_Init+0xa0>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <MX_TIM2_Init+0xa0>)
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <MX_TIM2_Init+0xa0>)
 80024a0:	0018      	movs	r0, r3
 80024a2:	f004 f86d 	bl	8006580 <HAL_TIM_Base_Init>
 80024a6:	1e03      	subs	r3, r0, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80024aa:	f000 fd83 	bl	8002fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ae:	2108      	movs	r1, #8
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2280      	movs	r2, #128	; 0x80
 80024b4:	0152      	lsls	r2, r2, #5
 80024b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024b8:	187a      	adds	r2, r7, r1
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_TIM2_Init+0xa0>)
 80024bc:	0011      	movs	r1, r2
 80024be:	0018      	movs	r0, r3
 80024c0:	f004 fa16 	bl	80068f0 <HAL_TIM_ConfigClockSource>
 80024c4:	1e03      	subs	r3, r0, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80024c8:	f000 fd74 	bl	8002fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024cc:	003b      	movs	r3, r7
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d2:	003b      	movs	r3, r7
 80024d4:	2200      	movs	r2, #0
 80024d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024d8:	003a      	movs	r2, r7
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <MX_TIM2_Init+0xa0>)
 80024dc:	0011      	movs	r1, r2
 80024de:	0018      	movs	r0, r3
 80024e0:	f004 fbf4 	bl	8006ccc <HAL_TIMEx_MasterConfigSynchronization>
 80024e4:	1e03      	subs	r3, r0, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80024e8:	f000 fd64 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b006      	add	sp, #24
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	2000024c 	.word	0x2000024c
 80024f8:	0000fde8 	.word	0x0000fde8

080024fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002502:	2308      	movs	r3, #8
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	0018      	movs	r0, r3
 8002508:	2310      	movs	r3, #16
 800250a:	001a      	movs	r2, r3
 800250c:	2100      	movs	r1, #0
 800250e:	f004 fc69 	bl	8006de4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002512:	003b      	movs	r3, r7
 8002514:	0018      	movs	r0, r3
 8002516:	2308      	movs	r3, #8
 8002518:	001a      	movs	r2, r3
 800251a:	2100      	movs	r1, #0
 800251c:	f004 fc62 	bl	8006de4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002520:	4b1e      	ldr	r3, [pc, #120]	; (800259c <MX_TIM3_Init+0xa0>)
 8002522:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <MX_TIM3_Init+0xa4>)
 8002524:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <MX_TIM3_Init+0xa0>)
 8002528:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <MX_TIM3_Init+0xa8>)
 800252a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <MX_TIM3_Init+0xa0>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2;
 8002532:	4b1a      	ldr	r3, [pc, #104]	; (800259c <MX_TIM3_Init+0xa0>)
 8002534:	2202      	movs	r2, #2
 8002536:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <MX_TIM3_Init+0xa0>)
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <MX_TIM3_Init+0xa0>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <MX_TIM3_Init+0xa0>)
 8002546:	0018      	movs	r0, r3
 8002548:	f004 f81a 	bl	8006580 <HAL_TIM_Base_Init>
 800254c:	1e03      	subs	r3, r0, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002550:	f000 fd30 	bl	8002fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002554:	2108      	movs	r1, #8
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	0152      	lsls	r2, r2, #5
 800255c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800255e:	187a      	adds	r2, r7, r1
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <MX_TIM3_Init+0xa0>)
 8002562:	0011      	movs	r1, r2
 8002564:	0018      	movs	r0, r3
 8002566:	f004 f9c3 	bl	80068f0 <HAL_TIM_ConfigClockSource>
 800256a:	1e03      	subs	r3, r0, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800256e:	f000 fd21 	bl	8002fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002572:	003b      	movs	r3, r7
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002578:	003b      	movs	r3, r7
 800257a:	2200      	movs	r2, #0
 800257c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800257e:	003a      	movs	r2, r7
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <MX_TIM3_Init+0xa0>)
 8002582:	0011      	movs	r1, r2
 8002584:	0018      	movs	r0, r3
 8002586:	f004 fba1 	bl	8006ccc <HAL_TIMEx_MasterConfigSynchronization>
 800258a:	1e03      	subs	r3, r0, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800258e:	f000 fd11 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	46bd      	mov	sp, r7
 8002596:	b006      	add	sp, #24
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	20000124 	.word	0x20000124
 80025a0:	40000400 	.word	0x40000400
 80025a4:	00003e7f 	.word	0x00003e7f

080025a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <MX_TIM16_Init+0x44>)
 80025ae:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <MX_TIM16_Init+0x48>)
 80025b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <MX_TIM16_Init+0x44>)
 80025b4:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <MX_TIM16_Init+0x4c>)
 80025b6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <MX_TIM16_Init+0x44>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <MX_TIM16_Init+0x44>)
 80025c0:	220a      	movs	r2, #10
 80025c2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <MX_TIM16_Init+0x44>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80025ca:	4b08      	ldr	r3, [pc, #32]	; (80025ec <MX_TIM16_Init+0x44>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <MX_TIM16_Init+0x44>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <MX_TIM16_Init+0x44>)
 80025d8:	0018      	movs	r0, r3
 80025da:	f003 ffd1 	bl	8006580 <HAL_TIM_Base_Init>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80025e2:	f000 fce7 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200002c0 	.word	0x200002c0
 80025f0:	40014400 	.word	0x40014400
 80025f4:	00003a97 	.word	0x00003a97

080025f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fe:	240c      	movs	r4, #12
 8002600:	193b      	adds	r3, r7, r4
 8002602:	0018      	movs	r0, r3
 8002604:	2314      	movs	r3, #20
 8002606:	001a      	movs	r2, r3
 8002608:	2100      	movs	r1, #0
 800260a:	f004 fbeb 	bl	8006de4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800260e:	4b66      	ldr	r3, [pc, #408]	; (80027a8 <MX_GPIO_Init+0x1b0>)
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <MX_GPIO_Init+0x1b0>)
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	03c9      	lsls	r1, r1, #15
 8002618:	430a      	orrs	r2, r1
 800261a:	615a      	str	r2, [r3, #20]
 800261c:	4b62      	ldr	r3, [pc, #392]	; (80027a8 <MX_GPIO_Init+0x1b0>)
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	03db      	lsls	r3, r3, #15
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b5f      	ldr	r3, [pc, #380]	; (80027a8 <MX_GPIO_Init+0x1b0>)
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	4b5e      	ldr	r3, [pc, #376]	; (80027a8 <MX_GPIO_Init+0x1b0>)
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	0289      	lsls	r1, r1, #10
 8002634:	430a      	orrs	r2, r1
 8002636:	615a      	str	r2, [r3, #20]
 8002638:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <MX_GPIO_Init+0x1b0>)
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	029b      	lsls	r3, r3, #10
 8002640:	4013      	ands	r3, r2
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <MX_GPIO_Init+0x1b0>)
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	4b57      	ldr	r3, [pc, #348]	; (80027a8 <MX_GPIO_Init+0x1b0>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	02c9      	lsls	r1, r1, #11
 8002650:	430a      	orrs	r2, r1
 8002652:	615a      	str	r2, [r3, #20]
 8002654:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <MX_GPIO_Init+0x1b0>)
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	02db      	lsls	r3, r3, #11
 800265c:	4013      	ands	r3, r2
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, cs_1_Pin|cs_2_Pin, GPIO_PIN_SET);
 8002662:	4b52      	ldr	r3, [pc, #328]	; (80027ac <MX_GPIO_Init+0x1b4>)
 8002664:	2201      	movs	r2, #1
 8002666:	2103      	movs	r1, #3
 8002668:	0018      	movs	r0, r3
 800266a:	f001 fcae 	bl	8003fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	484e      	ldr	r0, [pc, #312]	; (80027ac <MX_GPIO_Init+0x1b4>)
 8002674:	2200      	movs	r2, #0
 8002676:	0019      	movs	r1, r3
 8002678:	f001 fca7 	bl	8003fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	0059      	lsls	r1, r3, #1
 8002680:	2390      	movs	r3, #144	; 0x90
 8002682:	05db      	lsls	r3, r3, #23
 8002684:	2200      	movs	r2, #0
 8002686:	0018      	movs	r0, r3
 8002688:	f001 fc9f 	bl	8003fca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cs_1_Pin cs_2_Pin */
  GPIO_InitStruct.Pin = cs_1_Pin|cs_2_Pin;
 800268c:	0021      	movs	r1, r4
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2203      	movs	r2, #3
 8002692:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2201      	movs	r2, #1
 8002698:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2201      	movs	r2, #1
 800269e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2203      	movs	r2, #3
 80026a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a6:	000c      	movs	r4, r1
 80026a8:	187b      	adds	r3, r7, r1
 80026aa:	4a40      	ldr	r2, [pc, #256]	; (80027ac <MX_GPIO_Init+0x1b4>)
 80026ac:	0019      	movs	r1, r3
 80026ae:	0010      	movs	r0, r2
 80026b0:	f001 fb06 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D6_Pin */
  GPIO_InitStruct.Pin = D6_Pin;
 80026b4:	0021      	movs	r1, r4
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2280      	movs	r2, #128	; 0x80
 80026ba:	0212      	lsls	r2, r2, #8
 80026bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	2201      	movs	r2, #1
 80026c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	2200      	movs	r2, #0
 80026ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 80026d0:	000c      	movs	r4, r1
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	4a35      	ldr	r2, [pc, #212]	; (80027ac <MX_GPIO_Init+0x1b4>)
 80026d6:	0019      	movs	r1, r3
 80026d8:	0010      	movs	r0, r2
 80026da:	f001 faf1 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D5_Pin */
  GPIO_InitStruct.Pin = D5_Pin;
 80026de:	0021      	movs	r1, r4
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	2280      	movs	r2, #128	; 0x80
 80026e4:	0052      	lsls	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	2201      	movs	r2, #1
 80026ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 80026fa:	000c      	movs	r4, r1
 80026fc:	187a      	adds	r2, r7, r1
 80026fe:	2390      	movs	r3, #144	; 0x90
 8002700:	05db      	lsls	r3, r3, #23
 8002702:	0011      	movs	r1, r2
 8002704:	0018      	movs	r0, r3
 8002706:	f001 fadb 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800270a:	0021      	movs	r1, r4
 800270c:	187b      	adds	r3, r7, r1
 800270e:	22c0      	movs	r2, #192	; 0xc0
 8002710:	00d2      	lsls	r2, r2, #3
 8002712:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	000c      	movs	r4, r1
 8002716:	193b      	adds	r3, r7, r4
 8002718:	2202      	movs	r2, #2
 800271a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	193b      	adds	r3, r7, r4
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002722:	193b      	adds	r3, r7, r4
 8002724:	2203      	movs	r2, #3
 8002726:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002728:	193b      	adds	r3, r7, r4
 800272a:	2201      	movs	r2, #1
 800272c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	193a      	adds	r2, r7, r4
 8002730:	2390      	movs	r3, #144	; 0x90
 8002732:	05db      	lsls	r3, r3, #23
 8002734:	0011      	movs	r1, r2
 8002736:	0018      	movs	r0, r3
 8002738:	f001 fac2 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I4_Pin */
  GPIO_InitStruct.Pin = I4_Pin;
 800273c:	193b      	adds	r3, r7, r4
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	0212      	lsls	r2, r2, #8
 8002742:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002744:	193b      	adds	r3, r7, r4
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274a:	193b      	adds	r3, r7, r4
 800274c:	2201      	movs	r2, #1
 800274e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(I4_GPIO_Port, &GPIO_InitStruct);
 8002750:	193a      	adds	r2, r7, r4
 8002752:	2390      	movs	r3, #144	; 0x90
 8002754:	05db      	lsls	r3, r3, #23
 8002756:	0011      	movs	r1, r2
 8002758:	0018      	movs	r0, r3
 800275a:	f001 fab1 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I3_Pin I2_Pin I1_Pin I0_Pin */
  GPIO_InitStruct.Pin = I3_Pin|I2_Pin|I1_Pin|I0_Pin;
 800275e:	193b      	adds	r3, r7, r4
 8002760:	2278      	movs	r2, #120	; 0x78
 8002762:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002764:	193b      	adds	r3, r7, r4
 8002766:	2200      	movs	r2, #0
 8002768:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276a:	193b      	adds	r3, r7, r4
 800276c:	2201      	movs	r2, #1
 800276e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002770:	193b      	adds	r3, r7, r4
 8002772:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <MX_GPIO_Init+0x1b4>)
 8002774:	0019      	movs	r1, r3
 8002776:	0010      	movs	r0, r2
 8002778:	f001 faa2 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800277c:	0021      	movs	r1, r4
 800277e:	187b      	adds	r3, r7, r1
 8002780:	2280      	movs	r2, #128	; 0x80
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2203      	movs	r2, #3
 800278a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002792:	187b      	adds	r3, r7, r1
 8002794:	4a05      	ldr	r2, [pc, #20]	; (80027ac <MX_GPIO_Init+0x1b4>)
 8002796:	0019      	movs	r1, r3
 8002798:	0010      	movs	r0, r2
 800279a:	f001 fa91 	bl	8003cc0 <HAL_GPIO_Init>

}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b009      	add	sp, #36	; 0x24
 80027a4:	bd90      	pop	{r4, r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	40021000 	.word	0x40021000
 80027ac:	48000400 	.word	0x48000400

080027b0 <accelerometer_write>:

/* USER CODE BEGIN 4 */
static int32_t accelerometer_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len){
 80027b0:	b5b0      	push	{r4, r5, r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	0008      	movs	r0, r1
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	0019      	movs	r1, r3
 80027be:	240b      	movs	r4, #11
 80027c0:	193b      	adds	r3, r7, r4
 80027c2:	1c02      	adds	r2, r0, #0
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	2508      	movs	r5, #8
 80027c8:	197b      	adds	r3, r7, r5
 80027ca:	1c0a      	adds	r2, r1, #0
 80027cc:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_ACC, GPIO_PIN_RESET);
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <accelerometer_write+0x5c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	2101      	movs	r1, #1
 80027d4:	0018      	movs	r0, r3
 80027d6:	f001 fbf8 	bl	8003fca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 10);
 80027da:	1939      	adds	r1, r7, r4
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	230a      	movs	r3, #10
 80027e0:	2201      	movs	r2, #1
 80027e2:	f003 f845 	bl	8005870 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, bufp, len, 10);
 80027e6:	197b      	adds	r3, r7, r5
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	230a      	movs	r3, #10
 80027f0:	f003 f83e 	bl	8005870 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_ACC, GPIO_PIN_SET);
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <accelerometer_write+0x5c>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	2101      	movs	r1, #1
 80027fa:	0018      	movs	r0, r3
 80027fc:	f001 fbe5 	bl	8003fca <HAL_GPIO_WritePin>
	return 0;
 8002800:	2300      	movs	r3, #0
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b004      	add	sp, #16
 8002808:	bdb0      	pop	{r4, r5, r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	48000400 	.word	0x48000400

08002810 <accelerometer_read>:

static int32_t accelerometer_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len){
 8002810:	b5b0      	push	{r4, r5, r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	0008      	movs	r0, r1
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	0019      	movs	r1, r3
 800281e:	240b      	movs	r4, #11
 8002820:	193b      	adds	r3, r7, r4
 8002822:	1c02      	adds	r2, r0, #0
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	2508      	movs	r5, #8
 8002828:	197b      	adds	r3, r7, r5
 800282a:	1c0a      	adds	r2, r1, #0
 800282c:	801a      	strh	r2, [r3, #0]
	/* Read command */
	reg |= 0x80;
 800282e:	0021      	movs	r1, r4
 8002830:	187b      	adds	r3, r7, r1
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2280      	movs	r2, #128	; 0x80
 8002836:	4252      	negs	r2, r2
 8002838:	4313      	orrs	r3, r2
 800283a:	b2da      	uxtb	r2, r3
 800283c:	000c      	movs	r4, r1
 800283e:	187b      	adds	r3, r7, r1
 8002840:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_ACC, GPIO_PIN_RESET);
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <accelerometer_read+0x70>)
 8002844:	2200      	movs	r2, #0
 8002846:	2101      	movs	r1, #1
 8002848:	0018      	movs	r0, r3
 800284a:	f001 fbbe 	bl	8003fca <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(handle, &reg, 1, 10);
 800284e:	0021      	movs	r1, r4
 8002850:	1879      	adds	r1, r7, r1
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	230a      	movs	r3, #10
 8002856:	2201      	movs	r2, #1
 8002858:	f003 f80a 	bl	8005870 <HAL_SPI_Transmit>
    HAL_SPI_Receive(handle, bufp, len, 10);
 800285c:	197b      	adds	r3, r7, r5
 800285e:	881a      	ldrh	r2, [r3, #0]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	230a      	movs	r3, #10
 8002866:	f003 f985 	bl	8005b74 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_ACC, GPIO_PIN_SET);
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <accelerometer_read+0x70>)
 800286c:	2201      	movs	r2, #1
 800286e:	2101      	movs	r1, #1
 8002870:	0018      	movs	r0, r3
 8002872:	f001 fbaa 	bl	8003fca <HAL_GPIO_WritePin>
    return 0;
 8002876:	2300      	movs	r3, #0
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b004      	add	sp, #16
 800287e:	bdb0      	pop	{r4, r5, r7, pc}
 8002880:	48000400 	.word	0x48000400

08002884 <gyroscope_write>:

static int32_t gyroscope_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len){
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	0008      	movs	r0, r1
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	0019      	movs	r1, r3
 8002892:	230b      	movs	r3, #11
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	1c02      	adds	r2, r0, #0
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	2008      	movs	r0, #8
 800289c:	183b      	adds	r3, r7, r0
 800289e:	1c0a      	adds	r2, r1, #0
 80028a0:	801a      	strh	r2, [r3, #0]
	if(len>1) reg |= 0x40;
 80028a2:	183b      	adds	r3, r7, r0
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d907      	bls.n	80028ba <gyroscope_write+0x36>
 80028aa:	210b      	movs	r1, #11
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2240      	movs	r2, #64	; 0x40
 80028b2:	4313      	orrs	r3, r2
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_GIR, GPIO_PIN_RESET);
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <gyroscope_write+0x78>)
 80028bc:	2200      	movs	r2, #0
 80028be:	2102      	movs	r1, #2
 80028c0:	0018      	movs	r0, r3
 80028c2:	f001 fb82 	bl	8003fca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 10);
 80028c6:	230b      	movs	r3, #11
 80028c8:	18f9      	adds	r1, r7, r3
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	230a      	movs	r3, #10
 80028ce:	2201      	movs	r2, #1
 80028d0:	f002 ffce 	bl	8005870 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, bufp, len, 10);
 80028d4:	2308      	movs	r3, #8
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	881a      	ldrh	r2, [r3, #0]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	230a      	movs	r3, #10
 80028e0:	f002 ffc6 	bl	8005870 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_GIR, GPIO_PIN_SET);
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <gyroscope_write+0x78>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	2102      	movs	r1, #2
 80028ea:	0018      	movs	r0, r3
 80028ec:	f001 fb6d 	bl	8003fca <HAL_GPIO_WritePin>
	return 0;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b004      	add	sp, #16
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	48000400 	.word	0x48000400

08002900 <gyroscope_read>:

static int32_t gyroscope_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len){
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	0008      	movs	r0, r1
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	0019      	movs	r1, r3
 800290e:	240b      	movs	r4, #11
 8002910:	193b      	adds	r3, r7, r4
 8002912:	1c02      	adds	r2, r0, #0
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	2008      	movs	r0, #8
 8002918:	183b      	adds	r3, r7, r0
 800291a:	1c0a      	adds	r2, r1, #0
 800291c:	801a      	strh	r2, [r3, #0]
	/* Read command */
	reg |= 0x80;
 800291e:	0021      	movs	r1, r4
 8002920:	187b      	adds	r3, r7, r1
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	4252      	negs	r2, r2
 8002928:	4313      	orrs	r3, r2
 800292a:	b2da      	uxtb	r2, r3
 800292c:	187b      	adds	r3, r7, r1
 800292e:	701a      	strb	r2, [r3, #0]
	if(len>1) reg |= 0xC0;
 8002930:	183b      	adds	r3, r7, r0
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d908      	bls.n	800294a <gyroscope_read+0x4a>
 8002938:	210b      	movs	r1, #11
 800293a:	187b      	adds	r3, r7, r1
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	4252      	negs	r2, r2
 8002942:	4313      	orrs	r3, r2
 8002944:	b2da      	uxtb	r2, r3
 8002946:	187b      	adds	r3, r7, r1
 8002948:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_GIR, GPIO_PIN_RESET);
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <gyroscope_read+0x8c>)
 800294c:	2200      	movs	r2, #0
 800294e:	2102      	movs	r1, #2
 8002950:	0018      	movs	r0, r3
 8002952:	f001 fb3a 	bl	8003fca <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(handle, &reg, 1, 10);
 8002956:	230b      	movs	r3, #11
 8002958:	18f9      	adds	r1, r7, r3
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	230a      	movs	r3, #10
 800295e:	2201      	movs	r2, #1
 8002960:	f002 ff86 	bl	8005870 <HAL_SPI_Transmit>
    HAL_SPI_Receive(handle, bufp, len, 10);
 8002964:	2308      	movs	r3, #8
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	230a      	movs	r3, #10
 8002970:	f003 f900 	bl	8005b74 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_GIR, GPIO_PIN_SET);
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <gyroscope_read+0x8c>)
 8002976:	2201      	movs	r2, #1
 8002978:	2102      	movs	r1, #2
 800297a:	0018      	movs	r0, r3
 800297c:	f001 fb25 	bl	8003fca <HAL_GPIO_WritePin>
    return 0;
 8002980:	2300      	movs	r3, #0
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b005      	add	sp, #20
 8002988:	bd90      	pop	{r4, r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	48000400 	.word	0x48000400

08002990 <barometer_write>:

static int32_t barometer_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len){
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af04      	add	r7, sp, #16
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	0008      	movs	r0, r1
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	0019      	movs	r1, r3
 800299e:	230b      	movs	r3, #11
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	1c02      	adds	r2, r0, #0
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	2308      	movs	r3, #8
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	1c0a      	adds	r2, r1, #0
 80029ac:	801a      	strh	r2, [r3, #0]
  if (handle == &hi2c1){
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <barometer_write+0x54>)
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d110      	bne.n	80029d8 <barometer_write+0x48>
    HAL_I2C_Mem_Write(handle, LPS22HB_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 80029b6:	230b      	movs	r3, #11
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	2364      	movs	r3, #100	; 0x64
 80029c2:	9302      	str	r3, [sp, #8]
 80029c4:	2308      	movs	r3, #8
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2301      	movs	r3, #1
 80029d2:	21bb      	movs	r1, #187	; 0xbb
 80029d4:	f001 fbac 	bl	8004130 <HAL_I2C_Mem_Write>
  }
  return 0;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	20000080 	.word	0x20000080

080029e8 <barometer_read>:

static int32_t barometer_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af04      	add	r7, sp, #16
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	0008      	movs	r0, r1
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	0019      	movs	r1, r3
 80029f6:	230b      	movs	r3, #11
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	1c02      	adds	r2, r0, #0
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	2308      	movs	r3, #8
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	1c0a      	adds	r2, r1, #0
 8002a04:	801a      	strh	r2, [r3, #0]
  if (handle == &hi2c1){
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <barometer_read+0x54>)
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d110      	bne.n	8002a30 <barometer_read+0x48>
    HAL_I2C_Mem_Read(handle, LPS22HB_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8002a0e:	230b      	movs	r3, #11
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	2364      	movs	r3, #100	; 0x64
 8002a1a:	9302      	str	r3, [sp, #8]
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	21bb      	movs	r1, #187	; 0xbb
 8002a2c:	f001 fcae 	bl	800438c <HAL_I2C_Mem_Read>
  }
  return 0;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b004      	add	sp, #16
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	20000080 	.word	0x20000080

08002a40 <humidity_write>:

static int32_t humidity_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af04      	add	r7, sp, #16
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	0008      	movs	r0, r1
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	230b      	movs	r3, #11
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	1c02      	adds	r2, r0, #0
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	2308      	movs	r3, #8
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	1c0a      	adds	r2, r1, #0
 8002a5c:	801a      	strh	r2, [r3, #0]
  if (handle == &hi2c1){
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <humidity_write+0x60>)
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d117      	bne.n	8002a96 <humidity_write+0x56>
    /* Write multiple command */
    reg |= 0x80;
 8002a66:	200b      	movs	r0, #11
 8002a68:	183b      	adds	r3, r7, r0
 8002a6a:	183a      	adds	r2, r7, r0
 8002a6c:	7812      	ldrb	r2, [r2, #0]
 8002a6e:	2180      	movs	r1, #128	; 0x80
 8002a70:	4249      	negs	r1, r1
 8002a72:	430a      	orrs	r2, r1
 8002a74:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8002a76:	183b      	adds	r3, r7, r0
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	2364      	movs	r3, #100	; 0x64
 8002a80:	9302      	str	r3, [sp, #8]
 8002a82:	2308      	movs	r3, #8
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2301      	movs	r3, #1
 8002a90:	21bf      	movs	r1, #191	; 0xbf
 8002a92:	f001 fb4d 	bl	8004130 <HAL_I2C_Mem_Write>
  }
  return 0;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b004      	add	sp, #16
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000080 	.word	0x20000080

08002aa4 <humidity_read>:

static int32_t humidity_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af04      	add	r7, sp, #16
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	0008      	movs	r0, r1
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	230b      	movs	r3, #11
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	1c02      	adds	r2, r0, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	2308      	movs	r3, #8
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	1c0a      	adds	r2, r1, #0
 8002ac0:	801a      	strh	r2, [r3, #0]
  if (handle == &hi2c1){
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <humidity_read+0x60>)
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d117      	bne.n	8002afa <humidity_read+0x56>
    /* Read multiple command */
    reg |= 0x80;
 8002aca:	200b      	movs	r0, #11
 8002acc:	183b      	adds	r3, r7, r0
 8002ace:	183a      	adds	r2, r7, r0
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	2180      	movs	r1, #128	; 0x80
 8002ad4:	4249      	negs	r1, r1
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8002ada:	183b      	adds	r3, r7, r0
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	2364      	movs	r3, #100	; 0x64
 8002ae4:	9302      	str	r3, [sp, #8]
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	2301      	movs	r3, #1
 8002af4:	21bf      	movs	r1, #191	; 0xbf
 8002af6:	f001 fc49 	bl	800438c <HAL_I2C_Mem_Read>
  }
  return 0;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b004      	add	sp, #16
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000080 	.word	0x20000080

08002b08 <HAL_TIM_PeriodElapsedCallback>:
	giro->y=giro->y/16;
	return 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM16){ 		// check if the interrupt comes from TIM16
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a7d      	ldr	r2, [pc, #500]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d106      	bne.n	8002b28 <HAL_TIM_PeriodElapsedCallback+0x20>
    	HAL_TIM_Base_Stop_IT(&htim16);
 8002b1a:	4b7d      	ldr	r3, [pc, #500]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f003 fda7 	bl	8006670 <HAL_TIM_Base_Stop_IT>
    	flagStartData = STD_MODE;
 8002b22:	4b7c      	ldr	r3, [pc, #496]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
	}
    if (htim->Instance==TIM3){ 			// check if the interrupt comes from TIM3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a7a      	ldr	r2, [pc, #488]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10c      	bne.n	8002b4c <HAL_TIM_PeriodElapsedCallback+0x44>
		TIM1->CNT=0;
 8002b32:	4b7a      	ldr	r3, [pc, #488]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim2);
 8002b38:	4b79      	ldr	r3, [pc, #484]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f003 fd76 	bl	800662c <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
 8002b40:	4b78      	ldr	r3, [pc, #480]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002b42:	0018      	movs	r0, r3
 8002b44:	f003 fd72 	bl	800662c <HAL_TIM_Base_Start_IT>
		get_data();
 8002b48:	f000 f900 	bl	8002d4c <get_data>
	}
    if (htim->Instance==TIM1){ 			// check if the interrupt comes from TIM1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a72      	ldr	r2, [pc, #456]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d000      	beq.n	8002b58 <HAL_TIM_PeriodElapsedCallback+0x50>
 8002b56:	e0d5      	b.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0x1fc>
    	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	4872      	ldr	r0, [pc, #456]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	0019      	movs	r1, r3
 8002b62:	f001 fa32 	bl	8003fca <HAL_GPIO_WritePin>
    	timer++;						// TIMER INVIO PACCHETTI TICKER
 8002b66:	4b71      	ldr	r3, [pc, #452]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	4b6f      	ldr	r3, [pc, #444]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002b6e:	601a      	str	r2, [r3, #0]
    	 *   | |       ID
    	 *   | | _______________
    	 * -|-|-|x|x|x|x|x|x|x|x|
    	 *   9 8 7 6 5 4 3 2 1 0
    	 */
    	switch (flagStartData){
 8002b70:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d100      	bne.n	8002b7a <HAL_TIM_PeriodElapsedCallback+0x72>
 8002b78:	e084      	b.n	8002c84 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d000      	beq.n	8002b80 <HAL_TIM_PeriodElapsedCallback+0x78>
				TxData0[6]=0x00;
				TxData0[7]=0x00;
				HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData0,&TxMailbox);// INVIO TERZO MESSAGGIO SOLO INIZIO E FINE
				break;
			}
			default:break;
 8002b7e:	e0ba      	b.n	8002cf6 <HAL_TIM_PeriodElapsedCallback+0x1ee>
				HAL_TIM_Base_Stop(&htim1);
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002b82:	0018      	movs	r0, r3
 8002b84:	f003 fd28 	bl	80065d8 <HAL_TIM_Base_Stop>
				TxHeader.StdId = (ID)|FIR_P;
 8002b88:	4b69      	ldr	r3, [pc, #420]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	4b69      	ldr	r3, [pc, #420]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002b90:	601a      	str	r2, [r3, #0]
				TxData0[0]=(int8_t)(timer  & 0x000000FF);
 8002b92:	4b66      	ldr	r3, [pc, #408]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	4b67      	ldr	r3, [pc, #412]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002b9a:	701a      	strb	r2, [r3, #0]
				TxData0[1]=(int8_t)((timer & 0x0000FF00)>>8);
 8002b9c:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	4b64      	ldr	r3, [pc, #400]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002ba6:	705a      	strb	r2, [r3, #1]
				TxData0[2]=(int8_t)((timer & 0x00FF0000)>>16);
 8002ba8:	4b60      	ldr	r3, [pc, #384]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0c1b      	lsrs	r3, r3, #16
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	4b61      	ldr	r3, [pc, #388]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002bb2:	709a      	strb	r2, [r3, #2]
				TxData0[3]=(int8_t)(Data[0].Gyr_x & 0x00FF);
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002bb6:	2206      	movs	r2, #6
 8002bb8:	5e9b      	ldrsh	r3, [r3, r2]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b5e      	ldr	r3, [pc, #376]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002bbe:	70da      	strb	r2, [r3, #3]
				TxData0[4]=(int8_t)((Data[0].Gyr_x & 0xFF00 )>> 8);
 8002bc0:	4b5e      	ldr	r3, [pc, #376]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002bc2:	2206      	movs	r2, #6
 8002bc4:	5e9b      	ldrsh	r3, [r3, r2]
 8002bc6:	121b      	asrs	r3, r3, #8
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002bcc:	711a      	strb	r2, [r3, #4]
				TxData0[5]=(int8_t)(Data[0].Gyr_y  & 0x00FF);
 8002bce:	4b5b      	ldr	r3, [pc, #364]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	5e9b      	ldrsh	r3, [r3, r2]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4b58      	ldr	r3, [pc, #352]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002bd8:	715a      	strb	r2, [r3, #5]
				TxData0[6]=(int8_t)((Data[0].Gyr_y & 0xFF00 )>> 8);
 8002bda:	4b58      	ldr	r3, [pc, #352]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002bdc:	2208      	movs	r2, #8
 8002bde:	5e9b      	ldrsh	r3, [r3, r2]
 8002be0:	121b      	asrs	r3, r3, #8
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b54      	ldr	r3, [pc, #336]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002be6:	719a      	strb	r2, [r3, #6]
				TxData0[7]=Err;
 8002be8:	4b55      	ldr	r3, [pc, #340]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002bea:	781a      	ldrb	r2, [r3, #0]
 8002bec:	4b52      	ldr	r3, [pc, #328]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002bee:	71da      	strb	r2, [r3, #7]
				HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData0,&TxMailbox);// INVIO PRIMO MESSAGGIO
 8002bf0:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002bf2:	4a51      	ldr	r2, [pc, #324]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002bf4:	494f      	ldr	r1, [pc, #316]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002bf6:	4854      	ldr	r0, [pc, #336]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002bf8:	f000 fea4 	bl	8003944 <HAL_CAN_AddTxMessage>
				TxHeader.StdId = (ID)|SEC_P;
 8002bfc:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	001a      	movs	r2, r3
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4313      	orrs	r3, r2
 8002c08:	001a      	movs	r2, r3
 8002c0a:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002c0c:	601a      	str	r2, [r3, #0]
				TxData0[0]=(int8_t)(Data[0].Acc_x & 0x00FF);
 8002c0e:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	5e9b      	ldrsh	r3, [r3, r2]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4b48      	ldr	r3, [pc, #288]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c18:	701a      	strb	r2, [r3, #0]
				TxData0[1]=(int8_t)((Data[0].Acc_x & 0xFF00 )>> 8);
 8002c1a:	4b48      	ldr	r3, [pc, #288]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	5e9b      	ldrsh	r3, [r3, r2]
 8002c20:	121b      	asrs	r3, r3, #8
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b44      	ldr	r3, [pc, #272]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c26:	705a      	strb	r2, [r3, #1]
				TxData0[2]=(int8_t)(Data[0].Acc_y & 0x00FF);
 8002c28:	4b44      	ldr	r3, [pc, #272]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	5e9b      	ldrsh	r3, [r3, r2]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c32:	709a      	strb	r2, [r3, #2]
				TxData0[3]=(int8_t)((Data[0].Acc_y & 0xFF00 )>> 8);
 8002c34:	4b41      	ldr	r3, [pc, #260]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c36:	2202      	movs	r2, #2
 8002c38:	5e9b      	ldrsh	r3, [r3, r2]
 8002c3a:	121b      	asrs	r3, r3, #8
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c40:	70da      	strb	r2, [r3, #3]
				TxData0[4]=(int8_t)(Data[0].Acc_z & 0x00FF);
 8002c42:	4b3e      	ldr	r3, [pc, #248]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c44:	2204      	movs	r2, #4
 8002c46:	5e9b      	ldrsh	r3, [r3, r2]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c4c:	711a      	strb	r2, [r3, #4]
				TxData0[5]=(int8_t)((Data[0].Acc_z & 0xFF00 )>> 8);
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c50:	2204      	movs	r2, #4
 8002c52:	5e9b      	ldrsh	r3, [r3, r2]
 8002c54:	121b      	asrs	r3, r3, #8
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c5a:	715a      	strb	r2, [r3, #5]
				TxData0[6]=(int8_t)(Data[0].T_b & 0x00FF);
 8002c5c:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c5e:	220e      	movs	r2, #14
 8002c60:	5e9b      	ldrsh	r3, [r3, r2]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c66:	719a      	strb	r2, [r3, #6]
				TxData0[7]=(int8_t)((Data[0].T_b & 0xFF00 )>> 8);
 8002c68:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c6a:	220e      	movs	r2, #14
 8002c6c:	5e9b      	ldrsh	r3, [r3, r2]
 8002c6e:	121b      	asrs	r3, r3, #8
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c74:	71da      	strb	r2, [r3, #7]
				HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData0,&TxMailbox);// INVIO SECONDO MESSAGGIO
 8002c76:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002c78:	4a2f      	ldr	r2, [pc, #188]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c7a:	492e      	ldr	r1, [pc, #184]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002c7c:	4832      	ldr	r0, [pc, #200]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002c7e:	f000 fe61 	bl	8003944 <HAL_CAN_AddTxMessage>
				break;
 8002c82:	e038      	b.n	8002cf6 <HAL_TIM_PeriodElapsedCallback+0x1ee>
				TxHeader.StdId = (ID)|THI_P;
 8002c84:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	001a      	movs	r2, r3
 8002c8a:	23c0      	movs	r3, #192	; 0xc0
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	001a      	movs	r2, r3
 8002c92:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002c94:	601a      	str	r2, [r3, #0]
				TxData0[0]=(int8_t)(Data[0].Pres  & 0x000000FF);
 8002c96:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c9e:	701a      	strb	r2, [r3, #0]
				TxData0[1]=(int8_t)((Data[0].Pres & 0x0000FF00)>>8);
 8002ca0:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002caa:	705a      	strb	r2, [r3, #1]
				TxData0[2]=(int8_t)((Data[0].Pres & 0x00FF0000)>>16);
 8002cac:	4b23      	ldr	r3, [pc, #140]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	0c1b      	lsrs	r3, r3, #16
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002cb6:	709a      	strb	r2, [r3, #2]
				TxData0[3]=(int8_t)((Data[0].Pres & 0xFF000000)>>24);
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	0e1b      	lsrs	r3, r3, #24
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002cc2:	70da      	strb	r2, [r3, #3]
				TxData0[4]=(int8_t)(Data[0].Hum  & 0x000000FF);
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002cc6:	8a9b      	ldrh	r3, [r3, #20]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002ccc:	711a      	strb	r2, [r3, #4]
				TxData0[5]=(int8_t)((Data[0].Hum & 0x0000FF00)>>8);
 8002cce:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002cd0:	8a9b      	ldrh	r3, [r3, #20]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002cda:	715a      	strb	r2, [r3, #5]
				TxData0[6]=0x00;
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	719a      	strb	r2, [r3, #6]
				TxData0[7]=0x00;
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	71da      	strb	r2, [r3, #7]
				HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData0,&TxMailbox);// INVIO TERZO MESSAGGIO SOLO INIZIO E FINE
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002cea:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002cec:	4911      	ldr	r1, [pc, #68]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002cee:	4816      	ldr	r0, [pc, #88]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002cf0:	f000 fe28 	bl	8003944 <HAL_CAN_AddTxMessage>
				break;
 8002cf4:	46c0      	nop			; (mov r8, r8)
    	}
    	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	480b      	ldr	r0, [pc, #44]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	0019      	movs	r1, r3
 8002d00:	f001 f963 	bl	8003fca <HAL_GPIO_WritePin>
    }
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40014400 	.word	0x40014400
 8002d10:	200002c0 	.word	0x200002c0
 8002d14:	2000004c 	.word	0x2000004c
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	2000024c 	.word	0x2000024c
 8002d24:	200001a0 	.word	0x200001a0
 8002d28:	48000400 	.word	0x48000400
 8002d2c:	20000078 	.word	0x20000078
 8002d30:	2000004a 	.word	0x2000004a
 8002d34:	20000290 	.word	0x20000290
 8002d38:	200002b8 	.word	0x200002b8
 8002d3c:	2000016c 	.word	0x2000016c
 8002d40:	20000028 	.word	0x20000028
 8002d44:	200001e0 	.word	0x200001e0
 8002d48:	200000f8 	.word	0x200000f8

08002d4c <get_data>:

void get_data(void){
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	TIM2->CNT=0;
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	05db      	lsls	r3, r3, #23
 8002d54:	2200      	movs	r2, #0
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
	//DECIDE CHE LETTURE ANDARE A FARE E PERMETTER DI LEGGERE I DATI NON ESSENZIALI SOLO ALL'INIZIO E ALLA FINE
	switch (flagStartData){
 8002d58:	4b69      	ldr	r3, [pc, #420]	; (8002f00 <get_data+0x1b4>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d069      	beq.n	8002e34 <get_data+0xe8>
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d000      	beq.n	8002d66 <get_data+0x1a>
				//if (humidity_perc < 0) humidity_perc = 0;
				//if (humidity_perc > 100) humidity_perc = 100;
			}
			break;
    	}
    	default:break;
 8002d64:	e0c3      	b.n	8002eee <get_data+0x1a2>
			iis3dhhc_status_get(&dev_ctx_acc, &reg_acc.status);
 8002d66:	4a67      	ldr	r2, [pc, #412]	; (8002f04 <get_data+0x1b8>)
 8002d68:	4b67      	ldr	r3, [pc, #412]	; (8002f08 <get_data+0x1bc>)
 8002d6a:	0011      	movs	r1, r2
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7fe fca8 	bl	80016c2 <iis3dhhc_status_get>
			if (reg_acc.status.zyxda){
 8002d72:	4b64      	ldr	r3, [pc, #400]	; (8002f04 <get_data+0x1b8>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2208      	movs	r2, #8
 8002d78:	4013      	ands	r3, r2
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01a      	beq.n	8002db6 <get_data+0x6a>
				memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 8002d80:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <get_data+0x1c0>)
 8002d82:	2206      	movs	r2, #6
 8002d84:	2100      	movs	r1, #0
 8002d86:	0018      	movs	r0, r3
 8002d88:	f004 f82c 	bl	8006de4 <memset>
				iis3dhhc_acceleration_raw_get(&dev_ctx_acc, data_raw_acceleration.u8bit);
 8002d8c:	4a5f      	ldr	r2, [pc, #380]	; (8002f0c <get_data+0x1c0>)
 8002d8e:	4b5e      	ldr	r3, [pc, #376]	; (8002f08 <get_data+0x1bc>)
 8002d90:	0011      	movs	r1, r2
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7fe fbf6 	bl	8001584 <iis3dhhc_acceleration_raw_get>
				Data[0].Acc_x=data_raw_acceleration.i16bit[0];
 8002d98:	4b5c      	ldr	r3, [pc, #368]	; (8002f0c <get_data+0x1c0>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	5e9a      	ldrsh	r2, [r3, r2]
 8002d9e:	4b5c      	ldr	r3, [pc, #368]	; (8002f10 <get_data+0x1c4>)
 8002da0:	801a      	strh	r2, [r3, #0]
				Data[0].Acc_y=data_raw_acceleration.i16bit[1];
 8002da2:	4b5a      	ldr	r3, [pc, #360]	; (8002f0c <get_data+0x1c0>)
 8002da4:	2202      	movs	r2, #2
 8002da6:	5e9a      	ldrsh	r2, [r3, r2]
 8002da8:	4b59      	ldr	r3, [pc, #356]	; (8002f10 <get_data+0x1c4>)
 8002daa:	805a      	strh	r2, [r3, #2]
				Data[0].Acc_z=data_raw_acceleration.i16bit[2];
 8002dac:	4b57      	ldr	r3, [pc, #348]	; (8002f0c <get_data+0x1c0>)
 8002dae:	2204      	movs	r2, #4
 8002db0:	5e9a      	ldrsh	r2, [r3, r2]
 8002db2:	4b57      	ldr	r3, [pc, #348]	; (8002f10 <get_data+0x1c4>)
 8002db4:	809a      	strh	r2, [r3, #4]
			l2g2is_dev_status_get(&dev_ctx_gir, &reg_gir);
 8002db6:	4a57      	ldr	r2, [pc, #348]	; (8002f14 <get_data+0x1c8>)
 8002db8:	4b57      	ldr	r3, [pc, #348]	; (8002f18 <get_data+0x1cc>)
 8002dba:	0011      	movs	r1, r2
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f7fe fda2 	bl	8001906 <l2g2is_dev_status_get>
			if ( reg_gir.xyda ){
 8002dc2:	4b54      	ldr	r3, [pc, #336]	; (8002f14 <get_data+0x1c8>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4013      	ands	r3, r2
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d015      	beq.n	8002dfc <get_data+0xb0>
				memset(data_raw_angular_rate.u8bit, 0x00, 2 * sizeof(int16_t));
 8002dd0:	4b52      	ldr	r3, [pc, #328]	; (8002f1c <get_data+0x1d0>)
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f004 f804 	bl	8006de4 <memset>
				l2g2is_angular_rate_raw_get(&dev_ctx_gir, data_raw_angular_rate.u8bit);
 8002ddc:	4a4f      	ldr	r2, [pc, #316]	; (8002f1c <get_data+0x1d0>)
 8002dde:	4b4e      	ldr	r3, [pc, #312]	; (8002f18 <get_data+0x1cc>)
 8002de0:	0011      	movs	r1, r2
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fe fd6b 	bl	80018be <l2g2is_angular_rate_raw_get>
				Data[0].Gyr_x=data_raw_angular_rate.i16bit[0];
 8002de8:	4b4c      	ldr	r3, [pc, #304]	; (8002f1c <get_data+0x1d0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	5e9a      	ldrsh	r2, [r3, r2]
 8002dee:	4b48      	ldr	r3, [pc, #288]	; (8002f10 <get_data+0x1c4>)
 8002df0:	80da      	strh	r2, [r3, #6]
				Data[0].Gyr_y=data_raw_angular_rate.i16bit[1];
 8002df2:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <get_data+0x1d0>)
 8002df4:	2202      	movs	r2, #2
 8002df6:	5e9a      	ldrsh	r2, [r3, r2]
 8002df8:	4b45      	ldr	r3, [pc, #276]	; (8002f10 <get_data+0x1c4>)
 8002dfa:	811a      	strh	r2, [r3, #8]
			lps22hb_press_data_ready_get(&dev_ctx_bar, &reg_bar);
 8002dfc:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <get_data+0x1d4>)
 8002dfe:	4b49      	ldr	r3, [pc, #292]	; (8002f24 <get_data+0x1d8>)
 8002e00:	0011      	movs	r1, r2
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7fe fe92 	bl	8001b2c <lps22hb_press_data_ready_get>
			if (reg_bar){
 8002e08:	4b45      	ldr	r3, [pc, #276]	; (8002f20 <get_data+0x1d4>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d06b      	beq.n	8002ee8 <get_data+0x19c>
				memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8002e10:	4b45      	ldr	r3, [pc, #276]	; (8002f28 <get_data+0x1dc>)
 8002e12:	2202      	movs	r2, #2
 8002e14:	2100      	movs	r1, #0
 8002e16:	0018      	movs	r0, r3
 8002e18:	f003 ffe4 	bl	8006de4 <memset>
				lps22hb_temperature_raw_get(&dev_ctx_bar, data_raw_temperature.u8bit);
 8002e1c:	4a42      	ldr	r2, [pc, #264]	; (8002f28 <get_data+0x1dc>)
 8002e1e:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <get_data+0x1d8>)
 8002e20:	0011      	movs	r1, r2
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7fe feaf 	bl	8001b86 <lps22hb_temperature_raw_get>
				Data[0].T_b=data_raw_temperature.i16bit;
 8002e28:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <get_data+0x1dc>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	5e9a      	ldrsh	r2, [r3, r2]
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <get_data+0x1c4>)
 8002e30:	81da      	strh	r2, [r3, #14]
			break;
 8002e32:	e059      	b.n	8002ee8 <get_data+0x19c>
			lps22hb_press_data_ready_get(&dev_ctx_bar, &reg_bar);
 8002e34:	4a3a      	ldr	r2, [pc, #232]	; (8002f20 <get_data+0x1d4>)
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <get_data+0x1d8>)
 8002e38:	0011      	movs	r1, r2
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7fe fe76 	bl	8001b2c <lps22hb_press_data_ready_get>
			if (reg_bar){
 8002e40:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <get_data+0x1d4>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d021      	beq.n	8002e8c <get_data+0x140>
				memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8002e48:	4b38      	ldr	r3, [pc, #224]	; (8002f2c <get_data+0x1e0>)
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f003 ffc8 	bl	8006de4 <memset>
				lps22hb_pressure_raw_get(&dev_ctx_bar, data_raw_pressure.u8bit);
 8002e54:	4a35      	ldr	r2, [pc, #212]	; (8002f2c <get_data+0x1e0>)
 8002e56:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <get_data+0x1d8>)
 8002e58:	0011      	movs	r1, r2
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7fe fe81 	bl	8001b62 <lps22hb_pressure_raw_get>
				Data[0].Pres=data_raw_pressure.i32bit;
 8002e60:	4b32      	ldr	r3, [pc, #200]	; (8002f2c <get_data+0x1e0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	001a      	movs	r2, r3
 8002e66:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <get_data+0x1c4>)
 8002e68:	611a      	str	r2, [r3, #16]
				memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <get_data+0x1dc>)
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	2100      	movs	r1, #0
 8002e70:	0018      	movs	r0, r3
 8002e72:	f003 ffb7 	bl	8006de4 <memset>
				lps22hb_temperature_raw_get(&dev_ctx_bar, data_raw_temperature.u8bit);
 8002e76:	4a2c      	ldr	r2, [pc, #176]	; (8002f28 <get_data+0x1dc>)
 8002e78:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <get_data+0x1d8>)
 8002e7a:	0011      	movs	r1, r2
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f7fe fe82 	bl	8001b86 <lps22hb_temperature_raw_get>
				Data[0].T_b=data_raw_temperature.i16bit;
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <get_data+0x1dc>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	5e9a      	ldrsh	r2, [r3, r2]
 8002e88:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <get_data+0x1c4>)
 8002e8a:	81da      	strh	r2, [r3, #14]
			hts221_status_get(&dev_ctx_hum, &reg_hum.status_reg);
 8002e8c:	4a28      	ldr	r2, [pc, #160]	; (8002f30 <get_data+0x1e4>)
 8002e8e:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <get_data+0x1e8>)
 8002e90:	0011      	movs	r1, r2
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7fe fa3d 	bl	8001312 <hts221_status_get>
			if (reg_hum.status_reg.h_da){
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <get_data+0x1e4>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d022      	beq.n	8002eec <get_data+0x1a0>
				memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <get_data+0x1ec>)
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	2100      	movs	r1, #0
 8002eac:	0018      	movs	r0, r3
 8002eae:	f003 ff99 	bl	8006de4 <memset>
				hts221_humidity_raw_get(&dev_ctx_hum, data_raw_humidity.u8bit);
 8002eb2:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <get_data+0x1ec>)
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <get_data+0x1e8>)
 8002eb6:	0011      	movs	r1, r2
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7fe f9d7 	bl	800126c <hts221_humidity_raw_get>
				humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity.i16bit);
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <get_data+0x1ec>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	5e9a      	ldrsh	r2, [r3, r2]
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <get_data+0x1f0>)
 8002ec6:	0011      	movs	r1, r2
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7fe fecc 	bl	8001c66 <linear_interpolation>
 8002ece:	1c03      	adds	r3, r0, #0
 8002ed0:	1c18      	adds	r0, r3, #0
 8002ed2:	f7fd f9a5 	bl	8000220 <__aeabi_f2uiz>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <get_data+0x1f4>)
 8002edc:	801a      	strh	r2, [r3, #0]
				Data[0].Hum = humidity_perc;
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <get_data+0x1f4>)
 8002ee0:	881a      	ldrh	r2, [r3, #0]
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <get_data+0x1c4>)
 8002ee4:	829a      	strh	r2, [r3, #20]
			break;
 8002ee6:	e001      	b.n	8002eec <get_data+0x1a0>
			break;
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	e000      	b.n	8002eee <get_data+0x1a2>
			break;
 8002eec:	46c0      	nop			; (mov r8, r8)
	}
	Data[0].Responce_Time_millis=TIM2->CNT;
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	05db      	lsls	r3, r3, #23
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <get_data+0x1c4>)
 8002ef8:	82da      	strh	r2, [r3, #22]
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	2000004c 	.word	0x2000004c
 8002f04:	2000019c 	.word	0x2000019c
 8002f08:	200000ec 	.word	0x200000ec
 8002f0c:	2000002c 	.word	0x2000002c
 8002f10:	2000016c 	.word	0x2000016c
 8002f14:	20000040 	.word	0x20000040
 8002f18:	20000300 	.word	0x20000300
 8002f1c:	20000034 	.word	0x20000034
 8002f20:	200000e8 	.word	0x200000e8
 8002f24:	200000dc 	.word	0x200000dc
 8002f28:	2000003c 	.word	0x2000003c
 8002f2c:	20000044 	.word	0x20000044
 8002f30:	2000007c 	.word	0x2000007c
 8002f34:	200000d0 	.word	0x200000d0
 8002f38:	20000048 	.word	0x20000048
 8002f3c:	2000030c 	.word	0x2000030c
 8002f40:	2000028c 	.word	0x2000028c

08002f44 <CAN_Config>:

void CAN_Config(void){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	TxHeader.StdId=0x00;
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <CAN_Config+0x64>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId=0x00;
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <CAN_Config+0x64>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	605a      	str	r2, [r3, #4]
	TxHeader.RTR=CAN_RTR_DATA;
 8002f54:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <CAN_Config+0x64>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]
	TxHeader.IDE=CAN_ID_STD;
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <CAN_Config+0x64>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC=8;
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <CAN_Config+0x64>)
 8002f62:	2208      	movs	r2, #8
 8002f64:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime=DISABLE;
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <CAN_Config+0x64>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	751a      	strb	r2, [r3, #20]

	// CAN filter configuration
	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <CAN_Config+0x68>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh=0;
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <CAN_Config+0x68>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow=0;
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <CAN_Config+0x68>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh=0;
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <CAN_Config+0x68>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow=0;
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <CAN_Config+0x68>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <CAN_Config+0x68>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation=ENABLE;
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <CAN_Config+0x68>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan,&sFilterConfig);
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <CAN_Config+0x68>)
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <CAN_Config+0x6c>)
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f000 fb99 	bl	80036d4 <HAL_CAN_ConfigFilter>
}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000290 	.word	0x20000290
 8002fac:	20000050 	.word	0x20000050
 8002fb0:	200000f8 	.word	0x200000f8

08002fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <HAL_MspInit+0x44>)
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_MspInit+0x44>)
 8002fcc:	2101      	movs	r1, #1
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	619a      	str	r2, [r3, #24]
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <HAL_MspInit+0x44>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4013      	ands	r3, r2
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_MspInit+0x44>)
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <HAL_MspInit+0x44>)
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	0549      	lsls	r1, r1, #21
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	61da      	str	r2, [r3, #28]
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_MspInit+0x44>)
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	055b      	lsls	r3, r3, #21
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b002      	add	sp, #8
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	2314      	movs	r3, #20
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	0018      	movs	r0, r3
 8003016:	2314      	movs	r3, #20
 8003018:	001a      	movs	r2, r3
 800301a:	2100      	movs	r1, #0
 800301c:	f003 fee2 	bl	8006de4 <memset>
  if(hcan->Instance==CAN)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_CAN_MspInit+0x94>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d133      	bne.n	8003092 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_CAN_MspInit+0x98>)
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <HAL_CAN_MspInit+0x98>)
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	0489      	lsls	r1, r1, #18
 8003034:	430a      	orrs	r2, r1
 8003036:	61da      	str	r2, [r3, #28]
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_CAN_MspInit+0x98>)
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	049b      	lsls	r3, r3, #18
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <HAL_CAN_MspInit+0x98>)
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_CAN_MspInit+0x98>)
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	0289      	lsls	r1, r1, #10
 8003050:	430a      	orrs	r2, r1
 8003052:	615a      	str	r2, [r3, #20]
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_CAN_MspInit+0x98>)
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	029b      	lsls	r3, r3, #10
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003062:	2114      	movs	r1, #20
 8003064:	187b      	adds	r3, r7, r1
 8003066:	22c0      	movs	r2, #192	; 0xc0
 8003068:	0152      	lsls	r2, r2, #5
 800306a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306c:	187b      	adds	r3, r7, r1
 800306e:	2202      	movs	r2, #2
 8003070:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	187b      	adds	r3, r7, r1
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2203      	movs	r2, #3
 800307c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800307e:	187b      	adds	r3, r7, r1
 8003080:	2204      	movs	r2, #4
 8003082:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003084:	187a      	adds	r2, r7, r1
 8003086:	2390      	movs	r3, #144	; 0x90
 8003088:	05db      	lsls	r3, r3, #23
 800308a:	0011      	movs	r1, r2
 800308c:	0018      	movs	r0, r3
 800308e:	f000 fe17 	bl	8003cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	b00a      	add	sp, #40	; 0x28
 8003098:	bd80      	pop	{r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	40006400 	.word	0x40006400
 80030a0:	40021000 	.word	0x40021000

080030a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	2314      	movs	r3, #20
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	0018      	movs	r0, r3
 80030b2:	2314      	movs	r3, #20
 80030b4:	001a      	movs	r2, r3
 80030b6:	2100      	movs	r1, #0
 80030b8:	f003 fe94 	bl	8006de4 <memset>
  if(hi2c->Instance==I2C1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <HAL_I2C_MspInit+0x90>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d132      	bne.n	800312c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <HAL_I2C_MspInit+0x94>)
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_I2C_MspInit+0x94>)
 80030cc:	2180      	movs	r1, #128	; 0x80
 80030ce:	02c9      	lsls	r1, r1, #11
 80030d0:	430a      	orrs	r2, r1
 80030d2:	615a      	str	r2, [r3, #20]
 80030d4:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_I2C_MspInit+0x94>)
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	02db      	lsls	r3, r3, #11
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB10     ------> I2C1_SCL
    PB11     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030e2:	2114      	movs	r1, #20
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	22c0      	movs	r2, #192	; 0xc0
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	2212      	movs	r2, #18
 80030f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	2201      	movs	r2, #1
 80030f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	2203      	movs	r2, #3
 80030fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	2201      	movs	r2, #1
 8003102:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003104:	187b      	adds	r3, r7, r1
 8003106:	4a0d      	ldr	r2, [pc, #52]	; (800313c <HAL_I2C_MspInit+0x98>)
 8003108:	0019      	movs	r1, r3
 800310a:	0010      	movs	r0, r2
 800310c:	f000 fdd8 	bl	8003cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_I2C_MspInit+0x94>)
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_I2C_MspInit+0x94>)
 8003116:	2180      	movs	r1, #128	; 0x80
 8003118:	0389      	lsls	r1, r1, #14
 800311a:	430a      	orrs	r2, r1
 800311c:	61da      	str	r2, [r3, #28]
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_I2C_MspInit+0x94>)
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	039b      	lsls	r3, r3, #14
 8003126:	4013      	ands	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b00a      	add	sp, #40	; 0x28
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40005400 	.word	0x40005400
 8003138:	40021000 	.word	0x40021000
 800313c:	48000400 	.word	0x48000400

08003140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	2314      	movs	r3, #20
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	0018      	movs	r0, r3
 800314e:	2314      	movs	r3, #20
 8003150:	001a      	movs	r2, r3
 8003152:	2100      	movs	r1, #0
 8003154:	f003 fe46 	bl	8006de4 <memset>
  if(hspi->Instance==SPI1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <HAL_SPI_MspInit+0x90>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d132      	bne.n	80031c8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003162:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <HAL_SPI_MspInit+0x94>)
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_SPI_MspInit+0x94>)
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	0149      	lsls	r1, r1, #5
 800316c:	430a      	orrs	r2, r1
 800316e:	619a      	str	r2, [r3, #24]
 8003170:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_SPI_MspInit+0x94>)
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	015b      	lsls	r3, r3, #5
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_SPI_MspInit+0x94>)
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_SPI_MspInit+0x94>)
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	0289      	lsls	r1, r1, #10
 8003188:	430a      	orrs	r2, r1
 800318a:	615a      	str	r2, [r3, #20]
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_SPI_MspInit+0x94>)
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	029b      	lsls	r3, r3, #10
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800319a:	2114      	movs	r1, #20
 800319c:	187b      	adds	r3, r7, r1
 800319e:	22e0      	movs	r2, #224	; 0xe0
 80031a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2202      	movs	r2, #2
 80031a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	2203      	movs	r2, #3
 80031b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	187a      	adds	r2, r7, r1
 80031bc:	2390      	movs	r3, #144	; 0x90
 80031be:	05db      	lsls	r3, r3, #23
 80031c0:	0011      	movs	r1, r2
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 fd7c 	bl	8003cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b00a      	add	sp, #40	; 0x28
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40013000 	.word	0x40013000
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a32      	ldr	r2, [pc, #200]	; (80032b0 <HAL_TIM_Base_MspInit+0xd8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d116      	bne.n	8003218 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031ea:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 80031f0:	2180      	movs	r1, #128	; 0x80
 80031f2:	0109      	lsls	r1, r1, #4
 80031f4:	430a      	orrs	r2, r1
 80031f6:	619a      	str	r2, [r3, #24]
 80031f8:	4b2e      	ldr	r3, [pc, #184]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	4013      	ands	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2100      	movs	r1, #0
 800320a:	200d      	movs	r0, #13
 800320c:	f000 fd26 	bl	8003c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003210:	200d      	movs	r0, #13
 8003212:	f000 fd38 	bl	8003c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003216:	e047      	b.n	80032a8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	05db      	lsls	r3, r3, #23
 8003220:	429a      	cmp	r2, r3
 8003222:	d10c      	bne.n	800323e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003224:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 800322a:	2101      	movs	r1, #1
 800322c:	430a      	orrs	r2, r1
 800322e:	61da      	str	r2, [r3, #28]
 8003230:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	2201      	movs	r2, #1
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]
}
 800323c:	e034      	b.n	80032a8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_TIM_Base_MspInit+0xe0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d114      	bne.n	8003272 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003248:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 800324e:	2102      	movs	r1, #2
 8003250:	430a      	orrs	r2, r1
 8003252:	61da      	str	r2, [r3, #28]
 8003254:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2202      	movs	r2, #2
 800325a:	4013      	ands	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003260:	2200      	movs	r2, #0
 8003262:	2100      	movs	r1, #0
 8003264:	2010      	movs	r0, #16
 8003266:	f000 fcf9 	bl	8003c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800326a:	2010      	movs	r0, #16
 800326c:	f000 fd0b 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 8003270:	e01a      	b.n	80032a8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM16)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a11      	ldr	r2, [pc, #68]	; (80032bc <HAL_TIM_Base_MspInit+0xe4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d115      	bne.n	80032a8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 800327e:	699a      	ldr	r2, [r3, #24]
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	0289      	lsls	r1, r1, #10
 8003286:	430a      	orrs	r2, r1
 8003288:	619a      	str	r2, [r3, #24]
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_TIM_Base_MspInit+0xdc>)
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	029b      	lsls	r3, r3, #10
 8003292:	4013      	ands	r3, r2
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003298:	2200      	movs	r2, #0
 800329a:	2100      	movs	r1, #0
 800329c:	2015      	movs	r0, #21
 800329e:	f000 fcdd 	bl	8003c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80032a2:	2015      	movs	r0, #21
 80032a4:	f000 fcef 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b006      	add	sp, #24
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40014400 	.word	0x40014400

080032c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <HardFault_Handler+0x4>

080032d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032e8:	f000 f8b8 	bl	800345c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032f8:	4b03      	ldr	r3, [pc, #12]	; (8003308 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80032fa:	0018      	movs	r0, r3
 80032fc:	f003 f9e2 	bl	80066c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	200001a0 	.word	0x200001a0

0800330c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <TIM3_IRQHandler+0x14>)
 8003312:	0018      	movs	r0, r3
 8003314:	f003 f9d6 	bl	80066c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	20000124 	.word	0x20000124

08003324 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <TIM16_IRQHandler+0x14>)
 800332a:	0018      	movs	r0, r3
 800332c:	f003 f9ca 	bl	80066c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	200002c0 	.word	0x200002c0

0800333c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003348:	4813      	ldr	r0, [pc, #76]	; (8003398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800334a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800334c:	4813      	ldr	r0, [pc, #76]	; (800339c <LoopForever+0x6>)
    LDR R1, [R0]
 800334e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003350:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <LoopForever+0xa>)
    CMP R1, R2
 8003354:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8003356:	d105      	bne.n	8003364 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8003358:	4812      	ldr	r0, [pc, #72]	; (80033a4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800335a:	4913      	ldr	r1, [pc, #76]	; (80033a8 <LoopForever+0x12>)
    STR R1, [R0]
 800335c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800335e:	4813      	ldr	r0, [pc, #76]	; (80033ac <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003360:	4913      	ldr	r1, [pc, #76]	; (80033b0 <LoopForever+0x1a>)
    STR R1, [R0]
 8003362:	6001      	str	r1, [r0, #0]

08003364 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003364:	4813      	ldr	r0, [pc, #76]	; (80033b4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8003366:	4914      	ldr	r1, [pc, #80]	; (80033b8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8003368:	4a14      	ldr	r2, [pc, #80]	; (80033bc <LoopForever+0x26>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800336c:	e002      	b.n	8003374 <LoopCopyDataInit>

0800336e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800336e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003372:	3304      	adds	r3, #4

08003374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003378:	d3f9      	bcc.n	800336e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800337a:	4a11      	ldr	r2, [pc, #68]	; (80033c0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800337c:	4c11      	ldr	r4, [pc, #68]	; (80033c4 <LoopForever+0x2e>)
  movs r3, #0
 800337e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003380:	e001      	b.n	8003386 <LoopFillZerobss>

08003382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003384:	3204      	adds	r2, #4

08003386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003388:	d3fb      	bcc.n	8003382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800338a:	f7ff ffd7 	bl	800333c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800338e:	f003 fd05 	bl	8006d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003392:	f7fe fcb7 	bl	8001d04 <main>

08003396 <LoopForever>:

LoopForever:
    b LoopForever
 8003396:	e7fe      	b.n	8003396 <LoopForever>
  ldr   r0, =_estack
 8003398:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800339c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80033a0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80033a4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80033a8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80033ac:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80033b0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80033b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80033bc:	08006f04 	.word	0x08006f04
  ldr r2, =_sbss
 80033c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80033c4:	20000320 	.word	0x20000320

080033c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033c8:	e7fe      	b.n	80033c8 <ADC1_IRQHandler>
	...

080033cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_Init+0x24>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_Init+0x24>)
 80033d6:	2110      	movs	r1, #16
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80033dc:	2000      	movs	r0, #0
 80033de:	f000 f809 	bl	80033f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033e2:	f7ff fded 	bl	8002fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	0018      	movs	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	40022000 	.word	0x40022000

080033f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_InitTick+0x5c>)
 80033fe:	681c      	ldr	r4, [r3, #0]
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_InitTick+0x60>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	0019      	movs	r1, r3
 8003406:	23fa      	movs	r3, #250	; 0xfa
 8003408:	0098      	lsls	r0, r3, #2
 800340a:	f7fc fe7d 	bl	8000108 <__udivsi3>
 800340e:	0003      	movs	r3, r0
 8003410:	0019      	movs	r1, r3
 8003412:	0020      	movs	r0, r4
 8003414:	f7fc fe78 	bl	8000108 <__udivsi3>
 8003418:	0003      	movs	r3, r0
 800341a:	0018      	movs	r0, r3
 800341c:	f000 fc43 	bl	8003ca6 <HAL_SYSTICK_Config>
 8003420:	1e03      	subs	r3, r0, #0
 8003422:	d001      	beq.n	8003428 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e00f      	b.n	8003448 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d80b      	bhi.n	8003446 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	2301      	movs	r3, #1
 8003432:	425b      	negs	r3, r3
 8003434:	2200      	movs	r2, #0
 8003436:	0018      	movs	r0, r3
 8003438:	f000 fc10 	bl	8003c5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_InitTick+0x64>)
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	e000      	b.n	8003448 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b003      	add	sp, #12
 800344e:	bd90      	pop	{r4, r7, pc}
 8003450:	20000000 	.word	0x20000000
 8003454:	20000008 	.word	0x20000008
 8003458:	20000004 	.word	0x20000004

0800345c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_IncTick+0x1c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	001a      	movs	r2, r3
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_IncTick+0x20>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	18d2      	adds	r2, r2, r3
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <HAL_IncTick+0x20>)
 800346e:	601a      	str	r2, [r3, #0]
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	20000008 	.word	0x20000008
 800347c:	2000031c 	.word	0x2000031c

08003480 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  return uwTick;
 8003484:	4b02      	ldr	r3, [pc, #8]	; (8003490 <HAL_GetTick+0x10>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	2000031c 	.word	0x2000031c

08003494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800349c:	f7ff fff0 	bl	8003480 <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3301      	adds	r3, #1
 80034ac:	d005      	beq.n	80034ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_Delay+0x40>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	001a      	movs	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	189b      	adds	r3, r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	f7ff ffe0 	bl	8003480 <HAL_GetTick>
 80034c0:	0002      	movs	r2, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d8f7      	bhi.n	80034bc <HAL_Delay+0x28>
  {
  }
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b004      	add	sp, #16
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000008 	.word	0x20000008

080034d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0f0      	b.n	80036cc <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	5c9b      	ldrb	r3, [r3, r2]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d103      	bne.n	80034fe <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7ff fd85 	bl	8003008 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2102      	movs	r1, #2
 800350a:	438a      	bics	r2, r1
 800350c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800350e:	f7ff ffb7 	bl	8003480 <HAL_GetTick>
 8003512:	0003      	movs	r3, r0
 8003514:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003516:	e013      	b.n	8003540 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003518:	f7ff ffb2 	bl	8003480 <HAL_GetTick>
 800351c:	0002      	movs	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b0a      	cmp	r3, #10
 8003524:	d90c      	bls.n	8003540 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	0292      	lsls	r2, r2, #10
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	2105      	movs	r1, #5
 800353a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0c5      	b.n	80036cc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	4013      	ands	r3, r2
 800354a:	d1e5      	bne.n	8003518 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2101      	movs	r1, #1
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800355c:	f7ff ff90 	bl	8003480 <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003564:	e013      	b.n	800358e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003566:	f7ff ff8b 	bl	8003480 <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b0a      	cmp	r3, #10
 8003572:	d90c      	bls.n	800358e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	2280      	movs	r2, #128	; 0x80
 800357a:	0292      	lsls	r2, r2, #10
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	2105      	movs	r1, #5
 8003588:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e09e      	b.n	80036cc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	4013      	ands	r3, r2
 8003598:	d0e5      	beq.n	8003566 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7e1b      	ldrb	r3, [r3, #24]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d108      	bne.n	80035b4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2180      	movs	r1, #128	; 0x80
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e007      	b.n	80035c4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	438a      	bics	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7e5b      	ldrb	r3, [r3, #25]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d108      	bne.n	80035de <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2140      	movs	r1, #64	; 0x40
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e007      	b.n	80035ee <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2140      	movs	r1, #64	; 0x40
 80035ea:	438a      	bics	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7e9b      	ldrb	r3, [r3, #26]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2120      	movs	r1, #32
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e007      	b.n	8003618 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2120      	movs	r1, #32
 8003614:	438a      	bics	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7edb      	ldrb	r3, [r3, #27]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d108      	bne.n	8003632 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2110      	movs	r1, #16
 800362c:	438a      	bics	r2, r1
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e007      	b.n	8003642 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2110      	movs	r1, #16
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	7f1b      	ldrb	r3, [r3, #28]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d108      	bne.n	800365c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2108      	movs	r1, #8
 8003656:	430a      	orrs	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e007      	b.n	800366c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2108      	movs	r1, #8
 8003668:	438a      	bics	r2, r1
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7f5b      	ldrb	r3, [r3, #29]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d108      	bne.n	8003686 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2104      	movs	r1, #4
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e007      	b.n	8003696 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2104      	movs	r1, #4
 8003692:	438a      	bics	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	0011      	movs	r1, r2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	1e5a      	subs	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	2101      	movs	r1, #1
 80036c8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b004      	add	sp, #16
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036e4:	2013      	movs	r0, #19
 80036e6:	183b      	adds	r3, r7, r0
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	2120      	movs	r1, #32
 80036ec:	5c52      	ldrb	r2, [r2, r1]
 80036ee:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80036f0:	183b      	adds	r3, r7, r0
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d005      	beq.n	8003704 <HAL_CAN_ConfigFilter+0x30>
 80036f8:	2313      	movs	r3, #19
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d000      	beq.n	8003704 <HAL_CAN_ConfigFilter+0x30>
 8003702:	e0cd      	b.n	80038a0 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	58d3      	ldr	r3, [r2, r3]
 800370c:	2201      	movs	r2, #1
 800370e:	431a      	orrs	r2, r3
 8003710:	0011      	movs	r1, r2
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	221f      	movs	r2, #31
 8003720:	4013      	ands	r3, r2
 8003722:	2201      	movs	r2, #1
 8003724:	409a      	lsls	r2, r3
 8003726:	0013      	movs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	2387      	movs	r3, #135	; 0x87
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	58d3      	ldr	r3, [r2, r3]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	43d2      	mvns	r2, r2
 8003736:	401a      	ands	r2, r3
 8003738:	0011      	movs	r1, r2
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	2387      	movs	r3, #135	; 0x87
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d129      	bne.n	800379e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	2383      	movs	r3, #131	; 0x83
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	58d3      	ldr	r3, [r2, r3]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	43d2      	mvns	r2, r2
 8003756:	401a      	ands	r2, r3
 8003758:	0011      	movs	r1, r2
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	2383      	movs	r3, #131	; 0x83
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003774:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	3248      	adds	r2, #72	; 0x48
 800377a:	00d2      	lsls	r2, r2, #3
 800377c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003790:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003792:	6979      	ldr	r1, [r7, #20]
 8003794:	3348      	adds	r3, #72	; 0x48
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	18cb      	adds	r3, r1, r3
 800379a:	3304      	adds	r3, #4
 800379c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d128      	bne.n	80037f8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	2383      	movs	r3, #131	; 0x83
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	58d2      	ldr	r2, [r2, r3]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	0011      	movs	r1, r2
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	2383      	movs	r3, #131	; 0x83
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037ce:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	3248      	adds	r2, #72	; 0x48
 80037d4:	00d2      	lsls	r2, r2, #3
 80037d6:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037ec:	6979      	ldr	r1, [r7, #20]
 80037ee:	3348      	adds	r3, #72	; 0x48
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	18cb      	adds	r3, r1, r3
 80037f4:	3304      	adds	r3, #4
 80037f6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10c      	bne.n	800381a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	2381      	movs	r3, #129	; 0x81
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	58d3      	ldr	r3, [r2, r3]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	43d2      	mvns	r2, r2
 800380c:	401a      	ands	r2, r3
 800380e:	0011      	movs	r1, r2
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	2381      	movs	r3, #129	; 0x81
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	50d1      	str	r1, [r2, r3]
 8003818:	e00a      	b.n	8003830 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	2381      	movs	r3, #129	; 0x81
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	58d2      	ldr	r2, [r2, r3]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	431a      	orrs	r2, r3
 8003826:	0011      	movs	r1, r2
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	2381      	movs	r3, #129	; 0x81
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10c      	bne.n	8003852 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	2385      	movs	r3, #133	; 0x85
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	58d3      	ldr	r3, [r2, r3]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	43d2      	mvns	r2, r2
 8003844:	401a      	ands	r2, r3
 8003846:	0011      	movs	r1, r2
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	2385      	movs	r3, #133	; 0x85
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	50d1      	str	r1, [r2, r3]
 8003850:	e00a      	b.n	8003868 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	2385      	movs	r3, #133	; 0x85
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	58d2      	ldr	r2, [r2, r3]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	431a      	orrs	r2, r3
 800385e:	0011      	movs	r1, r2
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	2385      	movs	r3, #133	; 0x85
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10a      	bne.n	8003886 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	2387      	movs	r3, #135	; 0x87
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	58d2      	ldr	r2, [r2, r3]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	431a      	orrs	r2, r3
 800387c:	0011      	movs	r1, r2
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	2387      	movs	r3, #135	; 0x87
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	58d3      	ldr	r3, [r2, r3]
 800388e:	2201      	movs	r2, #1
 8003890:	4393      	bics	r3, r2
 8003892:	0019      	movs	r1, r3
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	e007      	b.n	80038b0 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	2280      	movs	r2, #128	; 0x80
 80038a6:	02d2      	lsls	r2, r2, #11
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
  }
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b006      	add	sp, #24
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	5c9b      	ldrb	r3, [r3, r2]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d12f      	bne.n	800392c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	2102      	movs	r1, #2
 80038d2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2101      	movs	r1, #1
 80038e0:	438a      	bics	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038e4:	f7ff fdcc 	bl	8003480 <HAL_GetTick>
 80038e8:	0003      	movs	r3, r0
 80038ea:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038ec:	e013      	b.n	8003916 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038ee:	f7ff fdc7 	bl	8003480 <HAL_GetTick>
 80038f2:	0002      	movs	r2, r0
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b0a      	cmp	r3, #10
 80038fa:	d90c      	bls.n	8003916 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	0292      	lsls	r2, r2, #10
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	2105      	movs	r1, #5
 8003910:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e012      	b.n	800393c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	4013      	ands	r3, r2
 8003920:	d1e5      	bne.n	80038ee <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e007      	b.n	800393c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2280      	movs	r2, #128	; 0x80
 8003932:	0312      	lsls	r2, r2, #12
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
  }
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b004      	add	sp, #16
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003952:	201f      	movs	r0, #31
 8003954:	183b      	adds	r3, r7, r0
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	2120      	movs	r1, #32
 800395a:	5c52      	ldrb	r2, [r2, r1]
 800395c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003966:	183b      	adds	r3, r7, r0
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d005      	beq.n	800397a <HAL_CAN_AddTxMessage+0x36>
 800396e:	231f      	movs	r3, #31
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d000      	beq.n	800397a <HAL_CAN_AddTxMessage+0x36>
 8003978:	e0b7      	b.n	8003aea <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	04db      	lsls	r3, r3, #19
 8003980:	4013      	ands	r3, r2
 8003982:	d10a      	bne.n	800399a <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	051b      	lsls	r3, r3, #20
 800398a:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800398c:	d105      	bne.n	800399a <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	055b      	lsls	r3, r3, #21
 8003994:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003996:	d100      	bne.n	800399a <HAL_CAN_AddTxMessage+0x56>
 8003998:	e09e      	b.n	8003ad8 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	0e1b      	lsrs	r3, r3, #24
 800399e:	2203      	movs	r2, #3
 80039a0:	4013      	ands	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d908      	bls.n	80039bc <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2280      	movs	r2, #128	; 0x80
 80039b0:	0412      	lsls	r2, r2, #16
 80039b2:	431a      	orrs	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e09e      	b.n	8003afa <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039bc:	2201      	movs	r2, #1
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	409a      	lsls	r2, r3
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4311      	orrs	r1, r2
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	3218      	adds	r2, #24
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	50d1      	str	r1, [r2, r3]
 80039e6:	e00f      	b.n	8003a08 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039f2:	431a      	orrs	r2, r3
 80039f4:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80039fe:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	3218      	adds	r2, #24
 8003a04:	0112      	lsls	r2, r2, #4
 8003a06:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3318      	adds	r3, #24
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	18cb      	adds	r3, r1, r3
 8003a18:	3304      	adds	r3, #4
 8003a1a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	7d1b      	ldrb	r3, [r3, #20]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d112      	bne.n	8003a4a <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	18d3      	adds	r3, r2, r3
 8003a30:	3304      	adds	r3, #4
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6819      	ldr	r1, [r3, #0]
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	3318      	adds	r3, #24
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	18cb      	adds	r3, r1, r3
 8003a46:	3304      	adds	r3, #4
 8003a48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3307      	adds	r3, #7
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	061a      	lsls	r2, r3, #24
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3306      	adds	r3, #6
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3305      	adds	r3, #5
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	6979      	ldr	r1, [r7, #20]
 8003a76:	23c6      	movs	r3, #198	; 0xc6
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	0109      	lsls	r1, r1, #4
 8003a7c:	1841      	adds	r1, r0, r1
 8003a7e:	18cb      	adds	r3, r1, r3
 8003a80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3303      	adds	r3, #3
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	061a      	lsls	r2, r3, #24
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	041b      	lsls	r3, r3, #16
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3301      	adds	r3, #1
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	6979      	ldr	r1, [r7, #20]
 8003aac:	23c4      	movs	r3, #196	; 0xc4
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	0109      	lsls	r1, r1, #4
 8003ab2:	1841      	adds	r1, r0, r1
 8003ab4:	18cb      	adds	r3, r1, r3
 8003ab6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	3218      	adds	r2, #24
 8003ac0:	0112      	lsls	r2, r2, #4
 8003ac2:	58d2      	ldr	r2, [r2, r3]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4311      	orrs	r1, r2
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	3218      	adds	r2, #24
 8003ad0:	0112      	lsls	r2, r2, #4
 8003ad2:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e010      	b.n	8003afa <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	2280      	movs	r2, #128	; 0x80
 8003ade:	0392      	lsls	r2, r2, #14
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e007      	b.n	8003afa <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	2280      	movs	r2, #128	; 0x80
 8003af0:	02d2      	lsls	r2, r2, #11
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
  }
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b008      	add	sp, #32
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	1dfb      	adds	r3, r7, #7
 8003b0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b10:	1dfb      	adds	r3, r7, #7
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b7f      	cmp	r3, #127	; 0x7f
 8003b16:	d809      	bhi.n	8003b2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b18:	1dfb      	adds	r3, r7, #7
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	231f      	movs	r3, #31
 8003b20:	401a      	ands	r2, r3
 8003b22:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <__NVIC_EnableIRQ+0x30>)
 8003b24:	2101      	movs	r1, #1
 8003b26:	4091      	lsls	r1, r2
 8003b28:	000a      	movs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
  }
}
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b002      	add	sp, #8
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	e000e100 	.word	0xe000e100

08003b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	0002      	movs	r2, r0
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	1dfb      	adds	r3, r7, #7
 8003b44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b4c:	d828      	bhi.n	8003ba0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b4e:	4a2f      	ldr	r2, [pc, #188]	; (8003c0c <__NVIC_SetPriority+0xd4>)
 8003b50:	1dfb      	adds	r3, r7, #7
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	b25b      	sxtb	r3, r3
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	33c0      	adds	r3, #192	; 0xc0
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	589b      	ldr	r3, [r3, r2]
 8003b5e:	1dfa      	adds	r2, r7, #7
 8003b60:	7812      	ldrb	r2, [r2, #0]
 8003b62:	0011      	movs	r1, r2
 8003b64:	2203      	movs	r2, #3
 8003b66:	400a      	ands	r2, r1
 8003b68:	00d2      	lsls	r2, r2, #3
 8003b6a:	21ff      	movs	r1, #255	; 0xff
 8003b6c:	4091      	lsls	r1, r2
 8003b6e:	000a      	movs	r2, r1
 8003b70:	43d2      	mvns	r2, r2
 8003b72:	401a      	ands	r2, r3
 8003b74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	22ff      	movs	r2, #255	; 0xff
 8003b7c:	401a      	ands	r2, r3
 8003b7e:	1dfb      	adds	r3, r7, #7
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	0018      	movs	r0, r3
 8003b84:	2303      	movs	r3, #3
 8003b86:	4003      	ands	r3, r0
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b8c:	481f      	ldr	r0, [pc, #124]	; (8003c0c <__NVIC_SetPriority+0xd4>)
 8003b8e:	1dfb      	adds	r3, r7, #7
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	b25b      	sxtb	r3, r3
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	430a      	orrs	r2, r1
 8003b98:	33c0      	adds	r3, #192	; 0xc0
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003b9e:	e031      	b.n	8003c04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ba0:	4a1b      	ldr	r2, [pc, #108]	; (8003c10 <__NVIC_SetPriority+0xd8>)
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	230f      	movs	r3, #15
 8003baa:	400b      	ands	r3, r1
 8003bac:	3b08      	subs	r3, #8
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	3306      	adds	r3, #6
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	18d3      	adds	r3, r2, r3
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	1dfa      	adds	r2, r7, #7
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	0011      	movs	r1, r2
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	00d2      	lsls	r2, r2, #3
 8003bc6:	21ff      	movs	r1, #255	; 0xff
 8003bc8:	4091      	lsls	r1, r2
 8003bca:	000a      	movs	r2, r1
 8003bcc:	43d2      	mvns	r2, r2
 8003bce:	401a      	ands	r2, r3
 8003bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	019b      	lsls	r3, r3, #6
 8003bd6:	22ff      	movs	r2, #255	; 0xff
 8003bd8:	401a      	ands	r2, r3
 8003bda:	1dfb      	adds	r3, r7, #7
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	0018      	movs	r0, r3
 8003be0:	2303      	movs	r3, #3
 8003be2:	4003      	ands	r3, r0
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003be8:	4809      	ldr	r0, [pc, #36]	; (8003c10 <__NVIC_SetPriority+0xd8>)
 8003bea:	1dfb      	adds	r3, r7, #7
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	001c      	movs	r4, r3
 8003bf0:	230f      	movs	r3, #15
 8003bf2:	4023      	ands	r3, r4
 8003bf4:	3b08      	subs	r3, #8
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	3306      	adds	r3, #6
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	18c3      	adds	r3, r0, r3
 8003c00:	3304      	adds	r3, #4
 8003c02:	601a      	str	r2, [r3, #0]
}
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b003      	add	sp, #12
 8003c0a:	bd90      	pop	{r4, r7, pc}
 8003c0c:	e000e100 	.word	0xe000e100
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <SysTick_Config+0x40>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c26:	2301      	movs	r3, #1
 8003c28:	e010      	b.n	8003c4c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <SysTick_Config+0x44>)
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	3a01      	subs	r2, #1
 8003c30:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c32:	2301      	movs	r3, #1
 8003c34:	425b      	negs	r3, r3
 8003c36:	2103      	movs	r1, #3
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f7ff ff7d 	bl	8003b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <SysTick_Config+0x44>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <SysTick_Config+0x44>)
 8003c46:	2207      	movs	r2, #7
 8003c48:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b002      	add	sp, #8
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	00ffffff 	.word	0x00ffffff
 8003c58:	e000e010 	.word	0xe000e010

08003c5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	210f      	movs	r1, #15
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	1c02      	adds	r2, r0, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	187b      	adds	r3, r7, r1
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	b25b      	sxtb	r3, r3
 8003c76:	0011      	movs	r1, r2
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7ff ff5d 	bl	8003b38 <__NVIC_SetPriority>
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b004      	add	sp, #16
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	1dfb      	adds	r3, r7, #7
 8003c90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c92:	1dfb      	adds	r3, r7, #7
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	b25b      	sxtb	r3, r3
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7ff ff33 	bl	8003b04 <__NVIC_EnableIRQ>
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b002      	add	sp, #8
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7ff ffaf 	bl	8003c14 <SysTick_Config>
 8003cb6:	0003      	movs	r3, r0
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b002      	add	sp, #8
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cce:	e149      	b.n	8003f64 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4091      	lsls	r1, r2
 8003cda:	000a      	movs	r2, r1
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d100      	bne.n	8003ce8 <HAL_GPIO_Init+0x28>
 8003ce6:	e13a      	b.n	8003f5e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d003      	beq.n	8003cf8 <HAL_GPIO_Init+0x38>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b12      	cmp	r3, #18
 8003cf6:	d123      	bne.n	8003d40 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	08da      	lsrs	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3208      	adds	r2, #8
 8003d00:	0092      	lsls	r2, r2, #2
 8003d02:	58d3      	ldr	r3, [r2, r3]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2207      	movs	r2, #7
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	220f      	movs	r2, #15
 8003d10:	409a      	lsls	r2, r3
 8003d12:	0013      	movs	r3, r2
 8003d14:	43da      	mvns	r2, r3
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2107      	movs	r1, #7
 8003d24:	400b      	ands	r3, r1
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	0013      	movs	r3, r2
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	08da      	lsrs	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3208      	adds	r2, #8
 8003d3a:	0092      	lsls	r2, r2, #2
 8003d3c:	6939      	ldr	r1, [r7, #16]
 8003d3e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	0013      	movs	r3, r2
 8003d50:	43da      	mvns	r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	401a      	ands	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	409a      	lsls	r2, r3
 8003d66:	0013      	movs	r3, r2
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d00b      	beq.n	8003d94 <HAL_GPIO_Init+0xd4>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d007      	beq.n	8003d94 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d88:	2b11      	cmp	r3, #17
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b12      	cmp	r3, #18
 8003d92:	d130      	bne.n	8003df6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	2203      	movs	r2, #3
 8003da0:	409a      	lsls	r2, r3
 8003da2:	0013      	movs	r3, r2
 8003da4:	43da      	mvns	r2, r3
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	409a      	lsls	r2, r3
 8003db6:	0013      	movs	r3, r2
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dca:	2201      	movs	r2, #1
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	2201      	movs	r2, #1
 8003de2:	401a      	ands	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	409a      	lsls	r2, r3
 8003de8:	0013      	movs	r3, r2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	2203      	movs	r2, #3
 8003e02:	409a      	lsls	r2, r3
 8003e04:	0013      	movs	r3, r2
 8003e06:	43da      	mvns	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	409a      	lsls	r2, r3
 8003e18:	0013      	movs	r3, r2
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	055b      	lsls	r3, r3, #21
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d100      	bne.n	8003e34 <HAL_GPIO_Init+0x174>
 8003e32:	e094      	b.n	8003f5e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e34:	4b51      	ldr	r3, [pc, #324]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	619a      	str	r2, [r3, #24]
 8003e40:	4b4e      	ldr	r3, [pc, #312]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2201      	movs	r2, #1
 8003e46:	4013      	ands	r3, r2
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e4c:	4a4c      	ldr	r2, [pc, #304]	; (8003f80 <HAL_GPIO_Init+0x2c0>)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	3302      	adds	r3, #2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	589b      	ldr	r3, [r3, r2]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	4013      	ands	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	220f      	movs	r2, #15
 8003e64:	409a      	lsls	r2, r3
 8003e66:	0013      	movs	r3, r2
 8003e68:	43da      	mvns	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	2390      	movs	r3, #144	; 0x90
 8003e74:	05db      	lsls	r3, r3, #23
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d00d      	beq.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a41      	ldr	r2, [pc, #260]	; (8003f84 <HAL_GPIO_Init+0x2c4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <HAL_GPIO_Init+0x1d2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a40      	ldr	r2, [pc, #256]	; (8003f88 <HAL_GPIO_Init+0x2c8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_GPIO_Init+0x1ce>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e004      	b.n	8003e98 <HAL_GPIO_Init+0x1d8>
 8003e8e:	2305      	movs	r3, #5
 8003e90:	e002      	b.n	8003e98 <HAL_GPIO_Init+0x1d8>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <HAL_GPIO_Init+0x1d8>
 8003e96:	2300      	movs	r3, #0
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	0092      	lsls	r2, r2, #2
 8003ea0:	4093      	lsls	r3, r2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ea8:	4935      	ldr	r1, [pc, #212]	; (8003f80 <HAL_GPIO_Init+0x2c0>)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	089b      	lsrs	r3, r3, #2
 8003eae:	3302      	adds	r3, #2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eb6:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	025b      	lsls	r3, r3, #9
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003eda:	4b2c      	ldr	r3, [pc, #176]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003ee0:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	43da      	mvns	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4013      	ands	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	029b      	lsls	r3, r3, #10
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f04:	4b21      	ldr	r3, [pc, #132]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f0a:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	43da      	mvns	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	035b      	lsls	r3, r3, #13
 8003f22:	4013      	ands	r3, r2
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f2e:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f34:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	43da      	mvns	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	039b      	lsls	r3, r3, #14
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	3301      	adds	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	40da      	lsrs	r2, r3
 8003f6c:	1e13      	subs	r3, r2, #0
 8003f6e:	d000      	beq.n	8003f72 <HAL_GPIO_Init+0x2b2>
 8003f70:	e6ae      	b.n	8003cd0 <HAL_GPIO_Init+0x10>
  } 
}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b006      	add	sp, #24
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40010000 	.word	0x40010000
 8003f84:	48000400 	.word	0x48000400
 8003f88:	48000800 	.word	0x48000800
 8003f8c:	40010400 	.word	0x40010400

08003f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	000a      	movs	r2, r1
 8003f9a:	1cbb      	adds	r3, r7, #2
 8003f9c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	1cba      	adds	r2, r7, #2
 8003fa4:	8812      	ldrh	r2, [r2, #0]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003faa:	230f      	movs	r3, #15
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	e003      	b.n	8003fbc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fb4:	230f      	movs	r3, #15
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003fbc:	230f      	movs	r3, #15
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	781b      	ldrb	r3, [r3, #0]
  }
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b004      	add	sp, #16
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	0008      	movs	r0, r1
 8003fd4:	0011      	movs	r1, r2
 8003fd6:	1cbb      	adds	r3, r7, #2
 8003fd8:	1c02      	adds	r2, r0, #0
 8003fda:	801a      	strh	r2, [r3, #0]
 8003fdc:	1c7b      	adds	r3, r7, #1
 8003fde:	1c0a      	adds	r2, r1, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fe2:	1c7b      	adds	r3, r7, #1
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fea:	1cbb      	adds	r3, r7, #2
 8003fec:	881a      	ldrh	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ff2:	e003      	b.n	8003ffc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ff4:	1cbb      	adds	r3, r7, #2
 8003ff6:	881a      	ldrh	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b002      	add	sp, #8
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e082      	b.n	800411c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2241      	movs	r2, #65	; 0x41
 800401a:	5c9b      	ldrb	r3, [r3, r2]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2240      	movs	r2, #64	; 0x40
 8004026:	2100      	movs	r1, #0
 8004028:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0018      	movs	r0, r3
 800402e:	f7ff f839 	bl	80030a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2241      	movs	r2, #65	; 0x41
 8004036:	2124      	movs	r1, #36	; 0x24
 8004038:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2101      	movs	r1, #1
 8004046:	438a      	bics	r2, r1
 8004048:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4934      	ldr	r1, [pc, #208]	; (8004124 <HAL_I2C_Init+0x120>)
 8004054:	400a      	ands	r2, r1
 8004056:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4931      	ldr	r1, [pc, #196]	; (8004128 <HAL_I2C_Init+0x124>)
 8004064:	400a      	ands	r2, r1
 8004066:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d108      	bne.n	8004082 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	0209      	lsls	r1, r1, #8
 800407c:	430a      	orrs	r2, r1
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	e007      	b.n	8004092 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2184      	movs	r1, #132	; 0x84
 800408c:	0209      	lsls	r1, r1, #8
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d104      	bne.n	80040a4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	0112      	lsls	r2, r2, #4
 80040a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	491f      	ldr	r1, [pc, #124]	; (800412c <HAL_I2C_Init+0x128>)
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	491a      	ldr	r1, [pc, #104]	; (8004128 <HAL_I2C_Init+0x124>)
 80040c0:	400a      	ands	r2, r1
 80040c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	0011      	movs	r1, r2
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	021a      	lsls	r2, r3, #8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69d9      	ldr	r1, [r3, #28]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1a      	ldr	r2, [r3, #32]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	430a      	orrs	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2241      	movs	r2, #65	; 0x41
 8004108:	2120      	movs	r1, #32
 800410a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2242      	movs	r2, #66	; 0x42
 8004116:	2100      	movs	r1, #0
 8004118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b002      	add	sp, #8
 8004122:	bd80      	pop	{r7, pc}
 8004124:	f0ffffff 	.word	0xf0ffffff
 8004128:	ffff7fff 	.word	0xffff7fff
 800412c:	02008000 	.word	0x02008000

08004130 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b089      	sub	sp, #36	; 0x24
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	000c      	movs	r4, r1
 800413a:	0010      	movs	r0, r2
 800413c:	0019      	movs	r1, r3
 800413e:	230a      	movs	r3, #10
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	1c22      	adds	r2, r4, #0
 8004144:	801a      	strh	r2, [r3, #0]
 8004146:	2308      	movs	r3, #8
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	1c02      	adds	r2, r0, #0
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	1dbb      	adds	r3, r7, #6
 8004150:	1c0a      	adds	r2, r1, #0
 8004152:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2241      	movs	r2, #65	; 0x41
 8004158:	5c9b      	ldrb	r3, [r3, r2]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b20      	cmp	r3, #32
 800415e:	d000      	beq.n	8004162 <HAL_I2C_Mem_Write+0x32>
 8004160:	e10c      	b.n	800437c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <HAL_I2C_Mem_Write+0x42>
 8004168:	232c      	movs	r3, #44	; 0x2c
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2280      	movs	r2, #128	; 0x80
 8004176:	0092      	lsls	r2, r2, #2
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0ff      	b.n	800437e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2240      	movs	r2, #64	; 0x40
 8004182:	5c9b      	ldrb	r3, [r3, r2]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_I2C_Mem_Write+0x5c>
 8004188:	2302      	movs	r3, #2
 800418a:	e0f8      	b.n	800437e <HAL_I2C_Mem_Write+0x24e>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	2101      	movs	r1, #1
 8004192:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004194:	f7ff f974 	bl	8003480 <HAL_GetTick>
 8004198:	0003      	movs	r3, r0
 800419a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	0219      	lsls	r1, r3, #8
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	2319      	movs	r3, #25
 80041a8:	2201      	movs	r2, #1
 80041aa:	f000 fb0b 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 80041ae:	1e03      	subs	r3, r0, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e0e3      	b.n	800437e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2241      	movs	r2, #65	; 0x41
 80041ba:	2121      	movs	r1, #33	; 0x21
 80041bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2242      	movs	r2, #66	; 0x42
 80041c2:	2140      	movs	r1, #64	; 0x40
 80041c4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	222c      	movs	r2, #44	; 0x2c
 80041d6:	18ba      	adds	r2, r7, r2
 80041d8:	8812      	ldrh	r2, [r2, #0]
 80041da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041e2:	1dbb      	adds	r3, r7, #6
 80041e4:	881c      	ldrh	r4, [r3, #0]
 80041e6:	2308      	movs	r3, #8
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	881a      	ldrh	r2, [r3, #0]
 80041ec:	230a      	movs	r3, #10
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	8819      	ldrh	r1, [r3, #0]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	0023      	movs	r3, r4
 80041fe:	f000 f9f9 	bl	80045f4 <I2C_RequestMemoryWrite>
 8004202:	1e03      	subs	r3, r0, #0
 8004204:	d005      	beq.n	8004212 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2240      	movs	r2, #64	; 0x40
 800420a:	2100      	movs	r1, #0
 800420c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0b5      	b.n	800437e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	2bff      	cmp	r3, #255	; 0xff
 800421a:	d911      	bls.n	8004240 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	22ff      	movs	r2, #255	; 0xff
 8004220:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	b2da      	uxtb	r2, r3
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	045c      	lsls	r4, r3, #17
 800422c:	230a      	movs	r3, #10
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	8819      	ldrh	r1, [r3, #0]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	2300      	movs	r3, #0
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	0023      	movs	r3, r4
 800423a:	f000 fbe3 	bl	8004a04 <I2C_TransferConfig>
 800423e:	e012      	b.n	8004266 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	b2da      	uxtb	r2, r3
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	049c      	lsls	r4, r3, #18
 8004254:	230a      	movs	r3, #10
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	8819      	ldrh	r1, [r3, #0]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	2300      	movs	r3, #0
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	0023      	movs	r3, r4
 8004262:	f000 fbcf 	bl	8004a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	0018      	movs	r0, r3
 800426e:	f000 fae8 	bl	8004842 <I2C_WaitOnTXISFlagUntilTimeout>
 8004272:	1e03      	subs	r3, r0, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e081      	b.n	800437e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	781a      	ldrb	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d03a      	beq.n	800432a <HAL_I2C_Mem_Write+0x1fa>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d136      	bne.n	800432a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	0013      	movs	r3, r2
 80042c6:	2200      	movs	r2, #0
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	f000 fa7b 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 80042ce:	1e03      	subs	r3, r0, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e053      	b.n	800437e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2bff      	cmp	r3, #255	; 0xff
 80042de:	d911      	bls.n	8004304 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	22ff      	movs	r2, #255	; 0xff
 80042e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	045c      	lsls	r4, r3, #17
 80042f0:	230a      	movs	r3, #10
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	8819      	ldrh	r1, [r3, #0]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	2300      	movs	r3, #0
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	0023      	movs	r3, r4
 80042fe:	f000 fb81 	bl	8004a04 <I2C_TransferConfig>
 8004302:	e012      	b.n	800432a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	b2da      	uxtb	r2, r3
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	049c      	lsls	r4, r3, #18
 8004318:	230a      	movs	r3, #10
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	8819      	ldrh	r1, [r3, #0]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	2300      	movs	r3, #0
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	0023      	movs	r3, r4
 8004326:	f000 fb6d 	bl	8004a04 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d198      	bne.n	8004266 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	0018      	movs	r0, r3
 800433c:	f000 fac0 	bl	80048c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e01a      	b.n	800437e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2220      	movs	r2, #32
 800434e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	490b      	ldr	r1, [pc, #44]	; (8004388 <HAL_I2C_Mem_Write+0x258>)
 800435c:	400a      	ands	r2, r1
 800435e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2241      	movs	r2, #65	; 0x41
 8004364:	2120      	movs	r1, #32
 8004366:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2242      	movs	r2, #66	; 0x42
 800436c:	2100      	movs	r1, #0
 800436e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2240      	movs	r2, #64	; 0x40
 8004374:	2100      	movs	r1, #0
 8004376:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b007      	add	sp, #28
 8004384:	bd90      	pop	{r4, r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	fe00e800 	.word	0xfe00e800

0800438c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b089      	sub	sp, #36	; 0x24
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	000c      	movs	r4, r1
 8004396:	0010      	movs	r0, r2
 8004398:	0019      	movs	r1, r3
 800439a:	230a      	movs	r3, #10
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	1c22      	adds	r2, r4, #0
 80043a0:	801a      	strh	r2, [r3, #0]
 80043a2:	2308      	movs	r3, #8
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	1c02      	adds	r2, r0, #0
 80043a8:	801a      	strh	r2, [r3, #0]
 80043aa:	1dbb      	adds	r3, r7, #6
 80043ac:	1c0a      	adds	r2, r1, #0
 80043ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2241      	movs	r2, #65	; 0x41
 80043b4:	5c9b      	ldrb	r3, [r3, r2]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d000      	beq.n	80043be <HAL_I2C_Mem_Read+0x32>
 80043bc:	e110      	b.n	80045e0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <HAL_I2C_Mem_Read+0x42>
 80043c4:	232c      	movs	r3, #44	; 0x2c
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d105      	bne.n	80043da <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2280      	movs	r2, #128	; 0x80
 80043d2:	0092      	lsls	r2, r2, #2
 80043d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e103      	b.n	80045e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2240      	movs	r2, #64	; 0x40
 80043de:	5c9b      	ldrb	r3, [r3, r2]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_I2C_Mem_Read+0x5c>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e0fc      	b.n	80045e2 <HAL_I2C_Mem_Read+0x256>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2240      	movs	r2, #64	; 0x40
 80043ec:	2101      	movs	r1, #1
 80043ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043f0:	f7ff f846 	bl	8003480 <HAL_GetTick>
 80043f4:	0003      	movs	r3, r0
 80043f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	0219      	lsls	r1, r3, #8
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2319      	movs	r3, #25
 8004404:	2201      	movs	r2, #1
 8004406:	f000 f9dd 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 800440a:	1e03      	subs	r3, r0, #0
 800440c:	d001      	beq.n	8004412 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e0e7      	b.n	80045e2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2241      	movs	r2, #65	; 0x41
 8004416:	2122      	movs	r1, #34	; 0x22
 8004418:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2242      	movs	r2, #66	; 0x42
 800441e:	2140      	movs	r1, #64	; 0x40
 8004420:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800442c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	222c      	movs	r2, #44	; 0x2c
 8004432:	18ba      	adds	r2, r7, r2
 8004434:	8812      	ldrh	r2, [r2, #0]
 8004436:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800443e:	1dbb      	adds	r3, r7, #6
 8004440:	881c      	ldrh	r4, [r3, #0]
 8004442:	2308      	movs	r3, #8
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	230a      	movs	r3, #10
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	8819      	ldrh	r1, [r3, #0]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	0023      	movs	r3, r4
 800445a:	f000 f92f 	bl	80046bc <I2C_RequestMemoryRead>
 800445e:	1e03      	subs	r3, r0, #0
 8004460:	d005      	beq.n	800446e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2240      	movs	r2, #64	; 0x40
 8004466:	2100      	movs	r1, #0
 8004468:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e0b9      	b.n	80045e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	2bff      	cmp	r3, #255	; 0xff
 8004476:	d911      	bls.n	800449c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	22ff      	movs	r2, #255	; 0xff
 800447c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004482:	b2da      	uxtb	r2, r3
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	045c      	lsls	r4, r3, #17
 8004488:	230a      	movs	r3, #10
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	8819      	ldrh	r1, [r3, #0]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	4b56      	ldr	r3, [pc, #344]	; (80045ec <HAL_I2C_Mem_Read+0x260>)
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	0023      	movs	r3, r4
 8004496:	f000 fab5 	bl	8004a04 <I2C_TransferConfig>
 800449a:	e012      	b.n	80044c2 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	049c      	lsls	r4, r3, #18
 80044b0:	230a      	movs	r3, #10
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	8819      	ldrh	r1, [r3, #0]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	4b4c      	ldr	r3, [pc, #304]	; (80045ec <HAL_I2C_Mem_Read+0x260>)
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	0023      	movs	r3, r4
 80044be:	f000 faa1 	bl	8004a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80044c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	0013      	movs	r3, r2
 80044cc:	2200      	movs	r2, #0
 80044ce:	2104      	movs	r1, #4
 80044d0:	f000 f978 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d001      	beq.n	80044dc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e082      	b.n	80045e2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d03a      	beq.n	800458e <HAL_I2C_Mem_Read+0x202>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451c:	2b00      	cmp	r3, #0
 800451e:	d136      	bne.n	800458e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	0013      	movs	r3, r2
 800452a:	2200      	movs	r2, #0
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	f000 f949 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 8004532:	1e03      	subs	r3, r0, #0
 8004534:	d001      	beq.n	800453a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e053      	b.n	80045e2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	2bff      	cmp	r3, #255	; 0xff
 8004542:	d911      	bls.n	8004568 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	22ff      	movs	r2, #255	; 0xff
 8004548:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454e:	b2da      	uxtb	r2, r3
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	045c      	lsls	r4, r3, #17
 8004554:	230a      	movs	r3, #10
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	8819      	ldrh	r1, [r3, #0]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	2300      	movs	r3, #0
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	0023      	movs	r3, r4
 8004562:	f000 fa4f 	bl	8004a04 <I2C_TransferConfig>
 8004566:	e012      	b.n	800458e <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	b2da      	uxtb	r2, r3
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	049c      	lsls	r4, r3, #18
 800457c:	230a      	movs	r3, #10
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	8819      	ldrh	r1, [r3, #0]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	2300      	movs	r3, #0
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	0023      	movs	r3, r4
 800458a:	f000 fa3b 	bl	8004a04 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d194      	bne.n	80044c2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	0018      	movs	r0, r3
 80045a0:	f000 f98e 	bl	80048c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045a4:	1e03      	subs	r3, r0, #0
 80045a6:	d001      	beq.n	80045ac <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e01a      	b.n	80045e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2220      	movs	r2, #32
 80045b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	490c      	ldr	r1, [pc, #48]	; (80045f0 <HAL_I2C_Mem_Read+0x264>)
 80045c0:	400a      	ands	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2241      	movs	r2, #65	; 0x41
 80045c8:	2120      	movs	r1, #32
 80045ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2242      	movs	r2, #66	; 0x42
 80045d0:	2100      	movs	r1, #0
 80045d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2240      	movs	r2, #64	; 0x40
 80045d8:	2100      	movs	r1, #0
 80045da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	0018      	movs	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b007      	add	sp, #28
 80045e8:	bd90      	pop	{r4, r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	80002400 	.word	0x80002400
 80045f0:	fe00e800 	.word	0xfe00e800

080045f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b5b0      	push	{r4, r5, r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	000c      	movs	r4, r1
 80045fe:	0010      	movs	r0, r2
 8004600:	0019      	movs	r1, r3
 8004602:	250a      	movs	r5, #10
 8004604:	197b      	adds	r3, r7, r5
 8004606:	1c22      	adds	r2, r4, #0
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	2308      	movs	r3, #8
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	1c02      	adds	r2, r0, #0
 8004610:	801a      	strh	r2, [r3, #0]
 8004612:	1dbb      	adds	r3, r7, #6
 8004614:	1c0a      	adds	r2, r1, #0
 8004616:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004618:	1dbb      	adds	r3, r7, #6
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	045c      	lsls	r4, r3, #17
 8004622:	197b      	adds	r3, r7, r5
 8004624:	8819      	ldrh	r1, [r3, #0]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <I2C_RequestMemoryWrite+0xc4>)
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	0023      	movs	r3, r4
 800462e:	f000 f9e9 	bl	8004a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004634:	6a39      	ldr	r1, [r7, #32]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	0018      	movs	r0, r3
 800463a:	f000 f902 	bl	8004842 <I2C_WaitOnTXISFlagUntilTimeout>
 800463e:	1e03      	subs	r3, r0, #0
 8004640:	d001      	beq.n	8004646 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e033      	b.n	80046ae <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004646:	1dbb      	adds	r3, r7, #6
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d107      	bne.n	800465e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800464e:	2308      	movs	r3, #8
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28
 800465c:	e019      	b.n	8004692 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800465e:	2308      	movs	r3, #8
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	b29b      	uxth	r3, r3
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004672:	6a39      	ldr	r1, [r7, #32]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	0018      	movs	r0, r3
 8004678:	f000 f8e3 	bl	8004842 <I2C_WaitOnTXISFlagUntilTimeout>
 800467c:	1e03      	subs	r3, r0, #0
 800467e:	d001      	beq.n	8004684 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e014      	b.n	80046ae <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004684:	2308      	movs	r3, #8
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b2da      	uxtb	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004692:	6a3a      	ldr	r2, [r7, #32]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	0013      	movs	r3, r2
 800469c:	2200      	movs	r2, #0
 800469e:	2180      	movs	r1, #128	; 0x80
 80046a0:	f000 f890 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 80046a4:	1e03      	subs	r3, r0, #0
 80046a6:	d001      	beq.n	80046ac <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	0018      	movs	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b004      	add	sp, #16
 80046b4:	bdb0      	pop	{r4, r5, r7, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	80002000 	.word	0x80002000

080046bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b5b0      	push	{r4, r5, r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	000c      	movs	r4, r1
 80046c6:	0010      	movs	r0, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	250a      	movs	r5, #10
 80046cc:	197b      	adds	r3, r7, r5
 80046ce:	1c22      	adds	r2, r4, #0
 80046d0:	801a      	strh	r2, [r3, #0]
 80046d2:	2308      	movs	r3, #8
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	1c02      	adds	r2, r0, #0
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	1dbb      	adds	r3, r7, #6
 80046dc:	1c0a      	adds	r2, r1, #0
 80046de:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80046e0:	1dbb      	adds	r3, r7, #6
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	197b      	adds	r3, r7, r5
 80046e8:	8819      	ldrh	r1, [r3, #0]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <I2C_RequestMemoryRead+0xc0>)
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	2300      	movs	r3, #0
 80046f2:	f000 f987 	bl	8004a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f8:	6a39      	ldr	r1, [r7, #32]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f000 f8a0 	bl	8004842 <I2C_WaitOnTXISFlagUntilTimeout>
 8004702:	1e03      	subs	r3, r0, #0
 8004704:	d001      	beq.n	800470a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e033      	b.n	8004772 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800470a:	1dbb      	adds	r3, r7, #6
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004712:	2308      	movs	r3, #8
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	629a      	str	r2, [r3, #40]	; 0x28
 8004720:	e019      	b.n	8004756 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004722:	2308      	movs	r3, #8
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	b29b      	uxth	r3, r3
 800472c:	b2da      	uxtb	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004736:	6a39      	ldr	r1, [r7, #32]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	0018      	movs	r0, r3
 800473c:	f000 f881 	bl	8004842 <I2C_WaitOnTXISFlagUntilTimeout>
 8004740:	1e03      	subs	r3, r0, #0
 8004742:	d001      	beq.n	8004748 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e014      	b.n	8004772 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004748:	2308      	movs	r3, #8
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004756:	6a3a      	ldr	r2, [r7, #32]
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	0013      	movs	r3, r2
 8004760:	2200      	movs	r2, #0
 8004762:	2140      	movs	r1, #64	; 0x40
 8004764:	f000 f82e 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 8004768:	1e03      	subs	r3, r0, #0
 800476a:	d001      	beq.n	8004770 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	0018      	movs	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	b004      	add	sp, #16
 8004778:	bdb0      	pop	{r4, r5, r7, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	80002000 	.word	0x80002000

08004780 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2202      	movs	r2, #2
 8004790:	4013      	ands	r3, r2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d103      	bne.n	800479e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2201      	movs	r2, #1
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d007      	beq.n	80047bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2101      	movs	r1, #1
 80047b8:	430a      	orrs	r2, r1
 80047ba:	619a      	str	r2, [r3, #24]
  }
}
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	b002      	add	sp, #8
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	1dfb      	adds	r3, r7, #7
 80047d2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d4:	e021      	b.n	800481a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	3301      	adds	r3, #1
 80047da:	d01e      	beq.n	800481a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047dc:	f7fe fe50 	bl	8003480 <HAL_GetTick>
 80047e0:	0002      	movs	r2, r0
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d302      	bcc.n	80047f2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d113      	bne.n	800481a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	2220      	movs	r2, #32
 80047f8:	431a      	orrs	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2241      	movs	r2, #65	; 0x41
 8004802:	2120      	movs	r1, #32
 8004804:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2242      	movs	r2, #66	; 0x42
 800480a:	2100      	movs	r1, #0
 800480c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2240      	movs	r2, #64	; 0x40
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e00f      	b.n	800483a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	4013      	ands	r3, r2
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	425a      	negs	r2, r3
 800482a:	4153      	adcs	r3, r2
 800482c:	b2db      	uxtb	r3, r3
 800482e:	001a      	movs	r2, r3
 8004830:	1dfb      	adds	r3, r7, #7
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d0ce      	beq.n	80047d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	0018      	movs	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	b004      	add	sp, #16
 8004840:	bd80      	pop	{r7, pc}

08004842 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800484e:	e02b      	b.n	80048a8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	0018      	movs	r0, r3
 8004858:	f000 f86e 	bl	8004938 <I2C_IsAcknowledgeFailed>
 800485c:	1e03      	subs	r3, r0, #0
 800485e:	d001      	beq.n	8004864 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e029      	b.n	80048b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	3301      	adds	r3, #1
 8004868:	d01e      	beq.n	80048a8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fe fe09 	bl	8003480 <HAL_GetTick>
 800486e:	0002      	movs	r2, r0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d113      	bne.n	80048a8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004884:	2220      	movs	r2, #32
 8004886:	431a      	orrs	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2241      	movs	r2, #65	; 0x41
 8004890:	2120      	movs	r1, #32
 8004892:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2242      	movs	r2, #66	; 0x42
 8004898:	2100      	movs	r1, #0
 800489a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2240      	movs	r2, #64	; 0x40
 80048a0:	2100      	movs	r1, #0
 80048a2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e007      	b.n	80048b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	2202      	movs	r2, #2
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d1cc      	bne.n	8004850 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b004      	add	sp, #16
 80048be:	bd80      	pop	{r7, pc}

080048c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048cc:	e028      	b.n	8004920 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f000 f82f 	bl	8004938 <I2C_IsAcknowledgeFailed>
 80048da:	1e03      	subs	r3, r0, #0
 80048dc:	d001      	beq.n	80048e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e026      	b.n	8004930 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fe fdcd 	bl	8003480 <HAL_GetTick>
 80048e6:	0002      	movs	r2, r0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d113      	bne.n	8004920 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	2220      	movs	r2, #32
 80048fe:	431a      	orrs	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2241      	movs	r2, #65	; 0x41
 8004908:	2120      	movs	r1, #32
 800490a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2242      	movs	r2, #66	; 0x42
 8004910:	2100      	movs	r1, #0
 8004912:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2240      	movs	r2, #64	; 0x40
 8004918:	2100      	movs	r1, #0
 800491a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e007      	b.n	8004930 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2220      	movs	r2, #32
 8004928:	4013      	ands	r3, r2
 800492a:	2b20      	cmp	r3, #32
 800492c:	d1cf      	bne.n	80048ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	0018      	movs	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	b004      	add	sp, #16
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2210      	movs	r2, #16
 800494c:	4013      	ands	r3, r2
 800494e:	2b10      	cmp	r3, #16
 8004950:	d151      	bne.n	80049f6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004952:	e021      	b.n	8004998 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	3301      	adds	r3, #1
 8004958:	d01e      	beq.n	8004998 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495a:	f7fe fd91 	bl	8003480 <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	429a      	cmp	r2, r3
 8004968:	d302      	bcc.n	8004970 <I2C_IsAcknowledgeFailed+0x38>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d113      	bne.n	8004998 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	2220      	movs	r2, #32
 8004976:	431a      	orrs	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2241      	movs	r2, #65	; 0x41
 8004980:	2120      	movs	r1, #32
 8004982:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2242      	movs	r2, #66	; 0x42
 8004988:	2100      	movs	r1, #0
 800498a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	2100      	movs	r1, #0
 8004992:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e02f      	b.n	80049f8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2220      	movs	r2, #32
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d1d6      	bne.n	8004954 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2210      	movs	r2, #16
 80049ac:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2220      	movs	r2, #32
 80049b4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7ff fee1 	bl	8004780 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	490d      	ldr	r1, [pc, #52]	; (8004a00 <I2C_IsAcknowledgeFailed+0xc8>)
 80049ca:	400a      	ands	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	2204      	movs	r2, #4
 80049d4:	431a      	orrs	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2241      	movs	r2, #65	; 0x41
 80049de:	2120      	movs	r1, #32
 80049e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2242      	movs	r2, #66	; 0x42
 80049e6:	2100      	movs	r1, #0
 80049e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2240      	movs	r2, #64	; 0x40
 80049ee:	2100      	movs	r1, #0
 80049f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b004      	add	sp, #16
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	fe00e800 	.word	0xfe00e800

08004a04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	0008      	movs	r0, r1
 8004a0e:	0011      	movs	r1, r2
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	240a      	movs	r4, #10
 8004a14:	193b      	adds	r3, r7, r4
 8004a16:	1c02      	adds	r2, r0, #0
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	2009      	movs	r0, #9
 8004a1c:	183b      	adds	r3, r7, r0
 8004a1e:	1c0a      	adds	r2, r1, #0
 8004a20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	6a3a      	ldr	r2, [r7, #32]
 8004a2a:	0d51      	lsrs	r1, r2, #21
 8004a2c:	2280      	movs	r2, #128	; 0x80
 8004a2e:	00d2      	lsls	r2, r2, #3
 8004a30:	400a      	ands	r2, r1
 8004a32:	490e      	ldr	r1, [pc, #56]	; (8004a6c <I2C_TransferConfig+0x68>)
 8004a34:	430a      	orrs	r2, r1
 8004a36:	43d2      	mvns	r2, r2
 8004a38:	401a      	ands	r2, r3
 8004a3a:	0011      	movs	r1, r2
 8004a3c:	193b      	adds	r3, r7, r4
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	059b      	lsls	r3, r3, #22
 8004a42:	0d9a      	lsrs	r2, r3, #22
 8004a44:	183b      	adds	r3, r7, r0
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	0418      	lsls	r0, r3, #16
 8004a4a:	23ff      	movs	r3, #255	; 0xff
 8004a4c:	041b      	lsls	r3, r3, #16
 8004a4e:	4003      	ands	r3, r0
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b005      	add	sp, #20
 8004a68:	bd90      	pop	{r4, r7, pc}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	03ff63ff 	.word	0x03ff63ff

08004a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2241      	movs	r2, #65	; 0x41
 8004a7e:	5c9b      	ldrb	r3, [r3, r2]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d138      	bne.n	8004af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2240      	movs	r2, #64	; 0x40
 8004a8a:	5c9b      	ldrb	r3, [r3, r2]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e032      	b.n	8004afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2240      	movs	r2, #64	; 0x40
 8004a98:	2101      	movs	r1, #1
 8004a9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2241      	movs	r2, #65	; 0x41
 8004aa0:	2124      	movs	r1, #36	; 0x24
 8004aa2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	438a      	bics	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4911      	ldr	r1, [pc, #68]	; (8004b04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004ac0:	400a      	ands	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2101      	movs	r1, #1
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2241      	movs	r2, #65	; 0x41
 8004ae8:	2120      	movs	r1, #32
 8004aea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2240      	movs	r2, #64	; 0x40
 8004af0:	2100      	movs	r1, #0
 8004af2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
  }
}
 8004afa:	0018      	movs	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b002      	add	sp, #8
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	ffffefff 	.word	0xffffefff

08004b08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2241      	movs	r2, #65	; 0x41
 8004b16:	5c9b      	ldrb	r3, [r3, r2]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d139      	bne.n	8004b92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2240      	movs	r2, #64	; 0x40
 8004b22:	5c9b      	ldrb	r3, [r3, r2]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e033      	b.n	8004b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2240      	movs	r2, #64	; 0x40
 8004b30:	2101      	movs	r1, #1
 8004b32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2241      	movs	r2, #65	; 0x41
 8004b38:	2124      	movs	r1, #36	; 0x24
 8004b3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2101      	movs	r1, #1
 8004b48:	438a      	bics	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2241      	movs	r2, #65	; 0x41
 8004b82:	2120      	movs	r1, #32
 8004b84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2240      	movs	r2, #64	; 0x40
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e000      	b.n	8004b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
  }
}
 8004b94:	0018      	movs	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b004      	add	sp, #16
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	fffff0ff 	.word	0xfffff0ff

08004ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d102      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f000 fb76 	bl	80052a0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d100      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x20>
 8004bbe:	e08e      	b.n	8004cde <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004bc0:	4bc5      	ldr	r3, [pc, #788]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	220c      	movs	r2, #12
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d00e      	beq.n	8004bea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bcc:	4bc2      	ldr	r3, [pc, #776]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	220c      	movs	r2, #12
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d117      	bne.n	8004c08 <HAL_RCC_OscConfig+0x68>
 8004bd8:	4bbf      	ldr	r3, [pc, #764]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	23c0      	movs	r3, #192	; 0xc0
 8004bde:	025b      	lsls	r3, r3, #9
 8004be0:	401a      	ands	r2, r3
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	025b      	lsls	r3, r3, #9
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d10e      	bne.n	8004c08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bea:	4bbb      	ldr	r3, [pc, #748]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	2380      	movs	r3, #128	; 0x80
 8004bf0:	029b      	lsls	r3, r3, #10
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d100      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x58>
 8004bf6:	e071      	b.n	8004cdc <HAL_RCC_OscConfig+0x13c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d000      	beq.n	8004c02 <HAL_RCC_OscConfig+0x62>
 8004c00:	e06c      	b.n	8004cdc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f000 fb4c 	bl	80052a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d107      	bne.n	8004c20 <HAL_RCC_OscConfig+0x80>
 8004c10:	4bb1      	ldr	r3, [pc, #708]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4bb0      	ldr	r3, [pc, #704]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c16:	2180      	movs	r1, #128	; 0x80
 8004c18:	0249      	lsls	r1, r1, #9
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e02f      	b.n	8004c80 <HAL_RCC_OscConfig+0xe0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10c      	bne.n	8004c42 <HAL_RCC_OscConfig+0xa2>
 8004c28:	4bab      	ldr	r3, [pc, #684]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4baa      	ldr	r3, [pc, #680]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c2e:	49ab      	ldr	r1, [pc, #684]	; (8004edc <HAL_RCC_OscConfig+0x33c>)
 8004c30:	400a      	ands	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	4ba8      	ldr	r3, [pc, #672]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4ba7      	ldr	r3, [pc, #668]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c3a:	49a9      	ldr	r1, [pc, #676]	; (8004ee0 <HAL_RCC_OscConfig+0x340>)
 8004c3c:	400a      	ands	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e01e      	b.n	8004c80 <HAL_RCC_OscConfig+0xe0>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b05      	cmp	r3, #5
 8004c48:	d10e      	bne.n	8004c68 <HAL_RCC_OscConfig+0xc8>
 8004c4a:	4ba3      	ldr	r3, [pc, #652]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4ba2      	ldr	r3, [pc, #648]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c50:	2180      	movs	r1, #128	; 0x80
 8004c52:	02c9      	lsls	r1, r1, #11
 8004c54:	430a      	orrs	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	4b9f      	ldr	r3, [pc, #636]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b9e      	ldr	r3, [pc, #632]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	0249      	lsls	r1, r1, #9
 8004c62:	430a      	orrs	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e00b      	b.n	8004c80 <HAL_RCC_OscConfig+0xe0>
 8004c68:	4b9b      	ldr	r3, [pc, #620]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b9a      	ldr	r3, [pc, #616]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c6e:	499b      	ldr	r1, [pc, #620]	; (8004edc <HAL_RCC_OscConfig+0x33c>)
 8004c70:	400a      	ands	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	4b98      	ldr	r3, [pc, #608]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	4b97      	ldr	r3, [pc, #604]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004c7a:	4999      	ldr	r1, [pc, #612]	; (8004ee0 <HAL_RCC_OscConfig+0x340>)
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d014      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fe fbfa 	bl	8003480 <HAL_GetTick>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c92:	f7fe fbf5 	bl	8003480 <HAL_GetTick>
 8004c96:	0002      	movs	r2, r0
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b64      	cmp	r3, #100	; 0x64
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e2fd      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca4:	4b8c      	ldr	r3, [pc, #560]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	029b      	lsls	r3, r3, #10
 8004cac:	4013      	ands	r3, r2
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0xf2>
 8004cb0:	e015      	b.n	8004cde <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb2:	f7fe fbe5 	bl	8003480 <HAL_GetTick>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fe fbe0 	bl	8003480 <HAL_GetTick>
 8004cc0:	0002      	movs	r2, r0
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e2e8      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cce:	4b82      	ldr	r3, [pc, #520]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	029b      	lsls	r3, r3, #10
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x11c>
 8004cda:	e000      	b.n	8004cde <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cdc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d100      	bne.n	8004cea <HAL_RCC_OscConfig+0x14a>
 8004ce8:	e06c      	b.n	8004dc4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004cea:	4b7b      	ldr	r3, [pc, #492]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	220c      	movs	r2, #12
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d00e      	beq.n	8004d12 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004cf4:	4b78      	ldr	r3, [pc, #480]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	220c      	movs	r2, #12
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d11f      	bne.n	8004d40 <HAL_RCC_OscConfig+0x1a0>
 8004d00:	4b75      	ldr	r3, [pc, #468]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	23c0      	movs	r3, #192	; 0xc0
 8004d06:	025b      	lsls	r3, r3, #9
 8004d08:	401a      	ands	r2, r3
 8004d0a:	2380      	movs	r3, #128	; 0x80
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d116      	bne.n	8004d40 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d12:	4b71      	ldr	r3, [pc, #452]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2202      	movs	r2, #2
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_OscConfig+0x188>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e2bb      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d28:	4b6b      	ldr	r3, [pc, #428]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	22f8      	movs	r2, #248	; 0xf8
 8004d2e:	4393      	bics	r3, r2
 8004d30:	0019      	movs	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	00da      	lsls	r2, r3, #3
 8004d38:	4b67      	ldr	r3, [pc, #412]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3e:	e041      	b.n	8004dc4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d024      	beq.n	8004d92 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d48:	4b63      	ldr	r3, [pc, #396]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b62      	ldr	r3, [pc, #392]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004d4e:	2101      	movs	r1, #1
 8004d50:	430a      	orrs	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fe fb94 	bl	8003480 <HAL_GetTick>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d5e:	f7fe fb8f 	bl	8003480 <HAL_GetTick>
 8004d62:	0002      	movs	r2, r0
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e297      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d70:	4b59      	ldr	r3, [pc, #356]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2202      	movs	r2, #2
 8004d76:	4013      	ands	r3, r2
 8004d78:	d0f1      	beq.n	8004d5e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7a:	4b57      	ldr	r3, [pc, #348]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	22f8      	movs	r2, #248	; 0xf8
 8004d80:	4393      	bics	r3, r2
 8004d82:	0019      	movs	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	00da      	lsls	r2, r3, #3
 8004d8a:	4b53      	ldr	r3, [pc, #332]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e018      	b.n	8004dc4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d92:	4b51      	ldr	r3, [pc, #324]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b50      	ldr	r3, [pc, #320]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004d98:	2101      	movs	r1, #1
 8004d9a:	438a      	bics	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fe fb6f 	bl	8003480 <HAL_GetTick>
 8004da2:	0003      	movs	r3, r0
 8004da4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da8:	f7fe fb6a 	bl	8003480 <HAL_GetTick>
 8004dac:	0002      	movs	r2, r0
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e272      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dba:	4b47      	ldr	r3, [pc, #284]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d1f1      	bne.n	8004da8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2208      	movs	r2, #8
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d036      	beq.n	8004e3c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d019      	beq.n	8004e0a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dd6:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dda:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004ddc:	2101      	movs	r1, #1
 8004dde:	430a      	orrs	r2, r1
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de2:	f7fe fb4d 	bl	8003480 <HAL_GetTick>
 8004de6:	0003      	movs	r3, r0
 8004de8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dec:	f7fe fb48 	bl	8003480 <HAL_GetTick>
 8004df0:	0002      	movs	r2, r0
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e250      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfe:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2202      	movs	r2, #2
 8004e04:	4013      	ands	r3, r2
 8004e06:	d0f1      	beq.n	8004dec <HAL_RCC_OscConfig+0x24c>
 8004e08:	e018      	b.n	8004e3c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e0a:	4b33      	ldr	r3, [pc, #204]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e0e:	4b32      	ldr	r3, [pc, #200]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004e10:	2101      	movs	r1, #1
 8004e12:	438a      	bics	r2, r1
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e16:	f7fe fb33 	bl	8003480 <HAL_GetTick>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e20:	f7fe fb2e 	bl	8003480 <HAL_GetTick>
 8004e24:	0002      	movs	r2, r0
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e236      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e32:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2202      	movs	r2, #2
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d1f1      	bne.n	8004e20 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2204      	movs	r2, #4
 8004e42:	4013      	ands	r3, r2
 8004e44:	d100      	bne.n	8004e48 <HAL_RCC_OscConfig+0x2a8>
 8004e46:	e0b5      	b.n	8004fb4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e48:	231f      	movs	r3, #31
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e50:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	055b      	lsls	r3, r3, #21
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d111      	bne.n	8004e80 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004e62:	2180      	movs	r1, #128	; 0x80
 8004e64:	0549      	lsls	r1, r1, #21
 8004e66:	430a      	orrs	r2, r1
 8004e68:	61da      	str	r2, [r3, #28]
 8004e6a:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	055b      	lsls	r3, r3, #21
 8004e72:	4013      	ands	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e78:	231f      	movs	r3, #31
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e80:	4b18      	ldr	r3, [pc, #96]	; (8004ee4 <HAL_RCC_OscConfig+0x344>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d11a      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e8c:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <HAL_RCC_OscConfig+0x344>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <HAL_RCC_OscConfig+0x344>)
 8004e92:	2180      	movs	r1, #128	; 0x80
 8004e94:	0049      	lsls	r1, r1, #1
 8004e96:	430a      	orrs	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9a:	f7fe faf1 	bl	8003480 <HAL_GetTick>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea4:	f7fe faec 	bl	8003480 <HAL_GetTick>
 8004ea8:	0002      	movs	r2, r0
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e1f4      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_RCC_OscConfig+0x344>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10e      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x348>
 8004eca:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004ecc:	6a1a      	ldr	r2, [r3, #32]
 8004ece:	4b02      	ldr	r3, [pc, #8]	; (8004ed8 <HAL_RCC_OscConfig+0x338>)
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	621a      	str	r2, [r3, #32]
 8004ed6:	e035      	b.n	8004f44 <HAL_RCC_OscConfig+0x3a4>
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	fffeffff 	.word	0xfffeffff
 8004ee0:	fffbffff 	.word	0xfffbffff
 8004ee4:	40007000 	.word	0x40007000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10c      	bne.n	8004f0a <HAL_RCC_OscConfig+0x36a>
 8004ef0:	4bca      	ldr	r3, [pc, #808]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004ef2:	6a1a      	ldr	r2, [r3, #32]
 8004ef4:	4bc9      	ldr	r3, [pc, #804]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	438a      	bics	r2, r1
 8004efa:	621a      	str	r2, [r3, #32]
 8004efc:	4bc7      	ldr	r3, [pc, #796]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004efe:	6a1a      	ldr	r2, [r3, #32]
 8004f00:	4bc6      	ldr	r3, [pc, #792]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004f02:	2104      	movs	r1, #4
 8004f04:	438a      	bics	r2, r1
 8004f06:	621a      	str	r2, [r3, #32]
 8004f08:	e01c      	b.n	8004f44 <HAL_RCC_OscConfig+0x3a4>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b05      	cmp	r3, #5
 8004f10:	d10c      	bne.n	8004f2c <HAL_RCC_OscConfig+0x38c>
 8004f12:	4bc2      	ldr	r3, [pc, #776]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004f14:	6a1a      	ldr	r2, [r3, #32]
 8004f16:	4bc1      	ldr	r3, [pc, #772]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004f18:	2104      	movs	r1, #4
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	621a      	str	r2, [r3, #32]
 8004f1e:	4bbf      	ldr	r3, [pc, #764]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004f20:	6a1a      	ldr	r2, [r3, #32]
 8004f22:	4bbe      	ldr	r3, [pc, #760]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004f24:	2101      	movs	r1, #1
 8004f26:	430a      	orrs	r2, r1
 8004f28:	621a      	str	r2, [r3, #32]
 8004f2a:	e00b      	b.n	8004f44 <HAL_RCC_OscConfig+0x3a4>
 8004f2c:	4bbb      	ldr	r3, [pc, #748]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004f2e:	6a1a      	ldr	r2, [r3, #32]
 8004f30:	4bba      	ldr	r3, [pc, #744]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004f32:	2101      	movs	r1, #1
 8004f34:	438a      	bics	r2, r1
 8004f36:	621a      	str	r2, [r3, #32]
 8004f38:	4bb8      	ldr	r3, [pc, #736]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004f3a:	6a1a      	ldr	r2, [r3, #32]
 8004f3c:	4bb7      	ldr	r3, [pc, #732]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004f3e:	2104      	movs	r1, #4
 8004f40:	438a      	bics	r2, r1
 8004f42:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d014      	beq.n	8004f76 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f4c:	f7fe fa98 	bl	8003480 <HAL_GetTick>
 8004f50:	0003      	movs	r3, r0
 8004f52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f54:	e009      	b.n	8004f6a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f56:	f7fe fa93 	bl	8003480 <HAL_GetTick>
 8004f5a:	0002      	movs	r2, r0
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	4aaf      	ldr	r2, [pc, #700]	; (8005220 <HAL_RCC_OscConfig+0x680>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e19a      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6a:	4bac      	ldr	r3, [pc, #688]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	4013      	ands	r3, r2
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x3b6>
 8004f74:	e013      	b.n	8004f9e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f76:	f7fe fa83 	bl	8003480 <HAL_GetTick>
 8004f7a:	0003      	movs	r3, r0
 8004f7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7e:	e009      	b.n	8004f94 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f80:	f7fe fa7e 	bl	8003480 <HAL_GetTick>
 8004f84:	0002      	movs	r2, r0
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	4aa5      	ldr	r2, [pc, #660]	; (8005220 <HAL_RCC_OscConfig+0x680>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e185      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f94:	4ba1      	ldr	r3, [pc, #644]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f9e:	231f      	movs	r3, #31
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d105      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa8:	4b9c      	ldr	r3, [pc, #624]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	4b9b      	ldr	r3, [pc, #620]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004fae:	499d      	ldr	r1, [pc, #628]	; (8005224 <HAL_RCC_OscConfig+0x684>)
 8004fb0:	400a      	ands	r2, r1
 8004fb2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d063      	beq.n	8005086 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d12a      	bne.n	800501c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004fc6:	4b95      	ldr	r3, [pc, #596]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fca:	4b94      	ldr	r3, [pc, #592]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004fcc:	2104      	movs	r1, #4
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004fd2:	4b92      	ldr	r3, [pc, #584]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd6:	4b91      	ldr	r3, [pc, #580]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004fd8:	2101      	movs	r1, #1
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fde:	f7fe fa4f 	bl	8003480 <HAL_GetTick>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004fe8:	f7fe fa4a 	bl	8003480 <HAL_GetTick>
 8004fec:	0002      	movs	r2, r0
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e152      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004ffa:	4b88      	ldr	r3, [pc, #544]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffe:	2202      	movs	r2, #2
 8005000:	4013      	ands	r3, r2
 8005002:	d0f1      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005004:	4b85      	ldr	r3, [pc, #532]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005008:	22f8      	movs	r2, #248	; 0xf8
 800500a:	4393      	bics	r3, r2
 800500c:	0019      	movs	r1, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	00da      	lsls	r2, r3, #3
 8005014:	4b81      	ldr	r3, [pc, #516]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005016:	430a      	orrs	r2, r1
 8005018:	635a      	str	r2, [r3, #52]	; 0x34
 800501a:	e034      	b.n	8005086 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	3305      	adds	r3, #5
 8005022:	d111      	bne.n	8005048 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005024:	4b7d      	ldr	r3, [pc, #500]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005028:	4b7c      	ldr	r3, [pc, #496]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 800502a:	2104      	movs	r1, #4
 800502c:	438a      	bics	r2, r1
 800502e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005030:	4b7a      	ldr	r3, [pc, #488]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005034:	22f8      	movs	r2, #248	; 0xf8
 8005036:	4393      	bics	r3, r2
 8005038:	0019      	movs	r1, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	00da      	lsls	r2, r3, #3
 8005040:	4b76      	ldr	r3, [pc, #472]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005042:	430a      	orrs	r2, r1
 8005044:	635a      	str	r2, [r3, #52]	; 0x34
 8005046:	e01e      	b.n	8005086 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005048:	4b74      	ldr	r3, [pc, #464]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 800504a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800504c:	4b73      	ldr	r3, [pc, #460]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 800504e:	2104      	movs	r1, #4
 8005050:	430a      	orrs	r2, r1
 8005052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005054:	4b71      	ldr	r3, [pc, #452]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005058:	4b70      	ldr	r3, [pc, #448]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 800505a:	2101      	movs	r1, #1
 800505c:	438a      	bics	r2, r1
 800505e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005060:	f7fe fa0e 	bl	8003480 <HAL_GetTick>
 8005064:	0003      	movs	r3, r0
 8005066:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800506a:	f7fe fa09 	bl	8003480 <HAL_GetTick>
 800506e:	0002      	movs	r2, r0
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e111      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800507c:	4b67      	ldr	r3, [pc, #412]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 800507e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005080:	2202      	movs	r2, #2
 8005082:	4013      	ands	r3, r2
 8005084:	d1f1      	bne.n	800506a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2220      	movs	r2, #32
 800508c:	4013      	ands	r3, r2
 800508e:	d05c      	beq.n	800514a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005090:	4b62      	ldr	r3, [pc, #392]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	220c      	movs	r2, #12
 8005096:	4013      	ands	r3, r2
 8005098:	2b0c      	cmp	r3, #12
 800509a:	d00e      	beq.n	80050ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800509c:	4b5f      	ldr	r3, [pc, #380]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	220c      	movs	r2, #12
 80050a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d114      	bne.n	80050d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80050a8:	4b5c      	ldr	r3, [pc, #368]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	23c0      	movs	r3, #192	; 0xc0
 80050ae:	025b      	lsls	r3, r3, #9
 80050b0:	401a      	ands	r2, r3
 80050b2:	23c0      	movs	r3, #192	; 0xc0
 80050b4:	025b      	lsls	r3, r3, #9
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d10b      	bne.n	80050d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80050ba:	4b58      	ldr	r3, [pc, #352]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 80050bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050be:	2380      	movs	r3, #128	; 0x80
 80050c0:	025b      	lsls	r3, r3, #9
 80050c2:	4013      	ands	r3, r2
 80050c4:	d040      	beq.n	8005148 <HAL_RCC_OscConfig+0x5a8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d03c      	beq.n	8005148 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e0e6      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01b      	beq.n	8005112 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80050da:	4b50      	ldr	r3, [pc, #320]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 80050dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050de:	4b4f      	ldr	r3, [pc, #316]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 80050e0:	2180      	movs	r1, #128	; 0x80
 80050e2:	0249      	lsls	r1, r1, #9
 80050e4:	430a      	orrs	r2, r1
 80050e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e8:	f7fe f9ca 	bl	8003480 <HAL_GetTick>
 80050ec:	0003      	movs	r3, r0
 80050ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050f2:	f7fe f9c5 	bl	8003480 <HAL_GetTick>
 80050f6:	0002      	movs	r2, r0
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e0cd      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005104:	4b45      	ldr	r3, [pc, #276]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	025b      	lsls	r3, r3, #9
 800510c:	4013      	ands	r3, r2
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCC_OscConfig+0x552>
 8005110:	e01b      	b.n	800514a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005112:	4b42      	ldr	r3, [pc, #264]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005116:	4b41      	ldr	r3, [pc, #260]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005118:	4943      	ldr	r1, [pc, #268]	; (8005228 <HAL_RCC_OscConfig+0x688>)
 800511a:	400a      	ands	r2, r1
 800511c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511e:	f7fe f9af 	bl	8003480 <HAL_GetTick>
 8005122:	0003      	movs	r3, r0
 8005124:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005128:	f7fe f9aa 	bl	8003480 <HAL_GetTick>
 800512c:	0002      	movs	r2, r0
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e0b2      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800513a:	4b38      	ldr	r3, [pc, #224]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 800513c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513e:	2380      	movs	r3, #128	; 0x80
 8005140:	025b      	lsls	r3, r3, #9
 8005142:	4013      	ands	r3, r2
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x588>
 8005146:	e000      	b.n	800514a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005148:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	2b00      	cmp	r3, #0
 8005150:	d100      	bne.n	8005154 <HAL_RCC_OscConfig+0x5b4>
 8005152:	e0a4      	b.n	800529e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005154:	4b31      	ldr	r3, [pc, #196]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	220c      	movs	r2, #12
 800515a:	4013      	ands	r3, r2
 800515c:	2b08      	cmp	r3, #8
 800515e:	d100      	bne.n	8005162 <HAL_RCC_OscConfig+0x5c2>
 8005160:	e078      	b.n	8005254 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b02      	cmp	r3, #2
 8005168:	d14c      	bne.n	8005204 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516a:	4b2c      	ldr	r3, [pc, #176]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b2b      	ldr	r3, [pc, #172]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005170:	492e      	ldr	r1, [pc, #184]	; (800522c <HAL_RCC_OscConfig+0x68c>)
 8005172:	400a      	ands	r2, r1
 8005174:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005176:	f7fe f983 	bl	8003480 <HAL_GetTick>
 800517a:	0003      	movs	r3, r0
 800517c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005180:	f7fe f97e 	bl	8003480 <HAL_GetTick>
 8005184:	0002      	movs	r2, r0
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e086      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005192:	4b22      	ldr	r3, [pc, #136]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	2380      	movs	r3, #128	; 0x80
 8005198:	049b      	lsls	r3, r3, #18
 800519a:	4013      	ands	r3, r2
 800519c:	d1f0      	bne.n	8005180 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800519e:	4b1f      	ldr	r3, [pc, #124]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	220f      	movs	r2, #15
 80051a4:	4393      	bics	r3, r2
 80051a6:	0019      	movs	r1, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ac:	4b1b      	ldr	r3, [pc, #108]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 80051ae:	430a      	orrs	r2, r1
 80051b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80051b2:	4b1a      	ldr	r3, [pc, #104]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <HAL_RCC_OscConfig+0x690>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	0019      	movs	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	431a      	orrs	r2, r3
 80051c6:	4b15      	ldr	r3, [pc, #84]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 80051c8:	430a      	orrs	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051cc:	4b13      	ldr	r3, [pc, #76]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b12      	ldr	r3, [pc, #72]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 80051d2:	2180      	movs	r1, #128	; 0x80
 80051d4:	0449      	lsls	r1, r1, #17
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051da:	f7fe f951 	bl	8003480 <HAL_GetTick>
 80051de:	0003      	movs	r3, r0
 80051e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fe f94c 	bl	8003480 <HAL_GetTick>
 80051e8:	0002      	movs	r2, r0
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e054      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051f6:	4b09      	ldr	r3, [pc, #36]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	049b      	lsls	r3, r3, #18
 80051fe:	4013      	ands	r3, r2
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x644>
 8005202:	e04c      	b.n	800529e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <HAL_RCC_OscConfig+0x67c>)
 800520a:	4908      	ldr	r1, [pc, #32]	; (800522c <HAL_RCC_OscConfig+0x68c>)
 800520c:	400a      	ands	r2, r1
 800520e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005210:	f7fe f936 	bl	8003480 <HAL_GetTick>
 8005214:	0003      	movs	r3, r0
 8005216:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005218:	e015      	b.n	8005246 <HAL_RCC_OscConfig+0x6a6>
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	40021000 	.word	0x40021000
 8005220:	00001388 	.word	0x00001388
 8005224:	efffffff 	.word	0xefffffff
 8005228:	fffeffff 	.word	0xfffeffff
 800522c:	feffffff 	.word	0xfeffffff
 8005230:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005234:	f7fe f924 	bl	8003480 <HAL_GetTick>
 8005238:	0002      	movs	r2, r0
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e02c      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005246:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <HAL_RCC_OscConfig+0x708>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	2380      	movs	r3, #128	; 0x80
 800524c:	049b      	lsls	r3, r3, #18
 800524e:	4013      	ands	r3, r2
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x694>
 8005252:	e024      	b.n	800529e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e01f      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005260:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <HAL_RCC_OscConfig+0x708>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_RCC_OscConfig+0x708>)
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	23c0      	movs	r3, #192	; 0xc0
 8005270:	025b      	lsls	r3, r3, #9
 8005272:	401a      	ands	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	429a      	cmp	r2, r3
 800527a:	d10e      	bne.n	800529a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	220f      	movs	r2, #15
 8005280:	401a      	ands	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005286:	429a      	cmp	r2, r3
 8005288:	d107      	bne.n	800529a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	23f0      	movs	r3, #240	; 0xf0
 800528e:	039b      	lsls	r3, r3, #14
 8005290:	401a      	ands	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d001      	beq.n	800529e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b008      	add	sp, #32
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40021000 	.word	0x40021000

080052ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0bf      	b.n	8005440 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052c0:	4b61      	ldr	r3, [pc, #388]	; (8005448 <HAL_RCC_ClockConfig+0x19c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2201      	movs	r2, #1
 80052c6:	4013      	ands	r3, r2
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d911      	bls.n	80052f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ce:	4b5e      	ldr	r3, [pc, #376]	; (8005448 <HAL_RCC_ClockConfig+0x19c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2201      	movs	r2, #1
 80052d4:	4393      	bics	r3, r2
 80052d6:	0019      	movs	r1, r3
 80052d8:	4b5b      	ldr	r3, [pc, #364]	; (8005448 <HAL_RCC_ClockConfig+0x19c>)
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e0:	4b59      	ldr	r3, [pc, #356]	; (8005448 <HAL_RCC_ClockConfig+0x19c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	4013      	ands	r3, r2
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d001      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e0a6      	b.n	8005440 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2202      	movs	r2, #2
 80052f8:	4013      	ands	r3, r2
 80052fa:	d015      	beq.n	8005328 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2204      	movs	r2, #4
 8005302:	4013      	ands	r3, r2
 8005304:	d006      	beq.n	8005314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005306:	4b51      	ldr	r3, [pc, #324]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	4b50      	ldr	r3, [pc, #320]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 800530c:	21e0      	movs	r1, #224	; 0xe0
 800530e:	00c9      	lsls	r1, r1, #3
 8005310:	430a      	orrs	r2, r1
 8005312:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005314:	4b4d      	ldr	r3, [pc, #308]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	22f0      	movs	r2, #240	; 0xf0
 800531a:	4393      	bics	r3, r2
 800531c:	0019      	movs	r1, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	4b4a      	ldr	r3, [pc, #296]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2201      	movs	r2, #1
 800532e:	4013      	ands	r3, r2
 8005330:	d04c      	beq.n	80053cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d107      	bne.n	800534a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533a:	4b44      	ldr	r3, [pc, #272]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	029b      	lsls	r3, r3, #10
 8005342:	4013      	ands	r3, r2
 8005344:	d120      	bne.n	8005388 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e07a      	b.n	8005440 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d107      	bne.n	8005362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005352:	4b3e      	ldr	r3, [pc, #248]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	2380      	movs	r3, #128	; 0x80
 8005358:	049b      	lsls	r3, r3, #18
 800535a:	4013      	ands	r3, r2
 800535c:	d114      	bne.n	8005388 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e06e      	b.n	8005440 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b03      	cmp	r3, #3
 8005368:	d107      	bne.n	800537a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800536a:	4b38      	ldr	r3, [pc, #224]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 800536c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	025b      	lsls	r3, r3, #9
 8005372:	4013      	ands	r3, r2
 8005374:	d108      	bne.n	8005388 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e062      	b.n	8005440 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537a:	4b34      	ldr	r3, [pc, #208]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2202      	movs	r2, #2
 8005380:	4013      	ands	r3, r2
 8005382:	d101      	bne.n	8005388 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e05b      	b.n	8005440 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005388:	4b30      	ldr	r3, [pc, #192]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2203      	movs	r2, #3
 800538e:	4393      	bics	r3, r2
 8005390:	0019      	movs	r1, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	4b2d      	ldr	r3, [pc, #180]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 8005398:	430a      	orrs	r2, r1
 800539a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800539c:	f7fe f870 	bl	8003480 <HAL_GetTick>
 80053a0:	0003      	movs	r3, r0
 80053a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a4:	e009      	b.n	80053ba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a6:	f7fe f86b 	bl	8003480 <HAL_GetTick>
 80053aa:	0002      	movs	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	4a27      	ldr	r2, [pc, #156]	; (8005450 <HAL_RCC_ClockConfig+0x1a4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e042      	b.n	8005440 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ba:	4b24      	ldr	r3, [pc, #144]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	220c      	movs	r2, #12
 80053c0:	401a      	ands	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d1ec      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053cc:	4b1e      	ldr	r3, [pc, #120]	; (8005448 <HAL_RCC_ClockConfig+0x19c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2201      	movs	r2, #1
 80053d2:	4013      	ands	r3, r2
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d211      	bcs.n	80053fe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053da:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <HAL_RCC_ClockConfig+0x19c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2201      	movs	r2, #1
 80053e0:	4393      	bics	r3, r2
 80053e2:	0019      	movs	r1, r3
 80053e4:	4b18      	ldr	r3, [pc, #96]	; (8005448 <HAL_RCC_ClockConfig+0x19c>)
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ec:	4b16      	ldr	r3, [pc, #88]	; (8005448 <HAL_RCC_ClockConfig+0x19c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2201      	movs	r2, #1
 80053f2:	4013      	ands	r3, r2
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d001      	beq.n	80053fe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e020      	b.n	8005440 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2204      	movs	r2, #4
 8005404:	4013      	ands	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005408:	4b10      	ldr	r3, [pc, #64]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4a11      	ldr	r2, [pc, #68]	; (8005454 <HAL_RCC_ClockConfig+0x1a8>)
 800540e:	4013      	ands	r3, r2
 8005410:	0019      	movs	r1, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 8005418:	430a      	orrs	r2, r1
 800541a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800541c:	f000 f820 	bl	8005460 <HAL_RCC_GetSysClockFreq>
 8005420:	0001      	movs	r1, r0
 8005422:	4b0a      	ldr	r3, [pc, #40]	; (800544c <HAL_RCC_ClockConfig+0x1a0>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	091b      	lsrs	r3, r3, #4
 8005428:	220f      	movs	r2, #15
 800542a:	4013      	ands	r3, r2
 800542c:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <HAL_RCC_ClockConfig+0x1ac>)
 800542e:	5cd3      	ldrb	r3, [r2, r3]
 8005430:	000a      	movs	r2, r1
 8005432:	40da      	lsrs	r2, r3
 8005434:	4b09      	ldr	r3, [pc, #36]	; (800545c <HAL_RCC_ClockConfig+0x1b0>)
 8005436:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005438:	2000      	movs	r0, #0
 800543a:	f7fd ffdb 	bl	80033f4 <HAL_InitTick>
  
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	0018      	movs	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	b004      	add	sp, #16
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40022000 	.word	0x40022000
 800544c:	40021000 	.word	0x40021000
 8005450:	00001388 	.word	0x00001388
 8005454:	fffff8ff 	.word	0xfffff8ff
 8005458:	08006eec 	.word	0x08006eec
 800545c:	20000000 	.word	0x20000000

08005460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b08f      	sub	sp, #60	; 0x3c
 8005464:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005466:	2314      	movs	r3, #20
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	4a37      	ldr	r2, [pc, #220]	; (8005548 <HAL_RCC_GetSysClockFreq+0xe8>)
 800546c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800546e:	c313      	stmia	r3!, {r0, r1, r4}
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	4a35      	ldr	r2, [pc, #212]	; (800554c <HAL_RCC_GetSysClockFreq+0xec>)
 8005478:	ca13      	ldmia	r2!, {r0, r1, r4}
 800547a:	c313      	stmia	r3!, {r0, r1, r4}
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005484:	2300      	movs	r3, #0
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
 8005488:	2300      	movs	r3, #0
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
 800548c:	2300      	movs	r3, #0
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005494:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800549a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549c:	220c      	movs	r2, #12
 800549e:	4013      	ands	r3, r2
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d006      	beq.n	80054b2 <HAL_RCC_GetSysClockFreq+0x52>
 80054a4:	2b0c      	cmp	r3, #12
 80054a6:	d043      	beq.n	8005530 <HAL_RCC_GetSysClockFreq+0xd0>
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d144      	bne.n	8005536 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054ac:	4b29      	ldr	r3, [pc, #164]	; (8005554 <HAL_RCC_GetSysClockFreq+0xf4>)
 80054ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054b0:	e044      	b.n	800553c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80054b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b4:	0c9b      	lsrs	r3, r3, #18
 80054b6:	220f      	movs	r2, #15
 80054b8:	4013      	ands	r3, r2
 80054ba:	2214      	movs	r2, #20
 80054bc:	18ba      	adds	r2, r7, r2
 80054be:	5cd3      	ldrb	r3, [r2, r3]
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80054c2:	4b23      	ldr	r3, [pc, #140]	; (8005550 <HAL_RCC_GetSysClockFreq+0xf0>)
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c6:	220f      	movs	r2, #15
 80054c8:	4013      	ands	r3, r2
 80054ca:	1d3a      	adds	r2, r7, #4
 80054cc:	5cd3      	ldrb	r3, [r2, r3]
 80054ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d2:	23c0      	movs	r3, #192	; 0xc0
 80054d4:	025b      	lsls	r3, r3, #9
 80054d6:	401a      	ands	r2, r3
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	025b      	lsls	r3, r3, #9
 80054dc:	429a      	cmp	r2, r3
 80054de:	d109      	bne.n	80054f4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054e2:	481c      	ldr	r0, [pc, #112]	; (8005554 <HAL_RCC_GetSysClockFreq+0xf4>)
 80054e4:	f7fa fe10 	bl	8000108 <__udivsi3>
 80054e8:	0003      	movs	r3, r0
 80054ea:	001a      	movs	r2, r3
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	4353      	muls	r3, r2
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
 80054f2:	e01a      	b.n	800552a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80054f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f6:	23c0      	movs	r3, #192	; 0xc0
 80054f8:	025b      	lsls	r3, r3, #9
 80054fa:	401a      	ands	r2, r3
 80054fc:	23c0      	movs	r3, #192	; 0xc0
 80054fe:	025b      	lsls	r3, r3, #9
 8005500:	429a      	cmp	r2, r3
 8005502:	d109      	bne.n	8005518 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005506:	4814      	ldr	r0, [pc, #80]	; (8005558 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005508:	f7fa fdfe 	bl	8000108 <__udivsi3>
 800550c:	0003      	movs	r3, r0
 800550e:	001a      	movs	r2, r3
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	4353      	muls	r3, r2
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
 8005516:	e008      	b.n	800552a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800551a:	4810      	ldr	r0, [pc, #64]	; (800555c <HAL_RCC_GetSysClockFreq+0xfc>)
 800551c:	f7fa fdf4 	bl	8000108 <__udivsi3>
 8005520:	0003      	movs	r3, r0
 8005522:	001a      	movs	r2, r3
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	4353      	muls	r3, r2
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800552e:	e005      	b.n	800553c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005532:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005534:	e002      	b.n	800553c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005538:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800553a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800553e:	0018      	movs	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	b00f      	add	sp, #60	; 0x3c
 8005544:	bd90      	pop	{r4, r7, pc}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	08006e0c 	.word	0x08006e0c
 800554c:	08006e1c 	.word	0x08006e1c
 8005550:	40021000 	.word	0x40021000
 8005554:	00f42400 	.word	0x00f42400
 8005558:	02dc6c00 	.word	0x02dc6c00
 800555c:	007a1200 	.word	0x007a1200

08005560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	025b      	lsls	r3, r3, #9
 8005578:	4013      	ands	r3, r2
 800557a:	d100      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800557c:	e08f      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800557e:	2317      	movs	r3, #23
 8005580:	18fb      	adds	r3, r7, r3
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005586:	4b67      	ldr	r3, [pc, #412]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005588:	69da      	ldr	r2, [r3, #28]
 800558a:	2380      	movs	r3, #128	; 0x80
 800558c:	055b      	lsls	r3, r3, #21
 800558e:	4013      	ands	r3, r2
 8005590:	d111      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005592:	4b64      	ldr	r3, [pc, #400]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005594:	69da      	ldr	r2, [r3, #28]
 8005596:	4b63      	ldr	r3, [pc, #396]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005598:	2180      	movs	r1, #128	; 0x80
 800559a:	0549      	lsls	r1, r1, #21
 800559c:	430a      	orrs	r2, r1
 800559e:	61da      	str	r2, [r3, #28]
 80055a0:	4b60      	ldr	r3, [pc, #384]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	055b      	lsls	r3, r3, #21
 80055a8:	4013      	ands	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ae:	2317      	movs	r3, #23
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	2201      	movs	r2, #1
 80055b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b6:	4b5c      	ldr	r3, [pc, #368]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	4013      	ands	r3, r2
 80055c0:	d11a      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055c2:	4b59      	ldr	r3, [pc, #356]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4b58      	ldr	r3, [pc, #352]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80055c8:	2180      	movs	r1, #128	; 0x80
 80055ca:	0049      	lsls	r1, r1, #1
 80055cc:	430a      	orrs	r2, r1
 80055ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055d0:	f7fd ff56 	bl	8003480 <HAL_GetTick>
 80055d4:	0003      	movs	r3, r0
 80055d6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d8:	e008      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055da:	f7fd ff51 	bl	8003480 <HAL_GetTick>
 80055de:	0002      	movs	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b64      	cmp	r3, #100	; 0x64
 80055e6:	d901      	bls.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e097      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ec:	4b4e      	ldr	r3, [pc, #312]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4013      	ands	r3, r2
 80055f6:	d0f0      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055f8:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80055fa:	6a1a      	ldr	r2, [r3, #32]
 80055fc:	23c0      	movs	r3, #192	; 0xc0
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4013      	ands	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d034      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	23c0      	movs	r3, #192	; 0xc0
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4013      	ands	r3, r2
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	429a      	cmp	r2, r3
 8005618:	d02c      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800561a:	4b42      	ldr	r3, [pc, #264]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	4a43      	ldr	r2, [pc, #268]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005620:	4013      	ands	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005624:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800562a:	2180      	movs	r1, #128	; 0x80
 800562c:	0249      	lsls	r1, r1, #9
 800562e:	430a      	orrs	r2, r1
 8005630:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005632:	4b3c      	ldr	r3, [pc, #240]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	4b3b      	ldr	r3, [pc, #236]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005638:	493d      	ldr	r1, [pc, #244]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563a:	400a      	ands	r2, r1
 800563c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800563e:	4b39      	ldr	r3, [pc, #228]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	4013      	ands	r3, r2
 800564a:	d013      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564c:	f7fd ff18 	bl	8003480 <HAL_GetTick>
 8005650:	0003      	movs	r3, r0
 8005652:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005654:	e009      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fd ff13 	bl	8003480 <HAL_GetTick>
 800565a:	0002      	movs	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	4a34      	ldr	r2, [pc, #208]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e058      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566a:	4b2e      	ldr	r3, [pc, #184]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	2202      	movs	r2, #2
 8005670:	4013      	ands	r3, r2
 8005672:	d0f0      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005674:	4b2b      	ldr	r3, [pc, #172]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	4a2c      	ldr	r2, [pc, #176]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800567a:	4013      	ands	r3, r2
 800567c:	0019      	movs	r1, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	4b28      	ldr	r3, [pc, #160]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005684:	430a      	orrs	r2, r1
 8005686:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005688:	2317      	movs	r3, #23
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d105      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005692:	4b24      	ldr	r3, [pc, #144]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005694:	69da      	ldr	r2, [r3, #28]
 8005696:	4b23      	ldr	r3, [pc, #140]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005698:	4927      	ldr	r1, [pc, #156]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800569a:	400a      	ands	r2, r1
 800569c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2201      	movs	r2, #1
 80056a4:	4013      	ands	r3, r2
 80056a6:	d009      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056a8:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	2203      	movs	r2, #3
 80056ae:	4393      	bics	r3, r2
 80056b0:	0019      	movs	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056b8:	430a      	orrs	r2, r1
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2220      	movs	r2, #32
 80056c2:	4013      	ands	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056c6:	4b17      	ldr	r3, [pc, #92]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	2210      	movs	r2, #16
 80056cc:	4393      	bics	r3, r2
 80056ce:	0019      	movs	r1, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	4b13      	ldr	r3, [pc, #76]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056d6:	430a      	orrs	r2, r1
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	029b      	lsls	r3, r3, #10
 80056e2:	4013      	ands	r3, r2
 80056e4:	d009      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	2280      	movs	r2, #128	; 0x80
 80056ec:	4393      	bics	r3, r2
 80056ee:	0019      	movs	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056f6:	430a      	orrs	r2, r1
 80056f8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	2380      	movs	r3, #128	; 0x80
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4013      	ands	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005706:	4b07      	ldr	r3, [pc, #28]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570a:	2240      	movs	r2, #64	; 0x40
 800570c:	4393      	bics	r3, r2
 800570e:	0019      	movs	r1, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	4b03      	ldr	r3, [pc, #12]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005716:	430a      	orrs	r2, r1
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	0018      	movs	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	b006      	add	sp, #24
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40021000 	.word	0x40021000
 8005728:	40007000 	.word	0x40007000
 800572c:	fffffcff 	.word	0xfffffcff
 8005730:	fffeffff 	.word	0xfffeffff
 8005734:	00001388 	.word	0x00001388
 8005738:	efffffff 	.word	0xefffffff

0800573c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e08a      	b.n	8005864 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	225d      	movs	r2, #93	; 0x5d
 8005758:	5c9b      	ldrb	r3, [r3, r2]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d107      	bne.n	8005770 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	225c      	movs	r2, #92	; 0x5c
 8005764:	2100      	movs	r1, #0
 8005766:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	0018      	movs	r0, r3
 800576c:	f7fd fce8 	bl	8003140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	225d      	movs	r2, #93	; 0x5d
 8005774:	2102      	movs	r1, #2
 8005776:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2140      	movs	r1, #64	; 0x40
 8005784:	438a      	bics	r2, r1
 8005786:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	23e0      	movs	r3, #224	; 0xe0
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	429a      	cmp	r2, r3
 8005792:	d902      	bls.n	800579a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	e002      	b.n	80057a0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	015b      	lsls	r3, r3, #5
 800579e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	23f0      	movs	r3, #240	; 0xf0
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d008      	beq.n	80057be <HAL_SPI_Init+0x82>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	23e0      	movs	r3, #224	; 0xe0
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d002      	beq.n	80057be <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10c      	bne.n	80057e0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	23e0      	movs	r3, #224	; 0xe0
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d903      	bls.n	80057da <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
 80057d8:	e002      	b.n	80057e0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6999      	ldr	r1, [r3, #24]
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	400b      	ands	r3, r1
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	431a      	orrs	r2, r3
 800580e:	0011      	movs	r1, r2
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	0c1b      	lsrs	r3, r3, #16
 8005822:	2204      	movs	r2, #4
 8005824:	401a      	ands	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	431a      	orrs	r2, r3
 8005838:	0011      	movs	r1, r2
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	430a      	orrs	r2, r1
 8005842:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69da      	ldr	r2, [r3, #28]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4907      	ldr	r1, [pc, #28]	; (800586c <HAL_SPI_Init+0x130>)
 8005850:	400a      	ands	r2, r1
 8005852:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	225d      	movs	r2, #93	; 0x5d
 800585e:	2101      	movs	r1, #1
 8005860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	0018      	movs	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	b004      	add	sp, #16
 800586a:	bd80      	pop	{r7, pc}
 800586c:	fffff7ff 	.word	0xfffff7ff

08005870 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	1dbb      	adds	r3, r7, #6
 800587e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005880:	231f      	movs	r3, #31
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	225c      	movs	r2, #92	; 0x5c
 800588c:	5c9b      	ldrb	r3, [r3, r2]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_SPI_Transmit+0x26>
 8005892:	2302      	movs	r3, #2
 8005894:	e169      	b.n	8005b6a <HAL_SPI_Transmit+0x2fa>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	225c      	movs	r2, #92	; 0x5c
 800589a:	2101      	movs	r1, #1
 800589c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800589e:	f7fd fdef 	bl	8003480 <HAL_GetTick>
 80058a2:	0003      	movs	r3, r0
 80058a4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80058a6:	2316      	movs	r3, #22
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	1dba      	adds	r2, r7, #6
 80058ac:	8812      	ldrh	r2, [r2, #0]
 80058ae:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	225d      	movs	r2, #93	; 0x5d
 80058b4:	5c9b      	ldrb	r3, [r3, r2]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d004      	beq.n	80058c6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80058bc:	231f      	movs	r3, #31
 80058be:	18fb      	adds	r3, r7, r3
 80058c0:	2202      	movs	r2, #2
 80058c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80058c4:	e146      	b.n	8005b54 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_SPI_Transmit+0x64>
 80058cc:	1dbb      	adds	r3, r7, #6
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80058d4:	231f      	movs	r3, #31
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]
    goto error;
 80058dc:	e13a      	b.n	8005b54 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	225d      	movs	r2, #93	; 0x5d
 80058e2:	2103      	movs	r1, #3
 80058e4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1dba      	adds	r2, r7, #6
 80058f6:	8812      	ldrh	r2, [r2, #0]
 80058f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	1dba      	adds	r2, r7, #6
 80058fe:	8812      	ldrh	r2, [r2, #0]
 8005900:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2244      	movs	r2, #68	; 0x44
 800590c:	2100      	movs	r1, #0
 800590e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2246      	movs	r2, #70	; 0x46
 8005914:	2100      	movs	r1, #0
 8005916:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	429a      	cmp	r2, r3
 800592e:	d108      	bne.n	8005942 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2180      	movs	r1, #128	; 0x80
 800593c:	01c9      	lsls	r1, r1, #7
 800593e:	430a      	orrs	r2, r1
 8005940:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2240      	movs	r2, #64	; 0x40
 800594a:	4013      	ands	r3, r2
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d007      	beq.n	8005960 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2140      	movs	r1, #64	; 0x40
 800595c:	430a      	orrs	r2, r1
 800595e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	23e0      	movs	r3, #224	; 0xe0
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	429a      	cmp	r2, r3
 800596a:	d94e      	bls.n	8005a0a <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d004      	beq.n	800597e <HAL_SPI_Transmit+0x10e>
 8005974:	2316      	movs	r3, #22
 8005976:	18fb      	adds	r3, r7, r3
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d13f      	bne.n	80059fe <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	881a      	ldrh	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	1c9a      	adds	r2, r3, #2
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059a2:	e02c      	b.n	80059fe <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2202      	movs	r2, #2
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d112      	bne.n	80059d8 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	881a      	ldrh	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	1c9a      	adds	r2, r3, #2
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059d6:	e012      	b.n	80059fe <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059d8:	f7fd fd52 	bl	8003480 <HAL_GetTick>
 80059dc:	0002      	movs	r2, r0
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d802      	bhi.n	80059ee <HAL_SPI_Transmit+0x17e>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	3301      	adds	r3, #1
 80059ec:	d102      	bne.n	80059f4 <HAL_SPI_Transmit+0x184>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80059f4:	231f      	movs	r3, #31
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	2203      	movs	r2, #3
 80059fa:	701a      	strb	r2, [r3, #0]
          goto error;
 80059fc:	e0aa      	b.n	8005b54 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1cd      	bne.n	80059a4 <HAL_SPI_Transmit+0x134>
 8005a08:	e080      	b.n	8005b0c <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_SPI_Transmit+0x1ae>
 8005a12:	2316      	movs	r3, #22
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d000      	beq.n	8005a1e <HAL_SPI_Transmit+0x1ae>
 8005a1c:	e071      	b.n	8005b02 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d912      	bls.n	8005a4e <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	881a      	ldrh	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	1c9a      	adds	r2, r3, #2
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b02      	subs	r3, #2
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a4c:	e059      	b.n	8005b02 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	7812      	ldrb	r2, [r2, #0]
 8005a5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005a74:	e045      	b.n	8005b02 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d12b      	bne.n	8005adc <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d912      	bls.n	8005ab4 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	881a      	ldrh	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	1c9a      	adds	r2, r3, #2
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b02      	subs	r3, #2
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ab2:	e026      	b.n	8005b02 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	7812      	ldrb	r2, [r2, #0]
 8005ac0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ada:	e012      	b.n	8005b02 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005adc:	f7fd fcd0 	bl	8003480 <HAL_GetTick>
 8005ae0:	0002      	movs	r2, r0
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d802      	bhi.n	8005af2 <HAL_SPI_Transmit+0x282>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	3301      	adds	r3, #1
 8005af0:	d102      	bne.n	8005af8 <HAL_SPI_Transmit+0x288>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8005af8:	231f      	movs	r3, #31
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	2203      	movs	r2, #3
 8005afe:	701a      	strb	r2, [r3, #0]
          goto error;
 8005b00:	e028      	b.n	8005b54 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1b4      	bne.n	8005a76 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	0018      	movs	r0, r3
 8005b14:	f000 fcee 	bl	80064f4 <SPI_EndRxTxTransaction>
 8005b18:	1e03      	subs	r3, r0, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8005b48:	231f      	movs	r3, #31
 8005b4a:	18fb      	adds	r3, r7, r3
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e000      	b.n	8005b54 <HAL_SPI_Transmit+0x2e4>
  }

error:
 8005b52:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	225d      	movs	r2, #93	; 0x5d
 8005b58:	2101      	movs	r1, #1
 8005b5a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	225c      	movs	r2, #92	; 0x5c
 8005b60:	2100      	movs	r1, #0
 8005b62:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b64:	231f      	movs	r3, #31
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	781b      	ldrb	r3, [r3, #0]
}
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b008      	add	sp, #32
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b089      	sub	sp, #36	; 0x24
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	1dbb      	adds	r3, r7, #6
 8005b82:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b84:	2317      	movs	r3, #23
 8005b86:	18fb      	adds	r3, r7, r3
 8005b88:	2200      	movs	r2, #0
 8005b8a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	2382      	movs	r3, #130	; 0x82
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d113      	bne.n	8005bc0 <HAL_SPI_Receive+0x4c>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10f      	bne.n	8005bc0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	225d      	movs	r2, #93	; 0x5d
 8005ba4:	2104      	movs	r1, #4
 8005ba6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ba8:	1dbb      	adds	r3, r7, #6
 8005baa:	881c      	ldrh	r4, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	0023      	movs	r3, r4
 8005bb8:	f000 f920 	bl	8005dfc <HAL_SPI_TransmitReceive>
 8005bbc:	0003      	movs	r3, r0
 8005bbe:	e114      	b.n	8005dea <HAL_SPI_Receive+0x276>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	225c      	movs	r2, #92	; 0x5c
 8005bc4:	5c9b      	ldrb	r3, [r3, r2]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_SPI_Receive+0x5a>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e10d      	b.n	8005dea <HAL_SPI_Receive+0x276>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	225c      	movs	r2, #92	; 0x5c
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bd6:	f7fd fc53 	bl	8003480 <HAL_GetTick>
 8005bda:	0003      	movs	r3, r0
 8005bdc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	225d      	movs	r2, #93	; 0x5d
 8005be2:	5c9b      	ldrb	r3, [r3, r2]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d004      	beq.n	8005bf4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005bea:	2317      	movs	r3, #23
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	2202      	movs	r2, #2
 8005bf0:	701a      	strb	r2, [r3, #0]
    goto error;
 8005bf2:	e0ef      	b.n	8005dd4 <HAL_SPI_Receive+0x260>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_SPI_Receive+0x8e>
 8005bfa:	1dbb      	adds	r3, r7, #6
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d104      	bne.n	8005c0c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005c02:	2317      	movs	r3, #23
 8005c04:	18fb      	adds	r3, r7, r3
 8005c06:	2201      	movs	r2, #1
 8005c08:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c0a:	e0e3      	b.n	8005dd4 <HAL_SPI_Receive+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	225d      	movs	r2, #93	; 0x5d
 8005c10:	2104      	movs	r1, #4
 8005c12:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1dba      	adds	r2, r7, #6
 8005c24:	2144      	movs	r1, #68	; 0x44
 8005c26:	8812      	ldrh	r2, [r2, #0]
 8005c28:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1dba      	adds	r2, r7, #6
 8005c2e:	2146      	movs	r1, #70	; 0x46
 8005c30:	8812      	ldrh	r2, [r2, #0]
 8005c32:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	23e0      	movs	r3, #224	; 0xe0
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d908      	bls.n	8005c70 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4962      	ldr	r1, [pc, #392]	; (8005df4 <HAL_SPI_Receive+0x280>)
 8005c6a:	400a      	ands	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
 8005c6e:	e008      	b.n	8005c82 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2180      	movs	r1, #128	; 0x80
 8005c7c:	0149      	lsls	r1, r1, #5
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	2380      	movs	r3, #128	; 0x80
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d107      	bne.n	8005c9e <HAL_SPI_Receive+0x12a>
  {
    SPI_1LINE_RX(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4957      	ldr	r1, [pc, #348]	; (8005df8 <HAL_SPI_Receive+0x284>)
 8005c9a:	400a      	ands	r2, r1
 8005c9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2240      	movs	r2, #64	; 0x40
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	d007      	beq.n	8005cbc <HAL_SPI_Receive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2140      	movs	r1, #64	; 0x40
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	23e0      	movs	r3, #224	; 0xe0
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d900      	bls.n	8005cca <HAL_SPI_Receive+0x156>
 8005cc8:	e069      	b.n	8005d9e <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cca:	e031      	b.n	8005d30 <HAL_SPI_Receive+0x1bc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d117      	bne.n	8005d0a <HAL_SPI_Receive+0x196>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	001a      	movs	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	7812      	ldrb	r2, [r2, #0]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2246      	movs	r2, #70	; 0x46
 8005cfa:	5a9b      	ldrh	r3, [r3, r2]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b299      	uxth	r1, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2246      	movs	r2, #70	; 0x46
 8005d06:	5299      	strh	r1, [r3, r2]
 8005d08:	e012      	b.n	8005d30 <HAL_SPI_Receive+0x1bc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d0a:	f7fd fbb9 	bl	8003480 <HAL_GetTick>
 8005d0e:	0002      	movs	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d802      	bhi.n	8005d20 <HAL_SPI_Receive+0x1ac>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	d102      	bne.n	8005d26 <HAL_SPI_Receive+0x1b2>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <HAL_SPI_Receive+0x1bc>
        {
          errorcode = HAL_TIMEOUT;
 8005d26:	2317      	movs	r3, #23
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	701a      	strb	r2, [r3, #0]
          goto error;
 8005d2e:	e051      	b.n	8005dd4 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2246      	movs	r2, #70	; 0x46
 8005d34:	5a9b      	ldrh	r3, [r3, r2]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1c7      	bne.n	8005ccc <HAL_SPI_Receive+0x158>
 8005d3c:	e035      	b.n	8005daa <HAL_SPI_Receive+0x236>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2201      	movs	r2, #1
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d115      	bne.n	8005d78 <HAL_SPI_Receive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	b292      	uxth	r2, r2
 8005d58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	1c9a      	adds	r2, r3, #2
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2246      	movs	r2, #70	; 0x46
 8005d68:	5a9b      	ldrh	r3, [r3, r2]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b299      	uxth	r1, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2246      	movs	r2, #70	; 0x46
 8005d74:	5299      	strh	r1, [r3, r2]
 8005d76:	e012      	b.n	8005d9e <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d78:	f7fd fb82 	bl	8003480 <HAL_GetTick>
 8005d7c:	0002      	movs	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d802      	bhi.n	8005d8e <HAL_SPI_Receive+0x21a>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	d102      	bne.n	8005d94 <HAL_SPI_Receive+0x220>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d104      	bne.n	8005d9e <HAL_SPI_Receive+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8005d94:	2317      	movs	r3, #23
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	2203      	movs	r2, #3
 8005d9a:	701a      	strb	r2, [r3, #0]
          goto error;
 8005d9c:	e01a      	b.n	8005dd4 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2246      	movs	r2, #70	; 0x46
 8005da2:	5a9b      	ldrh	r3, [r3, r2]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1c9      	bne.n	8005d3e <HAL_SPI_Receive+0x1ca>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	0018      	movs	r0, r3
 8005db2:	f000 fb41 	bl	8006438 <SPI_EndRxTransaction>
 8005db6:	1e03      	subs	r3, r0, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_SPI_Receive+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d004      	beq.n	8005dd2 <HAL_SPI_Receive+0x25e>
  {
    errorcode = HAL_ERROR;
 8005dc8:	2317      	movs	r3, #23
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	2201      	movs	r2, #1
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	e000      	b.n	8005dd4 <HAL_SPI_Receive+0x260>
  }

error :
 8005dd2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	225d      	movs	r2, #93	; 0x5d
 8005dd8:	2101      	movs	r1, #1
 8005dda:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	225c      	movs	r2, #92	; 0x5c
 8005de0:	2100      	movs	r1, #0
 8005de2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005de4:	2317      	movs	r3, #23
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	781b      	ldrb	r3, [r3, #0]
}
 8005dea:	0018      	movs	r0, r3
 8005dec:	46bd      	mov	sp, r7
 8005dee:	b007      	add	sp, #28
 8005df0:	bd90      	pop	{r4, r7, pc}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	ffffefff 	.word	0xffffefff
 8005df8:	ffffbfff 	.word	0xffffbfff

08005dfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08a      	sub	sp, #40	; 0x28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	001a      	movs	r2, r3
 8005e0a:	1cbb      	adds	r3, r7, #2
 8005e0c:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e12:	2323      	movs	r3, #35	; 0x23
 8005e14:	18fb      	adds	r3, r7, r3
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	225c      	movs	r2, #92	; 0x5c
 8005e1e:	5c9b      	ldrb	r3, [r3, r2]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_SPI_TransmitReceive+0x2c>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e21f      	b.n	8006268 <HAL_SPI_TransmitReceive+0x46c>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	225c      	movs	r2, #92	; 0x5c
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e30:	f7fd fb26 	bl	8003480 <HAL_GetTick>
 8005e34:	0003      	movs	r3, r0
 8005e36:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e38:	201b      	movs	r0, #27
 8005e3a:	183b      	adds	r3, r7, r0
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	215d      	movs	r1, #93	; 0x5d
 8005e40:	5c52      	ldrb	r2, [r2, r1]
 8005e42:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e4a:	2312      	movs	r3, #18
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	1cba      	adds	r2, r7, #2
 8005e50:	8812      	ldrh	r2, [r2, #0]
 8005e52:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 8005e54:	2310      	movs	r3, #16
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	1cba      	adds	r2, r7, #2
 8005e5a:	8812      	ldrh	r2, [r2, #0]
 8005e5c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e5e:	183b      	adds	r3, r7, r0
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d012      	beq.n	8005e8c <HAL_SPI_TransmitReceive+0x90>
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	2382      	movs	r3, #130	; 0x82
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d108      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x86>
 8005e78:	231b      	movs	r3, #27
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d004      	beq.n	8005e8c <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 8005e82:	2323      	movs	r3, #35	; 0x23
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	2202      	movs	r2, #2
 8005e88:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e8a:	e1e2      	b.n	8006252 <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d006      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0xa4>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0xa4>
 8005e98:	1cbb      	adds	r3, r7, #2
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d104      	bne.n	8005eaa <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 8005ea0:	2323      	movs	r3, #35	; 0x23
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ea8:	e1d3      	b.n	8006252 <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	225d      	movs	r2, #93	; 0x5d
 8005eae:	5c9b      	ldrb	r3, [r3, r2]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d003      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	225d      	movs	r2, #93	; 0x5d
 8005eba:	2105      	movs	r1, #5
 8005ebc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1cba      	adds	r2, r7, #2
 8005ece:	2146      	movs	r1, #70	; 0x46
 8005ed0:	8812      	ldrh	r2, [r2, #0]
 8005ed2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	1cba      	adds	r2, r7, #2
 8005ed8:	2144      	movs	r1, #68	; 0x44
 8005eda:	8812      	ldrh	r2, [r2, #0]
 8005edc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	1cba      	adds	r2, r7, #2
 8005ee8:	8812      	ldrh	r2, [r2, #0]
 8005eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	1cba      	adds	r2, r7, #2
 8005ef0:	8812      	ldrh	r2, [r2, #0]
 8005ef2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	23e0      	movs	r3, #224	; 0xe0
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d804      	bhi.n	8005f16 <HAL_SPI_TransmitReceive+0x11a>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	18fb      	adds	r3, r7, r3
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d908      	bls.n	8005f28 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	49ca      	ldr	r1, [pc, #808]	; (800624c <HAL_SPI_TransmitReceive+0x450>)
 8005f22:	400a      	ands	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	e008      	b.n	8005f3a <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	0149      	lsls	r1, r1, #5
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2240      	movs	r2, #64	; 0x40
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d007      	beq.n	8005f58 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2140      	movs	r1, #64	; 0x40
 8005f54:	430a      	orrs	r2, r1
 8005f56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	23e0      	movs	r3, #224	; 0xe0
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d800      	bhi.n	8005f66 <HAL_SPI_TransmitReceive+0x16a>
 8005f64:	e07f      	b.n	8006066 <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_SPI_TransmitReceive+0x17e>
 8005f6e:	2312      	movs	r3, #18
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d000      	beq.n	8005f7a <HAL_SPI_TransmitReceive+0x17e>
 8005f78:	e069      	b.n	800604e <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	881a      	ldrh	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	1c9a      	adds	r2, r3, #2
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f9e:	e056      	b.n	800604e <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d11b      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x1ea>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d016      	beq.n	8005fe6 <HAL_SPI_TransmitReceive+0x1ea>
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d113      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	881a      	ldrh	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	1c9a      	adds	r2, r3, #2
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	2201      	movs	r2, #1
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d11c      	bne.n	800602e <HAL_SPI_TransmitReceive+0x232>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2246      	movs	r2, #70	; 0x46
 8005ff8:	5a9b      	ldrh	r3, [r3, r2]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d016      	beq.n	800602e <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	b292      	uxth	r2, r2
 800600c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	1c9a      	adds	r2, r3, #2
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2246      	movs	r2, #70	; 0x46
 800601c:	5a9b      	ldrh	r3, [r3, r2]
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b299      	uxth	r1, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2246      	movs	r2, #70	; 0x46
 8006028:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800602a:	2301      	movs	r3, #1
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800602e:	f7fd fa27 	bl	8003480 <HAL_GetTick>
 8006032:	0002      	movs	r2, r0
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800603a:	429a      	cmp	r2, r3
 800603c:	d807      	bhi.n	800604e <HAL_SPI_TransmitReceive+0x252>
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	3301      	adds	r3, #1
 8006042:	d004      	beq.n	800604e <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 8006044:	2323      	movs	r3, #35	; 0x23
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	2203      	movs	r2, #3
 800604a:	701a      	strb	r2, [r3, #0]
        goto error;
 800604c:	e101      	b.n	8006252 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1a3      	bne.n	8005fa0 <HAL_SPI_TransmitReceive+0x1a4>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2246      	movs	r2, #70	; 0x46
 800605c:	5a9b      	ldrh	r3, [r3, r2]
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d19d      	bne.n	8005fa0 <HAL_SPI_TransmitReceive+0x1a4>
 8006064:	e0e2      	b.n	800622c <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_SPI_TransmitReceive+0x27e>
 800606e:	2312      	movs	r3, #18
 8006070:	18fb      	adds	r3, r7, r3
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d000      	beq.n	800607a <HAL_SPI_TransmitReceive+0x27e>
 8006078:	e0cb      	b.n	8006212 <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b01      	cmp	r3, #1
 8006082:	d912      	bls.n	80060aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	881a      	ldrh	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	1c9a      	adds	r2, r3, #2
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b02      	subs	r3, #2
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060a8:	e0b3      	b.n	8006212 <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	7812      	ldrb	r2, [r2, #0]
 80060b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060d0:	e09f      	b.n	8006212 <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2202      	movs	r2, #2
 80060da:	4013      	ands	r3, r2
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d134      	bne.n	800614a <HAL_SPI_TransmitReceive+0x34e>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d02f      	beq.n	800614a <HAL_SPI_TransmitReceive+0x34e>
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d12c      	bne.n	800614a <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d912      	bls.n	8006120 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	881a      	ldrh	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	1c9a      	adds	r2, r3, #2
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b02      	subs	r3, #2
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800611e:	e012      	b.n	8006146 <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	7812      	ldrb	r2, [r2, #0]
 800612c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2201      	movs	r2, #1
 8006152:	4013      	ands	r3, r2
 8006154:	2b01      	cmp	r3, #1
 8006156:	d149      	bne.n	80061ec <HAL_SPI_TransmitReceive+0x3f0>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2246      	movs	r2, #70	; 0x46
 800615c:	5a9b      	ldrh	r3, [r3, r2]
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d043      	beq.n	80061ec <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2246      	movs	r2, #70	; 0x46
 8006168:	5a9b      	ldrh	r3, [r3, r2]
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b01      	cmp	r3, #1
 800616e:	d924      	bls.n	80061ba <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	b292      	uxth	r2, r2
 800617c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	1c9a      	adds	r2, r3, #2
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2246      	movs	r2, #70	; 0x46
 800618c:	5a9b      	ldrh	r3, [r3, r2]
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b02      	subs	r3, #2
 8006192:	b299      	uxth	r1, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2246      	movs	r2, #70	; 0x46
 8006198:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2246      	movs	r2, #70	; 0x46
 800619e:	5a9b      	ldrh	r3, [r3, r2]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d820      	bhi.n	80061e8 <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2180      	movs	r1, #128	; 0x80
 80061b2:	0149      	lsls	r1, r1, #5
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]
 80061b8:	e016      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	330c      	adds	r3, #12
 80061c0:	001a      	movs	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2246      	movs	r2, #70	; 0x46
 80061da:	5a9b      	ldrh	r3, [r3, r2]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b299      	uxth	r1, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2246      	movs	r2, #70	; 0x46
 80061e6:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061e8:	2301      	movs	r3, #1
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061ec:	f7fd f948 	bl	8003480 <HAL_GetTick>
 80061f0:	0002      	movs	r2, r0
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d802      	bhi.n	8006202 <HAL_SPI_TransmitReceive+0x406>
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	3301      	adds	r3, #1
 8006200:	d102      	bne.n	8006208 <HAL_SPI_TransmitReceive+0x40c>
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 8006208:	2323      	movs	r3, #35	; 0x23
 800620a:	18fb      	adds	r3, r7, r3
 800620c:	2203      	movs	r2, #3
 800620e:	701a      	strb	r2, [r3, #0]
        goto error;
 8006210:	e01f      	b.n	8006252 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d000      	beq.n	800621e <HAL_SPI_TransmitReceive+0x422>
 800621c:	e759      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x2d6>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2246      	movs	r2, #70	; 0x46
 8006222:	5a9b      	ldrh	r3, [r3, r2]
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d000      	beq.n	800622c <HAL_SPI_TransmitReceive+0x430>
 800622a:	e752      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	0018      	movs	r0, r3
 8006234:	f000 f95e 	bl	80064f4 <SPI_EndRxTxTransaction>
 8006238:	1e03      	subs	r3, r0, #0
 800623a:	d009      	beq.n	8006250 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 800623c:	2323      	movs	r3, #35	; 0x23
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	2201      	movs	r2, #1
 8006242:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	661a      	str	r2, [r3, #96]	; 0x60
 800624a:	e002      	b.n	8006252 <HAL_SPI_TransmitReceive+0x456>
 800624c:	ffffefff 	.word	0xffffefff
  }

error :
 8006250:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	225d      	movs	r2, #93	; 0x5d
 8006256:	2101      	movs	r1, #1
 8006258:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	225c      	movs	r2, #92	; 0x5c
 800625e:	2100      	movs	r1, #0
 8006260:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006262:	2323      	movs	r3, #35	; 0x23
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	781b      	ldrb	r3, [r3, #0]
}
 8006268:	0018      	movs	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	b00a      	add	sp, #40	; 0x28
 800626e:	bd80      	pop	{r7, pc}

08006270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	1dfb      	adds	r3, r7, #7
 800627e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006280:	e050      	b.n	8006324 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	3301      	adds	r3, #1
 8006286:	d04d      	beq.n	8006324 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006288:	f7fd f8fa 	bl	8003480 <HAL_GetTick>
 800628c:	0002      	movs	r2, r0
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d902      	bls.n	800629e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d142      	bne.n	8006324 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	21e0      	movs	r1, #224	; 0xe0
 80062aa:	438a      	bics	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	2382      	movs	r3, #130	; 0x82
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d113      	bne.n	80062e2 <SPI_WaitFlagStateUntilTimeout+0x72>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d005      	beq.n	80062d2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	2380      	movs	r3, #128	; 0x80
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d107      	bne.n	80062e2 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2140      	movs	r1, #64	; 0x40
 80062de:	438a      	bics	r2, r1
 80062e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062e6:	2380      	movs	r3, #128	; 0x80
 80062e8:	019b      	lsls	r3, r3, #6
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d110      	bne.n	8006310 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4914      	ldr	r1, [pc, #80]	; (800634c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80062fa:	400a      	ands	r2, r1
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2180      	movs	r1, #128	; 0x80
 800630a:	0189      	lsls	r1, r1, #6
 800630c:	430a      	orrs	r2, r1
 800630e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	225d      	movs	r2, #93	; 0x5d
 8006314:	2101      	movs	r1, #1
 8006316:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	225c      	movs	r2, #92	; 0x5c
 800631c:	2100      	movs	r1, #0
 800631e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e00f      	b.n	8006344 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	4013      	ands	r3, r2
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	425a      	negs	r2, r3
 8006334:	4153      	adcs	r3, r2
 8006336:	b2db      	uxtb	r3, r3
 8006338:	001a      	movs	r2, r3
 800633a:	1dfb      	adds	r3, r7, #7
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d19f      	bne.n	8006282 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	0018      	movs	r0, r3
 8006346:	46bd      	mov	sp, r7
 8006348:	b004      	add	sp, #16
 800634a:	bd80      	pop	{r7, pc}
 800634c:	ffffdfff 	.word	0xffffdfff

08006350 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800635e:	e05c      	b.n	800641a <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	23c0      	movs	r3, #192	; 0xc0
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	429a      	cmp	r2, r3
 8006368:	d106      	bne.n	8006378 <SPI_WaitFifoStateUntilTimeout+0x28>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d103      	bne.n	8006378 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	3301      	adds	r3, #1
 800637c:	d04d      	beq.n	800641a <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800637e:	f7fd f87f 	bl	8003480 <HAL_GetTick>
 8006382:	0002      	movs	r2, r0
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d902      	bls.n	8006394 <SPI_WaitFifoStateUntilTimeout+0x44>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d142      	bne.n	800641a <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	21e0      	movs	r1, #224	; 0xe0
 80063a0:	438a      	bics	r2, r1
 80063a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	2382      	movs	r3, #130	; 0x82
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d113      	bne.n	80063d8 <SPI_WaitFifoStateUntilTimeout+0x88>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d005      	beq.n	80063c8 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	2380      	movs	r3, #128	; 0x80
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d107      	bne.n	80063d8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2140      	movs	r1, #64	; 0x40
 80063d4:	438a      	bics	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	019b      	lsls	r3, r3, #6
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d110      	bne.n	8006406 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4911      	ldr	r1, [pc, #68]	; (8006434 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 80063f0:	400a      	ands	r2, r1
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2180      	movs	r1, #128	; 0x80
 8006400:	0189      	lsls	r1, r1, #6
 8006402:	430a      	orrs	r2, r1
 8006404:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	225d      	movs	r2, #93	; 0x5d
 800640a:	2101      	movs	r1, #1
 800640c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	225c      	movs	r2, #92	; 0x5c
 8006412:	2100      	movs	r1, #0
 8006414:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e008      	b.n	800642c <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	4013      	ands	r3, r2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	429a      	cmp	r2, r3
 8006428:	d19a      	bne.n	8006360 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	0018      	movs	r0, r3
 800642e:	46bd      	mov	sp, r7
 8006430:	b004      	add	sp, #16
 8006432:	bd80      	pop	{r7, pc}
 8006434:	ffffdfff 	.word	0xffffdfff

08006438 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af02      	add	r7, sp, #8
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	2382      	movs	r3, #130	; 0x82
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	429a      	cmp	r2, r3
 800644e:	d113      	bne.n	8006478 <SPI_EndRxTransaction+0x40>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	2380      	movs	r3, #128	; 0x80
 8006456:	021b      	lsls	r3, r3, #8
 8006458:	429a      	cmp	r2, r3
 800645a:	d005      	beq.n	8006468 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	429a      	cmp	r2, r3
 8006466:	d107      	bne.n	8006478 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2140      	movs	r1, #64	; 0x40
 8006474:	438a      	bics	r2, r1
 8006476:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	0013      	movs	r3, r2
 8006482:	2200      	movs	r2, #0
 8006484:	2180      	movs	r1, #128	; 0x80
 8006486:	f7ff fef3 	bl	8006270 <SPI_WaitFlagStateUntilTimeout>
 800648a:	1e03      	subs	r3, r0, #0
 800648c:	d007      	beq.n	800649e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006492:	2220      	movs	r2, #32
 8006494:	431a      	orrs	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e026      	b.n	80064ec <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	2382      	movs	r3, #130	; 0x82
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d11f      	bne.n	80064ea <SPI_EndRxTransaction+0xb2>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	2380      	movs	r3, #128	; 0x80
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d005      	beq.n	80064c2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	2380      	movs	r3, #128	; 0x80
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	429a      	cmp	r2, r3
 80064c0:	d113      	bne.n	80064ea <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	23c0      	movs	r3, #192	; 0xc0
 80064c6:	00d9      	lsls	r1, r3, #3
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	0013      	movs	r3, r2
 80064d0:	2200      	movs	r2, #0
 80064d2:	f7ff ff3d 	bl	8006350 <SPI_WaitFifoStateUntilTimeout>
 80064d6:	1e03      	subs	r3, r0, #0
 80064d8:	d007      	beq.n	80064ea <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064de:	2220      	movs	r2, #32
 80064e0:	431a      	orrs	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e000      	b.n	80064ec <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	0018      	movs	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b004      	add	sp, #16
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	23c0      	movs	r3, #192	; 0xc0
 8006504:	0159      	lsls	r1, r3, #5
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	0013      	movs	r3, r2
 800650e:	2200      	movs	r2, #0
 8006510:	f7ff ff1e 	bl	8006350 <SPI_WaitFifoStateUntilTimeout>
 8006514:	1e03      	subs	r3, r0, #0
 8006516:	d007      	beq.n	8006528 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651c:	2220      	movs	r2, #32
 800651e:	431a      	orrs	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e027      	b.n	8006578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	0013      	movs	r3, r2
 8006532:	2200      	movs	r2, #0
 8006534:	2180      	movs	r1, #128	; 0x80
 8006536:	f7ff fe9b 	bl	8006270 <SPI_WaitFlagStateUntilTimeout>
 800653a:	1e03      	subs	r3, r0, #0
 800653c:	d007      	beq.n	800654e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006542:	2220      	movs	r2, #32
 8006544:	431a      	orrs	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e014      	b.n	8006578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	23c0      	movs	r3, #192	; 0xc0
 8006552:	00d9      	lsls	r1, r3, #3
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	0013      	movs	r3, r2
 800655c:	2200      	movs	r2, #0
 800655e:	f7ff fef7 	bl	8006350 <SPI_WaitFifoStateUntilTimeout>
 8006562:	1e03      	subs	r3, r0, #0
 8006564:	d007      	beq.n	8006576 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656a:	2220      	movs	r2, #32
 800656c:	431a      	orrs	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e000      	b.n	8006578 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	0018      	movs	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	b004      	add	sp, #16
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e01e      	b.n	80065d0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	223d      	movs	r2, #61	; 0x3d
 8006596:	5c9b      	ldrb	r3, [r3, r2]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d107      	bne.n	80065ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	223c      	movs	r2, #60	; 0x3c
 80065a2:	2100      	movs	r1, #0
 80065a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	0018      	movs	r0, r3
 80065aa:	f7fc fe15 	bl	80031d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	223d      	movs	r2, #61	; 0x3d
 80065b2:	2102      	movs	r1, #2
 80065b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3304      	adds	r3, #4
 80065be:	0019      	movs	r1, r3
 80065c0:	0010      	movs	r0, r2
 80065c2:	f000 fa73 	bl	8006aac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	223d      	movs	r2, #61	; 0x3d
 80065ca:	2101      	movs	r1, #1
 80065cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	0018      	movs	r0, r3
 80065d2:	46bd      	mov	sp, r7
 80065d4:	b002      	add	sp, #8
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	223d      	movs	r2, #61	; 0x3d
 80065e4:	2102      	movs	r1, #2
 80065e6:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	4a0d      	ldr	r2, [pc, #52]	; (8006624 <HAL_TIM_Base_Stop+0x4c>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	d10d      	bne.n	8006610 <HAL_TIM_Base_Stop+0x38>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <HAL_TIM_Base_Stop+0x50>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	d107      	bne.n	8006610 <HAL_TIM_Base_Stop+0x38>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2101      	movs	r1, #1
 800660c:	438a      	bics	r2, r1
 800660e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	223d      	movs	r2, #61	; 0x3d
 8006614:	2101      	movs	r1, #1
 8006616:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	0018      	movs	r0, r3
 800661c:	46bd      	mov	sp, r7
 800661e:	b002      	add	sp, #8
 8006620:	bd80      	pop	{r7, pc}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	00001111 	.word	0x00001111
 8006628:	00000444 	.word	0x00000444

0800662c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2101      	movs	r1, #1
 8006640:	430a      	orrs	r2, r1
 8006642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2207      	movs	r2, #7
 800664c:	4013      	ands	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b06      	cmp	r3, #6
 8006654:	d007      	beq.n	8006666 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2101      	movs	r1, #1
 8006662:	430a      	orrs	r2, r1
 8006664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	0018      	movs	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	b004      	add	sp, #16
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2101      	movs	r1, #1
 8006684:	438a      	bics	r2, r1
 8006686:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	4a0b      	ldr	r2, [pc, #44]	; (80066bc <HAL_TIM_Base_Stop_IT+0x4c>)
 8006690:	4013      	ands	r3, r2
 8006692:	d10d      	bne.n	80066b0 <HAL_TIM_Base_Stop_IT+0x40>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	4a09      	ldr	r2, [pc, #36]	; (80066c0 <HAL_TIM_Base_Stop_IT+0x50>)
 800669c:	4013      	ands	r3, r2
 800669e:	d107      	bne.n	80066b0 <HAL_TIM_Base_Stop_IT+0x40>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2101      	movs	r1, #1
 80066ac:	438a      	bics	r2, r1
 80066ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	0018      	movs	r0, r3
 80066b4:	46bd      	mov	sp, r7
 80066b6:	b002      	add	sp, #8
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	00001111 	.word	0x00001111
 80066c0:	00000444 	.word	0x00000444

080066c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2202      	movs	r2, #2
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d124      	bne.n	8006724 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2202      	movs	r2, #2
 80066e2:	4013      	ands	r3, r2
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d11d      	bne.n	8006724 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2203      	movs	r2, #3
 80066ee:	4252      	negs	r2, r2
 80066f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	2203      	movs	r2, #3
 8006700:	4013      	ands	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	0018      	movs	r0, r3
 8006708:	f000 f9b8 	bl	8006a7c <HAL_TIM_IC_CaptureCallback>
 800670c:	e007      	b.n	800671e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	0018      	movs	r0, r3
 8006712:	f000 f9ab 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	0018      	movs	r0, r3
 800671a:	f000 f9b7 	bl	8006a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2204      	movs	r2, #4
 800672c:	4013      	ands	r3, r2
 800672e:	2b04      	cmp	r3, #4
 8006730:	d125      	bne.n	800677e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2204      	movs	r2, #4
 800673a:	4013      	ands	r3, r2
 800673c:	2b04      	cmp	r3, #4
 800673e:	d11e      	bne.n	800677e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2205      	movs	r2, #5
 8006746:	4252      	negs	r2, r2
 8006748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	23c0      	movs	r3, #192	; 0xc0
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4013      	ands	r3, r2
 800675c:	d004      	beq.n	8006768 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	0018      	movs	r0, r3
 8006762:	f000 f98b 	bl	8006a7c <HAL_TIM_IC_CaptureCallback>
 8006766:	e007      	b.n	8006778 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	0018      	movs	r0, r3
 800676c:	f000 f97e 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	0018      	movs	r0, r3
 8006774:	f000 f98a 	bl	8006a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2208      	movs	r2, #8
 8006786:	4013      	ands	r3, r2
 8006788:	2b08      	cmp	r3, #8
 800678a:	d124      	bne.n	80067d6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	2208      	movs	r2, #8
 8006794:	4013      	ands	r3, r2
 8006796:	2b08      	cmp	r3, #8
 8006798:	d11d      	bne.n	80067d6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2209      	movs	r2, #9
 80067a0:	4252      	negs	r2, r2
 80067a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2204      	movs	r2, #4
 80067a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	2203      	movs	r2, #3
 80067b2:	4013      	ands	r3, r2
 80067b4:	d004      	beq.n	80067c0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	0018      	movs	r0, r3
 80067ba:	f000 f95f 	bl	8006a7c <HAL_TIM_IC_CaptureCallback>
 80067be:	e007      	b.n	80067d0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	0018      	movs	r0, r3
 80067c4:	f000 f952 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	0018      	movs	r0, r3
 80067cc:	f000 f95e 	bl	8006a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2210      	movs	r2, #16
 80067de:	4013      	ands	r3, r2
 80067e0:	2b10      	cmp	r3, #16
 80067e2:	d125      	bne.n	8006830 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	2210      	movs	r2, #16
 80067ec:	4013      	ands	r3, r2
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d11e      	bne.n	8006830 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2211      	movs	r2, #17
 80067f8:	4252      	negs	r2, r2
 80067fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2208      	movs	r2, #8
 8006800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	23c0      	movs	r3, #192	; 0xc0
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4013      	ands	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	0018      	movs	r0, r3
 8006814:	f000 f932 	bl	8006a7c <HAL_TIM_IC_CaptureCallback>
 8006818:	e007      	b.n	800682a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	0018      	movs	r0, r3
 800681e:	f000 f925 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0018      	movs	r0, r3
 8006826:	f000 f931 	bl	8006a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2201      	movs	r2, #1
 8006838:	4013      	ands	r3, r2
 800683a:	2b01      	cmp	r3, #1
 800683c:	d10f      	bne.n	800685e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	4013      	ands	r3, r2
 8006848:	2b01      	cmp	r3, #1
 800684a:	d108      	bne.n	800685e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2202      	movs	r2, #2
 8006852:	4252      	negs	r2, r2
 8006854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	0018      	movs	r0, r3
 800685a:	f7fc f955 	bl	8002b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2280      	movs	r2, #128	; 0x80
 8006866:	4013      	ands	r3, r2
 8006868:	2b80      	cmp	r3, #128	; 0x80
 800686a:	d10f      	bne.n	800688c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2280      	movs	r2, #128	; 0x80
 8006874:	4013      	ands	r3, r2
 8006876:	2b80      	cmp	r3, #128	; 0x80
 8006878:	d108      	bne.n	800688c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2281      	movs	r2, #129	; 0x81
 8006880:	4252      	negs	r2, r2
 8006882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	0018      	movs	r0, r3
 8006888:	f000 fa80 	bl	8006d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2240      	movs	r2, #64	; 0x40
 8006894:	4013      	ands	r3, r2
 8006896:	2b40      	cmp	r3, #64	; 0x40
 8006898:	d10f      	bne.n	80068ba <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	2240      	movs	r2, #64	; 0x40
 80068a2:	4013      	ands	r3, r2
 80068a4:	2b40      	cmp	r3, #64	; 0x40
 80068a6:	d108      	bne.n	80068ba <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2241      	movs	r2, #65	; 0x41
 80068ae:	4252      	negs	r2, r2
 80068b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f000 f8f1 	bl	8006a9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2220      	movs	r2, #32
 80068c2:	4013      	ands	r3, r2
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d10f      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d108      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2221      	movs	r2, #33	; 0x21
 80068dc:	4252      	negs	r2, r2
 80068de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 fa4a 	bl	8006d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068e8:	46c0      	nop			; (mov r8, r8)
 80068ea:	46bd      	mov	sp, r7
 80068ec:	b002      	add	sp, #8
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	223c      	movs	r2, #60	; 0x3c
 80068fe:	5c9b      	ldrb	r3, [r3, r2]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_TIM_ConfigClockSource+0x18>
 8006904:	2302      	movs	r3, #2
 8006906:	e0ab      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	223c      	movs	r2, #60	; 0x3c
 800690c:	2101      	movs	r1, #1
 800690e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	223d      	movs	r2, #61	; 0x3d
 8006914:	2102      	movs	r1, #2
 8006916:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2277      	movs	r2, #119	; 0x77
 8006924:	4393      	bics	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4a4f      	ldr	r2, [pc, #316]	; (8006a68 <HAL_TIM_ConfigClockSource+0x178>)
 800692c:	4013      	ands	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	d100      	bne.n	8006942 <HAL_TIM_ConfigClockSource+0x52>
 8006940:	e06b      	b.n	8006a1a <HAL_TIM_ConfigClockSource+0x12a>
 8006942:	d80e      	bhi.n	8006962 <HAL_TIM_ConfigClockSource+0x72>
 8006944:	2b10      	cmp	r3, #16
 8006946:	d100      	bne.n	800694a <HAL_TIM_ConfigClockSource+0x5a>
 8006948:	e077      	b.n	8006a3a <HAL_TIM_ConfigClockSource+0x14a>
 800694a:	d803      	bhi.n	8006954 <HAL_TIM_ConfigClockSource+0x64>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d100      	bne.n	8006952 <HAL_TIM_ConfigClockSource+0x62>
 8006950:	e073      	b.n	8006a3a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006952:	e07c      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006954:	2b20      	cmp	r3, #32
 8006956:	d100      	bne.n	800695a <HAL_TIM_ConfigClockSource+0x6a>
 8006958:	e06f      	b.n	8006a3a <HAL_TIM_ConfigClockSource+0x14a>
 800695a:	2b30      	cmp	r3, #48	; 0x30
 800695c:	d100      	bne.n	8006960 <HAL_TIM_ConfigClockSource+0x70>
 800695e:	e06c      	b.n	8006a3a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8006960:	e075      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006962:	2b70      	cmp	r3, #112	; 0x70
 8006964:	d00e      	beq.n	8006984 <HAL_TIM_ConfigClockSource+0x94>
 8006966:	d804      	bhi.n	8006972 <HAL_TIM_ConfigClockSource+0x82>
 8006968:	2b50      	cmp	r3, #80	; 0x50
 800696a:	d036      	beq.n	80069da <HAL_TIM_ConfigClockSource+0xea>
 800696c:	2b60      	cmp	r3, #96	; 0x60
 800696e:	d044      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8006970:	e06d      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006972:	2280      	movs	r2, #128	; 0x80
 8006974:	0152      	lsls	r2, r2, #5
 8006976:	4293      	cmp	r3, r2
 8006978:	d068      	beq.n	8006a4c <HAL_TIM_ConfigClockSource+0x15c>
 800697a:	2280      	movs	r2, #128	; 0x80
 800697c:	0192      	lsls	r2, r2, #6
 800697e:	4293      	cmp	r3, r2
 8006980:	d017      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8006982:	e064      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6818      	ldr	r0, [r3, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	6899      	ldr	r1, [r3, #8]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f000 f97a 	bl	8006c8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2277      	movs	r2, #119	; 0x77
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	609a      	str	r2, [r3, #8]
      break;
 80069b0:	e04d      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6899      	ldr	r1, [r3, #8]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f000 f963 	bl	8006c8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2180      	movs	r1, #128	; 0x80
 80069d2:	01c9      	lsls	r1, r1, #7
 80069d4:	430a      	orrs	r2, r1
 80069d6:	609a      	str	r2, [r3, #8]
      break;
 80069d8:	e039      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6859      	ldr	r1, [r3, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	001a      	movs	r2, r3
 80069e8:	f000 f8d6 	bl	8006b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2150      	movs	r1, #80	; 0x50
 80069f2:	0018      	movs	r0, r3
 80069f4:	f000 f930 	bl	8006c58 <TIM_ITRx_SetConfig>
      break;
 80069f8:	e029      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6818      	ldr	r0, [r3, #0]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	6859      	ldr	r1, [r3, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	001a      	movs	r2, r3
 8006a08:	f000 f8f4 	bl	8006bf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2160      	movs	r1, #96	; 0x60
 8006a12:	0018      	movs	r0, r3
 8006a14:	f000 f920 	bl	8006c58 <TIM_ITRx_SetConfig>
      break;
 8006a18:	e019      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6859      	ldr	r1, [r3, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	001a      	movs	r2, r3
 8006a28:	f000 f8b6 	bl	8006b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2140      	movs	r1, #64	; 0x40
 8006a32:	0018      	movs	r0, r3
 8006a34:	f000 f910 	bl	8006c58 <TIM_ITRx_SetConfig>
      break;
 8006a38:	e009      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	0019      	movs	r1, r3
 8006a44:	0010      	movs	r0, r2
 8006a46:	f000 f907 	bl	8006c58 <TIM_ITRx_SetConfig>
      break;
 8006a4a:	e000      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8006a4c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	223d      	movs	r2, #61	; 0x3d
 8006a52:	2101      	movs	r1, #1
 8006a54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	223c      	movs	r2, #60	; 0x3c
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	0018      	movs	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b004      	add	sp, #16
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	ffff00ff 	.word	0xffff00ff

08006a6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a74:	46c0      	nop			; (mov r8, r8)
 8006a76:	46bd      	mov	sp, r7
 8006a78:	b002      	add	sp, #8
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a84:	46c0      	nop			; (mov r8, r8)
 8006a86:	46bd      	mov	sp, r7
 8006a88:	b002      	add	sp, #8
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a94:	46c0      	nop			; (mov r8, r8)
 8006a96:	46bd      	mov	sp, r7
 8006a98:	b002      	add	sp, #8
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aa4:	46c0      	nop			; (mov r8, r8)
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b002      	add	sp, #8
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a30      	ldr	r2, [pc, #192]	; (8006b80 <TIM_Base_SetConfig+0xd4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d008      	beq.n	8006ad6 <TIM_Base_SetConfig+0x2a>
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	2380      	movs	r3, #128	; 0x80
 8006ac8:	05db      	lsls	r3, r3, #23
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d003      	beq.n	8006ad6 <TIM_Base_SetConfig+0x2a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2c      	ldr	r2, [pc, #176]	; (8006b84 <TIM_Base_SetConfig+0xd8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d108      	bne.n	8006ae8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2270      	movs	r2, #112	; 0x70
 8006ada:	4393      	bics	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a25      	ldr	r2, [pc, #148]	; (8006b80 <TIM_Base_SetConfig+0xd4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d014      	beq.n	8006b1a <TIM_Base_SetConfig+0x6e>
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	2380      	movs	r3, #128	; 0x80
 8006af4:	05db      	lsls	r3, r3, #23
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d00f      	beq.n	8006b1a <TIM_Base_SetConfig+0x6e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a21      	ldr	r2, [pc, #132]	; (8006b84 <TIM_Base_SetConfig+0xd8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00b      	beq.n	8006b1a <TIM_Base_SetConfig+0x6e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a20      	ldr	r2, [pc, #128]	; (8006b88 <TIM_Base_SetConfig+0xdc>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d007      	beq.n	8006b1a <TIM_Base_SetConfig+0x6e>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a1f      	ldr	r2, [pc, #124]	; (8006b8c <TIM_Base_SetConfig+0xe0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_Base_SetConfig+0x6e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a1e      	ldr	r2, [pc, #120]	; (8006b90 <TIM_Base_SetConfig+0xe4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d108      	bne.n	8006b2c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4a1d      	ldr	r2, [pc, #116]	; (8006b94 <TIM_Base_SetConfig+0xe8>)
 8006b1e:	4013      	ands	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2280      	movs	r2, #128	; 0x80
 8006b30:	4393      	bics	r3, r2
 8006b32:	001a      	movs	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a0a      	ldr	r2, [pc, #40]	; (8006b80 <TIM_Base_SetConfig+0xd4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d007      	beq.n	8006b6a <TIM_Base_SetConfig+0xbe>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a0b      	ldr	r2, [pc, #44]	; (8006b8c <TIM_Base_SetConfig+0xe0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_Base_SetConfig+0xbe>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a0a      	ldr	r2, [pc, #40]	; (8006b90 <TIM_Base_SetConfig+0xe4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d103      	bne.n	8006b72 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	615a      	str	r2, [r3, #20]
}
 8006b78:	46c0      	nop			; (mov r8, r8)
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b004      	add	sp, #16
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	40012c00 	.word	0x40012c00
 8006b84:	40000400 	.word	0x40000400
 8006b88:	40002000 	.word	0x40002000
 8006b8c:	40014400 	.word	0x40014400
 8006b90:	40014800 	.word	0x40014800
 8006b94:	fffffcff 	.word	0xfffffcff

08006b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4393      	bics	r3, r2
 8006bb2:	001a      	movs	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	22f0      	movs	r2, #240	; 0xf0
 8006bc2:	4393      	bics	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	011b      	lsls	r3, r3, #4
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	220a      	movs	r2, #10
 8006bd4:	4393      	bics	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	621a      	str	r2, [r3, #32]
}
 8006bec:	46c0      	nop			; (mov r8, r8)
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b006      	add	sp, #24
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	2210      	movs	r2, #16
 8006c06:	4393      	bics	r3, r2
 8006c08:	001a      	movs	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	4a0d      	ldr	r2, [pc, #52]	; (8006c54 <TIM_TI2_ConfigInputStage+0x60>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	031b      	lsls	r3, r3, #12
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	22a0      	movs	r2, #160	; 0xa0
 8006c30:	4393      	bics	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	621a      	str	r2, [r3, #32]
}
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	b006      	add	sp, #24
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	ffff0fff 	.word	0xffff0fff

08006c58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2270      	movs	r2, #112	; 0x70
 8006c6c:	4393      	bics	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	2207      	movs	r2, #7
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	609a      	str	r2, [r3, #8]
}
 8006c82:	46c0      	nop			; (mov r8, r8)
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b004      	add	sp, #16
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	4a09      	ldr	r2, [pc, #36]	; (8006cc8 <TIM_ETR_SetConfig+0x3c>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	021a      	lsls	r2, r3, #8
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	609a      	str	r2, [r3, #8]
}
 8006cc0:	46c0      	nop			; (mov r8, r8)
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	b006      	add	sp, #24
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	ffff00ff 	.word	0xffff00ff

08006ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	223c      	movs	r2, #60	; 0x3c
 8006cda:	5c9b      	ldrb	r3, [r3, r2]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e042      	b.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	223c      	movs	r2, #60	; 0x3c
 8006ce8:	2101      	movs	r1, #1
 8006cea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	223d      	movs	r2, #61	; 0x3d
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2270      	movs	r2, #112	; 0x70
 8006d08:	4393      	bics	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a14      	ldr	r2, [pc, #80]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00a      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	2380      	movs	r3, #128	; 0x80
 8006d2e:	05db      	lsls	r3, r3, #23
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d004      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a0f      	ldr	r2, [pc, #60]	; (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d10c      	bne.n	8006d58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2280      	movs	r2, #128	; 0x80
 8006d42:	4393      	bics	r3, r2
 8006d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	223d      	movs	r2, #61	; 0x3d
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	223c      	movs	r2, #60	; 0x3c
 8006d64:	2100      	movs	r1, #0
 8006d66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	b004      	add	sp, #16
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	46c0      	nop			; (mov r8, r8)
 8006d74:	40012c00 	.word	0x40012c00
 8006d78:	40000400 	.word	0x40000400

08006d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d84:	46c0      	nop			; (mov r8, r8)
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b002      	add	sp, #8
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d94:	46c0      	nop			; (mov r8, r8)
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b002      	add	sp, #8
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <__libc_init_array>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	2600      	movs	r6, #0
 8006da0:	4d0c      	ldr	r5, [pc, #48]	; (8006dd4 <__libc_init_array+0x38>)
 8006da2:	4c0d      	ldr	r4, [pc, #52]	; (8006dd8 <__libc_init_array+0x3c>)
 8006da4:	1b64      	subs	r4, r4, r5
 8006da6:	10a4      	asrs	r4, r4, #2
 8006da8:	42a6      	cmp	r6, r4
 8006daa:	d109      	bne.n	8006dc0 <__libc_init_array+0x24>
 8006dac:	2600      	movs	r6, #0
 8006dae:	f000 f821 	bl	8006df4 <_init>
 8006db2:	4d0a      	ldr	r5, [pc, #40]	; (8006ddc <__libc_init_array+0x40>)
 8006db4:	4c0a      	ldr	r4, [pc, #40]	; (8006de0 <__libc_init_array+0x44>)
 8006db6:	1b64      	subs	r4, r4, r5
 8006db8:	10a4      	asrs	r4, r4, #2
 8006dba:	42a6      	cmp	r6, r4
 8006dbc:	d105      	bne.n	8006dca <__libc_init_array+0x2e>
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	00b3      	lsls	r3, r6, #2
 8006dc2:	58eb      	ldr	r3, [r5, r3]
 8006dc4:	4798      	blx	r3
 8006dc6:	3601      	adds	r6, #1
 8006dc8:	e7ee      	b.n	8006da8 <__libc_init_array+0xc>
 8006dca:	00b3      	lsls	r3, r6, #2
 8006dcc:	58eb      	ldr	r3, [r5, r3]
 8006dce:	4798      	blx	r3
 8006dd0:	3601      	adds	r6, #1
 8006dd2:	e7f2      	b.n	8006dba <__libc_init_array+0x1e>
 8006dd4:	08006efc 	.word	0x08006efc
 8006dd8:	08006efc 	.word	0x08006efc
 8006ddc:	08006efc 	.word	0x08006efc
 8006de0:	08006f00 	.word	0x08006f00

08006de4 <memset>:
 8006de4:	0003      	movs	r3, r0
 8006de6:	1812      	adds	r2, r2, r0
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d100      	bne.n	8006dee <memset+0xa>
 8006dec:	4770      	bx	lr
 8006dee:	7019      	strb	r1, [r3, #0]
 8006df0:	3301      	adds	r3, #1
 8006df2:	e7f9      	b.n	8006de8 <memset+0x4>

08006df4 <_init>:
 8006df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df6:	46c0      	nop			; (mov r8, r8)
 8006df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfa:	bc08      	pop	{r3}
 8006dfc:	469e      	mov	lr, r3
 8006dfe:	4770      	bx	lr

08006e00 <_fini>:
 8006e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e06:	bc08      	pop	{r3}
 8006e08:	469e      	mov	lr, r3
 8006e0a:	4770      	bx	lr
