
NUCLEO-F401RE_Blank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a57c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800a710  0800a710  0001a710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7bc  0800a7bc  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7bc  0800a7bc  0001a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7c4  0800a7c4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7c4  0800a7c4  0001a7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7c8  0800a7c8  0001a7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a7cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac4  20000184  0800a950  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20004c48  0800a950  00024c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209fb  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004650  00000000  00000000  00040baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001498  00000000  00000000  00045200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001278  00000000  00000000  00046698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c3cb  00000000  00000000  00047910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016750  00000000  00000000  00063cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ff00  00000000  00000000  0007a42b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a32b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005480  00000000  00000000  0010a3a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000184 	.word	0x20000184
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800a6f8 	.word	0x0800a6f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000188 	.word	0x20000188
 80001d0:	0800a6f8 	.word	0x0800a6f8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 faf0 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f814 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8cc 	bl	800067c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80004e4:	f000 f87e 	bl	80005e4 <MX_SDIO_SD_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f89e 	bl	8000628 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80004ec:	f006 f9de 	bl	80068ac <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80004f0:	f009 fb1a 	bl	8009b28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  f_mount(&myFatFS, SDPath, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	4902      	ldr	r1, [pc, #8]	; (8000500 <main+0x2c>)
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <main+0x30>)
 80004fa:	f009 fa73 	bl	80099e4 <f_mount>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <main+0x2a>
 8000500:	20002338 	.word	0x20002338
 8000504:	20001238 	.word	0x20001238

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f00a f82c 	bl	800a574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <SystemClock_Config+0xd4>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a29      	ldr	r2, [pc, #164]	; (80005dc <SystemClock_Config+0xd4>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <SystemClock_Config+0xd4>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <SystemClock_Config+0xd8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000554:	4a22      	ldr	r2, [pc, #136]	; (80005e0 <SystemClock_Config+0xd8>)
 8000556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <SystemClock_Config+0xd8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000568:	2303      	movs	r3, #3
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800056c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000584:	2304      	movs	r3, #4
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000588:	2348      	movs	r3, #72	; 0x48
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800058c:	2304      	movs	r3, #4
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000590:	2303      	movs	r3, #3
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f001 ff9f 	bl	80024dc <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005a4:	f000 f8f4 	bl	8000790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 f9f9 	bl	80029bc <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80005d0:	f000 f8de 	bl	8000790 <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	; 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_SDIO_SD_Init+0x3c>)
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <MX_SDIO_SD_Init+0x40>)
 80005ec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_SDIO_SD_Init+0x3c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_SDIO_SD_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_SDIO_SD_Init+0x3c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_SDIO_SD_Init+0x3c>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_SDIO_SD_Init+0x3c>)
 8000608:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 42;
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <MX_SDIO_SD_Init+0x3c>)
 8000610:	222a      	movs	r2, #42	; 0x2a
 8000612:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	2000226c 	.word	0x2000226c
 8000624:	40012c00 	.word	0x40012c00

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_USART2_UART_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000660:	f003 fd1a 	bl	8004098 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f891 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200022f0 	.word	0x200022f0
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b3a      	ldr	r3, [pc, #232]	; (8000780 <MX_GPIO_Init+0x104>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a39      	ldr	r2, [pc, #228]	; (8000780 <MX_GPIO_Init+0x104>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b37      	ldr	r3, [pc, #220]	; (8000780 <MX_GPIO_Init+0x104>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b33      	ldr	r3, [pc, #204]	; (8000780 <MX_GPIO_Init+0x104>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a32      	ldr	r2, [pc, #200]	; (8000780 <MX_GPIO_Init+0x104>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b30      	ldr	r3, [pc, #192]	; (8000780 <MX_GPIO_Init+0x104>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <MX_GPIO_Init+0x104>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a2b      	ldr	r2, [pc, #172]	; (8000780 <MX_GPIO_Init+0x104>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_GPIO_Init+0x104>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b25      	ldr	r3, [pc, #148]	; (8000780 <MX_GPIO_Init+0x104>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a24      	ldr	r2, [pc, #144]	; (8000780 <MX_GPIO_Init+0x104>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_GPIO_Init+0x104>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_GPIO_Init+0x104>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <MX_GPIO_Init+0x104>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_GPIO_Init+0x104>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <MX_GPIO_Init+0x108>)
 8000724:	f000 fd0a 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_GPIO_Init+0x10c>)
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <MX_GPIO_Init+0x110>)
 800073e:	f000 fb63 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000742:	2320      	movs	r3, #32
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <MX_GPIO_Init+0x108>)
 800075a:	f000 fb55 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800075e:	2340      	movs	r3, #64	; 0x40
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_GPIO_Init+0x110>)
 8000772:	f000 fb49 	bl	8000e08 <HAL_GPIO_Init>

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40020000 	.word	0x40020000
 8000788:	10210000 	.word	0x10210000
 800078c:	40020800 	.word	0x40020800

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <HAL_MspInit+0x4c>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	; 0x44
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x4c>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x4c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007de:	2007      	movs	r0, #7
 80007e0:	f000 fad0 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800

080007f0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a31      	ldr	r2, [pc, #196]	; (80008d4 <HAL_SD_MspInit+0xe4>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d15b      	bne.n	80008ca <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <HAL_SD_MspInit+0xe8>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a2f      	ldr	r2, [pc, #188]	; (80008d8 <HAL_SD_MspInit+0xe8>)
 800081c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <HAL_SD_MspInit+0xe8>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <HAL_SD_MspInit+0xe8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a28      	ldr	r2, [pc, #160]	; (80008d8 <HAL_SD_MspInit+0xe8>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <HAL_SD_MspInit+0xe8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <HAL_SD_MspInit+0xe8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <HAL_SD_MspInit+0xe8>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_SD_MspInit+0xe8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000866:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800086a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000870:	2301      	movs	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000878:	230c      	movs	r3, #12
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4816      	ldr	r0, [pc, #88]	; (80008dc <HAL_SD_MspInit+0xec>)
 8000884:	f000 fac0 	bl	8000e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800089a:	230c      	movs	r3, #12
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <HAL_SD_MspInit+0xec>)
 80008a6:	f000 faaf 	bl	8000e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008aa:	2304      	movs	r3, #4
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008ba:	230c      	movs	r3, #12
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <HAL_SD_MspInit+0xf0>)
 80008c6:	f000 fa9f 	bl	8000e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40012c00 	.word	0x40012c00
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020c00 	.word	0x40020c00

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_UART_MspInit+0x84>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d12b      	bne.n	800095e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <HAL_UART_MspInit+0x88>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_UART_MspInit+0x88>)
 8000910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_UART_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_UART_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_UART_MspInit+0x88>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_UART_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800093e:	230c      	movs	r3, #12
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094e:	2307      	movs	r3, #7
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <HAL_UART_MspInit+0x8c>)
 800095a:	f000 fa55 	bl	8000e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40004400 	.word	0x40004400
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f8ca 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <OTG_FS_IRQHandler+0x10>)
 80009d6:	f000 fd1a 	bl	800140e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000483c 	.word	0x2000483c

080009e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <_sbrk+0x50>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x16>
		heap_end = &end;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <_sbrk+0x50>)
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <_sbrk+0x54>)
 80009f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <_sbrk+0x50>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <_sbrk+0x50>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4413      	add	r3, r2
 8000a08:	466a      	mov	r2, sp
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d907      	bls.n	8000a1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a0e:	f009 fd77 	bl	800a500 <__errno>
 8000a12:	4602      	mov	r2, r0
 8000a14:	230c      	movs	r3, #12
 8000a16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	e006      	b.n	8000a2c <_sbrk+0x48>
	}

	heap_end += incr;
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <_sbrk+0x50>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <_sbrk+0x50>)
 8000a28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200001a0 	.word	0x200001a0
 8000a38:	20004c48 	.word	0x20004c48

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <SystemInit+0x28>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a46:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <SystemInit+0x28>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SystemInit+0x28>)
 8000a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a56:	609a      	str	r2, [r3, #8]
#endif
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a6e:	e003      	b.n	8000a78 <LoopCopyDataInit>

08000a70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a76:	3104      	adds	r1, #4

08000a78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a80:	d3f6      	bcc.n	8000a70 <CopyDataInit>
  ldr  r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a84:	e002      	b.n	8000a8c <LoopFillZerobss>

08000a86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a88:	f842 3b04 	str.w	r3, [r2], #4

08000a8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a90:	d3f9      	bcc.n	8000a86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a92:	f7ff ffd3 	bl	8000a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f009 fd39 	bl	800a50c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fd1b 	bl	80004d4 <main>
  bx  lr    
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000aa4:	0800a7cc 	.word	0x0800a7cc
  ldr  r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000aac:	20000184 	.word	0x20000184
  ldr  r2, =_sbss
 8000ab0:	20000184 	.word	0x20000184
  ldr  r3, = _ebss
 8000ab4:	20004c48 	.word	0x20004c48

08000ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>
	...

08000abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_Init+0x40>)
 8000ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_Init+0x40>)
 8000ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_Init+0x40>)
 8000ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f94d 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 f808 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fe56 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023c00 	.word	0x40023c00

08000b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x54>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_InitTick+0x58>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f965 	bl	8000dee <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f92d 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <HAL_InitTick+0x5c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20002330 	.word	0x20002330

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20002330 	.word	0x20002330

08000ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba8:	f7ff ffee 	bl	8000b88 <HAL_GetTick>
 8000bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb8:	d005      	beq.n	8000bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_Delay+0x40>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bc6:	bf00      	nop
 8000bc8:	f7ff ffde 	bl	8000b88 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d8f7      	bhi.n	8000bc8 <HAL_Delay+0x28>
  {
  }
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000008 	.word	0x20000008

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff8e 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff29 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff3e 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff31 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa2 	bl	8000d40 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e159      	b.n	80010d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f040 8148 	bne.w	80010d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d00b      	beq.n	8000e62 <HAL_GPIO_Init+0x5a>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e56:	2b11      	cmp	r3, #17
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b12      	cmp	r3, #18
 8000e60:	d130      	bne.n	8000ec4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0xfc>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b12      	cmp	r3, #18
 8000f02:	d123      	bne.n	8000f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	69b9      	ldr	r1, [r7, #24]
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0203 	and.w	r2, r3, #3
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80a2 	beq.w	80010d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b56      	ldr	r3, [pc, #344]	; (80010ec <HAL_GPIO_Init+0x2e4>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a55      	ldr	r2, [pc, #340]	; (80010ec <HAL_GPIO_Init+0x2e4>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b53      	ldr	r3, [pc, #332]	; (80010ec <HAL_GPIO_Init+0x2e4>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000faa:	4a51      	ldr	r2, [pc, #324]	; (80010f0 <HAL_GPIO_Init+0x2e8>)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	; (80010f4 <HAL_GPIO_Init+0x2ec>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d019      	beq.n	800100a <HAL_GPIO_Init+0x202>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d013      	beq.n	8001006 <HAL_GPIO_Init+0x1fe>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a46      	ldr	r2, [pc, #280]	; (80010fc <HAL_GPIO_Init+0x2f4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00d      	beq.n	8001002 <HAL_GPIO_Init+0x1fa>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a45      	ldr	r2, [pc, #276]	; (8001100 <HAL_GPIO_Init+0x2f8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d007      	beq.n	8000ffe <HAL_GPIO_Init+0x1f6>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a44      	ldr	r2, [pc, #272]	; (8001104 <HAL_GPIO_Init+0x2fc>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_GPIO_Init+0x1f2>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e008      	b.n	800100c <HAL_GPIO_Init+0x204>
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x204>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e004      	b.n	800100c <HAL_GPIO_Init+0x204>
 8001002:	2302      	movs	r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x204>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x204>
 800100a:	2300      	movs	r3, #0
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	4093      	lsls	r3, r2
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800101c:	4934      	ldr	r1, [pc, #208]	; (80010f0 <HAL_GPIO_Init+0x2e8>)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102a:	4b37      	ldr	r3, [pc, #220]	; (8001108 <HAL_GPIO_Init+0x300>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800104e:	4a2e      	ldr	r2, [pc, #184]	; (8001108 <HAL_GPIO_Init+0x300>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001054:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <HAL_GPIO_Init+0x300>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001078:	4a23      	ldr	r2, [pc, #140]	; (8001108 <HAL_GPIO_Init+0x300>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <HAL_GPIO_Init+0x300>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a2:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_GPIO_Init+0x300>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_GPIO_Init+0x300>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_GPIO_Init+0x300>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3301      	adds	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	f67f aea2 	bls.w	8000e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e0:	bf00      	nop
 80010e2:	3724      	adds	r7, #36	; 0x24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40013c00 	.word	0x40013c00

0800110c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	887b      	ldrh	r3, [r7, #2]
 800111e:	4013      	ands	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e001      	b.n	800112e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800116e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001170:	b08f      	sub	sp, #60	; 0x3c
 8001172:	af0a      	add	r7, sp, #40	; 0x28
 8001174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e10f      	b.n	80013a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d106      	bne.n	80011a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f008 fe90 	bl	8009ec0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 f9ad 	bl	800551e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	687e      	ldr	r6, [r7, #4]
 80011cc:	466d      	mov	r5, sp
 80011ce:	f106 0410 	add.w	r4, r6, #16
 80011d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011de:	e885 0003 	stmia.w	r5, {r0, r1}
 80011e2:	1d33      	adds	r3, r6, #4
 80011e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f004 f884 	bl	80052f4 <USB_CoreInit>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2202      	movs	r2, #2
 80011f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0d0      	b.n	80013a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f004 f99b 	bl	8005540 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e04a      	b.n	80012a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	1a9b      	subs	r3, r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	333d      	adds	r3, #61	; 0x3d
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	333c      	adds	r3, #60	; 0x3c
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	b298      	uxth	r0, r3
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	3342      	adds	r3, #66	; 0x42
 800124c:	4602      	mov	r2, r0
 800124e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	333f      	adds	r3, #63	; 0x3f
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3344      	adds	r3, #68	; 0x44
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	3348      	adds	r3, #72	; 0x48
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	3350      	adds	r3, #80	; 0x50
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	3301      	adds	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3af      	bcc.n	8001210 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e044      	b.n	8001340 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	1a9b      	subs	r3, r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800130e:	7bfa      	ldrb	r2, [r7, #15]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	3301      	adds	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	d3b5      	bcc.n	80012b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	687e      	ldr	r6, [r7, #4]
 8001352:	466d      	mov	r5, sp
 8001354:	f106 0410 	add.w	r4, r6, #16
 8001358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800135c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001360:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001364:	e885 0003 	stmia.w	r5, {r0, r1}
 8001368:	1d33      	adds	r3, r6, #4
 800136a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f004 f911 	bl	8005594 <USB_DevInit>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2202      	movs	r2, #2
 800137c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e00d      	b.n	80013a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f005 f906 	bl	80065aa <USB_DevDisconnect>

  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_PCD_Start+0x1c>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e020      	b.n	8001406 <HAL_PCD_Start+0x5e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d109      	bne.n	80013e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d005      	beq.n	80013e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f005 f8c4 	bl	800657a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 f880 	bl	80054fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800140e:	b590      	push	{r4, r7, lr}
 8001410:	b08d      	sub	sp, #52	; 0x34
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f005 f96b 	bl	8006700 <USB_GetMode>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	f040 838e 	bne.w	8001b4e <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f005 f8cf 	bl	80065da <USB_ReadInterrupts>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8384 	beq.w	8001b4c <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f005 f8c6 	bl	80065da <USB_ReadInterrupts>
 800144e:	4603      	mov	r3, r0
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b02      	cmp	r3, #2
 8001456:	d107      	bne.n	8001468 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f002 0202 	and.w	r2, r2, #2
 8001466:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f005 f8b4 	bl	80065da <USB_ReadInterrupts>
 8001472:	4603      	mov	r3, r0
 8001474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001478:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800147c:	d17b      	bne.n	8001576 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f005 f8ba 	bl	8006600 <USB_ReadDevAllOutEpInterrupt>
 800148c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800148e:	e06f      	b.n	8001570 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d064      	beq.n	8001564 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f005 f8df 	bl	8006668 <USB_ReadDevOutEPInterrupt>
 80014aa:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00c      	beq.n	80014d0 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	015a      	lsls	r2, r3, #5
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	4413      	add	r3, r2
 80014be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014c2:	461a      	mov	r2, r3
 80014c4:	2301      	movs	r3, #1
 80014c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 fe3a 	bl	8002144 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00c      	beq.n	80014f4 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 ff39 	bl	8002354 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ee:	461a      	mov	r2, r3
 80014f0:	2308      	movs	r3, #8
 80014f2:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	015a      	lsls	r2, r3, #5
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150a:	461a      	mov	r2, r3
 800150c:	2310      	movs	r3, #16
 800150e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	2b00      	cmp	r3, #0
 8001518:	d015      	beq.n	8001546 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d108      	bne.n	8001534 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800152c:	461a      	mov	r2, r3
 800152e:	2101      	movs	r1, #1
 8001530:	f005 f92a 	bl	8006788 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001540:	461a      	mov	r2, r3
 8001542:	2320      	movs	r3, #32
 8001544:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	015a      	lsls	r2, r3, #5
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4413      	add	r3, r2
 8001558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800155c:	461a      	mov	r2, r3
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	3301      	adds	r3, #1
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156c:	085b      	lsrs	r3, r3, #1
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	2b00      	cmp	r3, #0
 8001574:	d18c      	bne.n	8001490 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f005 f82d 	bl	80065da <USB_ReadInterrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001586:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800158a:	f040 80c4 	bne.w	8001716 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f005 f84e 	bl	8006634 <USB_ReadDevAllInEpInterrupt>
 8001598:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800159e:	e0b6      	b.n	800170e <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80ab 	beq.w	8001702 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 f874 	bl	80066a4 <USB_ReadDevInEPInterrupt>
 80015bc:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d05b      	beq.n	8001680 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	2201      	movs	r2, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69f9      	ldr	r1, [r7, #28]
 80015e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015e8:	4013      	ands	r3, r2
 80015ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f8:	461a      	mov	r2, r3
 80015fa:	2301      	movs	r3, #1
 80015fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d11b      	bne.n	800163e <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3348      	adds	r3, #72	; 0x48
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4403      	add	r3, r0
 8001626:	3344      	adds	r3, #68	; 0x44
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4419      	add	r1, r3
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4403      	add	r3, r0
 800163a:	3348      	adds	r3, #72	; 0x48
 800163c:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f008 fcbc 	bl	8009fc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d116      	bne.n	8001680 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	2b00      	cmp	r3, #0
 8001656:	d113      	bne.n	8001680 <HAL_PCD_IRQHandler+0x272>
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3350      	adds	r3, #80	; 0x50
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d108      	bne.n	8001680 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001678:	461a      	mov	r2, r3
 800167a:	2101      	movs	r1, #1
 800167c:	f005 f884 	bl	8006788 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001696:	461a      	mov	r2, r3
 8001698:	2308      	movs	r3, #8
 800169a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d008      	beq.n	80016b8 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	015a      	lsls	r2, r3, #5
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b2:	461a      	mov	r2, r3
 80016b4:	2310      	movs	r3, #16
 80016b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d008      	beq.n	80016d4 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	015a      	lsls	r2, r3, #5
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ce:	461a      	mov	r2, r3
 80016d0:	2340      	movs	r3, #64	; 0x40
 80016d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d008      	beq.n	80016f0 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	015a      	lsls	r2, r3, #5
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ea:	461a      	mov	r2, r3
 80016ec:	2302      	movs	r3, #2
 80016ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fc94 	bl	800202a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	3301      	adds	r3, #1
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	f47f af45 	bne.w	80015a0 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f004 ff5d 	bl	80065da <USB_ReadInterrupts>
 8001720:	4603      	mov	r3, r0
 8001722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800172a:	d122      	bne.n	8001772 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001746:	2b01      	cmp	r3, #1
 8001748:	d108      	bne.n	800175c <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001752:	2100      	movs	r1, #0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 feb5 	bl	80024c4 <HAL_PCDEx_LPM_Callback>
 800175a:	e002      	b.n	8001762 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f008 fca7 	bl	800a0b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f004 ff2f 	bl	80065da <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001786:	d112      	bne.n	80017ae <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b01      	cmp	r3, #1
 8001796:	d102      	bne.n	800179e <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f008 fc63 	bl	800a064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f004 ff11 	bl	80065da <USB_ReadInterrupts>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c2:	f040 80a7 	bne.w	8001914 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2110      	movs	r1, #16
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 f849 	bl	8005878 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ea:	e036      	b.n	800185a <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ee:	015a      	lsls	r2, r3, #5
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f8:	461a      	mov	r2, r3
 80017fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001802:	015a      	lsls	r2, r3, #5
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001810:	0151      	lsls	r1, r2, #5
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	440a      	add	r2, r1
 8001816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800181a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800181e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182c:	461a      	mov	r2, r3
 800182e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001832:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001836:	015a      	lsls	r2, r3, #5
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	4413      	add	r3, r2
 800183c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001844:	0151      	lsls	r1, r2, #5
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	440a      	add	r2, r1
 800184a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800184e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001852:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	3301      	adds	r3, #1
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001860:	429a      	cmp	r2, r3
 8001862:	d3c3      	bcc.n	80017ec <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001872:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001876:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	2b00      	cmp	r3, #0
 800187e:	d016      	beq.n	80018ae <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001890:	f043 030b 	orr.w	r3, r3, #11
 8001894:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a6:	f043 030b 	orr.w	r3, r3, #11
 80018aa:	6453      	str	r3, [r2, #68]	; 0x44
 80018ac:	e015      	b.n	80018da <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d4:	f043 030b 	orr.w	r3, r3, #11
 80018d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018fe:	461a      	mov	r2, r3
 8001900:	f004 ff42 	bl	8006788 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f004 fe5e 	bl	80065da <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001928:	d124      	bne.n	8001974 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f004 fef4 	bl	800671c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f003 fffe 	bl	800593a <USB_GetDevSpeed>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681c      	ldr	r4, [r3, #0]
 800194a:	f001 f9f5 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 800194e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	4620      	mov	r0, r4
 800195a:	f003 fd2d 	bl	80053b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f008 fb57 	bl	800a012 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	695a      	ldr	r2, [r3, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001972:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f004 fe2e 	bl	80065da <USB_ReadInterrupts>
 800197e:	4603      	mov	r3, r0
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	2b10      	cmp	r3, #16
 8001986:	d161      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0210 	bic.w	r2, r2, #16
 8001996:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f003 020f 	and.w	r2, r3, #15
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	3304      	adds	r3, #4
 80019b6:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	0c5b      	lsrs	r3, r3, #17
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d124      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d035      	beq.n	8001a3c <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019de:	b29b      	uxth	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	6a38      	ldr	r0, [r7, #32]
 80019e4:	f004 fca6 	bl	8006334 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019f4:	441a      	add	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a06:	441a      	add	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	619a      	str	r2, [r3, #24]
 8001a0c:	e016      	b.n	8001a3c <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	0c5b      	lsrs	r3, r3, #17
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d110      	bne.n	8001a3c <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a20:	2208      	movs	r2, #8
 8001a22:	4619      	mov	r1, r3
 8001a24:	6a38      	ldr	r0, [r7, #32]
 8001a26:	f004 fc85 	bl	8006334 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a36:	441a      	add	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699a      	ldr	r2, [r3, #24]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0210 	orr.w	r2, r2, #16
 8001a4a:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 fdc2 	bl	80065da <USB_ReadInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d10a      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f008 fac8 	bl	8009ff6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f002 0208 	and.w	r2, r2, #8
 8001a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 fdad 	bl	80065da <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a8a:	d10f      	bne.n	8001aac <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f008 fb2a 	bl	800a0f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 fd92 	bl	80065da <USB_ReadInterrupts>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ac0:	d10f      	bne.n	8001ae2 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f008 fafd 	bl	800a0cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 fd77 	bl	80065da <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af6:	d10a      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f008 fb0b 	bl	800a114 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fd61 	bl	80065da <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d115      	bne.n	8001b4e <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f008 fafb 	bl	800a130 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	e000      	b.n	8001b4e <HAL_PCD_IRQHandler+0x740>
      return;
 8001b4c:	bf00      	nop
    }
  }
}
 8001b4e:	3734      	adds	r7, #52	; 0x34
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd90      	pop	{r4, r7, pc}

08001b54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_PCD_SetAddress+0x1a>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e013      	b.n	8001b96 <HAL_PCD_SetAddress+0x42>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	78fa      	ldrb	r2, [r7, #3]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 fcd1 	bl	800652e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	4608      	mov	r0, r1
 8001ba8:	4611      	mov	r1, r2
 8001baa:	461a      	mov	r2, r3
 8001bac:	4603      	mov	r3, r0
 8001bae:	70fb      	strb	r3, [r7, #3]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	803b      	strh	r3, [r7, #0]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da0f      	bge.n	8001be4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 020f 	and.w	r2, r3, #15
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	3338      	adds	r3, #56	; 0x38
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	705a      	strb	r2, [r3, #1]
 8001be2:	e00f      	b.n	8001c04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	f003 020f 	and.w	r2, r3, #15
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c10:	883a      	ldrh	r2, [r7, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	78ba      	ldrb	r2, [r7, #2]
 8001c1a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c2e:	78bb      	ldrb	r3, [r7, #2]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d102      	bne.n	8001c3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_PCD_EP_Open+0xaa>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e00e      	b.n	8001c66 <HAL_PCD_EP_Open+0xc8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68f9      	ldr	r1, [r7, #12]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 fe94 	bl	8005984 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c64:	7afb      	ldrb	r3, [r7, #11]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da0f      	bge.n	8001ca2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	f003 020f 	and.w	r2, r3, #15
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	3338      	adds	r3, #56	; 0x38
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	3304      	adds	r3, #4
 8001c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	705a      	strb	r2, [r3, #1]
 8001ca0:	e00f      	b.n	8001cc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	f003 020f 	and.w	r2, r3, #15
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_PCD_EP_Close+0x6e>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e00e      	b.n	8001cfa <HAL_PCD_EP_Close+0x8c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f003 fed2 	bl	8005a94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	f003 020f 	and.w	r2, r3, #15
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	3304      	adds	r3, #4
 8001d2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2200      	movs	r2, #0
 8001d42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d44:	7afb      	ldrb	r3, [r7, #11]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d102      	bne.n	8001d5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d5e:	7afb      	ldrb	r3, [r7, #11]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	6979      	ldr	r1, [r7, #20]
 8001d76:	f004 f955 	bl	8006024 <USB_EP0StartXfer>
 8001d7a:	e008      	b.n	8001d8e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	6979      	ldr	r1, [r7, #20]
 8001d8a:	f003 ff07 	bl	8005b9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	f003 020f 	and.w	r2, r3, #15
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	f003 020f 	and.w	r2, r3, #15
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	3338      	adds	r3, #56	; 0x38
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	3304      	adds	r3, #4
 8001dee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2201      	movs	r2, #1
 8001e06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e08:	7afb      	ldrb	r3, [r7, #11]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d102      	bne.n	8001e22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e22:	7afb      	ldrb	r3, [r7, #11]
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d109      	bne.n	8001e40 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	6979      	ldr	r1, [r7, #20]
 8001e3a:	f004 f8f3 	bl	8006024 <USB_EP0StartXfer>
 8001e3e:	e008      	b.n	8001e52 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	f003 fea5 	bl	8005b9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d901      	bls.n	8001e7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e050      	b.n	8001f1c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	da0f      	bge.n	8001ea2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 020f 	and.w	r2, r3, #15
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	3338      	adds	r3, #56	; 0x38
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	3304      	adds	r3, #4
 8001e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	705a      	strb	r2, [r3, #1]
 8001ea0:	e00d      	b.n	8001ebe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_EP_SetStall+0x82>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e01e      	b.n	8001f1c <HAL_PCD_EP_SetStall+0xc0>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 fa4a 	bl	8006386 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10a      	bne.n	8001f12 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	b2d9      	uxtb	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f004 fc3b 	bl	8006788 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 020f 	and.w	r2, r3, #15
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d901      	bls.n	8001f42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e042      	b.n	8001fc8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da0f      	bge.n	8001f6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	f003 020f 	and.w	r2, r3, #15
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	3338      	adds	r3, #56	; 0x38
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3304      	adds	r3, #4
 8001f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	705a      	strb	r2, [r3, #1]
 8001f68:	e00f      	b.n	8001f8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 020f 	and.w	r2, r3, #15
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	3304      	adds	r3, #4
 8001f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_PCD_EP_ClrStall+0x86>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e00e      	b.n	8001fc8 <HAL_PCD_EP_ClrStall+0xa4>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68f9      	ldr	r1, [r7, #12]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f004 fa52 	bl	8006462 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_PCD_EP_Flush+0x1a>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e01b      	b.n	8002022 <HAL_PCD_EP_Flush+0x52>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da09      	bge.n	800200e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f003 fc36 	bl	8005878 <USB_FlushTxFifo>
 800200c:	e004      	b.n	8002018 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fc56 	bl	80058c4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b08a      	sub	sp, #40	; 0x28
 800202e:	af02      	add	r7, sp, #8
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	3338      	adds	r3, #56	; 0x38
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	429a      	cmp	r2, r3
 800205c:	d901      	bls.n	8002062 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e06c      	b.n	800213c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	429a      	cmp	r2, r3
 8002076:	d902      	bls.n	800207e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3303      	adds	r3, #3
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002086:	e02b      	b.n	80020e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	429a      	cmp	r2, r3
 800209c:	d902      	bls.n	80020a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	3303      	adds	r3, #3
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68d9      	ldr	r1, [r3, #12]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	4603      	mov	r3, r0
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f004 f901 	bl	80062ca <USB_WritePacket>

    ep->xfer_buff  += len;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	441a      	add	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	441a      	add	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d809      	bhi.n	800210a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020fe:	429a      	cmp	r2, r3
 8002100:	d203      	bcs.n	800210a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1be      	bne.n	8002088 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	429a      	cmp	r2, r3
 8002114:	d811      	bhi.n	800213a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	2201      	movs	r2, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	43db      	mvns	r3, r3
 8002130:	6939      	ldr	r1, [r7, #16]
 8002132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002136:	4013      	ands	r3, r2
 8002138:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	333c      	adds	r3, #60	; 0x3c
 800215c:	3304      	adds	r3, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	f040 80b3 	bne.w	80022e2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d028      	beq.n	80021d8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a70      	ldr	r2, [pc, #448]	; (800234c <PCD_EP_OutXfrComplete_int+0x208>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d90e      	bls.n	80021ac <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a4:	461a      	mov	r2, r3
 80021a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021aa:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f007 fedb 	bl	8009f68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021bc:	461a      	mov	r2, r3
 80021be:	2101      	movs	r1, #1
 80021c0:	f004 fae2 	bl	8006788 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d0:	461a      	mov	r2, r3
 80021d2:	2308      	movs	r3, #8
 80021d4:	6093      	str	r3, [r2, #8]
 80021d6:	e0b3      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ee:	461a      	mov	r2, r3
 80021f0:	2320      	movs	r3, #32
 80021f2:	6093      	str	r3, [r2, #8]
 80021f4:	e0a4      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 809f 	bne.w	8002340 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a51      	ldr	r2, [pc, #324]	; (800234c <PCD_EP_OutXfrComplete_int+0x208>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d90f      	bls.n	800222a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002220:	461a      	mov	r2, r3
 8002222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002226:	6093      	str	r3, [r2, #8]
 8002228:	e08a      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800223c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	0159      	lsls	r1, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	440b      	add	r3, r1
 8002246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002250:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4403      	add	r3, r0
 8002260:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002264:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4403      	add	r3, r0
 8002288:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4419      	add	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4403      	add	r3, r0
 800229e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022a2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f007 fe6e 	bl	8009f8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d144      	bne.n	8002340 <PCD_EP_OutXfrComplete_int+0x1fc>
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d138      	bne.n	8002340 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022d8:	461a      	mov	r2, r3
 80022da:	2101      	movs	r1, #1
 80022dc:	f004 fa54 	bl	8006788 <USB_EP0_OutStart>
 80022e0:	e02e      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4a1a      	ldr	r2, [pc, #104]	; (8002350 <PCD_EP_OutXfrComplete_int+0x20c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d124      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002300:	461a      	mov	r2, r3
 8002302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	e01a      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	2320      	movs	r3, #32
 8002324:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f007 fe2d 	bl	8009f8c <HAL_PCD_DataOutStageCallback>
 8002332:	e005      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f007 fe26 	bl	8009f8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	4f54300a 	.word	0x4f54300a
 8002350:	4f54310a 	.word	0x4f54310a

08002354 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	333c      	adds	r3, #60	; 0x3c
 800236c:	3304      	adds	r3, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d113      	bne.n	80023b2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4a1f      	ldr	r2, [pc, #124]	; (800240c <PCD_EP_OutSetupPacket_int+0xb8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d922      	bls.n	80023d8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01d      	beq.n	80023d8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a8:	461a      	mov	r2, r3
 80023aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ae:	6093      	str	r3, [r2, #8]
 80023b0:	e012      	b.n	80023d8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4a16      	ldr	r2, [pc, #88]	; (8002410 <PCD_EP_OutSetupPacket_int+0xbc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10e      	bne.n	80023d8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d009      	beq.n	80023d8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f007 fdc5 	bl	8009f68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <PCD_EP_OutSetupPacket_int+0xb8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d90c      	bls.n	8002400 <PCD_EP_OutSetupPacket_int+0xac>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d108      	bne.n	8002400 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023f8:	461a      	mov	r2, r3
 80023fa:	2101      	movs	r1, #1
 80023fc:	f004 f9c4 	bl	8006788 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	4f54300a 	.word	0x4f54300a
 8002410:	4f54310a 	.word	0x4f54310a

08002414 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
 8002420:	4613      	mov	r3, r2
 8002422:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002432:	883b      	ldrh	r3, [r7, #0]
 8002434:	0419      	lsls	r1, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	430a      	orrs	r2, r1
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
 8002440:	e028      	b.n	8002494 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4413      	add	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e00d      	b.n	8002472 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3340      	adds	r3, #64	; 0x40
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	4413      	add	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	3301      	adds	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	3b01      	subs	r3, #1
 8002478:	429a      	cmp	r2, r3
 800247a:	d3ec      	bcc.n	8002456 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800247c:	883b      	ldrh	r3, [r7, #0]
 800247e:	0418      	lsls	r0, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	3b01      	subs	r3, #1
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	4302      	orrs	r2, r0
 800248c:	3340      	adds	r3, #64	; 0x40
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e25b      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d075      	beq.n	80025e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fa:	4ba3      	ldr	r3, [pc, #652]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d00c      	beq.n	8002520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4ba0      	ldr	r3, [pc, #640]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800250e:	2b08      	cmp	r3, #8
 8002510:	d112      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002512:	4b9d      	ldr	r3, [pc, #628]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251e:	d10b      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	4b99      	ldr	r3, [pc, #612]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d05b      	beq.n	80025e4 <HAL_RCC_OscConfig+0x108>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d157      	bne.n	80025e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e236      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d106      	bne.n	8002550 <HAL_RCC_OscConfig+0x74>
 8002542:	4b91      	ldr	r3, [pc, #580]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a90      	ldr	r2, [pc, #576]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e01d      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b8b      	ldr	r3, [pc, #556]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a8a      	ldr	r2, [pc, #552]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b88      	ldr	r3, [pc, #544]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a87      	ldr	r2, [pc, #540]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002574:	4b84      	ldr	r3, [pc, #528]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a83      	ldr	r2, [pc, #524]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b81      	ldr	r3, [pc, #516]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a80      	ldr	r2, [pc, #512]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe faf8 	bl	8000b88 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe faf4 	bl	8000b88 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1fb      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0xc0>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fae4 	bl	8000b88 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fae0 	bl	8000b88 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e1e7      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0xe8>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d063      	beq.n	80026ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f2:	4b65      	ldr	r3, [pc, #404]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fe:	4b62      	ldr	r3, [pc, #392]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002606:	2b08      	cmp	r3, #8
 8002608:	d11c      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260a:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d116      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d001      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e1bb      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262e:	4b56      	ldr	r3, [pc, #344]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4952      	ldr	r1, [pc, #328]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	e03a      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264c:	4b4f      	ldr	r3, [pc, #316]	; (800278c <HAL_RCC_OscConfig+0x2b0>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7fe fa99 	bl	8000b88 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265a:	f7fe fa95 	bl	8000b88 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e19c      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4940      	ldr	r1, [pc, #256]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]
 800268c:	e015      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_OscConfig+0x2b0>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fa78 	bl	8000b88 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe fa74 	bl	8000b88 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e17b      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d030      	beq.n	8002728 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ce:	4b30      	ldr	r3, [pc, #192]	; (8002790 <HAL_RCC_OscConfig+0x2b4>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fa58 	bl	8000b88 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026dc:	f7fe fa54 	bl	8000b88 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e15b      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x200>
 80026fa:	e015      	b.n	8002728 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_OscConfig+0x2b4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7fe fa41 	bl	8000b88 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270a:	f7fe fa3d 	bl	8000b88 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e144      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800271e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80a0 	beq.w	8002876 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_OscConfig+0x2b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d121      	bne.n	80027b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_RCC_OscConfig+0x2b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_RCC_OscConfig+0x2b8>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277e:	f7fe fa03 	bl	8000b88 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	e011      	b.n	80027aa <HAL_RCC_OscConfig+0x2ce>
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	42470000 	.word	0x42470000
 8002790:	42470e80 	.word	0x42470e80
 8002794:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7fe f9f6 	bl	8000b88 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0fd      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b81      	ldr	r3, [pc, #516]	; (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d106      	bne.n	80027cc <HAL_RCC_OscConfig+0x2f0>
 80027be:	4b7d      	ldr	r3, [pc, #500]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a7c      	ldr	r2, [pc, #496]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	e01c      	b.n	8002806 <HAL_RCC_OscConfig+0x32a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x312>
 80027d4:	4b77      	ldr	r3, [pc, #476]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a76      	ldr	r2, [pc, #472]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	4b74      	ldr	r3, [pc, #464]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a73      	ldr	r2, [pc, #460]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
 80027ec:	e00b      	b.n	8002806 <HAL_RCC_OscConfig+0x32a>
 80027ee:	4b71      	ldr	r3, [pc, #452]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a70      	ldr	r2, [pc, #448]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	4b6e      	ldr	r3, [pc, #440]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a6d      	ldr	r2, [pc, #436]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d015      	beq.n	800283a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7fe f9bb 	bl	8000b88 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7fe f9b7 	bl	8000b88 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0bc      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	4b61      	ldr	r3, [pc, #388]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ee      	beq.n	8002816 <HAL_RCC_OscConfig+0x33a>
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7fe f9a5 	bl	8000b88 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fe f9a1 	bl	8000b88 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0a6      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002858:	4b56      	ldr	r3, [pc, #344]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4b52      	ldr	r3, [pc, #328]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a51      	ldr	r2, [pc, #324]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8092 	beq.w	80029a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002880:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d05c      	beq.n	8002946 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d141      	bne.n	8002918 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b48      	ldr	r3, [pc, #288]	; (80029b8 <HAL_RCC_OscConfig+0x4dc>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe f975 	bl	8000b88 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe f971 	bl	8000b88 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e078      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b4:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69da      	ldr	r2, [r3, #28]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	019b      	lsls	r3, r3, #6
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	3b01      	subs	r3, #1
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	061b      	lsls	r3, r3, #24
 80028e4:	4933      	ldr	r1, [pc, #204]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ea:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <HAL_RCC_OscConfig+0x4dc>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe f94a 	bl	8000b88 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe f946 	bl	8000b88 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e04d      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x41c>
 8002916:	e045      	b.n	80029a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_RCC_OscConfig+0x4dc>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe f933 	bl	8000b88 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe f92f 	bl	8000b88 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e036      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x44a>
 8002944:	e02e      	b.n	80029a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e029      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_RCC_OscConfig+0x4d8>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	429a      	cmp	r2, r3
 8002964:	d11c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d115      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800297a:	4013      	ands	r3, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002980:	4293      	cmp	r3, r2
 8002982:	d10d      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d106      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40007000 	.word	0x40007000
 80029b4:	40023800 	.word	0x40023800
 80029b8:	42470060 	.word	0x42470060

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0cc      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d90c      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0b8      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a10:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	494d      	ldr	r1, [pc, #308]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d044      	beq.n	8002adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d119      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e07f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e067      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4934      	ldr	r1, [pc, #208]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7fe f86c 	bl	8000b88 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7fe f868 	bl	8000b88 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d20c      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e032      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4916      	ldr	r1, [pc, #88]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	490e      	ldr	r1, [pc, #56]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b42:	f000 f821 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8002b46:	4601      	mov	r1, r0
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	5cd3      	ldrb	r3, [r2, r3]
 8002b56:	fa21 f303 	lsr.w	r3, r1, r3
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd ffcc 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	0800a754 	.word	0x0800a754
 8002b80:	20000000 	.word	0x20000000
 8002b84:	20000004 	.word	0x20000004

08002b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	2300      	movs	r3, #0
 8002b98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d007      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0x32>
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x38>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f040 80b4 	bne.w	8002d1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b5e      	ldr	r3, [pc, #376]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bb6:	60bb      	str	r3, [r7, #8]
       break;
 8002bb8:	e0b3      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bba:	4b5e      	ldr	r3, [pc, #376]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002bbc:	60bb      	str	r3, [r7, #8]
      break;
 8002bbe:	e0b0      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc0:	4b5a      	ldr	r3, [pc, #360]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bca:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d04a      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd6:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	f04f 0400 	mov.w	r4, #0
 8002be0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	ea03 0501 	and.w	r5, r3, r1
 8002bec:	ea04 0602 	and.w	r6, r4, r2
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	4632      	mov	r2, r6
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	f04f 0400 	mov.w	r4, #0
 8002bfc:	0154      	lsls	r4, r2, #5
 8002bfe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c02:	014b      	lsls	r3, r1, #5
 8002c04:	4619      	mov	r1, r3
 8002c06:	4622      	mov	r2, r4
 8002c08:	1b49      	subs	r1, r1, r5
 8002c0a:	eb62 0206 	sbc.w	r2, r2, r6
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	f04f 0400 	mov.w	r4, #0
 8002c16:	0194      	lsls	r4, r2, #6
 8002c18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c1c:	018b      	lsls	r3, r1, #6
 8002c1e:	1a5b      	subs	r3, r3, r1
 8002c20:	eb64 0402 	sbc.w	r4, r4, r2
 8002c24:	f04f 0100 	mov.w	r1, #0
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	00e2      	lsls	r2, r4, #3
 8002c2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c32:	00d9      	lsls	r1, r3, #3
 8002c34:	460b      	mov	r3, r1
 8002c36:	4614      	mov	r4, r2
 8002c38:	195b      	adds	r3, r3, r5
 8002c3a:	eb44 0406 	adc.w	r4, r4, r6
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	0262      	lsls	r2, r4, #9
 8002c48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c4c:	0259      	lsls	r1, r3, #9
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4614      	mov	r4, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	4621      	mov	r1, r4
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f04f 0400 	mov.w	r4, #0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4623      	mov	r3, r4
 8002c60:	f7fd fab8 	bl	80001d4 <__aeabi_uldivmod>
 8002c64:	4603      	mov	r3, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	e049      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6c:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	f04f 0400 	mov.w	r4, #0
 8002c76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	ea03 0501 	and.w	r5, r3, r1
 8002c82:	ea04 0602 	and.w	r6, r4, r2
 8002c86:	4629      	mov	r1, r5
 8002c88:	4632      	mov	r2, r6
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	f04f 0400 	mov.w	r4, #0
 8002c92:	0154      	lsls	r4, r2, #5
 8002c94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c98:	014b      	lsls	r3, r1, #5
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4622      	mov	r2, r4
 8002c9e:	1b49      	subs	r1, r1, r5
 8002ca0:	eb62 0206 	sbc.w	r2, r2, r6
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	f04f 0400 	mov.w	r4, #0
 8002cac:	0194      	lsls	r4, r2, #6
 8002cae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cb2:	018b      	lsls	r3, r1, #6
 8002cb4:	1a5b      	subs	r3, r3, r1
 8002cb6:	eb64 0402 	sbc.w	r4, r4, r2
 8002cba:	f04f 0100 	mov.w	r1, #0
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	00e2      	lsls	r2, r4, #3
 8002cc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cc8:	00d9      	lsls	r1, r3, #3
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4614      	mov	r4, r2
 8002cce:	195b      	adds	r3, r3, r5
 8002cd0:	eb44 0406 	adc.w	r4, r4, r6
 8002cd4:	f04f 0100 	mov.w	r1, #0
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	02a2      	lsls	r2, r4, #10
 8002cde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ce2:	0299      	lsls	r1, r3, #10
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4614      	mov	r4, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	4621      	mov	r1, r4
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f04f 0400 	mov.w	r4, #0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	f7fd fa6d 	bl	80001d4 <__aeabi_uldivmod>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	60bb      	str	r3, [r7, #8]
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d1e:	60bb      	str	r3, [r7, #8]
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	68bb      	ldr	r3, [r7, #8]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	007a1200 	.word	0x007a1200

08002d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d54:	f7ff fff0 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d58:	4601      	mov	r1, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0a9b      	lsrs	r3, r3, #10
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4a03      	ldr	r2, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	0800a764 	.word	0x0800a764

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d7c:	f7ff ffdc 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d80:	4601      	mov	r1, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0b5b      	lsrs	r3, r3, #13
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4a03      	ldr	r2, [pc, #12]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	0800a764 	.word	0x0800a764

08002da0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e022      	b.n	8002df8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d105      	bne.n	8002dca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fd fd13 	bl	80007f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2203      	movs	r2, #3
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f814 	bl	8002e00 <HAL_SD_InitCard>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00a      	b.n	8002df8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	b08e      	sub	sp, #56	; 0x38
 8002e04:	af04      	add	r7, sp, #16
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002e1c:	2376      	movs	r3, #118	; 0x76
 8002e1e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681d      	ldr	r5, [r3, #0]
 8002e24:	466c      	mov	r4, sp
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e32:	f107 0308 	add.w	r3, r7, #8
 8002e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e38:	4628      	mov	r0, r5
 8002e3a:	f001 fcf7 	bl	800482c <SDIO_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e031      	b.n	8002eb4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_SD_InitCard+0xbc>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 fd2f 	bl	80048be <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <HAL_SD_InitCard+0xbc>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 ff00 	bl	8003c6c <SD_PowerON>
 8002e6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00b      	beq.n	8002e8c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e013      	b.n	8002eb4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fe1f 	bl	8003ad0 <SD_InitCard>
 8002e92:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3728      	adds	r7, #40	; 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebc:	422580a0 	.word	0x422580a0

08002ec0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b092      	sub	sp, #72	; 0x48
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002ece:	f7fd fe5b 	bl	8000b88 <HAL_GetTick>
 8002ed2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e1d9      	b.n	80032a6 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	f040 81cc 	bne.w	8003298 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	441a      	add	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d907      	bls.n	8002f24 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e1c0      	b.n	80032a6 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2203      	movs	r2, #3
 8002f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2200      	movs	r2, #0
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d002      	beq.n	8002f42 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	025b      	lsls	r3, r3, #9
 8002f40:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 fd4a 	bl	80049e4 <SDMMC_CmdBlockLength>
 8002f50:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00f      	beq.n	8002f78 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a9b      	ldr	r2, [pc, #620]	; (80031cc <HAL_SD_ReadBlocks+0x30c>)
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f66:	431a      	orrs	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e196      	b.n	80032a6 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	025b      	lsls	r3, r3, #9
 8002f82:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002f84:	2390      	movs	r3, #144	; 0x90
 8002f86:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002f90:	2301      	movs	r3, #1
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f107 0214 	add.w	r2, r7, #20
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 fcf4 	bl	800498c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d90a      	bls.n	8002fc0 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2202      	movs	r2, #2
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 fd58 	bl	8004a6c <SDMMC_CmdReadMultiBlock>
 8002fbc:	6478      	str	r0, [r7, #68]	; 0x44
 8002fbe:	e009      	b.n	8002fd4 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 fd2b 	bl	8004a28 <SDMMC_CmdReadSingleBlock>
 8002fd2:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d012      	beq.n	8003000 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a7b      	ldr	r2, [pc, #492]	; (80031cc <HAL_SD_ReadBlocks+0x30c>)
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e152      	b.n	80032a6 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003004:	e061      	b.n	80030ca <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d03c      	beq.n	800308e <HAL_SD_ReadBlocks+0x1ce>
 8003014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d039      	beq.n	800308e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800301a:	2300      	movs	r3, #0
 800301c:	643b      	str	r3, [r7, #64]	; 0x40
 800301e:	e033      	b.n	8003088 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f001 fc2c 	bl	8004882 <SDIO_ReadFIFO>
 800302a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	b2da      	uxtb	r2, r3
 8003030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003032:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	3301      	adds	r3, #1
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800303a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303c:	3b01      	subs	r3, #1
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	b2da      	uxtb	r2, r3
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	3301      	adds	r3, #1
 800304e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003052:	3b01      	subs	r3, #1
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	b2da      	uxtb	r2, r3
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003062:	3301      	adds	r3, #1
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003068:	3b01      	subs	r3, #1
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	0e1b      	lsrs	r3, r3, #24
 8003070:	b2da      	uxtb	r2, r3
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003078:	3301      	adds	r3, #1
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800307c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307e:	3b01      	subs	r3, #1
 8003080:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003084:	3301      	adds	r3, #1
 8003086:	643b      	str	r3, [r7, #64]	; 0x40
 8003088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308a:	2b07      	cmp	r3, #7
 800308c:	d9c8      	bls.n	8003020 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800308e:	f7fd fd7b 	bl	8000b88 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800309a:	429a      	cmp	r2, r3
 800309c:	d902      	bls.n	80030a4 <HAL_SD_ReadBlocks+0x1e4>
 800309e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d112      	bne.n	80030ca <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a48      	ldr	r2, [pc, #288]	; (80031cc <HAL_SD_ReadBlocks+0x30c>)
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0ed      	b.n	80032a6 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d0:	f240 332a 	movw	r3, #810	; 0x32a
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d095      	beq.n	8003006 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d022      	beq.n	800312e <HAL_SD_ReadBlocks+0x26e>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d91f      	bls.n	800312e <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d01b      	beq.n	800312e <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 fd1c 	bl	8004b38 <SDMMC_CmdStopTransfer>
 8003100:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003104:	2b00      	cmp	r3, #0
 8003106:	d012      	beq.n	800312e <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2f      	ldr	r2, [pc, #188]	; (80031cc <HAL_SD_ReadBlocks+0x30c>)
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003116:	431a      	orrs	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0bb      	b.n	80032a6 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d012      	beq.n	8003162 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <HAL_SD_ReadBlocks+0x30c>)
 8003142:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	f043 0208 	orr.w	r2, r3, #8
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0a1      	b.n	80032a6 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a15      	ldr	r2, [pc, #84]	; (80031cc <HAL_SD_ReadBlocks+0x30c>)
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	f043 0202 	orr.w	r2, r3, #2
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e087      	b.n	80032a6 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d064      	beq.n	800326e <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a08      	ldr	r2, [pc, #32]	; (80031cc <HAL_SD_ReadBlocks+0x30c>)
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e06d      	b.n	80032a6 <HAL_SD_ReadBlocks+0x3e6>
 80031ca:	bf00      	nop
 80031cc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 fb54 	bl	8004882 <SDIO_ReadFIFO>
 80031da:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	3301      	adds	r3, #1
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80031ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ec:	3b01      	subs	r3, #1
 80031ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80031fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fc:	3301      	adds	r3, #1
 80031fe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003202:	3b01      	subs	r3, #1
 8003204:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	b2da      	uxtb	r2, r3
 800320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003212:	3301      	adds	r3, #1
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003218:	3b01      	subs	r3, #1
 800321a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321e:	0e1b      	lsrs	r3, r3, #24
 8003220:	b2da      	uxtb	r2, r3
 8003222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003224:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003228:	3301      	adds	r3, #1
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322e:	3b01      	subs	r3, #1
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003232:	f7fd fca9 	bl	8000b88 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800323e:	429a      	cmp	r2, r3
 8003240:	d902      	bls.n	8003248 <HAL_SD_ReadBlocks+0x388>
 8003242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003244:	2b00      	cmp	r3, #0
 8003246:	d112      	bne.n	800326e <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_SD_ReadBlocks+0x3f0>)
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e01b      	b.n	80032a6 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_SD_ReadBlocks+0x3c2>
 800327c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1a6      	bne.n	80031d0 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f240 523a 	movw	r2, #1338	; 0x53a
 800328a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e006      	b.n	80032a6 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3748      	adds	r7, #72	; 0x48
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	004005ff 	.word	0x004005ff

080032b4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b092      	sub	sp, #72	; 0x48
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80032c2:	f7fd fc61 	bl	8000b88 <HAL_GetTick>
 80032c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d107      	bne.n	80032e6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e184      	b.n	80035f0 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	f040 8177 	bne.w	80035e2 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	441a      	add	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	429a      	cmp	r2, r3
 8003306:	d907      	bls.n	8003318 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e16b      	b.n	80035f0 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2203      	movs	r2, #3
 800331c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2200      	movs	r2, #0
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	2b01      	cmp	r3, #1
 800332e:	d002      	beq.n	8003336 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	025b      	lsls	r3, r3, #9
 8003334:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800333e:	4618      	mov	r0, r3
 8003340:	f001 fb50 	bl	80049e4 <SDMMC_CmdBlockLength>
 8003344:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00f      	beq.n	800336c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a9d      	ldr	r2, [pc, #628]	; (80035c8 <HAL_SD_WriteBlocks+0x314>)
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335a:	431a      	orrs	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e141      	b.n	80035f0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800336c:	f04f 33ff 	mov.w	r3, #4294967295
 8003370:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	025b      	lsls	r3, r3, #9
 8003376:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003378:	2390      	movs	r3, #144	; 0x90
 800337a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800337c:	2300      	movs	r3, #0
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003380:	2300      	movs	r3, #0
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003384:	2301      	movs	r3, #1
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f107 0218 	add.w	r2, r7, #24
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f001 fafa 	bl	800498c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d90a      	bls.n	80033b4 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033aa:	4618      	mov	r0, r3
 80033ac:	f001 fba2 	bl	8004af4 <SDMMC_CmdWriteMultiBlock>
 80033b0:	6478      	str	r0, [r7, #68]	; 0x44
 80033b2:	e009      	b.n	80033c8 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2210      	movs	r2, #16
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033c0:	4618      	mov	r0, r3
 80033c2:	f001 fb75 	bl	8004ab0 <SDMMC_CmdWriteSingleBlock>
 80033c6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80033c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d012      	beq.n	80033f4 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7d      	ldr	r2, [pc, #500]	; (80035c8 <HAL_SD_WriteBlocks+0x314>)
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0fd      	b.n	80035f0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80033f8:	e065      	b.n	80034c6 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d040      	beq.n	800348a <HAL_SD_WriteBlocks+0x1d6>
 8003408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d03d      	beq.n	800348a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800340e:	2300      	movs	r3, #0
 8003410:	643b      	str	r3, [r7, #64]	; 0x40
 8003412:	e037      	b.n	8003484 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8003414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800341a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341c:	3301      	adds	r3, #1
 800341e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003422:	3b01      	subs	r3, #1
 8003424:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	021a      	lsls	r2, r3, #8
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003434:	3301      	adds	r3, #1
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800343a:	3b01      	subs	r3, #1
 800343c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	041a      	lsls	r2, r3, #16
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800344a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344c:	3301      	adds	r3, #1
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003452:	3b01      	subs	r3, #1
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	061a      	lsls	r2, r3, #24
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003464:	3301      	adds	r3, #1
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346a:	3b01      	subs	r3, #1
 800346c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f107 0214 	add.w	r2, r7, #20
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f001 fa0f 	bl	800489c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800347e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003480:	3301      	adds	r3, #1
 8003482:	643b      	str	r3, [r7, #64]	; 0x40
 8003484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003486:	2b07      	cmp	r3, #7
 8003488:	d9c4      	bls.n	8003414 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800348a:	f7fd fb7d 	bl	8000b88 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003496:	429a      	cmp	r2, r3
 8003498:	d902      	bls.n	80034a0 <HAL_SD_WriteBlocks+0x1ec>
 800349a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349c:	2b00      	cmp	r3, #0
 800349e:	d112      	bne.n	80034c6 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a48      	ldr	r2, [pc, #288]	; (80035c8 <HAL_SD_WriteBlocks+0x314>)
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ae:	431a      	orrs	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e094      	b.n	80035f0 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034cc:	f240 331a 	movw	r3, #794	; 0x31a
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d091      	beq.n	80033fa <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d022      	beq.n	800352a <HAL_SD_WriteBlocks+0x276>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d91f      	bls.n	800352a <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d01b      	beq.n	800352a <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 fb1e 	bl	8004b38 <SDMMC_CmdStopTransfer>
 80034fc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80034fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003500:	2b00      	cmp	r3, #0
 8003502:	d012      	beq.n	800352a <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2f      	ldr	r2, [pc, #188]	; (80035c8 <HAL_SD_WriteBlocks+0x314>)
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003512:	431a      	orrs	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e062      	b.n	80035f0 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d012      	beq.n	800355e <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_SD_WriteBlocks+0x314>)
 800353e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	f043 0208 	orr.w	r2, r3, #8
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e048      	b.n	80035f0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <HAL_SD_WriteBlocks+0x314>)
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	f043 0202 	orr.w	r2, r3, #2
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e02e      	b.n	80035f0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d015      	beq.n	80035cc <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <HAL_SD_WriteBlocks+0x314>)
 80035a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	f043 0210 	orr.w	r2, r3, #16
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e014      	b.n	80035f0 <HAL_SD_WriteBlocks+0x33c>
 80035c6:	bf00      	nop
 80035c8:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80035d4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e006      	b.n	80035f0 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3748      	adds	r7, #72	; 0x48
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003606:	0f9b      	lsrs	r3, r3, #30
 8003608:	b2da      	uxtb	r2, r3
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003612:	0e9b      	lsrs	r3, r3, #26
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	b2da      	uxtb	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003624:	0e1b      	lsrs	r3, r3, #24
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	b2da      	uxtb	r2, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003636:	0c1b      	lsrs	r3, r3, #16
 8003638:	b2da      	uxtb	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	b2da      	uxtb	r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800364e:	b2da      	uxtb	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003658:	0d1b      	lsrs	r3, r3, #20
 800365a:	b29a      	uxth	r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	b2da      	uxtb	r2, r3
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003676:	0bdb      	lsrs	r3, r3, #15
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003688:	0b9b      	lsrs	r3, r3, #14
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	b2da      	uxtb	r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369a:	0b5b      	lsrs	r3, r3, #13
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ac:	0b1b      	lsrs	r3, r3, #12
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2200      	movs	r2, #0
 80036be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d163      	bne.n	8003790 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036cc:	009a      	lsls	r2, r3, #2
 80036ce:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036d2:	4013      	ands	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80036d8:	0f92      	lsrs	r2, r2, #30
 80036da:	431a      	orrs	r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e4:	0edb      	lsrs	r3, r3, #27
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f6:	0e1b      	lsrs	r3, r3, #24
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003708:	0d5b      	lsrs	r3, r3, #21
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	b2da      	uxtb	r2, r3
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371a:	0c9b      	lsrs	r3, r3, #18
 800371c:	b2db      	uxtb	r3, r3
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	b2da      	uxtb	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372c:	0bdb      	lsrs	r3, r3, #15
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	b2da      	uxtb	r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	7e1b      	ldrb	r3, [r3, #24]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	3302      	adds	r3, #2
 8003750:	2201      	movs	r2, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800375a:	fb02 f203 	mul.w	r2, r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	7a1b      	ldrb	r3, [r3, #8]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	2201      	movs	r2, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800377c:	0a52      	lsrs	r2, r2, #9
 800377e:	fb02 f203 	mul.w	r2, r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378c:	661a      	str	r2, [r3, #96]	; 0x60
 800378e:	e031      	b.n	80037f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	2b01      	cmp	r3, #1
 8003796:	d11d      	bne.n	80037d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a6:	0c1b      	lsrs	r3, r3, #16
 80037a8:	431a      	orrs	r2, r3
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	3301      	adds	r3, #1
 80037b4:	029a      	lsls	r2, r3, #10
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	661a      	str	r2, [r3, #96]	; 0x60
 80037d2:	e00f      	b.n	80037f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a58      	ldr	r2, [pc, #352]	; (800393c <HAL_SD_GetCardCSD+0x344>)
 80037da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e09d      	b.n	8003930 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f8:	0b9b      	lsrs	r3, r3, #14
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	b2da      	uxtb	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380a:	09db      	lsrs	r3, r3, #7
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003812:	b2da      	uxtb	r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003822:	b2da      	uxtb	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	0fdb      	lsrs	r3, r3, #31
 800382e:	b2da      	uxtb	r2, r3
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	0f5b      	lsrs	r3, r3, #29
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	b2da      	uxtb	r2, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	0e9b      	lsrs	r3, r3, #26
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	b2da      	uxtb	r2, r3
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	0d9b      	lsrs	r3, r3, #22
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	b2da      	uxtb	r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	0d5b      	lsrs	r3, r3, #21
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	b2da      	uxtb	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	0c1b      	lsrs	r3, r3, #16
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	b2da      	uxtb	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	0bdb      	lsrs	r3, r3, #15
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	0b9b      	lsrs	r3, r3, #14
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	0b5b      	lsrs	r3, r3, #13
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	0b1b      	lsrs	r3, r3, #12
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	b2da      	uxtb	r2, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391e:	b2da      	uxtb	r2, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	004005ff 	.word	0x004005ff

08003940 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b08e      	sub	sp, #56	; 0x38
 800399c:	af04      	add	r7, sp, #16
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2203      	movs	r2, #3
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d02e      	beq.n	8003a10 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d106      	bne.n	80039c8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
 80039c6:	e029      	b.n	8003a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ce:	d10a      	bne.n	80039e6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fa01 	bl	8003dd8 <SD_WideBus_Enable>
 80039d6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
 80039e4:	e01a      	b.n	8003a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fa3e 	bl	8003e6e <SD_WideBus_Disable>
 80039f2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
 8003a00:	e00c      	b.n	8003a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a0e:	e005      	b.n	8003a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a18      	ldr	r2, [pc, #96]	; (8003a8c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e024      	b.n	8003a82 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681d      	ldr	r5, [r3, #0]
 8003a5e:	466c      	mov	r4, sp
 8003a60:	f107 0318 	add.w	r3, r7, #24
 8003a64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a6c:	f107 030c 	add.w	r3, r7, #12
 8003a70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a72:	4628      	mov	r0, r5
 8003a74:	f000 feda 	bl	800482c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3728      	adds	r7, #40	; 0x28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	004005ff 	.word	0x004005ff

08003a90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003a9c:	f107 030c 	add.w	r3, r7, #12
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f970 	bl	8003d88 <SD_SendStatus>
 8003aa8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	0a5b      	lsrs	r3, r3, #9
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003ac6:	693b      	ldr	r3, [r7, #16]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ad0:	b5b0      	push	{r4, r5, r7, lr}
 8003ad2:	b094      	sub	sp, #80	; 0x50
 8003ad4:	af04      	add	r7, sp, #16
 8003ad6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fefb 	bl	80048dc <SDIO_GetPowerState>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003aec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003af0:	e0b7      	b.n	8003c62 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d02f      	beq.n	8003b5a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 f924 	bl	8004d4c <SDMMC_CmdSendCID>
 8003b04:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <SD_InitCard+0x40>
    {
      return errorstate;
 8003b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0e:	e0a8      	b.n	8003c62 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 ff25 	bl	8004966 <SDIO_GetResponse>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2104      	movs	r1, #4
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 ff1c 	bl	8004966 <SDIO_GetResponse>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2108      	movs	r1, #8
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 ff13 	bl	8004966 <SDIO_GetResponse>
 8003b40:	4602      	mov	r2, r0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	210c      	movs	r1, #12
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 ff0a 	bl	8004966 <SDIO_GetResponse>
 8003b52:	4602      	mov	r2, r0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d00d      	beq.n	8003b7e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f107 020e 	add.w	r2, r7, #14
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f92a 	bl	8004dc6 <SDMMC_CmdSetRelAdd>
 8003b72:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <SD_InitCard+0xae>
    {
      return errorstate;
 8003b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7c:	e071      	b.n	8003c62 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d036      	beq.n	8003bf4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003b86:	89fb      	ldrh	r3, [r7, #14]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b96:	041b      	lsls	r3, r3, #16
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f001 f8f4 	bl	8004d88 <SDMMC_CmdSendCSD>
 8003ba0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <SD_InitCard+0xdc>
    {
      return errorstate;
 8003ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003baa:	e05a      	b.n	8003c62 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fed7 	bl	8004966 <SDIO_GetResponse>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2104      	movs	r1, #4
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fece 	bl	8004966 <SDIO_GetResponse>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2108      	movs	r1, #8
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fec5 	bl	8004966 <SDIO_GetResponse>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	210c      	movs	r1, #12
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 febc 	bl	8004966 <SDIO_GetResponse>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 feb3 	bl	8004966 <SDIO_GetResponse>
 8003c00:	4603      	mov	r3, r0
 8003c02:	0d1a      	lsrs	r2, r3, #20
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003c08:	f107 0310 	add.w	r3, r7, #16
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fcf2 	bl	80035f8 <HAL_SD_GetCardCSD>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c1e:	e020      	b.n	8003c62 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	f04f 0400 	mov.w	r4, #0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4623      	mov	r3, r4
 8003c32:	4608      	mov	r0, r1
 8003c34:	f000 ffa2 	bl	8004b7c <SDMMC_CmdSelDesel>
 8003c38:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <SD_InitCard+0x174>
  {
    return errorstate;
 8003c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c42:	e00e      	b.n	8003c62 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681d      	ldr	r5, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	466c      	mov	r4, sp
 8003c4c:	f103 0210 	add.w	r2, r3, #16
 8003c50:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c56:	3304      	adds	r3, #4
 8003c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f000 fde6 	bl	800482c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3740      	adds	r7, #64	; 0x40
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003c6c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 ff9c 	bl	8004bc2 <SDMMC_CmdGoIdleState>
 8003c8a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	e072      	b.n	8003d7c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 ffaf 	bl	8004bfe <SDMMC_CmdOperCond>
 8003ca0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 ff85 	bl	8004bc2 <SDMMC_CmdGoIdleState>
 8003cb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <SD_PowerON+0x5e>
    {
      return errorstate;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	e05b      	b.n	8003d7c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d137      	bne.n	8003d42 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 ffaf 	bl	8004c3c <SDMMC_CmdAppCommand>
 8003cde:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d02d      	beq.n	8003d42 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ce6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003cea:	e047      	b.n	8003d7c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 ffa2 	bl	8004c3c <SDMMC_CmdAppCommand>
 8003cf8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <SD_PowerON+0x98>
    {
      return errorstate;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	e03b      	b.n	8003d7c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	491e      	ldr	r1, [pc, #120]	; (8003d84 <SD_PowerON+0x118>)
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 ffb8 	bl	8004c80 <SDMMC_CmdAppOperCommand>
 8003d10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d1c:	e02e      	b.n	8003d7c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fe1e 	bl	8004966 <SDIO_GetResponse>
 8003d2a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	0fdb      	lsrs	r3, r3, #31
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <SD_PowerON+0xcc>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <SD_PowerON+0xce>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]

    count++;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d802      	bhi.n	8003d52 <SD_PowerON+0xe6>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0cc      	beq.n	8003cec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d902      	bls.n	8003d62 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d60:	e00c      	b.n	8003d7c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
 8003d72:	e002      	b.n	8003d7a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	c1100000 	.word	0xc1100000

08003d88 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003d98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d9c:	e018      	b.n	8003dd0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f001 f82c 	bl	8004e08 <SDMMC_CmdSendStatus>
 8003db0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <SD_SendStatus+0x34>
  {
    return errorstate;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	e009      	b.n	8003dd0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fdcf 	bl	8004966 <SDIO_GetResponse>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fdb9 	bl	8004966 <SDIO_GetResponse>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dfe:	d102      	bne.n	8003e06 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e04:	e02f      	b.n	8003e66 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003e06:	f107 030c 	add.w	r3, r7, #12
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f879 	bl	8003f04 <SD_FindSCR>
 8003e12:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	e023      	b.n	8003e66 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01c      	beq.n	8003e62 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f000 ff01 	bl	8004c3c <SDMMC_CmdAppCommand>
 8003e3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	e00f      	b.n	8003e66 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 ff3a 	bl	8004cc6 <SDMMC_CmdBusWidth>
 8003e52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	e003      	b.n	8003e66 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e001      	b.n	8003e66 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fd6e 	bl	8004966 <SDIO_GetResponse>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e94:	d102      	bne.n	8003e9c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003e96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e9a:	e02f      	b.n	8003efc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003e9c:	f107 030c 	add.w	r3, r7, #12
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f82e 	bl	8003f04 <SD_FindSCR>
 8003ea8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	e023      	b.n	8003efc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01c      	beq.n	8003ef8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f000 feb6 	bl	8004c3c <SDMMC_CmdAppCommand>
 8003ed0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	e00f      	b.n	8003efc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 feef 	bl	8004cc6 <SDMMC_CmdBusWidth>
 8003ee8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	e003      	b.n	8003efc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e001      	b.n	8003efc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ef8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b08f      	sub	sp, #60	; 0x3c
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003f0e:	f7fc fe3b 	bl	8000b88 <HAL_GetTick>
 8003f12:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2108      	movs	r1, #8
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fd5a 	bl	80049e4 <SDMMC_CmdBlockLength>
 8003f30:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	e0a9      	b.n	8004090 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f44:	041b      	lsls	r3, r3, #16
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f000 fe77 	bl	8004c3c <SDMMC_CmdAppCommand>
 8003f4e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	e09a      	b.n	8004090 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003f60:	2308      	movs	r3, #8
 8003f62:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003f64:	2330      	movs	r3, #48	; 0x30
 8003f66:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f107 0210 	add.w	r2, r7, #16
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fd04 	bl	800498c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 febe 	bl	8004d0a <SDMMC_CmdSendSCR>
 8003f8e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d022      	beq.n	8003fdc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	e07a      	b.n	8004090 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00e      	beq.n	8003fc6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6819      	ldr	r1, [r3, #0]
 8003fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	f107 0208 	add.w	r2, r7, #8
 8003fb4:	18d4      	adds	r4, r2, r3
 8003fb6:	4608      	mov	r0, r1
 8003fb8:	f000 fc63 	bl	8004882 <SDIO_ReadFIFO>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	6023      	str	r3, [r4, #0]
      index++;
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003fc6:	f7fc fddf 	bl	8000b88 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d102      	bne.n	8003fdc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003fd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fda:	e059      	b.n	8004090 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe2:	f240 432a 	movw	r3, #1066	; 0x42a
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0d6      	beq.n	8003f9a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2208      	movs	r2, #8
 8004000:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004002:	2308      	movs	r3, #8
 8004004:	e044      	b.n	8004090 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2202      	movs	r2, #2
 800401a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800401c:	2302      	movs	r3, #2
 800401e:	e037      	b.n	8004090 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2220      	movs	r2, #32
 8004034:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004036:	2320      	movs	r3, #32
 8004038:	e02a      	b.n	8004090 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004042:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	061a      	lsls	r2, r3, #24
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004050:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	0a1b      	lsrs	r3, r3, #8
 8004056:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800405a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	0e1b      	lsrs	r3, r3, #24
 8004060:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	601a      	str	r2, [r3, #0]
    scr++;
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	3304      	adds	r3, #4
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	061a      	lsls	r2, r3, #24
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004078:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	0a1b      	lsrs	r3, r3, #8
 800407e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004082:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	0e1b      	lsrs	r3, r3, #24
 8004088:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	373c      	adds	r7, #60	; 0x3c
 8004094:	46bd      	mov	sp, r7
 8004096:	bd90      	pop	{r4, r7, pc}

08004098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e03f      	b.n	800412a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fc fc10 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2224      	movs	r2, #36	; 0x24
 80040c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f829 	bl	8004134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004138:	b085      	sub	sp, #20
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004176:	f023 030c 	bic.w	r3, r3, #12
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	430b      	orrs	r3, r1
 8004182:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a2:	f040 818b 	bne.w	80044bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4ac1      	ldr	r2, [pc, #772]	; (80044b0 <UART_SetConfig+0x37c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d005      	beq.n	80041bc <UART_SetConfig+0x88>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4abf      	ldr	r2, [pc, #764]	; (80044b4 <UART_SetConfig+0x380>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	f040 80bd 	bne.w	8004336 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041bc:	f7fe fddc 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 80041c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	461d      	mov	r5, r3
 80041c6:	f04f 0600 	mov.w	r6, #0
 80041ca:	46a8      	mov	r8, r5
 80041cc:	46b1      	mov	r9, r6
 80041ce:	eb18 0308 	adds.w	r3, r8, r8
 80041d2:	eb49 0409 	adc.w	r4, r9, r9
 80041d6:	4698      	mov	r8, r3
 80041d8:	46a1      	mov	r9, r4
 80041da:	eb18 0805 	adds.w	r8, r8, r5
 80041de:	eb49 0906 	adc.w	r9, r9, r6
 80041e2:	f04f 0100 	mov.w	r1, #0
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041f6:	4688      	mov	r8, r1
 80041f8:	4691      	mov	r9, r2
 80041fa:	eb18 0005 	adds.w	r0, r8, r5
 80041fe:	eb49 0106 	adc.w	r1, r9, r6
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	461d      	mov	r5, r3
 8004208:	f04f 0600 	mov.w	r6, #0
 800420c:	196b      	adds	r3, r5, r5
 800420e:	eb46 0406 	adc.w	r4, r6, r6
 8004212:	461a      	mov	r2, r3
 8004214:	4623      	mov	r3, r4
 8004216:	f7fb ffdd 	bl	80001d4 <__aeabi_uldivmod>
 800421a:	4603      	mov	r3, r0
 800421c:	460c      	mov	r4, r1
 800421e:	461a      	mov	r2, r3
 8004220:	4ba5      	ldr	r3, [pc, #660]	; (80044b8 <UART_SetConfig+0x384>)
 8004222:	fba3 2302 	umull	r2, r3, r3, r2
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	461d      	mov	r5, r3
 8004230:	f04f 0600 	mov.w	r6, #0
 8004234:	46a9      	mov	r9, r5
 8004236:	46b2      	mov	sl, r6
 8004238:	eb19 0309 	adds.w	r3, r9, r9
 800423c:	eb4a 040a 	adc.w	r4, sl, sl
 8004240:	4699      	mov	r9, r3
 8004242:	46a2      	mov	sl, r4
 8004244:	eb19 0905 	adds.w	r9, r9, r5
 8004248:	eb4a 0a06 	adc.w	sl, sl, r6
 800424c:	f04f 0100 	mov.w	r1, #0
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004258:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800425c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004260:	4689      	mov	r9, r1
 8004262:	4692      	mov	sl, r2
 8004264:	eb19 0005 	adds.w	r0, r9, r5
 8004268:	eb4a 0106 	adc.w	r1, sl, r6
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	461d      	mov	r5, r3
 8004272:	f04f 0600 	mov.w	r6, #0
 8004276:	196b      	adds	r3, r5, r5
 8004278:	eb46 0406 	adc.w	r4, r6, r6
 800427c:	461a      	mov	r2, r3
 800427e:	4623      	mov	r3, r4
 8004280:	f7fb ffa8 	bl	80001d4 <__aeabi_uldivmod>
 8004284:	4603      	mov	r3, r0
 8004286:	460c      	mov	r4, r1
 8004288:	461a      	mov	r2, r3
 800428a:	4b8b      	ldr	r3, [pc, #556]	; (80044b8 <UART_SetConfig+0x384>)
 800428c:	fba3 1302 	umull	r1, r3, r3, r2
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	2164      	movs	r1, #100	; 0x64
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	3332      	adds	r3, #50	; 0x32
 800429e:	4a86      	ldr	r2, [pc, #536]	; (80044b8 <UART_SetConfig+0x384>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ac:	4498      	add	r8, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	461d      	mov	r5, r3
 80042b2:	f04f 0600 	mov.w	r6, #0
 80042b6:	46a9      	mov	r9, r5
 80042b8:	46b2      	mov	sl, r6
 80042ba:	eb19 0309 	adds.w	r3, r9, r9
 80042be:	eb4a 040a 	adc.w	r4, sl, sl
 80042c2:	4699      	mov	r9, r3
 80042c4:	46a2      	mov	sl, r4
 80042c6:	eb19 0905 	adds.w	r9, r9, r5
 80042ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042e2:	4689      	mov	r9, r1
 80042e4:	4692      	mov	sl, r2
 80042e6:	eb19 0005 	adds.w	r0, r9, r5
 80042ea:	eb4a 0106 	adc.w	r1, sl, r6
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	461d      	mov	r5, r3
 80042f4:	f04f 0600 	mov.w	r6, #0
 80042f8:	196b      	adds	r3, r5, r5
 80042fa:	eb46 0406 	adc.w	r4, r6, r6
 80042fe:	461a      	mov	r2, r3
 8004300:	4623      	mov	r3, r4
 8004302:	f7fb ff67 	bl	80001d4 <__aeabi_uldivmod>
 8004306:	4603      	mov	r3, r0
 8004308:	460c      	mov	r4, r1
 800430a:	461a      	mov	r2, r3
 800430c:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <UART_SetConfig+0x384>)
 800430e:	fba3 1302 	umull	r1, r3, r3, r2
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2164      	movs	r1, #100	; 0x64
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	3332      	adds	r3, #50	; 0x32
 8004320:	4a65      	ldr	r2, [pc, #404]	; (80044b8 <UART_SetConfig+0x384>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	f003 0207 	and.w	r2, r3, #7
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4442      	add	r2, r8
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	e26f      	b.n	8004816 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004336:	f7fe fd0b 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 800433a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	461d      	mov	r5, r3
 8004340:	f04f 0600 	mov.w	r6, #0
 8004344:	46a8      	mov	r8, r5
 8004346:	46b1      	mov	r9, r6
 8004348:	eb18 0308 	adds.w	r3, r8, r8
 800434c:	eb49 0409 	adc.w	r4, r9, r9
 8004350:	4698      	mov	r8, r3
 8004352:	46a1      	mov	r9, r4
 8004354:	eb18 0805 	adds.w	r8, r8, r5
 8004358:	eb49 0906 	adc.w	r9, r9, r6
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004368:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800436c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004370:	4688      	mov	r8, r1
 8004372:	4691      	mov	r9, r2
 8004374:	eb18 0005 	adds.w	r0, r8, r5
 8004378:	eb49 0106 	adc.w	r1, r9, r6
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	461d      	mov	r5, r3
 8004382:	f04f 0600 	mov.w	r6, #0
 8004386:	196b      	adds	r3, r5, r5
 8004388:	eb46 0406 	adc.w	r4, r6, r6
 800438c:	461a      	mov	r2, r3
 800438e:	4623      	mov	r3, r4
 8004390:	f7fb ff20 	bl	80001d4 <__aeabi_uldivmod>
 8004394:	4603      	mov	r3, r0
 8004396:	460c      	mov	r4, r1
 8004398:	461a      	mov	r2, r3
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <UART_SetConfig+0x384>)
 800439c:	fba3 2302 	umull	r2, r3, r3, r2
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	461d      	mov	r5, r3
 80043aa:	f04f 0600 	mov.w	r6, #0
 80043ae:	46a9      	mov	r9, r5
 80043b0:	46b2      	mov	sl, r6
 80043b2:	eb19 0309 	adds.w	r3, r9, r9
 80043b6:	eb4a 040a 	adc.w	r4, sl, sl
 80043ba:	4699      	mov	r9, r3
 80043bc:	46a2      	mov	sl, r4
 80043be:	eb19 0905 	adds.w	r9, r9, r5
 80043c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043da:	4689      	mov	r9, r1
 80043dc:	4692      	mov	sl, r2
 80043de:	eb19 0005 	adds.w	r0, r9, r5
 80043e2:	eb4a 0106 	adc.w	r1, sl, r6
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	461d      	mov	r5, r3
 80043ec:	f04f 0600 	mov.w	r6, #0
 80043f0:	196b      	adds	r3, r5, r5
 80043f2:	eb46 0406 	adc.w	r4, r6, r6
 80043f6:	461a      	mov	r2, r3
 80043f8:	4623      	mov	r3, r4
 80043fa:	f7fb feeb 	bl	80001d4 <__aeabi_uldivmod>
 80043fe:	4603      	mov	r3, r0
 8004400:	460c      	mov	r4, r1
 8004402:	461a      	mov	r2, r3
 8004404:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <UART_SetConfig+0x384>)
 8004406:	fba3 1302 	umull	r1, r3, r3, r2
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	2164      	movs	r1, #100	; 0x64
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	3332      	adds	r3, #50	; 0x32
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <UART_SetConfig+0x384>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004426:	4498      	add	r8, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	461d      	mov	r5, r3
 800442c:	f04f 0600 	mov.w	r6, #0
 8004430:	46a9      	mov	r9, r5
 8004432:	46b2      	mov	sl, r6
 8004434:	eb19 0309 	adds.w	r3, r9, r9
 8004438:	eb4a 040a 	adc.w	r4, sl, sl
 800443c:	4699      	mov	r9, r3
 800443e:	46a2      	mov	sl, r4
 8004440:	eb19 0905 	adds.w	r9, r9, r5
 8004444:	eb4a 0a06 	adc.w	sl, sl, r6
 8004448:	f04f 0100 	mov.w	r1, #0
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004454:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004458:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800445c:	4689      	mov	r9, r1
 800445e:	4692      	mov	sl, r2
 8004460:	eb19 0005 	adds.w	r0, r9, r5
 8004464:	eb4a 0106 	adc.w	r1, sl, r6
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	461d      	mov	r5, r3
 800446e:	f04f 0600 	mov.w	r6, #0
 8004472:	196b      	adds	r3, r5, r5
 8004474:	eb46 0406 	adc.w	r4, r6, r6
 8004478:	461a      	mov	r2, r3
 800447a:	4623      	mov	r3, r4
 800447c:	f7fb feaa 	bl	80001d4 <__aeabi_uldivmod>
 8004480:	4603      	mov	r3, r0
 8004482:	460c      	mov	r4, r1
 8004484:	461a      	mov	r2, r3
 8004486:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <UART_SetConfig+0x384>)
 8004488:	fba3 1302 	umull	r1, r3, r3, r2
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	2164      	movs	r1, #100	; 0x64
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	3332      	adds	r3, #50	; 0x32
 800449a:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <UART_SetConfig+0x384>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	f003 0207 	and.w	r2, r3, #7
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4442      	add	r2, r8
 80044ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80044ae:	e1b2      	b.n	8004816 <UART_SetConfig+0x6e2>
 80044b0:	40011000 	.word	0x40011000
 80044b4:	40011400 	.word	0x40011400
 80044b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4ad7      	ldr	r2, [pc, #860]	; (8004820 <UART_SetConfig+0x6ec>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d005      	beq.n	80044d2 <UART_SetConfig+0x39e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4ad6      	ldr	r2, [pc, #856]	; (8004824 <UART_SetConfig+0x6f0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	f040 80d1 	bne.w	8004674 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80044d2:	f7fe fc51 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 80044d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	469a      	mov	sl, r3
 80044dc:	f04f 0b00 	mov.w	fp, #0
 80044e0:	46d0      	mov	r8, sl
 80044e2:	46d9      	mov	r9, fp
 80044e4:	eb18 0308 	adds.w	r3, r8, r8
 80044e8:	eb49 0409 	adc.w	r4, r9, r9
 80044ec:	4698      	mov	r8, r3
 80044ee:	46a1      	mov	r9, r4
 80044f0:	eb18 080a 	adds.w	r8, r8, sl
 80044f4:	eb49 090b 	adc.w	r9, r9, fp
 80044f8:	f04f 0100 	mov.w	r1, #0
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004504:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004508:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800450c:	4688      	mov	r8, r1
 800450e:	4691      	mov	r9, r2
 8004510:	eb1a 0508 	adds.w	r5, sl, r8
 8004514:	eb4b 0609 	adc.w	r6, fp, r9
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4619      	mov	r1, r3
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	f04f 0400 	mov.w	r4, #0
 800452a:	0094      	lsls	r4, r2, #2
 800452c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004530:	008b      	lsls	r3, r1, #2
 8004532:	461a      	mov	r2, r3
 8004534:	4623      	mov	r3, r4
 8004536:	4628      	mov	r0, r5
 8004538:	4631      	mov	r1, r6
 800453a:	f7fb fe4b 	bl	80001d4 <__aeabi_uldivmod>
 800453e:	4603      	mov	r3, r0
 8004540:	460c      	mov	r4, r1
 8004542:	461a      	mov	r2, r3
 8004544:	4bb8      	ldr	r3, [pc, #736]	; (8004828 <UART_SetConfig+0x6f4>)
 8004546:	fba3 2302 	umull	r2, r3, r3, r2
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	469b      	mov	fp, r3
 8004554:	f04f 0c00 	mov.w	ip, #0
 8004558:	46d9      	mov	r9, fp
 800455a:	46e2      	mov	sl, ip
 800455c:	eb19 0309 	adds.w	r3, r9, r9
 8004560:	eb4a 040a 	adc.w	r4, sl, sl
 8004564:	4699      	mov	r9, r3
 8004566:	46a2      	mov	sl, r4
 8004568:	eb19 090b 	adds.w	r9, r9, fp
 800456c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004570:	f04f 0100 	mov.w	r1, #0
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800457c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004580:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004584:	4689      	mov	r9, r1
 8004586:	4692      	mov	sl, r2
 8004588:	eb1b 0509 	adds.w	r5, fp, r9
 800458c:	eb4c 060a 	adc.w	r6, ip, sl
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	4619      	mov	r1, r3
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	f04f 0400 	mov.w	r4, #0
 80045a2:	0094      	lsls	r4, r2, #2
 80045a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045a8:	008b      	lsls	r3, r1, #2
 80045aa:	461a      	mov	r2, r3
 80045ac:	4623      	mov	r3, r4
 80045ae:	4628      	mov	r0, r5
 80045b0:	4631      	mov	r1, r6
 80045b2:	f7fb fe0f 	bl	80001d4 <__aeabi_uldivmod>
 80045b6:	4603      	mov	r3, r0
 80045b8:	460c      	mov	r4, r1
 80045ba:	461a      	mov	r2, r3
 80045bc:	4b9a      	ldr	r3, [pc, #616]	; (8004828 <UART_SetConfig+0x6f4>)
 80045be:	fba3 1302 	umull	r1, r3, r3, r2
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2164      	movs	r1, #100	; 0x64
 80045c6:	fb01 f303 	mul.w	r3, r1, r3
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	3332      	adds	r3, #50	; 0x32
 80045d0:	4a95      	ldr	r2, [pc, #596]	; (8004828 <UART_SetConfig+0x6f4>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045dc:	4498      	add	r8, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	469b      	mov	fp, r3
 80045e2:	f04f 0c00 	mov.w	ip, #0
 80045e6:	46d9      	mov	r9, fp
 80045e8:	46e2      	mov	sl, ip
 80045ea:	eb19 0309 	adds.w	r3, r9, r9
 80045ee:	eb4a 040a 	adc.w	r4, sl, sl
 80045f2:	4699      	mov	r9, r3
 80045f4:	46a2      	mov	sl, r4
 80045f6:	eb19 090b 	adds.w	r9, r9, fp
 80045fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045fe:	f04f 0100 	mov.w	r1, #0
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800460a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800460e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004612:	4689      	mov	r9, r1
 8004614:	4692      	mov	sl, r2
 8004616:	eb1b 0509 	adds.w	r5, fp, r9
 800461a:	eb4c 060a 	adc.w	r6, ip, sl
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4619      	mov	r1, r3
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	f04f 0400 	mov.w	r4, #0
 8004630:	0094      	lsls	r4, r2, #2
 8004632:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004636:	008b      	lsls	r3, r1, #2
 8004638:	461a      	mov	r2, r3
 800463a:	4623      	mov	r3, r4
 800463c:	4628      	mov	r0, r5
 800463e:	4631      	mov	r1, r6
 8004640:	f7fb fdc8 	bl	80001d4 <__aeabi_uldivmod>
 8004644:	4603      	mov	r3, r0
 8004646:	460c      	mov	r4, r1
 8004648:	461a      	mov	r2, r3
 800464a:	4b77      	ldr	r3, [pc, #476]	; (8004828 <UART_SetConfig+0x6f4>)
 800464c:	fba3 1302 	umull	r1, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	2164      	movs	r1, #100	; 0x64
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	3332      	adds	r3, #50	; 0x32
 800465e:	4a72      	ldr	r2, [pc, #456]	; (8004828 <UART_SetConfig+0x6f4>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	f003 020f 	and.w	r2, r3, #15
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4442      	add	r2, r8
 8004670:	609a      	str	r2, [r3, #8]
 8004672:	e0d0      	b.n	8004816 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004674:	f7fe fb6c 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004678:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	469a      	mov	sl, r3
 800467e:	f04f 0b00 	mov.w	fp, #0
 8004682:	46d0      	mov	r8, sl
 8004684:	46d9      	mov	r9, fp
 8004686:	eb18 0308 	adds.w	r3, r8, r8
 800468a:	eb49 0409 	adc.w	r4, r9, r9
 800468e:	4698      	mov	r8, r3
 8004690:	46a1      	mov	r9, r4
 8004692:	eb18 080a 	adds.w	r8, r8, sl
 8004696:	eb49 090b 	adc.w	r9, r9, fp
 800469a:	f04f 0100 	mov.w	r1, #0
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046ae:	4688      	mov	r8, r1
 80046b0:	4691      	mov	r9, r2
 80046b2:	eb1a 0508 	adds.w	r5, sl, r8
 80046b6:	eb4b 0609 	adc.w	r6, fp, r9
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4619      	mov	r1, r3
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	f04f 0400 	mov.w	r4, #0
 80046cc:	0094      	lsls	r4, r2, #2
 80046ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046d2:	008b      	lsls	r3, r1, #2
 80046d4:	461a      	mov	r2, r3
 80046d6:	4623      	mov	r3, r4
 80046d8:	4628      	mov	r0, r5
 80046da:	4631      	mov	r1, r6
 80046dc:	f7fb fd7a 	bl	80001d4 <__aeabi_uldivmod>
 80046e0:	4603      	mov	r3, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b50      	ldr	r3, [pc, #320]	; (8004828 <UART_SetConfig+0x6f4>)
 80046e8:	fba3 2302 	umull	r2, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	469b      	mov	fp, r3
 80046f6:	f04f 0c00 	mov.w	ip, #0
 80046fa:	46d9      	mov	r9, fp
 80046fc:	46e2      	mov	sl, ip
 80046fe:	eb19 0309 	adds.w	r3, r9, r9
 8004702:	eb4a 040a 	adc.w	r4, sl, sl
 8004706:	4699      	mov	r9, r3
 8004708:	46a2      	mov	sl, r4
 800470a:	eb19 090b 	adds.w	r9, r9, fp
 800470e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004712:	f04f 0100 	mov.w	r1, #0
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800471e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004722:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004726:	4689      	mov	r9, r1
 8004728:	4692      	mov	sl, r2
 800472a:	eb1b 0509 	adds.w	r5, fp, r9
 800472e:	eb4c 060a 	adc.w	r6, ip, sl
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4619      	mov	r1, r3
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	f04f 0400 	mov.w	r4, #0
 8004744:	0094      	lsls	r4, r2, #2
 8004746:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800474a:	008b      	lsls	r3, r1, #2
 800474c:	461a      	mov	r2, r3
 800474e:	4623      	mov	r3, r4
 8004750:	4628      	mov	r0, r5
 8004752:	4631      	mov	r1, r6
 8004754:	f7fb fd3e 	bl	80001d4 <__aeabi_uldivmod>
 8004758:	4603      	mov	r3, r0
 800475a:	460c      	mov	r4, r1
 800475c:	461a      	mov	r2, r3
 800475e:	4b32      	ldr	r3, [pc, #200]	; (8004828 <UART_SetConfig+0x6f4>)
 8004760:	fba3 1302 	umull	r1, r3, r3, r2
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	2164      	movs	r1, #100	; 0x64
 8004768:	fb01 f303 	mul.w	r3, r1, r3
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	3332      	adds	r3, #50	; 0x32
 8004772:	4a2d      	ldr	r2, [pc, #180]	; (8004828 <UART_SetConfig+0x6f4>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800477e:	4498      	add	r8, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	469b      	mov	fp, r3
 8004784:	f04f 0c00 	mov.w	ip, #0
 8004788:	46d9      	mov	r9, fp
 800478a:	46e2      	mov	sl, ip
 800478c:	eb19 0309 	adds.w	r3, r9, r9
 8004790:	eb4a 040a 	adc.w	r4, sl, sl
 8004794:	4699      	mov	r9, r3
 8004796:	46a2      	mov	sl, r4
 8004798:	eb19 090b 	adds.w	r9, r9, fp
 800479c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047a0:	f04f 0100 	mov.w	r1, #0
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047b4:	4689      	mov	r9, r1
 80047b6:	4692      	mov	sl, r2
 80047b8:	eb1b 0509 	adds.w	r5, fp, r9
 80047bc:	eb4c 060a 	adc.w	r6, ip, sl
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	f04f 0400 	mov.w	r4, #0
 80047d2:	0094      	lsls	r4, r2, #2
 80047d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047d8:	008b      	lsls	r3, r1, #2
 80047da:	461a      	mov	r2, r3
 80047dc:	4623      	mov	r3, r4
 80047de:	4628      	mov	r0, r5
 80047e0:	4631      	mov	r1, r6
 80047e2:	f7fb fcf7 	bl	80001d4 <__aeabi_uldivmod>
 80047e6:	4603      	mov	r3, r0
 80047e8:	460c      	mov	r4, r1
 80047ea:	461a      	mov	r2, r3
 80047ec:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <UART_SetConfig+0x6f4>)
 80047ee:	fba3 1302 	umull	r1, r3, r3, r2
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	2164      	movs	r1, #100	; 0x64
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	3332      	adds	r3, #50	; 0x32
 8004800:	4a09      	ldr	r2, [pc, #36]	; (8004828 <UART_SetConfig+0x6f4>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	f003 020f 	and.w	r2, r3, #15
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4442      	add	r2, r8
 8004812:	609a      	str	r2, [r3, #8]
}
 8004814:	e7ff      	b.n	8004816 <UART_SetConfig+0x6e2>
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004820:	40011000 	.word	0x40011000
 8004824:	40011400 	.word	0x40011400
 8004828:	51eb851f 	.word	0x51eb851f

0800482c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800482c:	b084      	sub	sp, #16
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	f107 001c 	add.w	r0, r7, #28
 800483a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004842:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004844:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004846:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800484a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800484e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004852:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004856:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004866:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	b004      	add	sp, #16
 8004880:	4770      	bx	lr

08004882 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2203      	movs	r2, #3
 80048ca:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80048cc:	2002      	movs	r0, #2
 80048ce:	f7fc f967 	bl	8000ba0 <HAL_Delay>
  
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0303 	and.w	r3, r3, #3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004916:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800491c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004922:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004932:	f023 030f 	bic.w	r3, r3, #15
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	b2db      	uxtb	r3, r3
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3314      	adds	r3, #20
 8004974:	461a      	mov	r2, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	4413      	add	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
}  
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80049b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80049b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80049be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0

}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80049f2:	2310      	movs	r3, #16
 80049f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049f6:	2340      	movs	r3, #64	; 0x40
 80049f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff ff74 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a14:	2110      	movs	r1, #16
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa40 	bl	8004e9c <SDMMC_GetCmdResp1>
 8004a1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3720      	adds	r7, #32
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004a36:	2311      	movs	r3, #17
 8004a38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a3a:	2340      	movs	r3, #64	; 0x40
 8004a3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a48:	f107 0308 	add.w	r3, r7, #8
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff ff52 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	2111      	movs	r1, #17
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa1e 	bl	8004e9c <SDMMC_GetCmdResp1>
 8004a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a62:	69fb      	ldr	r3, [r7, #28]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004a7a:	2312      	movs	r3, #18
 8004a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a7e:	2340      	movs	r3, #64	; 0x40
 8004a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff ff30 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9c:	2112      	movs	r1, #18
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f9fc 	bl	8004e9c <SDMMC_GetCmdResp1>
 8004aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3720      	adds	r7, #32
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004abe:	2318      	movs	r3, #24
 8004ac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ac2:	2340      	movs	r3, #64	; 0x40
 8004ac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ace:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ad0:	f107 0308 	add.w	r3, r7, #8
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff ff0e 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae0:	2118      	movs	r1, #24
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f9da 	bl	8004e9c <SDMMC_GetCmdResp1>
 8004ae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aea:	69fb      	ldr	r3, [r7, #28]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3720      	adds	r7, #32
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004b02:	2319      	movs	r3, #25
 8004b04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b06:	2340      	movs	r3, #64	; 0x40
 8004b08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b14:	f107 0308 	add.w	r3, r7, #8
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff feec 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b24:	2119      	movs	r1, #25
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f9b8 	bl	8004e9c <SDMMC_GetCmdResp1>
 8004b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3720      	adds	r7, #32
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004b44:	230c      	movs	r3, #12
 8004b46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b48:	2340      	movs	r3, #64	; 0x40
 8004b4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b56:	f107 0308 	add.w	r3, r7, #8
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fecb 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004b62:	4a05      	ldr	r2, [pc, #20]	; (8004b78 <SDMMC_CmdStopTransfer+0x40>)
 8004b64:	210c      	movs	r1, #12
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f998 	bl	8004e9c <SDMMC_GetCmdResp1>
 8004b6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3720      	adds	r7, #32
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	05f5e100 	.word	0x05f5e100

08004b7c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004b8c:	2307      	movs	r3, #7
 8004b8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b90:	2340      	movs	r3, #64	; 0x40
 8004b92:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b9c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b9e:	f107 0310 	add.w	r3, r7, #16
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff fea7 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bae:	2107      	movs	r1, #7
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f973 	bl	8004e9c <SDMMC_GetCmdResp1>
 8004bb6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3728      	adds	r7, #40	; 0x28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b088      	sub	sp, #32
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004be0:	f107 0308 	add.w	r3, r7, #8
 8004be4:	4619      	mov	r1, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff fe86 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f92d 	bl	8004e4c <SDMMC_GetCmdError>
 8004bf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b088      	sub	sp, #32
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004c06:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004c0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c10:	2340      	movs	r3, #64	; 0x40
 8004c12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c1e:	f107 0308 	add.w	r3, r7, #8
 8004c22:	4619      	mov	r1, r3
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff fe67 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fb16 	bl	800525c <SDMMC_GetCmdResp7>
 8004c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c32:	69fb      	ldr	r3, [r7, #28]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004c4a:	2337      	movs	r3, #55	; 0x37
 8004c4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c4e:	2340      	movs	r3, #64	; 0x40
 8004c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c5c:	f107 0308 	add.w	r3, r7, #8
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fe48 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6c:	2137      	movs	r1, #55	; 0x37
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f914 	bl	8004e9c <SDMMC_GetCmdResp1>
 8004c74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c76:	69fb      	ldr	r3, [r7, #28]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004c96:	2329      	movs	r3, #41	; 0x29
 8004c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c9a:	2340      	movs	r3, #64	; 0x40
 8004c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ca8:	f107 0308 	add.w	r3, r7, #8
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fe22 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fa23 	bl	8005100 <SDMMC_GetCmdResp3>
 8004cba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b088      	sub	sp, #32
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004cd4:	2306      	movs	r3, #6
 8004cd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cd8:	2340      	movs	r3, #64	; 0x40
 8004cda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ce6:	f107 0308 	add.w	r3, r7, #8
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff fe03 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	2106      	movs	r1, #6
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f8cf 	bl	8004e9c <SDMMC_GetCmdResp1>
 8004cfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d00:	69fb      	ldr	r3, [r7, #28]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b088      	sub	sp, #32
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004d16:	2333      	movs	r3, #51	; 0x33
 8004d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d1a:	2340      	movs	r3, #64	; 0x40
 8004d1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d28:	f107 0308 	add.w	r3, r7, #8
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fde2 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d38:	2133      	movs	r1, #51	; 0x33
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8ae 	bl	8004e9c <SDMMC_GetCmdResp1>
 8004d40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d42:	69fb      	ldr	r3, [r7, #28]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3720      	adds	r7, #32
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004d58:	2302      	movs	r3, #2
 8004d5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004d5c:	23c0      	movs	r3, #192	; 0xc0
 8004d5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff fdc1 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f97c 	bl	8005074 <SDMMC_GetCmdResp2>
 8004d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004d96:	2309      	movs	r3, #9
 8004d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004d9a:	23c0      	movs	r3, #192	; 0xc0
 8004d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004da8:	f107 0308 	add.w	r3, r7, #8
 8004dac:	4619      	mov	r1, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fda2 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f95d 	bl	8005074 <SDMMC_GetCmdResp2>
 8004dba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b088      	sub	sp, #32
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dd8:	2340      	movs	r3, #64	; 0x40
 8004dda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004de6:	f107 0308 	add.w	r3, r7, #8
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fd83 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	2103      	movs	r1, #3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9bc 	bl	8005174 <SDMMC_GetCmdResp6>
 8004dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004e16:	230d      	movs	r3, #13
 8004e18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e1a:	2340      	movs	r3, #64	; 0x40
 8004e1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e28:	f107 0308 	add.w	r3, r7, #8
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff fd62 	bl	80048f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e38:	210d      	movs	r1, #13
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f82e 	bl	8004e9c <SDMMC_GetCmdResp1>
 8004e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e42:	69fb      	ldr	r3, [r7, #28]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3720      	adds	r7, #32
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004e4c:	b490      	push	{r4, r7}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <SDMMC_GetCmdError+0x48>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a0f      	ldr	r2, [pc, #60]	; (8004e98 <SDMMC_GetCmdError+0x4c>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	0a5b      	lsrs	r3, r3, #9
 8004e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e68:	4623      	mov	r3, r4
 8004e6a:	1e5c      	subs	r4, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e74:	e009      	b.n	8004e8a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f2      	beq.n	8004e68 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	22c5      	movs	r2, #197	; 0xc5
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc90      	pop	{r4, r7}
 8004e92:	4770      	bx	lr
 8004e94:	20000000 	.word	0x20000000
 8004e98:	10624dd3 	.word	0x10624dd3

08004e9c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004eaa:	4b6f      	ldr	r3, [pc, #444]	; (8005068 <SDMMC_GetCmdResp1+0x1cc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6f      	ldr	r2, [pc, #444]	; (800506c <SDMMC_GetCmdResp1+0x1d0>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	0a5b      	lsrs	r3, r3, #9
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004ebc:	4623      	mov	r3, r4
 8004ebe:	1e5c      	subs	r4, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ec4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ec8:	e0c9      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <SDMMC_GetCmdResp1+0x20>
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1eb      	bne.n	8004ebc <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ef6:	2304      	movs	r3, #4
 8004ef8:	e0b1      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d004      	beq.n	8004f10 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0a6      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	22c5      	movs	r2, #197	; 0xc5
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7ff fd18 	bl	800494c <SDIO_GetCommandResponse>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	7afb      	ldrb	r3, [r7, #11]
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d001      	beq.n	8004f2a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e099      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff fd1a 	bl	8004966 <SDIO_GetResponse>
 8004f32:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4b4e      	ldr	r3, [pc, #312]	; (8005070 <SDMMC_GetCmdResp1+0x1d4>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e08d      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	da02      	bge.n	8004f4e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004f48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f4c:	e087      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004f58:	2340      	movs	r3, #64	; 0x40
 8004f5a:	e080      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004f66:	2380      	movs	r3, #128	; 0x80
 8004f68:	e079      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f78:	e071      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f88:	e069      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f98:	e061      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004fa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fa8:	e059      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fb8:	e051      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fc8:	e049      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004fd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fd8:	e041      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004fe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe8:	e039      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ff8:	e031      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005004:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005008:	e029      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005014:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005018:	e021      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005024:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005028:	e019      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005034:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005038:	e011      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005044:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005048:	e009      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005054:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005058:	e001      	b.n	800505e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800505a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800505e:	4618      	mov	r0, r3
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd90      	pop	{r4, r7, pc}
 8005066:	bf00      	nop
 8005068:	20000000 	.word	0x20000000
 800506c:	10624dd3 	.word	0x10624dd3
 8005070:	fdffe008 	.word	0xfdffe008

08005074 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005074:	b490      	push	{r4, r7}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800507c:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <SDMMC_GetCmdResp2+0x84>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <SDMMC_GetCmdResp2+0x88>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	0a5b      	lsrs	r3, r3, #9
 8005088:	f241 3288 	movw	r2, #5000	; 0x1388
 800508c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005090:	4623      	mov	r3, r4
 8005092:	1e5c      	subs	r4, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005098:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800509c:	e026      	b.n	80050ec <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <SDMMC_GetCmdResp2+0x1c>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1eb      	bne.n	8005090 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2204      	movs	r2, #4
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050ca:	2304      	movs	r3, #4
 80050cc:	e00e      	b.n	80050ec <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d004      	beq.n	80050e4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e003      	b.n	80050ec <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	22c5      	movs	r2, #197	; 0xc5
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc90      	pop	{r4, r7}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000000 	.word	0x20000000
 80050fc:	10624dd3 	.word	0x10624dd3

08005100 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005100:	b490      	push	{r4, r7}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005108:	4b18      	ldr	r3, [pc, #96]	; (800516c <SDMMC_GetCmdResp3+0x6c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a18      	ldr	r2, [pc, #96]	; (8005170 <SDMMC_GetCmdResp3+0x70>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	0a5b      	lsrs	r3, r3, #9
 8005114:	f241 3288 	movw	r2, #5000	; 0x1388
 8005118:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800511c:	4623      	mov	r3, r4
 800511e:	1e5c      	subs	r4, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005124:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005128:	e01b      	b.n	8005162 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <SDMMC_GetCmdResp3+0x1c>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1eb      	bne.n	800511c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d004      	beq.n	800515a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2204      	movs	r2, #4
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005156:	2304      	movs	r3, #4
 8005158:	e003      	b.n	8005162 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	22c5      	movs	r2, #197	; 0xc5
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bc90      	pop	{r4, r7}
 800516a:	4770      	bx	lr
 800516c:	20000000 	.word	0x20000000
 8005170:	10624dd3 	.word	0x10624dd3

08005174 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	460b      	mov	r3, r1
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005182:	4b34      	ldr	r3, [pc, #208]	; (8005254 <SDMMC_GetCmdResp6+0xe0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a34      	ldr	r2, [pc, #208]	; (8005258 <SDMMC_GetCmdResp6+0xe4>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	0a5b      	lsrs	r3, r3, #9
 800518e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005192:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005196:	4623      	mov	r3, r4
 8005198:	1e5c      	subs	r4, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800519e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051a2:	e052      	b.n	800524a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <SDMMC_GetCmdResp6+0x22>
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1eb      	bne.n	8005196 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2204      	movs	r2, #4
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051d0:	2304      	movs	r3, #4
 80051d2:	e03a      	b.n	800524a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e02f      	b.n	800524a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff fbae 	bl	800494c <SDIO_GetCommandResponse>
 80051f0:	4603      	mov	r3, r0
 80051f2:	461a      	mov	r2, r3
 80051f4:	7afb      	ldrb	r3, [r7, #11]
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d001      	beq.n	80051fe <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e025      	b.n	800524a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	22c5      	movs	r2, #197	; 0xc5
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005204:	2100      	movs	r1, #0
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff fbad 	bl	8004966 <SDIO_GetResponse>
 800520c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	0c1b      	lsrs	r3, r3, #16
 800521c:	b29a      	uxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005222:	2300      	movs	r3, #0
 8005224:	e011      	b.n	800524a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005234:	e009      	b.n	800524a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005244:	e001      	b.n	800524a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	bd90      	pop	{r4, r7, pc}
 8005252:	bf00      	nop
 8005254:	20000000 	.word	0x20000000
 8005258:	10624dd3 	.word	0x10624dd3

0800525c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800525c:	b490      	push	{r4, r7}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005264:	4b21      	ldr	r3, [pc, #132]	; (80052ec <SDMMC_GetCmdResp7+0x90>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a21      	ldr	r2, [pc, #132]	; (80052f0 <SDMMC_GetCmdResp7+0x94>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	0a5b      	lsrs	r3, r3, #9
 8005270:	f241 3288 	movw	r2, #5000	; 0x1388
 8005274:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005278:	4623      	mov	r3, r4
 800527a:	1e5c      	subs	r4, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005284:	e02c      	b.n	80052e0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <SDMMC_GetCmdResp7+0x1c>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1eb      	bne.n	8005278 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2204      	movs	r2, #4
 80052b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052b2:	2304      	movs	r3, #4
 80052b4:	e014      	b.n	80052e0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e009      	b.n	80052e0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2240      	movs	r2, #64	; 0x40
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80052de:	2300      	movs	r3, #0
  
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc90      	pop	{r4, r7}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000000 	.word	0x20000000
 80052f0:	10624dd3 	.word	0x10624dd3

080052f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052f4:	b084      	sub	sp, #16
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	f107 001c 	add.w	r0, r7, #28
 8005302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	2b01      	cmp	r3, #1
 800530a:	d122      	bne.n	8005352 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f001 fa7c 	bl	8006844 <USB_CoreReset>
 800534c:	4603      	mov	r3, r0
 800534e:	73fb      	strb	r3, [r7, #15]
 8005350:	e01a      	b.n	8005388 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f001 fa70 	bl	8006844 <USB_CoreReset>
 8005364:	4603      	mov	r3, r0
 8005366:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	639a      	str	r2, [r3, #56]	; 0x38
 800537a:	e005      	b.n	8005388 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	2b01      	cmp	r3, #1
 800538c:	d10b      	bne.n	80053a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f043 0206 	orr.w	r2, r3, #6
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f043 0220 	orr.w	r2, r3, #32
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053b2:	b004      	add	sp, #16
 80053b4:	4770      	bx	lr
	...

080053b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d165      	bne.n	8005498 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a41      	ldr	r2, [pc, #260]	; (80054d4 <USB_SetTurnaroundTime+0x11c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d906      	bls.n	80053e2 <USB_SetTurnaroundTime+0x2a>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4a40      	ldr	r2, [pc, #256]	; (80054d8 <USB_SetTurnaroundTime+0x120>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d802      	bhi.n	80053e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80053dc:	230f      	movs	r3, #15
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e062      	b.n	80054a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4a3c      	ldr	r2, [pc, #240]	; (80054d8 <USB_SetTurnaroundTime+0x120>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d906      	bls.n	80053f8 <USB_SetTurnaroundTime+0x40>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4a3b      	ldr	r2, [pc, #236]	; (80054dc <USB_SetTurnaroundTime+0x124>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d802      	bhi.n	80053f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80053f2:	230e      	movs	r3, #14
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e057      	b.n	80054a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a38      	ldr	r2, [pc, #224]	; (80054dc <USB_SetTurnaroundTime+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d906      	bls.n	800540e <USB_SetTurnaroundTime+0x56>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4a37      	ldr	r2, [pc, #220]	; (80054e0 <USB_SetTurnaroundTime+0x128>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d802      	bhi.n	800540e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005408:	230d      	movs	r3, #13
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e04c      	b.n	80054a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a33      	ldr	r2, [pc, #204]	; (80054e0 <USB_SetTurnaroundTime+0x128>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d906      	bls.n	8005424 <USB_SetTurnaroundTime+0x6c>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4a32      	ldr	r2, [pc, #200]	; (80054e4 <USB_SetTurnaroundTime+0x12c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d802      	bhi.n	8005424 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800541e:	230c      	movs	r3, #12
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e041      	b.n	80054a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a2f      	ldr	r2, [pc, #188]	; (80054e4 <USB_SetTurnaroundTime+0x12c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d906      	bls.n	800543a <USB_SetTurnaroundTime+0x82>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4a2e      	ldr	r2, [pc, #184]	; (80054e8 <USB_SetTurnaroundTime+0x130>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d802      	bhi.n	800543a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005434:	230b      	movs	r3, #11
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e036      	b.n	80054a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4a2a      	ldr	r2, [pc, #168]	; (80054e8 <USB_SetTurnaroundTime+0x130>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d906      	bls.n	8005450 <USB_SetTurnaroundTime+0x98>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4a29      	ldr	r2, [pc, #164]	; (80054ec <USB_SetTurnaroundTime+0x134>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d802      	bhi.n	8005450 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800544a:	230a      	movs	r3, #10
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e02b      	b.n	80054a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a26      	ldr	r2, [pc, #152]	; (80054ec <USB_SetTurnaroundTime+0x134>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d906      	bls.n	8005466 <USB_SetTurnaroundTime+0xae>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <USB_SetTurnaroundTime+0x138>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d802      	bhi.n	8005466 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005460:	2309      	movs	r3, #9
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e020      	b.n	80054a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a21      	ldr	r2, [pc, #132]	; (80054f0 <USB_SetTurnaroundTime+0x138>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d906      	bls.n	800547c <USB_SetTurnaroundTime+0xc4>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4a20      	ldr	r2, [pc, #128]	; (80054f4 <USB_SetTurnaroundTime+0x13c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d802      	bhi.n	800547c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005476:	2308      	movs	r3, #8
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e015      	b.n	80054a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a1d      	ldr	r2, [pc, #116]	; (80054f4 <USB_SetTurnaroundTime+0x13c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d906      	bls.n	8005492 <USB_SetTurnaroundTime+0xda>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <USB_SetTurnaroundTime+0x140>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d802      	bhi.n	8005492 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800548c:	2307      	movs	r3, #7
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e00a      	b.n	80054a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005492:	2306      	movs	r3, #6
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e007      	b.n	80054a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d102      	bne.n	80054a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800549e:	2309      	movs	r3, #9
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	e001      	b.n	80054a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054a4:	2309      	movs	r3, #9
 80054a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	029b      	lsls	r3, r3, #10
 80054bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	00d8acbf 	.word	0x00d8acbf
 80054d8:	00e4e1bf 	.word	0x00e4e1bf
 80054dc:	00f423ff 	.word	0x00f423ff
 80054e0:	0106737f 	.word	0x0106737f
 80054e4:	011a499f 	.word	0x011a499f
 80054e8:	01312cff 	.word	0x01312cff
 80054ec:	014ca43f 	.word	0x014ca43f
 80054f0:	016e35ff 	.word	0x016e35ff
 80054f4:	01a6ab1f 	.word	0x01a6ab1f
 80054f8:	01e847ff 	.word	0x01e847ff

080054fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f043 0201 	orr.w	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f023 0201 	bic.w	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d106      	bne.n	800556c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60da      	str	r2, [r3, #12]
 800556a:	e00b      	b.n	8005584 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	e001      	b.n	8005584 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e003      	b.n	800558c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005584:	2032      	movs	r0, #50	; 0x32
 8005586:	f7fb fb0b 	bl	8000ba0 <HAL_Delay>

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005594:	b084      	sub	sp, #16
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	e009      	b.n	80055c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3340      	adds	r3, #64	; 0x40
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	2200      	movs	r2, #0
 80055c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	3301      	adds	r3, #1
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b0e      	cmp	r3, #14
 80055cc:	d9f2      	bls.n	80055b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d112      	bne.n	80055fa <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38
 80055f8:	e00b      	b.n	8005612 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005618:	461a      	mov	r2, r3
 800561a:	2300      	movs	r3, #0
 800561c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005624:	4619      	mov	r1, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562c:	461a      	mov	r2, r3
 800562e:	680b      	ldr	r3, [r1, #0]
 8005630:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10c      	bne.n	8005652 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d104      	bne.n	8005648 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800563e:	2100      	movs	r1, #0
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f961 	bl	8005908 <USB_SetDevSpeed>
 8005646:	e008      	b.n	800565a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005648:	2101      	movs	r1, #1
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f95c 	bl	8005908 <USB_SetDevSpeed>
 8005650:	e003      	b.n	800565a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005652:	2103      	movs	r1, #3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f957 	bl	8005908 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800565a:	2110      	movs	r1, #16
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f90b 	bl	8005878 <USB_FlushTxFifo>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f929 	bl	80058c4 <USB_FlushRxFifo>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	461a      	mov	r2, r3
 8005684:	2300      	movs	r3, #0
 8005686:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568e:	461a      	mov	r2, r3
 8005690:	2300      	movs	r3, #0
 8005692:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	461a      	mov	r2, r3
 800569c:	2300      	movs	r3, #0
 800569e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	e043      	b.n	800572e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056bc:	d118      	bne.n	80056f0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d0:	461a      	mov	r2, r3
 80056d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e013      	b.n	8005702 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e6:	461a      	mov	r2, r3
 80056e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e008      	b.n	8005702 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	461a      	mov	r2, r3
 80056fe:	2300      	movs	r3, #0
 8005700:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	461a      	mov	r2, r3
 8005710:	2300      	movs	r3, #0
 8005712:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	461a      	mov	r2, r3
 8005722:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005726:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	3301      	adds	r3, #1
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	429a      	cmp	r2, r3
 8005734:	d3b7      	bcc.n	80056a6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	e043      	b.n	80057c4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800574e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005752:	d118      	bne.n	8005786 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005766:	461a      	mov	r2, r3
 8005768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e013      	b.n	8005798 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577c:	461a      	mov	r2, r3
 800577e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	e008      	b.n	8005798 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005792:	461a      	mov	r2, r3
 8005794:	2300      	movs	r3, #0
 8005796:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a4:	461a      	mov	r2, r3
 80057a6:	2300      	movs	r3, #0
 80057a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b6:	461a      	mov	r2, r3
 80057b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	3301      	adds	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d3b7      	bcc.n	800573c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057de:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d111      	bne.n	800580a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ec:	461a      	mov	r2, r3
 80057ee:	4b20      	ldr	r3, [pc, #128]	; (8005870 <USB_DevInit+0x2dc>)
 80057f0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005804:	f043 0303 	orr.w	r3, r3, #3
 8005808:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005816:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	2b00      	cmp	r3, #0
 800581c:	d105      	bne.n	800582a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f043 0210 	orr.w	r2, r3, #16
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	4b11      	ldr	r3, [pc, #68]	; (8005874 <USB_DevInit+0x2e0>)
 8005830:	4313      	orrs	r3, r2
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	f043 0208 	orr.w	r2, r3, #8
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d107      	bne.n	800585e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005856:	f043 0304 	orr.w	r3, r3, #4
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800585e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800586a:	b004      	add	sp, #16
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	00800100 	.word	0x00800100
 8005874:	803c3800 	.word	0x803c3800

08005878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	019b      	lsls	r3, r3, #6
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3301      	adds	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4a09      	ldr	r2, [pc, #36]	; (80058c0 <USB_FlushTxFifo+0x48>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d901      	bls.n	80058a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e006      	b.n	80058b2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d0f0      	beq.n	8005892 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	00030d40 	.word	0x00030d40

080058c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2210      	movs	r2, #16
 80058d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3301      	adds	r3, #1
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4a09      	ldr	r2, [pc, #36]	; (8005904 <USB_FlushRxFifo+0x40>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d901      	bls.n	80058e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e006      	b.n	80058f6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d0f0      	beq.n	80058d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	00030d40 	.word	0x00030d40

08005908 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	68f9      	ldr	r1, [r7, #12]
 8005924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005928:	4313      	orrs	r3, r2
 800592a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800593a:	b480      	push	{r7}
 800593c:	b087      	sub	sp, #28
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 0306 	and.w	r3, r3, #6
 8005952:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800595a:	2300      	movs	r3, #0
 800595c:	75fb      	strb	r3, [r7, #23]
 800595e:	e00a      	b.n	8005976 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d002      	beq.n	800596c <USB_GetDevSpeed+0x32>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b06      	cmp	r3, #6
 800596a:	d102      	bne.n	8005972 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800596c:	2302      	movs	r3, #2
 800596e:	75fb      	strb	r3, [r7, #23]
 8005970:	e001      	b.n	8005976 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005972:	230f      	movs	r3, #15
 8005974:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005976:	7dfb      	ldrb	r3, [r7, #23]
}
 8005978:	4618      	mov	r0, r3
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d13a      	bne.n	8005a16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	2101      	movs	r1, #1
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	68f9      	ldr	r1, [r7, #12]
 80059ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059be:	4313      	orrs	r3, r2
 80059c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d155      	bne.n	8005a84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	78db      	ldrb	r3, [r3, #3]
 80059f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	059b      	lsls	r3, r3, #22
 80059fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059fc:	4313      	orrs	r3, r2
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	e036      	b.n	8005a84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1c:	69da      	ldr	r2, [r3, #28]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	2101      	movs	r1, #1
 8005a28:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2c:	041b      	lsls	r3, r3, #16
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a34:	4313      	orrs	r3, r2
 8005a36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11a      	bne.n	8005a84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	78db      	ldrb	r3, [r3, #3]
 8005a68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d135      	bne.n	8005b1c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	43db      	mvns	r3, r3
 8005aee:	68f9      	ldr	r1, [r7, #12]
 8005af0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af4:	4013      	ands	r3, r2
 8005af6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	0159      	lsls	r1, r3, #5
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	440b      	add	r3, r1
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	4619      	mov	r1, r3
 8005b14:	4b1f      	ldr	r3, [pc, #124]	; (8005b94 <USB_DeactivateEndpoint+0x100>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	600b      	str	r3, [r1, #0]
 8005b1a:	e034      	b.n	8005b86 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	f003 030f 	and.w	r3, r3, #15
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	43db      	mvns	r3, r3
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	2101      	movs	r1, #1
 8005b52:	fa01 f303 	lsl.w	r3, r1, r3
 8005b56:	041b      	lsls	r3, r3, #16
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	68f9      	ldr	r1, [r7, #12]
 8005b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b60:	4013      	ands	r3, r2
 8005b62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	0159      	lsls	r1, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	440b      	add	r3, r1
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <USB_DeactivateEndpoint+0x104>)
 8005b82:	4013      	ands	r3, r2
 8005b84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	ec337800 	.word	0xec337800
 8005b98:	eff37800 	.word	0xeff37800

08005b9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	; 0x28
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	f040 815c 	bne.w	8005e76 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d132      	bne.n	8005c2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005be8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c24:	0cdb      	lsrs	r3, r3, #19
 8005c26:	04db      	lsls	r3, r3, #19
 8005c28:	6113      	str	r3, [r2, #16]
 8005c2a:	e074      	b.n	8005d16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c46:	0cdb      	lsrs	r3, r3, #19
 8005c48:	04db      	lsls	r3, r3, #19
 8005c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6959      	ldr	r1, [r3, #20]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	440b      	add	r3, r1
 8005c88:	1e59      	subs	r1, r3, #1
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c92:	04d9      	lsls	r1, r3, #19
 8005c94:	4b9d      	ldr	r3, [pc, #628]	; (8005f0c <USB_EPStartXfer+0x370>)
 8005c96:	400b      	ands	r3, r1
 8005c98:	69b9      	ldr	r1, [r7, #24]
 8005c9a:	0148      	lsls	r0, r1, #5
 8005c9c:	69f9      	ldr	r1, [r7, #28]
 8005c9e:	4401      	add	r1, r0
 8005ca0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cbe:	69b9      	ldr	r1, [r7, #24]
 8005cc0:	0148      	lsls	r0, r1, #5
 8005cc2:	69f9      	ldr	r1, [r7, #28]
 8005cc4:	4401      	add	r1, r0
 8005cc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	78db      	ldrb	r3, [r3, #3]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d11f      	bne.n	8005d16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005cf4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d14b      	bne.n	8005db4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d009      	beq.n	8005d38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	461a      	mov	r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	78db      	ldrb	r3, [r3, #3]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d128      	bne.n	8005d92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d110      	bne.n	8005d72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	e00f      	b.n	8005d92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e12f      	b.n	8006014 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dd2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d015      	beq.n	8005e08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8117 	beq.w	8006014 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	2101      	movs	r1, #1
 8005df8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfc:	69f9      	ldr	r1, [r7, #28]
 8005dfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e02:	4313      	orrs	r3, r2
 8005e04:	634b      	str	r3, [r1, #52]	; 0x34
 8005e06:	e105      	b.n	8006014 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d110      	bne.n	8005e3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	e00f      	b.n	8005e5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	68d9      	ldr	r1, [r3, #12]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	781a      	ldrb	r2, [r3, #0]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	b298      	uxth	r0, r3
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fa2b 	bl	80062ca <USB_WritePacket>
 8005e74:	e0ce      	b.n	8006014 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e90:	0cdb      	lsrs	r3, r3, #19
 8005e92:	04db      	lsls	r3, r3, #19
 8005e94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005eb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d126      	bne.n	8005f10 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ed8:	69b9      	ldr	r1, [r7, #24]
 8005eda:	0148      	lsls	r0, r1, #5
 8005edc:	69f9      	ldr	r1, [r7, #28]
 8005ede:	4401      	add	r1, r0
 8005ee0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f06:	6113      	str	r3, [r2, #16]
 8005f08:	e036      	b.n	8005f78 <USB_EPStartXfer+0x3dc>
 8005f0a:	bf00      	nop
 8005f0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	695a      	ldr	r2, [r3, #20]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4413      	add	r3, r2
 8005f1a:	1e5a      	subs	r2, r3, #1
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f24:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	8afb      	ldrh	r3, [r7, #22]
 8005f36:	04d9      	lsls	r1, r3, #19
 8005f38:	4b39      	ldr	r3, [pc, #228]	; (8006020 <USB_EPStartXfer+0x484>)
 8005f3a:	400b      	ands	r3, r1
 8005f3c:	69b9      	ldr	r1, [r7, #24]
 8005f3e:	0148      	lsls	r0, r1, #5
 8005f40:	69f9      	ldr	r1, [r7, #28]
 8005f42:	4401      	add	r1, r0
 8005f44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	8af9      	ldrh	r1, [r7, #22]
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f68:	69b9      	ldr	r1, [r7, #24]
 8005f6a:	0148      	lsls	r0, r1, #5
 8005f6c:	69f9      	ldr	r1, [r7, #28]
 8005f6e:	4401      	add	r1, r0
 8005f70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f74:	4313      	orrs	r3, r2
 8005f76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f78:	79fb      	ldrb	r3, [r7, #7]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d10d      	bne.n	8005f9a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d009      	beq.n	8005f9a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	68d9      	ldr	r1, [r3, #12]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f96:	460a      	mov	r2, r1
 8005f98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	78db      	ldrb	r3, [r3, #3]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d128      	bne.n	8005ff4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d110      	bne.n	8005fd4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	e00f      	b.n	8005ff4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006012:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	1ff80000 	.word	0x1ff80000

08006024 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b01      	cmp	r3, #1
 8006042:	f040 80cd 	bne.w	80061e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d132      	bne.n	80060b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006068:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800606c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	440a      	add	r2, r1
 8006088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006090:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ac:	0cdb      	lsrs	r3, r3, #19
 80060ae:	04db      	lsls	r3, r3, #19
 80060b0:	6113      	str	r3, [r2, #16]
 80060b2:	e04e      	b.n	8006152 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ce:	0cdb      	lsrs	r3, r3, #19
 80060d0:	04db      	lsls	r3, r3, #19
 80060d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	429a      	cmp	r2, r3
 8006102:	d903      	bls.n	800610c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800612a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	691a      	ldr	r2, [r3, #16]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006142:	6939      	ldr	r1, [r7, #16]
 8006144:	0148      	lsls	r0, r1, #5
 8006146:	6979      	ldr	r1, [r7, #20]
 8006148:	4401      	add	r1, r0
 800614a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800614e:	4313      	orrs	r3, r2
 8006150:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d11e      	bne.n	8006196 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d009      	beq.n	8006174 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	461a      	mov	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	440a      	add	r2, r1
 800618a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	e092      	b.n	80062bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d07e      	beq.n	80062bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	2101      	movs	r1, #1
 80061d0:	fa01 f303 	lsl.w	r3, r1, r3
 80061d4:	6979      	ldr	r1, [r7, #20]
 80061d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061da:	4313      	orrs	r3, r2
 80061dc:	634b      	str	r3, [r1, #52]	; 0x34
 80061de:	e06d      	b.n	80062bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061fa:	0cdb      	lsrs	r3, r3, #19
 80061fc:	04db      	lsls	r3, r3, #19
 80061fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800621e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006222:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	440a      	add	r2, r1
 800624a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006252:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800626a:	6939      	ldr	r1, [r7, #16]
 800626c:	0148      	lsls	r0, r1, #5
 800626e:	6979      	ldr	r1, [r7, #20]
 8006270:	4401      	add	r1, r0
 8006272:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006276:	4313      	orrs	r3, r2
 8006278:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d10d      	bne.n	800629c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	68d9      	ldr	r1, [r3, #12]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006298:	460a      	mov	r2, r1
 800629a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b089      	sub	sp, #36	; 0x24
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	4611      	mov	r1, r2
 80062d6:	461a      	mov	r2, r3
 80062d8:	460b      	mov	r3, r1
 80062da:	71fb      	strb	r3, [r7, #7]
 80062dc:	4613      	mov	r3, r2
 80062de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80062e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11a      	bne.n	8006326 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062f0:	88bb      	ldrh	r3, [r7, #4]
 80062f2:	3303      	adds	r3, #3
 80062f4:	089b      	lsrs	r3, r3, #2
 80062f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062f8:	2300      	movs	r3, #0
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	e00f      	b.n	800631e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	031a      	lsls	r2, r3, #12
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	4413      	add	r3, r2
 8006306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630a:	461a      	mov	r2, r3
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	3304      	adds	r3, #4
 8006316:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	3301      	adds	r3, #1
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	429a      	cmp	r2, r3
 8006324:	d3eb      	bcc.n	80062fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3724      	adds	r7, #36	; 0x24
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	; 0x24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	4613      	mov	r3, r2
 8006340:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800634a:	88fb      	ldrh	r3, [r7, #6]
 800634c:	3303      	adds	r3, #3
 800634e:	089b      	lsrs	r3, r3, #2
 8006350:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006352:	2300      	movs	r3, #0
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e00b      	b.n	8006370 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	601a      	str	r2, [r3, #0]
    pDest++;
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	3304      	adds	r3, #4
 8006368:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	3301      	adds	r3, #1
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	429a      	cmp	r2, r3
 8006376:	d3ef      	bcc.n	8006358 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006378:	69fb      	ldr	r3, [r7, #28]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3724      	adds	r7, #36	; 0x24
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d12c      	bne.n	80063fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	db12      	blt.n	80063da <USB_EPSetStall+0x54>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00f      	beq.n	80063da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	0151      	lsls	r1, r2, #5
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	440a      	add	r2, r1
 80063d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	e02b      	b.n	8006454 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	db12      	blt.n	8006434 <USB_EPSetStall+0xae>
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00f      	beq.n	8006434 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	440a      	add	r2, r1
 800642a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800642e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006432:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	440a      	add	r2, r1
 800644a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006452:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	785b      	ldrb	r3, [r3, #1]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d128      	bne.n	80064d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	440a      	add	r2, r1
 8006494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006498:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800649c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	78db      	ldrb	r3, [r3, #3]
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d003      	beq.n	80064ae <USB_EPClearStall+0x4c>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	78db      	ldrb	r3, [r3, #3]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d138      	bne.n	8006520 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	e027      	b.n	8006520 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	78db      	ldrb	r3, [r3, #3]
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d003      	beq.n	8006500 <USB_EPClearStall+0x9e>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	78db      	ldrb	r3, [r3, #3]
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d10f      	bne.n	8006520 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	440a      	add	r2, r1
 8006516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800651a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800651e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800654c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006550:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	78fb      	ldrb	r3, [r7, #3]
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006562:	68f9      	ldr	r1, [r7, #12]
 8006564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006568:	4313      	orrs	r3, r2
 800656a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006594:	f023 0302 	bic.w	r3, r3, #2
 8006598:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800659a:	2003      	movs	r0, #3
 800659c:	f7fa fb00 	bl	8000ba0 <HAL_Delay>

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065c4:	f043 0302 	orr.w	r3, r3, #2
 80065c8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80065ca:	2003      	movs	r0, #3
 80065cc:	f7fa fae8 	bl	8000ba0 <HAL_Delay>

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80065da:	b480      	push	{r7}
 80065dc:	b085      	sub	sp, #20
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4013      	ands	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	4013      	ands	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	0c1b      	lsrs	r3, r3, #16
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	4013      	ands	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	b29b      	uxth	r3, r3
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	4013      	ands	r3, r2
 8006694:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006696:	68bb      	ldr	r3, [r7, #8]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
 80066d4:	01db      	lsls	r3, r3, #7
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4013      	ands	r3, r2
 80066f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066f2:	68bb      	ldr	r3, [r7, #8]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0301 	and.w	r3, r3, #1
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006736:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f003 0306 	and.w	r3, r3, #6
 800674c:	2b04      	cmp	r3, #4
 800674e:	d109      	bne.n	8006764 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675e:	f043 0303 	orr.w	r3, r3, #3
 8006762:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006776:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
	...

08006788 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	460b      	mov	r3, r1
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	333c      	adds	r3, #60	; 0x3c
 800679e:	3304      	adds	r3, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4a26      	ldr	r2, [pc, #152]	; (8006840 <USB_EP0_OutStart+0xb8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d90a      	bls.n	80067c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067bc:	d101      	bne.n	80067c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	e037      	b.n	8006832 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	461a      	mov	r2, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f0:	f043 0318 	orr.w	r3, r3, #24
 80067f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006804:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006808:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d10f      	bne.n	8006830 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	461a      	mov	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800682e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	4f54300a 	.word	0x4f54300a

08006844 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4a13      	ldr	r2, [pc, #76]	; (80068a8 <USB_CoreReset+0x64>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d901      	bls.n	8006862 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e01b      	b.n	800689a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	daf2      	bge.n	8006850 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f043 0201 	orr.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <USB_CoreReset+0x64>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d901      	bls.n	800688c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e006      	b.n	800689a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b01      	cmp	r3, #1
 8006896:	d0f0      	beq.n	800687a <USB_CoreReset+0x36>

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	00030d40 	.word	0x00030d40

080068ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80068b0:	4904      	ldr	r1, [pc, #16]	; (80068c4 <MX_FATFS_Init+0x18>)
 80068b2:	4805      	ldr	r0, [pc, #20]	; (80068c8 <MX_FATFS_Init+0x1c>)
 80068b4:	f003 f928 	bl	8009b08 <FATFS_LinkDriver>
 80068b8:	4603      	mov	r3, r0
 80068ba:	461a      	mov	r2, r3
 80068bc:	4b03      	ldr	r3, [pc, #12]	; (80068cc <MX_FATFS_Init+0x20>)
 80068be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80068c0:	bf00      	nop
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20002338 	.word	0x20002338
 80068c8:	0800a76c 	.word	0x0800a76c
 80068cc:	20002334 	.word	0x20002334

080068d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80068da:	f000 f879 	bl	80069d0 <BSP_SD_IsDetected>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d001      	beq.n	80068e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e012      	b.n	800690e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80068e8:	480b      	ldr	r0, [pc, #44]	; (8006918 <BSP_SD_Init+0x48>)
 80068ea:	f7fc fa59 	bl	8002da0 <HAL_SD_Init>
 80068ee:	4603      	mov	r3, r0
 80068f0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d109      	bne.n	800690c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80068f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068fc:	4806      	ldr	r0, [pc, #24]	; (8006918 <BSP_SD_Init+0x48>)
 80068fe:	f7fd f84b 	bl	8003998 <HAL_SD_ConfigWideBusOperation>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800690c:	79fb      	ldrb	r3, [r7, #7]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	2000226c 	.word	0x2000226c

0800691c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af02      	add	r7, sp, #8
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	68f9      	ldr	r1, [r7, #12]
 8006938:	4806      	ldr	r0, [pc, #24]	; (8006954 <BSP_SD_ReadBlocks+0x38>)
 800693a:	f7fc fac1 	bl	8002ec0 <HAL_SD_ReadBlocks>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006948:	7dfb      	ldrb	r3, [r7, #23]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	2000226c 	.word	0x2000226c

08006958 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af02      	add	r7, sp, #8
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	68f9      	ldr	r1, [r7, #12]
 8006974:	4806      	ldr	r0, [pc, #24]	; (8006990 <BSP_SD_WriteBlocks+0x38>)
 8006976:	f7fc fc9d 	bl	80032b4 <HAL_SD_WriteBlocks>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006984:	7dfb      	ldrb	r3, [r7, #23]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	2000226c 	.word	0x2000226c

08006994 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006998:	4805      	ldr	r0, [pc, #20]	; (80069b0 <BSP_SD_GetCardState+0x1c>)
 800699a:	f7fd f879 	bl	8003a90 <HAL_SD_GetCardState>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	bf14      	ite	ne
 80069a4:	2301      	movne	r3, #1
 80069a6:	2300      	moveq	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	2000226c 	.word	0x2000226c

080069b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4803      	ldr	r0, [pc, #12]	; (80069cc <BSP_SD_GetCardInfo+0x18>)
 80069c0:	f7fc ffbe 	bl	8003940 <HAL_SD_GetCardInfo>
}
 80069c4:	bf00      	nop
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	2000226c 	.word	0x2000226c

080069d0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80069d6:	2301      	movs	r3, #1
 80069d8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80069da:	f000 f80b 	bl	80069f4 <BSP_PlatformIsDetected>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80069e4:	2300      	movs	r3, #0
 80069e6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80069e8:	79fb      	ldrb	r3, [r7, #7]
 80069ea:	b2db      	uxtb	r3, r3
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80069fa:	2301      	movs	r3, #1
 80069fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80069fe:	2140      	movs	r1, #64	; 0x40
 8006a00:	4806      	ldr	r0, [pc, #24]	; (8006a1c <BSP_PlatformIsDetected+0x28>)
 8006a02:	f7fa fb83 	bl	800110c <HAL_GPIO_ReadPin>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8006a10:	79fb      	ldrb	r3, [r7, #7]
}  
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40020800 	.word	0x40020800

08006a20 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <SD_CheckStatus+0x38>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006a30:	f7ff ffb0 	bl	8006994 <BSP_SD_GetCardState>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d107      	bne.n	8006a4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006a3a:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <SD_CheckStatus+0x38>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <SD_CheckStatus+0x38>)
 8006a48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006a4a:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <SD_CheckStatus+0x38>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	b2db      	uxtb	r3, r3
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000009 	.word	0x20000009

08006a5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8006a66:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <SD_initialize+0x38>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006a6c:	f7ff ff30 	bl	80068d0 <BSP_SD_Init>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d107      	bne.n	8006a86 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff ffd1 	bl	8006a20 <SD_CheckStatus>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	4b04      	ldr	r3, [pc, #16]	; (8006a94 <SD_initialize+0x38>)
 8006a84:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8006a86:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <SD_initialize+0x38>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b2db      	uxtb	r3, r3
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20000009 	.word	0x20000009

08006a98 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff ffbb 	bl	8006a20 <SD_CheckStatus>
 8006aaa:	4603      	mov	r3, r0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	607a      	str	r2, [r7, #4]
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	68b8      	ldr	r0, [r7, #8]
 8006ad2:	f7ff ff23 	bl	800691c <BSP_SD_ReadBlocks>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d107      	bne.n	8006aec <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006adc:	bf00      	nop
 8006ade:	f7ff ff59 	bl	8006994 <BSP_SD_GetCardState>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1fa      	bne.n	8006ade <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b086      	sub	sp, #24
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	68b8      	ldr	r0, [r7, #8]
 8006b14:	f7ff ff20 	bl	8006958 <BSP_SD_WriteBlocks>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d107      	bne.n	8006b2e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006b1e:	bf00      	nop
 8006b20:	f7ff ff38 	bl	8006994 <BSP_SD_GetCardState>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1fa      	bne.n	8006b20 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08c      	sub	sp, #48	; 0x30
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	603a      	str	r2, [r7, #0]
 8006b42:	71fb      	strb	r3, [r7, #7]
 8006b44:	460b      	mov	r3, r1
 8006b46:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006b4e:	4b25      	ldr	r3, [pc, #148]	; (8006be4 <SD_ioctl+0xac>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <SD_ioctl+0x28>
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e03c      	b.n	8006bda <SD_ioctl+0xa2>

  switch (cmd)
 8006b60:	79bb      	ldrb	r3, [r7, #6]
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d834      	bhi.n	8006bd0 <SD_ioctl+0x98>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <SD_ioctl+0x34>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006b85 	.word	0x08006b85
 8006b74:	08006b9d 	.word	0x08006b9d
 8006b78:	08006bb7 	.word	0x08006bb7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006b82:	e028      	b.n	8006bd6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006b84:	f107 030c 	add.w	r3, r7, #12
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff ff13 	bl	80069b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006b9a:	e01c      	b.n	8006bd6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006b9c:	f107 030c 	add.w	r3, r7, #12
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff ff07 	bl	80069b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006bb4:	e00f      	b.n	8006bd6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006bb6:	f107 030c 	add.w	r3, r7, #12
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fefa 	bl	80069b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	0a5a      	lsrs	r2, r3, #9
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006bce:	e002      	b.n	8006bd6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006bd0:	2304      	movs	r3, #4
 8006bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3730      	adds	r7, #48	; 0x30
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000009 	.word	0x20000009

08006be8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	7c1b      	ldrb	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d115      	bne.n	8006c28 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c00:	2202      	movs	r2, #2
 8006c02:	2101      	movs	r1, #1
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f003 fb08 	bl	800a21a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c16:	2202      	movs	r2, #2
 8006c18:	2181      	movs	r1, #129	; 0x81
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f003 fafd 	bl	800a21a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c26:	e012      	b.n	8006c4e <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006c28:	2340      	movs	r3, #64	; 0x40
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f003 faf3 	bl	800a21a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006c3c:	2340      	movs	r3, #64	; 0x40
 8006c3e:	2202      	movs	r2, #2
 8006c40:	2181      	movs	r1, #129	; 0x81
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f003 fae9 	bl	800a21a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8006c4e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006c52:	f003 fc7f 	bl	800a554 <malloc>
 8006c56:	4603      	mov	r3, r0
 8006c58:	461a      	mov	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <USBD_MSC_Init+0x86>
  {
    return USBD_FAIL;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e003      	b.n	8006c76 <USBD_MSC_Init+0x8e>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f9db 	bl	800702a <MSC_BOT_Init>

  return USBD_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f003 faea 	bl	800a266 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006c9a:	2181      	movs	r1, #129	; 0x81
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f003 fae2 	bl	800a266 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fa08 	bl	80070be <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d009      	beq.n	8006ccc <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f003 fc50 	bl	800a564 <free>
    pdev->pClassData  = NULL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ce8:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d04d      	beq.n	8006d9a <USBD_MSC_Setup+0xc2>
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	f040 8113 	bne.w	8006f2a <USBD_MSC_Setup+0x252>
  {

    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2bfe      	cmp	r3, #254	; 0xfe
 8006d0a:	d002      	beq.n	8006d12 <USBD_MSC_Setup+0x3a>
 8006d0c:	2bff      	cmp	r3, #255	; 0xff
 8006d0e:	d024      	beq.n	8006d5a <USBD_MSC_Setup+0x82>
 8006d10:	e03b      	b.n	8006d8a <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	885b      	ldrh	r3, [r3, #2]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d118      	bne.n	8006d4c <USBD_MSC_Setup+0x74>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	88db      	ldrh	r3, [r3, #6]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d114      	bne.n	8006d4c <USBD_MSC_Setup+0x74>
         ((req->bmRequest & 0x80U) == 0x80U))
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	da0f      	bge.n	8006d4c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	4798      	blx	r3
 8006d36:	4603      	mov	r3, r0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	601a      	str	r2, [r3, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2201      	movs	r2, #1
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f002 f959 	bl	8008ffc <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006d4a:	e025      	b.n	8006d98 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f002 f8e9 	bl	8008f26 <USBD_CtlError>
        ret = USBD_FAIL;
 8006d54:	2302      	movs	r3, #2
 8006d56:	75fb      	strb	r3, [r7, #23]
      break;
 8006d58:	e01e      	b.n	8006d98 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	885b      	ldrh	r3, [r3, #2]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10c      	bne.n	8006d7c <USBD_MSC_Setup+0xa4>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	88db      	ldrh	r3, [r3, #6]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d108      	bne.n	8006d7c <USBD_MSC_Setup+0xa4>
         ((req->bmRequest & 0x80U) != 0x80U))
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	db03      	blt.n	8006d7c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f988 	bl	800708a <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev , req);
        ret = USBD_FAIL;
      }
      break;
 8006d7a:	e00d      	b.n	8006d98 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev , req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f002 f8d1 	bl	8008f26 <USBD_CtlError>
        ret = USBD_FAIL;
 8006d84:	2302      	movs	r3, #2
 8006d86:	75fb      	strb	r3, [r7, #23]
      break;
 8006d88:	e006      	b.n	8006d98 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev , req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f002 f8ca 	bl	8008f26 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d92:	2302      	movs	r3, #2
 8006d94:	75fb      	strb	r3, [r7, #23]
      break;
 8006d96:	bf00      	nop
    }
    break;
 8006d98:	e0ce      	b.n	8006f38 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	2b0b      	cmp	r3, #11
 8006da0:	f200 80bb 	bhi.w	8006f1a <USBD_MSC_Setup+0x242>
 8006da4:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <USBD_MSC_Setup+0xd4>)
 8006da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006daa:	bf00      	nop
 8006dac:	08006ddd 	.word	0x08006ddd
 8006db0:	08006e53 	.word	0x08006e53
 8006db4:	08006f1b 	.word	0x08006f1b
 8006db8:	08006f1b 	.word	0x08006f1b
 8006dbc:	08006f1b 	.word	0x08006f1b
 8006dc0:	08006f1b 	.word	0x08006f1b
 8006dc4:	08006f1b 	.word	0x08006f1b
 8006dc8:	08006f1b 	.word	0x08006f1b
 8006dcc:	08006f1b 	.word	0x08006f1b
 8006dd0:	08006f1b 	.word	0x08006f1b
 8006dd4:	08006e05 	.word	0x08006e05
 8006dd8:	08006e2d 	.word	0x08006e2d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d107      	bne.n	8006df6 <USBD_MSC_Setup+0x11e>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006de6:	f107 030e 	add.w	r3, r7, #14
 8006dea:	2202      	movs	r2, #2
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f002 f904 	bl	8008ffc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006df4:	e098      	b.n	8006f28 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f002 f894 	bl	8008f26 <USBD_CtlError>
        ret = USBD_FAIL;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	75fb      	strb	r3, [r7, #23]
      break;
 8006e02:	e091      	b.n	8006f28 <USBD_MSC_Setup+0x250>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d107      	bne.n	8006e1e <USBD_MSC_Setup+0x146>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3304      	adds	r3, #4
 8006e12:	2201      	movs	r2, #1
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f002 f8f0 	bl	8008ffc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e1c:	e084      	b.n	8006f28 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f002 f880 	bl	8008f26 <USBD_CtlError>
        ret = USBD_FAIL;
 8006e26:	2302      	movs	r3, #2
 8006e28:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2a:	e07d      	b.n	8006f28 <USBD_MSC_Setup+0x250>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d106      	bne.n	8006e44 <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	885b      	ldrh	r3, [r3, #2]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e42:	e071      	b.n	8006f28 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f002 f86d 	bl	8008f26 <USBD_CtlError>
        ret = USBD_FAIL;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e50:	e06a      	b.n	8006f28 <USBD_MSC_Setup+0x250>

    case USB_REQ_CLEAR_FEATURE:

      /* Flush the FIFO and Clear the stall status */
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	889b      	ldrh	r3, [r3, #4]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f003 fa22 	bl	800a2a4 <USBD_LL_FlushEP>

      /* Reactivate the EP */
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	889b      	ldrh	r3, [r3, #4]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f003 f9fc 	bl	800a266 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	889b      	ldrh	r3, [r3, #4]
 8006e72:	b25b      	sxtb	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	da23      	bge.n	8006ec0 <USBD_MSC_Setup+0x1e8>
      {
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	889b      	ldrh	r3, [r3, #4]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	f003 020f 	and.w	r2, r3, #15
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	3318      	adds	r3, #24
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	7c1b      	ldrb	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d107      	bne.n	8006eac <USBD_MSC_Setup+0x1d4>
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	2181      	movs	r1, #129	; 0x81
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f003 f9b8 	bl	800a21a <USBD_LL_OpenEP>
 8006eaa:	e005      	b.n	8006eb8 <USBD_MSC_Setup+0x1e0>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006eac:	2340      	movs	r3, #64	; 0x40
 8006eae:	2202      	movs	r2, #2
 8006eb0:	2181      	movs	r1, #129	; 0x81
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f003 f9b1 	bl	800a21a <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ebe:	e024      	b.n	8006f0a <USBD_MSC_Setup+0x232>
      }
      else
      {
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	889b      	ldrh	r3, [r3, #4]
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	f003 020f 	and.w	r2, r3, #15
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	7c1b      	ldrb	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d107      	bne.n	8006ef6 <USBD_MSC_Setup+0x21e>
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eea:	2202      	movs	r2, #2
 8006eec:	2101      	movs	r1, #1
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f003 f993 	bl	800a21a <USBD_LL_OpenEP>
 8006ef4:	e005      	b.n	8006f02 <USBD_MSC_Setup+0x22a>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ef6:	2340      	movs	r3, #64	; 0x40
 8006ef8:	2202      	movs	r2, #2
 8006efa:	2101      	movs	r1, #1
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f003 f98c 	bl	800a21a <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
      }

      /* Handle BOT error */
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	889b      	ldrh	r3, [r3, #4]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa52 	bl	80073bc <MSC_BOT_CplClrFeature>
      break;
 8006f18:	e006      	b.n	8006f28 <USBD_MSC_Setup+0x250>

    default:
      USBD_CtlError (pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f002 f802 	bl	8008f26 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f22:	2302      	movs	r3, #2
 8006f24:	75fb      	strb	r3, [r7, #23]
      break;
 8006f26:	bf00      	nop
    }
    break;
 8006f28:	e006      	b.n	8006f38 <USBD_MSC_Setup+0x260>

  default:
    USBD_CtlError (pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fffa 	bl	8008f26 <USBD_CtlError>
    ret = USBD_FAIL;
 8006f32:	2302      	movs	r3, #2
 8006f34:	75fb      	strb	r3, [r7, #23]
    break;
 8006f36:	bf00      	nop
  }

  return ret;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop

08006f44 <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f8c3 	bl	80070e0 <MSC_BOT_DataIn>
  return USBD_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev,
                               uint8_t epnum)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f8e4 	bl	8007142 <MSC_BOT_DataOut>
  return USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgHSDesc;
 8006f92:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20000044 	.word	0x20000044

08006fa4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgFSDesc;
 8006fb2:	4b03      	ldr	r3, [pc, #12]	; (8006fc0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	20000064 	.word	0x20000064

08006fc4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
 8006fd2:	4b03      	ldr	r3, [pc, #12]	; (8006fe0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	20000084 	.word	0x20000084

08006fe4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	220a      	movs	r2, #10
 8006ff0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceQualifierDesc;
 8006ff2:	4b03      	ldr	r3, [pc, #12]	; (8007000 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	200000a4 	.word	0x200000a4

08007004 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  }
  return USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007038:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2000      	movs	r0, #0
 8007060:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007062:	2101      	movs	r1, #1
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f003 f91d 	bl	800a2a4 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800706a:	2181      	movs	r1, #129	; 0x81
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f003 f919 	bl	800a2a4 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007078:	231f      	movs	r3, #31
 800707a:	2101      	movs	r1, #1
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f003 f9dc 	bl	800a43a <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007098:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80070ac:	231f      	movs	r3, #31
 80070ae:	2101      	movs	r1, #1
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f003 f9c2 	bl	800a43a <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 80070b6:	bf00      	nop
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070cc:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state  = USBD_BOT_IDLE;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	721a      	strb	r2, [r3, #8]
}
 80070d4:	bf00      	nop
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070f2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	7a1b      	ldrb	r3, [r3, #8]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d004      	beq.n	8007106 <MSC_BOT_DataIn+0x26>
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	db19      	blt.n	8007134 <MSC_BOT_DataIn+0x54>
 8007100:	2b04      	cmp	r3, #4
 8007102:	dc17      	bgt.n	8007134 <MSC_BOT_DataIn+0x54>
 8007104:	e011      	b.n	800712a <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007112:	461a      	mov	r2, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f979 	bl	800740c <SCSI_ProcessCmd>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	da0b      	bge.n	8007138 <MSC_BOT_DataIn+0x58>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007120:	2101      	movs	r1, #1
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f8f0 	bl	8007308 <MSC_BOT_SendCSW>
    }
    break;
 8007128:	e006      	b.n	8007138 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800712a:	2100      	movs	r1, #0
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f8eb 	bl	8007308 <MSC_BOT_SendCSW>

    break;
 8007132:	e002      	b.n	800713a <MSC_BOT_DataIn+0x5a>

  default:
    break;
 8007134:	bf00      	nop
 8007136:	e000      	b.n	800713a <MSC_BOT_DataIn+0x5a>
    break;
 8007138:	bf00      	nop
  }
}
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev,
                      uint8_t epnum)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007154:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	7a1b      	ldrb	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <MSC_BOT_DataOut+0x22>
 800715e:	2b01      	cmp	r3, #1
 8007160:	d004      	beq.n	800716c <MSC_BOT_DataOut+0x2a>
    }

    break;

  default:
    break;
 8007162:	e015      	b.n	8007190 <MSC_BOT_DataOut+0x4e>
    MSC_BOT_CBW_Decode(pdev);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f817 	bl	8007198 <MSC_BOT_CBW_Decode>
    break;
 800716a:	e011      	b.n	8007190 <MSC_BOT_DataOut+0x4e>
    if(SCSI_ProcessCmd(pdev,
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007178:	461a      	mov	r2, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f946 	bl	800740c <SCSI_ProcessCmd>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	da03      	bge.n	800718e <MSC_BOT_DataOut+0x4c>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007186:	2101      	movs	r1, #1
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f8bd 	bl	8007308 <MSC_BOT_SendCSW>
    break;
 800718e:	bf00      	nop
  }
}
 8007190:	bf00      	nop
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071a6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80071c0:	2101      	movs	r1, #1
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f003 f95c 	bl	800a480 <USBD_LL_GetRxDataSize>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b1f      	cmp	r3, #31
 80071cc:	d114      	bne.n	80071f8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80071d4:	4a32      	ldr	r2, [pc, #200]	; (80072a0 <MSC_BOT_CBW_Decode+0x108>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d10e      	bne.n	80071f8 <MSC_BOT_CBW_Decode+0x60>
        (hmsc->cbw.bLUN > 1U) ||
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d809      	bhi.n	80071f8 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1U) ||
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80071f4:	2b10      	cmp	r3, #16
 80071f6:	d90e      	bls.n	8007216 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80071fe:	2320      	movs	r3, #32
 8007200:	2205      	movs	r2, #5
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fc4b 	bl	8007a9e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2202      	movs	r2, #2
 800720c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f8a6 	bl	8007360 <MSC_BOT_Abort>
 8007214:	e041      	b.n	800729a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007222:	461a      	mov	r2, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f8f1 	bl	800740c <SCSI_ProcessCmd>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	da0c      	bge.n	800724a <MSC_BOT_CBW_Decode+0xb2>
    {
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	7a1b      	ldrb	r3, [r3, #8]
 8007234:	2b05      	cmp	r3, #5
 8007236:	d104      	bne.n	8007242 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007238:	2101      	movs	r1, #1
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f864 	bl	8007308 <MSC_BOT_SendCSW>
 8007240:	e02b      	b.n	800729a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f88c 	bl	8007360 <MSC_BOT_Abort>
 8007248:	e027      	b.n	800729a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	7a1b      	ldrb	r3, [r3, #8]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d022      	beq.n	8007298 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007256:	2b01      	cmp	r3, #1
 8007258:	d01e      	beq.n	8007298 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800725e:	2b03      	cmp	r3, #3
 8007260:	d01a      	beq.n	8007298 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	895b      	ldrh	r3, [r3, #10]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d009      	beq.n	800727e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f103 010c 	add.w	r1, r3, #12
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	895b      	ldrh	r3, [r3, #10]
 8007274:	461a      	mov	r2, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f814 	bl	80072a4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800727c:	e00d      	b.n	800729a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	895b      	ldrh	r3, [r3, #10]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8007286:	2100      	movs	r1, #0
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f83d 	bl	8007308 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800728e:	e004      	b.n	800729a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f865 	bl	8007360 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007296:	e000      	b.n	800729a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8007298:	bf00      	nop
    }
  }
}
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	43425355 	.word	0x43425355

080072a4 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t* pbuf,
                              uint16_t len)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	4613      	mov	r3, r2
 80072b0:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072b8:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d204      	bcs.n	80072d0 <MSC_BOT_SendData+0x2c>
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	e000      	b.n	80072d2 <MSC_BOT_SendData+0x2e>
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	1ad2      	subs	r2, r2, r3
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2204      	movs	r2, #4
 80072f0:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80072f2:	8a7b      	ldrh	r3, [r7, #18]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	2181      	movs	r1, #129	; 0x81
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f003 f87b 	bl	800a3f4 <USBD_LL_Transmit>
}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800731a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4a0f      	ldr	r2, [pc, #60]	; (800735c <MSC_BOT_SendCSW+0x54>)
 8007320:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	78fa      	ldrb	r2, [r7, #3]
 8007328:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8007338:	230d      	movs	r3, #13
 800733a:	2181      	movs	r1, #129	; 0x81
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f003 f859 	bl	800a3f4 <USBD_LL_Transmit>
                    USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007348:	231f      	movs	r3, #31
 800734a:	2101      	movs	r1, #1
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f003 f874 	bl	800a43a <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 8007352:	bf00      	nop
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	53425355 	.word	0x53425355

08007360 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800736e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10c      	bne.n	8007394 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007380:	2b00      	cmp	r3, #0
 8007382:	d007      	beq.n	8007394 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800738c:	2101      	movs	r1, #1
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f002 ffa7 	bl	800a2e2 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007394:	2181      	movs	r1, #129	; 0x81
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f002 ffa3 	bl	800a2e2 <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	7a5b      	ldrb	r3, [r3, #9]
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d107      	bne.n	80073b4 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80073aa:	231f      	movs	r3, #31
 80073ac:	2101      	movs	r1, #1
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f003 f843 	bl	800a43a <USBD_LL_PrepareReceive>
                            USBD_BOT_CBW_LENGTH);
  }
}
 80073b4:	bf00      	nop
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073ce:	60fb      	str	r3, [r7, #12]

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	7a5b      	ldrb	r3, [r3, #9]
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d107      	bne.n	80073e8 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80073d8:	2181      	movs	r1, #129	; 0x81
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f002 ff81 	bl	800a2e2 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	725a      	strb	r2, [r3, #9]
 80073e6:	e00d      	b.n	8007404 <MSC_BOT_CplClrFeature+0x48>
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80073e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	da08      	bge.n	8007402 <MSC_BOT_CplClrFeature+0x46>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	7a5b      	ldrb	r3, [r3, #9]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d004      	beq.n	8007402 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 80073f8:	2101      	movs	r1, #1
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff ff84 	bl	8007308 <MSC_BOT_SendCSW>
 8007400:	e000      	b.n	8007404 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8007402:	bf00      	nop
  }
}
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	460b      	mov	r3, r1
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b5a      	cmp	r3, #90	; 0x5a
 8007420:	f200 810e 	bhi.w	8007640 <SCSI_ProcessCmd+0x234>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <SCSI_ProcessCmd+0x20>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007599 	.word	0x08007599
 8007430:	08007641 	.word	0x08007641
 8007434:	08007641 	.word	0x08007641
 8007438:	080075a7 	.word	0x080075a7
 800743c:	08007641 	.word	0x08007641
 8007440:	08007641 	.word	0x08007641
 8007444:	08007641 	.word	0x08007641
 8007448:	08007641 	.word	0x08007641
 800744c:	08007641 	.word	0x08007641
 8007450:	08007641 	.word	0x08007641
 8007454:	08007641 	.word	0x08007641
 8007458:	08007641 	.word	0x08007641
 800745c:	08007641 	.word	0x08007641
 8007460:	08007641 	.word	0x08007641
 8007464:	08007641 	.word	0x08007641
 8007468:	08007641 	.word	0x08007641
 800746c:	08007641 	.word	0x08007641
 8007470:	08007641 	.word	0x08007641
 8007474:	080075b5 	.word	0x080075b5
 8007478:	08007641 	.word	0x08007641
 800747c:	08007641 	.word	0x08007641
 8007480:	08007641 	.word	0x08007641
 8007484:	08007641 	.word	0x08007641
 8007488:	08007641 	.word	0x08007641
 800748c:	08007641 	.word	0x08007641
 8007490:	08007641 	.word	0x08007641
 8007494:	080075df 	.word	0x080075df
 8007498:	080075c3 	.word	0x080075c3
 800749c:	08007641 	.word	0x08007641
 80074a0:	08007641 	.word	0x08007641
 80074a4:	080075d1 	.word	0x080075d1
 80074a8:	08007641 	.word	0x08007641
 80074ac:	08007641 	.word	0x08007641
 80074b0:	08007641 	.word	0x08007641
 80074b4:	08007641 	.word	0x08007641
 80074b8:	080075fb 	.word	0x080075fb
 80074bc:	08007641 	.word	0x08007641
 80074c0:	08007609 	.word	0x08007609
 80074c4:	08007641 	.word	0x08007641
 80074c8:	08007641 	.word	0x08007641
 80074cc:	08007617 	.word	0x08007617
 80074d0:	08007641 	.word	0x08007641
 80074d4:	08007625 	.word	0x08007625
 80074d8:	08007641 	.word	0x08007641
 80074dc:	08007641 	.word	0x08007641
 80074e0:	08007641 	.word	0x08007641
 80074e4:	08007641 	.word	0x08007641
 80074e8:	08007633 	.word	0x08007633
 80074ec:	08007641 	.word	0x08007641
 80074f0:	08007641 	.word	0x08007641
 80074f4:	08007641 	.word	0x08007641
 80074f8:	08007641 	.word	0x08007641
 80074fc:	08007641 	.word	0x08007641
 8007500:	08007641 	.word	0x08007641
 8007504:	08007641 	.word	0x08007641
 8007508:	08007641 	.word	0x08007641
 800750c:	08007641 	.word	0x08007641
 8007510:	08007641 	.word	0x08007641
 8007514:	08007641 	.word	0x08007641
 8007518:	08007641 	.word	0x08007641
 800751c:	08007641 	.word	0x08007641
 8007520:	08007641 	.word	0x08007641
 8007524:	08007641 	.word	0x08007641
 8007528:	08007641 	.word	0x08007641
 800752c:	08007641 	.word	0x08007641
 8007530:	08007641 	.word	0x08007641
 8007534:	08007641 	.word	0x08007641
 8007538:	08007641 	.word	0x08007641
 800753c:	08007641 	.word	0x08007641
 8007540:	08007641 	.word	0x08007641
 8007544:	08007641 	.word	0x08007641
 8007548:	08007641 	.word	0x08007641
 800754c:	08007641 	.word	0x08007641
 8007550:	08007641 	.word	0x08007641
 8007554:	08007641 	.word	0x08007641
 8007558:	08007641 	.word	0x08007641
 800755c:	08007641 	.word	0x08007641
 8007560:	08007641 	.word	0x08007641
 8007564:	08007641 	.word	0x08007641
 8007568:	08007641 	.word	0x08007641
 800756c:	08007641 	.word	0x08007641
 8007570:	08007641 	.word	0x08007641
 8007574:	08007641 	.word	0x08007641
 8007578:	08007641 	.word	0x08007641
 800757c:	08007641 	.word	0x08007641
 8007580:	08007641 	.word	0x08007641
 8007584:	08007641 	.word	0x08007641
 8007588:	08007641 	.word	0x08007641
 800758c:	08007641 	.word	0x08007641
 8007590:	08007641 	.word	0x08007641
 8007594:	080075ed 	.word	0x080075ed
  {
  case SCSI_TEST_UNIT_READY:
    SCSI_TestUnitReady(pdev, lun, cmd);
 8007598:	7afb      	ldrb	r3, [r7, #11]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	4619      	mov	r1, r3
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 f85c 	bl	800765c <SCSI_TestUnitReady>
    break;
 80075a4:	e055      	b.n	8007652 <SCSI_ProcessCmd+0x246>

  case SCSI_REQUEST_SENSE:
    SCSI_RequestSense (pdev, lun, cmd);
 80075a6:	7afb      	ldrb	r3, [r7, #11]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	4619      	mov	r1, r3
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fa0b 	bl	80079c8 <SCSI_RequestSense>
    break;
 80075b2:	e04e      	b.n	8007652 <SCSI_ProcessCmd+0x246>
  case SCSI_INQUIRY:
    SCSI_Inquiry(pdev, lun, cmd);
 80075b4:	7afb      	ldrb	r3, [r7, #11]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	4619      	mov	r1, r3
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 f888 	bl	80076d0 <SCSI_Inquiry>
    break;
 80075c0:	e047      	b.n	8007652 <SCSI_ProcessCmd+0x246>

  case SCSI_START_STOP_UNIT:
    SCSI_StartStopUnit(pdev, lun, cmd);
 80075c2:	7afb      	ldrb	r3, [r7, #11]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	4619      	mov	r1, r3
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 faa2 	bl	8007b12 <SCSI_StartStopUnit>
    break;
 80075ce:	e040      	b.n	8007652 <SCSI_ProcessCmd+0x246>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    SCSI_StartStopUnit(pdev, lun, cmd);
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	4619      	mov	r1, r3
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fa9b 	bl	8007b12 <SCSI_StartStopUnit>
    break;
 80075dc:	e039      	b.n	8007652 <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE6:
    SCSI_ModeSense6 (pdev, lun, cmd);
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	4619      	mov	r1, r3
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f99f 	bl	8007928 <SCSI_ModeSense6>
    break;
 80075ea:	e032      	b.n	8007652 <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE10:
    SCSI_ModeSense10 (pdev, lun, cmd);
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	4619      	mov	r1, r3
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 f9c0 	bl	8007978 <SCSI_ModeSense10>
    break;
 80075f8:	e02b      	b.n	8007652 <SCSI_ProcessCmd+0x246>

  case SCSI_READ_FORMAT_CAPACITIES:
    SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4619      	mov	r1, r3
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 f92c 	bl	800785e <SCSI_ReadFormatCapacity>
    break;
 8007606:	e024      	b.n	8007652 <SCSI_ProcessCmd+0x246>

  case SCSI_READ_CAPACITY10:
    SCSI_ReadCapacity10(pdev, lun, cmd);
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	4619      	mov	r1, r3
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 f8be 	bl	8007790 <SCSI_ReadCapacity10>
    break;
 8007614:	e01d      	b.n	8007652 <SCSI_ProcessCmd+0x246>

  case SCSI_READ10:
    SCSI_Read10(pdev, lun, cmd);
 8007616:	7afb      	ldrb	r3, [r7, #11]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	4619      	mov	r1, r3
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 fa8d 	bl	8007b3c <SCSI_Read10>
    break;
 8007622:	e016      	b.n	8007652 <SCSI_ProcessCmd+0x246>

  case SCSI_WRITE10:
    SCSI_Write10(pdev, lun, cmd);
 8007624:	7afb      	ldrb	r3, [r7, #11]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	4619      	mov	r1, r3
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 fb12 	bl	8007c54 <SCSI_Write10>
    break;
 8007630:	e00f      	b.n	8007652 <SCSI_ProcessCmd+0x246>

  case SCSI_VERIFY10:
    SCSI_Verify10(pdev, lun, cmd);
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	4619      	mov	r1, r3
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 fbbb 	bl	8007db4 <SCSI_Verify10>
    break;
 800763e:	e008      	b.n	8007652 <SCSI_ProcessCmd+0x246>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007640:	7af9      	ldrb	r1, [r7, #11]
 8007642:	2320      	movs	r3, #32
 8007644:	2205      	movs	r2, #5
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fa29 	bl	8007a9e <SCSI_SenseCode>
    return -1;
 800764c:	f04f 33ff 	mov.w	r3, #4294967295
 8007650:	e000      	b.n	8007654 <SCSI_ProcessCmd+0x248>
  }
  return 0;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	460b      	mov	r3, r1
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007670:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007682:	2320      	movs	r3, #32
 8007684:	2205      	movs	r2, #5
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fa09 	bl	8007a9e <SCSI_SenseCode>

    return -1;
 800768c:	f04f 33ff 	mov.w	r3, #4294967295
 8007690:	e019      	b.n	80076c6 <SCSI_TestUnitReady+0x6a>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	7afa      	ldrb	r2, [r7, #11]
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00b      	beq.n	80076be <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80076a6:	7af9      	ldrb	r1, [r7, #11]
 80076a8:	233a      	movs	r3, #58	; 0x3a
 80076aa:	2202      	movs	r2, #2
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 f9f6 	bl	8007a9e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2205      	movs	r2, #5
 80076b6:	721a      	strb	r2, [r3, #8]

    return -1;
 80076b8:	f04f 33ff 	mov.w	r3, #4294967295
 80076bc:	e003      	b.n	80076c6 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2200      	movs	r2, #0
 80076c2:	815a      	strh	r2, [r3, #10]

  return 0;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b089      	sub	sp, #36	; 0x24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	460b      	mov	r3, r1
 80076da:	607a      	str	r2, [r7, #4]
 80076dc:	72fb      	strb	r3, [r7, #11]
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80076e4:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3301      	adds	r3, #1
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d014      	beq.n	800771e <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 80076f4:	2307      	movs	r3, #7
 80076f6:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	8bfa      	ldrh	r2, [r7, #30]
 80076fc:	815a      	strh	r2, [r3, #10]

    while (len)
 80076fe:	e00a      	b.n	8007716 <SCSI_Inquiry+0x46>
    {
      len--;
 8007700:	8bfb      	ldrh	r3, [r7, #30]
 8007702:	3b01      	subs	r3, #1
 8007704:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8007706:	8bfa      	ldrh	r2, [r7, #30]
 8007708:	8bfb      	ldrh	r3, [r7, #30]
 800770a:	4920      	ldr	r1, [pc, #128]	; (800778c <SCSI_Inquiry+0xbc>)
 800770c:	5c89      	ldrb	r1, [r1, r2]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	4413      	add	r3, r2
 8007712:	460a      	mov	r2, r1
 8007714:	731a      	strb	r2, [r3, #12]
    while (len)
 8007716:	8bfb      	ldrh	r3, [r7, #30]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f1      	bne.n	8007700 <SCSI_Inquiry+0x30>
 800771c:	e02e      	b.n	800777c <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007724:	69d9      	ldr	r1, [r3, #28]
 8007726:	7afa      	ldrb	r2, [r7, #11]
 8007728:	4613      	mov	r3, r2
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	440b      	add	r3, r1
 8007732:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	3304      	adds	r3, #4
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	3305      	adds	r3, #5
 800773e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3304      	adds	r3, #4
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	8bfa      	ldrh	r2, [r7, #30]
 800774a:	429a      	cmp	r2, r3
 800774c:	d303      	bcc.n	8007756 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3304      	adds	r3, #4
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	8bfa      	ldrh	r2, [r7, #30]
 800775a:	815a      	strh	r2, [r3, #10]

    while (len)
 800775c:	e00b      	b.n	8007776 <SCSI_Inquiry+0xa6>
    {
      len--;
 800775e:	8bfb      	ldrh	r3, [r7, #30]
 8007760:	3b01      	subs	r3, #1
 8007762:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8007764:	8bfb      	ldrh	r3, [r7, #30]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	441a      	add	r2, r3
 800776a:	8bfb      	ldrh	r3, [r7, #30]
 800776c:	7811      	ldrb	r1, [r2, #0]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	4413      	add	r3, r2
 8007772:	460a      	mov	r2, r1
 8007774:	731a      	strb	r2, [r3, #12]
    while (len)
 8007776:	8bfb      	ldrh	r3, [r7, #30]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f0      	bne.n	800775e <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3724      	adds	r7, #36	; 0x24
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	0800a780 	.word	0x0800a780

08007790 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	460b      	mov	r3, r1
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80077a4:	617b      	str	r3, [r7, #20]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	f502 7118 	add.w	r1, r2, #608	; 0x260
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	f202 225e 	addw	r2, r2, #606	; 0x25e
 80077ba:	7af8      	ldrb	r0, [r7, #11]
 80077bc:	4798      	blx	r3
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d008      	beq.n	80077d6 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80077c4:	7af9      	ldrb	r1, [r7, #11]
 80077c6:	233a      	movs	r3, #58	; 0x3a
 80077c8:	2202      	movs	r2, #2
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 f967 	bl	8007a9e <SCSI_SenseCode>
    return -1;
 80077d0:	f04f 33ff 	mov.w	r3, #4294967295
 80077d4:	e03f      	b.n	8007856 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80077dc:	3b01      	subs	r3, #1
 80077de:	0e1b      	lsrs	r3, r3, #24
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80077ec:	3b01      	subs	r3, #1
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80077fc:	3b01      	subs	r3, #1
 80077fe:	0a1b      	lsrs	r3, r3, #8
 8007800:	b2da      	uxtb	r2, r3
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800780c:	b2db      	uxtb	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	b2da      	uxtb	r2, r3
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800781c:	161b      	asrs	r3, r3, #24
 800781e:	b2da      	uxtb	r2, r3
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800782a:	141b      	asrs	r3, r3, #16
 800782c:	b2da      	uxtb	r2, r3
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007838:	0a1b      	lsrs	r3, r3, #8
 800783a:	b29b      	uxth	r3, r3
 800783c:	b2da      	uxtb	r2, r3
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007848:	b2da      	uxtb	r2, r3
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2208      	movs	r2, #8
 8007852:	815a      	strh	r2, [r3, #10]
    return 0;
 8007854:	2300      	movs	r3, #0
  }
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b088      	sub	sp, #32
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	460b      	mov	r3, r1
 8007868:	607a      	str	r2, [r7, #4]
 800786a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007872:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for(i = 0U; i < 12U ; i++)
 8007874:	2300      	movs	r3, #0
 8007876:	83fb      	strh	r3, [r7, #30]
 8007878:	e007      	b.n	800788a <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800787a:	8bfb      	ldrh	r3, [r7, #30]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	4413      	add	r3, r2
 8007880:	2200      	movs	r2, #0
 8007882:	731a      	strb	r2, [r3, #12]
  for(i = 0U; i < 12U ; i++)
 8007884:	8bfb      	ldrh	r3, [r7, #30]
 8007886:	3301      	adds	r3, #1
 8007888:	83fb      	strh	r3, [r7, #30]
 800788a:	8bfb      	ldrh	r3, [r7, #30]
 800788c:	2b0b      	cmp	r3, #11
 800788e:	d9f4      	bls.n	800787a <SCSI_ReadFormatCapacity+0x1c>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f107 0216 	add.w	r2, r7, #22
 800789c:	f107 0110 	add.w	r1, r7, #16
 80078a0:	7af8      	ldrb	r0, [r7, #11]
 80078a2:	4798      	blx	r3
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d008      	beq.n	80078bc <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80078aa:	7af9      	ldrb	r1, [r7, #11]
 80078ac:	233a      	movs	r3, #58	; 0x3a
 80078ae:	2202      	movs	r2, #2
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f8f4 	bl	8007a9e <SCSI_SenseCode>
    return -1;
 80078b6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ba:	e030      	b.n	800791e <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2208      	movs	r2, #8
 80078c0:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	0e1b      	lsrs	r3, r3, #24
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	0c1b      	lsrs	r3, r3, #16
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	3b01      	subs	r3, #1
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	2202      	movs	r2, #2
 80078f6:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80078f8:	8afb      	ldrh	r3, [r7, #22]
 80078fa:	141b      	asrs	r3, r3, #16
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007902:	8afb      	ldrh	r3, [r7, #22]
 8007904:	0a1b      	lsrs	r3, r3, #8
 8007906:	b29b      	uxth	r3, r3
 8007908:	b2da      	uxtb	r2, r3
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800790e:	8afb      	ldrh	r3, [r7, #22]
 8007910:	b2da      	uxtb	r2, r3
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	220c      	movs	r2, #12
 800791a:	815a      	strh	r2, [r3, #10]
    return 0;
 800791c:	2300      	movs	r3, #0
  }
}
 800791e:	4618      	mov	r0, r3
 8007920:	3720      	adds	r7, #32
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	460b      	mov	r3, r1
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800793c:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800793e:	2308      	movs	r3, #8
 8007940:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	8afa      	ldrh	r2, [r7, #22]
 8007946:	815a      	strh	r2, [r3, #10]

  while (len)
 8007948:	e00a      	b.n	8007960 <SCSI_ModeSense6+0x38>
  {
    len--;
 800794a:	8afb      	ldrh	r3, [r7, #22]
 800794c:	3b01      	subs	r3, #1
 800794e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007950:	8afa      	ldrh	r2, [r7, #22]
 8007952:	8afb      	ldrh	r3, [r7, #22]
 8007954:	4907      	ldr	r1, [pc, #28]	; (8007974 <SCSI_ModeSense6+0x4c>)
 8007956:	5c89      	ldrb	r1, [r1, r2]
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	4413      	add	r3, r2
 800795c:	460a      	mov	r2, r1
 800795e:	731a      	strb	r2, [r3, #12]
  while (len)
 8007960:	8afb      	ldrh	r3, [r7, #22]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1f1      	bne.n	800794a <SCSI_ModeSense6+0x22>
  }
  return 0;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	0800a788 	.word	0x0800a788

08007978 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	460b      	mov	r3, r1
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8007986:	2308      	movs	r3, #8
 8007988:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007990:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	8afa      	ldrh	r2, [r7, #22]
 8007996:	815a      	strh	r2, [r3, #10]

  while (len)
 8007998:	e00a      	b.n	80079b0 <SCSI_ModeSense10+0x38>
  {
    len--;
 800799a:	8afb      	ldrh	r3, [r7, #22]
 800799c:	3b01      	subs	r3, #1
 800799e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80079a0:	8afa      	ldrh	r2, [r7, #22]
 80079a2:	8afb      	ldrh	r3, [r7, #22]
 80079a4:	4907      	ldr	r1, [pc, #28]	; (80079c4 <SCSI_ModeSense10+0x4c>)
 80079a6:	5c89      	ldrb	r1, [r1, r2]
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4413      	add	r3, r2
 80079ac:	460a      	mov	r2, r1
 80079ae:	731a      	strb	r2, [r3, #12]
  while (len)
 80079b0:	8afb      	ldrh	r3, [r7, #22]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f1      	bne.n	800799a <SCSI_ModeSense10+0x22>
  }

  return 0;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	0800a790 	.word	0x0800a790

080079c8 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	460b      	mov	r3, r1
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80079dc:	613b      	str	r3, [r7, #16]

  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 80079de:	2300      	movs	r3, #0
 80079e0:	75fb      	strb	r3, [r7, #23]
 80079e2:	e007      	b.n	80079f4 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4413      	add	r3, r2
 80079ea:	2200      	movs	r2, #0
 80079ec:	731a      	strb	r2, [r3, #12]
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	3301      	adds	r3, #1
 80079f2:	75fb      	strb	r3, [r7, #23]
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	2b11      	cmp	r3, #17
 80079f8:	d9f4      	bls.n	80079e4 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0]	= 0x70U;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2270      	movs	r2, #112	; 0x70
 80079fe:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	220c      	movs	r2, #12
 8007a04:	74da      	strb	r2, [r3, #19]

  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d02e      	beq.n	8007a74 <SCSI_RequestSense+0xac>

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	3347      	adds	r3, #71	; 0x47
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	4413      	add	r3, r2
 8007a24:	791a      	ldrb	r2, [r3, #4]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	3347      	adds	r3, #71	; 0x47
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	4413      	add	r3, r2
 8007a38:	7a5a      	ldrb	r2, [r3, #9]
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	3347      	adds	r3, #71	; 0x47
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	4413      	add	r3, r2
 8007a4c:	7a1a      	ldrb	r2, [r3, #8]
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007a58:	3301      	adds	r3, #1
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d103      	bne.n	8007a74 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2212      	movs	r2, #18
 8007a78:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b12      	cmp	r3, #18
 8007a82:	d805      	bhi.n	8007a90 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3304      	adds	r3, #4
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	4608      	mov	r0, r1
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	461a      	mov	r2, r3
 8007aac:	4603      	mov	r3, r0
 8007aae:	70fb      	strb	r3, [r7, #3]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70bb      	strb	r3, [r7, #2]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007abe:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	3347      	adds	r3, #71	; 0x47
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	4413      	add	r3, r2
 8007ace:	78ba      	ldrb	r2, [r7, #2]
 8007ad0:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	3347      	adds	r3, #71	; 0x47
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	4413      	add	r3, r2
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007aea:	3301      	adds	r3, #1
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d103      	bne.n	8007b06 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8007b06:	bf00      	nop
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b087      	sub	sp, #28
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b26:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	815a      	strh	r2, [r3, #10]
  return 0;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	460b      	mov	r3, r1
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b50:	617b      	str	r3, [r7, #20]

  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	7a1b      	ldrb	r3, [r3, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d16e      	bne.n	8007c38 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007b60:	b25b      	sxtb	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	db0a      	blt.n	8007b7c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007b6c:	2320      	movs	r3, #32
 8007b6e:	2205      	movs	r2, #5
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f7ff ff94 	bl	8007a9e <SCSI_SenseCode>
      return -1;
 8007b76:	f04f 33ff 	mov.w	r3, #4294967295
 8007b7a:	e067      	b.n	8007c4c <SCSI_Read10+0x110>
    }

    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	7afa      	ldrb	r2, [r7, #11]
 8007b86:	4610      	mov	r0, r2
 8007b88:	4798      	blx	r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b90:	7af9      	ldrb	r1, [r7, #11]
 8007b92:	233a      	movs	r3, #58	; 0x3a
 8007b94:	2202      	movs	r2, #2
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff ff81 	bl	8007a9e <SCSI_SenseCode>
      return -1;
 8007b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba0:	e054      	b.n	8007c4c <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3302      	adds	r3, #2
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3303      	adds	r3, #3
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007bb2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007bbc:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	3205      	adds	r2, #5
 8007bc2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007bc4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3307      	adds	r3, #7
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	3208      	adds	r2, #8
 8007bd8:	7812      	ldrb	r2, [r2, #0]
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007bee:	7af9      	ldrb	r1, [r7, #11]
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 f912 	bl	8007e1a <SCSI_CheckAddressRange>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da02      	bge.n	8007c02 <SCSI_Read10+0xc6>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8007c00:	e024      	b.n	8007c4c <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2202      	movs	r2, #2
 8007c06:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007c14:	6979      	ldr	r1, [r7, #20]
 8007c16:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8007c1a:	fb01 f303 	mul.w	r3, r1, r3
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d00a      	beq.n	8007c38 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007c28:	2320      	movs	r3, #32
 8007c2a:	2205      	movs	r2, #5
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff ff36 	bl	8007a9e <SCSI_SenseCode>
      return -1;
 8007c32:	f04f 33ff 	mov.w	r3, #4294967295
 8007c36:	e009      	b.n	8007c4c <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c3e:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8007c40:	7afb      	ldrb	r3, [r7, #11]
 8007c42:	4619      	mov	r1, r3
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 f90a 	bl	8007e5e <SCSI_ProcessRead>
 8007c4a:	4603      	mov	r3, r0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c68:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	7a1b      	ldrb	r3, [r3, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f040 8096 	bne.w	8007da0 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007c7a:	b25b      	sxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	da0a      	bge.n	8007c96 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007c86:	2320      	movs	r3, #32
 8007c88:	2205      	movs	r2, #5
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff ff07 	bl	8007a9e <SCSI_SenseCode>
      return -1;
 8007c90:	f04f 33ff 	mov.w	r3, #4294967295
 8007c94:	e08a      	b.n	8007dac <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	7afa      	ldrb	r2, [r7, #11]
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d008      	beq.n	8007cbc <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007caa:	7af9      	ldrb	r1, [r7, #11]
 8007cac:	233a      	movs	r3, #58	; 0x3a
 8007cae:	2202      	movs	r2, #2
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff fef4 	bl	8007a9e <SCSI_SenseCode>
      return -1;
 8007cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cba:	e077      	b.n	8007dac <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	7afa      	ldrb	r2, [r7, #11]
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	4798      	blx	r3
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d008      	beq.n	8007ce2 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007cd0:	7af9      	ldrb	r1, [r7, #11]
 8007cd2:	2327      	movs	r3, #39	; 0x27
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7ff fee1 	bl	8007a9e <SCSI_SenseCode>
      return -1;
 8007cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce0:	e064      	b.n	8007dac <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3303      	adds	r3, #3
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007cf2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007cfc:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	3205      	adds	r2, #5
 8007d02:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007d04:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3307      	adds	r3, #7
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	021b      	lsls	r3, r3, #8
                          (uint32_t)params[8];
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	3208      	adds	r2, #8
 8007d18:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d2e:	7af9      	ldrb	r1, [r7, #11]
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 f872 	bl	8007e1a <SCSI_CheckAddressRange>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	da02      	bge.n	8007d42 <SCSI_Write10+0xee>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d40:	e034      	b.n	8007dac <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007d4e:	fb02 f303 	mul.w	r3, r2, r3
 8007d52:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d00a      	beq.n	8007d76 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007d66:	2320      	movs	r3, #32
 8007d68:	2205      	movs	r2, #5
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff fe97 	bl	8007a9e <SCSI_SenseCode>
      return -1;
 8007d70:	f04f 33ff 	mov.w	r3, #4294967295
 8007d74:	e01a      	b.n	8007dac <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d7c:	bf28      	it	cs
 8007d7e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007d82:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2201      	movs	r2, #1
 8007d88:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f103 020c 	add.w	r2, r3, #12
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2101      	movs	r1, #1
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f002 fb4f 	bl	800a43a <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e005      	b.n	8007dac <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8007da0:	7afb      	ldrb	r3, [r7, #11]
 8007da2:	4619      	mov	r1, r3
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f8ce 	bl	8007f46 <SCSI_ProcessWrite>
 8007daa:	4603      	mov	r3, r0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007dc8:	617b      	str	r3, [r7, #20]

  if ((params[1]& 0x02U) == 0x02U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d008      	beq.n	8007dea <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007dd8:	7af9      	ldrb	r1, [r7, #11]
 8007dda:	2324      	movs	r3, #36	; 0x24
 8007ddc:	2205      	movs	r2, #5
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff fe5d 	bl	8007a9e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007de4:	f04f 33ff 	mov.w	r3, #4294967295
 8007de8:	e013      	b.n	8007e12 <SCSI_Verify10+0x5e>
  }

  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007df6:	7af9      	ldrb	r1, [r7, #11]
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f80e 	bl	8007e1a <SCSI_CheckAddressRange>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	da02      	bge.n	8007e0a <SCSI_Verify10+0x56>
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007e04:	f04f 33ff 	mov.w	r3, #4294967295
 8007e08:	e003      	b.n	8007e12 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	815a      	strh	r2, [r3, #10]
  return 0;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b086      	sub	sp, #24
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	603b      	str	r3, [r7, #0]
 8007e26:	460b      	mov	r3, r1
 8007e28:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e30:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	441a      	add	r2, r3
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d908      	bls.n	8007e54 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007e42:	7af9      	ldrb	r1, [r7, #11]
 8007e44:	2321      	movs	r3, #33	; 0x21
 8007e46:	2205      	movs	r2, #5
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7ff fe28 	bl	8007a9e <SCSI_SenseCode>
    return -1;
 8007e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e52:	e000      	b.n	8007e56 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007e5e:	b590      	push	{r4, r7, lr}
 8007e60:	b085      	sub	sp, #20
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	460b      	mov	r3, r1
 8007e68:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e70:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007e7e:	fb02 f303 	mul.w	r3, r2, r3
 8007e82:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e8a:	bf28      	it	cs
 8007e8c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007e90:	60bb      	str	r3, [r7, #8]

  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e98:	691c      	ldr	r4, [r3, #16]
                              hmsc->bot_data,
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f103 010c 	add.w	r1, r3, #12
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007eac:	4618      	mov	r0, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	fbb3 f3f0 	udiv	r3, r3, r0
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	78f8      	ldrb	r0, [r7, #3]
 8007eb8:	47a0      	blx	r4
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	da08      	bge.n	8007ed2 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007ec0:	78f9      	ldrb	r1, [r7, #3]
 8007ec2:	2311      	movs	r3, #17
 8007ec4:	2204      	movs	r2, #4
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff fde9 	bl	8007a9e <SCSI_SenseCode>
    return -1;
 8007ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed0:	e035      	b.n	8007f3e <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f103 020c 	add.w	r2, r3, #12
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	2181      	movs	r1, #129	; 0x81
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f002 fa88 	bl	800a3f4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ef8:	441a      	add	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f14:	1ad2      	subs	r2, r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	1ad2      	subs	r2, r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2203      	movs	r2, #3
 8007f3a:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd90      	pop	{r4, r7, pc}

08007f46 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007f46:	b590      	push	{r4, r7, lr}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007f58:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007f66:	fb02 f303 	mul.w	r3, r2, r3
 8007f6a:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f72:	bf28      	it	cs
 8007f74:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007f78:	60bb      	str	r3, [r7, #8]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f80:	695c      	ldr	r4, [r3, #20]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f103 010c 	add.w	r1, r3, #12
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007f94:	4618      	mov	r0, r3
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	fbb3 f3f0 	udiv	r3, r3, r0
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	78f8      	ldrb	r0, [r7, #3]
 8007fa0:	47a0      	blx	r4
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	da08      	bge.n	8007fba <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007fa8:	78f9      	ldrb	r1, [r7, #3]
 8007faa:	2303      	movs	r3, #3
 8007fac:	2204      	movs	r2, #4
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff fd75 	bl	8007a9e <SCSI_SenseCode>

    return -1;
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb8:	e045      	b.n	8008046 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fce:	441a      	add	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fea:	1ad2      	subs	r2, r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	1ad2      	subs	r2, r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800800c:	2100      	movs	r1, #0
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff f97a 	bl	8007308 <MSC_BOT_SendCSW>
 8008014:	e016      	b.n	8008044 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8008022:	fb02 f303 	mul.w	r3, r2, r3
 8008026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800802a:	bf28      	it	cs
 800802c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008030:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f103 020c 	add.w	r2, r3, #12
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	b29b      	uxth	r3, r3
 800803c:	2101      	movs	r1, #1
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f002 f9fb 	bl	800a43a <USBD_LL_PrepareReceive>
  }

  return 0;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	bd90      	pop	{r4, r7, pc}

0800804e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	60b9      	str	r1, [r7, #8]
 8008058:	4613      	mov	r3, r2
 800805a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008062:	2302      	movs	r3, #2
 8008064:	e01a      	b.n	800809c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	79fa      	ldrb	r2, [r7, #7]
 8008092:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f002 f859 	bl	800a14c <USBD_LL_Init>

  return USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d006      	beq.n	80080c6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]
 80080c4:	e001      	b.n	80080ca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80080c6:	2302      	movs	r3, #2
 80080c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f002 f87f 	bl	800a1e4 <USBD_LL_Start>

  return USBD_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008112:	2302      	movs	r3, #2
 8008114:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00c      	beq.n	800813a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	4611      	mov	r1, r2
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800813a:	7bfb      	ldrb	r3, [r7, #15]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	78fa      	ldrb	r2, [r7, #3]
 800815a:	4611      	mov	r1, r2
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	4798      	blx	r3
  return USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fe95 	bl	8008eac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008190:	461a      	mov	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800819e:	f003 031f 	and.w	r3, r3, #31
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d00c      	beq.n	80081c0 <USBD_LL_SetupStage+0x56>
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d302      	bcc.n	80081b0 <USBD_LL_SetupStage+0x46>
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d010      	beq.n	80081d0 <USBD_LL_SetupStage+0x66>
 80081ae:	e017      	b.n	80081e0 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fa05 	bl	80085c8 <USBD_StdDevReq>
    break;
 80081be:	e01a      	b.n	80081f6 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fa67 	bl	800869c <USBD_StdItfReq>
    break;
 80081ce:	e012      	b.n	80081f6 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 faa5 	bl	8008728 <USBD_StdEPReq>
    break;
 80081de:	e00a      	b.n	80081f6 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80081e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f002 f877 	bl	800a2e2 <USBD_LL_StallEP>
    break;
 80081f4:	bf00      	nop
  }

  return USBD_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	460b      	mov	r3, r1
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800820e:	7afb      	ldrb	r3, [r7, #11]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d14b      	bne.n	80082ac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800821a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008222:	2b03      	cmp	r3, #3
 8008224:	d134      	bne.n	8008290 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	429a      	cmp	r2, r3
 8008230:	d919      	bls.n	8008266 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	1ad2      	subs	r2, r2, r3
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008248:	429a      	cmp	r2, r3
 800824a:	d203      	bcs.n	8008254 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008250:	b29b      	uxth	r3, r3
 8008252:	e002      	b.n	800825a <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008258:	b29b      	uxth	r3, r3
 800825a:	461a      	mov	r2, r3
 800825c:	6879      	ldr	r1, [r7, #4]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 fefa 	bl	8009058 <USBD_CtlContinueRx>
 8008264:	e038      	b.n	80082d8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00a      	beq.n	8008288 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008278:	2b03      	cmp	r3, #3
 800827a:	d105      	bne.n	8008288 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 fef7 	bl	800907c <USBD_CtlSendStatus>
 800828e:	e023      	b.n	80082d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008296:	2b05      	cmp	r3, #5
 8008298:	d11e      	bne.n	80082d8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80082a2:	2100      	movs	r1, #0
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f002 f81c 	bl	800a2e2 <USBD_LL_StallEP>
 80082aa:	e015      	b.n	80082d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00d      	beq.n	80082d4 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d108      	bne.n	80082d4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	7afa      	ldrb	r2, [r7, #11]
 80082cc:	4611      	mov	r1, r2
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	4798      	blx	r3
 80082d2:	e001      	b.n	80082d8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082d4:	2302      	movs	r3, #2
 80082d6:	e000      	b.n	80082da <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b086      	sub	sp, #24
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	460b      	mov	r3, r1
 80082ec:	607a      	str	r2, [r7, #4]
 80082ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80082f0:	7afb      	ldrb	r3, [r7, #11]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d17f      	bne.n	80083f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3314      	adds	r3, #20
 80082fa:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008302:	2b02      	cmp	r3, #2
 8008304:	d15c      	bne.n	80083c0 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	429a      	cmp	r2, r3
 8008310:	d915      	bls.n	800833e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	1ad2      	subs	r2, r2, r3
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	b29b      	uxth	r3, r3
 8008326:	461a      	mov	r2, r3
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fe82 	bl	8009034 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008330:	2300      	movs	r3, #0
 8008332:	2200      	movs	r2, #0
 8008334:	2100      	movs	r1, #0
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f002 f87f 	bl	800a43a <USBD_LL_PrepareReceive>
 800833c:	e04e      	b.n	80083dc <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	6912      	ldr	r2, [r2, #16]
 8008346:	fbb3 f1f2 	udiv	r1, r3, r2
 800834a:	fb02 f201 	mul.w	r2, r2, r1
 800834e:	1a9b      	subs	r3, r3, r2
 8008350:	2b00      	cmp	r3, #0
 8008352:	d11c      	bne.n	800838e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	689a      	ldr	r2, [r3, #8]
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800835c:	429a      	cmp	r2, r3
 800835e:	d316      	bcc.n	800838e <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800836a:	429a      	cmp	r2, r3
 800836c:	d20f      	bcs.n	800838e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800836e:	2200      	movs	r2, #0
 8008370:	2100      	movs	r1, #0
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 fe5e 	bl	8009034 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008380:	2300      	movs	r3, #0
 8008382:	2200      	movs	r2, #0
 8008384:	2100      	movs	r1, #0
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f002 f857 	bl	800a43a <USBD_LL_PrepareReceive>
 800838c:	e026      	b.n	80083dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d105      	bne.n	80083b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80083b0:	2180      	movs	r1, #128	; 0x80
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f001 ff95 	bl	800a2e2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 fe72 	bl	80090a2 <USBD_CtlReceiveStatus>
 80083be:	e00d      	b.n	80083dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d004      	beq.n	80083d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d103      	bne.n	80083dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80083d4:	2180      	movs	r1, #128	; 0x80
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f001 ff83 	bl	800a2e2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d11d      	bne.n	8008422 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7ff fe82 	bl	80080f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80083f4:	e015      	b.n	8008422 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00d      	beq.n	800841e <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008408:	2b03      	cmp	r3, #3
 800840a:	d108      	bne.n	800841e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	7afa      	ldrb	r2, [r7, #11]
 8008416:	4611      	mov	r1, r2
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	4798      	blx	r3
 800841c:	e001      	b.n	8008422 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800841e:	2302      	movs	r3, #2
 8008420:	e000      	b.n	8008424 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008434:	2340      	movs	r3, #64	; 0x40
 8008436:	2200      	movs	r2, #0
 8008438:	2100      	movs	r1, #0
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 feed 	bl	800a21a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2240      	movs	r2, #64	; 0x40
 800844c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008450:	2340      	movs	r3, #64	; 0x40
 8008452:	2200      	movs	r2, #0
 8008454:	2180      	movs	r1, #128	; 0x80
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fedf 	bl	800a21a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2240      	movs	r2, #64	; 0x40
 8008466:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800848c:	2b00      	cmp	r3, #0
 800848e:	d009      	beq.n	80084a4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	6852      	ldr	r2, [r2, #4]
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	4611      	mov	r1, r2
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	4798      	blx	r3
  }

  return USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b083      	sub	sp, #12
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	460b      	mov	r3, r1
 80084b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	78fa      	ldrb	r2, [r7, #3]
 80084be:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2204      	movs	r2, #4
 80084e6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008528:	2b03      	cmp	r3, #3
 800852a:	d10b      	bne.n	8008544 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d005      	beq.n	8008544 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	6852      	ldr	r2, [r2, #4]
 80085b4:	b2d2      	uxtb	r2, r2
 80085b6:	4611      	mov	r1, r2
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	4798      	blx	r3

  return USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085de:	2b20      	cmp	r3, #32
 80085e0:	d004      	beq.n	80085ec <USBD_StdDevReq+0x24>
 80085e2:	2b40      	cmp	r3, #64	; 0x40
 80085e4:	d002      	beq.n	80085ec <USBD_StdDevReq+0x24>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d008      	beq.n	80085fc <USBD_StdDevReq+0x34>
 80085ea:	e04c      	b.n	8008686 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
    break;
 80085fa:	e049      	b.n	8008690 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	2b09      	cmp	r3, #9
 8008602:	d83a      	bhi.n	800867a <USBD_StdDevReq+0xb2>
 8008604:	a201      	add	r2, pc, #4	; (adr r2, 800860c <USBD_StdDevReq+0x44>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	0800865d 	.word	0x0800865d
 8008610:	08008671 	.word	0x08008671
 8008614:	0800867b 	.word	0x0800867b
 8008618:	08008667 	.word	0x08008667
 800861c:	0800867b 	.word	0x0800867b
 8008620:	0800863f 	.word	0x0800863f
 8008624:	08008635 	.word	0x08008635
 8008628:	0800867b 	.word	0x0800867b
 800862c:	08008653 	.word	0x08008653
 8008630:	08008649 	.word	0x08008649
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f9d2 	bl	80089e0 <USBD_GetDescriptor>
      break;
 800863c:	e022      	b.n	8008684 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fac7 	bl	8008bd4 <USBD_SetAddress>
      break;
 8008646:	e01d      	b.n	8008684 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fb04 	bl	8008c58 <USBD_SetConfig>
      break;
 8008650:	e018      	b.n	8008684 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fb8d 	bl	8008d74 <USBD_GetConfig>
      break;
 800865a:	e013      	b.n	8008684 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fbbc 	bl	8008ddc <USBD_GetStatus>
      break;
 8008664:	e00e      	b.n	8008684 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fbea 	bl	8008e42 <USBD_SetFeature>
      break;
 800866e:	e009      	b.n	8008684 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fbf9 	bl	8008e6a <USBD_ClrFeature>
      break;
 8008678:	e004      	b.n	8008684 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fc52 	bl	8008f26 <USBD_CtlError>
      break;
 8008682:	bf00      	nop
    }
    break;
 8008684:	e004      	b.n	8008690 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fc4c 	bl	8008f26 <USBD_CtlError>
    break;
 800868e:	bf00      	nop
  }

  return ret;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop

0800869c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086b2:	2b20      	cmp	r3, #32
 80086b4:	d003      	beq.n	80086be <USBD_StdItfReq+0x22>
 80086b6:	2b40      	cmp	r3, #64	; 0x40
 80086b8:	d001      	beq.n	80086be <USBD_StdItfReq+0x22>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d12a      	bne.n	8008714 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80086c4:	3b01      	subs	r3, #1
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d81d      	bhi.n	8008706 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	889b      	ldrh	r3, [r3, #4]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d813      	bhi.n	80086fc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	4798      	blx	r3
 80086e2:	4603      	mov	r3, r0
 80086e4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	88db      	ldrh	r3, [r3, #6]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d110      	bne.n	8008710 <USBD_StdItfReq+0x74>
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10d      	bne.n	8008710 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fcc1 	bl	800907c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80086fa:	e009      	b.n	8008710 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fc11 	bl	8008f26 <USBD_CtlError>
      break;
 8008704:	e004      	b.n	8008710 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fc0c 	bl	8008f26 <USBD_CtlError>
      break;
 800870e:	e000      	b.n	8008712 <USBD_StdItfReq+0x76>
      break;
 8008710:	bf00      	nop
    }
    break;
 8008712:	e004      	b.n	800871e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fc05 	bl	8008f26 <USBD_CtlError>
    break;
 800871c:	bf00      	nop
  }

  return USBD_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	889b      	ldrh	r3, [r3, #4]
 800873a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008744:	2b20      	cmp	r3, #32
 8008746:	d004      	beq.n	8008752 <USBD_StdEPReq+0x2a>
 8008748:	2b40      	cmp	r3, #64	; 0x40
 800874a:	d002      	beq.n	8008752 <USBD_StdEPReq+0x2a>
 800874c:	2b00      	cmp	r3, #0
 800874e:	d008      	beq.n	8008762 <USBD_StdEPReq+0x3a>
 8008750:	e13b      	b.n	80089ca <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	4798      	blx	r3
    break;
 8008760:	e138      	b.n	80089d4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800876a:	2b20      	cmp	r3, #32
 800876c:	d10a      	bne.n	8008784 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	4798      	blx	r3
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	e128      	b.n	80089d6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d03e      	beq.n	800880a <USBD_StdEPReq+0xe2>
 800878c:	2b03      	cmp	r3, #3
 800878e:	d002      	beq.n	8008796 <USBD_StdEPReq+0x6e>
 8008790:	2b00      	cmp	r3, #0
 8008792:	d070      	beq.n	8008876 <USBD_StdEPReq+0x14e>
 8008794:	e113      	b.n	80089be <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800879c:	2b02      	cmp	r3, #2
 800879e:	d002      	beq.n	80087a6 <USBD_StdEPReq+0x7e>
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d015      	beq.n	80087d0 <USBD_StdEPReq+0xa8>
 80087a4:	e02b      	b.n	80087fe <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00c      	beq.n	80087c6 <USBD_StdEPReq+0x9e>
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b80      	cmp	r3, #128	; 0x80
 80087b0:	d009      	beq.n	80087c6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 fd93 	bl	800a2e2 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80087bc:	2180      	movs	r1, #128	; 0x80
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 fd8f 	bl	800a2e2 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80087c4:	e020      	b.n	8008808 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fbac 	bl	8008f26 <USBD_CtlError>
        break;
 80087ce:	e01b      	b.n	8008808 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	885b      	ldrh	r3, [r3, #2]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10e      	bne.n	80087f6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00b      	beq.n	80087f6 <USBD_StdEPReq+0xce>
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	2b80      	cmp	r3, #128	; 0x80
 80087e2:	d008      	beq.n	80087f6 <USBD_StdEPReq+0xce>
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	88db      	ldrh	r3, [r3, #6]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d104      	bne.n	80087f6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f001 fd76 	bl	800a2e2 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fc40 	bl	800907c <USBD_CtlSendStatus>

        break;
 80087fc:	e004      	b.n	8008808 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fb90 	bl	8008f26 <USBD_CtlError>
        break;
 8008806:	bf00      	nop
      }
      break;
 8008808:	e0de      	b.n	80089c8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008810:	2b02      	cmp	r3, #2
 8008812:	d002      	beq.n	800881a <USBD_StdEPReq+0xf2>
 8008814:	2b03      	cmp	r3, #3
 8008816:	d015      	beq.n	8008844 <USBD_StdEPReq+0x11c>
 8008818:	e026      	b.n	8008868 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00c      	beq.n	800883a <USBD_StdEPReq+0x112>
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b80      	cmp	r3, #128	; 0x80
 8008824:	d009      	beq.n	800883a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 fd59 	bl	800a2e2 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008830:	2180      	movs	r1, #128	; 0x80
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 fd55 	bl	800a2e2 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008838:	e01c      	b.n	8008874 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fb72 	bl	8008f26 <USBD_CtlError>
        break;
 8008842:	e017      	b.n	8008874 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	885b      	ldrh	r3, [r3, #2]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d112      	bne.n	8008872 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008852:	2b00      	cmp	r3, #0
 8008854:	d004      	beq.n	8008860 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fd60 	bl	800a320 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fc0b 	bl	800907c <USBD_CtlSendStatus>
        }
        break;
 8008866:	e004      	b.n	8008872 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fb5b 	bl	8008f26 <USBD_CtlError>
        break;
 8008870:	e000      	b.n	8008874 <USBD_StdEPReq+0x14c>
        break;
 8008872:	bf00      	nop
      }
      break;
 8008874:	e0a8      	b.n	80089c8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800887c:	2b02      	cmp	r3, #2
 800887e:	d002      	beq.n	8008886 <USBD_StdEPReq+0x15e>
 8008880:	2b03      	cmp	r3, #3
 8008882:	d031      	beq.n	80088e8 <USBD_StdEPReq+0x1c0>
 8008884:	e095      	b.n	80089b2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d007      	beq.n	800889c <USBD_StdEPReq+0x174>
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	2b80      	cmp	r3, #128	; 0x80
 8008890:	d004      	beq.n	800889c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fb46 	bl	8008f26 <USBD_CtlError>
          break;
 800889a:	e08f      	b.n	80089bc <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800889c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	da0b      	bge.n	80088bc <USBD_StdEPReq+0x194>
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	3310      	adds	r3, #16
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	4413      	add	r3, r2
 80088b8:	3304      	adds	r3, #4
 80088ba:	e00a      	b.n	80088d2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
 80088be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	4413      	add	r3, r2
 80088d2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2202      	movs	r2, #2
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fb8b 	bl	8008ffc <USBD_CtlSendData>
          break;
 80088e6:	e069      	b.n	80089bc <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80088e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	da11      	bge.n	8008914 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	f003 020f 	and.w	r2, r3, #15
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	4613      	mov	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	440b      	add	r3, r1
 8008902:	3318      	adds	r3, #24
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d117      	bne.n	800893a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fb0a 	bl	8008f26 <USBD_CtlError>
            break;
 8008912:	e053      	b.n	80089bc <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	f003 020f 	and.w	r2, r3, #15
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 faf7 	bl	8008f26 <USBD_CtlError>
            break;
 8008938:	e040      	b.n	80089bc <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800893a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800893e:	2b00      	cmp	r3, #0
 8008940:	da0b      	bge.n	800895a <USBD_StdEPReq+0x232>
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008948:	4613      	mov	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	3310      	adds	r3, #16
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	4413      	add	r3, r2
 8008956:	3304      	adds	r3, #4
 8008958:	e00a      	b.n	8008970 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008960:	4613      	mov	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	4413      	add	r3, r2
 8008970:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <USBD_StdEPReq+0x256>
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	2b80      	cmp	r3, #128	; 0x80
 800897c:	d103      	bne.n	8008986 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e00e      	b.n	80089a4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f001 fce7 	bl	800a35e <USBD_LL_IsStallEP>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2201      	movs	r2, #1
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	e002      	b.n	80089a4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2202      	movs	r2, #2
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fb26 	bl	8008ffc <USBD_CtlSendData>
          break;
 80089b0:	e004      	b.n	80089bc <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fab6 	bl	8008f26 <USBD_CtlError>
        break;
 80089ba:	bf00      	nop
      }
      break;
 80089bc:	e004      	b.n	80089c8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fab0 	bl	8008f26 <USBD_CtlError>
      break;
 80089c6:	bf00      	nop
    }
    break;
 80089c8:	e004      	b.n	80089d4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 faaa 	bl	8008f26 <USBD_CtlError>
    break;
 80089d2:	bf00      	nop
  }

  return ret;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
	...

080089e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	885b      	ldrh	r3, [r3, #2]
 80089ee:	0a1b      	lsrs	r3, r3, #8
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	3b01      	subs	r3, #1
 80089f4:	2b06      	cmp	r3, #6
 80089f6:	f200 80c9 	bhi.w	8008b8c <USBD_GetDescriptor+0x1ac>
 80089fa:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <USBD_GetDescriptor+0x20>)
 80089fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a00:	08008a1d 	.word	0x08008a1d
 8008a04:	08008a35 	.word	0x08008a35
 8008a08:	08008a75 	.word	0x08008a75
 8008a0c:	08008b8d 	.word	0x08008b8d
 8008a10:	08008b8d 	.word	0x08008b8d
 8008a14:	08008b39 	.word	0x08008b39
 8008a18:	08008b5f 	.word	0x08008b5f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	7c12      	ldrb	r2, [r2, #16]
 8008a28:	f107 010a 	add.w	r1, r7, #10
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4798      	blx	r3
 8008a30:	60f8      	str	r0, [r7, #12]
    break;
 8008a32:	e0b0      	b.n	8008b96 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	7c1b      	ldrb	r3, [r3, #16]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10d      	bne.n	8008a58 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a44:	f107 020a 	add.w	r2, r7, #10
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4798      	blx	r3
 8008a4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3301      	adds	r3, #1
 8008a52:	2202      	movs	r2, #2
 8008a54:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008a56:	e09e      	b.n	8008b96 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	f107 020a 	add.w	r2, r7, #10
 8008a64:	4610      	mov	r0, r2
 8008a66:	4798      	blx	r3
 8008a68:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	2202      	movs	r2, #2
 8008a70:	701a      	strb	r2, [r3, #0]
    break;
 8008a72:	e090      	b.n	8008b96 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	885b      	ldrh	r3, [r3, #2]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b05      	cmp	r3, #5
 8008a7c:	d856      	bhi.n	8008b2c <USBD_GetDescriptor+0x14c>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <USBD_GetDescriptor+0xa4>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008a9d 	.word	0x08008a9d
 8008a88:	08008ab5 	.word	0x08008ab5
 8008a8c:	08008acd 	.word	0x08008acd
 8008a90:	08008ae5 	.word	0x08008ae5
 8008a94:	08008afd 	.word	0x08008afd
 8008a98:	08008b15 	.word	0x08008b15
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	7c12      	ldrb	r2, [r2, #16]
 8008aa8:	f107 010a 	add.w	r1, r7, #10
 8008aac:	4610      	mov	r0, r2
 8008aae:	4798      	blx	r3
 8008ab0:	60f8      	str	r0, [r7, #12]
      break;
 8008ab2:	e040      	b.n	8008b36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	7c12      	ldrb	r2, [r2, #16]
 8008ac0:	f107 010a 	add.w	r1, r7, #10
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	4798      	blx	r3
 8008ac8:	60f8      	str	r0, [r7, #12]
      break;
 8008aca:	e034      	b.n	8008b36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	7c12      	ldrb	r2, [r2, #16]
 8008ad8:	f107 010a 	add.w	r1, r7, #10
 8008adc:	4610      	mov	r0, r2
 8008ade:	4798      	blx	r3
 8008ae0:	60f8      	str	r0, [r7, #12]
      break;
 8008ae2:	e028      	b.n	8008b36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	7c12      	ldrb	r2, [r2, #16]
 8008af0:	f107 010a 	add.w	r1, r7, #10
 8008af4:	4610      	mov	r0, r2
 8008af6:	4798      	blx	r3
 8008af8:	60f8      	str	r0, [r7, #12]
      break;
 8008afa:	e01c      	b.n	8008b36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	7c12      	ldrb	r2, [r2, #16]
 8008b08:	f107 010a 	add.w	r1, r7, #10
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	4798      	blx	r3
 8008b10:	60f8      	str	r0, [r7, #12]
      break;
 8008b12:	e010      	b.n	8008b36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	7c12      	ldrb	r2, [r2, #16]
 8008b20:	f107 010a 	add.w	r1, r7, #10
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	60f8      	str	r0, [r7, #12]
      break;
 8008b2a:	e004      	b.n	8008b36 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f9f9 	bl	8008f26 <USBD_CtlError>
      return;
 8008b34:	e04b      	b.n	8008bce <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8008b36:	e02e      	b.n	8008b96 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	7c1b      	ldrb	r3, [r3, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b48:	f107 020a 	add.w	r2, r7, #10
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	4798      	blx	r3
 8008b50:	60f8      	str	r0, [r7, #12]
      break;
 8008b52:	e020      	b.n	8008b96 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f9e5 	bl	8008f26 <USBD_CtlError>
      return;
 8008b5c:	e037      	b.n	8008bce <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	7c1b      	ldrb	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10d      	bne.n	8008b82 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	f107 020a 	add.w	r2, r7, #10
 8008b72:	4610      	mov	r0, r2
 8008b74:	4798      	blx	r3
 8008b76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	2207      	movs	r2, #7
 8008b7e:	701a      	strb	r2, [r3, #0]
      break;
 8008b80:	e009      	b.n	8008b96 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f9ce 	bl	8008f26 <USBD_CtlError>
      return;
 8008b8a:	e020      	b.n	8008bce <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f9c9 	bl	8008f26 <USBD_CtlError>
    return;
 8008b94:	e01b      	b.n	8008bce <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8008b96:	897b      	ldrh	r3, [r7, #10]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d011      	beq.n	8008bc0 <USBD_GetDescriptor+0x1e0>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	88db      	ldrh	r3, [r3, #6]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00d      	beq.n	8008bc0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	88da      	ldrh	r2, [r3, #6]
 8008ba8:	897b      	ldrh	r3, [r7, #10]
 8008baa:	4293      	cmp	r3, r2
 8008bac:	bf28      	it	cs
 8008bae:	4613      	movcs	r3, r2
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008bb4:	897b      	ldrh	r3, [r7, #10]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	68f9      	ldr	r1, [r7, #12]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa1e 	bl	8008ffc <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	88db      	ldrh	r3, [r3, #6]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fa57 	bl	800907c <USBD_CtlSendStatus>
  }
}
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	889b      	ldrh	r3, [r3, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d130      	bne.n	8008c48 <USBD_SetAddress+0x74>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	88db      	ldrh	r3, [r3, #6]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d12c      	bne.n	8008c48 <USBD_SetAddress+0x74>
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	885b      	ldrh	r3, [r3, #2]
 8008bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8008bf4:	d828      	bhi.n	8008c48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	885b      	ldrh	r3, [r3, #2]
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d104      	bne.n	8008c16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f989 	bl	8008f26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c14:	e01c      	b.n	8008c50 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	7bfa      	ldrb	r2, [r7, #15]
 8008c1a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 fbc7 	bl	800a3b6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fa27 	bl	800907c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d004      	beq.n	8008c3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3c:	e008      	b.n	8008c50 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c46:	e003      	b.n	8008c50 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f96b 	bl	8008f26 <USBD_CtlError>
  }
}
 8008c50:	bf00      	nop
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	885b      	ldrh	r3, [r3, #2]
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	4b41      	ldr	r3, [pc, #260]	; (8008d70 <USBD_SetConfig+0x118>)
 8008c6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c6c:	4b40      	ldr	r3, [pc, #256]	; (8008d70 <USBD_SetConfig+0x118>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d904      	bls.n	8008c7e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f955 	bl	8008f26 <USBD_CtlError>
 8008c7c:	e075      	b.n	8008d6a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d002      	beq.n	8008c8e <USBD_SetConfig+0x36>
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d023      	beq.n	8008cd4 <USBD_SetConfig+0x7c>
 8008c8c:	e062      	b.n	8008d54 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008c8e:	4b38      	ldr	r3, [pc, #224]	; (8008d70 <USBD_SetConfig+0x118>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d01a      	beq.n	8008ccc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008c96:	4b36      	ldr	r3, [pc, #216]	; (8008d70 <USBD_SetConfig+0x118>)
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2203      	movs	r2, #3
 8008ca4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ca8:	4b31      	ldr	r3, [pc, #196]	; (8008d70 <USBD_SetConfig+0x118>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7ff fa29 	bl	8008106 <USBD_SetClassConfig>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d104      	bne.n	8008cc4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f932 	bl	8008f26 <USBD_CtlError>
          return;
 8008cc2:	e052      	b.n	8008d6a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f9d9 	bl	800907c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008cca:	e04e      	b.n	8008d6a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f9d5 	bl	800907c <USBD_CtlSendStatus>
      break;
 8008cd2:	e04a      	b.n	8008d6a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008cd4:	4b26      	ldr	r3, [pc, #152]	; (8008d70 <USBD_SetConfig+0x118>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d112      	bne.n	8008d02 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008ce4:	4b22      	ldr	r3, [pc, #136]	; (8008d70 <USBD_SetConfig+0x118>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008cee:	4b20      	ldr	r3, [pc, #128]	; (8008d70 <USBD_SetConfig+0x118>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff fa25 	bl	8008144 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f9be 	bl	800907c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008d00:	e033      	b.n	8008d6a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008d02:	4b1b      	ldr	r3, [pc, #108]	; (8008d70 <USBD_SetConfig+0x118>)
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d01d      	beq.n	8008d4c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff fa13 	bl	8008144 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d1e:	4b14      	ldr	r3, [pc, #80]	; (8008d70 <USBD_SetConfig+0x118>)
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d28:	4b11      	ldr	r3, [pc, #68]	; (8008d70 <USBD_SetConfig+0x118>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff f9e9 	bl	8008106 <USBD_SetClassConfig>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d104      	bne.n	8008d44 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f8f2 	bl	8008f26 <USBD_CtlError>
          return;
 8008d42:	e012      	b.n	8008d6a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f999 	bl	800907c <USBD_CtlSendStatus>
      break;
 8008d4a:	e00e      	b.n	8008d6a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f995 	bl	800907c <USBD_CtlSendStatus>
      break;
 8008d52:	e00a      	b.n	8008d6a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f8e5 	bl	8008f26 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008d5c:	4b04      	ldr	r3, [pc, #16]	; (8008d70 <USBD_SetConfig+0x118>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff f9ee 	bl	8008144 <USBD_ClrClassConfig>
      break;
 8008d68:	bf00      	nop
    }
  }
}
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	200001a4 	.word	0x200001a4

08008d74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	88db      	ldrh	r3, [r3, #6]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d004      	beq.n	8008d90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f8cc 	bl	8008f26 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008d8e:	e021      	b.n	8008dd4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	db17      	blt.n	8008dca <USBD_GetConfig+0x56>
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	dd02      	ble.n	8008da4 <USBD_GetConfig+0x30>
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	d00b      	beq.n	8008dba <USBD_GetConfig+0x46>
 8008da2:	e012      	b.n	8008dca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	3308      	adds	r3, #8
 8008dae:	2201      	movs	r2, #1
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f922 	bl	8008ffc <USBD_CtlSendData>
      break;
 8008db8:	e00c      	b.n	8008dd4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f91a 	bl	8008ffc <USBD_CtlSendData>
      break;
 8008dc8:	e004      	b.n	8008dd4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f8aa 	bl	8008f26 <USBD_CtlError>
      break;
 8008dd2:	bf00      	nop
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008dec:	3b01      	subs	r3, #1
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d81e      	bhi.n	8008e30 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	88db      	ldrh	r3, [r3, #6]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d004      	beq.n	8008e04 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f892 	bl	8008f26 <USBD_CtlError>
      break;
 8008e02:	e01a      	b.n	8008e3a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f043 0202 	orr.w	r2, r3, #2
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	330c      	adds	r3, #12
 8008e24:	2202      	movs	r2, #2
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f8e7 	bl	8008ffc <USBD_CtlSendData>
    break;
 8008e2e:	e004      	b.n	8008e3a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f877 	bl	8008f26 <USBD_CtlError>
    break;
 8008e38:	bf00      	nop
  }
}
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b082      	sub	sp, #8
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	885b      	ldrh	r3, [r3, #2]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d106      	bne.n	8008e62 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f90d 	bl	800907c <USBD_CtlSendStatus>
  }

}
 8008e62:	bf00      	nop
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d80b      	bhi.n	8008e98 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	885b      	ldrh	r3, [r3, #2]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d10c      	bne.n	8008ea2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f8f3 	bl	800907c <USBD_CtlSendStatus>
    }
    break;
 8008e96:	e004      	b.n	8008ea2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f843 	bl	8008f26 <USBD_CtlError>
    break;
 8008ea0:	e000      	b.n	8008ea4 <USBD_ClrFeature+0x3a>
    break;
 8008ea2:	bf00      	nop
  }
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781a      	ldrb	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	785a      	ldrb	r2, [r3, #1]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	3302      	adds	r3, #2
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	3303      	adds	r3, #3
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	021b      	lsls	r3, r3, #8
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	4413      	add	r3, r2
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	3305      	adds	r3, #5
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	021b      	lsls	r3, r3, #8
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	4413      	add	r3, r2
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	3306      	adds	r3, #6
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	3307      	adds	r3, #7
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	021b      	lsls	r3, r3, #8
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	4413      	add	r3, r2
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	80da      	strh	r2, [r3, #6]

}
 8008f1a:	bf00      	nop
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b082      	sub	sp, #8
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008f30:	2180      	movs	r1, #128	; 0x80
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f001 f9d5 	bl	800a2e2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008f38:	2100      	movs	r1, #0
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 f9d1 	bl	800a2e2 <USBD_LL_StallEP>
}
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d032      	beq.n	8008fc4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f000 f834 	bl	8008fcc <USBD_GetLen>
 8008f64:	4603      	mov	r3, r0
 8008f66:	3301      	adds	r3, #1
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	75fa      	strb	r2, [r7, #23]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	7812      	ldrb	r2, [r2, #0]
 8008f82:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	75fa      	strb	r2, [r7, #23]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	4413      	add	r3, r2
 8008f90:	2203      	movs	r2, #3
 8008f92:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f94:	e012      	b.n	8008fbc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	60fa      	str	r2, [r7, #12]
 8008f9c:	7dfa      	ldrb	r2, [r7, #23]
 8008f9e:	1c51      	adds	r1, r2, #1
 8008fa0:	75f9      	strb	r1, [r7, #23]
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	440a      	add	r2, r1
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	75fa      	strb	r2, [r7, #23]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	2200      	movs	r2, #0
 8008fba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e8      	bne.n	8008f96 <USBD_GetString+0x4e>
    }
  }
}
 8008fc4:	bf00      	nop
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008fd8:	e005      	b.n	8008fe6 <USBD_GetLen+0x1a>
    {
        len++;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1f5      	bne.n	8008fda <USBD_GetLen+0xe>
    }

    return len;
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	4613      	mov	r3, r2
 8009008:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2202      	movs	r2, #2
 800900e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009012:	88fa      	ldrh	r2, [r7, #6]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009018:	88fa      	ldrh	r2, [r7, #6]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800901e:	88fb      	ldrh	r3, [r7, #6]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	2100      	movs	r1, #0
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f001 f9e5 	bl	800a3f4 <USBD_LL_Transmit>

  return USBD_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	4613      	mov	r3, r2
 8009040:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009042:	88fb      	ldrh	r3, [r7, #6]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	2100      	movs	r1, #0
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f001 f9d3 	bl	800a3f4 <USBD_LL_Transmit>

  return USBD_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	4613      	mov	r3, r2
 8009064:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009066:	88fb      	ldrh	r3, [r7, #6]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	2100      	movs	r1, #0
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f001 f9e4 	bl	800a43a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2204      	movs	r2, #4
 8009088:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800908c:	2300      	movs	r3, #0
 800908e:	2200      	movs	r2, #0
 8009090:	2100      	movs	r1, #0
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 f9ae 	bl	800a3f4 <USBD_LL_Transmit>

  return USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2205      	movs	r2, #5
 80090ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80090b2:	2300      	movs	r3, #0
 80090b4:	2200      	movs	r2, #0
 80090b6:	2100      	movs	r1, #0
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 f9be 	bl	800a43a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	4a08      	ldr	r2, [pc, #32]	; (80090f8 <disk_status+0x30>)
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	79fa      	ldrb	r2, [r7, #7]
 80090e0:	4905      	ldr	r1, [pc, #20]	; (80090f8 <disk_status+0x30>)
 80090e2:	440a      	add	r2, r1
 80090e4:	7a12      	ldrb	r2, [r2, #8]
 80090e6:	4610      	mov	r0, r2
 80090e8:	4798      	blx	r3
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	200001d0 	.word	0x200001d0

080090fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	4a0d      	ldr	r2, [pc, #52]	; (8009144 <disk_initialize+0x48>)
 800910e:	5cd3      	ldrb	r3, [r2, r3]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d111      	bne.n	8009138 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	4a0b      	ldr	r2, [pc, #44]	; (8009144 <disk_initialize+0x48>)
 8009118:	2101      	movs	r1, #1
 800911a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	4a09      	ldr	r2, [pc, #36]	; (8009144 <disk_initialize+0x48>)
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	79fa      	ldrb	r2, [r7, #7]
 800912a:	4906      	ldr	r1, [pc, #24]	; (8009144 <disk_initialize+0x48>)
 800912c:	440a      	add	r2, r1
 800912e:	7a12      	ldrb	r2, [r2, #8]
 8009130:	4610      	mov	r0, r2
 8009132:	4798      	blx	r3
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009138:	7bfb      	ldrb	r3, [r7, #15]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	200001d0 	.word	0x200001d0

08009148 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009148:	b590      	push	{r4, r7, lr}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	607a      	str	r2, [r7, #4]
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	4a0a      	ldr	r2, [pc, #40]	; (8009184 <disk_read+0x3c>)
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	689c      	ldr	r4, [r3, #8]
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	4a07      	ldr	r2, [pc, #28]	; (8009184 <disk_read+0x3c>)
 8009168:	4413      	add	r3, r2
 800916a:	7a18      	ldrb	r0, [r3, #8]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	68b9      	ldr	r1, [r7, #8]
 8009172:	47a0      	blx	r4
 8009174:	4603      	mov	r3, r0
 8009176:	75fb      	strb	r3, [r7, #23]
  return res;
 8009178:	7dfb      	ldrb	r3, [r7, #23]
}
 800917a:	4618      	mov	r0, r3
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	bd90      	pop	{r4, r7, pc}
 8009182:	bf00      	nop
 8009184:	200001d0 	.word	0x200001d0

08009188 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009188:	b590      	push	{r4, r7, lr}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	4a0a      	ldr	r2, [pc, #40]	; (80091c4 <disk_write+0x3c>)
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	68dc      	ldr	r4, [r3, #12]
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	4a07      	ldr	r2, [pc, #28]	; (80091c4 <disk_write+0x3c>)
 80091a8:	4413      	add	r3, r2
 80091aa:	7a18      	ldrb	r0, [r3, #8]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	68b9      	ldr	r1, [r7, #8]
 80091b2:	47a0      	blx	r4
 80091b4:	4603      	mov	r3, r0
 80091b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80091b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	371c      	adds	r7, #28
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd90      	pop	{r4, r7, pc}
 80091c2:	bf00      	nop
 80091c4:	200001d0 	.word	0x200001d0

080091c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	603a      	str	r2, [r7, #0]
 80091d2:	71fb      	strb	r3, [r7, #7]
 80091d4:	460b      	mov	r3, r1
 80091d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80091d8:	79fb      	ldrb	r3, [r7, #7]
 80091da:	4a09      	ldr	r2, [pc, #36]	; (8009200 <disk_ioctl+0x38>)
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	79fa      	ldrb	r2, [r7, #7]
 80091e6:	4906      	ldr	r1, [pc, #24]	; (8009200 <disk_ioctl+0x38>)
 80091e8:	440a      	add	r2, r1
 80091ea:	7a10      	ldrb	r0, [r2, #8]
 80091ec:	79b9      	ldrb	r1, [r7, #6]
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	4798      	blx	r3
 80091f2:	4603      	mov	r3, r0
 80091f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200001d0 	.word	0x200001d0

08009204 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3301      	adds	r3, #1
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009214:	89fb      	ldrh	r3, [r7, #14]
 8009216:	021b      	lsls	r3, r3, #8
 8009218:	b21a      	sxth	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	b21b      	sxth	r3, r3
 8009220:	4313      	orrs	r3, r2
 8009222:	b21b      	sxth	r3, r3
 8009224:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009226:	89fb      	ldrh	r3, [r7, #14]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3303      	adds	r3, #3
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	3202      	adds	r2, #2
 800924c:	7812      	ldrb	r2, [r2, #0]
 800924e:	4313      	orrs	r3, r2
 8009250:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	021b      	lsls	r3, r3, #8
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	3201      	adds	r2, #1
 800925a:	7812      	ldrb	r2, [r2, #0]
 800925c:	4313      	orrs	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	7812      	ldrb	r2, [r2, #0]
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]
	return rv;
 800926c:	68fb      	ldr	r3, [r7, #12]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
	...

0800927c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009284:	2300      	movs	r3, #0
 8009286:	60fb      	str	r3, [r7, #12]
 8009288:	e010      	b.n	80092ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800928a:	4a0d      	ldr	r2, [pc, #52]	; (80092c0 <clear_lock+0x44>)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	011b      	lsls	r3, r3, #4
 8009290:	4413      	add	r3, r2
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	429a      	cmp	r2, r3
 8009298:	d105      	bne.n	80092a6 <clear_lock+0x2a>
 800929a:	4a09      	ldr	r2, [pc, #36]	; (80092c0 <clear_lock+0x44>)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	4413      	add	r3, r2
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3301      	adds	r3, #1
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d9eb      	bls.n	800928a <clear_lock+0xe>
	}
}
 80092b2:	bf00      	nop
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	200001b0 	.word	0x200001b0

080092c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	78db      	ldrb	r3, [r3, #3]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d034      	beq.n	8009342 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	7858      	ldrb	r0, [r3, #1]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092e8:	2301      	movs	r3, #1
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	f7ff ff4c 	bl	8009188 <disk_write>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	73fb      	strb	r3, [r7, #15]
 80092fa:	e022      	b.n	8009342 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	1ad2      	subs	r2, r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	429a      	cmp	r2, r3
 8009310:	d217      	bcs.n	8009342 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	789b      	ldrb	r3, [r3, #2]
 8009316:	613b      	str	r3, [r7, #16]
 8009318:	e010      	b.n	800933c <sync_window+0x78>
					wsect += fs->fsize;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	4413      	add	r3, r2
 8009322:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	7858      	ldrb	r0, [r3, #1]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800932e:	2301      	movs	r3, #1
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	f7ff ff29 	bl	8009188 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	3b01      	subs	r3, #1
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d8eb      	bhi.n	800931a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009342:	7bfb      	ldrb	r3, [r7, #15]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d01b      	beq.n	800939c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff ffad 	bl	80092c4 <sync_window>
 800936a:	4603      	mov	r3, r0
 800936c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d113      	bne.n	800939c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	7858      	ldrb	r0, [r3, #1]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800937e:	2301      	movs	r3, #1
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	f7ff fee1 	bl	8009148 <disk_read>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800938c:	f04f 33ff 	mov.w	r3, #4294967295
 8009390:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009392:	2301      	movs	r3, #1
 8009394:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b087      	sub	sp, #28
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80093ae:	f04f 33ff 	mov.w	r3, #4294967295
 80093b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d031      	beq.n	8009420 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	617b      	str	r3, [r7, #20]
 80093c2:	e002      	b.n	80093ca <get_ldnumber+0x24>
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	3301      	adds	r3, #1
 80093c8:	617b      	str	r3, [r7, #20]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	d903      	bls.n	80093da <get_ldnumber+0x34>
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	2b3a      	cmp	r3, #58	; 0x3a
 80093d8:	d1f4      	bne.n	80093c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b3a      	cmp	r3, #58	; 0x3a
 80093e0:	d11c      	bne.n	800941c <get_ldnumber+0x76>
			tp = *path;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	60fa      	str	r2, [r7, #12]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	3b30      	subs	r3, #48	; 0x30
 80093f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b09      	cmp	r3, #9
 80093f8:	d80e      	bhi.n	8009418 <get_ldnumber+0x72>
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d10a      	bne.n	8009418 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d107      	bne.n	8009418 <get_ldnumber+0x72>
					vol = (int)i;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	3301      	adds	r3, #1
 8009410:	617b      	str	r3, [r7, #20]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	e002      	b.n	8009422 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800941c:	2300      	movs	r3, #0
 800941e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009420:	693b      	ldr	r3, [r7, #16]
}
 8009422:	4618      	mov	r0, r3
 8009424:	371c      	adds	r7, #28
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
	...

08009430 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	70da      	strb	r2, [r3, #3]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f04f 32ff 	mov.w	r2, #4294967295
 8009446:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7ff ff7e 	bl	800934c <move_window>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <check_fs+0x2a>
 8009456:	2304      	movs	r3, #4
 8009458:	e038      	b.n	80094cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3334      	adds	r3, #52	; 0x34
 800945e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009462:	4618      	mov	r0, r3
 8009464:	f7ff fece 	bl	8009204 <ld_word>
 8009468:	4603      	mov	r3, r0
 800946a:	461a      	mov	r2, r3
 800946c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009470:	429a      	cmp	r2, r3
 8009472:	d001      	beq.n	8009478 <check_fs+0x48>
 8009474:	2303      	movs	r3, #3
 8009476:	e029      	b.n	80094cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800947e:	2be9      	cmp	r3, #233	; 0xe9
 8009480:	d009      	beq.n	8009496 <check_fs+0x66>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009488:	2beb      	cmp	r3, #235	; 0xeb
 800948a:	d11e      	bne.n	80094ca <check_fs+0x9a>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009492:	2b90      	cmp	r3, #144	; 0x90
 8009494:	d119      	bne.n	80094ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	3334      	adds	r3, #52	; 0x34
 800949a:	3336      	adds	r3, #54	; 0x36
 800949c:	4618      	mov	r0, r3
 800949e:	f7ff fec9 	bl	8009234 <ld_dword>
 80094a2:	4603      	mov	r3, r0
 80094a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80094a8:	4a0a      	ldr	r2, [pc, #40]	; (80094d4 <check_fs+0xa4>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d101      	bne.n	80094b2 <check_fs+0x82>
 80094ae:	2300      	movs	r3, #0
 80094b0:	e00c      	b.n	80094cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3334      	adds	r3, #52	; 0x34
 80094b6:	3352      	adds	r3, #82	; 0x52
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7ff febb 	bl	8009234 <ld_dword>
 80094be:	4602      	mov	r2, r0
 80094c0:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <check_fs+0xa8>)
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d101      	bne.n	80094ca <check_fs+0x9a>
 80094c6:	2300      	movs	r3, #0
 80094c8:	e000      	b.n	80094cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80094ca:	2302      	movs	r3, #2
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	00544146 	.word	0x00544146
 80094d8:	33544146 	.word	0x33544146

080094dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b096      	sub	sp, #88	; 0x58
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	4613      	mov	r3, r2
 80094e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2200      	movs	r2, #0
 80094ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f7ff ff58 	bl	80093a6 <get_ldnumber>
 80094f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80094f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	da01      	bge.n	8009502 <find_volume+0x26>
 80094fe:	230b      	movs	r3, #11
 8009500:	e265      	b.n	80099ce <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009502:	4ab0      	ldr	r2, [pc, #704]	; (80097c4 <find_volume+0x2e8>)
 8009504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800950a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <find_volume+0x3a>
 8009512:	230c      	movs	r3, #12
 8009514:	e25b      	b.n	80099ce <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800951a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	f023 0301 	bic.w	r3, r3, #1
 8009522:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01a      	beq.n	8009562 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952e:	785b      	ldrb	r3, [r3, #1]
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff fdc9 	bl	80090c8 <disk_status>
 8009536:	4603      	mov	r3, r0
 8009538:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800953c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10c      	bne.n	8009562 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <find_volume+0x82>
 800954e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009552:	f003 0304 	and.w	r3, r3, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800955a:	230a      	movs	r3, #10
 800955c:	e237      	b.n	80099ce <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800955e:	2300      	movs	r3, #0
 8009560:	e235      	b.n	80099ce <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009564:	2200      	movs	r2, #0
 8009566:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956a:	b2da      	uxtb	r2, r3
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fdc1 	bl	80090fc <disk_initialize>
 800957a:	4603      	mov	r3, r0
 800957c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800958c:	2303      	movs	r3, #3
 800958e:	e21e      	b.n	80099ce <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <find_volume+0xca>
 8009596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800959a:	f003 0304 	and.w	r3, r3, #4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80095a2:	230a      	movs	r3, #10
 80095a4:	e213      	b.n	80099ce <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80095a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a8:	7858      	ldrb	r0, [r3, #1]
 80095aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ac:	330c      	adds	r3, #12
 80095ae:	461a      	mov	r2, r3
 80095b0:	2102      	movs	r1, #2
 80095b2:	f7ff fe09 	bl	80091c8 <disk_ioctl>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <find_volume+0xe4>
 80095bc:	2301      	movs	r3, #1
 80095be:	e206      	b.n	80099ce <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	899b      	ldrh	r3, [r3, #12]
 80095c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095c8:	d80d      	bhi.n	80095e6 <find_volume+0x10a>
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	899b      	ldrh	r3, [r3, #12]
 80095ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095d2:	d308      	bcc.n	80095e6 <find_volume+0x10a>
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	899b      	ldrh	r3, [r3, #12]
 80095d8:	461a      	mov	r2, r3
 80095da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095dc:	899b      	ldrh	r3, [r3, #12]
 80095de:	3b01      	subs	r3, #1
 80095e0:	4013      	ands	r3, r2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <find_volume+0x10e>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e1f1      	b.n	80099ce <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80095ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095f2:	f7ff ff1d 	bl	8009430 <check_fs>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80095fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009600:	2b02      	cmp	r3, #2
 8009602:	d14b      	bne.n	800969c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009604:	2300      	movs	r3, #0
 8009606:	643b      	str	r3, [r7, #64]	; 0x40
 8009608:	e01f      	b.n	800964a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009612:	011b      	lsls	r3, r3, #4
 8009614:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009618:	4413      	add	r3, r2
 800961a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	3304      	adds	r3, #4
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d006      	beq.n	8009634 <find_volume+0x158>
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	3308      	adds	r3, #8
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff fe02 	bl	8009234 <ld_dword>
 8009630:	4602      	mov	r2, r0
 8009632:	e000      	b.n	8009636 <find_volume+0x15a>
 8009634:	2200      	movs	r2, #0
 8009636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800963e:	440b      	add	r3, r1
 8009640:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009646:	3301      	adds	r3, #1
 8009648:	643b      	str	r3, [r7, #64]	; 0x40
 800964a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800964c:	2b03      	cmp	r3, #3
 800964e:	d9dc      	bls.n	800960a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009650:	2300      	movs	r3, #0
 8009652:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <find_volume+0x184>
 800965a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800965c:	3b01      	subs	r3, #1
 800965e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009668:	4413      	add	r3, r2
 800966a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800966e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009672:	2b00      	cmp	r3, #0
 8009674:	d005      	beq.n	8009682 <find_volume+0x1a6>
 8009676:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009678:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800967a:	f7ff fed9 	bl	8009430 <check_fs>
 800967e:	4603      	mov	r3, r0
 8009680:	e000      	b.n	8009684 <find_volume+0x1a8>
 8009682:	2303      	movs	r3, #3
 8009684:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009688:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800968c:	2b01      	cmp	r3, #1
 800968e:	d905      	bls.n	800969c <find_volume+0x1c0>
 8009690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009692:	3301      	adds	r3, #1
 8009694:	643b      	str	r3, [r7, #64]	; 0x40
 8009696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009698:	2b03      	cmp	r3, #3
 800969a:	d9e1      	bls.n	8009660 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800969c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	d101      	bne.n	80096a8 <find_volume+0x1cc>
 80096a4:	2301      	movs	r3, #1
 80096a6:	e192      	b.n	80099ce <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80096a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d901      	bls.n	80096b4 <find_volume+0x1d8>
 80096b0:	230d      	movs	r3, #13
 80096b2:	e18c      	b.n	80099ce <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	3334      	adds	r3, #52	; 0x34
 80096b8:	330b      	adds	r3, #11
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7ff fda2 	bl	8009204 <ld_word>
 80096c0:	4603      	mov	r3, r0
 80096c2:	461a      	mov	r2, r3
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	899b      	ldrh	r3, [r3, #12]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d001      	beq.n	80096d0 <find_volume+0x1f4>
 80096cc:	230d      	movs	r3, #13
 80096ce:	e17e      	b.n	80099ce <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	3334      	adds	r3, #52	; 0x34
 80096d4:	3316      	adds	r3, #22
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7ff fd94 	bl	8009204 <ld_word>
 80096dc:	4603      	mov	r3, r0
 80096de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80096e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d106      	bne.n	80096f4 <find_volume+0x218>
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	3334      	adds	r3, #52	; 0x34
 80096ea:	3324      	adds	r3, #36	; 0x24
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7ff fda1 	bl	8009234 <ld_dword>
 80096f2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096f8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009702:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	789b      	ldrb	r3, [r3, #2]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d005      	beq.n	8009718 <find_volume+0x23c>
 800970c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970e:	789b      	ldrb	r3, [r3, #2]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d001      	beq.n	8009718 <find_volume+0x23c>
 8009714:	230d      	movs	r3, #13
 8009716:	e15a      	b.n	80099ce <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	789b      	ldrb	r3, [r3, #2]
 800971c:	461a      	mov	r2, r3
 800971e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009720:	fb02 f303 	mul.w	r3, r2, r3
 8009724:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800972c:	b29a      	uxth	r2, r3
 800972e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009730:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	895b      	ldrh	r3, [r3, #10]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d008      	beq.n	800974c <find_volume+0x270>
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	895b      	ldrh	r3, [r3, #10]
 800973e:	461a      	mov	r2, r3
 8009740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009742:	895b      	ldrh	r3, [r3, #10]
 8009744:	3b01      	subs	r3, #1
 8009746:	4013      	ands	r3, r2
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <find_volume+0x274>
 800974c:	230d      	movs	r3, #13
 800974e:	e13e      	b.n	80099ce <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009752:	3334      	adds	r3, #52	; 0x34
 8009754:	3311      	adds	r3, #17
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff fd54 	bl	8009204 <ld_word>
 800975c:	4603      	mov	r3, r0
 800975e:	461a      	mov	r2, r3
 8009760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009762:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	891b      	ldrh	r3, [r3, #8]
 8009768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800976a:	8992      	ldrh	r2, [r2, #12]
 800976c:	0952      	lsrs	r2, r2, #5
 800976e:	b292      	uxth	r2, r2
 8009770:	fbb3 f1f2 	udiv	r1, r3, r2
 8009774:	fb02 f201 	mul.w	r2, r2, r1
 8009778:	1a9b      	subs	r3, r3, r2
 800977a:	b29b      	uxth	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d001      	beq.n	8009784 <find_volume+0x2a8>
 8009780:	230d      	movs	r3, #13
 8009782:	e124      	b.n	80099ce <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	3334      	adds	r3, #52	; 0x34
 8009788:	3313      	adds	r3, #19
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff fd3a 	bl	8009204 <ld_word>
 8009790:	4603      	mov	r3, r0
 8009792:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009796:	2b00      	cmp	r3, #0
 8009798:	d106      	bne.n	80097a8 <find_volume+0x2cc>
 800979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979c:	3334      	adds	r3, #52	; 0x34
 800979e:	3320      	adds	r3, #32
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff fd47 	bl	8009234 <ld_dword>
 80097a6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80097a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097aa:	3334      	adds	r3, #52	; 0x34
 80097ac:	330e      	adds	r3, #14
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff fd28 	bl	8009204 <ld_word>
 80097b4:	4603      	mov	r3, r0
 80097b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80097b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d104      	bne.n	80097c8 <find_volume+0x2ec>
 80097be:	230d      	movs	r3, #13
 80097c0:	e105      	b.n	80099ce <find_volume+0x4f2>
 80097c2:	bf00      	nop
 80097c4:	200001a8 	.word	0x200001a8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80097c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80097ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097cc:	4413      	add	r3, r2
 80097ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097d0:	8911      	ldrh	r1, [r2, #8]
 80097d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097d4:	8992      	ldrh	r2, [r2, #12]
 80097d6:	0952      	lsrs	r2, r2, #5
 80097d8:	b292      	uxth	r2, r2
 80097da:	fbb1 f2f2 	udiv	r2, r1, r2
 80097de:	b292      	uxth	r2, r2
 80097e0:	4413      	add	r3, r2
 80097e2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80097e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d201      	bcs.n	80097f0 <find_volume+0x314>
 80097ec:	230d      	movs	r3, #13
 80097ee:	e0ee      	b.n	80099ce <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80097f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097f8:	8952      	ldrh	r2, [r2, #10]
 80097fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80097fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <find_volume+0x32e>
 8009806:	230d      	movs	r3, #13
 8009808:	e0e1      	b.n	80099ce <find_volume+0x4f2>
		fmt = FS_FAT32;
 800980a:	2303      	movs	r3, #3
 800980c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009816:	4293      	cmp	r3, r2
 8009818:	d802      	bhi.n	8009820 <find_volume+0x344>
 800981a:	2302      	movs	r3, #2
 800981c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009826:	4293      	cmp	r3, r2
 8009828:	d802      	bhi.n	8009830 <find_volume+0x354>
 800982a:	2301      	movs	r3, #1
 800982c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	1c9a      	adds	r2, r3, #2
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800983c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800983e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009842:	441a      	add	r2, r3
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009848:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	441a      	add	r2, r3
 800984e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009850:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009852:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009856:	2b03      	cmp	r3, #3
 8009858:	d11e      	bne.n	8009898 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800985a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985c:	3334      	adds	r3, #52	; 0x34
 800985e:	332a      	adds	r3, #42	; 0x2a
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff fccf 	bl	8009204 <ld_word>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <find_volume+0x394>
 800986c:	230d      	movs	r3, #13
 800986e:	e0ae      	b.n	80099ce <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009872:	891b      	ldrh	r3, [r3, #8]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <find_volume+0x3a0>
 8009878:	230d      	movs	r3, #13
 800987a:	e0a8      	b.n	80099ce <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	3334      	adds	r3, #52	; 0x34
 8009880:	332c      	adds	r3, #44	; 0x2c
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff fcd6 	bl	8009234 <ld_dword>
 8009888:	4602      	mov	r2, r0
 800988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800988e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	647b      	str	r3, [r7, #68]	; 0x44
 8009896:	e01f      	b.n	80098d8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	891b      	ldrh	r3, [r3, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <find_volume+0x3c8>
 80098a0:	230d      	movs	r3, #13
 80098a2:	e094      	b.n	80099ce <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098aa:	441a      	add	r2, r3
 80098ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ae:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80098b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d103      	bne.n	80098c0 <find_volume+0x3e4>
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	e00a      	b.n	80098d6 <find_volume+0x3fa>
 80098c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c2:	699a      	ldr	r2, [r3, #24]
 80098c4:	4613      	mov	r3, r2
 80098c6:	005b      	lsls	r3, r3, #1
 80098c8:	4413      	add	r3, r2
 80098ca:	085a      	lsrs	r2, r3, #1
 80098cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80098d6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	69da      	ldr	r2, [r3, #28]
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	899b      	ldrh	r3, [r3, #12]
 80098e0:	4619      	mov	r1, r3
 80098e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e4:	440b      	add	r3, r1
 80098e6:	3b01      	subs	r3, #1
 80098e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098ea:	8989      	ldrh	r1, [r1, #12]
 80098ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d201      	bcs.n	80098f8 <find_volume+0x41c>
 80098f4:	230d      	movs	r3, #13
 80098f6:	e06a      	b.n	80099ce <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80098f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fa:	f04f 32ff 	mov.w	r2, #4294967295
 80098fe:	615a      	str	r2, [r3, #20]
 8009900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009902:	695a      	ldr	r2, [r3, #20]
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	2280      	movs	r2, #128	; 0x80
 800990c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800990e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009912:	2b03      	cmp	r3, #3
 8009914:	d149      	bne.n	80099aa <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	3334      	adds	r3, #52	; 0x34
 800991a:	3330      	adds	r3, #48	; 0x30
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff fc71 	bl	8009204 <ld_word>
 8009922:	4603      	mov	r3, r0
 8009924:	2b01      	cmp	r3, #1
 8009926:	d140      	bne.n	80099aa <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800992a:	3301      	adds	r3, #1
 800992c:	4619      	mov	r1, r3
 800992e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009930:	f7ff fd0c 	bl	800934c <move_window>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d137      	bne.n	80099aa <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	2200      	movs	r2, #0
 800993e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	3334      	adds	r3, #52	; 0x34
 8009944:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fc5b 	bl	8009204 <ld_word>
 800994e:	4603      	mov	r3, r0
 8009950:	461a      	mov	r2, r3
 8009952:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009956:	429a      	cmp	r2, r3
 8009958:	d127      	bne.n	80099aa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	3334      	adds	r3, #52	; 0x34
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff fc68 	bl	8009234 <ld_dword>
 8009964:	4602      	mov	r2, r0
 8009966:	4b1c      	ldr	r3, [pc, #112]	; (80099d8 <find_volume+0x4fc>)
 8009968:	429a      	cmp	r2, r3
 800996a:	d11e      	bne.n	80099aa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800996c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996e:	3334      	adds	r3, #52	; 0x34
 8009970:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff fc5d 	bl	8009234 <ld_dword>
 800997a:	4602      	mov	r2, r0
 800997c:	4b17      	ldr	r3, [pc, #92]	; (80099dc <find_volume+0x500>)
 800997e:	429a      	cmp	r2, r3
 8009980:	d113      	bne.n	80099aa <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	3334      	adds	r3, #52	; 0x34
 8009986:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff fc52 	bl	8009234 <ld_dword>
 8009990:	4602      	mov	r2, r0
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009998:	3334      	adds	r3, #52	; 0x34
 800999a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800999e:	4618      	mov	r0, r3
 80099a0:	f7ff fc48 	bl	8009234 <ld_dword>
 80099a4:	4602      	mov	r2, r0
 80099a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80099aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80099b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80099b2:	4b0b      	ldr	r3, [pc, #44]	; (80099e0 <find_volume+0x504>)
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	3301      	adds	r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <find_volume+0x504>)
 80099bc:	801a      	strh	r2, [r3, #0]
 80099be:	4b08      	ldr	r3, [pc, #32]	; (80099e0 <find_volume+0x504>)
 80099c0:	881a      	ldrh	r2, [r3, #0]
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80099c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099c8:	f7ff fc58 	bl	800927c <clear_lock>
#endif
	return FR_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3758      	adds	r7, #88	; 0x58
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	41615252 	.word	0x41615252
 80099dc:	61417272 	.word	0x61417272
 80099e0:	200001ac 	.word	0x200001ac

080099e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	4613      	mov	r3, r2
 80099f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80099f6:	f107 0310 	add.w	r3, r7, #16
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff fcd3 	bl	80093a6 <get_ldnumber>
 8009a00:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	da01      	bge.n	8009a0c <f_mount+0x28>
 8009a08:	230b      	movs	r3, #11
 8009a0a:	e02b      	b.n	8009a64 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a0c:	4a17      	ldr	r2, [pc, #92]	; (8009a6c <f_mount+0x88>)
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a14:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d005      	beq.n	8009a28 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009a1c:	69b8      	ldr	r0, [r7, #24]
 8009a1e:	f7ff fc2d 	bl	800927c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	2200      	movs	r2, #0
 8009a26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	490d      	ldr	r1, [pc, #52]	; (8009a6c <f_mount+0x88>)
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <f_mount+0x66>
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d001      	beq.n	8009a4e <f_mount+0x6a>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e00a      	b.n	8009a64 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009a4e:	f107 010c 	add.w	r1, r7, #12
 8009a52:	f107 0308 	add.w	r3, r7, #8
 8009a56:	2200      	movs	r2, #0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff fd3f 	bl	80094dc <find_volume>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3720      	adds	r7, #32
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	200001a8 	.word	0x200001a8

08009a70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009a86:	4b1f      	ldr	r3, [pc, #124]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009a88:	7a5b      	ldrb	r3, [r3, #9]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d131      	bne.n	8009af4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a90:	4b1c      	ldr	r3, [pc, #112]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009a92:	7a5b      	ldrb	r3, [r3, #9]
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	461a      	mov	r2, r3
 8009a98:	4b1a      	ldr	r3, [pc, #104]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009a9e:	4b19      	ldr	r3, [pc, #100]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009aa0:	7a5b      	ldrb	r3, [r3, #9]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	4a17      	ldr	r2, [pc, #92]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009aae:	4b15      	ldr	r3, [pc, #84]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009ab0:	7a5b      	ldrb	r3, [r3, #9]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009ab8:	4413      	add	r3, r2
 8009aba:	79fa      	ldrb	r2, [r7, #7]
 8009abc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009abe:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009ac0:	7a5b      	ldrb	r3, [r3, #9]
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	1c5a      	adds	r2, r3, #1
 8009ac6:	b2d1      	uxtb	r1, r2
 8009ac8:	4a0e      	ldr	r2, [pc, #56]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009aca:	7251      	strb	r1, [r2, #9]
 8009acc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009ace:	7dbb      	ldrb	r3, [r7, #22]
 8009ad0:	3330      	adds	r3, #48	; 0x30
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	3301      	adds	r3, #1
 8009adc:	223a      	movs	r2, #58	; 0x3a
 8009ade:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	3302      	adds	r3, #2
 8009ae4:	222f      	movs	r2, #47	; 0x2f
 8009ae6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	3303      	adds	r3, #3
 8009aec:	2200      	movs	r2, #0
 8009aee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	371c      	adds	r7, #28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	200001d0 	.word	0x200001d0

08009b08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b12:	2200      	movs	r2, #0
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff ffaa 	bl	8009a70 <FATFS_LinkDriverEx>
 8009b1c:	4603      	mov	r3, r0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	4912      	ldr	r1, [pc, #72]	; (8009b78 <MX_USB_DEVICE_Init+0x50>)
 8009b30:	4812      	ldr	r0, [pc, #72]	; (8009b7c <MX_USB_DEVICE_Init+0x54>)
 8009b32:	f7fe fa8c 	bl	800804e <USBD_Init>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b3c:	f7f6 fe28 	bl	8000790 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8009b40:	490f      	ldr	r1, [pc, #60]	; (8009b80 <MX_USB_DEVICE_Init+0x58>)
 8009b42:	480e      	ldr	r0, [pc, #56]	; (8009b7c <MX_USB_DEVICE_Init+0x54>)
 8009b44:	f7fe faae 	bl	80080a4 <USBD_RegisterClass>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b4e:	f7f6 fe1f 	bl	8000790 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8009b52:	490c      	ldr	r1, [pc, #48]	; (8009b84 <MX_USB_DEVICE_Init+0x5c>)
 8009b54:	4809      	ldr	r0, [pc, #36]	; (8009b7c <MX_USB_DEVICE_Init+0x54>)
 8009b56:	f7fd fa55 	bl	8007004 <USBD_MSC_RegisterStorage>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b60:	f7f6 fe16 	bl	8000790 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b64:	4805      	ldr	r0, [pc, #20]	; (8009b7c <MX_USB_DEVICE_Init+0x54>)
 8009b66:	f7fe fab7 	bl	80080d8 <USBD_Start>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b70:	f7f6 fe0e 	bl	8000790 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b74:	bf00      	nop
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	200000b0 	.word	0x200000b0
 8009b7c:	200043a0 	.word	0x200043a0
 8009b80:	2000000c 	.word	0x2000000c
 8009b84:	20000100 	.word	0x20000100

08009b88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	6039      	str	r1, [r7, #0]
 8009b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2212      	movs	r2, #18
 8009b98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b9a:	4b03      	ldr	r3, [pc, #12]	; (8009ba8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	200000cc 	.word	0x200000cc

08009bac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	2204      	movs	r2, #4
 8009bbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bbe:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	200000e0 	.word	0x200000e0

08009bd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	6039      	str	r1, [r7, #0]
 8009bda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bdc:	79fb      	ldrb	r3, [r7, #7]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d105      	bne.n	8009bee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	4907      	ldr	r1, [pc, #28]	; (8009c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8009be6:	4808      	ldr	r0, [pc, #32]	; (8009c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8009be8:	f7ff f9ae 	bl	8008f48 <USBD_GetString>
 8009bec:	e004      	b.n	8009bf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	4904      	ldr	r1, [pc, #16]	; (8009c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bf2:	4805      	ldr	r0, [pc, #20]	; (8009c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bf4:	f7ff f9a8 	bl	8008f48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bf8:	4b02      	ldr	r3, [pc, #8]	; (8009c04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	2000463c 	.word	0x2000463c
 8009c08:	0800a710 	.word	0x0800a710

08009c0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	4904      	ldr	r1, [pc, #16]	; (8009c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c1c:	4804      	ldr	r0, [pc, #16]	; (8009c30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c1e:	f7ff f993 	bl	8008f48 <USBD_GetString>
  return USBD_StrDesc;
 8009c22:	4b02      	ldr	r3, [pc, #8]	; (8009c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	2000463c 	.word	0x2000463c
 8009c30:	0800a724 	.word	0x0800a724

08009c34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	6039      	str	r1, [r7, #0]
 8009c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	221a      	movs	r2, #26
 8009c44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c46:	f000 f843 	bl	8009cd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c4a:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	200000e4 	.word	0x200000e4

08009c58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	6039      	str	r1, [r7, #0]
 8009c62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c64:	79fb      	ldrb	r3, [r7, #7]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d105      	bne.n	8009c76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	4907      	ldr	r1, [pc, #28]	; (8009c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c6e:	4808      	ldr	r0, [pc, #32]	; (8009c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c70:	f7ff f96a 	bl	8008f48 <USBD_GetString>
 8009c74:	e004      	b.n	8009c80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	4904      	ldr	r1, [pc, #16]	; (8009c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c7a:	4805      	ldr	r0, [pc, #20]	; (8009c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c7c:	f7ff f964 	bl	8008f48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c80:	4b02      	ldr	r3, [pc, #8]	; (8009c8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	2000463c 	.word	0x2000463c
 8009c90:	0800a738 	.word	0x0800a738

08009c94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	6039      	str	r1, [r7, #0]
 8009c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ca0:	79fb      	ldrb	r3, [r7, #7]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d105      	bne.n	8009cb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	4907      	ldr	r1, [pc, #28]	; (8009cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009caa:	4808      	ldr	r0, [pc, #32]	; (8009ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cac:	f7ff f94c 	bl	8008f48 <USBD_GetString>
 8009cb0:	e004      	b.n	8009cbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	4904      	ldr	r1, [pc, #16]	; (8009cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cb6:	4805      	ldr	r0, [pc, #20]	; (8009ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cb8:	f7ff f946 	bl	8008f48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cbc:	4b02      	ldr	r3, [pc, #8]	; (8009cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	2000463c 	.word	0x2000463c
 8009ccc:	0800a744 	.word	0x0800a744

08009cd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <Get_SerialNum+0x44>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cdc:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <Get_SerialNum+0x48>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ce2:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <Get_SerialNum+0x4c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4413      	add	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cf6:	2208      	movs	r2, #8
 8009cf8:	4909      	ldr	r1, [pc, #36]	; (8009d20 <Get_SerialNum+0x50>)
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 f814 	bl	8009d28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d00:	2204      	movs	r2, #4
 8009d02:	4908      	ldr	r1, [pc, #32]	; (8009d24 <Get_SerialNum+0x54>)
 8009d04:	68b8      	ldr	r0, [r7, #8]
 8009d06:	f000 f80f 	bl	8009d28 <IntToUnicode>
  }
}
 8009d0a:	bf00      	nop
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	1fff7a10 	.word	0x1fff7a10
 8009d18:	1fff7a14 	.word	0x1fff7a14
 8009d1c:	1fff7a18 	.word	0x1fff7a18
 8009d20:	200000e6 	.word	0x200000e6
 8009d24:	200000f6 	.word	0x200000f6

08009d28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	4613      	mov	r3, r2
 8009d34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	75fb      	strb	r3, [r7, #23]
 8009d3e:	e027      	b.n	8009d90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	0f1b      	lsrs	r3, r3, #28
 8009d44:	2b09      	cmp	r3, #9
 8009d46:	d80b      	bhi.n	8009d60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	0f1b      	lsrs	r3, r3, #28
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	4619      	mov	r1, r3
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	440b      	add	r3, r1
 8009d58:	3230      	adds	r2, #48	; 0x30
 8009d5a:	b2d2      	uxtb	r2, r2
 8009d5c:	701a      	strb	r2, [r3, #0]
 8009d5e:	e00a      	b.n	8009d76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	0f1b      	lsrs	r3, r3, #28
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	440b      	add	r3, r1
 8009d70:	3237      	adds	r2, #55	; 0x37
 8009d72:	b2d2      	uxtb	r2, r2
 8009d74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	011b      	lsls	r3, r3, #4
 8009d7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	3301      	adds	r3, #1
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	4413      	add	r3, r2
 8009d86:	2200      	movs	r2, #0
 8009d88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	75fb      	strb	r3, [r7, #23]
 8009d90:	7dfa      	ldrb	r2, [r7, #23]
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d3d3      	bcc.n	8009d40 <IntToUnicode+0x18>
  }
}
 8009d98:	bf00      	nop
 8009d9a:	371c      	adds	r7, #28
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8009dae:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd, &SDCardInfo) == HAL_OK){
 8009dca:	490b      	ldr	r1, [pc, #44]	; (8009df8 <STORAGE_GetCapacity_FS+0x3c>)
 8009dcc:	480b      	ldr	r0, [pc, #44]	; (8009dfc <STORAGE_GetCapacity_FS+0x40>)
 8009dce:	f7f9 fdb7 	bl	8003940 <HAL_SD_GetCardInfo>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10a      	bne.n	8009dee <STORAGE_GetCapacity_FS+0x32>
	  *block_num  = SDCardInfo.BlockNbr;
 8009dd8:	4b07      	ldr	r3, [pc, #28]	; (8009df8 <STORAGE_GetCapacity_FS+0x3c>)
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	601a      	str	r2, [r3, #0]
	  *block_size = SDCardInfo.BlockSize;
 8009de0:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <STORAGE_GetCapacity_FS+0x3c>)
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	801a      	strh	r2, [r3, #0]
	  return (USBD_OK);
 8009dea:	2300      	movs	r3, #0
 8009dec:	e000      	b.n	8009df0 <STORAGE_GetCapacity_FS+0x34>
  }
  else{
	  return USBD_FAIL;
 8009dee:	2302      	movs	r3, #2
  }
  /* USER CODE END 3 */
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20001218 	.word	0x20001218
 8009dfc:	2000226c 	.word	0x2000226c

08009e00 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e0a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009e22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	60b9      	str	r1, [r7, #8]
 8009e38:	607a      	str	r2, [r7, #4]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]
 8009e40:	4613      	mov	r3, r2
 8009e42:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  if(HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, 10) == HAL_OK){
 8009e44:	89ba      	ldrh	r2, [r7, #12]
 8009e46:	230a      	movs	r3, #10
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	68b9      	ldr	r1, [r7, #8]
 8009e50:	4806      	ldr	r0, [pc, #24]	; (8009e6c <STORAGE_Read_FS+0x3c>)
 8009e52:	f7f9 f835 	bl	8002ec0 <HAL_SD_ReadBlocks>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <STORAGE_Read_FS+0x30>
	  return (USBD_OK);
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e000      	b.n	8009e62 <STORAGE_Read_FS+0x32>
  }
  else return USBD_FAIL;
 8009e60:	2302      	movs	r3, #2
  /* USER CODE END 6 */
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	2000226c 	.word	0x2000226c

08009e70 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af02      	add	r7, sp, #8
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	607a      	str	r2, [r7, #4]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]
 8009e80:	4613      	mov	r3, r2
 8009e82:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  if(HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, 10) == HAL_OK){
 8009e84:	89ba      	ldrh	r2, [r7, #12]
 8009e86:	230a      	movs	r3, #10
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	4806      	ldr	r0, [pc, #24]	; (8009eac <STORAGE_Write_FS+0x3c>)
 8009e92:	f7f9 fa0f 	bl	80032b4 <HAL_SD_WriteBlocks>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <STORAGE_Write_FS+0x30>
	  return (USBD_OK);
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e000      	b.n	8009ea2 <STORAGE_Write_FS+0x32>
  }
  else return USBD_FAIL;
 8009ea0:	2302      	movs	r3, #2
  /* USER CODE END 7 */
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	2000226c 	.word	0x2000226c

08009eb0 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8009eb4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08a      	sub	sp, #40	; 0x28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ec8:	f107 0314 	add.w	r3, r7, #20
 8009ecc:	2200      	movs	r2, #0
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	605a      	str	r2, [r3, #4]
 8009ed2:	609a      	str	r2, [r3, #8]
 8009ed4:	60da      	str	r2, [r3, #12]
 8009ed6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ee0:	d13a      	bne.n	8009f58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	613b      	str	r3, [r7, #16]
 8009ee6:	4b1e      	ldr	r3, [pc, #120]	; (8009f60 <HAL_PCD_MspInit+0xa0>)
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eea:	4a1d      	ldr	r2, [pc, #116]	; (8009f60 <HAL_PCD_MspInit+0xa0>)
 8009eec:	f043 0301 	orr.w	r3, r3, #1
 8009ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ef2:	4b1b      	ldr	r3, [pc, #108]	; (8009f60 <HAL_PCD_MspInit+0xa0>)
 8009ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	613b      	str	r3, [r7, #16]
 8009efc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009efe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f04:	2302      	movs	r3, #2
 8009f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f10:	230a      	movs	r3, #10
 8009f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f14:	f107 0314 	add.w	r3, r7, #20
 8009f18:	4619      	mov	r1, r3
 8009f1a:	4812      	ldr	r0, [pc, #72]	; (8009f64 <HAL_PCD_MspInit+0xa4>)
 8009f1c:	f7f6 ff74 	bl	8000e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f20:	4b0f      	ldr	r3, [pc, #60]	; (8009f60 <HAL_PCD_MspInit+0xa0>)
 8009f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f24:	4a0e      	ldr	r2, [pc, #56]	; (8009f60 <HAL_PCD_MspInit+0xa0>)
 8009f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f2a:	6353      	str	r3, [r2, #52]	; 0x34
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60fb      	str	r3, [r7, #12]
 8009f30:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <HAL_PCD_MspInit+0xa0>)
 8009f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f34:	4a0a      	ldr	r2, [pc, #40]	; (8009f60 <HAL_PCD_MspInit+0xa0>)
 8009f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f3a:	6453      	str	r3, [r2, #68]	; 0x44
 8009f3c:	4b08      	ldr	r3, [pc, #32]	; (8009f60 <HAL_PCD_MspInit+0xa0>)
 8009f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f44:	60fb      	str	r3, [r7, #12]
 8009f46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f48:	2200      	movs	r2, #0
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	2043      	movs	r0, #67	; 0x43
 8009f4e:	f7f6 ff24 	bl	8000d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f52:	2043      	movs	r0, #67	; 0x43
 8009f54:	f7f6 ff3d 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f58:	bf00      	nop
 8009f5a:	3728      	adds	r7, #40	; 0x28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	40023800 	.word	0x40023800
 8009f64:	40020000 	.word	0x40020000

08009f68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	4610      	mov	r0, r2
 8009f80:	f7fe f8f3 	bl	800816a <USBD_LL_SetupStage>
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009f9e:	78fa      	ldrb	r2, [r7, #3]
 8009fa0:	6879      	ldr	r1, [r7, #4]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	00db      	lsls	r3, r3, #3
 8009fa6:	1a9b      	subs	r3, r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	440b      	add	r3, r1
 8009fac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	78fb      	ldrb	r3, [r7, #3]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	f7fe f923 	bl	8008200 <USBD_LL_DataOutStage>
}
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b082      	sub	sp, #8
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009fd4:	78fa      	ldrb	r2, [r7, #3]
 8009fd6:	6879      	ldr	r1, [r7, #4]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	1a9b      	subs	r3, r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	440b      	add	r3, r1
 8009fe2:	3348      	adds	r3, #72	; 0x48
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	78fb      	ldrb	r3, [r7, #3]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	f7fe f97a 	bl	80082e2 <USBD_LL_DataInStage>
}
 8009fee:	bf00      	nop
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a004:	4618      	mov	r0, r3
 800a006:	f7fe fa88 	bl	800851a <USBD_LL_SOF>
}
 800a00a:	bf00      	nop
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a01a:	2301      	movs	r3, #1
 800a01c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d102      	bne.n	800a02c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a026:	2300      	movs	r3, #0
 800a028:	73fb      	strb	r3, [r7, #15]
 800a02a:	e008      	b.n	800a03e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	2b02      	cmp	r3, #2
 800a032:	d102      	bne.n	800a03a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a034:	2301      	movs	r3, #1
 800a036:	73fb      	strb	r3, [r7, #15]
 800a038:	e001      	b.n	800a03e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a03a:	f7f6 fba9 	bl	8000790 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a044:	7bfa      	ldrb	r2, [r7, #15]
 800a046:	4611      	mov	r1, r2
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fe fa30 	bl	80084ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a054:	4618      	mov	r0, r3
 800a056:	f7fe f9e9 	bl	800842c <USBD_LL_Reset>
}
 800a05a:	bf00      	nop
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fa2b 	bl	80084ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	6812      	ldr	r2, [r2, #0]
 800a086:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a08a:	f043 0301 	orr.w	r3, r3, #1
 800a08e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a1b      	ldr	r3, [r3, #32]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d005      	beq.n	800a0a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a098:	4b04      	ldr	r3, [pc, #16]	; (800a0ac <HAL_PCD_SuspendCallback+0x48>)
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	4a03      	ldr	r2, [pc, #12]	; (800a0ac <HAL_PCD_SuspendCallback+0x48>)
 800a09e:	f043 0306 	orr.w	r3, r3, #6
 800a0a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	e000ed00 	.word	0xe000ed00

0800a0b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fa1a 	bl	80084f8 <USBD_LL_Resume>
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0de:	78fa      	ldrb	r2, [r7, #3]
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fe fa40 	bl	8008568 <USBD_LL_IsoOUTIncomplete>
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a102:	78fa      	ldrb	r2, [r7, #3]
 800a104:	4611      	mov	r1, r2
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe fa21 	bl	800854e <USBD_LL_IsoINIncomplete>
}
 800a10c:	bf00      	nop
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fa2d 	bl	8008582 <USBD_LL_DevConnected>
}
 800a128:	bf00      	nop
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fa2a 	bl	8008598 <USBD_LL_DevDisconnected>
}
 800a144:	bf00      	nop
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d13c      	bne.n	800a1d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a15c:	4a20      	ldr	r2, [pc, #128]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a1e      	ldr	r2, [pc, #120]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a168:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a16c:	4b1c      	ldr	r3, [pc, #112]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a16e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a172:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a174:	4b1a      	ldr	r3, [pc, #104]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a176:	2204      	movs	r2, #4
 800a178:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a17a:	4b19      	ldr	r3, [pc, #100]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a17c:	2202      	movs	r2, #2
 800a17e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a180:	4b17      	ldr	r3, [pc, #92]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a182:	2200      	movs	r2, #0
 800a184:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a186:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a188:	2202      	movs	r2, #2
 800a18a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a18c:	4b14      	ldr	r3, [pc, #80]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a18e:	2200      	movs	r2, #0
 800a190:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a192:	4b13      	ldr	r3, [pc, #76]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a194:	2200      	movs	r2, #0
 800a196:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a198:	4b11      	ldr	r3, [pc, #68]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a19e:	4b10      	ldr	r3, [pc, #64]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a1a4:	4b0e      	ldr	r3, [pc, #56]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a1aa:	480d      	ldr	r0, [pc, #52]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a1ac:	f7f6 ffdf 	bl	800116e <HAL_PCD_Init>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a1b6:	f7f6 faeb 	bl	8000790 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a1ba:	2180      	movs	r1, #128	; 0x80
 800a1bc:	4808      	ldr	r0, [pc, #32]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a1be:	f7f8 f970 	bl	80024a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a1c2:	2240      	movs	r2, #64	; 0x40
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	4806      	ldr	r0, [pc, #24]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a1c8:	f7f8 f924 	bl	8002414 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a1cc:	2280      	movs	r2, #128	; 0x80
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	4803      	ldr	r0, [pc, #12]	; (800a1e0 <USBD_LL_Init+0x94>)
 800a1d2:	f7f8 f91f 	bl	8002414 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	2000483c 	.word	0x2000483c

0800a1e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7f7 f8d4 	bl	80013a8 <HAL_PCD_Start>
 800a200:	4603      	mov	r3, r0
 800a202:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	4618      	mov	r0, r3
 800a208:	f000 f94e 	bl	800a4a8 <USBD_Get_USB_Status>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a210:	7bbb      	ldrb	r3, [r7, #14]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b084      	sub	sp, #16
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	4608      	mov	r0, r1
 800a224:	4611      	mov	r1, r2
 800a226:	461a      	mov	r2, r3
 800a228:	4603      	mov	r3, r0
 800a22a:	70fb      	strb	r3, [r7, #3]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70bb      	strb	r3, [r7, #2]
 800a230:	4613      	mov	r3, r2
 800a232:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a242:	78bb      	ldrb	r3, [r7, #2]
 800a244:	883a      	ldrh	r2, [r7, #0]
 800a246:	78f9      	ldrb	r1, [r7, #3]
 800a248:	f7f7 fca9 	bl	8001b9e <HAL_PCD_EP_Open>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	4618      	mov	r0, r3
 800a254:	f000 f928 	bl	800a4a8 <USBD_Get_USB_Status>
 800a258:	4603      	mov	r3, r0
 800a25a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a25c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	460b      	mov	r3, r1
 800a270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a280:	78fa      	ldrb	r2, [r7, #3]
 800a282:	4611      	mov	r1, r2
 800a284:	4618      	mov	r0, r3
 800a286:	f7f7 fcf2 	bl	8001c6e <HAL_PCD_EP_Close>
 800a28a:	4603      	mov	r3, r0
 800a28c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	4618      	mov	r0, r3
 800a292:	f000 f909 	bl	800a4a8 <USBD_Get_USB_Status>
 800a296:	4603      	mov	r3, r0
 800a298:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800a29a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a2be:	78fa      	ldrb	r2, [r7, #3]
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7f7 fe84 	bl	8001fd0 <HAL_PCD_EP_Flush>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 f8ea 	bl	800a4a8 <USBD_Get_USB_Status>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b084      	sub	sp, #16
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a2fc:	78fa      	ldrb	r2, [r7, #3]
 800a2fe:	4611      	mov	r1, r2
 800a300:	4618      	mov	r0, r3
 800a302:	f7f7 fdab 	bl	8001e5c <HAL_PCD_EP_SetStall>
 800a306:	4603      	mov	r3, r0
 800a308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 f8cb 	bl	800a4a8 <USBD_Get_USB_Status>
 800a312:	4603      	mov	r3, r0
 800a314:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a316:	7bbb      	ldrb	r3, [r7, #14]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a33a:	78fa      	ldrb	r2, [r7, #3]
 800a33c:	4611      	mov	r1, r2
 800a33e:	4618      	mov	r0, r3
 800a340:	f7f7 fdf0 	bl	8001f24 <HAL_PCD_EP_ClrStall>
 800a344:	4603      	mov	r3, r0
 800a346:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f8ac 	bl	800a4a8 <USBD_Get_USB_Status>
 800a350:	4603      	mov	r3, r0
 800a352:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800a354:	7bbb      	ldrb	r3, [r7, #14]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a35e:	b480      	push	{r7}
 800a360:	b085      	sub	sp, #20
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	460b      	mov	r3, r1
 800a368:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a370:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a372:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a376:	2b00      	cmp	r3, #0
 800a378:	da0b      	bge.n	800a392 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a37a:	78fb      	ldrb	r3, [r7, #3]
 800a37c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a380:	68f9      	ldr	r1, [r7, #12]
 800a382:	4613      	mov	r3, r2
 800a384:	00db      	lsls	r3, r3, #3
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	440b      	add	r3, r1
 800a38c:	333e      	adds	r3, #62	; 0x3e
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	e00b      	b.n	800a3aa <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a392:	78fb      	ldrb	r3, [r7, #3]
 800a394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a398:	68f9      	ldr	r1, [r7, #12]
 800a39a:	4613      	mov	r3, r2
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	1a9b      	subs	r3, r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	440b      	add	r3, r1
 800a3a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a3d0:	78fa      	ldrb	r2, [r7, #3]
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7f7 fbbd 	bl	8001b54 <HAL_PCD_SetAddress>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f000 f861 	bl	800a4a8 <USBD_Get_USB_Status>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a3ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	607a      	str	r2, [r7, #4]
 800a3fe:	461a      	mov	r2, r3
 800a400:	460b      	mov	r3, r1
 800a402:	72fb      	strb	r3, [r7, #11]
 800a404:	4613      	mov	r3, r2
 800a406:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a416:	893b      	ldrh	r3, [r7, #8]
 800a418:	7af9      	ldrb	r1, [r7, #11]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	f7f7 fcd4 	bl	8001dc8 <HAL_PCD_EP_Transmit>
 800a420:	4603      	mov	r3, r0
 800a422:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	4618      	mov	r0, r3
 800a428:	f000 f83e 	bl	800a4a8 <USBD_Get_USB_Status>
 800a42c:	4603      	mov	r3, r0
 800a42e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800a430:	7dbb      	ldrb	r3, [r7, #22]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b086      	sub	sp, #24
 800a43e:	af00      	add	r7, sp, #0
 800a440:	60f8      	str	r0, [r7, #12]
 800a442:	607a      	str	r2, [r7, #4]
 800a444:	461a      	mov	r2, r3
 800a446:	460b      	mov	r3, r1
 800a448:	72fb      	strb	r3, [r7, #11]
 800a44a:	4613      	mov	r3, r2
 800a44c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a45c:	893b      	ldrh	r3, [r7, #8]
 800a45e:	7af9      	ldrb	r1, [r7, #11]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	f7f7 fc4e 	bl	8001d02 <HAL_PCD_EP_Receive>
 800a466:	4603      	mov	r3, r0
 800a468:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f000 f81b 	bl	800a4a8 <USBD_Get_USB_Status>
 800a472:	4603      	mov	r3, r0
 800a474:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800a476:	7dbb      	ldrb	r3, [r7, #22]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a492:	78fa      	ldrb	r2, [r7, #3]
 800a494:	4611      	mov	r1, r2
 800a496:	4618      	mov	r0, r3
 800a498:	f7f7 fc7e 	bl	8001d98 <HAL_PCD_EP_GetRxCount>
 800a49c:	4603      	mov	r3, r0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d817      	bhi.n	800a4ec <USBD_Get_USB_Status+0x44>
 800a4bc:	a201      	add	r2, pc, #4	; (adr r2, 800a4c4 <USBD_Get_USB_Status+0x1c>)
 800a4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c2:	bf00      	nop
 800a4c4:	0800a4d5 	.word	0x0800a4d5
 800a4c8:	0800a4db 	.word	0x0800a4db
 800a4cc:	0800a4e1 	.word	0x0800a4e1
 800a4d0:	0800a4e7 	.word	0x0800a4e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d8:	e00b      	b.n	800a4f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4da:	2302      	movs	r3, #2
 800a4dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a4de:	e008      	b.n	800a4f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e4:	e005      	b.n	800a4f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ea:	e002      	b.n	800a4f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f0:	bf00      	nop
  }
  return usb_status;
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <__errno>:
 800a500:	4b01      	ldr	r3, [pc, #4]	; (800a508 <__errno+0x8>)
 800a502:	6818      	ldr	r0, [r3, #0]
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	20000120 	.word	0x20000120

0800a50c <__libc_init_array>:
 800a50c:	b570      	push	{r4, r5, r6, lr}
 800a50e:	4e0d      	ldr	r6, [pc, #52]	; (800a544 <__libc_init_array+0x38>)
 800a510:	4c0d      	ldr	r4, [pc, #52]	; (800a548 <__libc_init_array+0x3c>)
 800a512:	1ba4      	subs	r4, r4, r6
 800a514:	10a4      	asrs	r4, r4, #2
 800a516:	2500      	movs	r5, #0
 800a518:	42a5      	cmp	r5, r4
 800a51a:	d109      	bne.n	800a530 <__libc_init_array+0x24>
 800a51c:	4e0b      	ldr	r6, [pc, #44]	; (800a54c <__libc_init_array+0x40>)
 800a51e:	4c0c      	ldr	r4, [pc, #48]	; (800a550 <__libc_init_array+0x44>)
 800a520:	f000 f8ea 	bl	800a6f8 <_init>
 800a524:	1ba4      	subs	r4, r4, r6
 800a526:	10a4      	asrs	r4, r4, #2
 800a528:	2500      	movs	r5, #0
 800a52a:	42a5      	cmp	r5, r4
 800a52c:	d105      	bne.n	800a53a <__libc_init_array+0x2e>
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a534:	4798      	blx	r3
 800a536:	3501      	adds	r5, #1
 800a538:	e7ee      	b.n	800a518 <__libc_init_array+0xc>
 800a53a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a53e:	4798      	blx	r3
 800a540:	3501      	adds	r5, #1
 800a542:	e7f2      	b.n	800a52a <__libc_init_array+0x1e>
 800a544:	0800a7c4 	.word	0x0800a7c4
 800a548:	0800a7c4 	.word	0x0800a7c4
 800a54c:	0800a7c4 	.word	0x0800a7c4
 800a550:	0800a7c8 	.word	0x0800a7c8

0800a554 <malloc>:
 800a554:	4b02      	ldr	r3, [pc, #8]	; (800a560 <malloc+0xc>)
 800a556:	4601      	mov	r1, r0
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	f000 b861 	b.w	800a620 <_malloc_r>
 800a55e:	bf00      	nop
 800a560:	20000120 	.word	0x20000120

0800a564 <free>:
 800a564:	4b02      	ldr	r3, [pc, #8]	; (800a570 <free+0xc>)
 800a566:	4601      	mov	r1, r0
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	f000 b80b 	b.w	800a584 <_free_r>
 800a56e:	bf00      	nop
 800a570:	20000120 	.word	0x20000120

0800a574 <memset>:
 800a574:	4402      	add	r2, r0
 800a576:	4603      	mov	r3, r0
 800a578:	4293      	cmp	r3, r2
 800a57a:	d100      	bne.n	800a57e <memset+0xa>
 800a57c:	4770      	bx	lr
 800a57e:	f803 1b01 	strb.w	r1, [r3], #1
 800a582:	e7f9      	b.n	800a578 <memset+0x4>

0800a584 <_free_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4605      	mov	r5, r0
 800a588:	2900      	cmp	r1, #0
 800a58a:	d045      	beq.n	800a618 <_free_r+0x94>
 800a58c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a590:	1f0c      	subs	r4, r1, #4
 800a592:	2b00      	cmp	r3, #0
 800a594:	bfb8      	it	lt
 800a596:	18e4      	addlt	r4, r4, r3
 800a598:	f000 f8ac 	bl	800a6f4 <__malloc_lock>
 800a59c:	4a1f      	ldr	r2, [pc, #124]	; (800a61c <_free_r+0x98>)
 800a59e:	6813      	ldr	r3, [r2, #0]
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	b933      	cbnz	r3, 800a5b2 <_free_r+0x2e>
 800a5a4:	6063      	str	r3, [r4, #4]
 800a5a6:	6014      	str	r4, [r2, #0]
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5ae:	f000 b8a2 	b.w	800a6f6 <__malloc_unlock>
 800a5b2:	42a3      	cmp	r3, r4
 800a5b4:	d90c      	bls.n	800a5d0 <_free_r+0x4c>
 800a5b6:	6821      	ldr	r1, [r4, #0]
 800a5b8:	1862      	adds	r2, r4, r1
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	bf04      	itt	eq
 800a5be:	681a      	ldreq	r2, [r3, #0]
 800a5c0:	685b      	ldreq	r3, [r3, #4]
 800a5c2:	6063      	str	r3, [r4, #4]
 800a5c4:	bf04      	itt	eq
 800a5c6:	1852      	addeq	r2, r2, r1
 800a5c8:	6022      	streq	r2, [r4, #0]
 800a5ca:	6004      	str	r4, [r0, #0]
 800a5cc:	e7ec      	b.n	800a5a8 <_free_r+0x24>
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	b10a      	cbz	r2, 800a5d8 <_free_r+0x54>
 800a5d4:	42a2      	cmp	r2, r4
 800a5d6:	d9fa      	bls.n	800a5ce <_free_r+0x4a>
 800a5d8:	6819      	ldr	r1, [r3, #0]
 800a5da:	1858      	adds	r0, r3, r1
 800a5dc:	42a0      	cmp	r0, r4
 800a5de:	d10b      	bne.n	800a5f8 <_free_r+0x74>
 800a5e0:	6820      	ldr	r0, [r4, #0]
 800a5e2:	4401      	add	r1, r0
 800a5e4:	1858      	adds	r0, r3, r1
 800a5e6:	4282      	cmp	r2, r0
 800a5e8:	6019      	str	r1, [r3, #0]
 800a5ea:	d1dd      	bne.n	800a5a8 <_free_r+0x24>
 800a5ec:	6810      	ldr	r0, [r2, #0]
 800a5ee:	6852      	ldr	r2, [r2, #4]
 800a5f0:	605a      	str	r2, [r3, #4]
 800a5f2:	4401      	add	r1, r0
 800a5f4:	6019      	str	r1, [r3, #0]
 800a5f6:	e7d7      	b.n	800a5a8 <_free_r+0x24>
 800a5f8:	d902      	bls.n	800a600 <_free_r+0x7c>
 800a5fa:	230c      	movs	r3, #12
 800a5fc:	602b      	str	r3, [r5, #0]
 800a5fe:	e7d3      	b.n	800a5a8 <_free_r+0x24>
 800a600:	6820      	ldr	r0, [r4, #0]
 800a602:	1821      	adds	r1, r4, r0
 800a604:	428a      	cmp	r2, r1
 800a606:	bf04      	itt	eq
 800a608:	6811      	ldreq	r1, [r2, #0]
 800a60a:	6852      	ldreq	r2, [r2, #4]
 800a60c:	6062      	str	r2, [r4, #4]
 800a60e:	bf04      	itt	eq
 800a610:	1809      	addeq	r1, r1, r0
 800a612:	6021      	streq	r1, [r4, #0]
 800a614:	605c      	str	r4, [r3, #4]
 800a616:	e7c7      	b.n	800a5a8 <_free_r+0x24>
 800a618:	bd38      	pop	{r3, r4, r5, pc}
 800a61a:	bf00      	nop
 800a61c:	200001dc 	.word	0x200001dc

0800a620 <_malloc_r>:
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	1ccd      	adds	r5, r1, #3
 800a624:	f025 0503 	bic.w	r5, r5, #3
 800a628:	3508      	adds	r5, #8
 800a62a:	2d0c      	cmp	r5, #12
 800a62c:	bf38      	it	cc
 800a62e:	250c      	movcc	r5, #12
 800a630:	2d00      	cmp	r5, #0
 800a632:	4606      	mov	r6, r0
 800a634:	db01      	blt.n	800a63a <_malloc_r+0x1a>
 800a636:	42a9      	cmp	r1, r5
 800a638:	d903      	bls.n	800a642 <_malloc_r+0x22>
 800a63a:	230c      	movs	r3, #12
 800a63c:	6033      	str	r3, [r6, #0]
 800a63e:	2000      	movs	r0, #0
 800a640:	bd70      	pop	{r4, r5, r6, pc}
 800a642:	f000 f857 	bl	800a6f4 <__malloc_lock>
 800a646:	4a21      	ldr	r2, [pc, #132]	; (800a6cc <_malloc_r+0xac>)
 800a648:	6814      	ldr	r4, [r2, #0]
 800a64a:	4621      	mov	r1, r4
 800a64c:	b991      	cbnz	r1, 800a674 <_malloc_r+0x54>
 800a64e:	4c20      	ldr	r4, [pc, #128]	; (800a6d0 <_malloc_r+0xb0>)
 800a650:	6823      	ldr	r3, [r4, #0]
 800a652:	b91b      	cbnz	r3, 800a65c <_malloc_r+0x3c>
 800a654:	4630      	mov	r0, r6
 800a656:	f000 f83d 	bl	800a6d4 <_sbrk_r>
 800a65a:	6020      	str	r0, [r4, #0]
 800a65c:	4629      	mov	r1, r5
 800a65e:	4630      	mov	r0, r6
 800a660:	f000 f838 	bl	800a6d4 <_sbrk_r>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d124      	bne.n	800a6b2 <_malloc_r+0x92>
 800a668:	230c      	movs	r3, #12
 800a66a:	6033      	str	r3, [r6, #0]
 800a66c:	4630      	mov	r0, r6
 800a66e:	f000 f842 	bl	800a6f6 <__malloc_unlock>
 800a672:	e7e4      	b.n	800a63e <_malloc_r+0x1e>
 800a674:	680b      	ldr	r3, [r1, #0]
 800a676:	1b5b      	subs	r3, r3, r5
 800a678:	d418      	bmi.n	800a6ac <_malloc_r+0x8c>
 800a67a:	2b0b      	cmp	r3, #11
 800a67c:	d90f      	bls.n	800a69e <_malloc_r+0x7e>
 800a67e:	600b      	str	r3, [r1, #0]
 800a680:	50cd      	str	r5, [r1, r3]
 800a682:	18cc      	adds	r4, r1, r3
 800a684:	4630      	mov	r0, r6
 800a686:	f000 f836 	bl	800a6f6 <__malloc_unlock>
 800a68a:	f104 000b 	add.w	r0, r4, #11
 800a68e:	1d23      	adds	r3, r4, #4
 800a690:	f020 0007 	bic.w	r0, r0, #7
 800a694:	1ac3      	subs	r3, r0, r3
 800a696:	d0d3      	beq.n	800a640 <_malloc_r+0x20>
 800a698:	425a      	negs	r2, r3
 800a69a:	50e2      	str	r2, [r4, r3]
 800a69c:	e7d0      	b.n	800a640 <_malloc_r+0x20>
 800a69e:	428c      	cmp	r4, r1
 800a6a0:	684b      	ldr	r3, [r1, #4]
 800a6a2:	bf16      	itet	ne
 800a6a4:	6063      	strne	r3, [r4, #4]
 800a6a6:	6013      	streq	r3, [r2, #0]
 800a6a8:	460c      	movne	r4, r1
 800a6aa:	e7eb      	b.n	800a684 <_malloc_r+0x64>
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	6849      	ldr	r1, [r1, #4]
 800a6b0:	e7cc      	b.n	800a64c <_malloc_r+0x2c>
 800a6b2:	1cc4      	adds	r4, r0, #3
 800a6b4:	f024 0403 	bic.w	r4, r4, #3
 800a6b8:	42a0      	cmp	r0, r4
 800a6ba:	d005      	beq.n	800a6c8 <_malloc_r+0xa8>
 800a6bc:	1a21      	subs	r1, r4, r0
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f000 f808 	bl	800a6d4 <_sbrk_r>
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	d0cf      	beq.n	800a668 <_malloc_r+0x48>
 800a6c8:	6025      	str	r5, [r4, #0]
 800a6ca:	e7db      	b.n	800a684 <_malloc_r+0x64>
 800a6cc:	200001dc 	.word	0x200001dc
 800a6d0:	200001e0 	.word	0x200001e0

0800a6d4 <_sbrk_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4c06      	ldr	r4, [pc, #24]	; (800a6f0 <_sbrk_r+0x1c>)
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4605      	mov	r5, r0
 800a6dc:	4608      	mov	r0, r1
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	f7f6 f980 	bl	80009e4 <_sbrk>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d102      	bne.n	800a6ee <_sbrk_r+0x1a>
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	b103      	cbz	r3, 800a6ee <_sbrk_r+0x1a>
 800a6ec:	602b      	str	r3, [r5, #0]
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	20004c44 	.word	0x20004c44

0800a6f4 <__malloc_lock>:
 800a6f4:	4770      	bx	lr

0800a6f6 <__malloc_unlock>:
 800a6f6:	4770      	bx	lr

0800a6f8 <_init>:
 800a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fa:	bf00      	nop
 800a6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fe:	bc08      	pop	{r3}
 800a700:	469e      	mov	lr, r3
 800a702:	4770      	bx	lr

0800a704 <_fini>:
 800a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a706:	bf00      	nop
 800a708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70a:	bc08      	pop	{r3}
 800a70c:	469e      	mov	lr, r3
 800a70e:	4770      	bx	lr
