
NucleoG474-USB-SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d68  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f78  08007f78  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08007f78  08007f78  00017f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f80  08007f80  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f84  08007f84  00017f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab0  20000024  08007fac  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ad4  08007fac  00020ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3f8  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036c8  00000000  00000000  0003d44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001720  00000000  00000000  00040b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001570  00000000  00000000  00042238  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029b5f  00000000  00000000  000437a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016106  00000000  00000000  0006d307  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107694  00000000  00000000  0008340d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018aaa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000605c  00000000  00000000  0018ab1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007f28 	.word	0x08007f28

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	08007f28 	.word	0x08007f28

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_FDCAN1_Init+0x84>)
 800051e:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <MX_FDCAN1_Init+0x88>)
 8000520:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_FDCAN1_Init+0x84>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000536:	2200      	movs	r2, #0
 8000538:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_FDCAN1_Init+0x84>)
 800053c:	2200      	movs	r2, #0
 800053e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000542:	2200      	movs	r2, #0
 8000544:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 40;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000548:	2228      	movs	r2, #40	; 0x28
 800054a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_FDCAN1_Init+0x84>)
 800054e:	2201      	movs	r2, #1
 8000550:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000554:	220d      	movs	r2, #13
 8000556:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_FDCAN1_Init+0x84>)
 800055a:	2202      	movs	r2, #2
 800055c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000560:	2201      	movs	r2, #1
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000566:	2201      	movs	r2, #1
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_FDCAN1_Init+0x84>)
 800056c:	2201      	movs	r2, #1
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000572:	2201      	movs	r2, #1
 8000574:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000578:	2200      	movs	r2, #0
 800057a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_FDCAN1_Init+0x84>)
 800057e:	2200      	movs	r2, #0
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_FDCAN1_Init+0x84>)
 800058a:	f001 f8c1 	bl	8001710 <HAL_FDCAN_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000594:	f000 fc46 	bl	8000e24 <Error_Handler>
  }

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000005c 	.word	0x2000005c
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <HAL_FDCAN_MspInit+0x80>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d129      	bne.n	800061a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000608:	2309      	movs	r3, #9
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f001 fe8b 	bl	8002330 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40006400 	.word	0x40006400
 8000628:	40021000 	.word	0x40021000

0800062c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 ffc3 	bl	8002634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_GPIO_Init+0xc8>)
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_GPIO_Init+0xcc>)
 80006c4:	f001 fe34 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006c8:	2320      	movs	r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f001 fe25 	bl	8002330 <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	48000800 	.word	0x48000800

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f000 fe63 	bl	80013ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f93c 	bl	8000980 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Initialize the micro SD Card */
  if(MY_SD_Init(0) != BSP_ERROR_NONE){
 8000708:	2000      	movs	r0, #0
 800070a:	f006 f881 	bl	8006810 <MY_SD_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <main+0x1c>
	  Error_Handler();
 8000714:	f000 fb86 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f7ff ff88 	bl	800062c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800071c:	f000 fda4 	bl	8001268 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000720:	f000 fc02 	bl	8000f28 <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000724:	f006 f85c 	bl	80067e0 <MX_FATFS_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <main+0x36>
    Error_Handler();
 800072e:	f000 fb79 	bl	8000e24 <Error_Handler>
  }
  MX_FDCAN1_Init();
 8000732:	f7ff fef1 	bl	8000518 <MX_FDCAN1_Init>
  MX_RTC_Init();
 8000736:	f000 fb79 	bl	8000e2c <MX_RTC_Init>
  MX_TIM16_Init();
 800073a:	f000 fd15 	bl	8001168 <MX_TIM16_Init>
  MX_TIM17_Init();
 800073e:	f000 fd39 	bl	80011b4 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000742:	f000 f999 	bl	8000a78 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CAN_TxData_Init();
 8000746:	f000 fb47 	bl	8000dd8 <CAN_TxData_Init>

  //uint16_t aug = 3456;

    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 800074a:	4884      	ldr	r0, [pc, #528]	; (800095c <main+0x260>)
 800074c:	f001 f93a 	bl	80019c4 <HAL_FDCAN_Start>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <main+0x5e>
        /* Start Error */
        Error_Handler();
 8000756:	f000 fb65 	bl	8000e24 <Error_Handler>
    }

    if ( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 800075a:	2200      	movs	r2, #0
 800075c:	2101      	movs	r1, #1
 800075e:	487f      	ldr	r0, [pc, #508]	; (800095c <main+0x260>)
 8000760:	f001 fa76 	bl	8001c50 <HAL_FDCAN_ActivateNotification>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <main+0x72>
        /* Notification Error */
        Error_Handler();
 800076a:	f000 fb5b 	bl	8000e24 <Error_Handler>
    }
    torque = 0;
 800076e:	4b7c      	ldr	r3, [pc, #496]	; (8000960 <main+0x264>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
    dir = 0; fs = 0; en = 0;
 8000774:	4b7b      	ldr	r3, [pc, #492]	; (8000964 <main+0x268>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	4b7b      	ldr	r3, [pc, #492]	; (8000968 <main+0x26c>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	4b7a      	ldr	r3, [pc, #488]	; (800096c <main+0x270>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
    Set_Switch(dir, fs, en, 0);
 8000786:	4b77      	ldr	r3, [pc, #476]	; (8000964 <main+0x268>)
 8000788:	7818      	ldrb	r0, [r3, #0]
 800078a:	4b77      	ldr	r3, [pc, #476]	; (8000968 <main+0x26c>)
 800078c:	7819      	ldrb	r1, [r3, #0]
 800078e:	4b77      	ldr	r3, [pc, #476]	; (800096c <main+0x270>)
 8000790:	781a      	ldrb	r2, [r3, #0]
 8000792:	2300      	movs	r3, #0
 8000794:	f000 fa50 	bl	8000c38 <Set_Switch>
    DC_TxData_Build(torque);
 8000798:	4b71      	ldr	r3, [pc, #452]	; (8000960 <main+0x264>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 facb 	bl	8000d38 <DC_TxData_Build>
    HAL_TIM_Base_Start_IT(&htim17);
 80007a2:	4873      	ldr	r0, [pc, #460]	; (8000970 <main+0x274>)
 80007a4:	f004 f8ca 	bl	800493c <HAL_TIM_Base_Start_IT>
  while (1){
	  /*torque = 0;
	  CAN_TxMsg();
	  readSigmaData();*/

	  switch(status){
 80007a8:	4b72      	ldr	r3, [pc, #456]	; (8000974 <main+0x278>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	f200 80c7 	bhi.w	8000940 <main+0x244>
 80007b2:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <main+0xbc>)
 80007b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b8:	080007c9 	.word	0x080007c9
 80007bc:	0800081b 	.word	0x0800081b
 80007c0:	0800092f 	.word	0x0800092f
 80007c4:	08000941 	.word	0x08000941

	  case IDLE:
		  torque = 0;
 80007c8:	4b65      	ldr	r3, [pc, #404]	; (8000960 <main+0x264>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
		  dir = 0; fs = 0; en = 0;
 80007ce:	4b65      	ldr	r3, [pc, #404]	; (8000964 <main+0x268>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	4b64      	ldr	r3, [pc, #400]	; (8000968 <main+0x26c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	4b64      	ldr	r3, [pc, #400]	; (800096c <main+0x270>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
		  Set_Switch(dir, fs, en, 0);
 80007e0:	4b60      	ldr	r3, [pc, #384]	; (8000964 <main+0x268>)
 80007e2:	7818      	ldrb	r0, [r3, #0]
 80007e4:	4b60      	ldr	r3, [pc, #384]	; (8000968 <main+0x26c>)
 80007e6:	7819      	ldrb	r1, [r3, #0]
 80007e8:	4b60      	ldr	r3, [pc, #384]	; (800096c <main+0x270>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	2300      	movs	r3, #0
 80007ee:	f000 fa23 	bl	8000c38 <Set_Switch>
		  DC_TxData_Build(torque);
 80007f2:	4b5b      	ldr	r3, [pc, #364]	; (8000960 <main+0x264>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fa9e 	bl	8000d38 <DC_TxData_Build>

		  if(count > 100){
 80007fc:	4b5e      	ldr	r3, [pc, #376]	; (8000978 <main+0x27c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b64      	cmp	r3, #100	; 0x64
 8000802:	f240 809f 	bls.w	8000944 <main+0x248>
			  status = STARTUP;
 8000806:	4b5b      	ldr	r3, [pc, #364]	; (8000974 <main+0x278>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
			  controlStatus = 1;
 800080c:	4b5b      	ldr	r3, [pc, #364]	; (800097c <main+0x280>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
			  count = 0;
 8000812:	4b59      	ldr	r3, [pc, #356]	; (8000978 <main+0x27c>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000818:	e094      	b.n	8000944 <main+0x248>

	  case STARTUP:
		  torque = 0;
 800081a:	4b51      	ldr	r3, [pc, #324]	; (8000960 <main+0x264>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
		  switch(controlStatus){
 8000820:	4b56      	ldr	r3, [pc, #344]	; (800097c <main+0x280>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d024      	beq.n	8000872 <main+0x176>
 8000828:	2b03      	cmp	r3, #3
 800082a:	d043      	beq.n	80008b4 <main+0x1b8>
 800082c:	2b01      	cmp	r3, #1
 800082e:	d162      	bne.n	80008f6 <main+0x1fa>

		  case 1:
			  // enable
			  if(count > 100){
 8000830:	4b51      	ldr	r3, [pc, #324]	; (8000978 <main+0x27c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b64      	cmp	r3, #100	; 0x64
 8000836:	d916      	bls.n	8000866 <main+0x16a>
				  en = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <main+0x270>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
				  Set_Switch(dir, fs, en, 0);
 800083e:	4b49      	ldr	r3, [pc, #292]	; (8000964 <main+0x268>)
 8000840:	7818      	ldrb	r0, [r3, #0]
 8000842:	4b49      	ldr	r3, [pc, #292]	; (8000968 <main+0x26c>)
 8000844:	7819      	ldrb	r1, [r3, #0]
 8000846:	4b49      	ldr	r3, [pc, #292]	; (800096c <main+0x270>)
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	2300      	movs	r3, #0
 800084c:	f000 f9f4 	bl	8000c38 <Set_Switch>
				  DC_TxData_Build(torque);
 8000850:	4b43      	ldr	r3, [pc, #268]	; (8000960 <main+0x264>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fa6f 	bl	8000d38 <DC_TxData_Build>
				  controlStatus = 2;
 800085a:	4b48      	ldr	r3, [pc, #288]	; (800097c <main+0x280>)
 800085c:	2202      	movs	r2, #2
 800085e:	701a      	strb	r2, [r3, #0]
				  count = 0;
 8000860:	4b45      	ldr	r3, [pc, #276]	; (8000978 <main+0x27c>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
			  }
			  DC_TxData_Build(torque);
 8000866:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <main+0x264>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fa64 	bl	8000d38 <DC_TxData_Build>
			  break;
 8000870:	e05c      	b.n	800092c <main+0x230>
		  case 2:
			  // footswitch
			  if(count > 100){
 8000872:	4b41      	ldr	r3, [pc, #260]	; (8000978 <main+0x27c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b64      	cmp	r3, #100	; 0x64
 8000878:	d916      	bls.n	80008a8 <main+0x1ac>
				  fs = 1;
 800087a:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <main+0x26c>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
				  Set_Switch(dir, fs, en, 0);
 8000880:	4b38      	ldr	r3, [pc, #224]	; (8000964 <main+0x268>)
 8000882:	7818      	ldrb	r0, [r3, #0]
 8000884:	4b38      	ldr	r3, [pc, #224]	; (8000968 <main+0x26c>)
 8000886:	7819      	ldrb	r1, [r3, #0]
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <main+0x270>)
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	f000 f9d3 	bl	8000c38 <Set_Switch>
				  DC_TxData_Build(torque);
 8000892:	4b33      	ldr	r3, [pc, #204]	; (8000960 <main+0x264>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa4e 	bl	8000d38 <DC_TxData_Build>
				  controlStatus = 3;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <main+0x280>)
 800089e:	2203      	movs	r2, #3
 80008a0:	701a      	strb	r2, [r3, #0]
				  count = 0;
 80008a2:	4b35      	ldr	r3, [pc, #212]	; (8000978 <main+0x27c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
			  }
			  DC_TxData_Build(torque);
 80008a8:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <main+0x264>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fa43 	bl	8000d38 <DC_TxData_Build>
			  break;
 80008b2:	e03b      	b.n	800092c <main+0x230>
		  case 3:
			  // direction
			  if(count > 100){
 80008b4:	4b30      	ldr	r3, [pc, #192]	; (8000978 <main+0x27c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b64      	cmp	r3, #100	; 0x64
 80008ba:	d916      	bls.n	80008ea <main+0x1ee>
				  dir = 1; // forward
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <main+0x268>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
				  Set_Switch(dir, fs, en, 0);
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <main+0x268>)
 80008c4:	7818      	ldrb	r0, [r3, #0]
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <main+0x26c>)
 80008c8:	7819      	ldrb	r1, [r3, #0]
 80008ca:	4b28      	ldr	r3, [pc, #160]	; (800096c <main+0x270>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	2300      	movs	r3, #0
 80008d0:	f000 f9b2 	bl	8000c38 <Set_Switch>
				  DC_TxData_Build(torque);
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <main+0x264>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fa2d 	bl	8000d38 <DC_TxData_Build>
				  status = SPIN;
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <main+0x278>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	701a      	strb	r2, [r3, #0]
				  count = 0;
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <main+0x27c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
			  }
			  DC_TxData_Build(torque);
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <main+0x264>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fa22 	bl	8000d38 <DC_TxData_Build>
			  break;
 80008f4:	e01a      	b.n	800092c <main+0x230>
		  default:
			  en = 0; fs = 0; dir = 0;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <main+0x270>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <main+0x26c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <main+0x268>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
			  Set_Switch(dir, fs, en, 0);
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <main+0x268>)
 800090a:	7818      	ldrb	r0, [r3, #0]
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <main+0x26c>)
 800090e:	7819      	ldrb	r1, [r3, #0]
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <main+0x270>)
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	2300      	movs	r3, #0
 8000916:	f000 f98f 	bl	8000c38 <Set_Switch>
			  DC_TxData_Build(torque);
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <main+0x264>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fa0a 	bl	8000d38 <DC_TxData_Build>
			  controlStatus = 1;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <main+0x280>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
			  break;
 800092a:	bf00      	nop
		  }
		  break;
 800092c:	e00b      	b.n	8000946 <main+0x24a>
	  case SPIN:
		  /*for(uint8_t i=0; i<20; i++){
			  torque++;
		  }*/
		  torque = 50;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <main+0x264>)
 8000930:	2232      	movs	r2, #50	; 0x32
 8000932:	601a      	str	r2, [r3, #0]
		  DC_TxData_Build(torque);
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <main+0x264>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f9fd 	bl	8000d38 <DC_TxData_Build>
		  break;
 800093e:	e002      	b.n	8000946 <main+0x24a>
	  case STOP:

		  break;
	  default:
		  break;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <main+0x24a>
		  break;
 8000944:	bf00      	nop
	  }

	  //CAN_TxMsg();
	  HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f000 fdb0 	bl	80014ac <HAL_Delay>
	  //readSigmaData();
	  //HAL_Delay(50);
	  count++;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <main+0x27c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	3301      	adds	r3, #1
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <main+0x27c>)
 8000956:	701a      	strb	r2, [r3, #0]
	  switch(status){
 8000958:	e726      	b.n	80007a8 <main+0xac>
 800095a:	bf00      	nop
 800095c:	2000005c 	.word	0x2000005c
 8000960:	20000150 	.word	0x20000150
 8000964:	20000044 	.word	0x20000044
 8000968:	20000045 	.word	0x20000045
 800096c:	20000046 	.word	0x20000046
 8000970:	2000052c 	.word	0x2000052c
 8000974:	20000488 	.word	0x20000488
 8000978:	20000047 	.word	0x20000047
 800097c:	200000e0 	.word	0x200000e0

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0a8      	sub	sp, #160	; 0xa0
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800098a:	2238      	movs	r2, #56	; 0x38
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f007 fac2 	bl	8007f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2254      	movs	r2, #84	; 0x54
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f007 fab4 	bl	8007f18 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009b4:	f001 fe7a 	bl	80026ac <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <SystemClock_Config+0xf0>)
 80009ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009be:	4a2c      	ldr	r2, [pc, #176]	; (8000a70 <SystemClock_Config+0xf0>)
 80009c0:	f023 0318 	bic.w	r3, r3, #24
 80009c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80009c8:	2306      	movs	r3, #6
 80009ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009cc:	2301      	movs	r3, #1
 80009ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 32;
 80009ec:	2320      	movs	r3, #32
 80009ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80009f8:	2306      	movs	r3, #6
 80009fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fef3 	bl	80027f4 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a14:	f000 fa06 	bl	8000e24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	230f      	movs	r3, #15
 8000a1a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a30:	2106      	movs	r1, #6
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 f9f6 	bl	8002e24 <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a3e:	f000 f9f1 	bl	8000e24 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <SystemClock_Config+0xf4>)
 8000a44:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a54:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fbff 	bl	800325c <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a64:	f000 f9de 	bl	8000e24 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	37a0      	adds	r7, #160	; 0xa0
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000
 8000a74:	00081020 	.word	0x00081020

08000a78 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2015      	movs	r0, #21
 8000a82:	f000 fe10 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a86:	2015      	movs	r0, #21
 8000a88:	f000 fe27 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2028      	movs	r0, #40	; 0x28
 8000a92:	f000 fe08 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a96:	2028      	movs	r0, #40	; 0x28
 8000a98:	f000 fe1f 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	201a      	movs	r0, #26
 8000aa2:	f000 fe00 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000aa6:	201a      	movs	r0, #26
 8000aa8:	f000 fe17 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2019      	movs	r0, #25
 8000ab2:	f000 fdf8 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ab6:	2019      	movs	r0, #25
 8000ab8:	f000 fe0f 	bl	80016da <HAL_NVIC_EnableIRQ>
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u) != HAL_OK){
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000ad2:	f000 ffe3 	bl	8001a9c <HAL_FDCAN_GetRxMessage>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_FDCAN_RxFifo0Callback+0x20>
		/* Transmission request Error */
		Error_Handler();
 8000adc:	f000 f9a2 	bl	8000e24 <Error_Handler>
	}
	ID = RxHeader.Identifier;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000ae6:	6013      	str	r3, [r2, #0]
	readSigmaData();
 8000ae8:	f000 f81e 	bl	8000b28 <readSigmaData>
    /*if(flag == 1){
    	salvaDati();
    }*/

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000c0 	.word	0x200000c0
 8000af8:	20000228 	.word	0x20000228
 8000afc:	2000005c 	.word	0x2000005c
 8000b00:	20000040 	.word	0x20000040

08000b04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17){ //check if the interrupt comes from TIM2 (occur every 100mS)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>

    	CAN_TxMsg();
 8000b16:	f000 f939 	bl	8000d8c <CAN_TxMsg>
        	if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin)==GPIO_PIN_SET)
        	{
        		HAL_Delay(10000);
        	}
     }*/
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40014800 	.word	0x40014800

08000b28 <readSigmaData>:

uint8_t readSigmaData(void){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
	uint8_t res;
	res = HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u);
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <readSigmaData+0xf8>)
 8000b30:	4a3c      	ldr	r2, [pc, #240]	; (8000c24 <readSigmaData+0xfc>)
 8000b32:	2140      	movs	r1, #64	; 0x40
 8000b34:	483c      	ldr	r0, [pc, #240]	; (8000c28 <readSigmaData+0x100>)
 8000b36:	f000 ffb1 	bl	8001a9c <HAL_FDCAN_GetRxMessage>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]

	switch(RxHeader.Identifier){
 8000b3e:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <readSigmaData+0xfc>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f240 1241 	movw	r2, #321	; 0x141
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d01e      	beq.n	8000b88 <readSigmaData+0x60>
 8000b4a:	f240 1251 	movw	r2, #337	; 0x151
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d047      	beq.n	8000be2 <readSigmaData+0xba>
 8000b52:	f240 1231 	movw	r2, #305	; 0x131
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d15c      	bne.n	8000c14 <readSigmaData+0xec>
	case MS:
			ms.MotorSpeed			= rxData.Data16u[0];
 8000b5a:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <readSigmaData+0xf8>)
 8000b5c:	881a      	ldrh	r2, [r3, #0]
 8000b5e:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <readSigmaData+0x104>)
 8000b60:	801a      	strh	r2, [r3, #0]
			ms.MotorCurrent			= rxData.Data16[1];
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <readSigmaData+0xf8>)
 8000b64:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <readSigmaData+0x104>)
 8000b6a:	805a      	strh	r2, [r3, #2]
			ms.MotorVoltage			= rxData.Data8u[4];
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <readSigmaData+0xf8>)
 8000b6e:	791a      	ldrb	r2, [r3, #4]
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <readSigmaData+0x104>)
 8000b72:	711a      	strb	r2, [r3, #4]
			ms.BatteryVoltage		= rxData.Data8u[5];
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <readSigmaData+0xf8>)
 8000b76:	795a      	ldrb	r2, [r3, #5]
 8000b78:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <readSigmaData+0x104>)
 8000b7a:	715a      	strb	r2, [r3, #5]
			ms.BatteryCurrent		= rxData.Data16[4];
 8000b7c:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <readSigmaData+0xf8>)
 8000b7e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <readSigmaData+0x104>)
 8000b84:	80da      	strh	r2, [r3, #6]
	break;
 8000b86:	e045      	b.n	8000c14 <readSigmaData+0xec>
	case DS:
			ds.ActualTorque			= rxData.Data16[0];
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <readSigmaData+0xf8>)
 8000b8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b8e:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <readSigmaData+0x108>)
 8000b90:	801a      	strh	r2, [r3, #0]
			ds.ActualSpeed			= rxData.Data16[1];
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <readSigmaData+0xf8>)
 8000b94:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <readSigmaData+0x108>)
 8000b9a:	805a      	strh	r2, [r3, #2]
			ds.DriveStatusIndicator	= rxData.Data8u[4] & 0x0F;
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <readSigmaData+0xf8>)
 8000b9e:	791b      	ldrb	r3, [r3, #4]
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <readSigmaData+0x108>)
 8000ba8:	711a      	strb	r2, [r3, #4]
			ds.SpeedLimitIndicator	= rxData.Data8u[4] >> 0x04;
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <readSigmaData+0xf8>)
 8000bac:	791b      	ldrb	r3, [r3, #4]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <readSigmaData+0x108>)
 8000bb4:	715a      	strb	r2, [r3, #5]
			ds.TorqueLimitIndicator	= rxData.Data8u[5] & 0x0F;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <readSigmaData+0xf8>)
 8000bb8:	795b      	ldrb	r3, [r3, #5]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <readSigmaData+0x108>)
 8000bc2:	719a      	strb	r2, [r3, #6]
			ds.MotorLimitIndicator	= rxData.Data8u[5] >> 0x04;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <readSigmaData+0xf8>)
 8000bc6:	795b      	ldrb	r3, [r3, #5]
 8000bc8:	091b      	lsrs	r3, r3, #4
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <readSigmaData+0x108>)
 8000bce:	71da      	strb	r2, [r3, #7]
			ds.FaultCode			= rxData.Data8u[6];
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <readSigmaData+0xf8>)
 8000bd2:	799a      	ldrb	r2, [r3, #6]
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <readSigmaData+0x108>)
 8000bd6:	721a      	strb	r2, [r3, #8]
			ds.Code					= rxData.Data8u[7];
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <readSigmaData+0xf8>)
 8000bda:	79da      	ldrb	r2, [r3, #7]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <readSigmaData+0x108>)
 8000bde:	725a      	strb	r2, [r3, #9]
	break;
 8000be0:	e018      	b.n	8000c14 <readSigmaData+0xec>
	case CS:
			cs.ControllerTemperature= rxData.Data8u[0];
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <readSigmaData+0xf8>)
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <readSigmaData+0x10c>)
 8000be8:	701a      	strb	r2, [r3, #0]
			cs.MotorTemperature		= rxData.Data8u[1];
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <readSigmaData+0xf8>)
 8000bec:	785a      	ldrb	r2, [r3, #1]
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <readSigmaData+0x10c>)
 8000bf0:	705a      	strb	r2, [r3, #1]
			cs.BDI					= rxData.Data8u[2];
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <readSigmaData+0xf8>)
 8000bf4:	789a      	ldrb	r2, [r3, #2]
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <readSigmaData+0x10c>)
 8000bf8:	709a      	strb	r2, [r3, #2]
			cs.FaultSubCode			= rxData.Data8u[3] << 0x08 | rxData.Data8u[4];
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <readSigmaData+0xf8>)
 8000bfc:	78db      	ldrb	r3, [r3, #3]
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <readSigmaData+0xf8>)
 8000c04:	791b      	ldrb	r3, [r3, #4]
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <readSigmaData+0x10c>)
 8000c10:	809a      	strh	r2, [r3, #4]
	break;
 8000c12:	bf00      	nop
	}
	return res;
 8000c14:	79fb      	ldrb	r3, [r7, #7]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000c0 	.word	0x200000c0
 8000c24:	20000228 	.word	0x20000228
 8000c28:	2000005c 	.word	0x2000005c
 8000c2c:	20000148 	.word	0x20000148
 8000c30:	200000e4 	.word	0x200000e4
 8000c34:	200000d0 	.word	0x200000d0

08000c38 <Set_Switch>:

/*void DC_Data_Build(int32_t torque){
	dc.Trottle = SetThrottle(torque);
}*/

void Set_Switch(uint8_t Dir, uint8_t Fs, uint8_t En, uint8_t HandBrake){
 8000c38:	b490      	push	{r4, r7}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4623      	mov	r3, r4
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71bb      	strb	r3, [r7, #6]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	717b      	strb	r3, [r7, #5]
 8000c52:	4613      	mov	r3, r2
 8000c54:	713b      	strb	r3, [r7, #4]
	// Dir = 1 Forward, Dir = 0 Reverse
	if(Dir > 0){
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00e      	beq.n	8000c7a <Set_Switch+0x42>
		dc.DigitalInputs = dc.DigitalInputs | 0x01<<FD;			// Set Forward Direction
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <Set_Switch+0xd4>)
 8000c5e:	799b      	ldrb	r3, [r3, #6]
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <Set_Switch+0xd4>)
 8000c68:	719a      	strb	r2, [r3, #6]
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<RD);		// Reset Reverse Direction
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <Set_Switch+0xd4>)
 8000c6c:	799b      	ldrb	r3, [r3, #6]
 8000c6e:	f023 0302 	bic.w	r3, r3, #2
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <Set_Switch+0xd4>)
 8000c76:	719a      	strb	r2, [r3, #6]
 8000c78:	e00d      	b.n	8000c96 <Set_Switch+0x5e>
	else if(Dir < 0){
		dc.DigitalInputs = dc.DigitalInputs | 0x01<<RD;			// Set Reverse Direction
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<FD);		// Reset Forward Direction
	}
	else{
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<FD);		// Reset Forward Direction
 8000c7a:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <Set_Switch+0xd4>)
 8000c7c:	799b      	ldrb	r3, [r3, #6]
 8000c7e:	f023 0301 	bic.w	r3, r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <Set_Switch+0xd4>)
 8000c86:	719a      	strb	r2, [r3, #6]
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<RD);		// Reset Reverse Direction
 8000c88:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <Set_Switch+0xd4>)
 8000c8a:	799b      	ldrb	r3, [r3, #6]
 8000c8c:	f023 0302 	bic.w	r3, r3, #2
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <Set_Switch+0xd4>)
 8000c94:	719a      	strb	r2, [r3, #6]
	}

	if(Fs > 0){
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d007      	beq.n	8000cac <Set_Switch+0x74>
		dc.DigitalInputs = dc.DigitalInputs | 0x01<<FS;			// Set Foot Switch
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <Set_Switch+0xd4>)
 8000c9e:	799b      	ldrb	r3, [r3, #6]
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <Set_Switch+0xd4>)
 8000ca8:	719a      	strb	r2, [r3, #6]
 8000caa:	e006      	b.n	8000cba <Set_Switch+0x82>
	}
	else{
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<FS);		// Reset Foot Switch
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <Set_Switch+0xd4>)
 8000cae:	799b      	ldrb	r3, [r3, #6]
 8000cb0:	f023 0304 	bic.w	r3, r3, #4
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <Set_Switch+0xd4>)
 8000cb8:	719a      	strb	r2, [r3, #6]
	}

	if(En > 0){
 8000cba:	797b      	ldrb	r3, [r7, #5]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d007      	beq.n	8000cd0 <Set_Switch+0x98>
		dc.DigitalInputs = dc.DigitalInputs | 0x01<<EN;			// Set Enable
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <Set_Switch+0xd4>)
 8000cc2:	799b      	ldrb	r3, [r3, #6]
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <Set_Switch+0xd4>)
 8000ccc:	719a      	strb	r2, [r3, #6]
 8000cce:	e006      	b.n	8000cde <Set_Switch+0xa6>
	}
	else{
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<EN);		// Reset Enable
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <Set_Switch+0xd4>)
 8000cd2:	799b      	ldrb	r3, [r3, #6]
 8000cd4:	f023 0308 	bic.w	r3, r3, #8
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <Set_Switch+0xd4>)
 8000cdc:	719a      	strb	r2, [r3, #6]
	}

	if(HandBrake > 0){
 8000cde:	793b      	ldrb	r3, [r7, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d007      	beq.n	8000cf4 <Set_Switch+0xbc>
		dc.DigitalInputs = dc.DigitalInputs | 0x01<<HB;			// Set Hand Brake
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <Set_Switch+0xd4>)
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <Set_Switch+0xd4>)
 8000cf0:	719a      	strb	r2, [r3, #6]
	}
	else{
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<HB);		// Reset Hand Brake
	}
}
 8000cf2:	e006      	b.n	8000d02 <Set_Switch+0xca>
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<HB);		// Reset Hand Brake
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <Set_Switch+0xd4>)
 8000cf6:	799b      	ldrb	r3, [r3, #6]
 8000cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <Set_Switch+0xd4>)
 8000d00:	719a      	strb	r2, [r3, #6]
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc90      	pop	{r4, r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	200000c8 	.word	0x200000c8

08000d10 <Toggle_Bit>:

void Toggle_Bit(){
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
	if(txData.Data8u[7]){
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <Toggle_Bit+0x24>)
 8000d16:	79db      	ldrb	r3, [r3, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <Toggle_Bit+0x14>
		//dc.ToggleSecurityBit = 0x00;
		txData.Data8u[7] = 0x00;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <Toggle_Bit+0x24>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	71da      	strb	r2, [r3, #7]
	}
	else{
		//dc.ToggleSecurityBit = 0x01;
		txData.Data8u[7] = 0x01;
	}
}
 8000d22:	e002      	b.n	8000d2a <Toggle_Bit+0x1a>
		txData.Data8u[7] = 0x01;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <Toggle_Bit+0x24>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	71da      	strb	r2, [r3, #7]
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	200000d8 	.word	0x200000d8

08000d38 <DC_TxData_Build>:

void DC_TxData_Build(int32_t torque){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  TxHeader.Identifier = DC;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <DC_TxData_Build+0x48>)
 8000d42:	f240 1261 	movw	r2, #353	; 0x161
 8000d46:	601a      	str	r2, [r3, #0]

  dc.Trottle = SetThrottle(torque);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f837 	bl	8000dbc <SetThrottle>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <DC_TxData_Build+0x4c>)
 8000d54:	801a      	strh	r2, [r3, #0]

  txData.Data16u[0] = dc.Trottle;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <DC_TxData_Build+0x4c>)
 8000d58:	881a      	ldrh	r2, [r3, #0]
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <DC_TxData_Build+0x50>)
 8000d5c:	801a      	strh	r2, [r3, #0]
  txData.Data16u[1] = dc.BrakePedal;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <DC_TxData_Build+0x4c>)
 8000d60:	885a      	ldrh	r2, [r3, #2]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <DC_TxData_Build+0x50>)
 8000d64:	805a      	strh	r2, [r3, #2]
  txData.Data16[2] = dc.AD3;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <DC_TxData_Build+0x4c>)
 8000d68:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <DC_TxData_Build+0x50>)
 8000d6e:	809a      	strh	r2, [r3, #4]
  txData.Data8u[6] = dc.DigitalInputs;
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <DC_TxData_Build+0x4c>)
 8000d72:	799a      	ldrb	r2, [r3, #6]
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <DC_TxData_Build+0x50>)
 8000d76:	719a      	strb	r2, [r3, #6]
  //txData.Data8u[7] = dc.ToggleSecurityBit;
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000204 	.word	0x20000204
 8000d84:	200000c8 	.word	0x200000c8
 8000d88:	200000d8 	.word	0x200000d8

08000d8c <CAN_TxMsg>:
	HAL_Delay(10);
	//readSigmaData();
	HAL_Delay(10);
}

uint8_t CAN_TxMsg(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
	uint8_t res;
	Toggle_Bit();
 8000d92:	f7ff ffbd 	bl	8000d10 <Toggle_Bit>
	//DC_TxData_Build(torque);
	res = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, txData.Data8u);
 8000d96:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <CAN_TxMsg+0x24>)
 8000d98:	4906      	ldr	r1, [pc, #24]	; (8000db4 <CAN_TxMsg+0x28>)
 8000d9a:	4807      	ldr	r0, [pc, #28]	; (8000db8 <CAN_TxMsg+0x2c>)
 8000d9c:	f000 fe3a 	bl	8001a14 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]

	return res;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000d8 	.word	0x200000d8
 8000db4:	20000204 	.word	0x20000204
 8000db8:	2000005c 	.word	0x2000005c

08000dbc <SetThrottle>:

// torque [Nm] -> thottle [%/4096]
uint16_t SetThrottle(int32_t torque){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	uint16_t throttle;
	// throttle is expressed in % of the maximum torque limit coded in 16bit
	//throttle = torque * 4096  / (MAXCURRENT * KT);
	throttle=torque;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	81fb      	strh	r3, [r7, #14]
	return throttle;
 8000dc8:	89fb      	ldrh	r3, [r7, #14]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <CAN_TxData_Init>:
		res = f_close(&writeFile);

	return res;
}

void CAN_TxData_Init(void){
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  TxHeader.Identifier = 0x0;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <CAN_TxData_Init+0x48>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <CAN_TxData_Init+0x48>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <CAN_TxData_Init+0x48>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <CAN_TxData_Init+0x48>)
 8000df0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000df4:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <CAN_TxData_Init+0x48>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <CAN_TxData_Init+0x48>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <CAN_TxData_Init+0x48>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <CAN_TxData_Init+0x48>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <CAN_TxData_Init+0x48>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000204 	.word	0x20000204

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//printf("** Error. ** \n\r");
	while(1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x4>
	...

08000e2c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e40:	2300      	movs	r3, #0
 8000e42:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000e46:	4a29      	ldr	r2, [pc, #164]	; (8000eec <MX_RTC_Init+0xc0>)
 8000e48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e4a:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e50:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000e52:	227f      	movs	r2, #127	; 0x7f
 8000e54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e56:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000e58:	22ff      	movs	r2, #255	; 0xff
 8000e5a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000e70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e74:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e7c:	481a      	ldr	r0, [pc, #104]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000e7e:	f002 fc39 	bl	80036f4 <HAL_RTC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000e88:	f7ff ffcc 	bl	8000e24 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000eac:	f002 fc90 	bl	80037d0 <HAL_RTC_SetTime>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8000eb6:	f7ff ffb5 	bl	8000e24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_RTC_Init+0xbc>)
 8000ed2:	f002 fd13 	bl	80038fc <HAL_RTC_SetDate>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000edc:	f7ff ffa2 	bl	8000e24 <Error_Handler>
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200004a0 	.word	0x200004a0
 8000eec:	40002800 	.word	0x40002800

08000ef0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_RTC_MspInit+0x30>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d107      	bne.n	8000f12 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_RTC_MspInit+0x34>)
 8000f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_RTC_MspInit+0x34>)
 8000f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40002800 	.word	0x40002800
 8000f24:	40021000 	.word	0x40021000

08000f28 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <MX_SPI2_Init+0x78>)
 8000f30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f5e:	2210      	movs	r2, #16
 8000f60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f76:	2207      	movs	r2, #7
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_SPI2_Init+0x74>)
 8000f88:	f002 fdf6 	bl	8003b78 <HAL_SPI_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f92:	f7ff ff47 	bl	8000e24 <Error_Handler>
  }

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200004c8 	.word	0x200004c8
 8000fa0:	40003800 	.word	0x40003800

08000fa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_SPI_MspInit+0x7c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d128      	bne.n	8001018 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_SPI_MspInit+0x80>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	4a16      	ldr	r2, [pc, #88]	; (8001024 <HAL_SPI_MspInit+0x80>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_SPI_MspInit+0x80>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_SPI_MspInit+0x80>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_SPI_MspInit+0x80>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_SPI_MspInit+0x80>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ff6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001008:	2305      	movs	r3, #5
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_SPI_MspInit+0x84>)
 8001014:	f001 f98c 	bl	8002330 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40003800 	.word	0x40003800
 8001024:	40021000 	.word	0x40021000
 8001028:	48000400 	.word	0x48000400

0800102c <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8001036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800103a:	6093      	str	r3, [r2, #8]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40007000 	.word	0x40007000

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_MspInit+0x44>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_MspInit+0x44>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6613      	str	r3, [r2, #96]	; 0x60
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_MspInit+0x44>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_MspInit+0x44>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_MspInit+0x44>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6593      	str	r3, [r2, #88]	; 0x58
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_MspInit+0x44>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001082:	f7ff ffd3 	bl	800102c <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e8:	f000 f9c2 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <FDCAN1_IT0_IRQHandler+0x10>)
 80010f6:	f000 fe91 	bl	8001e1c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000005c 	.word	0x2000005c

08001104 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800110a:	f003 fc41 	bl	8004990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000056c 	.word	0x2000056c

08001118 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800111e:	f003 fc37 	bl	8004990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000052c 	.word	0x2000052c

0800112c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001130:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001134:	f001 fa96 	bl	8002664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <SystemInit+0x28>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001146:	4a07      	ldr	r2, [pc, #28]	; (8001164 <SystemInit+0x28>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SystemInit+0x28>)
 8001152:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001156:	609a      	str	r2, [r3, #8]
#endif
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_TIM16_Init+0x44>)
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <MX_TIM16_Init+0x48>)
 8001170:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 127;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_TIM16_Init+0x44>)
 8001174:	227f      	movs	r2, #127	; 0x7f
 8001176:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_TIM16_Init+0x44>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_TIM16_Init+0x44>)
 8001180:	2201      	movs	r2, #1
 8001182:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_TIM16_Init+0x44>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_TIM16_Init+0x44>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_TIM16_Init+0x44>)
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_TIM16_Init+0x44>)
 8001198:	f003 fba4 	bl	80048e4 <HAL_TIM_Base_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80011a2:	f7ff fe3f 	bl	8000e24 <Error_Handler>
  }

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000056c 	.word	0x2000056c
 80011b0:	40014400 	.word	0x40014400

080011b4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_TIM17_Init+0x44>)
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <MX_TIM17_Init+0x48>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_TIM17_Init+0x44>)
 80011c0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80011c4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_TIM17_Init+0x44>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 200;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_TIM17_Init+0x44>)
 80011ce:	22c8      	movs	r2, #200	; 0xc8
 80011d0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_TIM17_Init+0x44>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_TIM17_Init+0x44>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_TIM17_Init+0x44>)
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_TIM17_Init+0x44>)
 80011e6:	f003 fb7d 	bl	80048e4 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80011f0:	f7ff fe18 	bl	8000e24 <Error_Handler>
  }

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000052c 	.word	0x2000052c
 80011fc:	40014800 	.word	0x40014800

08001200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a13      	ldr	r2, [pc, #76]	; (800125c <HAL_TIM_Base_MspInit+0x5c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10c      	bne.n	800122c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_TIM_Base_MspInit+0x60>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <HAL_TIM_Base_MspInit+0x60>)
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	6613      	str	r3, [r2, #96]	; 0x60
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_TIM_Base_MspInit+0x60>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800122a:	e010      	b.n	800124e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <HAL_TIM_Base_MspInit+0x64>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10b      	bne.n	800124e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_TIM_Base_MspInit+0x60>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <HAL_TIM_Base_MspInit+0x60>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001240:	6613      	str	r3, [r2, #96]	; 0x60
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <HAL_TIM_Base_MspInit+0x60>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40014400 	.word	0x40014400
 8001260:	40021000 	.word	0x40021000
 8001264:	40014800 	.word	0x40014800

08001268 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 800126e:	4a20      	ldr	r2, [pc, #128]	; (80012f0 <MX_LPUART1_UART_Init+0x88>)
 8001270:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 800129a:	2200      	movs	r2, #0
 800129c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012a4:	4811      	ldr	r0, [pc, #68]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 80012a6:	f003 fe09 	bl	8004ebc <HAL_UART_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80012b0:	f7ff fdb8 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b4:	2100      	movs	r1, #0
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 80012b8:	f005 f9ad 	bl	8006616 <HAL_UARTEx_SetTxFifoThreshold>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 80012c2:	f7ff fdaf 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4808      	ldr	r0, [pc, #32]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 80012ca:	f005 f9e2 	bl	8006692 <HAL_UARTEx_SetRxFifoThreshold>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 80012d4:	f7ff fda6 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_LPUART1_UART_Init+0x84>)
 80012da:	f005 f963 	bl	80065a4 <HAL_UARTEx_DisableFifoMode>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 80012e4:	f7ff fd9e 	bl	8000e24 <Error_Handler>
  }

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200005ac 	.word	0x200005ac
 80012f0:	40008000 	.word	0x40008000

080012f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a17      	ldr	r2, [pc, #92]	; (8001370 <HAL_UART_MspInit+0x7c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d128      	bne.n	8001368 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_UART_MspInit+0x80>)
 8001318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131a:	4a16      	ldr	r2, [pc, #88]	; (8001374 <HAL_UART_MspInit+0x80>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_UART_MspInit+0x80>)
 8001324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_UART_MspInit+0x80>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4a10      	ldr	r2, [pc, #64]	; (8001374 <HAL_UART_MspInit+0x80>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_UART_MspInit+0x80>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001346:	230c      	movs	r3, #12
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001356:	230c      	movs	r3, #12
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001364:	f000 ffe4 	bl	8002330 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40008000 	.word	0x40008000
 8001374:	40021000 	.word	0x40021000

08001378 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800137a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800137e:	490e      	ldr	r1, [pc, #56]	; (80013b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <LoopForever+0xe>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001394:	4c0b      	ldr	r4, [pc, #44]	; (80013c4 <LoopForever+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013a2:	f7ff fecb 	bl	800113c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f006 fd93 	bl	8007ed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013aa:	f7ff f9a7 	bl	80006fc <main>

080013ae <LoopForever>:

LoopForever:
    b LoopForever
 80013ae:	e7fe      	b.n	80013ae <LoopForever>
  ldr   r0, =_estack
 80013b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80013bc:	08007f88 	.word	0x08007f88
  ldr r2, =_sbss
 80013c0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80013c4:	20000ad4 	.word	0x20000ad4

080013c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_2_IRQHandler>

080013ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f95b 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 f80e 	bl	80013fc <HAL_InitTick>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	e001      	b.n	80013f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013ec:	f7ff fe2e 	bl	800104c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013f0:	79fb      	ldrb	r3, [r7, #7]

}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_InitTick+0x68>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d022      	beq.n	8001456 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_InitTick+0x6c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <HAL_InitTick+0x68>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800141c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001420:	fbb2 f3f3 	udiv	r3, r2, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f000 f966 	bl	80016f6 <HAL_SYSTICK_Config>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10f      	bne.n	8001450 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	d809      	bhi.n	800144a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001436:	2200      	movs	r2, #0
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	f04f 30ff 	mov.w	r0, #4294967295
 800143e:	f000 f932 	bl	80016a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_InitTick+0x70>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e007      	b.n	800145a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	e004      	b.n	800145a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e001      	b.n	800145a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000008 	.word	0x20000008
 8001468:	20000000 	.word	0x20000000
 800146c:	20000004 	.word	0x20000004

08001470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_IncTick+0x1c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_IncTick+0x20>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4413      	add	r3, r2
 800147e:	4a03      	ldr	r2, [pc, #12]	; (800148c <HAL_IncTick+0x1c>)
 8001480:	6013      	str	r3, [r2, #0]
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	20000638 	.word	0x20000638
 8001490:	20000008 	.word	0x20000008

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000638 	.word	0x20000638

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff ffee 	bl	8001494 <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d004      	beq.n	80014d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_Delay+0x40>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4413      	add	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d0:	bf00      	nop
 80014d2:	f7ff ffdf 	bl	8001494 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d8f7      	bhi.n	80014d2 <HAL_Delay+0x26>
  {
  }
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff29 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff40 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff90 	bl	80015e4 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5f 	bl	8001590 <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff33 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa4 	bl	800164c <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e147      	b.n	80019b2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7fe ff34 	bl	80005a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699a      	ldr	r2, [r3, #24]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0210 	bic.w	r2, r2, #16
 800174a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800174c:	f7ff fea2 	bl	8001494 <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001752:	e012      	b.n	800177a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001754:	f7ff fe9e 	bl	8001494 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b0a      	cmp	r3, #10
 8001760:	d90b      	bls.n	800177a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2203      	movs	r2, #3
 8001772:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e11b      	b.n	80019b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b08      	cmp	r3, #8
 8001786:	d0e5      	beq.n	8001754 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001798:	f7ff fe7c 	bl	8001494 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800179e:	e012      	b.n	80017c6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017a0:	f7ff fe78 	bl	8001494 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b0a      	cmp	r3, #10
 80017ac:	d90b      	bls.n	80017c6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2203      	movs	r2, #3
 80017be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0f5      	b.n	80019b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0e5      	beq.n	80017a0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0202 	orr.w	r2, r2, #2
 80017e2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a74      	ldr	r2, [pc, #464]	; (80019bc <HAL_FDCAN_Init+0x2ac>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d103      	bne.n	80017f6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80017ee:	4a74      	ldr	r2, [pc, #464]	; (80019c0 <HAL_FDCAN_Init+0x2b0>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7c1b      	ldrb	r3, [r3, #16]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d108      	bne.n	8001810 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699a      	ldr	r2, [r3, #24]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800180c:	619a      	str	r2, [r3, #24]
 800180e:	e007      	b.n	8001820 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800181e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7c5b      	ldrb	r3, [r3, #17]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d108      	bne.n	800183a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001836:	619a      	str	r2, [r3, #24]
 8001838:	e007      	b.n	800184a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699a      	ldr	r2, [r3, #24]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001848:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7c9b      	ldrb	r3, [r3, #18]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d108      	bne.n	8001864 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699a      	ldr	r2, [r3, #24]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001860:	619a      	str	r2, [r3, #24]
 8001862:	e007      	b.n	8001874 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699a      	ldr	r2, [r3, #24]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001872:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001898:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0210 	bic.w	r2, r2, #16
 80018a8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0204 	orr.w	r2, r2, #4
 80018c0:	619a      	str	r2, [r3, #24]
 80018c2:	e02c      	b.n	800191e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d028      	beq.n	800191e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d01c      	beq.n	800190e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0210 	orr.w	r2, r2, #16
 80018f2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d110      	bne.n	800191e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0220 	orr.w	r2, r2, #32
 800190a:	619a      	str	r2, [r3, #24]
 800190c:	e007      	b.n	800191e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0220 	orr.w	r2, r2, #32
 800191c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	3b01      	subs	r3, #1
 8001924:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	3b01      	subs	r3, #1
 800192c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800192e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001936:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	3b01      	subs	r3, #1
 8001940:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001946:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001948:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001952:	d115      	bne.n	8001980 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	3b01      	subs	r3, #1
 8001960:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001962:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	3b01      	subs	r3, #1
 800196a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800196c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	3b01      	subs	r3, #1
 8001976:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800197c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800197e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 fbe2 	bl	8002160 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40006400 	.word	0x40006400
 80019c0:	40006500 	.word	0x40006500

080019c4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d110      	bne.n	80019fa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699a      	ldr	r2, [r3, #24]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e006      	b.n	8001a08 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	f043 0204 	orr.w	r2, r3, #4
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
  }
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d12c      	bne.n	8001a86 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d007      	beq.n	8001a4c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e023      	b.n	8001a94 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 fbe8 	bl	8002238 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	fa01 f202 	lsl.w	r2, r1, r2
 8001a74:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e006      	b.n	8001a94 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	f043 0208 	orr.w	r2, r3, #8
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b08b      	sub	sp, #44	; 0x2c
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ab0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001ab2:	7efb      	ldrb	r3, [r7, #27]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	f040 80bc 	bne.w	8001c32 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b40      	cmp	r3, #64	; 0x40
 8001abe:	d121      	bne.n	8001b04 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d107      	bne.n	8001ae0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0af      	b.n	8001c40 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
 8001b02:	e020      	b.n	8001b46 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d107      	bne.n	8001b24 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e08d      	b.n	8001c40 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	440b      	add	r3, r1
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d107      	bne.n	8001b6a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0c9b      	lsrs	r3, r3, #18
 8001b60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e005      	b.n	8001b76 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	3304      	adds	r3, #4
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	0e1b      	lsrs	r3, r3, #24
 8001bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0fda      	lsrs	r2, r3, #31
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	3304      	adds	r3, #4
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	e00a      	b.n	8001c00 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	441a      	add	r2, r3
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	440b      	add	r3, r1
 8001bf6:	7812      	ldrb	r2, [r2, #0]
 8001bf8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d3eb      	bcc.n	8001bea <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b40      	cmp	r3, #64	; 0x40
 8001c16:	d105      	bne.n	8001c24 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001c22:	e004      	b.n	8001c2e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e006      	b.n	8001c40 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	f043 0208 	orr.w	r2, r3, #8
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
  }
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	372c      	adds	r7, #44	; 0x2c
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	08007f68 	.word	0x08007f68

08001c50 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c62:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d003      	beq.n	8001c72 <HAL_FDCAN_ActivateNotification+0x22>
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	f040 80c8 	bne.w	8001e02 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <HAL_FDCAN_ActivateNotification+0x3e>
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d03b      	beq.n	8001d06 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d031      	beq.n	8001d06 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d027      	beq.n	8001d06 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01d      	beq.n	8001d06 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d013      	beq.n	8001d06 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d004      	beq.n	8001cf2 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00c      	beq.n	8001d16 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d107      	bne.n	8001d16 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <HAL_FDCAN_ActivateNotification+0xda>
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d13b      	bne.n	8001da2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d131      	bne.n	8001da2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d127      	bne.n	8001da2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d11d      	bne.n	8001da2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d004      	beq.n	8001d7a <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d113      	bne.n	8001da2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d004      	beq.n	8001d8e <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00c      	beq.n	8001db2 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0202 	orr.w	r2, r2, #2
 8001db0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d009      	beq.n	8001dd0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d009      	beq.n	8001dee <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e006      	b.n	8001e10 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e06:	f043 0202 	orr.w	r2, r3, #2
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
  }
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	4013      	ands	r3, r2
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	6a3a      	ldr	r2, [r7, #32]
 8001e50:	4013      	ands	r3, r2
 8001e52:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e5e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e72:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001e76:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e8e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2240      	movs	r2, #64	; 0x40
 8001ebe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f92e 	bl	8002122 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d014      	beq.n	8001f0c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001eea:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f02:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001f04:	6939      	ldr	r1, [r7, #16]
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8ec 	bl	80020e4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f18:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8b6 	bl	800208e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6a3a      	ldr	r2, [r7, #32]
 8001f2e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f30:	6a39      	ldr	r1, [r7, #32]
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fdc4 	bl	8000ac0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f46:	69f9      	ldr	r1, [r7, #28]
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f8ab 	bl	80020a4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f72:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8a0 	bl	80020ba <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01a      	beq.n	8001fbe <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d013      	beq.n	8001fbe <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f9e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4013      	ands	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001fb6:	68f9      	ldr	r1, [r7, #12]
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f888 	bl	80020ce <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00e      	beq.n	8001fea <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f888 	bl	80020fa <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00e      	beq.n	8002016 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800200e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f87c 	bl	800210e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d011      	beq.n	8002048 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800203a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002040:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002056:	6979      	ldr	r1, [r7, #20]
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f876 	bl	800214a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f858 	bl	8002136 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800216a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2f      	ldr	r2, [pc, #188]	; (8002230 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d103      	bne.n	800217e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800217c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d103      	bne.n	8002190 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800218e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800219e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a6:	041a      	lsls	r2, r3, #16
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021c4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	061a      	lsls	r2, r3, #24
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e005      	b.n	8002212 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3304      	adds	r3, #4
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	429a      	cmp	r2, r3
 800221c:	d3f3      	bcc.n	8002206 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	4000a400 	.word	0x4000a400
 8002230:	40006800 	.word	0x40006800
 8002234:	40006c00 	.word	0x40006c00

08002238 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10a      	bne.n	8002264 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002256:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800225e:	4313      	orrs	r3, r2
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e00a      	b.n	800227a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800226c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002272:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002278:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002284:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800228a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002290:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	3304      	adds	r3, #4
 80022b6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	3304      	adds	r3, #4
 80022c2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e020      	b.n	800230c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3303      	adds	r3, #3
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3302      	adds	r3, #2
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	440b      	add	r3, r1
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022e2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3301      	adds	r3, #1
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	440b      	add	r3, r1
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80022f0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	440a      	add	r2, r1
 80022f8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80022fa:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	3304      	adds	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3304      	adds	r3, #4
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	4a06      	ldr	r2, [pc, #24]	; (800232c <FDCAN_CopyMessageToRAM+0xf4>)
 8002314:	5cd3      	ldrb	r3, [r2, r3]
 8002316:	461a      	mov	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4293      	cmp	r3, r2
 800231c:	d3d5      	bcc.n	80022ca <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800231e:	bf00      	nop
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	08007f68 	.word	0x08007f68

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800233e:	e15a      	b.n	80025f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	4013      	ands	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 814c 	beq.w	80025f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x38>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b12      	cmp	r3, #18
 8002366:	d123      	bne.n	80023b0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	6939      	ldr	r1, [r7, #16]
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d00b      	beq.n	8002404 <HAL_GPIO_Init+0xd4>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d007      	beq.n	8002404 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f8:	2b11      	cmp	r3, #17
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b12      	cmp	r3, #18
 8002402:	d130      	bne.n	8002466 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800243a:	2201      	movs	r2, #1
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 0201 	and.w	r2, r3, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80a6 	beq.w	80025f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a4:	4b5b      	ldr	r3, [pc, #364]	; (8002614 <HAL_GPIO_Init+0x2e4>)
 80024a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a8:	4a5a      	ldr	r2, [pc, #360]	; (8002614 <HAL_GPIO_Init+0x2e4>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6613      	str	r3, [r2, #96]	; 0x60
 80024b0:	4b58      	ldr	r3, [pc, #352]	; (8002614 <HAL_GPIO_Init+0x2e4>)
 80024b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024bc:	4a56      	ldr	r2, [pc, #344]	; (8002618 <HAL_GPIO_Init+0x2e8>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	3302      	adds	r3, #2
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024e6:	d01f      	beq.n	8002528 <HAL_GPIO_Init+0x1f8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a4c      	ldr	r2, [pc, #304]	; (800261c <HAL_GPIO_Init+0x2ec>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d019      	beq.n	8002524 <HAL_GPIO_Init+0x1f4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a4b      	ldr	r2, [pc, #300]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d013      	beq.n	8002520 <HAL_GPIO_Init+0x1f0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a4a      	ldr	r2, [pc, #296]	; (8002624 <HAL_GPIO_Init+0x2f4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00d      	beq.n	800251c <HAL_GPIO_Init+0x1ec>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a49      	ldr	r2, [pc, #292]	; (8002628 <HAL_GPIO_Init+0x2f8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d007      	beq.n	8002518 <HAL_GPIO_Init+0x1e8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a48      	ldr	r2, [pc, #288]	; (800262c <HAL_GPIO_Init+0x2fc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_GPIO_Init+0x1e4>
 8002510:	2305      	movs	r3, #5
 8002512:	e00a      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 8002514:	2306      	movs	r3, #6
 8002516:	e008      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 8002518:	2304      	movs	r3, #4
 800251a:	e006      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 800251c:	2303      	movs	r3, #3
 800251e:	e004      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 8002520:	2302      	movs	r3, #2
 8002522:	e002      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 8002528:	2300      	movs	r3, #0
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	f002 0203 	and.w	r2, r2, #3
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	4093      	lsls	r3, r2
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800253a:	4937      	ldr	r1, [pc, #220]	; (8002618 <HAL_GPIO_Init+0x2e8>)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002548:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_GPIO_Init+0x300>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800256c:	4a30      	ldr	r2, [pc, #192]	; (8002630 <HAL_GPIO_Init+0x300>)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_GPIO_Init+0x300>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	43db      	mvns	r3, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002596:	4a26      	ldr	r2, [pc, #152]	; (8002630 <HAL_GPIO_Init+0x300>)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <HAL_GPIO_Init+0x300>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025c0:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <HAL_GPIO_Init+0x300>)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_GPIO_Init+0x300>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ea:	4a11      	ldr	r2, [pc, #68]	; (8002630 <HAL_GPIO_Init+0x300>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3301      	adds	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	f47f ae9d 	bne.w	8002340 <HAL_GPIO_Init+0x10>
  }
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	40010000 	.word	0x40010000
 800261c:	48000400 	.word	0x48000400
 8002620:	48000800 	.word	0x48000800
 8002624:	48000c00 	.word	0x48000c00
 8002628:	48001000 	.word	0x48001000
 800262c:	48001400 	.word	0x48001400
 8002630:	40010400 	.word	0x40010400

08002634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
 8002640:	4613      	mov	r3, r2
 8002642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002644:	787b      	ldrb	r3, [r7, #1]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002650:	e002      	b.n	8002658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f806 	bl	8002694 <HAL_GPIO_EXTI_Callback>
  }
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40010400 	.word	0x40010400

08002694 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d141      	bne.n	800273e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ba:	4b4b      	ldr	r3, [pc, #300]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c6:	d131      	bne.n	800272c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026c8:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ce:	4a46      	ldr	r2, [pc, #280]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d8:	4b43      	ldr	r3, [pc, #268]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026e0:	4a41      	ldr	r2, [pc, #260]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026e8:	4b40      	ldr	r3, [pc, #256]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2232      	movs	r2, #50	; 0x32
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	4a3f      	ldr	r2, [pc, #252]	; (80027f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	0c9b      	lsrs	r3, r3, #18
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fe:	e002      	b.n	8002706 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3b01      	subs	r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002712:	d102      	bne.n	800271a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f2      	bne.n	8002700 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800271a:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002726:	d158      	bne.n	80027da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e057      	b.n	80027dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800272c:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002732:	4a2d      	ldr	r2, [pc, #180]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800273c:	e04d      	b.n	80027da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002744:	d141      	bne.n	80027ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002746:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800274e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002752:	d131      	bne.n	80027b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275a:	4a23      	ldr	r2, [pc, #140]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002764:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800276c:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002772:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2232      	movs	r2, #50	; 0x32
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	0c9b      	lsrs	r3, r3, #18
 8002786:	3301      	adds	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278a:	e002      	b.n	8002792 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3b01      	subs	r3, #1
 8002790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	d102      	bne.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f2      	bne.n	800278c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b2:	d112      	bne.n	80027da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e011      	b.n	80027dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027c8:	e007      	b.n	80027da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40007000 	.word	0x40007000
 80027ec:	20000000 	.word	0x20000000
 80027f0:	431bde83 	.word	0x431bde83

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e308      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d075      	beq.n	80028fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002812:	4ba3      	ldr	r3, [pc, #652]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800281c:	4ba0      	ldr	r3, [pc, #640]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b0c      	cmp	r3, #12
 800282a:	d102      	bne.n	8002832 <HAL_RCC_OscConfig+0x3e>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d002      	beq.n	8002838 <HAL_RCC_OscConfig+0x44>
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d10b      	bne.n	8002850 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	4b99      	ldr	r3, [pc, #612]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d05b      	beq.n	80028fc <HAL_RCC_OscConfig+0x108>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d157      	bne.n	80028fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e2e3      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x74>
 800285a:	4b91      	ldr	r3, [pc, #580]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a90      	ldr	r2, [pc, #576]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xb0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0x98>
 8002872:	4b8b      	ldr	r3, [pc, #556]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a8a      	ldr	r2, [pc, #552]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b88      	ldr	r3, [pc, #544]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a87      	ldr	r2, [pc, #540]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xb0>
 800288c:	4b84      	ldr	r3, [pc, #528]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a83      	ldr	r2, [pc, #524]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b81      	ldr	r3, [pc, #516]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a80      	ldr	r2, [pc, #512]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fdf2 	bl	8001494 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe fdee 	bl	8001494 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e2a8      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c6:	4b76      	ldr	r3, [pc, #472]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xc0>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fdde 	bl	8001494 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fdda 	bl	8001494 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e294      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ee:	4b6c      	ldr	r3, [pc, #432]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0xe8>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d075      	beq.n	80029f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002914:	4b62      	ldr	r3, [pc, #392]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b0c      	cmp	r3, #12
 8002922:	d102      	bne.n	800292a <HAL_RCC_OscConfig+0x136>
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d002      	beq.n	8002930 <HAL_RCC_OscConfig+0x13c>
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d11f      	bne.n	8002970 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002930:	4b5b      	ldr	r3, [pc, #364]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_OscConfig+0x154>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e267      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002948:	4b55      	ldr	r3, [pc, #340]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	4952      	ldr	r1, [pc, #328]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800295c:	4b51      	ldr	r3, [pc, #324]	; (8002aa4 <HAL_RCC_OscConfig+0x2b0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fd4b 	bl	80013fc <HAL_InitTick>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d043      	beq.n	80029f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e253      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d023      	beq.n	80029c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002978:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a48      	ldr	r2, [pc, #288]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800297e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fd86 	bl	8001494 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298c:	f7fe fd82 	bl	8001494 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e23c      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299e:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	061b      	lsls	r3, r3, #24
 80029b8:	4939      	ldr	r1, [pc, #228]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
 80029be:	e01a      	b.n	80029f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a36      	ldr	r2, [pc, #216]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80029c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe fd62 	bl	8001494 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d4:	f7fe fd5e 	bl	8001494 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e218      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1e0>
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d03c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0a:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a10:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fd3b 	bl	8001494 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a22:	f7fe fd37 	bl	8001494 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1f1      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ef      	beq.n	8002a22 <HAL_RCC_OscConfig+0x22e>
 8002a42:	e01b      	b.n	8002a7c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4a:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fe fd1e 	bl	8001494 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7fe fd1a 	bl	8001494 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1d4      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ef      	bne.n	8002a5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80ab 	beq.w	8002be0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2b4>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e005      	b.n	8002aaa <HAL_RCC_OscConfig+0x2b6>
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00d      	beq.n	8002aca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	4baf      	ldr	r3, [pc, #700]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	4aae      	ldr	r2, [pc, #696]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aba:	4bac      	ldr	r3, [pc, #688]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aca:	4ba9      	ldr	r3, [pc, #676]	; (8002d70 <HAL_RCC_OscConfig+0x57c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d118      	bne.n	8002b08 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad6:	4ba6      	ldr	r3, [pc, #664]	; (8002d70 <HAL_RCC_OscConfig+0x57c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4aa5      	ldr	r2, [pc, #660]	; (8002d70 <HAL_RCC_OscConfig+0x57c>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fcd7 	bl	8001494 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aea:	f7fe fcd3 	bl	8001494 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e18d      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afc:	4b9c      	ldr	r3, [pc, #624]	; (8002d70 <HAL_RCC_OscConfig+0x57c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d108      	bne.n	8002b22 <HAL_RCC_OscConfig+0x32e>
 8002b10:	4b96      	ldr	r3, [pc, #600]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	4a95      	ldr	r2, [pc, #596]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b20:	e024      	b.n	8002b6c <HAL_RCC_OscConfig+0x378>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d110      	bne.n	8002b4c <HAL_RCC_OscConfig+0x358>
 8002b2a:	4b90      	ldr	r3, [pc, #576]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	4a8e      	ldr	r2, [pc, #568]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b3a:	4b8c      	ldr	r3, [pc, #560]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b40:	4a8a      	ldr	r2, [pc, #552]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b4a:	e00f      	b.n	8002b6c <HAL_RCC_OscConfig+0x378>
 8002b4c:	4b87      	ldr	r3, [pc, #540]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	4a86      	ldr	r2, [pc, #536]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b5c:	4b83      	ldr	r3, [pc, #524]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	4a82      	ldr	r2, [pc, #520]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b64:	f023 0304 	bic.w	r3, r3, #4
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d016      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7fe fc8e 	bl	8001494 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fc8a 	bl	8001494 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e142      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b92:	4b76      	ldr	r3, [pc, #472]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ed      	beq.n	8002b7c <HAL_RCC_OscConfig+0x388>
 8002ba0:	e015      	b.n	8002bce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fc77 	bl	8001494 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fc73 	bl	8001494 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e12b      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bc0:	4b6a      	ldr	r3, [pc, #424]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ed      	bne.n	8002baa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bce:	7ffb      	ldrb	r3, [r7, #31]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	4b65      	ldr	r3, [pc, #404]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	4a64      	ldr	r2, [pc, #400]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bde:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d03c      	beq.n	8002c66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01c      	beq.n	8002c2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bf4:	4b5d      	ldr	r3, [pc, #372]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bfa:	4a5c      	ldr	r2, [pc, #368]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fc46 	bl	8001494 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c0c:	f7fe fc42 	bl	8001494 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0fc      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c1e:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0ef      	beq.n	8002c0c <HAL_RCC_OscConfig+0x418>
 8002c2c:	e01b      	b.n	8002c66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c2e:	4b4f      	ldr	r3, [pc, #316]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c34:	4a4d      	ldr	r2, [pc, #308]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fc29 	bl	8001494 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c46:	f7fe fc25 	bl	8001494 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0df      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c58:	4b44      	ldr	r3, [pc, #272]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ef      	bne.n	8002c46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80d3 	beq.w	8002e16 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c70:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	f000 808d 	beq.w	8002d98 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d15a      	bne.n	8002d3c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	4b39      	ldr	r3, [pc, #228]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a38      	ldr	r2, [pc, #224]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002c8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe fbff 	bl	8001494 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9a:	f7fe fbfb 	bl	8001494 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0b5      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cac:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_RCC_OscConfig+0x580>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6a11      	ldr	r1, [r2, #32]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc8:	3a01      	subs	r2, #1
 8002cca:	0112      	lsls	r2, r2, #4
 8002ccc:	4311      	orrs	r1, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002cd2:	0212      	lsls	r2, r2, #8
 8002cd4:	4311      	orrs	r1, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cda:	0852      	lsrs	r2, r2, #1
 8002cdc:	3a01      	subs	r2, #1
 8002cde:	0552      	lsls	r2, r2, #21
 8002ce0:	4311      	orrs	r1, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ce6:	0852      	lsrs	r2, r2, #1
 8002ce8:	3a01      	subs	r2, #1
 8002cea:	0652      	lsls	r2, r2, #25
 8002cec:	4311      	orrs	r1, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cf2:	06d2      	lsls	r2, r2, #27
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	491d      	ldr	r1, [pc, #116]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fbbe 	bl	8001494 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fbba 	bl	8001494 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e074      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x528>
 8002d3a:	e06c      	b.n	8002e16 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d46:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d4e:	f023 0303 	bic.w	r3, r3, #3
 8002d52:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_RCC_OscConfig+0x578>)
 8002d5a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe fb96 	bl	8001494 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6a:	e00e      	b.n	8002d8a <HAL_RCC_OscConfig+0x596>
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40007000 	.word	0x40007000
 8002d74:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe fb8c 	bl	8001494 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e046      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_RCC_OscConfig+0x62c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x584>
 8002d96:	e03e      	b.n	8002e16 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e039      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002da4:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_RCC_OscConfig+0x62c>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d12c      	bne.n	8002e12 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d123      	bne.n	8002e12 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d11b      	bne.n	8002e12 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d113      	bne.n	8002e12 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	085b      	lsrs	r3, r3, #1
 8002df6:	3b01      	subs	r3, #1
 8002df8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000

08002e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e11e      	b.n	800307a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b91      	ldr	r3, [pc, #580]	; (8003084 <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d910      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <HAL_RCC_ClockConfig+0x260>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 020f 	bic.w	r2, r3, #15
 8002e52:	498c      	ldr	r1, [pc, #560]	; (8003084 <HAL_RCC_ClockConfig+0x260>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b8a      	ldr	r3, [pc, #552]	; (8003084 <HAL_RCC_ClockConfig+0x260>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e106      	b.n	800307a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d073      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d129      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e80:	4b81      	ldr	r3, [pc, #516]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0f4      	b.n	800307a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e90:	f000 f99e 	bl	80031d0 <RCC_GetSysClockFreqFromPLLSource>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4a7c      	ldr	r2, [pc, #496]	; (800308c <HAL_RCC_ClockConfig+0x268>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d93f      	bls.n	8002f1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e9e:	4b7a      	ldr	r3, [pc, #488]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d033      	beq.n	8002f1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d12f      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ebe:	4b72      	ldr	r3, [pc, #456]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ec6:	4a70      	ldr	r2, [pc, #448]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ecc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e024      	b.n	8002f1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002edc:	4b6a      	ldr	r3, [pc, #424]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0c6      	b.n	800307a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eec:	4b66      	ldr	r3, [pc, #408]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0be      	b.n	800307a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002efc:	f000 f8ce 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4a61      	ldr	r2, [pc, #388]	; (800308c <HAL_RCC_ClockConfig+0x268>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d909      	bls.n	8002f1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f0a:	4b5f      	ldr	r3, [pc, #380]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f12:	4a5d      	ldr	r2, [pc, #372]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f1e:	4b5a      	ldr	r3, [pc, #360]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4957      	ldr	r1, [pc, #348]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fe fab0 	bl	8001494 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f38:	f7fe faac 	bl	8001494 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e095      	b.n	800307a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	4b4e      	ldr	r3, [pc, #312]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 020c 	and.w	r2, r3, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d1eb      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d023      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b43      	ldr	r3, [pc, #268]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a42      	ldr	r2, [pc, #264]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002f7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d007      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f90:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f98:	4a3b      	ldr	r2, [pc, #236]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002f9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b39      	ldr	r3, [pc, #228]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4936      	ldr	r1, [pc, #216]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b80      	cmp	r3, #128	; 0x80
 8002fb8:	d105      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fba:	4b33      	ldr	r3, [pc, #204]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	4a32      	ldr	r2, [pc, #200]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8002fc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc6:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <HAL_RCC_ClockConfig+0x260>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d21d      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_RCC_ClockConfig+0x260>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 020f 	bic.w	r2, r3, #15
 8002fdc:	4929      	ldr	r1, [pc, #164]	; (8003084 <HAL_RCC_ClockConfig+0x260>)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fa56 	bl	8001494 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe fa52 	bl	8001494 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e03b      	b.n	800307a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_RCC_ClockConfig+0x260>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d1ed      	bne.n	8002fec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4917      	ldr	r1, [pc, #92]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	490f      	ldr	r1, [pc, #60]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800304e:	f000 f825 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8003052:	4601      	mov	r1, r0
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_RCC_ClockConfig+0x264>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <HAL_RCC_ClockConfig+0x26c>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	fa21 f303 	lsr.w	r3, r1, r3
 800306a:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <HAL_RCC_ClockConfig+0x270>)
 800306c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x274>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe f9c2 	bl	80013fc <HAL_InitTick>
 8003078:	4603      	mov	r3, r0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40022000 	.word	0x40022000
 8003088:	40021000 	.word	0x40021000
 800308c:	04c4b400 	.word	0x04c4b400
 8003090:	08007f50 	.word	0x08007f50
 8003094:	20000000 	.word	0x20000000
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030a2:	4b2c      	ldr	r3, [pc, #176]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d102      	bne.n	80030b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030ae:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	e047      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d102      	bne.n	80030c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030c0:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_RCC_GetSysClockFreq+0xc0>)
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e03e      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030c6:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d136      	bne.n	8003140 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	3301      	adds	r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d10c      	bne.n	800310a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030f0:	4a1a      	ldr	r2, [pc, #104]	; (800315c <HAL_RCC_GetSysClockFreq+0xc0>)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	4a16      	ldr	r2, [pc, #88]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030fa:	68d2      	ldr	r2, [r2, #12]
 80030fc:	0a12      	lsrs	r2, r2, #8
 80030fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	617b      	str	r3, [r7, #20]
      break;
 8003108:	e00c      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800310a:	4a13      	ldr	r2, [pc, #76]	; (8003158 <HAL_RCC_GetSysClockFreq+0xbc>)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	4a10      	ldr	r2, [pc, #64]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003114:	68d2      	ldr	r2, [r2, #12]
 8003116:	0a12      	lsrs	r2, r2, #8
 8003118:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800311c:	fb02 f303 	mul.w	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
      break;
 8003122:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	0e5b      	lsrs	r3, r3, #25
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	e001      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003144:	693b      	ldr	r3, [r7, #16]
}
 8003146:	4618      	mov	r0, r3
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	00f42400 	.word	0x00f42400
 800315c:	016e3600 	.word	0x016e3600

08003160 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_GetHCLKFreq+0x14>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000

08003178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800317c:	f7ff fff0 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 8003180:	4601      	mov	r1, r0
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800318e:	5cd3      	ldrb	r3, [r2, r3]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	08007f60 	.word	0x08007f60

080031a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031a8:	f7ff ffda 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 80031ac:	4601      	mov	r1, r0
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0adb      	lsrs	r3, r3, #11
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	08007f60 	.word	0x08007f60

080031d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3301      	adds	r3, #1
 80031ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d10c      	bne.n	800320e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031f4:	4a17      	ldr	r2, [pc, #92]	; (8003254 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031fe:	68d2      	ldr	r2, [r2, #12]
 8003200:	0a12      	lsrs	r2, r2, #8
 8003202:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	617b      	str	r3, [r7, #20]
    break;
 800320c:	e00c      	b.n	8003228 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800320e:	4a12      	ldr	r2, [pc, #72]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	fbb2 f3f3 	udiv	r3, r2, r3
 8003216:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003218:	68d2      	ldr	r2, [r2, #12]
 800321a:	0a12      	lsrs	r2, r2, #8
 800321c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003220:	fb02 f303 	mul.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
    break;
 8003226:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0e5b      	lsrs	r3, r3, #25
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	3301      	adds	r3, #1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003242:	687b      	ldr	r3, [r7, #4]
}
 8003244:	4618      	mov	r0, r3
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40021000 	.word	0x40021000
 8003254:	016e3600 	.word	0x016e3600
 8003258:	00f42400 	.word	0x00f42400

0800325c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003264:	2300      	movs	r3, #0
 8003266:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003268:	2300      	movs	r3, #0
 800326a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8098 	beq.w	80033aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327e:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	4b40      	ldr	r3, [pc, #256]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	4a3f      	ldr	r2, [pc, #252]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	6593      	str	r3, [r2, #88]	; 0x58
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a2:	2301      	movs	r3, #1
 80032a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a39      	ldr	r2, [pc, #228]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032b2:	f7fe f8ef 	bl	8001494 <HAL_GetTick>
 80032b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032b8:	e009      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ba:	f7fe f8eb 	bl	8001494 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d902      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	74fb      	strb	r3, [r7, #19]
        break;
 80032cc:	e005      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0ef      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d159      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032e0:	4b2a      	ldr	r3, [pc, #168]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01e      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d019      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032fc:	4b23      	ldr	r3, [pc, #140]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003306:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003308:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	4a1f      	ldr	r2, [pc, #124]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003318:	4b1c      	ldr	r3, [pc, #112]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	4a1b      	ldr	r2, [pc, #108]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003328:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fe f8ab 	bl	8001494 <HAL_GetTick>
 800333e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003340:	e00b      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe f8a7 	bl	8001494 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d902      	bls.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	74fb      	strb	r3, [r7, #19]
            break;
 8003358:	e006      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ec      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10b      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337c:	4903      	ldr	r1, [pc, #12]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003384:	e008      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	74bb      	strb	r3, [r7, #18]
 800338a:	e005      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800338c:	40021000 	.word	0x40021000
 8003390:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003398:	7c7b      	ldrb	r3, [r7, #17]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339e:	4baf      	ldr	r3, [pc, #700]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	4aae      	ldr	r2, [pc, #696]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b6:	4ba9      	ldr	r3, [pc, #676]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033bc:	f023 0203 	bic.w	r2, r3, #3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	49a5      	ldr	r1, [pc, #660]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d8:	4ba0      	ldr	r3, [pc, #640]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	f023 020c 	bic.w	r2, r3, #12
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	499d      	ldr	r1, [pc, #628]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033fa:	4b98      	ldr	r3, [pc, #608]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4994      	ldr	r1, [pc, #592]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800341c:	4b8f      	ldr	r3, [pc, #572]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003422:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	498c      	ldr	r1, [pc, #560]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800343e:	4b87      	ldr	r3, [pc, #540]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	4983      	ldr	r1, [pc, #524]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003460:	4b7e      	ldr	r3, [pc, #504]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	497b      	ldr	r1, [pc, #492]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003482:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	4972      	ldr	r1, [pc, #456]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034a4:	4b6d      	ldr	r3, [pc, #436]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	496a      	ldr	r1, [pc, #424]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034c6:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	4961      	ldr	r1, [pc, #388]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034e8:	4b5c      	ldr	r3, [pc, #368]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ee:	f023 0203 	bic.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	4959      	ldr	r1, [pc, #356]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800350a:	4b54      	ldr	r3, [pc, #336]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	4950      	ldr	r1, [pc, #320]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d015      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800352c:	4b4b      	ldr	r3, [pc, #300]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4948      	ldr	r1, [pc, #288]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354a:	d105      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800354c:	4b43      	ldr	r3, [pc, #268]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a42      	ldr	r2, [pc, #264]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003556:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003560:	2b00      	cmp	r3, #0
 8003562:	d015      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003564:	4b3d      	ldr	r3, [pc, #244]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	493a      	ldr	r1, [pc, #232]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003582:	d105      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003584:	4b35      	ldr	r3, [pc, #212]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a34      	ldr	r2, [pc, #208]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800358a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800358e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d015      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800359c:	4b2f      	ldr	r3, [pc, #188]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	492c      	ldr	r1, [pc, #176]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035ba:	d105      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a26      	ldr	r2, [pc, #152]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d015      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d4:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	491e      	ldr	r1, [pc, #120]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f2:	d105      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d015      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800360c:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4910      	ldr	r1, [pc, #64]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362a:	d105      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a0a      	ldr	r2, [pc, #40]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003636:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d018      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	4902      	ldr	r1, [pc, #8]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800365a:	e001      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800365c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003668:	d105      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800366a:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a20      	ldr	r2, [pc, #128]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d015      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003682:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003690:	4917      	ldr	r1, [pc, #92]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a0:	d105      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036a2:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ac:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d015      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c8:	4909      	ldr	r1, [pc, #36]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036d8:	d105      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80036e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000

080036f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d05c      	beq.n	80037c0 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd fbe8 	bl	8000ef0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_RTC_Init+0xd8>)
 800372a:	22ca      	movs	r2, #202	; 0xca
 800372c:	625a      	str	r2, [r3, #36]	; 0x24
 800372e:	4b27      	ldr	r3, [pc, #156]	; (80037cc <HAL_RTC_Init+0xd8>)
 8003730:	2253      	movs	r2, #83	; 0x53
 8003732:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f98d 	bl	8003a54 <RTC_EnterInitMode>
 800373a:	4603      	mov	r3, r0
 800373c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d133      	bne.n	80037ac <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003744:	4b21      	ldr	r3, [pc, #132]	; (80037cc <HAL_RTC_Init+0xd8>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	4a20      	ldr	r2, [pc, #128]	; (80037cc <HAL_RTC_Init+0xd8>)
 800374a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800374e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003752:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_RTC_Init+0xd8>)
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6859      	ldr	r1, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	4319      	orrs	r1, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	430b      	orrs	r3, r1
 8003768:	4918      	ldr	r1, [pc, #96]	; (80037cc <HAL_RTC_Init+0xd8>)
 800376a:	4313      	orrs	r3, r2
 800376c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	4914      	ldr	r1, [pc, #80]	; (80037cc <HAL_RTC_Init+0xd8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f99c 	bl	8003abc <RTC_ExitInitMode>
 8003784:	4603      	mov	r3, r0
 8003786:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10e      	bne.n	80037ac <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <HAL_RTC_Init+0xd8>)
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a19      	ldr	r1, [r3, #32]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	4319      	orrs	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	4909      	ldr	r1, [pc, #36]	; (80037cc <HAL_RTC_Init+0xd8>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037ac:	4b07      	ldr	r3, [pc, #28]	; (80037cc <HAL_RTC_Init+0xd8>)
 80037ae:	22ff      	movs	r2, #255	; 0xff
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d103      	bne.n	80037c0 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40002800 	.word	0x40002800

080037d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_RTC_SetTime+0x1a>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e081      	b.n	80038ee <HAL_RTC_SetTime+0x11e>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037fa:	4b3f      	ldr	r3, [pc, #252]	; (80038f8 <HAL_RTC_SetTime+0x128>)
 80037fc:	22ca      	movs	r2, #202	; 0xca
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
 8003800:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <HAL_RTC_SetTime+0x128>)
 8003802:	2253      	movs	r2, #83	; 0x53
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f924 	bl	8003a54 <RTC_EnterInitMode>
 800380c:	4603      	mov	r3, r0
 800380e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d15c      	bne.n	80038d0 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d125      	bne.n	8003868 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800381c:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <HAL_RTC_SetTime+0x128>)
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2200      	movs	r2, #0
 800382c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f980 	bl	8003b38 <RTC_ByteToBcd2>
 8003838:	4603      	mov	r3, r0
 800383a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	785b      	ldrb	r3, [r3, #1]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 f979 	bl	8003b38 <RTC_ByteToBcd2>
 8003846:	4603      	mov	r3, r0
 8003848:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800384a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	789b      	ldrb	r3, [r3, #2]
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f971 	bl	8003b38 <RTC_ByteToBcd2>
 8003856:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003858:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	78db      	ldrb	r3, [r3, #3]
 8003860:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e017      	b.n	8003898 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003868:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <HAL_RTC_SetTime+0x128>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	785b      	ldrb	r3, [r3, #1]
 8003884:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003886:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800388c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	78db      	ldrb	r3, [r3, #3]
 8003892:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003898:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <HAL_RTC_SetTime+0x128>)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80038a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038a4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80038a6:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <HAL_RTC_SetTime+0x128>)
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <HAL_RTC_SetTime+0x128>)
 80038ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b0:	6193      	str	r3, [r2, #24]

    /* Configure the RTC_CR register */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_RTC_SetTime+0x128>)
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	68d9      	ldr	r1, [r3, #12]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	430b      	orrs	r3, r1
 80038c0:	490d      	ldr	r1, [pc, #52]	; (80038f8 <HAL_RTC_SetTime+0x128>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f8f8 	bl	8003abc <RTC_ExitInitMode>
 80038cc:	4603      	mov	r3, r0
 80038ce:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038d0:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_RTC_SetTime+0x128>)
 80038d2:	22ff      	movs	r2, #255	; 0xff
 80038d4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d103      	bne.n	80038e4 <HAL_RTC_SetTime+0x114>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd90      	pop	{r4, r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40002800 	.word	0x40002800

080038fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_RTC_SetDate+0x1a>
 8003912:	2302      	movs	r3, #2
 8003914:	e071      	b.n	80039fa <HAL_RTC_SetDate+0xfe>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10e      	bne.n	800394a <HAL_RTC_SetDate+0x4e>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	785b      	ldrb	r3, [r3, #1]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	f023 0310 	bic.w	r3, r3, #16
 8003940:	b2db      	uxtb	r3, r3
 8003942:	330a      	adds	r3, #10
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11c      	bne.n	800398a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	78db      	ldrb	r3, [r3, #3]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f8ef 	bl	8003b38 <RTC_ByteToBcd2>
 800395a:	4603      	mov	r3, r0
 800395c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	785b      	ldrb	r3, [r3, #1]
 8003962:	4618      	mov	r0, r3
 8003964:	f000 f8e8 	bl	8003b38 <RTC_ByteToBcd2>
 8003968:	4603      	mov	r3, r0
 800396a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800396c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	789b      	ldrb	r3, [r3, #2]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f8e0 	bl	8003b38 <RTC_ByteToBcd2>
 8003978:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800397a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	e00e      	b.n	80039a8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	78db      	ldrb	r3, [r3, #3]
 800398e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	785b      	ldrb	r3, [r3, #1]
 8003994:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003996:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800399c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_RTC_SetDate+0x108>)
 80039aa:	22ca      	movs	r2, #202	; 0xca
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_RTC_SetDate+0x108>)
 80039b0:	2253      	movs	r2, #83	; 0x53
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f84d 	bl	8003a54 <RTC_EnterInitMode>
 80039ba:	4603      	mov	r3, r0
 80039bc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80039be:	7cfb      	ldrb	r3, [r7, #19]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10b      	bne.n	80039dc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80039c4:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <HAL_RTC_SetDate+0x108>)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f872 	bl	8003abc <RTC_ExitInitMode>
 80039d8:	4603      	mov	r3, r0
 80039da:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RTC_SetDate+0x108>)
 80039de:	22ff      	movs	r2, #255	; 0xff
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 80039e2:	7cfb      	ldrb	r3, [r7, #19]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <HAL_RTC_SetDate+0xf4>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40002800 	.word	0x40002800

08003a08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <HAL_RTC_WaitForSynchro+0x48>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4a0e      	ldr	r2, [pc, #56]	; (8003a50 <HAL_RTC_WaitForSynchro+0x48>)
 8003a16:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8003a1a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003a1c:	f7fd fd3a 	bl	8001494 <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003a22:	e009      	b.n	8003a38 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a24:	f7fd fd36 	bl	8001494 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a32:	d901      	bls.n	8003a38 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e006      	b.n	8003a46 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RTC_WaitForSynchro+0x48>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0ef      	beq.n	8003a24 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40002800 	.word	0x40002800

08003a54 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <RTC_EnterInitMode+0x64>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d120      	bne.n	8003aae <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <RTC_EnterInitMode+0x64>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <RTC_EnterInitMode+0x64>)
 8003a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a76:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003a78:	f7fd fd0c 	bl	8001494 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003a7e:	e00d      	b.n	8003a9c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003a80:	f7fd fd08 	bl	8001494 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a8e:	d905      	bls.n	8003a9c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2203      	movs	r2, #3
 8003a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <RTC_EnterInitMode+0x64>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <RTC_EnterInitMode+0x5a>
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d1e8      	bne.n	8003a80 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40002800 	.word	0x40002800

08003abc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <RTC_ExitInitMode+0x78>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <RTC_ExitInitMode+0x78>)
 8003ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003ad4:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <RTC_ExitInitMode+0x78>)
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10c      	bne.n	8003afa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff91 	bl	8003a08 <HAL_RTC_WaitForSynchro>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01e      	beq.n	8003b2a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2203      	movs	r2, #3
 8003af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e017      	b.n	8003b2a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003afa:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <RTC_ExitInitMode+0x78>)
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	4a0d      	ldr	r2, [pc, #52]	; (8003b34 <RTC_ExitInitMode+0x78>)
 8003b00:	f023 0320 	bic.w	r3, r3, #32
 8003b04:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ff7e 	bl	8003a08 <HAL_RTC_WaitForSynchro>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <RTC_ExitInitMode+0x78>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <RTC_ExitInitMode+0x78>)
 8003b24:	f043 0320 	orr.w	r3, r3, #32
 8003b28:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40002800 	.word	0x40002800

08003b38 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003b4a:	e005      	b.n	8003b58 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003b52:	7afb      	ldrb	r3, [r7, #11]
 8003b54:	3b0a      	subs	r3, #10
 8003b56:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003b58:	7afb      	ldrb	r3, [r7, #11]
 8003b5a:	2b09      	cmp	r3, #9
 8003b5c:	d8f6      	bhi.n	8003b4c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	7afb      	ldrb	r3, [r7, #11]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	b2db      	uxtb	r3, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e084      	b.n	8003c94 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7fd f9fd 	bl	8000fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bca:	d902      	bls.n	8003bd2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e002      	b.n	8003bd8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003be0:	d007      	beq.n	8003bf2 <HAL_SPI_Init+0x7a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bea:	d002      	beq.n	8003bf2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c02:	d903      	bls.n	8003c0c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	631a      	str	r2, [r3, #48]	; 0x30
 8003c0a:	e002      	b.n	8003c12 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	ea42 0103 	orr.w	r1, r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	f003 0204 	and.w	r2, r3, #4
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	ea42 0103 	orr.w	r1, r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_SPI_Transmit+0x22>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e150      	b.n	8003f60 <HAL_SPI_Transmit+0x2c4>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cc6:	f7fd fbe5 	bl	8001494 <HAL_GetTick>
 8003cca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d002      	beq.n	8003ce2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ce0:	e135      	b.n	8003f4e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_SPI_Transmit+0x52>
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cf2:	e12c      	b.n	8003f4e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	88fa      	ldrh	r2, [r7, #6]
 8003d12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3e:	d107      	bne.n	8003d50 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	d007      	beq.n	8003d6e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d76:	d94b      	bls.n	8003e10 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_SPI_Transmit+0xea>
 8003d80:	8afb      	ldrh	r3, [r7, #22]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d13e      	bne.n	8003e04 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	881a      	ldrh	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	1c9a      	adds	r2, r3, #2
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003daa:	e02b      	b.n	8003e04 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d112      	bne.n	8003de0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dde:	e011      	b.n	8003e04 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de0:	f7fd fb58 	bl	8001494 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d803      	bhi.n	8003df8 <HAL_SPI_Transmit+0x15c>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d102      	bne.n	8003dfe <HAL_SPI_Transmit+0x162>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e02:	e0a4      	b.n	8003f4e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ce      	bne.n	8003dac <HAL_SPI_Transmit+0x110>
 8003e0e:	e07c      	b.n	8003f0a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_SPI_Transmit+0x182>
 8003e18:	8afb      	ldrh	r3, [r7, #22]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d170      	bne.n	8003f00 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d912      	bls.n	8003e4e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	881a      	ldrh	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	1c9a      	adds	r2, r3, #2
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b02      	subs	r3, #2
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e4c:	e058      	b.n	8003f00 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e74:	e044      	b.n	8003f00 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d12b      	bne.n	8003edc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d912      	bls.n	8003eb4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	881a      	ldrh	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	1c9a      	adds	r2, r3, #2
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b02      	subs	r3, #2
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eb2:	e025      	b.n	8003f00 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	7812      	ldrb	r2, [r2, #0]
 8003ec0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eda:	e011      	b.n	8003f00 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003edc:	f7fd fada 	bl	8001494 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d803      	bhi.n	8003ef4 <HAL_SPI_Transmit+0x258>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d102      	bne.n	8003efa <HAL_SPI_Transmit+0x25e>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d102      	bne.n	8003f00 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003efe:	e026      	b.n	8003f4e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1b5      	bne.n	8003e76 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fca2 	bl	8004858 <SPI_EndRxTxTransaction>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e000      	b.n	8003f4e <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003f4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3720      	adds	r7, #32
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f84:	d112      	bne.n	8003fac <HAL_SPI_Receive+0x44>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10e      	bne.n	8003fac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2204      	movs	r2, #4
 8003f92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f908 	bl	80041b8 <HAL_SPI_TransmitReceive>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	e101      	b.n	80041b0 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_SPI_Receive+0x52>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e0fa      	b.n	80041b0 <HAL_SPI_Receive+0x248>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc2:	f7fd fa67 	bl	8001494 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d002      	beq.n	8003fda <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fd8:	e0e1      	b.n	800419e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_SPI_Receive+0x7e>
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d102      	bne.n	8003fec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fea:	e0d8      	b.n	800419e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	88fa      	ldrh	r2, [r7, #6]
 8004004:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004036:	d908      	bls.n	800404a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	e007      	b.n	800405a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004058:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004062:	d107      	bne.n	8004074 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004072:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d007      	beq.n	8004092 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004090:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800409a:	d867      	bhi.n	800416c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800409c:	e030      	b.n	8004100 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d117      	bne.n	80040dc <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f103 020c 	add.w	r2, r3, #12
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	7812      	ldrb	r2, [r2, #0]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040da:	e011      	b.n	8004100 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040dc:	f7fd f9da 	bl	8001494 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d803      	bhi.n	80040f4 <HAL_SPI_Receive+0x18c>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d102      	bne.n	80040fa <HAL_SPI_Receive+0x192>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040fe:	e04e      	b.n	800419e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1c8      	bne.n	800409e <HAL_SPI_Receive+0x136>
 800410c:	e034      	b.n	8004178 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b01      	cmp	r3, #1
 800411a:	d115      	bne.n	8004148 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	b292      	uxth	r2, r2
 8004128:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	1c9a      	adds	r2, r3, #2
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004146:	e011      	b.n	800416c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004148:	f7fd f9a4 	bl	8001494 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d803      	bhi.n	8004160 <HAL_SPI_Receive+0x1f8>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d102      	bne.n	8004166 <HAL_SPI_Receive+0x1fe>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d102      	bne.n	800416c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	75fb      	strb	r3, [r7, #23]
          goto error;
 800416a:	e018      	b.n	800419e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1ca      	bne.n	800410e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	6839      	ldr	r1, [r7, #0]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fb13 	bl	80047a8 <SPI_EndRxTransaction>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
 800419a:	e000      	b.n	800419e <HAL_SPI_Receive+0x236>
  }

error :
 800419c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	; 0x28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041c6:	2301      	movs	r3, #1
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_SPI_TransmitReceive+0x26>
 80041da:	2302      	movs	r3, #2
 80041dc:	e1fb      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x41e>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041e6:	f7fd f955 	bl	8001494 <HAL_GetTick>
 80041ea:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041fa:	887b      	ldrh	r3, [r7, #2]
 80041fc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80041fe:	887b      	ldrh	r3, [r7, #2]
 8004200:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004202:	7efb      	ldrb	r3, [r7, #27]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d00e      	beq.n	8004226 <HAL_SPI_TransmitReceive+0x6e>
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420e:	d106      	bne.n	800421e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <HAL_SPI_TransmitReceive+0x66>
 8004218:	7efb      	ldrb	r3, [r7, #27]
 800421a:	2b04      	cmp	r3, #4
 800421c:	d003      	beq.n	8004226 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800421e:	2302      	movs	r3, #2
 8004220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004224:	e1cd      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x80>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x80>
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800423e:	e1c0      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b04      	cmp	r3, #4
 800424a:	d003      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2205      	movs	r2, #5
 8004250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	887a      	ldrh	r2, [r7, #2]
 800427a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004296:	d802      	bhi.n	800429e <HAL_SPI_TransmitReceive+0xe6>
 8004298:	8a3b      	ldrh	r3, [r7, #16]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d908      	bls.n	80042b0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	e007      	b.n	80042c0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d007      	beq.n	80042de <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042e6:	d97c      	bls.n	80043e2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_SPI_TransmitReceive+0x13e>
 80042f0:	8a7b      	ldrh	r3, [r7, #18]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d169      	bne.n	80043ca <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	881a      	ldrh	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	1c9a      	adds	r2, r3, #2
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800431a:	e056      	b.n	80043ca <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d11b      	bne.n	8004362 <HAL_SPI_TransmitReceive+0x1aa>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d016      	beq.n	8004362 <HAL_SPI_TransmitReceive+0x1aa>
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	2b01      	cmp	r3, #1
 8004338:	d113      	bne.n	8004362 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	881a      	ldrh	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	1c9a      	adds	r2, r3, #2
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d11c      	bne.n	80043aa <HAL_SPI_TransmitReceive+0x1f2>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d016      	beq.n	80043aa <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	b292      	uxth	r2, r2
 8004388:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	1c9a      	adds	r2, r3, #2
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043a6:	2301      	movs	r3, #1
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043aa:	f7fd f873 	bl	8001494 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d807      	bhi.n	80043ca <HAL_SPI_TransmitReceive+0x212>
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d003      	beq.n	80043ca <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043c8:	e0fb      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1a3      	bne.n	800431c <HAL_SPI_TransmitReceive+0x164>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d19d      	bne.n	800431c <HAL_SPI_TransmitReceive+0x164>
 80043e0:	e0df      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x23a>
 80043ea:	8a7b      	ldrh	r3, [r7, #18]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	f040 80cb 	bne.w	8004588 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d912      	bls.n	8004422 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	881a      	ldrh	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b02      	subs	r3, #2
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004420:	e0b2      	b.n	8004588 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004448:	e09e      	b.n	8004588 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d134      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x30a>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d02f      	beq.n	80044c2 <HAL_SPI_TransmitReceive+0x30a>
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	2b01      	cmp	r3, #1
 8004466:	d12c      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d912      	bls.n	8004498 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	881a      	ldrh	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	1c9a      	adds	r2, r3, #2
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b02      	subs	r3, #2
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004496:	e012      	b.n	80044be <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d148      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x3aa>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d042      	beq.n	8004562 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d923      	bls.n	8004530 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	b292      	uxth	r2, r2
 80044f4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b02      	subs	r3, #2
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d81f      	bhi.n	800455e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	e016      	b.n	800455e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f103 020c 	add.w	r2, r3, #12
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	7812      	ldrb	r2, [r2, #0]
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800455e:	2301      	movs	r3, #1
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004562:	f7fc ff97 	bl	8001494 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800456e:	429a      	cmp	r2, r3
 8004570:	d803      	bhi.n	800457a <HAL_SPI_TransmitReceive+0x3c2>
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d102      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x3c8>
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	2b00      	cmp	r3, #0
 800457e:	d103      	bne.n	8004588 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004586:	e01c      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	f47f af5b 	bne.w	800444a <HAL_SPI_TransmitReceive+0x292>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	f47f af54 	bne.w	800444a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f956 	bl	8004858 <SPI_EndRxTxTransaction>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d006      	beq.n	80045c0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	661a      	str	r2, [r3, #96]	; 0x60
 80045be:	e000      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3728      	adds	r7, #40	; 0x28
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ec:	b2db      	uxtb	r3, r3
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800460a:	e04c      	b.n	80046a6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004612:	d048      	beq.n	80046a6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004614:	f7fc ff3e 	bl	8001494 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d902      	bls.n	800462a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d13d      	bne.n	80046a6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004638:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004642:	d111      	bne.n	8004668 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464c:	d004      	beq.n	8004658 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004656:	d107      	bne.n	8004668 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004666:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004670:	d10f      	bne.n	8004692 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004690:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e00f      	b.n	80046c6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4013      	ands	r3, r2
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d1a3      	bne.n	800460c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
 80046da:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80046dc:	e057      	b.n	800478e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046e4:	d106      	bne.n	80046f4 <SPI_WaitFifoStateUntilTimeout+0x26>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d103      	bne.n	80046f4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	330c      	adds	r3, #12
 80046f2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d048      	beq.n	800478e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80046fc:	f7fc feca 	bl	8001494 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d902      	bls.n	8004712 <SPI_WaitFifoStateUntilTimeout+0x44>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d13d      	bne.n	800478e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472a:	d111      	bne.n	8004750 <SPI_WaitFifoStateUntilTimeout+0x82>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004734:	d004      	beq.n	8004740 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473e:	d107      	bne.n	8004750 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004758:	d10f      	bne.n	800477a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e008      	b.n	80047a0 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4013      	ands	r3, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d19f      	bne.n	80046de <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047bc:	d111      	bne.n	80047e2 <SPI_EndRxTransaction+0x3a>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c6:	d004      	beq.n	80047d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d0:	d107      	bne.n	80047e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	2180      	movs	r1, #128	; 0x80
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff ff04 	bl	80045fa <SPI_WaitFlagStateUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fc:	f043 0220 	orr.w	r2, r3, #32
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e023      	b.n	8004850 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004810:	d11d      	bne.n	800484e <SPI_EndRxTransaction+0xa6>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800481a:	d004      	beq.n	8004826 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004824:	d113      	bne.n	800484e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2200      	movs	r2, #0
 800482e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff ff4b 	bl	80046ce <SPI_WaitFifoStateUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e000      	b.n	8004850 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7ff ff2c 	bl	80046ce <SPI_WaitFifoStateUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e027      	b.n	80048dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2200      	movs	r2, #0
 8004894:	2180      	movs	r1, #128	; 0x80
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff feaf 	bl	80045fa <SPI_WaitFlagStateUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	f043 0220 	orr.w	r2, r3, #32
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e014      	b.n	80048dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff ff05 	bl	80046ce <SPI_WaitFifoStateUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e000      	b.n	80048dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e01d      	b.n	8004932 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc fc78 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f000 f9dc 	bl	8004ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	4b0c      	ldr	r3, [pc, #48]	; (800498c <HAL_TIM_Base_Start_IT+0x50>)
 800495c:	4013      	ands	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b06      	cmp	r3, #6
 8004964:	d00b      	beq.n	800497e <HAL_TIM_Base_Start_IT+0x42>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496c:	d007      	beq.n	800497e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	00010007 	.word	0x00010007

08004990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d122      	bne.n	80049ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d11b      	bne.n	80049ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0202 	mvn.w	r2, #2
 80049bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f965 	bl	8004ca2 <HAL_TIM_IC_CaptureCallback>
 80049d8:	e005      	b.n	80049e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f957 	bl	8004c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f968 	bl	8004cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d122      	bne.n	8004a40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d11b      	bne.n	8004a40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0204 	mvn.w	r2, #4
 8004a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f93b 	bl	8004ca2 <HAL_TIM_IC_CaptureCallback>
 8004a2c:	e005      	b.n	8004a3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f92d 	bl	8004c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f93e 	bl	8004cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d122      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d11b      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0208 	mvn.w	r2, #8
 8004a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2204      	movs	r2, #4
 8004a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f911 	bl	8004ca2 <HAL_TIM_IC_CaptureCallback>
 8004a80:	e005      	b.n	8004a8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f903 	bl	8004c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f914 	bl	8004cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d122      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d11b      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0210 	mvn.w	r2, #16
 8004ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2208      	movs	r2, #8
 8004abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8e7 	bl	8004ca2 <HAL_TIM_IC_CaptureCallback>
 8004ad4:	e005      	b.n	8004ae2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8d9 	bl	8004c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f8ea 	bl	8004cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d10e      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d107      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0201 	mvn.w	r2, #1
 8004b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fb fff8 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1e:	2b80      	cmp	r3, #128	; 0x80
 8004b20:	d10e      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2c:	2b80      	cmp	r3, #128	; 0x80
 8004b2e:	d107      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f982 	bl	8004e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4e:	d10e      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d107      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f975 	bl	8004e58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d10e      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d107      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f898 	bl	8004cca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d10e      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d107      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f06f 0220 	mvn.w	r2, #32
 8004bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f935 	bl	8004e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be4:	d107      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f93b 	bl	8004e6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c04:	d10f      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c14:	d107      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f92d 	bl	8004e80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c34:	d10f      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c44:	d107      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f91f 	bl	8004e94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c64:	d10f      	bne.n	8004c86 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c74:	d107      	bne.n	8004c86 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f911 	bl	8004ea8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a46      	ldr	r2, [pc, #280]	; (8004e0c <TIM_Base_SetConfig+0x12c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d017      	beq.n	8004d28 <TIM_Base_SetConfig+0x48>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfe:	d013      	beq.n	8004d28 <TIM_Base_SetConfig+0x48>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a43      	ldr	r2, [pc, #268]	; (8004e10 <TIM_Base_SetConfig+0x130>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00f      	beq.n	8004d28 <TIM_Base_SetConfig+0x48>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a42      	ldr	r2, [pc, #264]	; (8004e14 <TIM_Base_SetConfig+0x134>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <TIM_Base_SetConfig+0x48>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a41      	ldr	r2, [pc, #260]	; (8004e18 <TIM_Base_SetConfig+0x138>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_Base_SetConfig+0x48>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a40      	ldr	r2, [pc, #256]	; (8004e1c <TIM_Base_SetConfig+0x13c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0x48>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a3f      	ldr	r2, [pc, #252]	; (8004e20 <TIM_Base_SetConfig+0x140>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d108      	bne.n	8004d3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a33      	ldr	r2, [pc, #204]	; (8004e0c <TIM_Base_SetConfig+0x12c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d023      	beq.n	8004d8a <TIM_Base_SetConfig+0xaa>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d01f      	beq.n	8004d8a <TIM_Base_SetConfig+0xaa>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a30      	ldr	r2, [pc, #192]	; (8004e10 <TIM_Base_SetConfig+0x130>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d01b      	beq.n	8004d8a <TIM_Base_SetConfig+0xaa>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2f      	ldr	r2, [pc, #188]	; (8004e14 <TIM_Base_SetConfig+0x134>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d017      	beq.n	8004d8a <TIM_Base_SetConfig+0xaa>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a2e      	ldr	r2, [pc, #184]	; (8004e18 <TIM_Base_SetConfig+0x138>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <TIM_Base_SetConfig+0xaa>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a2d      	ldr	r2, [pc, #180]	; (8004e1c <TIM_Base_SetConfig+0x13c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00f      	beq.n	8004d8a <TIM_Base_SetConfig+0xaa>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2d      	ldr	r2, [pc, #180]	; (8004e24 <TIM_Base_SetConfig+0x144>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00b      	beq.n	8004d8a <TIM_Base_SetConfig+0xaa>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2c      	ldr	r2, [pc, #176]	; (8004e28 <TIM_Base_SetConfig+0x148>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d007      	beq.n	8004d8a <TIM_Base_SetConfig+0xaa>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2b      	ldr	r2, [pc, #172]	; (8004e2c <TIM_Base_SetConfig+0x14c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d003      	beq.n	8004d8a <TIM_Base_SetConfig+0xaa>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a26      	ldr	r2, [pc, #152]	; (8004e20 <TIM_Base_SetConfig+0x140>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d108      	bne.n	8004d9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <TIM_Base_SetConfig+0x12c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <TIM_Base_SetConfig+0x110>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <TIM_Base_SetConfig+0x13c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00f      	beq.n	8004df0 <TIM_Base_SetConfig+0x110>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a14      	ldr	r2, [pc, #80]	; (8004e24 <TIM_Base_SetConfig+0x144>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <TIM_Base_SetConfig+0x110>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <TIM_Base_SetConfig+0x148>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_Base_SetConfig+0x110>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a12      	ldr	r2, [pc, #72]	; (8004e2c <TIM_Base_SetConfig+0x14c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_Base_SetConfig+0x110>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a0d      	ldr	r2, [pc, #52]	; (8004e20 <TIM_Base_SetConfig+0x140>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d103      	bne.n	8004df8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	615a      	str	r2, [r3, #20]
}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40012c00 	.word	0x40012c00
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800
 8004e18:	40000c00 	.word	0x40000c00
 8004e1c:	40013400 	.word	0x40013400
 8004e20:	40015000 	.word	0x40015000
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800

08004e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e042      	b.n	8004f54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d106      	bne.n	8004ee6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fc fa07 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2224      	movs	r2, #36	; 0x24
 8004eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0201 	bic.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f82e 	bl	8004f60 <UART_SetConfig>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e022      	b.n	8004f54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f001 fa10 	bl	800633c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 fa97 	bl	8006480 <UART_CheckIdleState>
 8004f52:	4603      	mov	r3, r0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	0000      	movs	r0, r0
	...

08004f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f60:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004f64:	b08a      	sub	sp, #40	; 0x28
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f94:	4313      	orrs	r3, r2
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4baa      	ldr	r3, [pc, #680]	; (8005248 <UART_SetConfig+0x2e8>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a9f      	ldr	r2, [pc, #636]	; (800524c <UART_SetConfig+0x2ec>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004fe6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	f023 010f 	bic.w	r1, r3, #15
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a90      	ldr	r2, [pc, #576]	; (8005250 <UART_SetConfig+0x2f0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d126      	bne.n	8005062 <UART_SetConfig+0x102>
 8005014:	4b8f      	ldr	r3, [pc, #572]	; (8005254 <UART_SetConfig+0x2f4>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b03      	cmp	r3, #3
 8005020:	d81a      	bhi.n	8005058 <UART_SetConfig+0xf8>
 8005022:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <UART_SetConfig+0xc8>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	08005039 	.word	0x08005039
 800502c:	08005049 	.word	0x08005049
 8005030:	08005041 	.word	0x08005041
 8005034:	08005051 	.word	0x08005051
 8005038:	2301      	movs	r3, #1
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503e:	e116      	b.n	800526e <UART_SetConfig+0x30e>
 8005040:	2302      	movs	r3, #2
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005046:	e112      	b.n	800526e <UART_SetConfig+0x30e>
 8005048:	2304      	movs	r3, #4
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504e:	e10e      	b.n	800526e <UART_SetConfig+0x30e>
 8005050:	2308      	movs	r3, #8
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005056:	e10a      	b.n	800526e <UART_SetConfig+0x30e>
 8005058:	2310      	movs	r3, #16
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505e:	bf00      	nop
 8005060:	e105      	b.n	800526e <UART_SetConfig+0x30e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a7c      	ldr	r2, [pc, #496]	; (8005258 <UART_SetConfig+0x2f8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d138      	bne.n	80050de <UART_SetConfig+0x17e>
 800506c:	4b79      	ldr	r3, [pc, #484]	; (8005254 <UART_SetConfig+0x2f4>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b0c      	cmp	r3, #12
 8005078:	d82c      	bhi.n	80050d4 <UART_SetConfig+0x174>
 800507a:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <UART_SetConfig+0x120>)
 800507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005080:	080050b5 	.word	0x080050b5
 8005084:	080050d5 	.word	0x080050d5
 8005088:	080050d5 	.word	0x080050d5
 800508c:	080050d5 	.word	0x080050d5
 8005090:	080050c5 	.word	0x080050c5
 8005094:	080050d5 	.word	0x080050d5
 8005098:	080050d5 	.word	0x080050d5
 800509c:	080050d5 	.word	0x080050d5
 80050a0:	080050bd 	.word	0x080050bd
 80050a4:	080050d5 	.word	0x080050d5
 80050a8:	080050d5 	.word	0x080050d5
 80050ac:	080050d5 	.word	0x080050d5
 80050b0:	080050cd 	.word	0x080050cd
 80050b4:	2300      	movs	r3, #0
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ba:	e0d8      	b.n	800526e <UART_SetConfig+0x30e>
 80050bc:	2302      	movs	r3, #2
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c2:	e0d4      	b.n	800526e <UART_SetConfig+0x30e>
 80050c4:	2304      	movs	r3, #4
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ca:	e0d0      	b.n	800526e <UART_SetConfig+0x30e>
 80050cc:	2308      	movs	r3, #8
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d2:	e0cc      	b.n	800526e <UART_SetConfig+0x30e>
 80050d4:	2310      	movs	r3, #16
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	bf00      	nop
 80050dc:	e0c7      	b.n	800526e <UART_SetConfig+0x30e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a5e      	ldr	r2, [pc, #376]	; (800525c <UART_SetConfig+0x2fc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d125      	bne.n	8005134 <UART_SetConfig+0x1d4>
 80050e8:	4b5a      	ldr	r3, [pc, #360]	; (8005254 <UART_SetConfig+0x2f4>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050f2:	2b10      	cmp	r3, #16
 80050f4:	d011      	beq.n	800511a <UART_SetConfig+0x1ba>
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d802      	bhi.n	8005100 <UART_SetConfig+0x1a0>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <UART_SetConfig+0x1aa>
 80050fe:	e014      	b.n	800512a <UART_SetConfig+0x1ca>
 8005100:	2b20      	cmp	r3, #32
 8005102:	d006      	beq.n	8005112 <UART_SetConfig+0x1b2>
 8005104:	2b30      	cmp	r3, #48	; 0x30
 8005106:	d00c      	beq.n	8005122 <UART_SetConfig+0x1c2>
 8005108:	e00f      	b.n	800512a <UART_SetConfig+0x1ca>
 800510a:	2300      	movs	r3, #0
 800510c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005110:	e0ad      	b.n	800526e <UART_SetConfig+0x30e>
 8005112:	2302      	movs	r3, #2
 8005114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005118:	e0a9      	b.n	800526e <UART_SetConfig+0x30e>
 800511a:	2304      	movs	r3, #4
 800511c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005120:	e0a5      	b.n	800526e <UART_SetConfig+0x30e>
 8005122:	2308      	movs	r3, #8
 8005124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005128:	e0a1      	b.n	800526e <UART_SetConfig+0x30e>
 800512a:	2310      	movs	r3, #16
 800512c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005130:	bf00      	nop
 8005132:	e09c      	b.n	800526e <UART_SetConfig+0x30e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a49      	ldr	r2, [pc, #292]	; (8005260 <UART_SetConfig+0x300>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d125      	bne.n	800518a <UART_SetConfig+0x22a>
 800513e:	4b45      	ldr	r3, [pc, #276]	; (8005254 <UART_SetConfig+0x2f4>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d011      	beq.n	8005170 <UART_SetConfig+0x210>
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d802      	bhi.n	8005156 <UART_SetConfig+0x1f6>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <UART_SetConfig+0x200>
 8005154:	e014      	b.n	8005180 <UART_SetConfig+0x220>
 8005156:	2b80      	cmp	r3, #128	; 0x80
 8005158:	d006      	beq.n	8005168 <UART_SetConfig+0x208>
 800515a:	2bc0      	cmp	r3, #192	; 0xc0
 800515c:	d00c      	beq.n	8005178 <UART_SetConfig+0x218>
 800515e:	e00f      	b.n	8005180 <UART_SetConfig+0x220>
 8005160:	2300      	movs	r3, #0
 8005162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005166:	e082      	b.n	800526e <UART_SetConfig+0x30e>
 8005168:	2302      	movs	r3, #2
 800516a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516e:	e07e      	b.n	800526e <UART_SetConfig+0x30e>
 8005170:	2304      	movs	r3, #4
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005176:	e07a      	b.n	800526e <UART_SetConfig+0x30e>
 8005178:	2308      	movs	r3, #8
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517e:	e076      	b.n	800526e <UART_SetConfig+0x30e>
 8005180:	2310      	movs	r3, #16
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005186:	bf00      	nop
 8005188:	e071      	b.n	800526e <UART_SetConfig+0x30e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a35      	ldr	r2, [pc, #212]	; (8005264 <UART_SetConfig+0x304>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d129      	bne.n	80051e8 <UART_SetConfig+0x288>
 8005194:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <UART_SetConfig+0x2f4>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a2:	d014      	beq.n	80051ce <UART_SetConfig+0x26e>
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a8:	d802      	bhi.n	80051b0 <UART_SetConfig+0x250>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <UART_SetConfig+0x25e>
 80051ae:	e016      	b.n	80051de <UART_SetConfig+0x27e>
 80051b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b4:	d007      	beq.n	80051c6 <UART_SetConfig+0x266>
 80051b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ba:	d00c      	beq.n	80051d6 <UART_SetConfig+0x276>
 80051bc:	e00f      	b.n	80051de <UART_SetConfig+0x27e>
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c4:	e053      	b.n	800526e <UART_SetConfig+0x30e>
 80051c6:	2302      	movs	r3, #2
 80051c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051cc:	e04f      	b.n	800526e <UART_SetConfig+0x30e>
 80051ce:	2304      	movs	r3, #4
 80051d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d4:	e04b      	b.n	800526e <UART_SetConfig+0x30e>
 80051d6:	2308      	movs	r3, #8
 80051d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051dc:	e047      	b.n	800526e <UART_SetConfig+0x30e>
 80051de:	2310      	movs	r3, #16
 80051e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e4:	bf00      	nop
 80051e6:	e042      	b.n	800526e <UART_SetConfig+0x30e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a17      	ldr	r2, [pc, #92]	; (800524c <UART_SetConfig+0x2ec>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d13a      	bne.n	8005268 <UART_SetConfig+0x308>
 80051f2:	4b18      	ldr	r3, [pc, #96]	; (8005254 <UART_SetConfig+0x2f4>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005200:	d014      	beq.n	800522c <UART_SetConfig+0x2cc>
 8005202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005206:	d802      	bhi.n	800520e <UART_SetConfig+0x2ae>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <UART_SetConfig+0x2bc>
 800520c:	e016      	b.n	800523c <UART_SetConfig+0x2dc>
 800520e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005212:	d007      	beq.n	8005224 <UART_SetConfig+0x2c4>
 8005214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005218:	d00c      	beq.n	8005234 <UART_SetConfig+0x2d4>
 800521a:	e00f      	b.n	800523c <UART_SetConfig+0x2dc>
 800521c:	2300      	movs	r3, #0
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005222:	e024      	b.n	800526e <UART_SetConfig+0x30e>
 8005224:	2302      	movs	r3, #2
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522a:	e020      	b.n	800526e <UART_SetConfig+0x30e>
 800522c:	2304      	movs	r3, #4
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	e01c      	b.n	800526e <UART_SetConfig+0x30e>
 8005234:	2308      	movs	r3, #8
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	e018      	b.n	800526e <UART_SetConfig+0x30e>
 800523c:	2310      	movs	r3, #16
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	bf00      	nop
 8005244:	e013      	b.n	800526e <UART_SetConfig+0x30e>
 8005246:	bf00      	nop
 8005248:	cfff69f3 	.word	0xcfff69f3
 800524c:	40008000 	.word	0x40008000
 8005250:	40013800 	.word	0x40013800
 8005254:	40021000 	.word	0x40021000
 8005258:	40004400 	.word	0x40004400
 800525c:	40004800 	.word	0x40004800
 8005260:	40004c00 	.word	0x40004c00
 8005264:	40005000 	.word	0x40005000
 8005268:	2310      	movs	r3, #16
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a86      	ldr	r2, [pc, #536]	; (800548c <UART_SetConfig+0x52c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	f040 8422 	bne.w	8005abe <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800527a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800527e:	2b08      	cmp	r3, #8
 8005280:	f200 8173 	bhi.w	800556a <UART_SetConfig+0x60a>
 8005284:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0x32c>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052b1 	.word	0x080052b1
 8005290:	0800556b 	.word	0x0800556b
 8005294:	08005353 	.word	0x08005353
 8005298:	0800556b 	.word	0x0800556b
 800529c:	080053eb 	.word	0x080053eb
 80052a0:	0800556b 	.word	0x0800556b
 80052a4:	0800556b 	.word	0x0800556b
 80052a8:	0800556b 	.word	0x0800556b
 80052ac:	080054bd 	.word	0x080054bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80052b0:	f7fd ff62 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 80052b4:	4602      	mov	r2, r0
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d044      	beq.n	8005348 <UART_SetConfig+0x3e8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d03e      	beq.n	8005344 <UART_SetConfig+0x3e4>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d038      	beq.n	8005340 <UART_SetConfig+0x3e0>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d032      	beq.n	800533c <UART_SetConfig+0x3dc>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d02c      	beq.n	8005338 <UART_SetConfig+0x3d8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	2b05      	cmp	r3, #5
 80052e4:	d026      	beq.n	8005334 <UART_SetConfig+0x3d4>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	2b06      	cmp	r3, #6
 80052ec:	d020      	beq.n	8005330 <UART_SetConfig+0x3d0>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2b07      	cmp	r3, #7
 80052f4:	d01a      	beq.n	800532c <UART_SetConfig+0x3cc>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d014      	beq.n	8005328 <UART_SetConfig+0x3c8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b09      	cmp	r3, #9
 8005304:	d00e      	beq.n	8005324 <UART_SetConfig+0x3c4>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	2b0a      	cmp	r3, #10
 800530c:	d008      	beq.n	8005320 <UART_SetConfig+0x3c0>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	2b0b      	cmp	r3, #11
 8005314:	d102      	bne.n	800531c <UART_SetConfig+0x3bc>
 8005316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800531a:	e016      	b.n	800534a <UART_SetConfig+0x3ea>
 800531c:	2301      	movs	r3, #1
 800531e:	e014      	b.n	800534a <UART_SetConfig+0x3ea>
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	e012      	b.n	800534a <UART_SetConfig+0x3ea>
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	e010      	b.n	800534a <UART_SetConfig+0x3ea>
 8005328:	2320      	movs	r3, #32
 800532a:	e00e      	b.n	800534a <UART_SetConfig+0x3ea>
 800532c:	2310      	movs	r3, #16
 800532e:	e00c      	b.n	800534a <UART_SetConfig+0x3ea>
 8005330:	230c      	movs	r3, #12
 8005332:	e00a      	b.n	800534a <UART_SetConfig+0x3ea>
 8005334:	230a      	movs	r3, #10
 8005336:	e008      	b.n	800534a <UART_SetConfig+0x3ea>
 8005338:	2308      	movs	r3, #8
 800533a:	e006      	b.n	800534a <UART_SetConfig+0x3ea>
 800533c:	2306      	movs	r3, #6
 800533e:	e004      	b.n	800534a <UART_SetConfig+0x3ea>
 8005340:	2304      	movs	r3, #4
 8005342:	e002      	b.n	800534a <UART_SetConfig+0x3ea>
 8005344:	2302      	movs	r3, #2
 8005346:	e000      	b.n	800534a <UART_SetConfig+0x3ea>
 8005348:	2301      	movs	r3, #1
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	617b      	str	r3, [r7, #20]
        break;
 8005350:	e10e      	b.n	8005570 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d044      	beq.n	80053e4 <UART_SetConfig+0x484>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2b01      	cmp	r3, #1
 8005360:	d03e      	beq.n	80053e0 <UART_SetConfig+0x480>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b02      	cmp	r3, #2
 8005368:	d038      	beq.n	80053dc <UART_SetConfig+0x47c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b03      	cmp	r3, #3
 8005370:	d032      	beq.n	80053d8 <UART_SetConfig+0x478>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b04      	cmp	r3, #4
 8005378:	d02c      	beq.n	80053d4 <UART_SetConfig+0x474>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b05      	cmp	r3, #5
 8005380:	d026      	beq.n	80053d0 <UART_SetConfig+0x470>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	2b06      	cmp	r3, #6
 8005388:	d020      	beq.n	80053cc <UART_SetConfig+0x46c>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b07      	cmp	r3, #7
 8005390:	d01a      	beq.n	80053c8 <UART_SetConfig+0x468>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b08      	cmp	r3, #8
 8005398:	d014      	beq.n	80053c4 <UART_SetConfig+0x464>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b09      	cmp	r3, #9
 80053a0:	d00e      	beq.n	80053c0 <UART_SetConfig+0x460>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b0a      	cmp	r3, #10
 80053a8:	d008      	beq.n	80053bc <UART_SetConfig+0x45c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	2b0b      	cmp	r3, #11
 80053b0:	d102      	bne.n	80053b8 <UART_SetConfig+0x458>
 80053b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80053b6:	e016      	b.n	80053e6 <UART_SetConfig+0x486>
 80053b8:	4b35      	ldr	r3, [pc, #212]	; (8005490 <UART_SetConfig+0x530>)
 80053ba:	e014      	b.n	80053e6 <UART_SetConfig+0x486>
 80053bc:	4b35      	ldr	r3, [pc, #212]	; (8005494 <UART_SetConfig+0x534>)
 80053be:	e012      	b.n	80053e6 <UART_SetConfig+0x486>
 80053c0:	4b35      	ldr	r3, [pc, #212]	; (8005498 <UART_SetConfig+0x538>)
 80053c2:	e010      	b.n	80053e6 <UART_SetConfig+0x486>
 80053c4:	4b35      	ldr	r3, [pc, #212]	; (800549c <UART_SetConfig+0x53c>)
 80053c6:	e00e      	b.n	80053e6 <UART_SetConfig+0x486>
 80053c8:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <UART_SetConfig+0x540>)
 80053ca:	e00c      	b.n	80053e6 <UART_SetConfig+0x486>
 80053cc:	4b35      	ldr	r3, [pc, #212]	; (80054a4 <UART_SetConfig+0x544>)
 80053ce:	e00a      	b.n	80053e6 <UART_SetConfig+0x486>
 80053d0:	4b35      	ldr	r3, [pc, #212]	; (80054a8 <UART_SetConfig+0x548>)
 80053d2:	e008      	b.n	80053e6 <UART_SetConfig+0x486>
 80053d4:	4b35      	ldr	r3, [pc, #212]	; (80054ac <UART_SetConfig+0x54c>)
 80053d6:	e006      	b.n	80053e6 <UART_SetConfig+0x486>
 80053d8:	4b35      	ldr	r3, [pc, #212]	; (80054b0 <UART_SetConfig+0x550>)
 80053da:	e004      	b.n	80053e6 <UART_SetConfig+0x486>
 80053dc:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <UART_SetConfig+0x554>)
 80053de:	e002      	b.n	80053e6 <UART_SetConfig+0x486>
 80053e0:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <UART_SetConfig+0x558>)
 80053e2:	e000      	b.n	80053e6 <UART_SetConfig+0x486>
 80053e4:	4b2a      	ldr	r3, [pc, #168]	; (8005490 <UART_SetConfig+0x530>)
 80053e6:	617b      	str	r3, [r7, #20]
        break;
 80053e8:	e0c2      	b.n	8005570 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80053ea:	f7fd fe57 	bl	800309c <HAL_RCC_GetSysClockFreq>
 80053ee:	4602      	mov	r2, r0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d044      	beq.n	8005482 <UART_SetConfig+0x522>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d03e      	beq.n	800547e <UART_SetConfig+0x51e>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	2b02      	cmp	r3, #2
 8005406:	d038      	beq.n	800547a <UART_SetConfig+0x51a>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	2b03      	cmp	r3, #3
 800540e:	d032      	beq.n	8005476 <UART_SetConfig+0x516>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	2b04      	cmp	r3, #4
 8005416:	d02c      	beq.n	8005472 <UART_SetConfig+0x512>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	2b05      	cmp	r3, #5
 800541e:	d026      	beq.n	800546e <UART_SetConfig+0x50e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	2b06      	cmp	r3, #6
 8005426:	d020      	beq.n	800546a <UART_SetConfig+0x50a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	2b07      	cmp	r3, #7
 800542e:	d01a      	beq.n	8005466 <UART_SetConfig+0x506>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	2b08      	cmp	r3, #8
 8005436:	d014      	beq.n	8005462 <UART_SetConfig+0x502>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	2b09      	cmp	r3, #9
 800543e:	d00e      	beq.n	800545e <UART_SetConfig+0x4fe>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	2b0a      	cmp	r3, #10
 8005446:	d008      	beq.n	800545a <UART_SetConfig+0x4fa>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2b0b      	cmp	r3, #11
 800544e:	d102      	bne.n	8005456 <UART_SetConfig+0x4f6>
 8005450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005454:	e016      	b.n	8005484 <UART_SetConfig+0x524>
 8005456:	2301      	movs	r3, #1
 8005458:	e014      	b.n	8005484 <UART_SetConfig+0x524>
 800545a:	2380      	movs	r3, #128	; 0x80
 800545c:	e012      	b.n	8005484 <UART_SetConfig+0x524>
 800545e:	2340      	movs	r3, #64	; 0x40
 8005460:	e010      	b.n	8005484 <UART_SetConfig+0x524>
 8005462:	2320      	movs	r3, #32
 8005464:	e00e      	b.n	8005484 <UART_SetConfig+0x524>
 8005466:	2310      	movs	r3, #16
 8005468:	e00c      	b.n	8005484 <UART_SetConfig+0x524>
 800546a:	230c      	movs	r3, #12
 800546c:	e00a      	b.n	8005484 <UART_SetConfig+0x524>
 800546e:	230a      	movs	r3, #10
 8005470:	e008      	b.n	8005484 <UART_SetConfig+0x524>
 8005472:	2308      	movs	r3, #8
 8005474:	e006      	b.n	8005484 <UART_SetConfig+0x524>
 8005476:	2306      	movs	r3, #6
 8005478:	e004      	b.n	8005484 <UART_SetConfig+0x524>
 800547a:	2304      	movs	r3, #4
 800547c:	e002      	b.n	8005484 <UART_SetConfig+0x524>
 800547e:	2302      	movs	r3, #2
 8005480:	e000      	b.n	8005484 <UART_SetConfig+0x524>
 8005482:	2301      	movs	r3, #1
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
 8005488:	617b      	str	r3, [r7, #20]
        break;
 800548a:	e071      	b.n	8005570 <UART_SetConfig+0x610>
 800548c:	40008000 	.word	0x40008000
 8005490:	00f42400 	.word	0x00f42400
 8005494:	0001e848 	.word	0x0001e848
 8005498:	0003d090 	.word	0x0003d090
 800549c:	0007a120 	.word	0x0007a120
 80054a0:	000f4240 	.word	0x000f4240
 80054a4:	00145855 	.word	0x00145855
 80054a8:	00186a00 	.word	0x00186a00
 80054ac:	001e8480 	.word	0x001e8480
 80054b0:	0028b0aa 	.word	0x0028b0aa
 80054b4:	003d0900 	.word	0x003d0900
 80054b8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d04e      	beq.n	8005562 <UART_SetConfig+0x602>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d047      	beq.n	800555c <UART_SetConfig+0x5fc>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d040      	beq.n	8005556 <UART_SetConfig+0x5f6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d039      	beq.n	8005550 <UART_SetConfig+0x5f0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d032      	beq.n	800554a <UART_SetConfig+0x5ea>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2b05      	cmp	r3, #5
 80054ea:	d02b      	beq.n	8005544 <UART_SetConfig+0x5e4>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b06      	cmp	r3, #6
 80054f2:	d024      	beq.n	800553e <UART_SetConfig+0x5de>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2b07      	cmp	r3, #7
 80054fa:	d01d      	beq.n	8005538 <UART_SetConfig+0x5d8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	2b08      	cmp	r3, #8
 8005502:	d016      	beq.n	8005532 <UART_SetConfig+0x5d2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b09      	cmp	r3, #9
 800550a:	d00f      	beq.n	800552c <UART_SetConfig+0x5cc>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	2b0a      	cmp	r3, #10
 8005512:	d008      	beq.n	8005526 <UART_SetConfig+0x5c6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	2b0b      	cmp	r3, #11
 800551a:	d101      	bne.n	8005520 <UART_SetConfig+0x5c0>
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	e022      	b.n	8005566 <UART_SetConfig+0x606>
 8005520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005524:	e01f      	b.n	8005566 <UART_SetConfig+0x606>
 8005526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800552a:	e01c      	b.n	8005566 <UART_SetConfig+0x606>
 800552c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005530:	e019      	b.n	8005566 <UART_SetConfig+0x606>
 8005532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005536:	e016      	b.n	8005566 <UART_SetConfig+0x606>
 8005538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800553c:	e013      	b.n	8005566 <UART_SetConfig+0x606>
 800553e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005542:	e010      	b.n	8005566 <UART_SetConfig+0x606>
 8005544:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005548:	e00d      	b.n	8005566 <UART_SetConfig+0x606>
 800554a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800554e:	e00a      	b.n	8005566 <UART_SetConfig+0x606>
 8005550:	f241 5355 	movw	r3, #5461	; 0x1555
 8005554:	e007      	b.n	8005566 <UART_SetConfig+0x606>
 8005556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800555a:	e004      	b.n	8005566 <UART_SetConfig+0x606>
 800555c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005560:	e001      	b.n	8005566 <UART_SetConfig+0x606>
 8005562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005566:	617b      	str	r3, [r7, #20]
        break;
 8005568:	e002      	b.n	8005570 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	76fb      	strb	r3, [r7, #27]
        break;
 800556e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 86b7 	beq.w	80062e6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4413      	add	r3, r2
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	429a      	cmp	r2, r3
 8005586:	d305      	bcc.n	8005594 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	429a      	cmp	r2, r3
 8005592:	d903      	bls.n	800559c <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	76fb      	strb	r3, [r7, #27]
 8005598:	f000 bea5 	b.w	80062e6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 800559c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	f200 8277 	bhi.w	8005a94 <UART_SetConfig+0xb34>
 80055a6:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <UART_SetConfig+0x64c>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	080055d1 	.word	0x080055d1
 80055b0:	08005a95 	.word	0x08005a95
 80055b4:	0800570f 	.word	0x0800570f
 80055b8:	08005a95 	.word	0x08005a95
 80055bc:	08005805 	.word	0x08005805
 80055c0:	08005a95 	.word	0x08005a95
 80055c4:	08005a95 	.word	0x08005a95
 80055c8:	08005a95 	.word	0x08005a95
 80055cc:	08005943 	.word	0x08005943
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80055d0:	f7fd fdd2 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 80055d4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4618      	mov	r0, r3
 80055da:	f04f 0100 	mov.w	r1, #0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d067      	beq.n	80056b6 <UART_SetConfig+0x756>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d05e      	beq.n	80056ac <UART_SetConfig+0x74c>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d055      	beq.n	80056a2 <UART_SetConfig+0x742>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d04c      	beq.n	8005698 <UART_SetConfig+0x738>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	2b04      	cmp	r3, #4
 8005604:	d043      	beq.n	800568e <UART_SetConfig+0x72e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2b05      	cmp	r3, #5
 800560c:	d03a      	beq.n	8005684 <UART_SetConfig+0x724>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b06      	cmp	r3, #6
 8005614:	d031      	beq.n	800567a <UART_SetConfig+0x71a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	2b07      	cmp	r3, #7
 800561c:	d028      	beq.n	8005670 <UART_SetConfig+0x710>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2b08      	cmp	r3, #8
 8005624:	d01f      	beq.n	8005666 <UART_SetConfig+0x706>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2b09      	cmp	r3, #9
 800562c:	d016      	beq.n	800565c <UART_SetConfig+0x6fc>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	2b0a      	cmp	r3, #10
 8005634:	d00d      	beq.n	8005652 <UART_SetConfig+0x6f2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2b0b      	cmp	r3, #11
 800563c:	d104      	bne.n	8005648 <UART_SetConfig+0x6e8>
 800563e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005642:	f04f 0400 	mov.w	r4, #0
 8005646:	e03a      	b.n	80056be <UART_SetConfig+0x75e>
 8005648:	f04f 0301 	mov.w	r3, #1
 800564c:	f04f 0400 	mov.w	r4, #0
 8005650:	e035      	b.n	80056be <UART_SetConfig+0x75e>
 8005652:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005656:	f04f 0400 	mov.w	r4, #0
 800565a:	e030      	b.n	80056be <UART_SetConfig+0x75e>
 800565c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005660:	f04f 0400 	mov.w	r4, #0
 8005664:	e02b      	b.n	80056be <UART_SetConfig+0x75e>
 8005666:	f04f 0320 	mov.w	r3, #32
 800566a:	f04f 0400 	mov.w	r4, #0
 800566e:	e026      	b.n	80056be <UART_SetConfig+0x75e>
 8005670:	f04f 0310 	mov.w	r3, #16
 8005674:	f04f 0400 	mov.w	r4, #0
 8005678:	e021      	b.n	80056be <UART_SetConfig+0x75e>
 800567a:	f04f 030c 	mov.w	r3, #12
 800567e:	f04f 0400 	mov.w	r4, #0
 8005682:	e01c      	b.n	80056be <UART_SetConfig+0x75e>
 8005684:	f04f 030a 	mov.w	r3, #10
 8005688:	f04f 0400 	mov.w	r4, #0
 800568c:	e017      	b.n	80056be <UART_SetConfig+0x75e>
 800568e:	f04f 0308 	mov.w	r3, #8
 8005692:	f04f 0400 	mov.w	r4, #0
 8005696:	e012      	b.n	80056be <UART_SetConfig+0x75e>
 8005698:	f04f 0306 	mov.w	r3, #6
 800569c:	f04f 0400 	mov.w	r4, #0
 80056a0:	e00d      	b.n	80056be <UART_SetConfig+0x75e>
 80056a2:	f04f 0304 	mov.w	r3, #4
 80056a6:	f04f 0400 	mov.w	r4, #0
 80056aa:	e008      	b.n	80056be <UART_SetConfig+0x75e>
 80056ac:	f04f 0302 	mov.w	r3, #2
 80056b0:	f04f 0400 	mov.w	r4, #0
 80056b4:	e003      	b.n	80056be <UART_SetConfig+0x75e>
 80056b6:	f04f 0301 	mov.w	r3, #1
 80056ba:	f04f 0400 	mov.w	r4, #0
 80056be:	461a      	mov	r2, r3
 80056c0:	4623      	mov	r3, r4
 80056c2:	f7fa fda9 	bl	8000218 <__aeabi_uldivmod>
 80056c6:	4603      	mov	r3, r0
 80056c8:	460c      	mov	r4, r1
 80056ca:	4619      	mov	r1, r3
 80056cc:	4622      	mov	r2, r4
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	f04f 0400 	mov.w	r4, #0
 80056d6:	0214      	lsls	r4, r2, #8
 80056d8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80056dc:	020b      	lsls	r3, r1, #8
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6852      	ldr	r2, [r2, #4]
 80056e2:	0852      	lsrs	r2, r2, #1
 80056e4:	4611      	mov	r1, r2
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	eb13 0b01 	adds.w	fp, r3, r1
 80056ee:	eb44 0c02 	adc.w	ip, r4, r2
 80056f2:	4658      	mov	r0, fp
 80056f4:	4661      	mov	r1, ip
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f04f 0400 	mov.w	r4, #0
 80056fe:	461a      	mov	r2, r3
 8005700:	4623      	mov	r3, r4
 8005702:	f7fa fd89 	bl	8000218 <__aeabi_uldivmod>
 8005706:	4603      	mov	r3, r0
 8005708:	460c      	mov	r4, r1
 800570a:	61fb      	str	r3, [r7, #28]
            break;
 800570c:	e1c5      	b.n	8005a9a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b00      	cmp	r3, #0
 8005714:	d05b      	beq.n	80057ce <UART_SetConfig+0x86e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	2b01      	cmp	r3, #1
 800571c:	d053      	beq.n	80057c6 <UART_SetConfig+0x866>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b02      	cmp	r3, #2
 8005724:	d04b      	beq.n	80057be <UART_SetConfig+0x85e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	2b03      	cmp	r3, #3
 800572c:	d043      	beq.n	80057b6 <UART_SetConfig+0x856>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	2b04      	cmp	r3, #4
 8005734:	d03b      	beq.n	80057ae <UART_SetConfig+0x84e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	2b05      	cmp	r3, #5
 800573c:	d033      	beq.n	80057a6 <UART_SetConfig+0x846>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b06      	cmp	r3, #6
 8005744:	d02b      	beq.n	800579e <UART_SetConfig+0x83e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	2b07      	cmp	r3, #7
 800574c:	d023      	beq.n	8005796 <UART_SetConfig+0x836>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b08      	cmp	r3, #8
 8005754:	d01b      	beq.n	800578e <UART_SetConfig+0x82e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b09      	cmp	r3, #9
 800575c:	d013      	beq.n	8005786 <UART_SetConfig+0x826>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	2b0a      	cmp	r3, #10
 8005764:	d00b      	beq.n	800577e <UART_SetConfig+0x81e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b0b      	cmp	r3, #11
 800576c:	d103      	bne.n	8005776 <UART_SetConfig+0x816>
 800576e:	4bae      	ldr	r3, [pc, #696]	; (8005a28 <UART_SetConfig+0xac8>)
 8005770:	f04f 0400 	mov.w	r4, #0
 8005774:	e02e      	b.n	80057d4 <UART_SetConfig+0x874>
 8005776:	4bad      	ldr	r3, [pc, #692]	; (8005a2c <UART_SetConfig+0xacc>)
 8005778:	f04f 0400 	mov.w	r4, #0
 800577c:	e02a      	b.n	80057d4 <UART_SetConfig+0x874>
 800577e:	4bac      	ldr	r3, [pc, #688]	; (8005a30 <UART_SetConfig+0xad0>)
 8005780:	f04f 0400 	mov.w	r4, #0
 8005784:	e026      	b.n	80057d4 <UART_SetConfig+0x874>
 8005786:	4bab      	ldr	r3, [pc, #684]	; (8005a34 <UART_SetConfig+0xad4>)
 8005788:	f04f 0400 	mov.w	r4, #0
 800578c:	e022      	b.n	80057d4 <UART_SetConfig+0x874>
 800578e:	4baa      	ldr	r3, [pc, #680]	; (8005a38 <UART_SetConfig+0xad8>)
 8005790:	f04f 0400 	mov.w	r4, #0
 8005794:	e01e      	b.n	80057d4 <UART_SetConfig+0x874>
 8005796:	4ba9      	ldr	r3, [pc, #676]	; (8005a3c <UART_SetConfig+0xadc>)
 8005798:	f04f 0400 	mov.w	r4, #0
 800579c:	e01a      	b.n	80057d4 <UART_SetConfig+0x874>
 800579e:	a49e      	add	r4, pc, #632	; (adr r4, 8005a18 <UART_SetConfig+0xab8>)
 80057a0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80057a4:	e016      	b.n	80057d4 <UART_SetConfig+0x874>
 80057a6:	4ba6      	ldr	r3, [pc, #664]	; (8005a40 <UART_SetConfig+0xae0>)
 80057a8:	f04f 0400 	mov.w	r4, #0
 80057ac:	e012      	b.n	80057d4 <UART_SetConfig+0x874>
 80057ae:	4ba5      	ldr	r3, [pc, #660]	; (8005a44 <UART_SetConfig+0xae4>)
 80057b0:	f04f 0400 	mov.w	r4, #0
 80057b4:	e00e      	b.n	80057d4 <UART_SetConfig+0x874>
 80057b6:	a49a      	add	r4, pc, #616	; (adr r4, 8005a20 <UART_SetConfig+0xac0>)
 80057b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80057bc:	e00a      	b.n	80057d4 <UART_SetConfig+0x874>
 80057be:	4ba2      	ldr	r3, [pc, #648]	; (8005a48 <UART_SetConfig+0xae8>)
 80057c0:	f04f 0400 	mov.w	r4, #0
 80057c4:	e006      	b.n	80057d4 <UART_SetConfig+0x874>
 80057c6:	4ba1      	ldr	r3, [pc, #644]	; (8005a4c <UART_SetConfig+0xaec>)
 80057c8:	f04f 0400 	mov.w	r4, #0
 80057cc:	e002      	b.n	80057d4 <UART_SetConfig+0x874>
 80057ce:	4b97      	ldr	r3, [pc, #604]	; (8005a2c <UART_SetConfig+0xacc>)
 80057d0:	f04f 0400 	mov.w	r4, #0
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6852      	ldr	r2, [r2, #4]
 80057d8:	0852      	lsrs	r2, r2, #1
 80057da:	4611      	mov	r1, r2
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	eb13 0b01 	adds.w	fp, r3, r1
 80057e4:	eb44 0c02 	adc.w	ip, r4, r2
 80057e8:	4658      	mov	r0, fp
 80057ea:	4661      	mov	r1, ip
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f04f 0400 	mov.w	r4, #0
 80057f4:	461a      	mov	r2, r3
 80057f6:	4623      	mov	r3, r4
 80057f8:	f7fa fd0e 	bl	8000218 <__aeabi_uldivmod>
 80057fc:	4603      	mov	r3, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	61fb      	str	r3, [r7, #28]
            break;
 8005802:	e14a      	b.n	8005a9a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005804:	f7fd fc4a 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8005808:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4618      	mov	r0, r3
 800580e:	f04f 0100 	mov.w	r1, #0
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d067      	beq.n	80058ea <UART_SetConfig+0x98a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	2b01      	cmp	r3, #1
 8005820:	d05e      	beq.n	80058e0 <UART_SetConfig+0x980>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	2b02      	cmp	r3, #2
 8005828:	d055      	beq.n	80058d6 <UART_SetConfig+0x976>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	2b03      	cmp	r3, #3
 8005830:	d04c      	beq.n	80058cc <UART_SetConfig+0x96c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	2b04      	cmp	r3, #4
 8005838:	d043      	beq.n	80058c2 <UART_SetConfig+0x962>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	2b05      	cmp	r3, #5
 8005840:	d03a      	beq.n	80058b8 <UART_SetConfig+0x958>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	2b06      	cmp	r3, #6
 8005848:	d031      	beq.n	80058ae <UART_SetConfig+0x94e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	2b07      	cmp	r3, #7
 8005850:	d028      	beq.n	80058a4 <UART_SetConfig+0x944>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	2b08      	cmp	r3, #8
 8005858:	d01f      	beq.n	800589a <UART_SetConfig+0x93a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	2b09      	cmp	r3, #9
 8005860:	d016      	beq.n	8005890 <UART_SetConfig+0x930>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	2b0a      	cmp	r3, #10
 8005868:	d00d      	beq.n	8005886 <UART_SetConfig+0x926>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	2b0b      	cmp	r3, #11
 8005870:	d104      	bne.n	800587c <UART_SetConfig+0x91c>
 8005872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005876:	f04f 0400 	mov.w	r4, #0
 800587a:	e03a      	b.n	80058f2 <UART_SetConfig+0x992>
 800587c:	f04f 0301 	mov.w	r3, #1
 8005880:	f04f 0400 	mov.w	r4, #0
 8005884:	e035      	b.n	80058f2 <UART_SetConfig+0x992>
 8005886:	f04f 0380 	mov.w	r3, #128	; 0x80
 800588a:	f04f 0400 	mov.w	r4, #0
 800588e:	e030      	b.n	80058f2 <UART_SetConfig+0x992>
 8005890:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005894:	f04f 0400 	mov.w	r4, #0
 8005898:	e02b      	b.n	80058f2 <UART_SetConfig+0x992>
 800589a:	f04f 0320 	mov.w	r3, #32
 800589e:	f04f 0400 	mov.w	r4, #0
 80058a2:	e026      	b.n	80058f2 <UART_SetConfig+0x992>
 80058a4:	f04f 0310 	mov.w	r3, #16
 80058a8:	f04f 0400 	mov.w	r4, #0
 80058ac:	e021      	b.n	80058f2 <UART_SetConfig+0x992>
 80058ae:	f04f 030c 	mov.w	r3, #12
 80058b2:	f04f 0400 	mov.w	r4, #0
 80058b6:	e01c      	b.n	80058f2 <UART_SetConfig+0x992>
 80058b8:	f04f 030a 	mov.w	r3, #10
 80058bc:	f04f 0400 	mov.w	r4, #0
 80058c0:	e017      	b.n	80058f2 <UART_SetConfig+0x992>
 80058c2:	f04f 0308 	mov.w	r3, #8
 80058c6:	f04f 0400 	mov.w	r4, #0
 80058ca:	e012      	b.n	80058f2 <UART_SetConfig+0x992>
 80058cc:	f04f 0306 	mov.w	r3, #6
 80058d0:	f04f 0400 	mov.w	r4, #0
 80058d4:	e00d      	b.n	80058f2 <UART_SetConfig+0x992>
 80058d6:	f04f 0304 	mov.w	r3, #4
 80058da:	f04f 0400 	mov.w	r4, #0
 80058de:	e008      	b.n	80058f2 <UART_SetConfig+0x992>
 80058e0:	f04f 0302 	mov.w	r3, #2
 80058e4:	f04f 0400 	mov.w	r4, #0
 80058e8:	e003      	b.n	80058f2 <UART_SetConfig+0x992>
 80058ea:	f04f 0301 	mov.w	r3, #1
 80058ee:	f04f 0400 	mov.w	r4, #0
 80058f2:	461a      	mov	r2, r3
 80058f4:	4623      	mov	r3, r4
 80058f6:	f7fa fc8f 	bl	8000218 <__aeabi_uldivmod>
 80058fa:	4603      	mov	r3, r0
 80058fc:	460c      	mov	r4, r1
 80058fe:	4619      	mov	r1, r3
 8005900:	4622      	mov	r2, r4
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	f04f 0400 	mov.w	r4, #0
 800590a:	0214      	lsls	r4, r2, #8
 800590c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005910:	020b      	lsls	r3, r1, #8
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6852      	ldr	r2, [r2, #4]
 8005916:	0852      	lsrs	r2, r2, #1
 8005918:	4611      	mov	r1, r2
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	eb13 0b01 	adds.w	fp, r3, r1
 8005922:	eb44 0c02 	adc.w	ip, r4, r2
 8005926:	4658      	mov	r0, fp
 8005928:	4661      	mov	r1, ip
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f04f 0400 	mov.w	r4, #0
 8005932:	461a      	mov	r2, r3
 8005934:	4623      	mov	r3, r4
 8005936:	f7fa fc6f 	bl	8000218 <__aeabi_uldivmod>
 800593a:	4603      	mov	r3, r0
 800593c:	460c      	mov	r4, r1
 800593e:	61fb      	str	r3, [r7, #28]
            break;
 8005940:	e0ab      	b.n	8005a9a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 8088 	beq.w	8005a5c <UART_SetConfig+0xafc>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	2b01      	cmp	r3, #1
 8005952:	d05b      	beq.n	8005a0c <UART_SetConfig+0xaac>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	2b02      	cmp	r3, #2
 800595a:	d052      	beq.n	8005a02 <UART_SetConfig+0xaa2>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	2b03      	cmp	r3, #3
 8005962:	d04a      	beq.n	80059fa <UART_SetConfig+0xa9a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	2b04      	cmp	r3, #4
 800596a:	d041      	beq.n	80059f0 <UART_SetConfig+0xa90>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	2b05      	cmp	r3, #5
 8005972:	d039      	beq.n	80059e8 <UART_SetConfig+0xa88>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	2b06      	cmp	r3, #6
 800597a:	d031      	beq.n	80059e0 <UART_SetConfig+0xa80>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	2b07      	cmp	r3, #7
 8005982:	d028      	beq.n	80059d6 <UART_SetConfig+0xa76>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	2b08      	cmp	r3, #8
 800598a:	d01f      	beq.n	80059cc <UART_SetConfig+0xa6c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	2b09      	cmp	r3, #9
 8005992:	d016      	beq.n	80059c2 <UART_SetConfig+0xa62>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	2b0a      	cmp	r3, #10
 800599a:	d00d      	beq.n	80059b8 <UART_SetConfig+0xa58>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	2b0b      	cmp	r3, #11
 80059a2:	d104      	bne.n	80059ae <UART_SetConfig+0xa4e>
 80059a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059a8:	f04f 0400 	mov.w	r4, #0
 80059ac:	e05a      	b.n	8005a64 <UART_SetConfig+0xb04>
 80059ae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80059b2:	f04f 0400 	mov.w	r4, #0
 80059b6:	e055      	b.n	8005a64 <UART_SetConfig+0xb04>
 80059b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059bc:	f04f 0400 	mov.w	r4, #0
 80059c0:	e050      	b.n	8005a64 <UART_SetConfig+0xb04>
 80059c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059c6:	f04f 0400 	mov.w	r4, #0
 80059ca:	e04b      	b.n	8005a64 <UART_SetConfig+0xb04>
 80059cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80059d0:	f04f 0400 	mov.w	r4, #0
 80059d4:	e046      	b.n	8005a64 <UART_SetConfig+0xb04>
 80059d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80059da:	f04f 0400 	mov.w	r4, #0
 80059de:	e041      	b.n	8005a64 <UART_SetConfig+0xb04>
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <UART_SetConfig+0xaf0>)
 80059e2:	f04f 0400 	mov.w	r4, #0
 80059e6:	e03d      	b.n	8005a64 <UART_SetConfig+0xb04>
 80059e8:	4b1a      	ldr	r3, [pc, #104]	; (8005a54 <UART_SetConfig+0xaf4>)
 80059ea:	f04f 0400 	mov.w	r4, #0
 80059ee:	e039      	b.n	8005a64 <UART_SetConfig+0xb04>
 80059f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059f4:	f04f 0400 	mov.w	r4, #0
 80059f8:	e034      	b.n	8005a64 <UART_SetConfig+0xb04>
 80059fa:	4b17      	ldr	r3, [pc, #92]	; (8005a58 <UART_SetConfig+0xaf8>)
 80059fc:	f04f 0400 	mov.w	r4, #0
 8005a00:	e030      	b.n	8005a64 <UART_SetConfig+0xb04>
 8005a02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a06:	f04f 0400 	mov.w	r4, #0
 8005a0a:	e02b      	b.n	8005a64 <UART_SetConfig+0xb04>
 8005a0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a10:	f04f 0400 	mov.w	r4, #0
 8005a14:	e026      	b.n	8005a64 <UART_SetConfig+0xb04>
 8005a16:	bf00      	nop
 8005a18:	14585500 	.word	0x14585500
 8005a1c:	00000000 	.word	0x00000000
 8005a20:	28b0aa00 	.word	0x28b0aa00
 8005a24:	00000000 	.word	0x00000000
 8005a28:	00f42400 	.word	0x00f42400
 8005a2c:	f4240000 	.word	0xf4240000
 8005a30:	01e84800 	.word	0x01e84800
 8005a34:	03d09000 	.word	0x03d09000
 8005a38:	07a12000 	.word	0x07a12000
 8005a3c:	0f424000 	.word	0x0f424000
 8005a40:	186a0000 	.word	0x186a0000
 8005a44:	1e848000 	.word	0x1e848000
 8005a48:	3d090000 	.word	0x3d090000
 8005a4c:	7a120000 	.word	0x7a120000
 8005a50:	000aaa00 	.word	0x000aaa00
 8005a54:	000ccc00 	.word	0x000ccc00
 8005a58:	00155500 	.word	0x00155500
 8005a5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005a60:	f04f 0400 	mov.w	r4, #0
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6852      	ldr	r2, [r2, #4]
 8005a68:	0852      	lsrs	r2, r2, #1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	eb13 0b01 	adds.w	fp, r3, r1
 8005a74:	eb44 0c02 	adc.w	ip, r4, r2
 8005a78:	4658      	mov	r0, fp
 8005a7a:	4661      	mov	r1, ip
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f04f 0400 	mov.w	r4, #0
 8005a84:	461a      	mov	r2, r3
 8005a86:	4623      	mov	r3, r4
 8005a88:	f7fa fbc6 	bl	8000218 <__aeabi_uldivmod>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	61fb      	str	r3, [r7, #28]
            break;
 8005a92:	e002      	b.n	8005a9a <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	76fb      	strb	r3, [r7, #27]
            break;
 8005a98:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aa0:	d309      	bcc.n	8005ab6 <UART_SetConfig+0xb56>
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aa8:	d205      	bcs.n	8005ab6 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	f000 bc18 	b.w	80062e6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	76fb      	strb	r3, [r7, #27]
 8005aba:	f000 bc14 	b.w	80062e6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac6:	f040 8204 	bne.w	8005ed2 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8005aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	f200 81df 	bhi.w	8005e92 <UART_SetConfig+0xf32>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0xb7c>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b01 	.word	0x08005b01
 8005ae0:	08005bb9 	.word	0x08005bb9
 8005ae4:	08005c71 	.word	0x08005c71
 8005ae8:	08005e93 	.word	0x08005e93
 8005aec:	08005d19 	.word	0x08005d19
 8005af0:	08005e93 	.word	0x08005e93
 8005af4:	08005e93 	.word	0x08005e93
 8005af8:	08005e93 	.word	0x08005e93
 8005afc:	08005dd1 	.word	0x08005dd1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b00:	f7fd fb3a 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 8005b04:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d044      	beq.n	8005b98 <UART_SetConfig+0xc38>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d03e      	beq.n	8005b94 <UART_SetConfig+0xc34>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d038      	beq.n	8005b90 <UART_SetConfig+0xc30>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d032      	beq.n	8005b8c <UART_SetConfig+0xc2c>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d02c      	beq.n	8005b88 <UART_SetConfig+0xc28>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b05      	cmp	r3, #5
 8005b34:	d026      	beq.n	8005b84 <UART_SetConfig+0xc24>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b06      	cmp	r3, #6
 8005b3c:	d020      	beq.n	8005b80 <UART_SetConfig+0xc20>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b07      	cmp	r3, #7
 8005b44:	d01a      	beq.n	8005b7c <UART_SetConfig+0xc1c>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d014      	beq.n	8005b78 <UART_SetConfig+0xc18>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b09      	cmp	r3, #9
 8005b54:	d00e      	beq.n	8005b74 <UART_SetConfig+0xc14>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2b0a      	cmp	r3, #10
 8005b5c:	d008      	beq.n	8005b70 <UART_SetConfig+0xc10>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	2b0b      	cmp	r3, #11
 8005b64:	d102      	bne.n	8005b6c <UART_SetConfig+0xc0c>
 8005b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b6a:	e016      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e014      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	e012      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b74:	2340      	movs	r3, #64	; 0x40
 8005b76:	e010      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b78:	2320      	movs	r3, #32
 8005b7a:	e00e      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	e00c      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b80:	230c      	movs	r3, #12
 8005b82:	e00a      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b84:	230a      	movs	r3, #10
 8005b86:	e008      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	e006      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b8c:	2306      	movs	r3, #6
 8005b8e:	e004      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b90:	2304      	movs	r3, #4
 8005b92:	e002      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e000      	b.n	8005b9a <UART_SetConfig+0xc3a>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba0:	005a      	lsls	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	441a      	add	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	61fb      	str	r3, [r7, #28]
        break;
 8005bb6:	e16f      	b.n	8005e98 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb8:	f7fd faf4 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8005bbc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d044      	beq.n	8005c50 <UART_SetConfig+0xcf0>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d03e      	beq.n	8005c4c <UART_SetConfig+0xcec>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d038      	beq.n	8005c48 <UART_SetConfig+0xce8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d032      	beq.n	8005c44 <UART_SetConfig+0xce4>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d02c      	beq.n	8005c40 <UART_SetConfig+0xce0>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b05      	cmp	r3, #5
 8005bec:	d026      	beq.n	8005c3c <UART_SetConfig+0xcdc>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b06      	cmp	r3, #6
 8005bf4:	d020      	beq.n	8005c38 <UART_SetConfig+0xcd8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b07      	cmp	r3, #7
 8005bfc:	d01a      	beq.n	8005c34 <UART_SetConfig+0xcd4>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d014      	beq.n	8005c30 <UART_SetConfig+0xcd0>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b09      	cmp	r3, #9
 8005c0c:	d00e      	beq.n	8005c2c <UART_SetConfig+0xccc>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2b0a      	cmp	r3, #10
 8005c14:	d008      	beq.n	8005c28 <UART_SetConfig+0xcc8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2b0b      	cmp	r3, #11
 8005c1c:	d102      	bne.n	8005c24 <UART_SetConfig+0xcc4>
 8005c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c22:	e016      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e014      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c28:	2380      	movs	r3, #128	; 0x80
 8005c2a:	e012      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c2c:	2340      	movs	r3, #64	; 0x40
 8005c2e:	e010      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c30:	2320      	movs	r3, #32
 8005c32:	e00e      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c34:	2310      	movs	r3, #16
 8005c36:	e00c      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c38:	230c      	movs	r3, #12
 8005c3a:	e00a      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c3c:	230a      	movs	r3, #10
 8005c3e:	e008      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c40:	2308      	movs	r3, #8
 8005c42:	e006      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c44:	2306      	movs	r3, #6
 8005c46:	e004      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	e002      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e000      	b.n	8005c52 <UART_SetConfig+0xcf2>
 8005c50:	2301      	movs	r3, #1
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c58:	005a      	lsls	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	085b      	lsrs	r3, r3, #1
 8005c60:	441a      	add	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	61fb      	str	r3, [r7, #28]
        break;
 8005c6e:	e113      	b.n	8005e98 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d043      	beq.n	8005d00 <UART_SetConfig+0xda0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d03d      	beq.n	8005cfc <UART_SetConfig+0xd9c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d037      	beq.n	8005cf8 <UART_SetConfig+0xd98>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d031      	beq.n	8005cf4 <UART_SetConfig+0xd94>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	d02b      	beq.n	8005cf0 <UART_SetConfig+0xd90>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	2b05      	cmp	r3, #5
 8005c9e:	d025      	beq.n	8005cec <UART_SetConfig+0xd8c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	2b06      	cmp	r3, #6
 8005ca6:	d01f      	beq.n	8005ce8 <UART_SetConfig+0xd88>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	2b07      	cmp	r3, #7
 8005cae:	d019      	beq.n	8005ce4 <UART_SetConfig+0xd84>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d013      	beq.n	8005ce0 <UART_SetConfig+0xd80>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	2b09      	cmp	r3, #9
 8005cbe:	d00d      	beq.n	8005cdc <UART_SetConfig+0xd7c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	2b0a      	cmp	r3, #10
 8005cc6:	d007      	beq.n	8005cd8 <UART_SetConfig+0xd78>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	2b0b      	cmp	r3, #11
 8005cce:	d101      	bne.n	8005cd4 <UART_SetConfig+0xd74>
 8005cd0:	4b8d      	ldr	r3, [pc, #564]	; (8005f08 <UART_SetConfig+0xfa8>)
 8005cd2:	e016      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005cd4:	4b8d      	ldr	r3, [pc, #564]	; (8005f0c <UART_SetConfig+0xfac>)
 8005cd6:	e014      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005cd8:	4b8d      	ldr	r3, [pc, #564]	; (8005f10 <UART_SetConfig+0xfb0>)
 8005cda:	e012      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005cdc:	4b8d      	ldr	r3, [pc, #564]	; (8005f14 <UART_SetConfig+0xfb4>)
 8005cde:	e010      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005ce0:	4b8d      	ldr	r3, [pc, #564]	; (8005f18 <UART_SetConfig+0xfb8>)
 8005ce2:	e00e      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005ce4:	4b8d      	ldr	r3, [pc, #564]	; (8005f1c <UART_SetConfig+0xfbc>)
 8005ce6:	e00c      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005ce8:	4b8d      	ldr	r3, [pc, #564]	; (8005f20 <UART_SetConfig+0xfc0>)
 8005cea:	e00a      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005cec:	4b8d      	ldr	r3, [pc, #564]	; (8005f24 <UART_SetConfig+0xfc4>)
 8005cee:	e008      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005cf0:	4b8d      	ldr	r3, [pc, #564]	; (8005f28 <UART_SetConfig+0xfc8>)
 8005cf2:	e006      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005cf4:	4b8d      	ldr	r3, [pc, #564]	; (8005f2c <UART_SetConfig+0xfcc>)
 8005cf6:	e004      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005cf8:	4b8d      	ldr	r3, [pc, #564]	; (8005f30 <UART_SetConfig+0xfd0>)
 8005cfa:	e002      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005cfc:	4b8d      	ldr	r3, [pc, #564]	; (8005f34 <UART_SetConfig+0xfd4>)
 8005cfe:	e000      	b.n	8005d02 <UART_SetConfig+0xda2>
 8005d00:	4b82      	ldr	r3, [pc, #520]	; (8005f0c <UART_SetConfig+0xfac>)
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6852      	ldr	r2, [r2, #4]
 8005d06:	0852      	lsrs	r2, r2, #1
 8005d08:	441a      	add	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	61fb      	str	r3, [r7, #28]
        break;
 8005d16:	e0bf      	b.n	8005e98 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d18:	f7fd f9c0 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8005d1c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d044      	beq.n	8005db0 <UART_SetConfig+0xe50>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d03e      	beq.n	8005dac <UART_SetConfig+0xe4c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d038      	beq.n	8005da8 <UART_SetConfig+0xe48>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d032      	beq.n	8005da4 <UART_SetConfig+0xe44>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d02c      	beq.n	8005da0 <UART_SetConfig+0xe40>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b05      	cmp	r3, #5
 8005d4c:	d026      	beq.n	8005d9c <UART_SetConfig+0xe3c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b06      	cmp	r3, #6
 8005d54:	d020      	beq.n	8005d98 <UART_SetConfig+0xe38>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	2b07      	cmp	r3, #7
 8005d5c:	d01a      	beq.n	8005d94 <UART_SetConfig+0xe34>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d014      	beq.n	8005d90 <UART_SetConfig+0xe30>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b09      	cmp	r3, #9
 8005d6c:	d00e      	beq.n	8005d8c <UART_SetConfig+0xe2c>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b0a      	cmp	r3, #10
 8005d74:	d008      	beq.n	8005d88 <UART_SetConfig+0xe28>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	2b0b      	cmp	r3, #11
 8005d7c:	d102      	bne.n	8005d84 <UART_SetConfig+0xe24>
 8005d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d82:	e016      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e014      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	e012      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	e010      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005d90:	2320      	movs	r3, #32
 8005d92:	e00e      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005d94:	2310      	movs	r3, #16
 8005d96:	e00c      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005d98:	230c      	movs	r3, #12
 8005d9a:	e00a      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005d9c:	230a      	movs	r3, #10
 8005d9e:	e008      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005da0:	2308      	movs	r3, #8
 8005da2:	e006      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005da4:	2306      	movs	r3, #6
 8005da6:	e004      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005da8:	2304      	movs	r3, #4
 8005daa:	e002      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e000      	b.n	8005db2 <UART_SetConfig+0xe52>
 8005db0:	2301      	movs	r3, #1
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db8:	005a      	lsls	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	441a      	add	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	61fb      	str	r3, [r7, #28]
        break;
 8005dce:	e063      	b.n	8005e98 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d04f      	beq.n	8005e78 <UART_SetConfig+0xf18>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d048      	beq.n	8005e72 <UART_SetConfig+0xf12>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d041      	beq.n	8005e6c <UART_SetConfig+0xf0c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d03a      	beq.n	8005e66 <UART_SetConfig+0xf06>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d033      	beq.n	8005e60 <UART_SetConfig+0xf00>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b05      	cmp	r3, #5
 8005dfe:	d02c      	beq.n	8005e5a <UART_SetConfig+0xefa>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2b06      	cmp	r3, #6
 8005e06:	d025      	beq.n	8005e54 <UART_SetConfig+0xef4>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b07      	cmp	r3, #7
 8005e0e:	d01e      	beq.n	8005e4e <UART_SetConfig+0xeee>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d017      	beq.n	8005e48 <UART_SetConfig+0xee8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	2b09      	cmp	r3, #9
 8005e1e:	d010      	beq.n	8005e42 <UART_SetConfig+0xee2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b0a      	cmp	r3, #10
 8005e26:	d009      	beq.n	8005e3c <UART_SetConfig+0xedc>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	2b0b      	cmp	r3, #11
 8005e2e:	d102      	bne.n	8005e36 <UART_SetConfig+0xed6>
 8005e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e34:	e022      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e3a:	e01f      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e40:	e01c      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e46:	e019      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e4c:	e016      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e52:	e013      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e54:	f241 5354 	movw	r3, #5460	; 0x1554
 8005e58:	e010      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e5a:	f641 1398 	movw	r3, #6552	; 0x1998
 8005e5e:	e00d      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e64:	e00a      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e66:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005e6a:	e007      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e70:	e004      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e76:	e001      	b.n	8005e7c <UART_SetConfig+0xf1c>
 8005e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6852      	ldr	r2, [r2, #4]
 8005e80:	0852      	lsrs	r2, r2, #1
 8005e82:	441a      	add	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	61fb      	str	r3, [r7, #28]
        break;
 8005e90:	e002      	b.n	8005e98 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	76fb      	strb	r3, [r7, #27]
        break;
 8005e96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b0f      	cmp	r3, #15
 8005e9c:	d916      	bls.n	8005ecc <UART_SetConfig+0xf6c>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea4:	d212      	bcs.n	8005ecc <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f023 030f 	bic.w	r3, r3, #15
 8005eae:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	085b      	lsrs	r3, r3, #1
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	89fb      	ldrh	r3, [r7, #14]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	89fa      	ldrh	r2, [r7, #14]
 8005ec8:	60da      	str	r2, [r3, #12]
 8005eca:	e20c      	b.n	80062e6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	76fb      	strb	r3, [r7, #27]
 8005ed0:	e209      	b.n	80062e6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8005ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	f200 81f4 	bhi.w	80062c4 <UART_SetConfig+0x1364>
 8005edc:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <UART_SetConfig+0xf84>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005f39 	.word	0x08005f39
 8005ee8:	08005fef 	.word	0x08005fef
 8005eec:	080060a5 	.word	0x080060a5
 8005ef0:	080062c5 	.word	0x080062c5
 8005ef4:	0800614f 	.word	0x0800614f
 8005ef8:	080062c5 	.word	0x080062c5
 8005efc:	080062c5 	.word	0x080062c5
 8005f00:	080062c5 	.word	0x080062c5
 8005f04:	08006205 	.word	0x08006205
 8005f08:	0001e848 	.word	0x0001e848
 8005f0c:	01e84800 	.word	0x01e84800
 8005f10:	0003d090 	.word	0x0003d090
 8005f14:	0007a120 	.word	0x0007a120
 8005f18:	000f4240 	.word	0x000f4240
 8005f1c:	001e8480 	.word	0x001e8480
 8005f20:	0028b0aa 	.word	0x0028b0aa
 8005f24:	0030d400 	.word	0x0030d400
 8005f28:	003d0900 	.word	0x003d0900
 8005f2c:	00516154 	.word	0x00516154
 8005f30:	007a1200 	.word	0x007a1200
 8005f34:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f38:	f7fd f91e 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 8005f3c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d044      	beq.n	8005fd0 <UART_SetConfig+0x1070>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d03e      	beq.n	8005fcc <UART_SetConfig+0x106c>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d038      	beq.n	8005fc8 <UART_SetConfig+0x1068>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d032      	beq.n	8005fc4 <UART_SetConfig+0x1064>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d02c      	beq.n	8005fc0 <UART_SetConfig+0x1060>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	2b05      	cmp	r3, #5
 8005f6c:	d026      	beq.n	8005fbc <UART_SetConfig+0x105c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	2b06      	cmp	r3, #6
 8005f74:	d020      	beq.n	8005fb8 <UART_SetConfig+0x1058>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b07      	cmp	r3, #7
 8005f7c:	d01a      	beq.n	8005fb4 <UART_SetConfig+0x1054>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d014      	beq.n	8005fb0 <UART_SetConfig+0x1050>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b09      	cmp	r3, #9
 8005f8c:	d00e      	beq.n	8005fac <UART_SetConfig+0x104c>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2b0a      	cmp	r3, #10
 8005f94:	d008      	beq.n	8005fa8 <UART_SetConfig+0x1048>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b0b      	cmp	r3, #11
 8005f9c:	d102      	bne.n	8005fa4 <UART_SetConfig+0x1044>
 8005f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fa2:	e016      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e014      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	e012      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	e010      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	e00e      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	e00c      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fb8:	230c      	movs	r3, #12
 8005fba:	e00a      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fbc:	230a      	movs	r3, #10
 8005fbe:	e008      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	e006      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fc4:	2306      	movs	r3, #6
 8005fc6:	e004      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	e002      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e000      	b.n	8005fd2 <UART_SetConfig+0x1072>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	085b      	lsrs	r3, r3, #1
 8005fde:	441a      	add	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	61fb      	str	r3, [r7, #28]
        break;
 8005fec:	e16d      	b.n	80062ca <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fee:	f7fd f8d9 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8005ff2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d044      	beq.n	8006086 <UART_SetConfig+0x1126>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	2b01      	cmp	r3, #1
 8006002:	d03e      	beq.n	8006082 <UART_SetConfig+0x1122>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	2b02      	cmp	r3, #2
 800600a:	d038      	beq.n	800607e <UART_SetConfig+0x111e>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	2b03      	cmp	r3, #3
 8006012:	d032      	beq.n	800607a <UART_SetConfig+0x111a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	2b04      	cmp	r3, #4
 800601a:	d02c      	beq.n	8006076 <UART_SetConfig+0x1116>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	2b05      	cmp	r3, #5
 8006022:	d026      	beq.n	8006072 <UART_SetConfig+0x1112>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	2b06      	cmp	r3, #6
 800602a:	d020      	beq.n	800606e <UART_SetConfig+0x110e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	2b07      	cmp	r3, #7
 8006032:	d01a      	beq.n	800606a <UART_SetConfig+0x110a>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	2b08      	cmp	r3, #8
 800603a:	d014      	beq.n	8006066 <UART_SetConfig+0x1106>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	2b09      	cmp	r3, #9
 8006042:	d00e      	beq.n	8006062 <UART_SetConfig+0x1102>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	2b0a      	cmp	r3, #10
 800604a:	d008      	beq.n	800605e <UART_SetConfig+0x10fe>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b0b      	cmp	r3, #11
 8006052:	d102      	bne.n	800605a <UART_SetConfig+0x10fa>
 8006054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006058:	e016      	b.n	8006088 <UART_SetConfig+0x1128>
 800605a:	2301      	movs	r3, #1
 800605c:	e014      	b.n	8006088 <UART_SetConfig+0x1128>
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	e012      	b.n	8006088 <UART_SetConfig+0x1128>
 8006062:	2340      	movs	r3, #64	; 0x40
 8006064:	e010      	b.n	8006088 <UART_SetConfig+0x1128>
 8006066:	2320      	movs	r3, #32
 8006068:	e00e      	b.n	8006088 <UART_SetConfig+0x1128>
 800606a:	2310      	movs	r3, #16
 800606c:	e00c      	b.n	8006088 <UART_SetConfig+0x1128>
 800606e:	230c      	movs	r3, #12
 8006070:	e00a      	b.n	8006088 <UART_SetConfig+0x1128>
 8006072:	230a      	movs	r3, #10
 8006074:	e008      	b.n	8006088 <UART_SetConfig+0x1128>
 8006076:	2308      	movs	r3, #8
 8006078:	e006      	b.n	8006088 <UART_SetConfig+0x1128>
 800607a:	2306      	movs	r3, #6
 800607c:	e004      	b.n	8006088 <UART_SetConfig+0x1128>
 800607e:	2304      	movs	r3, #4
 8006080:	e002      	b.n	8006088 <UART_SetConfig+0x1128>
 8006082:	2302      	movs	r3, #2
 8006084:	e000      	b.n	8006088 <UART_SetConfig+0x1128>
 8006086:	2301      	movs	r3, #1
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	fbb2 f2f3 	udiv	r2, r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	441a      	add	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	fbb2 f3f3 	udiv	r3, r2, r3
 800609e:	b29b      	uxth	r3, r3
 80060a0:	61fb      	str	r3, [r7, #28]
        break;
 80060a2:	e112      	b.n	80062ca <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d044      	beq.n	8006136 <UART_SetConfig+0x11d6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d03e      	beq.n	8006132 <UART_SetConfig+0x11d2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d038      	beq.n	800612e <UART_SetConfig+0x11ce>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d032      	beq.n	800612a <UART_SetConfig+0x11ca>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d02c      	beq.n	8006126 <UART_SetConfig+0x11c6>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	d026      	beq.n	8006122 <UART_SetConfig+0x11c2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b06      	cmp	r3, #6
 80060da:	d020      	beq.n	800611e <UART_SetConfig+0x11be>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	2b07      	cmp	r3, #7
 80060e2:	d01a      	beq.n	800611a <UART_SetConfig+0x11ba>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d014      	beq.n	8006116 <UART_SetConfig+0x11b6>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	2b09      	cmp	r3, #9
 80060f2:	d00e      	beq.n	8006112 <UART_SetConfig+0x11b2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2b0a      	cmp	r3, #10
 80060fa:	d008      	beq.n	800610e <UART_SetConfig+0x11ae>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b0b      	cmp	r3, #11
 8006102:	d102      	bne.n	800610a <UART_SetConfig+0x11aa>
 8006104:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006108:	e016      	b.n	8006138 <UART_SetConfig+0x11d8>
 800610a:	4b81      	ldr	r3, [pc, #516]	; (8006310 <UART_SetConfig+0x13b0>)
 800610c:	e014      	b.n	8006138 <UART_SetConfig+0x11d8>
 800610e:	4b81      	ldr	r3, [pc, #516]	; (8006314 <UART_SetConfig+0x13b4>)
 8006110:	e012      	b.n	8006138 <UART_SetConfig+0x11d8>
 8006112:	4b81      	ldr	r3, [pc, #516]	; (8006318 <UART_SetConfig+0x13b8>)
 8006114:	e010      	b.n	8006138 <UART_SetConfig+0x11d8>
 8006116:	4b81      	ldr	r3, [pc, #516]	; (800631c <UART_SetConfig+0x13bc>)
 8006118:	e00e      	b.n	8006138 <UART_SetConfig+0x11d8>
 800611a:	4b81      	ldr	r3, [pc, #516]	; (8006320 <UART_SetConfig+0x13c0>)
 800611c:	e00c      	b.n	8006138 <UART_SetConfig+0x11d8>
 800611e:	4b81      	ldr	r3, [pc, #516]	; (8006324 <UART_SetConfig+0x13c4>)
 8006120:	e00a      	b.n	8006138 <UART_SetConfig+0x11d8>
 8006122:	4b81      	ldr	r3, [pc, #516]	; (8006328 <UART_SetConfig+0x13c8>)
 8006124:	e008      	b.n	8006138 <UART_SetConfig+0x11d8>
 8006126:	4b81      	ldr	r3, [pc, #516]	; (800632c <UART_SetConfig+0x13cc>)
 8006128:	e006      	b.n	8006138 <UART_SetConfig+0x11d8>
 800612a:	4b81      	ldr	r3, [pc, #516]	; (8006330 <UART_SetConfig+0x13d0>)
 800612c:	e004      	b.n	8006138 <UART_SetConfig+0x11d8>
 800612e:	4b81      	ldr	r3, [pc, #516]	; (8006334 <UART_SetConfig+0x13d4>)
 8006130:	e002      	b.n	8006138 <UART_SetConfig+0x11d8>
 8006132:	4b81      	ldr	r3, [pc, #516]	; (8006338 <UART_SetConfig+0x13d8>)
 8006134:	e000      	b.n	8006138 <UART_SetConfig+0x11d8>
 8006136:	4b76      	ldr	r3, [pc, #472]	; (8006310 <UART_SetConfig+0x13b0>)
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6852      	ldr	r2, [r2, #4]
 800613c:	0852      	lsrs	r2, r2, #1
 800613e:	441a      	add	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	b29b      	uxth	r3, r3
 800614a:	61fb      	str	r3, [r7, #28]
        break;
 800614c:	e0bd      	b.n	80062ca <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614e:	f7fc ffa5 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8006152:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	2b00      	cmp	r3, #0
 800615a:	d044      	beq.n	80061e6 <UART_SetConfig+0x1286>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	2b01      	cmp	r3, #1
 8006162:	d03e      	beq.n	80061e2 <UART_SetConfig+0x1282>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	2b02      	cmp	r3, #2
 800616a:	d038      	beq.n	80061de <UART_SetConfig+0x127e>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	2b03      	cmp	r3, #3
 8006172:	d032      	beq.n	80061da <UART_SetConfig+0x127a>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	2b04      	cmp	r3, #4
 800617a:	d02c      	beq.n	80061d6 <UART_SetConfig+0x1276>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	2b05      	cmp	r3, #5
 8006182:	d026      	beq.n	80061d2 <UART_SetConfig+0x1272>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	2b06      	cmp	r3, #6
 800618a:	d020      	beq.n	80061ce <UART_SetConfig+0x126e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	2b07      	cmp	r3, #7
 8006192:	d01a      	beq.n	80061ca <UART_SetConfig+0x126a>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b08      	cmp	r3, #8
 800619a:	d014      	beq.n	80061c6 <UART_SetConfig+0x1266>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	2b09      	cmp	r3, #9
 80061a2:	d00e      	beq.n	80061c2 <UART_SetConfig+0x1262>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	2b0a      	cmp	r3, #10
 80061aa:	d008      	beq.n	80061be <UART_SetConfig+0x125e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	2b0b      	cmp	r3, #11
 80061b2:	d102      	bne.n	80061ba <UART_SetConfig+0x125a>
 80061b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061b8:	e016      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e014      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061be:	2380      	movs	r3, #128	; 0x80
 80061c0:	e012      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061c2:	2340      	movs	r3, #64	; 0x40
 80061c4:	e010      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061c6:	2320      	movs	r3, #32
 80061c8:	e00e      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061ca:	2310      	movs	r3, #16
 80061cc:	e00c      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061ce:	230c      	movs	r3, #12
 80061d0:	e00a      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061d2:	230a      	movs	r3, #10
 80061d4:	e008      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061d6:	2308      	movs	r3, #8
 80061d8:	e006      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061da:	2306      	movs	r3, #6
 80061dc:	e004      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061de:	2304      	movs	r3, #4
 80061e0:	e002      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e000      	b.n	80061e8 <UART_SetConfig+0x1288>
 80061e6:	2301      	movs	r3, #1
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	441a      	add	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fe:	b29b      	uxth	r3, r3
 8006200:	61fb      	str	r3, [r7, #28]
        break;
 8006202:	e062      	b.n	80062ca <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	2b00      	cmp	r3, #0
 800620a:	d04e      	beq.n	80062aa <UART_SetConfig+0x134a>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	2b01      	cmp	r3, #1
 8006212:	d047      	beq.n	80062a4 <UART_SetConfig+0x1344>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2b02      	cmp	r3, #2
 800621a:	d040      	beq.n	800629e <UART_SetConfig+0x133e>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	2b03      	cmp	r3, #3
 8006222:	d039      	beq.n	8006298 <UART_SetConfig+0x1338>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	2b04      	cmp	r3, #4
 800622a:	d032      	beq.n	8006292 <UART_SetConfig+0x1332>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b05      	cmp	r3, #5
 8006232:	d02b      	beq.n	800628c <UART_SetConfig+0x132c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	2b06      	cmp	r3, #6
 800623a:	d024      	beq.n	8006286 <UART_SetConfig+0x1326>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2b07      	cmp	r3, #7
 8006242:	d01d      	beq.n	8006280 <UART_SetConfig+0x1320>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b08      	cmp	r3, #8
 800624a:	d016      	beq.n	800627a <UART_SetConfig+0x131a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	2b09      	cmp	r3, #9
 8006252:	d00f      	beq.n	8006274 <UART_SetConfig+0x1314>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	2b0a      	cmp	r3, #10
 800625a:	d008      	beq.n	800626e <UART_SetConfig+0x130e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b0b      	cmp	r3, #11
 8006262:	d101      	bne.n	8006268 <UART_SetConfig+0x1308>
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	e022      	b.n	80062ae <UART_SetConfig+0x134e>
 8006268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626c:	e01f      	b.n	80062ae <UART_SetConfig+0x134e>
 800626e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006272:	e01c      	b.n	80062ae <UART_SetConfig+0x134e>
 8006274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006278:	e019      	b.n	80062ae <UART_SetConfig+0x134e>
 800627a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800627e:	e016      	b.n	80062ae <UART_SetConfig+0x134e>
 8006280:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006284:	e013      	b.n	80062ae <UART_SetConfig+0x134e>
 8006286:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800628a:	e010      	b.n	80062ae <UART_SetConfig+0x134e>
 800628c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006290:	e00d      	b.n	80062ae <UART_SetConfig+0x134e>
 8006292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006296:	e00a      	b.n	80062ae <UART_SetConfig+0x134e>
 8006298:	f241 5355 	movw	r3, #5461	; 0x1555
 800629c:	e007      	b.n	80062ae <UART_SetConfig+0x134e>
 800629e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062a2:	e004      	b.n	80062ae <UART_SetConfig+0x134e>
 80062a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062a8:	e001      	b.n	80062ae <UART_SetConfig+0x134e>
 80062aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6852      	ldr	r2, [r2, #4]
 80062b2:	0852      	lsrs	r2, r2, #1
 80062b4:	441a      	add	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	b29b      	uxth	r3, r3
 80062c0:	61fb      	str	r3, [r7, #28]
        break;
 80062c2:	e002      	b.n	80062ca <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	76fb      	strb	r3, [r7, #27]
        break;
 80062c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b0f      	cmp	r3, #15
 80062ce:	d908      	bls.n	80062e2 <UART_SetConfig+0x1382>
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d6:	d204      	bcs.n	80062e2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	60da      	str	r2, [r3, #12]
 80062e0:	e001      	b.n	80062e6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006302:	7efb      	ldrb	r3, [r7, #27]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3728      	adds	r7, #40	; 0x28
 8006308:	46bd      	mov	sp, r7
 800630a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800630e:	bf00      	nop
 8006310:	00f42400 	.word	0x00f42400
 8006314:	0001e848 	.word	0x0001e848
 8006318:	0003d090 	.word	0x0003d090
 800631c:	0007a120 	.word	0x0007a120
 8006320:	000f4240 	.word	0x000f4240
 8006324:	00145855 	.word	0x00145855
 8006328:	00186a00 	.word	0x00186a00
 800632c:	001e8480 	.word	0x001e8480
 8006330:	0028b0aa 	.word	0x0028b0aa
 8006334:	003d0900 	.word	0x003d0900
 8006338:	007a1200 	.word	0x007a1200

0800633c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01a      	beq.n	8006452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800643a:	d10a      	bne.n	8006452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	605a      	str	r2, [r3, #4]
  }
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af02      	add	r7, sp, #8
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006490:	f7fb f800 	bl	8001494 <HAL_GetTick>
 8006494:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d10e      	bne.n	80064c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f82c 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e022      	b.n	8006508 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d10e      	bne.n	80064ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f816 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e00c      	b.n	8006508 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006520:	e02c      	b.n	800657c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d028      	beq.n	800657c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652a:	f7fa ffb3 	bl	8001494 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	429a      	cmp	r2, r3
 8006538:	d302      	bcc.n	8006540 <UART_WaitOnFlagUntilTimeout+0x30>
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d11d      	bne.n	800657c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800654e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e00f      	b.n	800659c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69da      	ldr	r2, [r3, #28]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4013      	ands	r3, r2
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	429a      	cmp	r2, r3
 800658a:	bf0c      	ite	eq
 800658c:	2301      	moveq	r3, #1
 800658e:	2300      	movne	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	461a      	mov	r2, r3
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	429a      	cmp	r2, r3
 8006598:	d0c3      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_UARTEx_DisableFifoMode+0x16>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e027      	b.n	800660a <HAL_UARTEx_DisableFifoMode+0x66>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2224      	movs	r2, #36	; 0x24
 80065c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0201 	bic.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800662a:	2302      	movs	r3, #2
 800662c:	e02d      	b.n	800668a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2224      	movs	r2, #36	; 0x24
 800663a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0201 	bic.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f850 	bl	8006710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2220      	movs	r2, #32
 800667c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066a6:	2302      	movs	r3, #2
 80066a8:	e02d      	b.n	8006706 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2224      	movs	r2, #36	; 0x24
 80066b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f812 	bl	8006710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b089      	sub	sp, #36	; 0x24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006718:	4a2f      	ldr	r2, [pc, #188]	; (80067d8 <UARTEx_SetNbDataToProcess+0xc8>)
 800671a:	f107 0314 	add.w	r3, r7, #20
 800671e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006722:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006726:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <UARTEx_SetNbDataToProcess+0xcc>)
 8006728:	f107 030c 	add.w	r3, r7, #12
 800672c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006730:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006738:	2b00      	cmp	r3, #0
 800673a:	d108      	bne.n	800674e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800674c:	e03d      	b.n	80067ca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800674e:	2308      	movs	r3, #8
 8006750:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006752:	2308      	movs	r3, #8
 8006754:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	0e5b      	lsrs	r3, r3, #25
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	0f5b      	lsrs	r3, r3, #29
 800676e:	b2db      	uxtb	r3, r3
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006776:	7fbb      	ldrb	r3, [r7, #30]
 8006778:	7f3a      	ldrb	r2, [r7, #28]
 800677a:	f107 0120 	add.w	r1, r7, #32
 800677e:	440a      	add	r2, r1
 8006780:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006784:	fb02 f303 	mul.w	r3, r2, r3
 8006788:	7f3a      	ldrb	r2, [r7, #28]
 800678a:	f107 0120 	add.w	r1, r7, #32
 800678e:	440a      	add	r2, r1
 8006790:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006794:	fb93 f3f2 	sdiv	r3, r3, r2
 8006798:	b29a      	uxth	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80067a0:	7ffb      	ldrb	r3, [r7, #31]
 80067a2:	7f7a      	ldrb	r2, [r7, #29]
 80067a4:	f107 0120 	add.w	r1, r7, #32
 80067a8:	440a      	add	r2, r1
 80067aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80067ae:	fb02 f303 	mul.w	r3, r2, r3
 80067b2:	7f7a      	ldrb	r2, [r7, #29]
 80067b4:	f107 0120 	add.w	r1, r7, #32
 80067b8:	440a      	add	r2, r1
 80067ba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80067be:	fb93 f3f2 	sdiv	r3, r3, r2
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067ca:	bf00      	nop
 80067cc:	3724      	adds	r7, #36	; 0x24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	08007f40 	.word	0x08007f40
 80067dc:	08007f48 	.word	0x08007f48

080067e0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
 
if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80067e4:	4907      	ldr	r1, [pc, #28]	; (8006804 <MX_FATFS_Init+0x24>)
 80067e6:	4808      	ldr	r0, [pc, #32]	; (8006808 <MX_FATFS_Init+0x28>)
 80067e8:	f001 fb62 	bl	8007eb0 <FATFS_LinkDriver>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	e003      	b.n	8006800 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 80067f8:	4b04      	ldr	r3, [pc, #16]	; (800680c <MX_FATFS_Init+0x2c>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80067fe:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8006800:	4618      	mov	r0, r3
 8006802:	bd80      	pop	{r7, pc}
 8006804:	2000063c 	.word	0x2000063c
 8006808:	20000010 	.word	0x20000010
 800680c:	20000048 	.word	0x20000048

08006810 <MY_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t MY_SD_Init(uint32_t Instance)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006818:	2300      	movs	r3, #0
 800681a:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <MY_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006822:	f06f 0301 	mvn.w	r3, #1
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	e010      	b.n	800684c <MY_SD_Init+0x3c>
  } /* Configure IO functionalities for SD pin */
  else if(SD_IO_Init() != BSP_ERROR_NONE)
 800682a:	f000 fa9b 	bl	8006d64 <SD_IO_Init>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <MY_SD_Init+0x2c>
  {
    ret = BSP_ERROR_NO_INIT;
 8006834:	f04f 33ff 	mov.w	r3, #4294967295
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e007      	b.n	800684c <MY_SD_Init+0x3c>
  }
  else
  {
    /* SD initialized and set to SPI mode properly */
    if(SD_GoIdleState() != BSP_ERROR_NONE)
 800683c:	f000 ff74 	bl	8007728 <SD_GoIdleState>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <MY_SD_Init+0x3c>
    {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006846:	f06f 0305 	mvn.w	r3, #5
 800684a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800684c:	68fb      	ldr	r3, [r7, #12]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <MY_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t MY_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	61bb      	str	r3, [r7, #24]
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <MY_SD_ReadBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006874:	f06f 0301 	mvn.w	r3, #1
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	e0b2      	b.n	80069e2 <MY_SD_ReadBlocks+0x18a>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800687c:	2300      	movs	r3, #0
 800687e:	22ff      	movs	r2, #255	; 0xff
 8006880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006884:	2010      	movs	r0, #16
 8006886:	f000 fdd1 	bl	800742c <SD_SendCmd>
 800688a:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 800688c:	2001      	movs	r0, #1
 800688e:	f000 fab5 	bl	8006dfc <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006892:	f107 0313 	add.w	r3, r7, #19
 8006896:	2101      	movs	r1, #1
 8006898:	4618      	mov	r0, r3
 800689a:	f001 f915 	bl	8007ac8 <BSP_SPI2_Send>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <MY_SD_ReadBlocks+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80068a4:	f06f 0303 	mvn.w	r3, #3
 80068a8:	61fb      	str	r3, [r7, #28]
 80068aa:	e09a      	b.n	80069e2 <MY_SD_ReadBlocks+0x18a>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00e      	beq.n	80068d2 <MY_SD_ReadBlocks+0x7a>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 80068b4:	2001      	movs	r0, #1
 80068b6:	f000 faa1 	bl	8006dfc <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80068ba:	f107 0313 	add.w	r3, r7, #19
 80068be:	2101      	movs	r1, #1
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 f901 	bl	8007ac8 <BSP_SPI2_Send>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <MY_SD_ReadBlocks+0x7a>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80068cc:	f06f 0303 	mvn.w	r3, #3
 80068d0:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f040 8084 	bne.w	80069e2 <MY_SD_ReadBlocks+0x18a>
        /* Data transfer */
        do
        {
          /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
          /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U: MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	441a      	add	r2, r3
 80068e0:	4b42      	ldr	r3, [pc, #264]	; (80069ec <MY_SD_ReadBlocks+0x194>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <MY_SD_ReadBlocks+0x94>
 80068e8:	2301      	movs	r3, #1
 80068ea:	e001      	b.n	80068f0 <MY_SD_ReadBlocks+0x98>
 80068ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068f0:	fb02 f103 	mul.w	r1, r2, r3
 80068f4:	2300      	movs	r3, #0
 80068f6:	22ff      	movs	r2, #255	; 0xff
 80068f8:	2011      	movs	r0, #17
 80068fa:	f000 fd97 	bl	800742c <SD_SendCmd>
 80068fe:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00f      	beq.n	8006928 <MY_SD_ReadBlocks+0xd0>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006908:	2001      	movs	r0, #1
 800690a:	f000 fa77 	bl	8006dfc <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800690e:	f107 0313 	add.w	r3, r7, #19
 8006912:	2101      	movs	r1, #1
 8006914:	4618      	mov	r0, r3
 8006916:	f001 f8d7 	bl	8007ac8 <BSP_SPI2_Send>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <MY_SD_ReadBlocks+0xd0>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006920:	f06f 0303 	mvn.w	r3, #3
 8006924:	61fb      	str	r3, [r7, #28]
              break;
 8006926:	e05c      	b.n	80069e2 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* Now look for the data token to signify the start of the data */
          if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006928:	20fe      	movs	r0, #254	; 0xfe
 800692a:	f001 f83b 	bl	80079a4 <SD_WaitData>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d12f      	bne.n	8006994 <MY_SD_ReadBlocks+0x13c>
          {
            /* Read the SD block data : read NumByteToRead data */
            if(BUS_SPIx_Recv((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	4413      	add	r3, r2
 800693a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800693e:	4618      	mov	r0, r3
 8006940:	f001 f8de 	bl	8007b00 <BSP_SPI2_Recv>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <MY_SD_ReadBlocks+0xfa>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 800694a:	f06f 0303 	mvn.w	r3, #3
 800694e:	61fb      	str	r3, [r7, #28]
              break;
 8006950:	e047      	b.n	80069e2 <MY_SD_ReadBlocks+0x18a>
            }

            /* Set next read address*/
            offset += MY_SD_BLOCK_SIZE;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006958:	61bb      	str	r3, [r7, #24]
            BlocksNbr--;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	3b01      	subs	r3, #1
 800695e:	603b      	str	r3, [r7, #0]

            /* get CRC bytes (not really needed by us, but required by SD) */
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006960:	f107 0313 	add.w	r3, r7, #19
 8006964:	2101      	movs	r1, #1
 8006966:	4618      	mov	r0, r3
 8006968:	f001 f8ae 	bl	8007ac8 <BSP_SPI2_Send>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <MY_SD_ReadBlocks+0x122>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006972:	f06f 0303 	mvn.w	r3, #3
 8006976:	61fb      	str	r3, [r7, #28]
              break;
 8006978:	e033      	b.n	80069e2 <MY_SD_ReadBlocks+0x18a>
            }
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800697a:	f107 0313 	add.w	r3, r7, #19
 800697e:	2101      	movs	r1, #1
 8006980:	4618      	mov	r0, r3
 8006982:	f001 f8a1 	bl	8007ac8 <BSP_SPI2_Send>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d013      	beq.n	80069b4 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 800698c:	f06f 0303 	mvn.w	r3, #3
 8006990:	61fb      	str	r3, [r7, #28]
              break;
 8006992:	e026      	b.n	80069e2 <MY_SD_ReadBlocks+0x18a>
            }
          }
          else
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006994:	2001      	movs	r0, #1
 8006996:	f000 fa31 	bl	8006dfc <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800699a:	f107 0313 	add.w	r3, r7, #19
 800699e:	2101      	movs	r1, #1
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 f891 	bl	8007ac8 <BSP_SPI2_Send>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80069ac:	f06f 0303 	mvn.w	r3, #3
 80069b0:	61fb      	str	r3, [r7, #28]
              break;
 80069b2:	e016      	b.n	80069e2 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* End the command data read cycle */
          SD_IO_CSState(1);
 80069b4:	2001      	movs	r0, #1
 80069b6:	f000 fa21 	bl	8006dfc <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80069ba:	f107 0313 	add.w	r3, r7, #19
 80069be:	2101      	movs	r1, #1
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 f881 	bl	8007ac8 <BSP_SPI2_Send>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <MY_SD_ReadBlocks+0x17c>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80069cc:	f06f 0303 	mvn.w	r3, #3
 80069d0:	61fb      	str	r3, [r7, #28]
            break;
 80069d2:	e006      	b.n	80069e2 <MY_SD_ReadBlocks+0x18a>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <MY_SD_ReadBlocks+0x18a>
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f43f af7c 	beq.w	80068da <MY_SD_ReadBlocks+0x82>
      }
    }
  }

  /* Return BSP status */
  return ret;
 80069e2:	69fb      	ldr	r3, [r7, #28]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3720      	adds	r7, #32
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	2000004c 	.word	0x2000004c

080069f0 <MY_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t MY_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61bb      	str	r3, [r7, #24]
  uint8_t tmp, data_response;

  if(Instance >= SD_INSTANCES_NBR)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <MY_SD_WriteBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006a0c:	f06f 0301 	mvn.w	r3, #1
 8006a10:	61fb      	str	r3, [r7, #28]
 8006a12:	e0e8      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006a14:	2300      	movs	r3, #0
 8006a16:	22ff      	movs	r2, #255	; 0xff
 8006a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a1c:	2010      	movs	r0, #16
 8006a1e:	f000 fd05 	bl	800742c <SD_SendCmd>
 8006a22:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 8006a24:	2001      	movs	r0, #1
 8006a26:	f000 f9e9 	bl	8006dfc <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 8006a2a:	23ff      	movs	r3, #255	; 0xff
 8006a2c:	74fb      	strb	r3, [r7, #19]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006a2e:	f107 0313 	add.w	r3, r7, #19
 8006a32:	2101      	movs	r1, #1
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 f847 	bl	8007ac8 <BSP_SPI2_Send>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <MY_SD_WriteBlocks+0x58>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006a40:	f06f 0303 	mvn.w	r3, #3
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	e0ce      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00e      	beq.n	8006a6e <MY_SD_WriteBlocks+0x7e>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 8006a50:	2001      	movs	r0, #1
 8006a52:	f000 f9d3 	bl	8006dfc <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006a56:	f107 0313 	add.w	r3, r7, #19
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 f833 	bl	8007ac8 <BSP_SPI2_Send>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <MY_SD_WriteBlocks+0x7e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006a68:	f06f 0303 	mvn.w	r3, #3
 8006a6c:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f040 80b8 	bne.w	8006be6 <MY_SD_WriteBlocks+0x1f6>
        /* Data transfer */
        do
        {
          /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
          Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U : MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	441a      	add	r2, r3
 8006a7c:	4b5c      	ldr	r3, [pc, #368]	; (8006bf0 <MY_SD_WriteBlocks+0x200>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <MY_SD_WriteBlocks+0x98>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e001      	b.n	8006a8c <MY_SD_WriteBlocks+0x9c>
 8006a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a8c:	fb02 f103 	mul.w	r1, r2, r3
 8006a90:	2300      	movs	r3, #0
 8006a92:	22ff      	movs	r2, #255	; 0xff
 8006a94:	2018      	movs	r0, #24
 8006a96:	f000 fcc9 	bl	800742c <SD_SendCmd>
 8006a9a:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00f      	beq.n	8006ac4 <MY_SD_WriteBlocks+0xd4>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	f000 f9a9 	bl	8006dfc <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006aaa:	f107 0313 	add.w	r3, r7, #19
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 f809 	bl	8007ac8 <BSP_SPI2_Send>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <MY_SD_WriteBlocks+0xd4>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006abc:	f06f 0303 	mvn.w	r3, #3
 8006ac0:	61fb      	str	r3, [r7, #28]
              break;
 8006ac2:	e090      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          /* Send dummy byte for NWR timing : one byte between CMDWRITE and TOKEN */
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006ac4:	f107 0313 	add.w	r3, r7, #19
 8006ac8:	2101      	movs	r1, #1
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fffc 	bl	8007ac8 <BSP_SPI2_Send>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <MY_SD_WriteBlocks+0xee>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006ad6:	f06f 0303 	mvn.w	r3, #3
 8006ada:	61fb      	str	r3, [r7, #28]
            break;
 8006adc:	e083      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006ade:	f107 0313 	add.w	r3, r7, #19
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 ffef 	bl	8007ac8 <BSP_SPI2_Send>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <MY_SD_WriteBlocks+0x108>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006af0:	f06f 0303 	mvn.w	r3, #3
 8006af4:	61fb      	str	r3, [r7, #28]
            break;
 8006af6:	e076      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Send the data token to signify the start of the data */
          tmp = SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE;
 8006af8:	23fe      	movs	r3, #254	; 0xfe
 8006afa:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006afc:	f107 0313 	add.w	r3, r7, #19
 8006b00:	2101      	movs	r1, #1
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 ffe0 	bl	8007ac8 <BSP_SPI2_Send>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <MY_SD_WriteBlocks+0x126>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006b0e:	f06f 0303 	mvn.w	r3, #3
 8006b12:	61fb      	str	r3, [r7, #28]
            break;
 8006b14:	e067      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Write the block data to SD */
          if(BUS_SPIx_Send((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 ffd1 	bl	8007ac8 <BSP_SPI2_Send>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <MY_SD_WriteBlocks+0x144>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006b2c:	f06f 0303 	mvn.w	r3, #3
 8006b30:	61fb      	str	r3, [r7, #28]
            break;
 8006b32:	e058      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Set next write address */
          offset += MY_SD_BLOCK_SIZE;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006b3a:	61bb      	str	r3, [r7, #24]
          BlocksNbr--;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	603b      	str	r3, [r7, #0]

          /* get CRC bytes (not really needed by us, but required by SD) */
          tmp = SD_DUMMY_BYTE;
 8006b42:	23ff      	movs	r3, #255	; 0xff
 8006b44:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b46:	f107 0313 	add.w	r3, r7, #19
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 ffbb 	bl	8007ac8 <BSP_SPI2_Send>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <MY_SD_WriteBlocks+0x170>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006b58:	f06f 0303 	mvn.w	r3, #3
 8006b5c:	61fb      	str	r3, [r7, #28]
            break;
 8006b5e:	e042      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b60:	f107 0313 	add.w	r3, r7, #19
 8006b64:	2101      	movs	r1, #1
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 ffae 	bl	8007ac8 <BSP_SPI2_Send>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <MY_SD_WriteBlocks+0x18a>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006b72:	f06f 0303 	mvn.w	r3, #3
 8006b76:	61fb      	str	r3, [r7, #28]
            break;
 8006b78:	e035      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Read data response */
          if(SD_GetDataResponse(&data_response) != BSP_ERROR_NONE)
 8006b7a:	f107 0312 	add.w	r3, r7, #18
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fd6c 	bl	800765c <SD_GetDataResponse>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <MY_SD_WriteBlocks+0x1a2>
          {
            ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006b8a:	f06f 0305 	mvn.w	r3, #5
 8006b8e:	61fb      	str	r3, [r7, #28]
            break;
 8006b90:	e029      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
          }

          if (data_response != (uint8_t)SD_DATA_OK)
 8006b92:	7cbb      	ldrb	r3, [r7, #18]
 8006b94:	2b05      	cmp	r3, #5
 8006b96:	d00f      	beq.n	8006bb8 <MY_SD_WriteBlocks+0x1c8>
          {
            /* Set response value to failure */
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006b98:	2001      	movs	r0, #1
 8006b9a:	f000 f92f 	bl	8006dfc <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b9e:	f107 0313 	add.w	r3, r7, #19
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 ff8f 	bl	8007ac8 <BSP_SPI2_Send>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <MY_SD_WriteBlocks+0x1c8>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006bb0:	f06f 0303 	mvn.w	r3, #3
 8006bb4:	61fb      	str	r3, [r7, #28]
              break;
 8006bb6:	e016      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          SD_IO_CSState(1);
 8006bb8:	2001      	movs	r0, #1
 8006bba:	f000 f91f 	bl	8006dfc <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006bbe:	f107 0313 	add.w	r3, r7, #19
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 ff7f 	bl	8007ac8 <BSP_SPI2_Send>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <MY_SD_WriteBlocks+0x1e8>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006bd0:	f06f 0303 	mvn.w	r3, #3
 8006bd4:	61fb      	str	r3, [r7, #28]
            break;
 8006bd6:	e006      	b.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <MY_SD_WriteBlocks+0x1f6>
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f43f af48 	beq.w	8006a76 <MY_SD_WriteBlocks+0x86>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006be6:	69fb      	ldr	r3, [r7, #28]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3720      	adds	r7, #32
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	2000004c 	.word	0x2000004c

08006bf4 <MY_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t MY_SD_GetCardState(uint32_t Instance)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint32_t response;
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <MY_SD_GetCardState+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006c02:	f06f 0301 	mvn.w	r3, #1
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	e026      	b.n	8006c58 <MY_SD_GetCardState+0x64>
  }
  else
  {
    /* Send CMD13 (SD_SEND_STATUS) to get SD status */
    response = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, (uint8_t)SD_ANSWER_R2_EXPECTED);
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	22ff      	movs	r2, #255	; 0xff
 8006c0e:	2100      	movs	r1, #0
 8006c10:	200d      	movs	r0, #13
 8006c12:	f000 fc0b 	bl	800742c <SD_SendCmd>
 8006c16:	6138      	str	r0, [r7, #16]
    SD_IO_CSState(1);
 8006c18:	2001      	movs	r0, #1
 8006c1a:	f000 f8ef 	bl	8006dfc <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 8006c1e:	23ff      	movs	r3, #255	; 0xff
 8006c20:	73fb      	strb	r3, [r7, #15]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006c22:	f107 030f 	add.w	r3, r7, #15
 8006c26:	2101      	movs	r1, #1
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 ff4d 	bl	8007ac8 <BSP_SPI2_Send>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <MY_SD_GetCardState+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006c34:	f06f 0303 	mvn.w	r3, #3
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	e00d      	b.n	8006c58 <MY_SD_GetCardState+0x64>
    }/* Find SD status according to card state */
    else if(((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR) && ((uint8_t)((response & 0xFF00UL) >> 8) == (uint8_t)SD_R2_NO_ERROR))
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d107      	bne.n	8006c54 <MY_SD_GetCardState+0x60>
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	0a1b      	lsrs	r3, r3, #8
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d102      	bne.n	8006c54 <MY_SD_GetCardState+0x60>
    {
      ret = (int32_t)SD_TRANSFER_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	e001      	b.n	8006c58 <MY_SD_GetCardState+0x64>
    }
    else
    {
      //ret = (int32_t)SD_TRANSFER_BUSY;
      ret = (int32_t)SD_TRANSFER_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return Status */
  return ret;
 8006c58:	697b      	ldr	r3, [r7, #20]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <MY_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
int32_t MY_SD_GetCardInfo(uint32_t Instance, MY_SD_CardInfo_t *CardInfo)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <MY_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006c78:	f06f 0301 	mvn.w	r3, #1
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	e069      	b.n	8006d54 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCSDRegister(&(CardInfo->Csd)) != BSP_ERROR_NONE)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 f8d2 	bl	8006e2c <SD_GetCSDRegister>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <MY_SD_GetCardInfo+0x32>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006c8e:	f06f 0305 	mvn.w	r3, #5
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e05e      	b.n	8006d54 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCIDRegister(&(CardInfo->Cid)) != BSP_ERROR_NONE)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 faf4 	bl	8007288 <SD_GetCIDRegister>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <MY_SD_GetCardInfo+0x4a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006ca6:	f06f 0305 	mvn.w	r3, #5
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	e052      	b.n	8006d54 <MY_SD_GetCardInfo+0xf0>
  }
  else if(CardType == MY_CARD_SDHC)
 8006cae:	4b2c      	ldr	r3, [pc, #176]	; (8006d60 <MY_SD_GetCardInfo+0xfc>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d11c      	bne.n	8006cf0 <MY_SD_GetCardInfo+0x8c>
  {
    CardInfo->LogBlockSize = 512U;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cbc:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = 512U;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cc4:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity = (CardInfo->Csd.version.v2.DeviceSize + 1U) * 1024U * CardInfo->LogBlockSize;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f3c3 1395 	ubfx	r3, r3, #6, #22
 8006cce:	3301      	adds	r3, #1
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006cd4:	fb02 f303 	mul.w	r3, r2, r3
 8006cd8:	029a      	lsls	r2, r3, #10
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	645a      	str	r2, [r3, #68]	; 0x44
 8006cee:	e031      	b.n	8006d54 <MY_SD_GetCardInfo+0xf0>
  }
  else
  {
    CardInfo->CardCapacity = ((uint32_t)CardInfo->Csd.version.v1.DeviceSize + 1U) ;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	891b      	ldrh	r3, [r3, #8]
 8006cf4:	f3c3 038b 	ubfx	r3, r3, #2, #12
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->CardCapacity *= (1UL << (CardInfo->Csd.version.v1.DeviceSizeMul + 2U));
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	7adb      	ldrb	r3, [r3, #11]
 8006d08:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	3302      	adds	r3, #2
 8006d10:	409a      	lsls	r2, r3
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockSize = 512U;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d1c:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = (1UL << (uint32_t)CardInfo->Csd.RdBlockLen);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	795b      	ldrb	r3, [r3, #5]
 8006d22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	fa03 f202 	lsl.w	r2, r3, r2
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity *= CardInfo->CardBlockSize;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d3c:	fb02 f203 	mul.w	r2, r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return ret;
 8006d54:	68fb      	ldr	r3, [r7, #12]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	2000004c 	.word	0x2000004c

08006d64 <SD_IO_Init>:
  * @brief  Initializes the SD Card and put it into StandBy State (Ready for
  *         data transfer).
  * @retval BSP status
  */
static int32_t SD_IO_Init(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
  uint8_t counter = 0, tmp;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* SD_CS_GPIO Periph clock enable */
  MY_SD_CS_GPIO_CLK_ENABLE();
 8006d72:	4b20      	ldr	r3, [pc, #128]	; (8006df4 <SD_IO_Init+0x90>)
 8006d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d76:	4a1f      	ldr	r2, [pc, #124]	; (8006df4 <SD_IO_Init+0x90>)
 8006d78:	f043 0302 	orr.w	r3, r3, #2
 8006d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d7e:	4b1d      	ldr	r3, [pc, #116]	; (8006df4 <SD_IO_Init+0x90>)
 8006d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  GPIO_InitStruct.Pin   = MY_SD_CS_PIN;
 8006d8a:	2304      	movs	r3, #4
 8006d8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8006d92:	2301      	movs	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d96:	2302      	movs	r3, #2
 8006d98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MY_SD_CS_GPIO_PORT, &GPIO_InitStruct);
 8006d9a:	1d3b      	adds	r3, r7, #4
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4816      	ldr	r0, [pc, #88]	; (8006df8 <SD_IO_Init+0x94>)
 8006da0:	f7fb fac6 	bl	8002330 <HAL_GPIO_Init>

  /*------------Put SD in SPI mode--------------*/
  /* SD SPI Config */
  if(BUS_SPIx_Init() != BSP_ERROR_NONE)
 8006da4:	f000 fe40 	bl	8007a28 <BSP_SPI2_Init>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <SD_IO_Init+0x52>
  {
    ret = BSP_ERROR_NO_INIT;
 8006dae:	f04f 33ff 	mov.w	r3, #4294967295
 8006db2:	61fb      	str	r3, [r7, #28]
 8006db4:	e019      	b.n	8006dea <SD_IO_Init+0x86>
  }
  else
  {
    /* SD chip select high */
    MY_SD_CS_HIGH();
 8006db6:	2201      	movs	r2, #1
 8006db8:	2104      	movs	r1, #4
 8006dba:	480f      	ldr	r0, [pc, #60]	; (8006df8 <SD_IO_Init+0x94>)
 8006dbc:	f7fb fc3a 	bl	8002634 <HAL_GPIO_WritePin>

    /* Send dummy byte 0xFF, 10 times with CS high */
    /* Rise CS and MOSI for 80 clocks cycles */
    tmp = SD_DUMMY_BYTE;
 8006dc0:	23ff      	movs	r3, #255	; 0xff
 8006dc2:	76bb      	strb	r3, [r7, #26]

    do
    {
      /* Send dummy byte 0xFF */
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006dc4:	f107 031a 	add.w	r3, r7, #26
 8006dc8:	2101      	movs	r1, #1
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fe7c 	bl	8007ac8 <BSP_SPI2_Send>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <SD_IO_Init+0x7a>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006dd6:	f06f 0303 	mvn.w	r3, #3
 8006dda:	61fb      	str	r3, [r7, #28]
        break;
 8006ddc:	e005      	b.n	8006dea <SD_IO_Init+0x86>
      }
      counter++;
 8006dde:	7efb      	ldrb	r3, [r7, #27]
 8006de0:	3301      	adds	r3, #1
 8006de2:	76fb      	strb	r3, [r7, #27]
    }while(counter <= 9U);
 8006de4:	7efb      	ldrb	r3, [r7, #27]
 8006de6:	2b09      	cmp	r3, #9
 8006de8:	d9ec      	bls.n	8006dc4 <SD_IO_Init+0x60>
  }

  return ret;
 8006dea:	69fb      	ldr	r3, [r7, #28]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3720      	adds	r7, #32
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	40021000 	.word	0x40021000
 8006df8:	48000400 	.word	0x48000400

08006dfc <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  Value pin's value.
  * @retval None
  */
static void SD_IO_CSState(uint32_t Value)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  if(Value == 1U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d105      	bne.n	8006e16 <SD_IO_CSState+0x1a>
  {
    MY_SD_CS_HIGH();
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	2104      	movs	r1, #4
 8006e0e:	4806      	ldr	r0, [pc, #24]	; (8006e28 <SD_IO_CSState+0x2c>)
 8006e10:	f7fb fc10 	bl	8002634 <HAL_GPIO_WritePin>
  }
  else
  {
    MY_SD_CS_LOW();
  }
}
 8006e14:	e004      	b.n	8006e20 <SD_IO_CSState+0x24>
    MY_SD_CS_LOW();
 8006e16:	2200      	movs	r2, #0
 8006e18:	2104      	movs	r1, #4
 8006e1a:	4803      	ldr	r0, [pc, #12]	; (8006e28 <SD_IO_CSState+0x2c>)
 8006e1c:	f7fb fc0a 	bl	8002634 <HAL_GPIO_WritePin>
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	48000400 	.word	0x48000400

08006e2c <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd pointer on an SCD register structure
  * @retval SD status
  */
static int32_t SD_GetCSDRegister(SD_CardSpecificData_t* Csd)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b096      	sub	sp, #88	; 0x58
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006e34:	2300      	movs	r3, #0
 8006e36:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t CSD_Tab[16];
  uint32_t response;
  uint8_t tmp;

  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	22ff      	movs	r2, #255	; 0xff
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	2009      	movs	r0, #9
 8006e40:	f000 faf4 	bl	800742c <SD_SendCmd>
 8006e44:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8006e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 8202 	bne.w	8007254 <SD_GetCSDRegister+0x428>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006e50:	20fe      	movs	r0, #254	; 0xfe
 8006e52:	f000 fda7 	bl	80079a4 <SD_WaitData>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f040 81fe 	bne.w	800725a <SD_GetCSDRegister+0x42e>
    {
      tmp = SD_DUMMY_BYTE;
 8006e5e:	23ff      	movs	r3, #255	; 0xff
 8006e60:	72fb      	strb	r3, [r7, #11]
      for (counter = 0U; counter < 16U; counter++)
 8006e62:	2300      	movs	r3, #0
 8006e64:	653b      	str	r3, [r7, #80]	; 0x50
 8006e66:	e014      	b.n	8006e92 <SD_GetCSDRegister+0x66>
      {
        /* Store CSD register value on CSD_Tab */
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CSD_Tab[counter], 1U) != BSP_ERROR_NONE)
 8006e68:	f107 020c 	add.w	r2, r7, #12
 8006e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	18d1      	adds	r1, r2, r3
 8006e72:	f107 030b 	add.w	r3, r7, #11
 8006e76:	2201      	movs	r2, #1
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fe5d 	bl	8007b38 <BSP_SPI2_SendRecv>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <SD_GetCSDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006e84:	f06f 0303 	mvn.w	r3, #3
 8006e88:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8006e8a:	e005      	b.n	8006e98 <SD_GetCSDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8006e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e8e:	3301      	adds	r3, #1
 8006e90:	653b      	str	r3, [r7, #80]	; 0x50
 8006e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e94:	2b0f      	cmp	r3, #15
 8006e96:	d9e7      	bls.n	8006e68 <SD_GetCSDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f040 81dd 	bne.w	800725a <SD_GetCSDRegister+0x42e>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006ea0:	f107 030b 	add.w	r3, r7, #11
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fe0e 	bl	8007ac8 <BSP_SPI2_Send>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <SD_GetCSDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006eb2:	f06f 0303 	mvn.w	r3, #3
 8006eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8006eb8:	e1cf      	b.n	800725a <SD_GetCSDRegister+0x42e>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006eba:	f107 030b 	add.w	r3, r7, #11
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fe01 	bl	8007ac8 <BSP_SPI2_Send>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <SD_GetCSDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006ecc:	f06f 0303 	mvn.w	r3, #3
 8006ed0:	657b      	str	r3, [r7, #84]	; 0x54
 8006ed2:	e1c2      	b.n	800725a <SD_GetCSDRegister+0x42e>
          /*************************************************************************
          CSD header decoding
          *************************************************************************/

          /* Byte 0 */
          Csd->CSDStruct = (CSD_Tab[0] & 0xC0U) >> 6U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	099b      	lsrs	r3, r3, #6
 8006ed8:	f003 0303 	and.w	r3, r3, #3
 8006edc:	b2d9      	uxtb	r1, r3
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	7813      	ldrb	r3, [r2, #0]
 8006ee2:	f361 0301 	bfi	r3, r1, #0, #2
 8006ee6:	7013      	strb	r3, [r2, #0]
          Csd->Reserved1 =  CSD_Tab[0] & 0x3FU;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eee:	b2d9      	uxtb	r1, r3
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7813      	ldrb	r3, [r2, #0]
 8006ef4:	f361 0387 	bfi	r3, r1, #2, #6
 8006ef8:	7013      	strb	r3, [r2, #0]

          /* Byte 1 */
          Csd->TAAC = CSD_Tab[1];
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	705a      	strb	r2, [r3, #1]

          /* Byte 2 */
          Csd->NSAC = CSD_Tab[2];
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	709a      	strb	r2, [r3, #2]

          /* Byte 3 */
          Csd->MaxBusClkFrec = CSD_Tab[3];
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	70da      	strb	r2, [r3, #3]

          /* Byte 4/5 */
          Csd->CardComdClasses = (uint16_t)(((uint16_t)CSD_Tab[4] << 4U) | ((uint16_t)(CSD_Tab[5] & 0xF0U) >> 4U));
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	011b      	lsls	r3, r3, #4
 8006f18:	b21a      	sxth	r2, r3
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	111b      	asrs	r3, r3, #4
 8006f20:	b21b      	sxth	r3, r3
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	b21b      	sxth	r3, r3
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	b21b      	sxth	r3, r3
 8006f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f30:	b299      	uxth	r1, r3
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	8893      	ldrh	r3, [r2, #4]
 8006f36:	f361 030b 	bfi	r3, r1, #0, #12
 8006f3a:	8093      	strh	r3, [r2, #4]
          Csd->RdBlockLen = CSD_Tab[5] & 0x0FU;
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	b2d9      	uxtb	r1, r3
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	7953      	ldrb	r3, [r2, #5]
 8006f48:	f361 1307 	bfi	r3, r1, #4, #4
 8006f4c:	7153      	strb	r3, [r2, #5]

          /* Byte 6 */
          Csd->PartBlockRead   = (CSD_Tab[6] & 0x80U) >> 7U;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	09db      	lsrs	r3, r3, #7
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	b2d9      	uxtb	r1, r3
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	7993      	ldrb	r3, [r2, #6]
 8006f5c:	f361 0300 	bfi	r3, r1, #0, #1
 8006f60:	7193      	strb	r3, [r2, #6]
          Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40U) >> 6U;
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	099b      	lsrs	r3, r3, #6
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	b2d9      	uxtb	r1, r3
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	7993      	ldrb	r3, [r2, #6]
 8006f70:	f361 0341 	bfi	r3, r1, #1, #1
 8006f74:	7193      	strb	r3, [r2, #6]
          Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20U) >> 5U;
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	b2d9      	uxtb	r1, r3
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	7993      	ldrb	r3, [r2, #6]
 8006f84:	f361 0382 	bfi	r3, r1, #2, #1
 8006f88:	7193      	strb	r3, [r2, #6]
          Csd->DSRImpl         = (CSD_Tab[6] & 0x10U) >> 4U;
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	091b      	lsrs	r3, r3, #4
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	b2d9      	uxtb	r1, r3
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	7993      	ldrb	r3, [r2, #6]
 8006f98:	f361 03c3 	bfi	r3, r1, #3, #1
 8006f9c:	7193      	strb	r3, [r2, #6]

          /*************************************************************************
          CSD v1/v2 decoding
          *************************************************************************/

          if(CardType == MY_CARD_SDSC)
 8006f9e:	4bac      	ldr	r3, [pc, #688]	; (8007250 <SD_GetCSDRegister+0x424>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d165      	bne.n	8007072 <SD_GetCSDRegister+0x246>
          {
            Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0CU) >> 2U);
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	089b      	lsrs	r3, r3, #2
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	b2d9      	uxtb	r1, r3
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	7a13      	ldrb	r3, [r2, #8]
 8006fb4:	f361 0301 	bfi	r3, r1, #0, #2
 8006fb8:	7213      	strb	r3, [r2, #8]

            Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03U) << 10U) | (CSD_Tab[7] << 2U) | ((CSD_Tab[8] & 0xC0U) >> 6U);
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	029b      	lsls	r3, r3, #10
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	099b      	lsrs	r3, r3, #6
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fe8:	b299      	uxth	r1, r3
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	8913      	ldrh	r3, [r2, #8]
 8006fee:	f361 038d 	bfi	r3, r1, #2, #12
 8006ff2:	8113      	strh	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38U) >> 3U;
 8006ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff6:	08db      	lsrs	r3, r3, #3
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	b2d9      	uxtb	r1, r3
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6893      	ldr	r3, [r2, #8]
 8007002:	f361 3390 	bfi	r3, r1, #14, #3
 8007006:	6093      	str	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07U);
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	b2d9      	uxtb	r1, r3
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	7a93      	ldrb	r3, [r2, #10]
 8007014:	f361 0343 	bfi	r3, r1, #1, #3
 8007018:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0U) >> 5U;
 800701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701c:	095b      	lsrs	r3, r3, #5
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	b2d9      	uxtb	r1, r3
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7a93      	ldrb	r3, [r2, #10]
 8007028:	f361 1306 	bfi	r3, r1, #4, #3
 800702c:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1CU) >> 2U;
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	089b      	lsrs	r3, r3, #2
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	b2d9      	uxtb	r1, r3
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	8953      	ldrh	r3, [r2, #10]
 800703c:	f361 13c9 	bfi	r3, r1, #7, #3
 8007040:	8153      	strh	r3, [r2, #10]
            Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03U) << 1U) | ((CSD_Tab[10] & 0x80U) >> 7U);
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	b2db      	uxtb	r3, r3
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	b2db      	uxtb	r3, r3
 800704a:	f003 0306 	and.w	r3, r3, #6
 800704e:	b2da      	uxtb	r2, r3
 8007050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007052:	09db      	lsrs	r3, r3, #7
 8007054:	b2db      	uxtb	r3, r3
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	b2db      	uxtb	r3, r3
 800705c:	4313      	orrs	r3, r2
 800705e:	b2db      	uxtb	r3, r3
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	b2d9      	uxtb	r1, r3
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	7ad3      	ldrb	r3, [r2, #11]
 800706a:	f361 0384 	bfi	r3, r1, #2, #3
 800706e:	72d3      	strb	r3, [r2, #11]
 8007070:	e02b      	b.n	80070ca <SD_GetCSDRegister+0x29e>
          }
          else
          {
            Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0FU) << 2U) | ((CSD_Tab[7] & 0xC0U) >> 6U);
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	b2db      	uxtb	r3, r3
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	b2db      	uxtb	r3, r3
 800707a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800707e:	b2da      	uxtb	r2, r3
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	099b      	lsrs	r3, r3, #6
 8007084:	b2db      	uxtb	r3, r3
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	b2db      	uxtb	r3, r3
 800708c:	4313      	orrs	r3, r2
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007094:	b2d9      	uxtb	r1, r3
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	7a13      	ldrb	r3, [r2, #8]
 800709a:	f361 0305 	bfi	r3, r1, #0, #6
 800709e:	7213      	strb	r3, [r2, #8]
            Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3FU) << 16U) | (CSD_Tab[8] << 8U) | CSD_Tab[9];
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	041b      	lsls	r3, r3, #16
 80070a4:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	431a      	orrs	r2, r3
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f3c3 0115 	ubfx	r1, r3, #0, #22
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6893      	ldr	r3, [r2, #8]
 80070ba:	f361 139b 	bfi	r3, r1, #6, #22
 80070be:	6093      	str	r3, [r2, #8]
            Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80U) >> 8U);
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	7ad3      	ldrb	r3, [r2, #11]
 80070c4:	f36f 1304 	bfc	r3, #4, #1
 80070c8:	72d3      	strb	r3, [r2, #11]
          }

          Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40U) >> 6U;
 80070ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070cc:	099b      	lsrs	r3, r3, #6
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	b2d9      	uxtb	r1, r3
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	7b13      	ldrb	r3, [r2, #12]
 80070d8:	f361 0300 	bfi	r3, r1, #0, #1
 80070dc:	7313      	strb	r3, [r2, #12]
          Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3FU) << 1U) | ((CSD_Tab[11] & 0x80U) >> 7U);
 80070de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	09db      	lsrs	r3, r3, #7
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	4313      	orrs	r3, r2
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007100:	b2d9      	uxtb	r1, r3
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	7b13      	ldrb	r3, [r2, #12]
 8007106:	f361 0347 	bfi	r3, r1, #1, #7
 800710a:	7313      	strb	r3, [r2, #12]
          Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7FU);
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007112:	b2d9      	uxtb	r1, r3
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	7b53      	ldrb	r3, [r2, #13]
 8007118:	f361 0306 	bfi	r3, r1, #0, #7
 800711c:	7353      	strb	r3, [r2, #13]
          Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80U) >> 7U;
 800711e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007120:	09db      	lsrs	r3, r3, #7
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	b2d9      	uxtb	r1, r3
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	7b53      	ldrb	r3, [r2, #13]
 800712c:	f361 13c7 	bfi	r3, r1, #7, #1
 8007130:	7353      	strb	r3, [r2, #13]
          Csd->Reserved2         = (CSD_Tab[12] & 0x60U) >> 5U;
 8007132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007134:	095b      	lsrs	r3, r3, #5
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	b2d9      	uxtb	r1, r3
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	7b93      	ldrb	r3, [r2, #14]
 8007140:	f361 0301 	bfi	r3, r1, #0, #2
 8007144:	7393      	strb	r3, [r2, #14]
          Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1CU) >> 2U;
 8007146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007148:	089b      	lsrs	r3, r3, #2
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	b2d9      	uxtb	r1, r3
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	7b93      	ldrb	r3, [r2, #14]
 8007154:	f361 0384 	bfi	r3, r1, #2, #3
 8007158:	7393      	strb	r3, [r2, #14]
          Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03U) << 2U) | ((CSD_Tab[13] & 0xC0U) >> 6U);
 800715a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715c:	b2db      	uxtb	r3, r3
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	b2db      	uxtb	r3, r3
 8007162:	f003 030c 	and.w	r3, r3, #12
 8007166:	b2da      	uxtb	r2, r3
 8007168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800716a:	099b      	lsrs	r3, r3, #6
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	b2db      	uxtb	r3, r3
 8007174:	4313      	orrs	r3, r2
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	b2d9      	uxtb	r1, r3
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	89d3      	ldrh	r3, [r2, #14]
 8007182:	f361 1348 	bfi	r3, r1, #5, #4
 8007186:	81d3      	strh	r3, [r2, #14]
          Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20U) >> 5U;
 8007188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718a:	095b      	lsrs	r3, r3, #5
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	b2d9      	uxtb	r1, r3
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	7bd3      	ldrb	r3, [r2, #15]
 8007196:	f361 0341 	bfi	r3, r1, #1, #1
 800719a:	73d3      	strb	r3, [r2, #15]
          Csd->Reserved3         = (CSD_Tab[13] & 0x1FU);
 800719c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	b2d9      	uxtb	r1, r3
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	7bd3      	ldrb	r3, [r2, #15]
 80071a8:	f361 0386 	bfi	r3, r1, #2, #5
 80071ac:	73d3      	strb	r3, [r2, #15]
          Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80U) >> 7U;
 80071ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b0:	09db      	lsrs	r3, r3, #7
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	b2d9      	uxtb	r1, r3
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	7bd3      	ldrb	r3, [r2, #15]
 80071bc:	f361 13c7 	bfi	r3, r1, #7, #1
 80071c0:	73d3      	strb	r3, [r2, #15]
          Csd->CopyFlag          = (CSD_Tab[14] & 0x40U) >> 6U;
 80071c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071c4:	099b      	lsrs	r3, r3, #6
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	b2d9      	uxtb	r1, r3
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7c13      	ldrb	r3, [r2, #16]
 80071d0:	f361 0300 	bfi	r3, r1, #0, #1
 80071d4:	7413      	strb	r3, [r2, #16]
          Csd->PermWrProtect     = (CSD_Tab[14] & 0x20U) >> 5U;
 80071d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d8:	095b      	lsrs	r3, r3, #5
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	b2d9      	uxtb	r1, r3
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	7c13      	ldrb	r3, [r2, #16]
 80071e4:	f361 0341 	bfi	r3, r1, #1, #1
 80071e8:	7413      	strb	r3, [r2, #16]
          Csd->TempWrProtect     = (CSD_Tab[14] & 0x10U) >> 4U;
 80071ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ec:	091b      	lsrs	r3, r3, #4
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	b2d9      	uxtb	r1, r3
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	7c13      	ldrb	r3, [r2, #16]
 80071f8:	f361 0382 	bfi	r3, r1, #2, #1
 80071fc:	7413      	strb	r3, [r2, #16]
          Csd->FileFormat        = (CSD_Tab[14] & 0x0CU) >> 2U;
 80071fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007200:	089b      	lsrs	r3, r3, #2
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	b2d9      	uxtb	r1, r3
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	7c13      	ldrb	r3, [r2, #16]
 800720c:	f361 03c4 	bfi	r3, r1, #3, #2
 8007210:	7413      	strb	r3, [r2, #16]
          Csd->Reserved4         = (CSD_Tab[14] & 0x03U);
 8007212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007214:	f003 0303 	and.w	r3, r3, #3
 8007218:	b2d9      	uxtb	r1, r3
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	7c13      	ldrb	r3, [r2, #16]
 800721e:	f361 1346 	bfi	r3, r1, #5, #2
 8007222:	7413      	strb	r3, [r2, #16]
          Csd->crc               = (CSD_Tab[15] & 0xFEU) >> 1U;
 8007224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722c:	b2d9      	uxtb	r1, r3
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	8a13      	ldrh	r3, [r2, #16]
 8007232:	f361 13cd 	bfi	r3, r1, #7, #7
 8007236:	8213      	strh	r3, [r2, #16]
          Csd->Reserved5         = (CSD_Tab[15] & 0x01U);
 8007238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	b2d9      	uxtb	r1, r3
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	7c53      	ldrb	r3, [r2, #17]
 8007244:	f361 1386 	bfi	r3, r1, #6, #1
 8007248:	7453      	strb	r3, [r2, #17]

          ret = BSP_ERROR_NONE;
 800724a:	2300      	movs	r3, #0
 800724c:	657b      	str	r3, [r7, #84]	; 0x54
 800724e:	e004      	b.n	800725a <SD_GetCSDRegister+0x42e>
 8007250:	2000004c 	.word	0x2000004c
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8007254:	f06f 0305 	mvn.w	r3, #5
 8007258:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 800725a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10e      	bne.n	800727e <SD_GetCSDRegister+0x452>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 8007260:	2001      	movs	r0, #1
 8007262:	f7ff fdcb 	bl	8006dfc <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007266:	f107 030b 	add.w	r3, r7, #11
 800726a:	2101      	movs	r1, #1
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fc2b 	bl	8007ac8 <BSP_SPI2_Send>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <SD_GetCSDRegister+0x452>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007278:	f06f 0303 	mvn.w	r3, #3
 800727c:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 800727e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8007280:	4618      	mov	r0, r3
 8007282:	3758      	adds	r7, #88	; 0x58
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
static int32_t SD_GetCIDRegister(SD_CardIdData_t* Cid)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b096      	sub	sp, #88	; 0x58
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007290:	2300      	movs	r3, #0
 8007292:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t response;
  uint32_t counter;
  uint8_t tmp;

  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CID, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007294:	2300      	movs	r3, #0
 8007296:	22ff      	movs	r2, #255	; 0xff
 8007298:	2100      	movs	r1, #0
 800729a:	200a      	movs	r0, #10
 800729c:	f000 f8c6 	bl	800742c <SD_SendCmd>
 80072a0:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 80072a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f040 80a6 	bne.w	80073f8 <SD_GetCIDRegister+0x170>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 80072ac:	20fe      	movs	r0, #254	; 0xfe
 80072ae:	f000 fb79 	bl	80079a4 <SD_WaitData>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f040 80a2 	bne.w	80073fe <SD_GetCIDRegister+0x176>
    {
      tmp = SD_DUMMY_BYTE;
 80072ba:	23ff      	movs	r3, #255	; 0xff
 80072bc:	72fb      	strb	r3, [r7, #11]

      /* Store CID register value on CID_Tab */
      for (counter = 0U; counter < 16U; counter++)
 80072be:	2300      	movs	r3, #0
 80072c0:	653b      	str	r3, [r7, #80]	; 0x50
 80072c2:	e014      	b.n	80072ee <SD_GetCIDRegister+0x66>
      {
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CID_Tab[counter], 1U) != BSP_ERROR_NONE)
 80072c4:	f107 020c 	add.w	r2, r7, #12
 80072c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	18d1      	adds	r1, r2, r3
 80072ce:	f107 030b 	add.w	r3, r7, #11
 80072d2:	2201      	movs	r2, #1
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fc2f 	bl	8007b38 <BSP_SPI2_SendRecv>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <SD_GetCIDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80072e0:	f06f 0303 	mvn.w	r3, #3
 80072e4:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 80072e6:	e005      	b.n	80072f4 <SD_GetCIDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 80072e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ea:	3301      	adds	r3, #1
 80072ec:	653b      	str	r3, [r7, #80]	; 0x50
 80072ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f0:	2b0f      	cmp	r3, #15
 80072f2:	d9e7      	bls.n	80072c4 <SD_GetCIDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 80072f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f040 8081 	bne.w	80073fe <SD_GetCIDRegister+0x176>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80072fc:	f107 030b 	add.w	r3, r7, #11
 8007300:	2101      	movs	r1, #1
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fbe0 	bl	8007ac8 <BSP_SPI2_Send>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <SD_GetCIDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800730e:	f06f 0303 	mvn.w	r3, #3
 8007312:	657b      	str	r3, [r7, #84]	; 0x54
 8007314:	e073      	b.n	80073fe <SD_GetCIDRegister+0x176>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007316:	f107 030b 	add.w	r3, r7, #11
 800731a:	2101      	movs	r1, #1
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fbd3 	bl	8007ac8 <BSP_SPI2_Send>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <SD_GetCIDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007328:	f06f 0303 	mvn.w	r3, #3
 800732c:	657b      	str	r3, [r7, #84]	; 0x54
 800732e:	e066      	b.n	80073fe <SD_GetCIDRegister+0x176>
        }
        else
        {
          /* Byte 0 */
          Cid->ManufacturerID = CID_Tab[0];
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]

          /* Byte 1 */
          Cid->OEM_AppliID = CID_Tab[1] << 8U;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	021a      	lsls	r2, r3, #8
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	605a      	str	r2, [r3, #4]

          /* Byte 2 */
          Cid->OEM_AppliID |= CID_Tab[2];
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	605a      	str	r2, [r3, #4]

          /* Byte 3 */
          Cid->ProdName1 = CID_Tab[3] << 24U;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	061a      	lsls	r2, r3, #24
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	609a      	str	r2, [r3, #8]

          /* Byte 4 */
          Cid->ProdName1 |= CID_Tab[4] << 16U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689a      	ldr	r2, [r3, #8]
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	041b      	lsls	r3, r3, #16
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	609a      	str	r2, [r3, #8]

          /* Byte 5 */
          Cid->ProdName1 |= CID_Tab[5] << 8U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	021b      	lsls	r3, r3, #8
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	609a      	str	r2, [r3, #8]

          /* Byte 6 */
          Cid->ProdName1 |= CID_Tab[6];
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	609a      	str	r2, [r3, #8]

          /* Byte 7 */
          Cid->ProdName2 = CID_Tab[7];
 800737a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	60da      	str	r2, [r3, #12]

          /* Byte 8 */
          Cid->ProdRev = CID_Tab[8];
 8007380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	611a      	str	r2, [r3, #16]

          /* Byte 9 */
          Cid->ProdSN = CID_Tab[9] << 24U;
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	061a      	lsls	r2, r3, #24
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	615a      	str	r2, [r3, #20]

          /* Byte 10 */
          Cid->ProdSN |= CID_Tab[10] << 16U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	695a      	ldr	r2, [r3, #20]
 8007392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007394:	041b      	lsls	r3, r3, #16
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	615a      	str	r2, [r3, #20]

          /* Byte 11 */
          Cid->ProdSN |= CID_Tab[11] << 8U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	695a      	ldr	r2, [r3, #20]
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	615a      	str	r2, [r3, #20]

          /* Byte 12 */
          Cid->ProdSN |= CID_Tab[12];
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695a      	ldr	r2, [r3, #20]
 80073ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b0:	431a      	orrs	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	615a      	str	r2, [r3, #20]

          /* Byte 13 */
          Cid->Reserved1 |= (CID_Tab[13] & 0xF0U) >> 4U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073bc:	091b      	lsrs	r3, r3, #4
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	619a      	str	r2, [r3, #24]
          Cid->ManufactDate = (CID_Tab[13] & 0x0FU) << 8U;
 80073c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	61da      	str	r2, [r3, #28]

          /* Byte 14 */
          Cid->ManufactDate |= CID_Tab[14];
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	61da      	str	r2, [r3, #28]

          /* Byte 15 */
          Cid->CID_CRC = (CID_Tab[15] & 0xFEU) >> 1U;
 80073e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	621a      	str	r2, [r3, #32]
          Cid->Reserved2 = 1U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	625a      	str	r2, [r3, #36]	; 0x24

          ret = BSP_ERROR_NONE;
 80073f2:	2300      	movs	r3, #0
 80073f4:	657b      	str	r3, [r7, #84]	; 0x54
 80073f6:	e002      	b.n	80073fe <SD_GetCIDRegister+0x176>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80073f8:	f06f 0305 	mvn.w	r3, #5
 80073fc:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 80073fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10e      	bne.n	8007422 <SD_GetCIDRegister+0x19a>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 8007404:	2001      	movs	r0, #1
 8007406:	f7ff fcf9 	bl	8006dfc <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800740a:	f107 030b 	add.w	r3, r7, #11
 800740e:	2101      	movs	r1, #1
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fb59 	bl	8007ac8 <BSP_SPI2_Send>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <SD_GetCIDRegister+0x19a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800741c:	f06f 0303 	mvn.w	r3, #3
 8007420:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 8007422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8007424:	4618      	mov	r0, r3
 8007426:	3758      	adds	r7, #88	; 0x58
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <SD_SendCmd>:
  * @param  Crc The CRC.
  * @param  Answer SD_ANSWER_NOT_EXPECTED or SD_ANSWER_EXPECTED
  * @retval SD response or 0xFFFF in case of error
  */
static uint32_t SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Answer)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	6039      	str	r1, [r7, #0]
 8007434:	4611      	mov	r1, r2
 8007436:	461a      	mov	r2, r3
 8007438:	4603      	mov	r3, r0
 800743a:	71fb      	strb	r3, [r7, #7]
 800743c:	460b      	mov	r3, r1
 800743e:	71bb      	strb	r3, [r7, #6]
 8007440:	4613      	mov	r3, r2
 8007442:	717b      	strb	r3, [r7, #5]
  uint8_t frame[SD_CMD_LENGTH], frameout[SD_CMD_LENGTH];
  uint32_t response = 0xFFFF;
 8007444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007448:	61fb      	str	r3, [r7, #28]
  /* R1 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 1 Bytes answer + NEC(0) = 15bytes */
  /* R1b identical to R1 + Busy information                                                   */
  /* R2 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 2 Bytes answer + NEC(0) = 16bytes */

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40U);         /* Construct byte 1 */
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007450:	b2db      	uxtb	r3, r3
 8007452:	753b      	strb	r3, [r7, #20]
  frame[1] = (uint8_t)(Arg >> 24U); /* Construct byte 2 */
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	0e1b      	lsrs	r3, r3, #24
 8007458:	b2db      	uxtb	r3, r3
 800745a:	757b      	strb	r3, [r7, #21]
  frame[2] = (uint8_t)(Arg >> 16U); /* Construct byte 3 */
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	0c1b      	lsrs	r3, r3, #16
 8007460:	b2db      	uxtb	r3, r3
 8007462:	75bb      	strb	r3, [r7, #22]
  frame[3] = (uint8_t)(Arg >> 8U);  /* Construct byte 4 */
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	0a1b      	lsrs	r3, r3, #8
 8007468:	b2db      	uxtb	r3, r3
 800746a:	75fb      	strb	r3, [r7, #23]
  frame[4] = (uint8_t)(Arg);        /* Construct byte 5 */
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	763b      	strb	r3, [r7, #24]
  frame[5] = (Crc | 0x01U);         /* Construct byte 6 */
 8007472:	79bb      	ldrb	r3, [r7, #6]
 8007474:	f043 0301 	orr.w	r3, r3, #1
 8007478:	b2db      	uxtb	r3, r3
 800747a:	767b      	strb	r3, [r7, #25]

  /* Send the command */
  SD_IO_CSState(0);
 800747c:	2000      	movs	r0, #0
 800747e:	f7ff fcbd 	bl	8006dfc <SD_IO_CSState>
  /* Send the Cmd bytes */
  if(BUS_SPIx_SendRecv(frame, frameout, SD_CMD_LENGTH) != BSP_ERROR_NONE)
 8007482:	f107 010c 	add.w	r1, r7, #12
 8007486:	f107 0314 	add.w	r3, r7, #20
 800748a:	2206      	movs	r2, #6
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fb53 	bl	8007b38 <BSP_SPI2_SendRecv>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <SD_SendCmd+0x72>
  {
    return 0xFFFF;
 8007498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800749c:	e0da      	b.n	8007654 <SD_SendCmd+0x228>
  }
  tmp = SD_DUMMY_BYTE;
 800749e:	23ff      	movs	r3, #255	; 0xff
 80074a0:	72fb      	strb	r3, [r7, #11]
  switch(Answer)
 80074a2:	797b      	ldrb	r3, [r7, #5]
 80074a4:	2b05      	cmp	r3, #5
 80074a6:	f200 80d1 	bhi.w	800764c <SD_SendCmd+0x220>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <SD_SendCmd+0x84>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074c9 	.word	0x080074c9
 80074b4:	080074e5 	.word	0x080074e5
 80074b8:	08007577 	.word	0x08007577
 80074bc:	080075b9 	.word	0x080075b9
 80074c0:	0800764d 	.word	0x0800764d
 80074c4:	080075b9 	.word	0x080075b9
  {
  case SD_ANSWER_R1_EXPECTED :
    /* Sends one byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80074c8:	f107 030a 	add.w	r3, r7, #10
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fa3f 	bl	8007950 <SD_ReadData>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <SD_SendCmd+0xb2>
    {
      return 0xFFFF;
 80074d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074dc:	e0ba      	b.n	8007654 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80074de:	7abb      	ldrb	r3, [r7, #10]
 80074e0:	61fb      	str	r3, [r7, #28]
    break;
 80074e2:	e0b6      	b.n	8007652 <SD_SendCmd+0x226>
  case SD_ANSWER_R1B_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80074e4:	f107 030a 	add.w	r3, r7, #10
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fa31 	bl	8007950 <SD_ReadData>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <SD_SendCmd+0xce>
    {
      return 0xFFFF;
 80074f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074f8:	e0ac      	b.n	8007654 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80074fa:	7abb      	ldrb	r3, [r7, #10]
 80074fc:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80074fe:	f107 010a 	add.w	r1, r7, #10
 8007502:	f107 030b 	add.w	r3, r7, #11
 8007506:	2201      	movs	r2, #1
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fb15 	bl	8007b38 <BSP_SPI2_SendRecv>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <SD_SendCmd+0xee>
    {
      return 0xFFFF;
 8007514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007518:	e09c      	b.n	8007654 <SD_SendCmd+0x228>
    }
    response |= response_tmp;
 800751a:	7abb      	ldrb	r3, [r7, #10]
 800751c:	461a      	mov	r2, r3
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4313      	orrs	r3, r2
 8007522:	61fb      	str	r3, [r7, #28]
    /* Set CS High */
    SD_IO_CSState(1);
 8007524:	2001      	movs	r0, #1
 8007526:	f7ff fc69 	bl	8006dfc <SD_IO_CSState>
    SPI_IO_Delay(1);
 800752a:	2001      	movs	r0, #1
 800752c:	f000 fa67 	bl	80079fe <SPI_IO_Delay>
    /* Set CS Low */
    SD_IO_CSState(0);
 8007530:	2000      	movs	r0, #0
 8007532:	f7ff fc63 	bl	8006dfc <SD_IO_CSState>

    /* Wait IO line return 0xFF */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007536:	f107 010a 	add.w	r1, r7, #10
 800753a:	f107 030b 	add.w	r3, r7, #11
 800753e:	2201      	movs	r2, #1
 8007540:	4618      	mov	r0, r3
 8007542:	f000 faf9 	bl	8007b38 <BSP_SPI2_SendRecv>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d010      	beq.n	800756e <SD_SendCmd+0x142>
    {
      return 0xFFFF;
 800754c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007550:	e080      	b.n	8007654 <SD_SendCmd+0x228>
    }
    while(response_tmp != 0xFFU)
    {
      if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007552:	f107 010a 	add.w	r1, r7, #10
 8007556:	f107 030b 	add.w	r3, r7, #11
 800755a:	2201      	movs	r2, #1
 800755c:	4618      	mov	r0, r3
 800755e:	f000 faeb 	bl	8007b38 <BSP_SPI2_SendRecv>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <SD_SendCmd+0x142>
      {
        return 0xFFFF;
 8007568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800756c:	e072      	b.n	8007654 <SD_SendCmd+0x228>
    while(response_tmp != 0xFFU)
 800756e:	7abb      	ldrb	r3, [r7, #10]
 8007570:	2bff      	cmp	r3, #255	; 0xff
 8007572:	d1ee      	bne.n	8007552 <SD_SendCmd+0x126>
      }
    }
    break;
 8007574:	e06d      	b.n	8007652 <SD_SendCmd+0x226>
  case SD_ANSWER_R2_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8007576:	f107 030a 	add.w	r3, r7, #10
 800757a:	4618      	mov	r0, r3
 800757c:	f000 f9e8 	bl	8007950 <SD_ReadData>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <SD_SendCmd+0x160>
    {
      return 0xFFFF;
 8007586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800758a:	e063      	b.n	8007654 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 800758c:	7abb      	ldrb	r3, [r7, #10]
 800758e:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007590:	f107 010a 	add.w	r1, r7, #10
 8007594:	f107 030b 	add.w	r3, r7, #11
 8007598:	2201      	movs	r2, #1
 800759a:	4618      	mov	r0, r3
 800759c:	f000 facc 	bl	8007b38 <BSP_SPI2_SendRecv>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <SD_SendCmd+0x180>
    {
      return 0xFFFF;
 80075a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075aa:	e053      	b.n	8007654 <SD_SendCmd+0x228>
    }
    response |= ((uint32_t)response_tmp << 8);
 80075ac:	7abb      	ldrb	r3, [r7, #10]
 80075ae:	021b      	lsls	r3, r3, #8
 80075b0:	69fa      	ldr	r2, [r7, #28]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	61fb      	str	r3, [r7, #28]
    break;
 80075b6:	e04c      	b.n	8007652 <SD_SendCmd+0x226>
  case SD_ANSWER_R3_EXPECTED :
  case SD_ANSWER_R7_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80075b8:	f107 030a 	add.w	r3, r7, #10
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f9c7 	bl	8007950 <SD_ReadData>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <SD_SendCmd+0x1a2>
    {
      return 0xFFFF;
 80075c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075cc:	e042      	b.n	8007654 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80075ce:	7abb      	ldrb	r3, [r7, #10]
 80075d0:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80075d2:	f107 010a 	add.w	r1, r7, #10
 80075d6:	f107 030b 	add.w	r3, r7, #11
 80075da:	2201      	movs	r2, #1
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 faab 	bl	8007b38 <BSP_SPI2_SendRecv>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <SD_SendCmd+0x1c2>
    {
      return 0xFFFF;
 80075e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075ec:	e032      	b.n	8007654 <SD_SendCmd+0x228>
    }
    /* Only first and second responses are required */
    response |= ((uint32_t)response_tmp << 8U);
 80075ee:	7abb      	ldrb	r3, [r7, #10]
 80075f0:	021b      	lsls	r3, r3, #8
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	61fb      	str	r3, [r7, #28]
    /* Sends third byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80075f8:	f107 010a 	add.w	r1, r7, #10
 80075fc:	f107 030b 	add.w	r3, r7, #11
 8007600:	2201      	movs	r2, #1
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fa98 	bl	8007b38 <BSP_SPI2_SendRecv>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <SD_SendCmd+0x1e8>
    {
      return 0xFFFF;
 800760e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007612:	e01f      	b.n	8007654 <SD_SendCmd+0x228>
    }
    /* Sends fourth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007614:	f107 010a 	add.w	r1, r7, #10
 8007618:	f107 030b 	add.w	r3, r7, #11
 800761c:	2201      	movs	r2, #1
 800761e:	4618      	mov	r0, r3
 8007620:	f000 fa8a 	bl	8007b38 <BSP_SPI2_SendRecv>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <SD_SendCmd+0x204>
    {
      return 0xFFFF;
 800762a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800762e:	e011      	b.n	8007654 <SD_SendCmd+0x228>
    }
    /* Sends fifth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007630:	f107 010a 	add.w	r1, r7, #10
 8007634:	f107 030b 	add.w	r3, r7, #11
 8007638:	2201      	movs	r2, #1
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fa7c 	bl	8007b38 <BSP_SPI2_SendRecv>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d004      	beq.n	8007650 <SD_SendCmd+0x224>
    {
      return 0xFFFF;
 8007646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800764a:	e003      	b.n	8007654 <SD_SendCmd+0x228>
    }

    break;
  default :
    break;
 800764c:	bf00      	nop
 800764e:	e000      	b.n	8007652 <SD_SendCmd+0x226>
    break;
 8007650:	bf00      	nop
  }
  return response;
 8007652:	69fb      	ldr	r3, [r7, #28]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3720      	adds	r7, #32
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
static int32_t SD_GetDataResponse(uint8_t *DataResponse)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint8_t dataresponse, tmp, tmp1;
  *DataResponse = (uint8_t)SD_DATA_OTHER_ERROR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	22ff      	movs	r2, #255	; 0xff
 8007668:	701a      	strb	r2, [r3, #0]

  tmp = SD_DUMMY_BYTE;
 800766a:	23ff      	movs	r3, #255	; 0xff
 800766c:	73bb      	strb	r3, [r7, #14]
  if(BUS_SPIx_SendRecv(&tmp, &dataresponse, 1U) != BSP_ERROR_NONE)
 800766e:	f107 010f 	add.w	r1, r7, #15
 8007672:	f107 030e 	add.w	r3, r7, #14
 8007676:	2201      	movs	r2, #1
 8007678:	4618      	mov	r0, r3
 800767a:	f000 fa5d 	bl	8007b38 <BSP_SPI2_SendRecv>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <SD_GetDataResponse+0x2e>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8007684:	f06f 0303 	mvn.w	r3, #3
 8007688:	e049      	b.n	800771e <SD_GetDataResponse+0xc2>
  }
  /* read the busy response byte*/
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800768a:	f107 030e 	add.w	r3, r7, #14
 800768e:	2101      	movs	r1, #1
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fa19 	bl	8007ac8 <BSP_SPI2_Send>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <SD_GetDataResponse+0x46>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800769c:	f06f 0303 	mvn.w	r3, #3
 80076a0:	e03d      	b.n	800771e <SD_GetDataResponse+0xc2>
  }
  else
  {
    /* Mask unused bits */
    switch (dataresponse & 0x1FU)
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	2b0b      	cmp	r3, #11
 80076aa:	d02f      	beq.n	800770c <SD_GetDataResponse+0xb0>
 80076ac:	2b0d      	cmp	r3, #13
 80076ae:	d031      	beq.n	8007714 <SD_GetDataResponse+0xb8>
 80076b0:	2b05      	cmp	r3, #5
 80076b2:	d000      	beq.n	80076b6 <SD_GetDataResponse+0x5a>
      break;
    case SD_DATA_WRITE_ERROR:
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
      break;
    default:
      break;
 80076b4:	e032      	b.n	800771c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_OK;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2205      	movs	r2, #5
 80076ba:	701a      	strb	r2, [r3, #0]
      SD_IO_CSState(1);
 80076bc:	2001      	movs	r0, #1
 80076be:	f7ff fb9d 	bl	8006dfc <SD_IO_CSState>
      SD_IO_CSState(0);
 80076c2:	2000      	movs	r0, #0
 80076c4:	f7ff fb9a 	bl	8006dfc <SD_IO_CSState>
      tmp = SD_DUMMY_BYTE;
 80076c8:	23ff      	movs	r3, #255	; 0xff
 80076ca:	73bb      	strb	r3, [r7, #14]
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 80076cc:	f107 010d 	add.w	r1, r7, #13
 80076d0:	f107 030e 	add.w	r3, r7, #14
 80076d4:	2201      	movs	r2, #1
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fa2e 	bl	8007b38 <BSP_SPI2_SendRecv>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d010      	beq.n	8007704 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 80076e2:	f06f 0303 	mvn.w	r3, #3
 80076e6:	e01a      	b.n	800771e <SD_GetDataResponse+0xc2>
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 80076e8:	f107 010d 	add.w	r1, r7, #13
 80076ec:	f107 030e 	add.w	r3, r7, #14
 80076f0:	2201      	movs	r2, #1
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fa20 	bl	8007b38 <BSP_SPI2_SendRecv>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 80076fe:	f06f 0303 	mvn.w	r3, #3
 8007702:	e00c      	b.n	800771e <SD_GetDataResponse+0xc2>
      while(tmp1 != 0xFFU)
 8007704:	7b7b      	ldrb	r3, [r7, #13]
 8007706:	2bff      	cmp	r3, #255	; 0xff
 8007708:	d1ee      	bne.n	80076e8 <SD_GetDataResponse+0x8c>
      break;
 800770a:	e007      	b.n	800771c <SD_GetDataResponse+0xc0>
      *DataResponse =  (uint8_t)SD_DATA_CRC_ERROR;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	220b      	movs	r2, #11
 8007710:	701a      	strb	r2, [r3, #0]
      break;
 8007712:	e003      	b.n	800771c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	220d      	movs	r2, #13
 8007718:	701a      	strb	r2, [r3, #0]
      break;
 800771a:	bf00      	nop
    }
  }

  /* Return response */
  return BSP_ERROR_NONE;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <SD_GoIdleState>:
  * @brief  Put the SD in Idle state.
  * @param  None
  * @retval SD status
  */
static int32_t SD_GoIdleState(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
  uint32_t response;
  __IO uint8_t counter = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	70fb      	strb	r3, [r7, #3]
  uint8_t tmp = SD_DUMMY_BYTE;
 8007732:	23ff      	movs	r3, #255	; 0xff
 8007734:	70bb      	strb	r3, [r7, #2]

  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and
  wait for In Idle State Response (R1 Format) equal to 0x01 */
  do
  {
    counter++;
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	3301      	adds	r3, #1
 800773c:	b2db      	uxtb	r3, r3
 800773e:	70fb      	strb	r3, [r7, #3]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0U, 0x95U, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007740:	2300      	movs	r3, #0
 8007742:	2295      	movs	r2, #149	; 0x95
 8007744:	2100      	movs	r1, #0
 8007746:	2000      	movs	r0, #0
 8007748:	f7ff fe70 	bl	800742c <SD_SendCmd>
 800774c:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 800774e:	2001      	movs	r0, #1
 8007750:	f7ff fb54 	bl	8006dfc <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007754:	1cbb      	adds	r3, r7, #2
 8007756:	2101      	movs	r1, #1
 8007758:	4618      	mov	r0, r3
 800775a:	f000 f9b5 	bl	8007ac8 <BSP_SPI2_Send>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <SD_GoIdleState+0x42>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007764:	f06f 0303 	mvn.w	r3, #3
 8007768:	e0ec      	b.n	8007944 <SD_GoIdleState+0x21c>
    }
    else
    {
      if(counter >= SD_MAX_TRY)
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b63      	cmp	r3, #99	; 0x63
 8007770:	d902      	bls.n	8007778 <SD_GoIdleState+0x50>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 8007772:	f06f 0305 	mvn.w	r3, #5
 8007776:	e0e5      	b.n	8007944 <SD_GoIdleState+0x21c>
      }
    }
  }while((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	d1da      	bne.n	8007736 <SD_GoIdleState+0xe>

  /* Send CMD8 (SD_CMD_SEND_IF_COND) to check the power supply status
  and wait until response (R7 Format) equal to 0xAA and */
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AAU, 0x87U, (uint8_t)SD_ANSWER_R7_EXPECTED);
 8007780:	2305      	movs	r3, #5
 8007782:	2287      	movs	r2, #135	; 0x87
 8007784:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007788:	2008      	movs	r0, #8
 800778a:	f7ff fe4f 	bl	800742c <SD_SendCmd>
 800778e:	6078      	str	r0, [r7, #4]
  SD_IO_CSState(1);
 8007790:	2001      	movs	r0, #1
 8007792:	f7ff fb33 	bl	8006dfc <SD_IO_CSState>
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007796:	1cbb      	adds	r3, r7, #2
 8007798:	2101      	movs	r1, #1
 800779a:	4618      	mov	r0, r3
 800779c:	f000 f994 	bl	8007ac8 <BSP_SPI2_Send>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <SD_GoIdleState+0x84>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80077a6:	f06f 0303 	mvn.w	r3, #3
 80077aa:	e0cb      	b.n	8007944 <SD_GoIdleState+0x21c>
  }
  else if(((uint8_t)(response & 0xFFU)  & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d030      	beq.n	800781a <SD_GoIdleState+0xf2>
    /* initialise card V1 */
    do
    {
      /* initialise card V1 */
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80077b8:	2300      	movs	r3, #0
 80077ba:	22ff      	movs	r2, #255	; 0xff
 80077bc:	2100      	movs	r1, #0
 80077be:	2037      	movs	r0, #55	; 0x37
 80077c0:	f7ff fe34 	bl	800742c <SD_SendCmd>
      SD_IO_CSState(1);
 80077c4:	2001      	movs	r0, #1
 80077c6:	f7ff fb19 	bl	8006dfc <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80077ca:	1cbb      	adds	r3, r7, #2
 80077cc:	2101      	movs	r1, #1
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 f97a 	bl	8007ac8 <BSP_SPI2_Send>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <SD_GoIdleState+0xb8>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 80077da:	f06f 0303 	mvn.w	r3, #3
 80077de:	e0b1      	b.n	8007944 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80077e0:	2300      	movs	r3, #0
 80077e2:	22ff      	movs	r2, #255	; 0xff
 80077e4:	2100      	movs	r1, #0
 80077e6:	2029      	movs	r0, #41	; 0x29
 80077e8:	f7ff fe20 	bl	800742c <SD_SendCmd>
 80077ec:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 80077ee:	2001      	movs	r0, #1
 80077f0:	f7ff fb04 	bl	8006dfc <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80077f4:	1cbb      	adds	r3, r7, #2
 80077f6:	2101      	movs	r1, #1
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 f965 	bl	8007ac8 <BSP_SPI2_Send>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <SD_GoIdleState+0xe2>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8007804:	f06f 0303 	mvn.w	r3, #3
 8007808:	e09c      	b.n	8007944 <SD_GoIdleState+0x21c>
        }
      }
    }
    while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b01      	cmp	r3, #1
 8007810:	d0d2      	beq.n	80077b8 <SD_GoIdleState+0x90>
    CardType = MY_CARD_SDSC;
 8007812:	4b4e      	ldr	r3, [pc, #312]	; (800794c <SD_GoIdleState+0x224>)
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	e093      	b.n	8007942 <SD_GoIdleState+0x21a>
  }
  else if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b01      	cmp	r3, #1
 8007820:	f040 808c 	bne.w	800793c <SD_GoIdleState+0x214>
  {
    /* initialise card V2 */
    do {
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007824:	2300      	movs	r3, #0
 8007826:	22ff      	movs	r2, #255	; 0xff
 8007828:	2100      	movs	r1, #0
 800782a:	2037      	movs	r0, #55	; 0x37
 800782c:	f7ff fdfe 	bl	800742c <SD_SendCmd>
      SD_IO_CSState(1);
 8007830:	2001      	movs	r0, #1
 8007832:	f7ff fae3 	bl	8006dfc <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007836:	1cbb      	adds	r3, r7, #2
 8007838:	2101      	movs	r1, #1
 800783a:	4618      	mov	r0, r3
 800783c:	f000 f944 	bl	8007ac8 <BSP_SPI2_Send>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <SD_GoIdleState+0x124>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8007846:	f06f 0303 	mvn.w	r3, #3
 800784a:	e07b      	b.n	8007944 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800784c:	2300      	movs	r3, #0
 800784e:	22ff      	movs	r2, #255	; 0xff
 8007850:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007854:	2029      	movs	r0, #41	; 0x29
 8007856:	f7ff fde9 	bl	800742c <SD_SendCmd>
 800785a:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 800785c:	2001      	movs	r0, #1
 800785e:	f7ff facd 	bl	8006dfc <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007862:	1cbb      	adds	r3, r7, #2
 8007864:	2101      	movs	r1, #1
 8007866:	4618      	mov	r0, r3
 8007868:	f000 f92e 	bl	8007ac8 <BSP_SPI2_Send>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <SD_GoIdleState+0x150>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8007872:	f06f 0303 	mvn.w	r3, #3
 8007876:	e065      	b.n	8007944 <SD_GoIdleState+0x21c>
        }
      }
    }
    while(((uint8_t)response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d0d1      	beq.n	8007824 <SD_GoIdleState+0xfc>

    if(((uint8_t)(response & 0xFFU) & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d033      	beq.n	80078f4 <SD_GoIdleState+0x1cc>
    {
      do {
        /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
        (void)SD_SendCmd(SD_CMD_APP_CMD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800788c:	2300      	movs	r3, #0
 800788e:	22ff      	movs	r2, #255	; 0xff
 8007890:	2100      	movs	r1, #0
 8007892:	2037      	movs	r0, #55	; 0x37
 8007894:	f7ff fdca 	bl	800742c <SD_SendCmd>
        SD_IO_CSState(1);
 8007898:	2001      	movs	r0, #1
 800789a:	f7ff faaf 	bl	8006dfc <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800789e:	1cbb      	adds	r3, r7, #2
 80078a0:	2101      	movs	r1, #1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 f910 	bl	8007ac8 <BSP_SPI2_Send>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <SD_GoIdleState+0x18c>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 80078ae:	f06f 0303 	mvn.w	r3, #3
 80078b2:	e047      	b.n	8007944 <SD_GoIdleState+0x21c>
        }
        else
        {
          if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d002      	beq.n	80078c2 <SD_GoIdleState+0x19a>
          {
            return BSP_ERROR_UNKNOWN_FAILURE;
 80078bc:	f06f 0305 	mvn.w	r3, #5
 80078c0:	e040      	b.n	8007944 <SD_GoIdleState+0x21c>
          }
          /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80078c2:	2300      	movs	r3, #0
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	2100      	movs	r1, #0
 80078c8:	2029      	movs	r0, #41	; 0x29
 80078ca:	f7ff fdaf 	bl	800742c <SD_SendCmd>
 80078ce:	6078      	str	r0, [r7, #4]
          SD_IO_CSState(1);
 80078d0:	2001      	movs	r0, #1
 80078d2:	f7ff fa93 	bl	8006dfc <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80078d6:	1cbb      	adds	r3, r7, #2
 80078d8:	2101      	movs	r1, #1
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f8f4 	bl	8007ac8 <BSP_SPI2_Send>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <SD_GoIdleState+0x1c4>
          {
            return BSP_ERROR_PERIPH_FAILURE;
 80078e6:	f06f 0303 	mvn.w	r3, #3
 80078ea:	e02b      	b.n	8007944 <SD_GoIdleState+0x21c>
          }
        }
      }
      while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d0cb      	beq.n	800788c <SD_GoIdleState+0x164>
    }

    /* Send CMD58 (SD_CMD_READ_OCR) to initialize SDHC or SDXC cards: R3 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R3_EXPECTED);
 80078f4:	2303      	movs	r3, #3
 80078f6:	22ff      	movs	r2, #255	; 0xff
 80078f8:	2100      	movs	r1, #0
 80078fa:	203a      	movs	r0, #58	; 0x3a
 80078fc:	f7ff fd96 	bl	800742c <SD_SendCmd>
 8007900:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 8007902:	2001      	movs	r0, #1
 8007904:	f7ff fa7a 	bl	8006dfc <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007908:	1cbb      	adds	r3, r7, #2
 800790a:	2101      	movs	r1, #1
 800790c:	4618      	mov	r0, r3
 800790e:	f000 f8db 	bl	8007ac8 <BSP_SPI2_Send>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <SD_GoIdleState+0x1f6>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007918:	f06f 0303 	mvn.w	r3, #3
 800791c:	e012      	b.n	8007944 <SD_GoIdleState+0x21c>
    }
    else
    {
      if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <SD_GoIdleState+0x204>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 8007926:	f06f 0305 	mvn.w	r3, #5
 800792a:	e00b      	b.n	8007944 <SD_GoIdleState+0x21c>
      }
      CardType = (uint32_t)(((response >> 8U) & 0x40U) >> 6U);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	0a1b      	lsrs	r3, r3, #8
 8007930:	099b      	lsrs	r3, r3, #6
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	4a05      	ldr	r2, [pc, #20]	; (800794c <SD_GoIdleState+0x224>)
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	e002      	b.n	8007942 <SD_GoIdleState+0x21a>
    }
  }
  else
  {
    return BSP_ERROR_BUSY;
 800793c:	f06f 0302 	mvn.w	r3, #2
 8007940:	e000      	b.n	8007944 <SD_GoIdleState+0x21c>
  }

  return BSP_ERROR_NONE;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	2000004c 	.word	0x2000004c

08007950 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  Data data to be read
  * @retval BSP status
  */
static int32_t SD_ReadData(uint8_t *Data)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint8_t timeout = 0x08U;
 8007958:	2308      	movs	r3, #8
 800795a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  tmp = SD_DUMMY_BYTE;
 800795c:	23ff      	movs	r3, #255	; 0xff
 800795e:	73bb      	strb	r3, [r7, #14]
  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, Data, 1) != BSP_ERROR_NONE)
 8007960:	f107 030e 	add.w	r3, r7, #14
 8007964:	2201      	movs	r2, #1
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f8e5 	bl	8007b38 <BSP_SPI2_SendRecv>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <SD_ReadData+0x2a>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007974:	f06f 0303 	mvn.w	r3, #3
 8007978:	e010      	b.n	800799c <SD_ReadData+0x4c>
    }
    timeout--;
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	3b01      	subs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]

  }while ((*Data == SD_DUMMY_BYTE) && (timeout != 0U));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2bff      	cmp	r3, #255	; 0xff
 8007986:	d102      	bne.n	800798e <SD_ReadData+0x3e>
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e8      	bne.n	8007960 <SD_ReadData+0x10>

  if (timeout == 0U)
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <SD_ReadData+0x4a>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 8007994:	f06f 0302 	mvn.w	r3, #2
 8007998:	e000      	b.n	800799c <SD_ReadData+0x4c>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <SD_WaitData>:
  * @brief  Waits a data from the SD card
  * @param  data  Expected data from the SD card
  * @retval BSP status
  */
static int32_t SD_WaitData(uint8_t Data)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	71fb      	strb	r3, [r7, #7]
  uint16_t timeout = 0xFFFF;
 80079ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079b2:	81fb      	strh	r3, [r7, #14]
  uint8_t readvalue, tmp;

  tmp = SD_DUMMY_BYTE;
 80079b4:	23ff      	movs	r3, #255	; 0xff
 80079b6:	733b      	strb	r3, [r7, #12]

  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, &readvalue, 1) != BSP_ERROR_NONE)
 80079b8:	f107 010d 	add.w	r1, r7, #13
 80079bc:	f107 030c 	add.w	r3, r7, #12
 80079c0:	2201      	movs	r2, #1
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 f8b8 	bl	8007b38 <BSP_SPI2_SendRecv>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <SD_WaitData+0x30>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80079ce:	f06f 0303 	mvn.w	r3, #3
 80079d2:	e010      	b.n	80079f6 <SD_WaitData+0x52>
    }
    timeout--;
 80079d4:	89fb      	ldrh	r3, [r7, #14]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	81fb      	strh	r3, [r7, #14]
  }while ((readvalue != Data) && (timeout != 0U));
 80079da:	7b7b      	ldrb	r3, [r7, #13]
 80079dc:	79fa      	ldrb	r2, [r7, #7]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d002      	beq.n	80079e8 <SD_WaitData+0x44>
 80079e2:	89fb      	ldrh	r3, [r7, #14]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e7      	bne.n	80079b8 <SD_WaitData+0x14>

  if (timeout == 0U)
 80079e8:	89fb      	ldrh	r3, [r7, #14]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d102      	bne.n	80079f4 <SD_WaitData+0x50>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 80079ee:	f06f 0302 	mvn.w	r3, #2
 80079f2:	e000      	b.n	80079f6 <SD_WaitData+0x52>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <SPI_IO_Delay>:
  * @brief  SPI IO delay
  * @param  Delay  Delay in ms
  * @retval None
  */
static void SPI_IO_Delay(uint32_t Delay)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  int32_t tickstart;
  tickstart = BSP_GetTick();
 8007a06:	f000 f8b7 	bl	8007b78 <BSP_GetTick>
 8007a0a:	60f8      	str	r0, [r7, #12]
  while((BSP_GetTick() - tickstart) < (int32_t)Delay)
 8007a0c:	bf00      	nop
 8007a0e:	f000 f8b3 	bl	8007b78 <BSP_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	dbf7      	blt.n	8007a0e <SPI_IO_Delay+0x10>
  {
  }
}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
	...

08007a28 <BSP_SPI2_Init>:

static void SPI_MspInit(SPI_HandleTypeDef *hspi);
static void SPI_MspDeInit(SPI_HandleTypeDef *hspi);

int32_t BSP_SPI2_Init(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hSpiHandle) == HAL_SPI_STATE_RESET)
 8007a2c:	480a      	ldr	r0, [pc, #40]	; (8007a58 <BSP_SPI2_Init+0x30>)
 8007a2e:	f7fc fdd6 	bl	80045de <HAL_SPI_GetState>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10b      	bne.n	8007a50 <BSP_SPI2_Init+0x28>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI_MspInit(&hSpiHandle);
 8007a38:	4807      	ldr	r0, [pc, #28]	; (8007a58 <BSP_SPI2_Init+0x30>)
 8007a3a:	f000 f8a5 	bl	8007b88 <SPI_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_BSP_SPI2_Init(&hSpiHandle) != HAL_OK)
 8007a3e:	4806      	ldr	r0, [pc, #24]	; (8007a58 <BSP_SPI2_Init+0x30>)
 8007a40:	f000 f80c 	bl	8007a5c <MX_BSP_SPI2_Init>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <BSP_SPI2_Init+0x28>
    {
      return BSP_ERROR_BUS_FAILURE;
 8007a4a:	f06f 0307 	mvn.w	r3, #7
 8007a4e:	e000      	b.n	8007a52 <BSP_SPI2_Init+0x2a>
    }
  }
  return BSP_ERROR_NONE;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20000a70 	.word	0x20000a70

08007a5c <MX_BSP_SPI2_Init>:
  * @brief  MX SPI initialization.
  * @param  hspi SPI handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_BSP_SPI2_Init(SPI_HandleTypeDef *hspi)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* SPI Config */
  hspi->Instance               = NUCLEO_SPI;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a17      	ldr	r2, [pc, #92]	; (8007ac4 <MX_BSP_SPI2_Init+0x68>)
 8007a68:	601a      	str	r2, [r3, #0]
  hspi->Init.BaudRatePrescaler = NUCLEO_SPI_BAUDRATEPRESCALER;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2210      	movs	r2, #16
 8007a6e:	61da      	str	r2, [r3, #28]
  hspi->Init.Direction         = SPI_DIRECTION_2LINES;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	609a      	str	r2, [r3, #8]
  hspi->Init.CLKPhase          = SPI_PHASE_2EDGE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	615a      	str	r2, [r3, #20]
  hspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	611a      	str	r2, [r3, #16]
  hspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial     = 7;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2207      	movs	r2, #7
 8007a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007a94:	60da      	str	r2, [r3, #12]
  hspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	621a      	str	r2, [r3, #32]
  hspi->Init.NSS               = SPI_NSS_SOFT;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aa2:	619a      	str	r2, [r3, #24]
  hspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.Mode              = SPI_MODE_MASTER;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007ab0:	605a      	str	r2, [r3, #4]

  return HAL_SPI_Init(hspi);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fc f860 	bl	8003b78 <HAL_SPI_Init>
 8007ab8:	4603      	mov	r3, r0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	40003800 	.word	0x40003800

08007ac8 <BSP_SPI2_Send>:
  * @param  pTxData pointer to TX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pTxData, uint32_t Length)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hSpiHandle, pTxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	4806      	ldr	r0, [pc, #24]	; (8007afc <BSP_SPI2_Send+0x34>)
 8007ae2:	f7fc f8db 	bl	8003c9c <HAL_SPI_Transmit>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <BSP_SPI2_Send+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007aec:	f06f 0307 	mvn.w	r3, #7
 8007af0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007af2:	68fb      	ldr	r3, [r7, #12]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20000a70 	.word	0x20000a70

08007b00 <BSP_SPI2_Recv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Recv(uint8_t *pRxData, uint32_t Length)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hSpiHandle, pRxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	4806      	ldr	r0, [pc, #24]	; (8007b34 <BSP_SPI2_Recv+0x34>)
 8007b1a:	f7fc fa25 	bl	8003f68 <HAL_SPI_Receive>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <BSP_SPI2_Recv+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007b24:	f06f 0307 	mvn.w	r3, #7
 8007b28:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20000a70 	.word	0x20000a70

08007b38 <BSP_SPI2_SendRecv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint32_t Legnth)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hSpiHandle, pTxData, pRxData, (uint16_t)Legnth, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	4613      	mov	r3, r2
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	68f9      	ldr	r1, [r7, #12]
 8007b58:	4806      	ldr	r0, [pc, #24]	; (8007b74 <BSP_SPI2_SendRecv+0x3c>)
 8007b5a:	f7fc fb2d 	bl	80041b8 <HAL_SPI_TransmitReceive>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <BSP_SPI2_SendRecv+0x32>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007b64:	f06f 0307 	mvn.w	r3, #7
 8007b68:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007b6a:	697b      	ldr	r3, [r7, #20]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000a70 	.word	0x20000a70

08007b78 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8007b7c:	f7f9 fc8a 	bl	8001494 <HAL_GetTick>
 8007b80:	4603      	mov	r3, r0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <SPI_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi SPI handler
  * @retval None
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08c      	sub	sp, #48	; 0x30
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*** Configure the SPI peripheral ***/
  /* Enable SPI clock */
  NUCLEO_SPI_CLK_ENABLE();
 8007b90:	4b2e      	ldr	r3, [pc, #184]	; (8007c4c <SPI_MspInit+0xc4>)
 8007b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b94:	4a2d      	ldr	r2, [pc, #180]	; (8007c4c <SPI_MspInit+0xc4>)
 8007b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8007b9c:	4b2b      	ldr	r3, [pc, #172]	; (8007c4c <SPI_MspInit+0xc4>)
 8007b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ba4:	61bb      	str	r3, [r7, #24]
 8007ba6:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  NUCLEO_SPI_SCK_GPIO_CLK_ENABLE();
 8007ba8:	4b28      	ldr	r3, [pc, #160]	; (8007c4c <SPI_MspInit+0xc4>)
 8007baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bac:	4a27      	ldr	r2, [pc, #156]	; (8007c4c <SPI_MspInit+0xc4>)
 8007bae:	f043 0301 	orr.w	r3, r3, #1
 8007bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bb4:	4b25      	ldr	r3, [pc, #148]	; (8007c4c <SPI_MspInit+0xc4>)
 8007bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	697b      	ldr	r3, [r7, #20]
  NUCLEO_SPI_MOSI_GPIO_CLK_ENABLE();
 8007bc0:	4b22      	ldr	r3, [pc, #136]	; (8007c4c <SPI_MspInit+0xc4>)
 8007bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc4:	4a21      	ldr	r2, [pc, #132]	; (8007c4c <SPI_MspInit+0xc4>)
 8007bc6:	f043 0301 	orr.w	r3, r3, #1
 8007bca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bcc:	4b1f      	ldr	r3, [pc, #124]	; (8007c4c <SPI_MspInit+0xc4>)
 8007bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPI_MISO_GPIO_CLK_ENABLE();
 8007bd8:	4b1c      	ldr	r3, [pc, #112]	; (8007c4c <SPI_MspInit+0xc4>)
 8007bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bdc:	4a1b      	ldr	r2, [pc, #108]	; (8007c4c <SPI_MspInit+0xc4>)
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007be4:	4b19      	ldr	r3, [pc, #100]	; (8007c4c <SPI_MspInit+0xc4>)
 8007be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	68fb      	ldr	r3, [r7, #12]

  /* Configure SPI SCK */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_SCK_PIN;
 8007bf0:	2320      	movs	r3, #32
 8007bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = NUCLEO_SPI_SCK_AF;
 8007c00:	2305      	movs	r3, #5
 8007c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007c04:	f107 031c 	add.w	r3, r7, #28
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c0e:	f7fa fb8f 	bl	8002330 <HAL_GPIO_Init>

  /* Configure SPI MOSI */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_MOSI_PIN;
 8007c12:	2380      	movs	r3, #128	; 0x80
 8007c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MOSI_AF;
 8007c16:	2305      	movs	r3, #5
 8007c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8007c1e:	f107 031c 	add.w	r3, r7, #28
 8007c22:	4619      	mov	r1, r3
 8007c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c28:	f7fa fb82 	bl	8002330 <HAL_GPIO_Init>

  /* Configure SPI MISO */
  GPIO_InitStruct.Pin = NUCLEO_SPI_MISO_PIN;
 8007c2c:	2340      	movs	r3, #64	; 0x40
 8007c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MISO_AF;
 8007c30:	2305      	movs	r3, #5
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8007c34:	f107 031c 	add.w	r3, r7, #28
 8007c38:	4619      	mov	r1, r3
 8007c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c3e:	f7fa fb77 	bl	8002330 <HAL_GPIO_Init>
}
 8007c42:	bf00      	nop
 8007c44:	3730      	adds	r7, #48	; 0x30
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	40021000 	.word	0x40021000

08007c50 <USER_CheckStatus>:
#define DISABLE_SD_INIT
/* Private variables ---------------------------------------------------------*/
/* Disk status */
static volatile DSTATUS Stat = STA_NOINIT;
static DSTATUS USER_CheckStatus(BYTE lun)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <USER_CheckStatus+0x3c>)
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	701a      	strb	r2, [r3, #0]
  // TO DO:
  if(MY_SD_GetCardState(0) == BSP_ERROR_NONE)
 8007c60:	2000      	movs	r0, #0
 8007c62:	f7fe ffc7 	bl	8006bf4 <MY_SD_GetCardState>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d107      	bne.n	8007c7c <USER_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 8007c6c:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <USER_CheckStatus+0x3c>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <USER_CheckStatus+0x3c>)
 8007c7a:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007c7c:	4b03      	ldr	r3, [pc, #12]	; (8007c8c <USER_CheckStatus+0x3c>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	b2db      	uxtb	r3, r3
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	2000000c 	.word	0x2000000c

08007c90 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007c9a:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <USER_initialize+0x30>)
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	701a      	strb	r2, [r3, #0]
	  if(MY_SD_Init(0) == BSP_ERROR_NONE)
	  {
		Stat = USER_CheckStatus(pdrv);
	  }
	#else
	  Stat = USER_CheckStatus(pdrv);
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff ffd4 	bl	8007c50 <USER_CheckStatus>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	461a      	mov	r2, r3
 8007cac:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <USER_initialize+0x30>)
 8007cae:	701a      	strb	r2, [r3, #0]
	#endif
    return Stat;
 8007cb0:	4b03      	ldr	r3, [pc, #12]	; (8007cc0 <USER_initialize+0x30>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	2000000c 	.word	0x2000000c

08007cc4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_CheckStatus(pdrv);
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff ffbd 	bl	8007c50 <USER_CheckStatus>
 8007cd6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	607a      	str	r2, [r7, #4]
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	DRESULT res = RES_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_ReadBlocks(0, (uint32_t*)buff,
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	68b9      	ldr	r1, [r7, #8]
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f7fe fdac 	bl	8006858 <MY_SD_ReadBlocks>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d108      	bne.n	8007d18 <USER_read+0x38>
						   (uint32_t) (sector),
						   count) == BSP_ERROR_NONE)
	  {
		/* wait until the read operation is finished */
		while( MY_SD_GetCardState(0)!= BSP_ERROR_NONE)
 8007d06:	bf00      	nop
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f7fe ff73 	bl	8006bf4 <MY_SD_GetCardState>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1f9      	bne.n	8007d08 <USER_read+0x28>
		{
		}
		res = RES_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	75fb      	strb	r3, [r7, #23]
	  }
	  return res;
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END READ */
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b086      	sub	sp, #24
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	DRESULT res = RES_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_WriteBlocks(0, (uint32_t*)buff,
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	f7fe fe57 	bl	80069f0 <MY_SD_WriteBlocks>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d108      	bne.n	8007d5a <USER_write+0x38>
	                        (uint32_t)(sector),
	                        count) == BSP_ERROR_NONE)
	  {
	  /* wait until the Write operation is finished */
	    while(MY_SD_GetCardState(0) != BSP_ERROR_NONE)
 8007d48:	bf00      	nop
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	f7fe ff52 	bl	8006bf4 <MY_SD_GetCardState>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1f9      	bne.n	8007d4a <USER_write+0x28>
	    {
	    }
	    res = RES_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]
	  }

	  return res;
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END WRITE */
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b096      	sub	sp, #88	; 0x58
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	603a      	str	r2, [r7, #0]
 8007d6e:	71fb      	strb	r3, [r7, #7]
 8007d70:	460b      	mov	r3, r1
 8007d72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  SD_CardInfo_t CardInfo;

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007d7a:	4b26      	ldr	r3, [pc, #152]	; (8007e14 <USER_ioctl+0xb0>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <USER_ioctl+0x28>
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e03f      	b.n	8007e0c <USER_ioctl+0xa8>

	  switch (cmd)
 8007d8c:	79bb      	ldrb	r3, [r7, #6]
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d837      	bhi.n	8007e02 <USER_ioctl+0x9e>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <USER_ioctl+0x34>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007da9 	.word	0x08007da9
 8007d9c:	08007db1 	.word	0x08007db1
 8007da0:	08007dcb 	.word	0x08007dcb
 8007da4:	08007de7 	.word	0x08007de7
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007dae:	e02b      	b.n	8007e08 <USER_ioctl+0xa4>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007db0:	f107 0308 	add.w	r3, r7, #8
 8007db4:	4619      	mov	r1, r3
 8007db6:	2000      	movs	r0, #0
 8007db8:	f7fe ff54 	bl	8006c64 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007dc8:	e01e      	b.n	8007e08 <USER_ioctl+0xa4>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007dca:	f107 0308 	add.w	r3, r7, #8
 8007dce:	4619      	mov	r1, r3
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	f7fe ff47 	bl	8006c64 <MY_SD_GetCardInfo>
	    *(WORD*)buff = CardInfo.LogBlockSize;
 8007dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007de4:	e010      	b.n	8007e08 <USER_ioctl+0xa4>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007de6:	f107 0308 	add.w	r3, r7, #8
 8007dea:	4619      	mov	r1, r3
 8007dec:	2000      	movs	r0, #0
 8007dee:	f7fe ff39 	bl	8006c64 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df4:	0a5a      	lsrs	r2, r3, #9
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007e00:	e002      	b.n	8007e08 <USER_ioctl+0xa4>

	  default:
	    res = RES_PARERR;
 8007e02:	2304      	movs	r3, #4
 8007e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  }

	  return res;
 8007e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END IOCTL */
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3758      	adds	r7, #88	; 0x58
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	2000000c 	.word	0x2000000c

08007e18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007e26:	2301      	movs	r3, #1
 8007e28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007e2e:	4b1f      	ldr	r3, [pc, #124]	; (8007eac <FATFS_LinkDriverEx+0x94>)
 8007e30:	7a5b      	ldrb	r3, [r3, #9]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d131      	bne.n	8007e9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e38:	4b1c      	ldr	r3, [pc, #112]	; (8007eac <FATFS_LinkDriverEx+0x94>)
 8007e3a:	7a5b      	ldrb	r3, [r3, #9]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	461a      	mov	r2, r3
 8007e40:	4b1a      	ldr	r3, [pc, #104]	; (8007eac <FATFS_LinkDriverEx+0x94>)
 8007e42:	2100      	movs	r1, #0
 8007e44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007e46:	4b19      	ldr	r3, [pc, #100]	; (8007eac <FATFS_LinkDriverEx+0x94>)
 8007e48:	7a5b      	ldrb	r3, [r3, #9]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	4a17      	ldr	r2, [pc, #92]	; (8007eac <FATFS_LinkDriverEx+0x94>)
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007e56:	4b15      	ldr	r3, [pc, #84]	; (8007eac <FATFS_LinkDriverEx+0x94>)
 8007e58:	7a5b      	ldrb	r3, [r3, #9]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	4b13      	ldr	r3, [pc, #76]	; (8007eac <FATFS_LinkDriverEx+0x94>)
 8007e60:	4413      	add	r3, r2
 8007e62:	79fa      	ldrb	r2, [r7, #7]
 8007e64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e66:	4b11      	ldr	r3, [pc, #68]	; (8007eac <FATFS_LinkDriverEx+0x94>)
 8007e68:	7a5b      	ldrb	r3, [r3, #9]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	b2d1      	uxtb	r1, r2
 8007e70:	4a0e      	ldr	r2, [pc, #56]	; (8007eac <FATFS_LinkDriverEx+0x94>)
 8007e72:	7251      	strb	r1, [r2, #9]
 8007e74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e76:	7dbb      	ldrb	r3, [r7, #22]
 8007e78:	3330      	adds	r3, #48	; 0x30
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	3301      	adds	r3, #1
 8007e84:	223a      	movs	r2, #58	; 0x3a
 8007e86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	3302      	adds	r3, #2
 8007e8c:	222f      	movs	r2, #47	; 0x2f
 8007e8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	3303      	adds	r3, #3
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	20000050 	.word	0x20000050

08007eb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007eba:	2200      	movs	r2, #0
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff ffaa 	bl	8007e18 <FATFS_LinkDriverEx>
 8007ec4:	4603      	mov	r3, r0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <__libc_init_array>:
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	4e0d      	ldr	r6, [pc, #52]	; (8007f08 <__libc_init_array+0x38>)
 8007ed4:	4c0d      	ldr	r4, [pc, #52]	; (8007f0c <__libc_init_array+0x3c>)
 8007ed6:	1ba4      	subs	r4, r4, r6
 8007ed8:	10a4      	asrs	r4, r4, #2
 8007eda:	2500      	movs	r5, #0
 8007edc:	42a5      	cmp	r5, r4
 8007ede:	d109      	bne.n	8007ef4 <__libc_init_array+0x24>
 8007ee0:	4e0b      	ldr	r6, [pc, #44]	; (8007f10 <__libc_init_array+0x40>)
 8007ee2:	4c0c      	ldr	r4, [pc, #48]	; (8007f14 <__libc_init_array+0x44>)
 8007ee4:	f000 f820 	bl	8007f28 <_init>
 8007ee8:	1ba4      	subs	r4, r4, r6
 8007eea:	10a4      	asrs	r4, r4, #2
 8007eec:	2500      	movs	r5, #0
 8007eee:	42a5      	cmp	r5, r4
 8007ef0:	d105      	bne.n	8007efe <__libc_init_array+0x2e>
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}
 8007ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ef8:	4798      	blx	r3
 8007efa:	3501      	adds	r5, #1
 8007efc:	e7ee      	b.n	8007edc <__libc_init_array+0xc>
 8007efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f02:	4798      	blx	r3
 8007f04:	3501      	adds	r5, #1
 8007f06:	e7f2      	b.n	8007eee <__libc_init_array+0x1e>
 8007f08:	08007f80 	.word	0x08007f80
 8007f0c:	08007f80 	.word	0x08007f80
 8007f10:	08007f80 	.word	0x08007f80
 8007f14:	08007f84 	.word	0x08007f84

08007f18 <memset>:
 8007f18:	4402      	add	r2, r0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d100      	bne.n	8007f22 <memset+0xa>
 8007f20:	4770      	bx	lr
 8007f22:	f803 1b01 	strb.w	r1, [r3], #1
 8007f26:	e7f9      	b.n	8007f1c <memset+0x4>

08007f28 <_init>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	bf00      	nop
 8007f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2e:	bc08      	pop	{r3}
 8007f30:	469e      	mov	lr, r3
 8007f32:	4770      	bx	lr

08007f34 <_fini>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	bf00      	nop
 8007f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3a:	bc08      	pop	{r3}
 8007f3c:	469e      	mov	lr, r3
 8007f3e:	4770      	bx	lr
