
NucleoG474-USB-SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af78  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800b150  0800b150  0001b150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b288  0800b288  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800b288  0800b288  0001b288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b290  0800b290  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b290  0800b290  0001b290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b294  0800b294  0001b294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800b298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  20000024  0800b2bc  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  0800b2bc  00020aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b78  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b6b  00000000  00000000  00040bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001918  00000000  00000000  00044738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001748  00000000  00000000  00046050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a5c2  00000000  00000000  00047798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018dba  00000000  00000000  00071d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010860c  00000000  00000000  0008ab14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00193120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006920  00000000  00000000  0019319c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b138 	.word	0x0800b138

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	0800b138 	.word	0x0800b138

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_FDCAN1_Init+0x84>)
 800051e:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <MX_FDCAN1_Init+0x88>)
 8000520:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_FDCAN1_Init+0x84>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000536:	2200      	movs	r2, #0
 8000538:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_FDCAN1_Init+0x84>)
 800053c:	2200      	movs	r2, #0
 800053e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000542:	2200      	movs	r2, #0
 8000544:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 40;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000548:	2228      	movs	r2, #40	; 0x28
 800054a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_FDCAN1_Init+0x84>)
 800054e:	2201      	movs	r2, #1
 8000550:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000554:	220d      	movs	r2, #13
 8000556:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_FDCAN1_Init+0x84>)
 800055a:	2202      	movs	r2, #2
 800055c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000560:	2201      	movs	r2, #1
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000566:	2201      	movs	r2, #1
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_FDCAN1_Init+0x84>)
 800056c:	2201      	movs	r2, #1
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000572:	2201      	movs	r2, #1
 8000574:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000578:	2200      	movs	r2, #0
 800057a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_FDCAN1_Init+0x84>)
 800057e:	2200      	movs	r2, #0
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_FDCAN1_Init+0x84>)
 800058a:	f000 ff7d 	bl	8001488 <HAL_FDCAN_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000594:	f000 fb66 	bl	8000c64 <Error_Handler>
  }

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <HAL_FDCAN_MspInit+0x80>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d129      	bne.n	800061a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000608:	2309      	movs	r3, #9
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f001 fc87 	bl	8001f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40006400 	.word	0x40006400
 8000628:	40021000 	.word	0x40021000

0800062c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 fdbf 	bl	800222c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_GPIO_Init+0xc8>)
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_GPIO_Init+0xcc>)
 80006c4:	f001 fc30 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006c8:	2320      	movs	r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f001 fc21 	bl	8001f28 <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	48000800 	.word	0x48000800

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	f5ad 6d2e 	sub.w	sp, sp, #2784	; 0xae0
 8000702:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 fd3f 	bl	8001186 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f8c6 	bl	8000898 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Initialize the micro SD Card */
  if(MY_SD_Init(0) != BSP_ERROR_NONE){
 800070c:	2000      	movs	r0, #0
 800070e:	f005 ff63 	bl	80065d8 <MY_SD_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <main+0x20>
	  Error_Handler();
 8000718:	f000 faa4 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff86 	bl	800062c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000720:	f000 fc80 	bl	8001024 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000724:	f000 fb20 	bl	8000d68 <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000728:	f005 ff36 	bl	8006598 <MX_FATFS_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <main+0x3a>
    Error_Handler();
 8000732:	f000 fa97 	bl	8000c64 <Error_Handler>
  }
  MX_FDCAN1_Init();
 8000736:	f7ff feef 	bl	8000518 <MX_FDCAN1_Init>
  MX_RTC_Init();
 800073a:	f000 fa97 	bl	8000c6c <MX_RTC_Init>
  MX_TIM17_Init();
 800073e:	f000 fc29 	bl	8000f94 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000742:	f000 f925 	bl	8000990 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.Identifier = 0x0;
 8000746:	4b4d      	ldr	r3, [pc, #308]	; (800087c <main+0x180>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 800074c:	4b4b      	ldr	r3, [pc, #300]	; (800087c <main+0x180>)
 800074e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000752:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000754:	4b49      	ldr	r3, [pc, #292]	; (800087c <main+0x180>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800075a:	4b48      	ldr	r3, [pc, #288]	; (800087c <main+0x180>)
 800075c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000760:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000762:	4b46      	ldr	r3, [pc, #280]	; (800087c <main+0x180>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000768:	4b44      	ldr	r3, [pc, #272]	; (800087c <main+0x180>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800076e:	4b43      	ldr	r3, [pc, #268]	; (800087c <main+0x180>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000774:	4b41      	ldr	r3, [pc, #260]	; (800087c <main+0x180>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 800077a:	4b40      	ldr	r3, [pc, #256]	; (800087c <main+0x180>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
    TxData[0] = ubKeyNumber++;
 8000780:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <main+0x184>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	b2d1      	uxtb	r1, r2
 8000788:	4a3d      	ldr	r2, [pc, #244]	; (8000880 <main+0x184>)
 800078a:	7011      	strb	r1, [r2, #0]
 800078c:	4a3d      	ldr	r2, [pc, #244]	; (8000884 <main+0x188>)
 800078e:	7013      	strb	r3, [r2, #0]
    TxData[1] = 0xAD;
 8000790:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <main+0x188>)
 8000792:	22ad      	movs	r2, #173	; 0xad
 8000794:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0xDE;
 8000796:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <main+0x188>)
 8000798:	22de      	movs	r2, #222	; 0xde
 800079a:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0xAD;
 800079c:	4b39      	ldr	r3, [pc, #228]	; (8000884 <main+0x188>)
 800079e:	22ad      	movs	r2, #173	; 0xad
 80007a0:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0xBE;
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <main+0x188>)
 80007a4:	22be      	movs	r2, #190	; 0xbe
 80007a6:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0xEF;
 80007a8:	4b36      	ldr	r3, [pc, #216]	; (8000884 <main+0x188>)
 80007aa:	22ef      	movs	r2, #239	; 0xef
 80007ac:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0xFA;
 80007ae:	4b35      	ldr	r3, [pc, #212]	; (8000884 <main+0x188>)
 80007b0:	22fa      	movs	r2, #250	; 0xfa
 80007b2:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0xCE;
 80007b4:	4b33      	ldr	r3, [pc, #204]	; (8000884 <main+0x188>)
 80007b6:	22ce      	movs	r2, #206	; 0xce
 80007b8:	71da      	strb	r2, [r3, #7]
    uint16_t aug=3456;
 80007ba:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 80007be:	f8a7 3ad6 	strh.w	r3, [r7, #2774]	; 0xad6
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80007c2:	4831      	ldr	r0, [pc, #196]	; (8000888 <main+0x18c>)
 80007c4:	f000 ffba 	bl	800173c <HAL_FDCAN_Start>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <main+0xd6>
        {
          /* Start Error */
          Error_Handler();
 80007ce:	f000 fa49 	bl	8000c64 <Error_Handler>
        }

      if ( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80007d2:	2200      	movs	r2, #0
 80007d4:	2101      	movs	r1, #1
 80007d6:	482c      	ldr	r0, [pc, #176]	; (8000888 <main+0x18c>)
 80007d8:	f001 f8b2 	bl	8001940 <HAL_FDCAN_ActivateNotification>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <main+0xea>
        {
          /* Notification Error */
          Error_Handler();
 80007e2:	f000 fa3f 	bl	8000c64 <Error_Handler>
      uint8_t workBuffer[_MAX_SS];
      FATFS USERFatFs;    /* File system object for USER logical drive */
      FIL USERFile,readFile,writeFile;       /* File  object for USER */
      char USERPath[4];   /* USER logical drive path */
      FRESULT res,res1; /* FatFs function common result code */
      uint8_t path1[] = "STM32.TXT";
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4a28      	ldr	r2, [pc, #160]	; (800088c <main+0x190>)
 80007ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ec:	c303      	stmia	r3!, {r0, r1}
 80007ee:	801a      	strh	r2, [r3, #0]

      if(MY_SD_GetCardState(0) == BSP_ERROR_NONE){
 80007f0:	2000      	movs	r0, #0
 80007f2:	f006 f8e3 	bl	80069bc <MY_SD_GetCardState>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d114      	bne.n	8000826 <main+0x12a>
    	  res = f_mkfs(USERPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 80007fc:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 8000800:	f107 0010 	add.w	r0, r7, #16
 8000804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	4613      	mov	r3, r2
 800080c:	2200      	movs	r2, #0
 800080e:	2107      	movs	r1, #7
 8000810:	f009 fd46 	bl	800a2a0 <f_mkfs>
 8000814:	4603      	mov	r3, r0
 8000816:	f887 3ad5 	strb.w	r3, [r7, #2773]	; 0xad5
    	  if (res != FR_OK){
 800081a:	f897 3ad5 	ldrb.w	r3, [r7, #2773]	; 0xad5
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <main+0x12a>
			Error_Handler();
 8000822:	f000 fa1f 	bl	8000c64 <Error_Handler>
    	  }

      }
      res = f_mount(&USERFatFs, (TCHAR const*)USERPath, 0);
 8000826:	f107 0110 	add.w	r1, r7, #16
 800082a:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 800082e:	2200      	movs	r2, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f008 ff0b 	bl	800964c <f_mount>
 8000836:	4603      	mov	r3, r0
 8000838:	f887 3ad5 	strb.w	r3, [r7, #2773]	; 0xad5
      res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 800083c:	1d39      	adds	r1, r7, #4
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2208      	movs	r2, #8
 8000844:	4618      	mov	r0, r3
 8000846:	f008 ff47 	bl	80096d8 <f_open>
 800084a:	4603      	mov	r3, r0
 800084c:	f887 3ad5 	strb.w	r3, [r7, #2773]	; 0xad5
      res = f_close(&writeFile);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4618      	mov	r0, r3
 8000856:	f009 faf0 	bl	8009e3a <f_close>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 3ad5 	strb.w	r3, [r7, #2773]	; 0xad5
      if(flag == 0){
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <main+0x194>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d107      	bne.n	8000878 <main+0x17c>
		  flag = 1;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <main+0x194>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
		  MX_NVIC_Init();
 800086e:	f000 f88f 	bl	8000990 <MX_NVIC_Init>
		  HAL_TIM_Base_Start_IT(&htim17);
 8000872:	4808      	ldr	r0, [pc, #32]	; (8000894 <main+0x198>)
 8000874:	f003 ff3e 	bl	80046f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
 8000878:	e7fe      	b.n	8000878 <main+0x17c>
 800087a:	bf00      	nop
 800087c:	20000218 	.word	0x20000218
 8000880:	20000040 	.word	0x20000040
 8000884:	200001e0 	.word	0x200001e0
 8000888:	2000008c 	.word	0x2000008c
 800088c:	0800b150 	.word	0x0800b150
 8000890:	20000048 	.word	0x20000048
 8000894:	2000030c 	.word	0x2000030c

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b0a8      	sub	sp, #160	; 0xa0
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008a2:	2238      	movs	r2, #56	; 0x38
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f00a fc3e 	bl	800b128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2254      	movs	r2, #84	; 0x54
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f00a fc30 	bl	800b128 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008cc:	f001 fd04 	bl	80022d8 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <SystemClock_Config+0xf0>)
 80008d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008d6:	4a2c      	ldr	r2, [pc, #176]	; (8000988 <SystemClock_Config+0xf0>)
 80008d8:	f023 0318 	bic.w	r3, r3, #24
 80008dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80008e0:	2306      	movs	r3, #6
 80008e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ec:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ee:	2340      	movs	r3, #64	; 0x40
 80008f0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000904:	2320      	movs	r3, #32
 8000906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090a:	2302      	movs	r3, #2
 800090c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000910:	2306      	movs	r3, #6
 8000912:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fd7d 	bl	8002420 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800092c:	f000 f99a 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2303      	movs	r3, #3
 8000936:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000944:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000948:	2106      	movs	r1, #6
 800094a:	4618      	mov	r0, r3
 800094c:	f002 f880 	bl	8002a50 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000956:	f000 f985 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <SystemClock_Config+0xf4>)
 800095c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000966:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4618      	mov	r0, r3
 8000972:	f002 fa89 	bl	8002e88 <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800097c:	f000 f972 	bl	8000c64 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	37a0      	adds	r7, #160	; 0xa0
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	00081020 	.word	0x00081020

08000990 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	2015      	movs	r0, #21
 800099a:	f000 fd40 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800099e:	2015      	movs	r0, #21
 80009a0:	f000 fd57 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2028      	movs	r0, #40	; 0x28
 80009aa:	f000 fd38 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ae:	2028      	movs	r0, #40	; 0x28
 80009b0:	f000 fd4f 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	201a      	movs	r0, #26
 80009ba:	f000 fd30 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80009be:	201a      	movs	r0, #26
 80009c0:	f000 fd47 	bl	8001452 <HAL_NVIC_EnableIRQ>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u) != HAL_OK){
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80009d6:	2140      	movs	r1, #64	; 0x40
 80009d8:	4810      	ldr	r0, [pc, #64]	; (8000a1c <HAL_FDCAN_RxFifo0Callback+0x54>)
 80009da:	f000 fed7 	bl	800178c <HAL_FDCAN_GetRxMessage>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_FDCAN_RxFifo0Callback+0x20>
		/* Transmission request Error */
		Error_Handler();
 80009e4:	f000 f93e 	bl	8000c64 <Error_Handler>
	}
	ID = RxHeader.Identifier;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80009ee:	6013      	str	r3, [r2, #0]
	readSigmaData();
 80009f0:	f000 f82e 	bl	8000a50 <readSigmaData>
    if(flag == 1){
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d101      	bne.n	8000a00 <HAL_FDCAN_RxFifo0Callback+0x38>
    	scrivi();
 80009fc:	f000 f8a2 	bl	8000b44 <scrivi>
    }

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2120      	movs	r1, #32
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f001 fc10 	bl	800222c <HAL_GPIO_WritePin>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000f0 	.word	0x200000f0
 8000a18:	2000023c 	.word	0x2000023c
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	2000004c 	.word	0x2000004c
 8000a24:	20000048 	.word	0x20000048

08000a28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17) //check if the interrupt comes from TIM2
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d104      	bne.n	8000a44 <HAL_TIM_PeriodElapsedCallback+0x1c>
        {
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f001 fc0c 	bl	800225c <HAL_GPIO_TogglePin>

        }
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40014800 	.word	0x40014800

08000a50 <readSigmaData>:

void readSigmaData(void){
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	switch(ID){
 8000a54:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <readSigmaData+0xe0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000a5c:	d01d      	beq.n	8000a9a <readSigmaData+0x4a>
 8000a5e:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000a62:	d047      	beq.n	8000af4 <readSigmaData+0xa4>
 8000a64:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000a68:	d000      	beq.n	8000a6c <readSigmaData+0x1c>
			cs.MotorTemperature		= rxData.Data8u[1];
			cs.BDI					= rxData.Data8u[2];
			cs.FaultSubCode			= rxData.Data8u[3]<<8 | rxData.Data8u[4];
	break;
	}
}
 8000a6a:	e05c      	b.n	8000b26 <readSigmaData+0xd6>
			ms.MotorSpeed			= rxData.Data16u[0];
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <readSigmaData+0xe4>)
 8000a6e:	881a      	ldrh	r2, [r3, #0]
 8000a70:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <readSigmaData+0xe8>)
 8000a72:	801a      	strh	r2, [r3, #0]
			ms.MotorCurrent			= rxData.Data16[1];
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <readSigmaData+0xe4>)
 8000a76:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000a7a:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <readSigmaData+0xe8>)
 8000a7c:	805a      	strh	r2, [r3, #2]
			ms.MotorVoltage			= rxData.Data8u[4];
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <readSigmaData+0xe4>)
 8000a80:	791a      	ldrb	r2, [r3, #4]
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <readSigmaData+0xe8>)
 8000a84:	711a      	strb	r2, [r3, #4]
			ms.BatteryVoltage		= rxData.Data8u[5];
 8000a86:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <readSigmaData+0xe4>)
 8000a88:	795a      	ldrb	r2, [r3, #5]
 8000a8a:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <readSigmaData+0xe8>)
 8000a8c:	715a      	strb	r2, [r3, #5]
			ms.BatteryCurrent		= rxData.Data16[4];
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <readSigmaData+0xe4>)
 8000a90:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <readSigmaData+0xe8>)
 8000a96:	80da      	strh	r2, [r3, #6]
	break;
 8000a98:	e045      	b.n	8000b26 <readSigmaData+0xd6>
			ds.ActualTorque			= rxData.Data16[0];
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <readSigmaData+0xe4>)
 8000a9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000aa0:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <readSigmaData+0xec>)
 8000aa2:	801a      	strh	r2, [r3, #0]
			ds.ActualSpeed			= rxData.Data16[1];
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <readSigmaData+0xe4>)
 8000aa6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000aaa:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <readSigmaData+0xec>)
 8000aac:	805a      	strh	r2, [r3, #2]
			ds.DriveStatusIndicator	= rxData.Data8u[4] & 0x0F;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <readSigmaData+0xe4>)
 8000ab0:	791b      	ldrb	r3, [r3, #4]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <readSigmaData+0xec>)
 8000aba:	711a      	strb	r2, [r3, #4]
			ds.SpeedLimitIndicator	= rxData.Data8u[4] >> 4;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <readSigmaData+0xe4>)
 8000abe:	791b      	ldrb	r3, [r3, #4]
 8000ac0:	091b      	lsrs	r3, r3, #4
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <readSigmaData+0xec>)
 8000ac6:	715a      	strb	r2, [r3, #5]
			ds.TorqueLimitIndicator	= rxData.Data8u[5] & 0x0F;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <readSigmaData+0xe4>)
 8000aca:	795b      	ldrb	r3, [r3, #5]
 8000acc:	f003 030f 	and.w	r3, r3, #15
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <readSigmaData+0xec>)
 8000ad4:	719a      	strb	r2, [r3, #6]
			ds.MotorLimitIndicator	= rxData.Data8u[5] >> 4;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <readSigmaData+0xe4>)
 8000ad8:	795b      	ldrb	r3, [r3, #5]
 8000ada:	091b      	lsrs	r3, r3, #4
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <readSigmaData+0xec>)
 8000ae0:	71da      	strb	r2, [r3, #7]
			ds.FaultCode			= rxData.Data8u[6];
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <readSigmaData+0xe4>)
 8000ae4:	799a      	ldrb	r2, [r3, #6]
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <readSigmaData+0xec>)
 8000ae8:	721a      	strb	r2, [r3, #8]
			ds.Code					= rxData.Data8u[7];
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <readSigmaData+0xe4>)
 8000aec:	79da      	ldrb	r2, [r3, #7]
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <readSigmaData+0xec>)
 8000af0:	725a      	strb	r2, [r3, #9]
	break;
 8000af2:	e018      	b.n	8000b26 <readSigmaData+0xd6>
			cs.ControllerTemperature= rxData.Data8u[0];
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <readSigmaData+0xe4>)
 8000af6:	781a      	ldrb	r2, [r3, #0]
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <readSigmaData+0xf0>)
 8000afa:	701a      	strb	r2, [r3, #0]
			cs.MotorTemperature		= rxData.Data8u[1];
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <readSigmaData+0xe4>)
 8000afe:	785a      	ldrb	r2, [r3, #1]
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <readSigmaData+0xf0>)
 8000b02:	705a      	strb	r2, [r3, #1]
			cs.BDI					= rxData.Data8u[2];
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <readSigmaData+0xe4>)
 8000b06:	789a      	ldrb	r2, [r3, #2]
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <readSigmaData+0xf0>)
 8000b0a:	709a      	strb	r2, [r3, #2]
			cs.FaultSubCode			= rxData.Data8u[3]<<8 | rxData.Data8u[4];
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <readSigmaData+0xe4>)
 8000b0e:	78db      	ldrb	r3, [r3, #3]
 8000b10:	021b      	lsls	r3, r3, #8
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <readSigmaData+0xe4>)
 8000b16:	791b      	ldrb	r3, [r3, #4]
 8000b18:	b21b      	sxth	r3, r3
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <readSigmaData+0xf0>)
 8000b22:	809a      	strh	r2, [r3, #4]
	break;
 8000b24:	bf00      	nop
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	2000004c 	.word	0x2000004c
 8000b34:	200000f0 	.word	0x200000f0
 8000b38:	20000164 	.word	0x20000164
 8000b3c:	20000100 	.word	0x20000100
 8000b40:	200000f8 	.word	0x200000f8

08000b44 <scrivi>:
			break;
		}
	}
	return (uint32_t)(e+2);//aggiungo i due caratteri di terminazione
}
FRESULT scrivi(){
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	f5ad 6dd7 	sub.w	sp, sp, #1720	; 0x6b8
 8000b4a:	af04      	add	r7, sp, #16
	FIL writeFile;       /* File  object for USER */
	FATFS USERFatFs;    /* File system object for USER logical drive */
	FIL USERFile;     /* File  object for USER */
	char USERPath[4];   /* USER logical drive path */
	uint8_t bytesWrote;
	uint8_t path1[] = "STM32.TXT";
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4a3d      	ldr	r2, [pc, #244]	; (8000c44 <scrivi+0x100>)
 8000b50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b52:	c303      	stmia	r3!, {r0, r1}
 8000b54:	801a      	strh	r2, [r3, #0]
	res1 = f_mount(&USERFatFs, (TCHAR const*)USERPath, 0);
 8000b56:	f107 0110 	add.w	r1, r7, #16
 8000b5a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f008 fd73 	bl	800964c <f_mount>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f887 36a7 	strb.w	r3, [r7, #1703]	; 0x6a7
	res1 = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 8000b6c:	1d39      	adds	r1, r7, #4
 8000b6e:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8000b72:	2208      	movs	r2, #8
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 fdaf 	bl	80096d8 <f_open>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f887 36a7 	strb.w	r3, [r7, #1703]	; 0x6a7
	res1 = f_close(&writeFile);
 8000b80:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8000b84:	4618      	mov	r0, r3
 8000b86:	f009 f958 	bl	8009e3a <f_close>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 36a7 	strb.w	r3, [r7, #1703]	; 0x6a7
	res1 = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 8000b90:	1d39      	adds	r1, r7, #4
 8000b92:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8000b96:	2212      	movs	r2, #18
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f008 fd9d 	bl	80096d8 <f_open>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 36a7 	strb.w	r3, [r7, #1703]	; 0x6a7
	if(res1==FR_OK) {
 8000ba4:	f897 36a7 	ldrb.w	r3, [r7, #1703]	; 0x6a7
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d13c      	bne.n	8000c26 <scrivi+0xe2>
		f_lseek(&writeFile, indox);
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <scrivi+0x104>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f009 f969 	bl	8009e8e <f_lseek>

		//res1 = f_write(&writeFile, readBuf, size, &bytesWrote);}
		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4923      	ldr	r1, [pc, #140]	; (8000c4c <scrivi+0x108>)
 8000bc0:	4823      	ldr	r0, [pc, #140]	; (8000c50 <scrivi+0x10c>)
 8000bc2:	f002 fcb1 	bl	8003528 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4922      	ldr	r1, [pc, #136]	; (8000c54 <scrivi+0x110>)
 8000bca:	4821      	ldr	r0, [pc, #132]	; (8000c50 <scrivi+0x10c>)
 8000bcc:	f002 fd8e 	bl	80036ec <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <scrivi+0x108>)
 8000bd2:	781a      	ldrb	r2, [r3, #0]
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <scrivi+0x114>)
 8000bd6:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <scrivi+0x108>)
 8000bda:	785a      	ldrb	r2, [r3, #1]
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <scrivi+0x114>)
 8000bde:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <scrivi+0x108>)
 8000be2:	789a      	ldrb	r2, [r3, #2]
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <scrivi+0x114>)
 8000be6:	709a      	strb	r2, [r3, #2]

		indox=indox+f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],cs.ControllerTemperature,cs.MotorTemperature);}
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <scrivi+0x114>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461c      	mov	r4, r3
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <scrivi+0x114>)
 8000bf0:	785b      	ldrb	r3, [r3, #1]
 8000bf2:	461d      	mov	r5, r3
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <scrivi+0x114>)
 8000bf6:	789b      	ldrb	r3, [r3, #2]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <scrivi+0x118>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <scrivi+0x118>)
 8000c02:	785b      	ldrb	r3, [r3, #1]
 8000c04:	f207 4074 	addw	r0, r7, #1140	; 0x474
 8000c08:	9302      	str	r3, [sp, #8]
 8000c0a:	9101      	str	r1, [sp, #4]
 8000c0c:	9200      	str	r2, [sp, #0]
 8000c0e:	462b      	mov	r3, r5
 8000c10:	4622      	mov	r2, r4
 8000c12:	4913      	ldr	r1, [pc, #76]	; (8000c60 <scrivi+0x11c>)
 8000c14:	f009 ffe8 	bl	800abe8 <f_printf>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <scrivi+0x104>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <scrivi+0x104>)
 8000c24:	6013      	str	r3, [r2, #0]
		res1 = f_close(&writeFile);
 8000c26:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f009 f905 	bl	8009e3a <f_close>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f887 36a7 	strb.w	r3, [r7, #1703]	; 0x6a7

	return res1;
 8000c36:	f897 36a7 	ldrb.w	r3, [r7, #1703]	; 0x6a7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f507 67d5 	add.w	r7, r7, #1704	; 0x6a8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}
 8000c44:	0800b150 	.word	0x0800b150
 8000c48:	20000044 	.word	0x20000044
 8000c4c:	2000026c 	.word	0x2000026c
 8000c50:	20000280 	.word	0x20000280
 8000c54:	20000178 	.word	0x20000178
 8000c58:	20000214 	.word	0x20000214
 8000c5c:	200000f8 	.word	0x200000f8
 8000c60:	0800b15c 	.word	0x0800b15c

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//printf("** Error. ** \n\r");
	while(1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x4>
	...

08000c6c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000c86:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <MX_RTC_Init+0xc0>)
 8000c88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c8a:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c90:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000c92:	227f      	movs	r2, #127	; 0x7f
 8000c94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c96:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000c98:	22ff      	movs	r2, #255	; 0xff
 8000c9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cbc:	481a      	ldr	r0, [pc, #104]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000cbe:	f002 fb2f 	bl	8003320 <HAL_RTC_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000cc8:	f7ff ffcc 	bl	8000c64 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480f      	ldr	r0, [pc, #60]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000cec:	f002 fb86 	bl	80033fc <HAL_RTC_SetTime>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8000cf6:	f7ff ffb5 	bl	8000c64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_RTC_Init+0xbc>)
 8000d12:	f002 fc65 	bl	80035e0 <HAL_RTC_SetDate>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000d1c:	f7ff ffa2 	bl	8000c64 <Error_Handler>
  }

}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000280 	.word	0x20000280
 8000d2c:	40002800 	.word	0x40002800

08000d30 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_RTC_MspInit+0x30>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d107      	bne.n	8000d52 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_RTC_MspInit+0x34>)
 8000d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_RTC_MspInit+0x34>)
 8000d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40002800 	.word	0x40002800
 8000d64:	40021000 	.word	0x40021000

08000d68 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <MX_SPI2_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000d82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d86:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000d9e:	2210      	movs	r2, #16
 8000da0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000db6:	2207      	movs	r2, #7
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_SPI2_Init+0x74>)
 8000dc8:	f002 fdb2 	bl	8003930 <HAL_SPI_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000dd2:	f7ff ff47 	bl	8000c64 <Error_Handler>
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200002a8 	.word	0x200002a8
 8000de0:	40003800 	.word	0x40003800

08000de4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_SPI_MspInit+0x7c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d128      	bne.n	8000e58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	6593      	str	r3, [r2, #88]	; 0x58
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <HAL_SPI_MspInit+0x84>)
 8000e54:	f001 f868 	bl	8001f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40003800 	.word	0x40003800
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48000400 	.word	0x48000400

08000e6c <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e7a:	6093      	str	r3, [r2, #8]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40007000 	.word	0x40007000

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x44>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000ec2:	f7ff ffd3 	bl	8000e6c <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f980 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <FDCAN1_IT0_IRQHandler+0x10>)
 8000f36:	f000 fde9 	bl	8001b0c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000008c 	.word	0x2000008c

08000f44 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f4a:	f003 fbfd 	bl	8004748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000030c 	.word	0x2000030c

08000f58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f60:	f001 f996 	bl	8002290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <SystemInit+0x28>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <SystemInit+0x28>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SystemInit+0x28>)
 8000f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f82:	609a      	str	r2, [r3, #8]
#endif
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_TIM17_Init+0x48>)
 8000f9a:	4a11      	ldr	r2, [pc, #68]	; (8000fe0 <MX_TIM17_Init+0x4c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_TIM17_Init+0x48>)
 8000fa0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000fa4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <MX_TIM17_Init+0x48>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2000;
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_TIM17_Init+0x48>)
 8000fae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fb2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_TIM17_Init+0x48>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_TIM17_Init+0x48>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_TIM17_Init+0x48>)
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_TIM17_Init+0x48>)
 8000fc8:	f003 fb68 	bl	800469c <HAL_TIM_Base_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000fd2:	f7ff fe47 	bl	8000c64 <Error_Handler>
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000030c 	.word	0x2000030c
 8000fe0:	40014800 	.word	0x40014800

08000fe4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_TIM_Base_MspInit+0x38>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10b      	bne.n	800100e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_TIM_Base_MspInit+0x3c>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <HAL_TIM_Base_MspInit+0x3c>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6613      	str	r3, [r2, #96]	; 0x60
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <HAL_TIM_Base_MspInit+0x3c>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40014800 	.word	0x40014800
 8001020:	40021000 	.word	0x40021000

08001024 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 800102a:	4a20      	ldr	r2, [pc, #128]	; (80010ac <MX_LPUART1_UART_Init+0x88>)
 800102c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 800105c:	2200      	movs	r2, #0
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 8001062:	f003 fe07 	bl	8004c74 <HAL_UART_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800106c:	f7ff fdfa 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001070:	2100      	movs	r1, #0
 8001072:	480d      	ldr	r0, [pc, #52]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 8001074:	f005 f9ab 	bl	80063ce <HAL_UARTEx_SetTxFifoThreshold>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 800107e:	f7ff fdf1 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001082:	2100      	movs	r1, #0
 8001084:	4808      	ldr	r0, [pc, #32]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 8001086:	f005 f9e0 	bl	800644a <HAL_UARTEx_SetRxFifoThreshold>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8001090:	f7ff fde8 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_LPUART1_UART_Init+0x84>)
 8001096:	f005 f961 	bl	800635c <HAL_UARTEx_DisableFifoMode>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 80010a0:	f7ff fde0 	bl	8000c64 <Error_Handler>
  }

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000034c 	.word	0x2000034c
 80010ac:	40008000 	.word	0x40008000

080010b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_UART_MspInit+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d128      	bne.n	8001124 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_UART_MspInit+0x80>)
 80010d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d6:	4a16      	ldr	r2, [pc, #88]	; (8001130 <HAL_UART_MspInit+0x80>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	65d3      	str	r3, [r2, #92]	; 0x5c
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_UART_MspInit+0x80>)
 80010e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_UART_MspInit+0x80>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_UART_MspInit+0x80>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_UART_MspInit+0x80>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001102:	230c      	movs	r3, #12
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001112:	230c      	movs	r3, #12
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f000 ff02 	bl	8001f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40008000 	.word	0x40008000
 8001130:	40021000 	.word	0x40021000

08001134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001136:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopForever+0x6>)
  ldr r1, =_edata
 800113a:	490e      	ldr	r1, [pc, #56]	; (8001174 <LoopForever+0xa>)
  ldr r2, =_sidata
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <LoopForever+0xe>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001150:	4c0b      	ldr	r4, [pc, #44]	; (8001180 <LoopForever+0x16>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800115e:	f7ff ff03 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f009 ffbd 	bl	800b0e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001166:	f7ff fac9 	bl	80006fc <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   r0, =_estack
 800116c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001178:	0800b298 	.word	0x0800b298
  ldr r2, =_sbss
 800117c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001180:	20000aa4 	.word	0x20000aa4

08001184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_2_IRQHandler>

08001186 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f939 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001196:	2000      	movs	r0, #0
 8001198:	f000 f80e 	bl	80011b8 <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	e001      	b.n	80011ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a8:	f7ff fe70 	bl	8000e8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ac:	79fb      	ldrb	r3, [r7, #7]

}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_InitTick+0x68>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d022      	beq.n	8001212 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_InitTick+0x6c>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HAL_InitTick+0x68>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f944 	bl	800146e <HAL_SYSTICK_Config>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10f      	bne.n	800120c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	d809      	bhi.n	8001206 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f2:	2200      	movs	r2, #0
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	f04f 30ff 	mov.w	r0, #4294967295
 80011fa:	f000 f910 	bl	800141e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_InitTick+0x70>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e007      	b.n	8001216 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e004      	b.n	8001216 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e001      	b.n	8001216 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000008 	.word	0x20000008
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x1c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x20>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_IncTick+0x1c>)
 800123c:	6013      	str	r3, [r2, #0]
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	200003d8 	.word	0x200003d8
 800124c:	20000008 	.word	0x20000008

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200003d8 	.word	0x200003d8

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff40 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff90 	bl	800135c <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5f 	bl	8001308 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff33 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa4 	bl	80013c4 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e147      	b.n	800172a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff f878 	bl	80005a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0210 	bic.w	r2, r2, #16
 80014c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c4:	f7ff fec4 	bl	8001250 <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014ca:	e012      	b.n	80014f2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014cc:	f7ff fec0 	bl	8001250 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b0a      	cmp	r3, #10
 80014d8:	d90b      	bls.n	80014f2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2203      	movs	r2, #3
 80014ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e11b      	b.n	800172a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d0e5      	beq.n	80014cc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001510:	f7ff fe9e 	bl	8001250 <HAL_GetTick>
 8001514:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001516:	e012      	b.n	800153e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001518:	f7ff fe9a 	bl	8001250 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b0a      	cmp	r3, #10
 8001524:	d90b      	bls.n	800153e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152a:	f043 0201 	orr.w	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2203      	movs	r2, #3
 8001536:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0f5      	b.n	800172a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0e5      	beq.n	8001518 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0202 	orr.w	r2, r2, #2
 800155a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a74      	ldr	r2, [pc, #464]	; (8001734 <HAL_FDCAN_Init+0x2ac>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d103      	bne.n	800156e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001566:	4a74      	ldr	r2, [pc, #464]	; (8001738 <HAL_FDCAN_Init+0x2b0>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7c1b      	ldrb	r3, [r3, #16]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	e007      	b.n	8001598 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001596:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7c5b      	ldrb	r3, [r3, #17]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d108      	bne.n	80015b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015ae:	619a      	str	r2, [r3, #24]
 80015b0:	e007      	b.n	80015c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7c9b      	ldrb	r3, [r3, #18]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015d8:	619a      	str	r2, [r3, #24]
 80015da:	e007      	b.n	80015ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	699a      	ldr	r2, [r3, #24]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001610:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0210 	bic.w	r2, r2, #16
 8001620:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699a      	ldr	r2, [r3, #24]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0204 	orr.w	r2, r2, #4
 8001638:	619a      	str	r2, [r3, #24]
 800163a:	e02c      	b.n	8001696 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d028      	beq.n	8001696 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d01c      	beq.n	8001686 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800165a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0210 	orr.w	r2, r2, #16
 800166a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d110      	bne.n	8001696 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0220 	orr.w	r2, r2, #32
 8001682:	619a      	str	r2, [r3, #24]
 8001684:	e007      	b.n	8001696 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699a      	ldr	r2, [r3, #24]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0220 	orr.w	r2, r2, #32
 8001694:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	3b01      	subs	r3, #1
 800169c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016a6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016ae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016be:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016c0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016ca:	d115      	bne.n	80016f8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	3b01      	subs	r3, #1
 80016d8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016da:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	3b01      	subs	r3, #1
 80016e2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016e4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	3b01      	subs	r3, #1
 80016ee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016f4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016f6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fb9e 	bl	8001e50 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40006400 	.word	0x40006400
 8001738:	40006500 	.word	0x40006500

0800173c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d110      	bne.n	8001772 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699a      	ldr	r2, [r3, #24]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e006      	b.n	8001780 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001776:	f043 0204 	orr.w	r2, r3, #4
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
  }
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800178c:	b480      	push	{r7}
 800178e:	b08b      	sub	sp, #44	; 0x2c
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80017a0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80017a2:	7efb      	ldrb	r3, [r7, #27]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	f040 80bc 	bne.w	8001922 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b40      	cmp	r3, #64	; 0x40
 80017ae:	d121      	bne.n	80017f4 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0af      	b.n	8001930 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
 80017f2:	e020      	b.n	8001836 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001808:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e08d      	b.n	8001930 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	4613      	mov	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d107      	bne.n	800185a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0c9b      	lsrs	r3, r3, #18
 8001850:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	e005      	b.n	8001866 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	3304      	adds	r3, #4
 8001882:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0e1b      	lsrs	r3, r3, #24
 80018b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0fda      	lsrs	r2, r3, #31
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	3304      	adds	r3, #4
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
 80018d8:	e00a      	b.n	80018f0 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	441a      	add	r2, r3
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	440b      	add	r3, r1
 80018e6:	7812      	ldrb	r2, [r2, #0]
 80018e8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	3301      	adds	r3, #1
 80018ee:	623b      	str	r3, [r7, #32]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_FDCAN_GetRxMessage+0x1b0>)
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
 80018fa:	461a      	mov	r2, r3
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	4293      	cmp	r3, r2
 8001900:	d3eb      	bcc.n	80018da <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b40      	cmp	r3, #64	; 0x40
 8001906:	d105      	bne.n	8001914 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001912:	e004      	b.n	800191e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e006      	b.n	8001930 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	f043 0208 	orr.w	r2, r3, #8
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
  }
}
 8001930:	4618      	mov	r0, r3
 8001932:	372c      	adds	r7, #44	; 0x2c
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	0800b1d8 	.word	0x0800b1d8

08001940 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001952:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d003      	beq.n	8001962 <HAL_FDCAN_ActivateNotification+0x22>
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	2b02      	cmp	r3, #2
 800195e:	f040 80c8 	bne.w	8001af2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <HAL_FDCAN_ActivateNotification+0x3e>
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d03b      	beq.n	80019f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d031      	beq.n	80019f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d027      	beq.n	80019f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01d      	beq.n	80019f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d013      	beq.n	80019f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00c      	beq.n	8001a06 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d107      	bne.n	8001a06 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <HAL_FDCAN_ActivateNotification+0xda>
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d13b      	bne.n	8001a92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d131      	bne.n	8001a92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d127      	bne.n	8001a92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d11d      	bne.n	8001a92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d113      	bne.n	8001a92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00c      	beq.n	8001aa2 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0202 	orr.w	r2, r2, #2
 8001aa0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d009      	beq.n	8001ac0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e006      	b.n	8001b00 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af6:	f043 0202 	orr.w	r2, r3, #2
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
  }
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b28:	4013      	ands	r3, r2
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	6a3a      	ldr	r2, [r7, #32]
 8001b40:	4013      	ands	r3, r2
 8001b42:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b4e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b62:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001b66:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b7e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00d      	beq.n	8001bb6 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2240      	movs	r2, #64	; 0x40
 8001bae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f92e 	bl	8001e12 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d014      	beq.n	8001bfc <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bda:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001bf4:	6939      	ldr	r1, [r7, #16]
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8ec 	bl	8001dd4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c08:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8b6 	bl	8001d7e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6a3a      	ldr	r2, [r7, #32]
 8001c1e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001c20:	6a39      	ldr	r1, [r7, #32]
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe fed0 	bl	80009c8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001c36:	69f9      	ldr	r1, [r7, #28]
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f8ab 	bl	8001d94 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00e      	beq.n	8001c6a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c62:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f8a0 	bl	8001daa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01a      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d013      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c8e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001ca6:	68f9      	ldr	r1, [r7, #12]
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f888 	bl	8001dbe <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00e      	beq.n	8001cda <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f888 	bl	8001dea <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00e      	beq.n	8001d06 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cfe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f87c 	bl	8001dfe <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d011      	beq.n	8001d38 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d007      	beq.n	8001d4e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001d46:	6979      	ldr	r1, [r7, #20]
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f876 	bl	8001e3a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f858 	bl	8001e26 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001e5a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d103      	bne.n	8001e6e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001e6c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a2c      	ldr	r2, [pc, #176]	; (8001f24 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d103      	bne.n	8001e80 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001e7e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e8e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e96:	041a      	lsls	r2, r3, #16
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	061a      	lsls	r2, r3, #24
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e005      	b.n	8001f02 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3304      	adds	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d3f3      	bcc.n	8001ef6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	4000a400 	.word	0x4000a400
 8001f20:	40006800 	.word	0x40006800
 8001f24:	40006c00 	.word	0x40006c00

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f36:	e15a      	b.n	80021ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	4013      	ands	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 814c 	beq.w	80021e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x38>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b12      	cmp	r3, #18
 8001f5e:	d123      	bne.n	8001fa8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	6939      	ldr	r1, [r7, #16]
 8001fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0203 	and.w	r2, r3, #3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d00b      	beq.n	8001ffc <HAL_GPIO_Init+0xd4>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d007      	beq.n	8001ffc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ff0:	2b11      	cmp	r3, #17
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b12      	cmp	r3, #18
 8001ffa:	d130      	bne.n	800205e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002032:	2201      	movs	r2, #1
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f003 0201 	and.w	r2, r3, #1
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80a6 	beq.w	80021e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209c:	4b5b      	ldr	r3, [pc, #364]	; (800220c <HAL_GPIO_Init+0x2e4>)
 800209e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a0:	4a5a      	ldr	r2, [pc, #360]	; (800220c <HAL_GPIO_Init+0x2e4>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6613      	str	r3, [r2, #96]	; 0x60
 80020a8:	4b58      	ldr	r3, [pc, #352]	; (800220c <HAL_GPIO_Init+0x2e4>)
 80020aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b4:	4a56      	ldr	r2, [pc, #344]	; (8002210 <HAL_GPIO_Init+0x2e8>)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020de:	d01f      	beq.n	8002120 <HAL_GPIO_Init+0x1f8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a4c      	ldr	r2, [pc, #304]	; (8002214 <HAL_GPIO_Init+0x2ec>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d019      	beq.n	800211c <HAL_GPIO_Init+0x1f4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a4b      	ldr	r2, [pc, #300]	; (8002218 <HAL_GPIO_Init+0x2f0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <HAL_GPIO_Init+0x1f0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a4a      	ldr	r2, [pc, #296]	; (800221c <HAL_GPIO_Init+0x2f4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00d      	beq.n	8002114 <HAL_GPIO_Init+0x1ec>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a49      	ldr	r2, [pc, #292]	; (8002220 <HAL_GPIO_Init+0x2f8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <HAL_GPIO_Init+0x1e8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a48      	ldr	r2, [pc, #288]	; (8002224 <HAL_GPIO_Init+0x2fc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <HAL_GPIO_Init+0x1e4>
 8002108:	2305      	movs	r3, #5
 800210a:	e00a      	b.n	8002122 <HAL_GPIO_Init+0x1fa>
 800210c:	2306      	movs	r3, #6
 800210e:	e008      	b.n	8002122 <HAL_GPIO_Init+0x1fa>
 8002110:	2304      	movs	r3, #4
 8002112:	e006      	b.n	8002122 <HAL_GPIO_Init+0x1fa>
 8002114:	2303      	movs	r3, #3
 8002116:	e004      	b.n	8002122 <HAL_GPIO_Init+0x1fa>
 8002118:	2302      	movs	r3, #2
 800211a:	e002      	b.n	8002122 <HAL_GPIO_Init+0x1fa>
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_GPIO_Init+0x1fa>
 8002120:	2300      	movs	r3, #0
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	f002 0203 	and.w	r2, r2, #3
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	4093      	lsls	r3, r2
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002132:	4937      	ldr	r1, [pc, #220]	; (8002210 <HAL_GPIO_Init+0x2e8>)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002140:	4b39      	ldr	r3, [pc, #228]	; (8002228 <HAL_GPIO_Init+0x300>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002164:	4a30      	ldr	r2, [pc, #192]	; (8002228 <HAL_GPIO_Init+0x300>)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800216a:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <HAL_GPIO_Init+0x300>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800218e:	4a26      	ldr	r2, [pc, #152]	; (8002228 <HAL_GPIO_Init+0x300>)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002194:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_GPIO_Init+0x300>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021b8:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_GPIO_Init+0x300>)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <HAL_GPIO_Init+0x300>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021e2:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_GPIO_Init+0x300>)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	3301      	adds	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f47f ae9d 	bne.w	8001f38 <HAL_GPIO_Init+0x10>
  }
}
 80021fe:	bf00      	nop
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	40010000 	.word	0x40010000
 8002214:	48000400 	.word	0x48000400
 8002218:	48000800 	.word	0x48000800
 800221c:	48000c00 	.word	0x48000c00
 8002220:	48001000 	.word	0x48001000
 8002224:	48001400 	.word	0x48001400
 8002228:	40010400 	.word	0x40010400

0800222c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
 8002238:	4613      	mov	r3, r2
 800223a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002248:	e002      	b.n	8002250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	887b      	ldrh	r3, [r7, #2]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002274:	887a      	ldrh	r2, [r7, #2]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800227a:	e002      	b.n	8002282 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800227c:	887a      	ldrh	r2, [r7, #2]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	619a      	str	r2, [r3, #24]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f806 	bl	80022c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40010400 	.word	0x40010400

080022c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d141      	bne.n	800236a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022e6:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f2:	d131      	bne.n	8002358 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f4:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022fa:	4a46      	ldr	r2, [pc, #280]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002304:	4b43      	ldr	r3, [pc, #268]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800230c:	4a41      	ldr	r2, [pc, #260]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002312:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002314:	4b40      	ldr	r3, [pc, #256]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2232      	movs	r2, #50	; 0x32
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4a3f      	ldr	r2, [pc, #252]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	0c9b      	lsrs	r3, r3, #18
 8002326:	3301      	adds	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800232a:	e002      	b.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3b01      	subs	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002332:	4b38      	ldr	r3, [pc, #224]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233e:	d102      	bne.n	8002346 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f2      	bne.n	800232c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002346:	4b33      	ldr	r3, [pc, #204]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002352:	d158      	bne.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e057      	b.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800235e:	4a2d      	ldr	r2, [pc, #180]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002368:	e04d      	b.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002370:	d141      	bne.n	80023f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002372:	4b28      	ldr	r3, [pc, #160]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237e:	d131      	bne.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002386:	4a23      	ldr	r2, [pc, #140]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002398:	4a1e      	ldr	r2, [pc, #120]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2232      	movs	r2, #50	; 0x32
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	0c9b      	lsrs	r3, r3, #18
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b6:	e002      	b.n	80023be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ca:	d102      	bne.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f2      	bne.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023de:	d112      	bne.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e011      	b.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023f4:	e007      	b.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002400:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002404:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40007000 	.word	0x40007000
 8002418:	20000000 	.word	0x20000000
 800241c:	431bde83 	.word	0x431bde83

08002420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e308      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d075      	beq.n	800252a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243e:	4ba3      	ldr	r3, [pc, #652]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002448:	4ba0      	ldr	r3, [pc, #640]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d102      	bne.n	800245e <HAL_RCC_OscConfig+0x3e>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d002      	beq.n	8002464 <HAL_RCC_OscConfig+0x44>
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d10b      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	4b99      	ldr	r3, [pc, #612]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d05b      	beq.n	8002528 <HAL_RCC_OscConfig+0x108>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d157      	bne.n	8002528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e2e3      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002484:	d106      	bne.n	8002494 <HAL_RCC_OscConfig+0x74>
 8002486:	4b91      	ldr	r3, [pc, #580]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a90      	ldr	r2, [pc, #576]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e01d      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x98>
 800249e:	4b8b      	ldr	r3, [pc, #556]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a8a      	ldr	r2, [pc, #552]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b88      	ldr	r3, [pc, #544]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a87      	ldr	r2, [pc, #540]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 80024b8:	4b84      	ldr	r3, [pc, #528]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a83      	ldr	r2, [pc, #524]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b81      	ldr	r3, [pc, #516]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a80      	ldr	r2, [pc, #512]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe feba 	bl	8001250 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe feb6 	bl	8001250 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e2a8      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f2:	4b76      	ldr	r3, [pc, #472]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0xc0>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fea6 	bl	8001250 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe fea2 	bl	8001250 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e294      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800251a:	4b6c      	ldr	r3, [pc, #432]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0xe8>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d075      	beq.n	8002622 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	4b65      	ldr	r3, [pc, #404]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002540:	4b62      	ldr	r3, [pc, #392]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b0c      	cmp	r3, #12
 800254e:	d102      	bne.n	8002556 <HAL_RCC_OscConfig+0x136>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d002      	beq.n	800255c <HAL_RCC_OscConfig+0x13c>
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d11f      	bne.n	800259c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800255c:	4b5b      	ldr	r3, [pc, #364]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_OscConfig+0x154>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e267      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002574:	4b55      	ldr	r3, [pc, #340]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	061b      	lsls	r3, r3, #24
 8002582:	4952      	ldr	r1, [pc, #328]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002588:	4b51      	ldr	r3, [pc, #324]	; (80026d0 <HAL_RCC_OscConfig+0x2b0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fe13 	bl	80011b8 <HAL_InitTick>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d043      	beq.n	8002620 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e253      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d023      	beq.n	80025ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b49      	ldr	r3, [pc, #292]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a48      	ldr	r2, [pc, #288]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fe4e 	bl	8001250 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7fe fe4a 	bl	8001250 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e23c      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ca:	4b40      	ldr	r3, [pc, #256]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	061b      	lsls	r3, r3, #24
 80025e4:	4939      	ldr	r1, [pc, #228]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
 80025ea:	e01a      	b.n	8002622 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ec:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a36      	ldr	r2, [pc, #216]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fe2a 	bl	8001250 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002600:	f7fe fe26 	bl	8001250 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e218      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002612:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x1e0>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d03c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01c      	beq.n	8002670 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002636:	4b25      	ldr	r3, [pc, #148]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263c:	4a23      	ldr	r2, [pc, #140]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe fe03 	bl	8001250 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264e:	f7fe fdff 	bl	8001250 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1f1      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0ef      	beq.n	800264e <HAL_RCC_OscConfig+0x22e>
 800266e:	e01b      	b.n	80026a8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002676:	4a15      	ldr	r2, [pc, #84]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe fde6 	bl	8001250 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe fde2 	bl	8001250 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1d4      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 800269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ef      	bne.n	8002688 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80ab 	beq.w	800280c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2b4>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e005      	b.n	80026d6 <HAL_RCC_OscConfig+0x2b6>
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	20000004 	.word	0x20000004
 80026d4:	2300      	movs	r3, #0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026da:	4baf      	ldr	r3, [pc, #700]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026de:	4aae      	ldr	r2, [pc, #696]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6593      	str	r3, [r2, #88]	; 0x58
 80026e6:	4bac      	ldr	r3, [pc, #688]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026f2:	2301      	movs	r3, #1
 80026f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f6:	4ba9      	ldr	r3, [pc, #676]	; (800299c <HAL_RCC_OscConfig+0x57c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d118      	bne.n	8002734 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002702:	4ba6      	ldr	r3, [pc, #664]	; (800299c <HAL_RCC_OscConfig+0x57c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4aa5      	ldr	r2, [pc, #660]	; (800299c <HAL_RCC_OscConfig+0x57c>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270e:	f7fe fd9f 	bl	8001250 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002716:	f7fe fd9b 	bl	8001250 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e18d      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002728:	4b9c      	ldr	r3, [pc, #624]	; (800299c <HAL_RCC_OscConfig+0x57c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d108      	bne.n	800274e <HAL_RCC_OscConfig+0x32e>
 800273c:	4b96      	ldr	r3, [pc, #600]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	4a95      	ldr	r2, [pc, #596]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800274c:	e024      	b.n	8002798 <HAL_RCC_OscConfig+0x378>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b05      	cmp	r3, #5
 8002754:	d110      	bne.n	8002778 <HAL_RCC_OscConfig+0x358>
 8002756:	4b90      	ldr	r3, [pc, #576]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275c:	4a8e      	ldr	r2, [pc, #568]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002766:	4b8c      	ldr	r3, [pc, #560]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	4a8a      	ldr	r2, [pc, #552]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002776:	e00f      	b.n	8002798 <HAL_RCC_OscConfig+0x378>
 8002778:	4b87      	ldr	r3, [pc, #540]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	4a86      	ldr	r2, [pc, #536]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002788:	4b83      	ldr	r3, [pc, #524]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	4a82      	ldr	r2, [pc, #520]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002790:	f023 0304 	bic.w	r3, r3, #4
 8002794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d016      	beq.n	80027ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe fd56 	bl	8001250 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe fd52 	bl	8001250 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e142      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ed      	beq.n	80027a8 <HAL_RCC_OscConfig+0x388>
 80027cc:	e015      	b.n	80027fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7fe fd3f 	bl	8001250 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe fd3b 	bl	8001250 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e12b      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ec:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1ed      	bne.n	80027d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027fa:	7ffb      	ldrb	r3, [r7, #31]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d105      	bne.n	800280c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002800:	4b65      	ldr	r3, [pc, #404]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	4a64      	ldr	r2, [pc, #400]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d03c      	beq.n	8002892 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01c      	beq.n	800285a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002820:	4b5d      	ldr	r3, [pc, #372]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002826:	4a5c      	ldr	r2, [pc, #368]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7fe fd0e 	bl	8001250 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002838:	f7fe fd0a 	bl	8001250 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0fc      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800284a:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800284c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ef      	beq.n	8002838 <HAL_RCC_OscConfig+0x418>
 8002858:	e01b      	b.n	8002892 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800285a:	4b4f      	ldr	r3, [pc, #316]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800285c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002860:	4a4d      	ldr	r2, [pc, #308]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286a:	f7fe fcf1 	bl	8001250 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002872:	f7fe fced 	bl	8001250 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0df      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002884:	4b44      	ldr	r3, [pc, #272]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1ef      	bne.n	8002872 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80d3 	beq.w	8002a42 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	f000 808d 	beq.w	80029c4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d15a      	bne.n	8002968 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b2:	4b39      	ldr	r3, [pc, #228]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a38      	ldr	r2, [pc, #224]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 80028b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fcc7 	bl	8001250 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe fcc3 	bl	8001250 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0b5      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d8:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e4:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <HAL_RCC_OscConfig+0x580>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6a11      	ldr	r1, [r2, #32]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f4:	3a01      	subs	r2, #1
 80028f6:	0112      	lsls	r2, r2, #4
 80028f8:	4311      	orrs	r1, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80028fe:	0212      	lsls	r2, r2, #8
 8002900:	4311      	orrs	r1, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002906:	0852      	lsrs	r2, r2, #1
 8002908:	3a01      	subs	r2, #1
 800290a:	0552      	lsls	r2, r2, #21
 800290c:	4311      	orrs	r1, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002912:	0852      	lsrs	r2, r2, #1
 8002914:	3a01      	subs	r2, #1
 8002916:	0652      	lsls	r2, r2, #25
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800291e:	06d2      	lsls	r2, r2, #27
 8002920:	430a      	orrs	r2, r1
 8002922:	491d      	ldr	r1, [pc, #116]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002924:	4313      	orrs	r3, r2
 8002926:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800292e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002934:	4b18      	ldr	r3, [pc, #96]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fc86 	bl	8001250 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe fc82 	bl	8001250 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e074      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x528>
 8002966:	e06c      	b.n	8002a42 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800296e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002972:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a07      	ldr	r2, [pc, #28]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_RCC_OscConfig+0x578>)
 8002986:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fc5e 	bl	8001250 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002996:	e00e      	b.n	80029b6 <HAL_RCC_OscConfig+0x596>
 8002998:	40021000 	.word	0x40021000
 800299c:	40007000 	.word	0x40007000
 80029a0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe fc54 	bl	8001250 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e046      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b6:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_RCC_OscConfig+0x62c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x584>
 80029c2:	e03e      	b.n	8002a42 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e039      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80029d0:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <HAL_RCC_OscConfig+0x62c>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 0203 	and.w	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d12c      	bne.n	8002a3e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	3b01      	subs	r3, #1
 80029f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d123      	bne.n	8002a3e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d11b      	bne.n	8002a3e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d113      	bne.n	8002a3e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	3b01      	subs	r3, #1
 8002a24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d109      	bne.n	8002a3e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	3b01      	subs	r3, #1
 8002a38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e11e      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a68:	4b91      	ldr	r3, [pc, #580]	; (8002cb0 <HAL_RCC_ClockConfig+0x260>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d910      	bls.n	8002a98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b8e      	ldr	r3, [pc, #568]	; (8002cb0 <HAL_RCC_ClockConfig+0x260>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 020f 	bic.w	r2, r3, #15
 8002a7e:	498c      	ldr	r1, [pc, #560]	; (8002cb0 <HAL_RCC_ClockConfig+0x260>)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b8a      	ldr	r3, [pc, #552]	; (8002cb0 <HAL_RCC_ClockConfig+0x260>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e106      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d073      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d129      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aac:	4b81      	ldr	r3, [pc, #516]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0f4      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002abc:	f000 f99e 	bl	8002dfc <RCC_GetSysClockFreqFromPLLSource>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4a7c      	ldr	r2, [pc, #496]	; (8002cb8 <HAL_RCC_ClockConfig+0x268>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d93f      	bls.n	8002b4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002aca:	4b7a      	ldr	r3, [pc, #488]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d033      	beq.n	8002b4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d12f      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aea:	4b72      	ldr	r3, [pc, #456]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af2:	4a70      	ldr	r2, [pc, #448]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e024      	b.n	8002b4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b08:	4b6a      	ldr	r3, [pc, #424]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0c6      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b18:	4b66      	ldr	r3, [pc, #408]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0be      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b28:	f000 f8ce 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4a61      	ldr	r2, [pc, #388]	; (8002cb8 <HAL_RCC_ClockConfig+0x268>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d909      	bls.n	8002b4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b36:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b3e:	4a5d      	ldr	r2, [pc, #372]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b4a:	4b5a      	ldr	r3, [pc, #360]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f023 0203 	bic.w	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4957      	ldr	r1, [pc, #348]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fb78 	bl	8001250 <HAL_GetTick>
 8002b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b64:	f7fe fb74 	bl	8001250 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e095      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	4b4e      	ldr	r3, [pc, #312]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 020c 	and.w	r2, r3, #12
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d1eb      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d023      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a42      	ldr	r2, [pc, #264]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002bbc:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bc4:	4a3b      	ldr	r2, [pc, #236]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002bc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4936      	ldr	r1, [pc, #216]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d105      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002be6:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4a32      	ldr	r2, [pc, #200]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <HAL_RCC_ClockConfig+0x260>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d21d      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c00:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <HAL_RCC_ClockConfig+0x260>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 020f 	bic.w	r2, r3, #15
 8002c08:	4929      	ldr	r1, [pc, #164]	; (8002cb0 <HAL_RCC_ClockConfig+0x260>)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c10:	f7fe fb1e 	bl	8001250 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c18:	f7fe fb1a 	bl	8001250 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e03b      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_RCC_ClockConfig+0x260>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1ed      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4917      	ldr	r1, [pc, #92]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	490f      	ldr	r1, [pc, #60]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c7a:	f000 f825 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c7e:	4601      	mov	r1, r0
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <HAL_RCC_ClockConfig+0x264>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <HAL_RCC_ClockConfig+0x26c>)
 8002c8c:	5cd3      	ldrb	r3, [r2, r3]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	fa21 f303 	lsr.w	r3, r1, r3
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x270>)
 8002c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_RCC_ClockConfig+0x274>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fa8a 	bl	80011b8 <HAL_InitTick>
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	04c4b400 	.word	0x04c4b400
 8002cbc:	0800b1c0 	.word	0x0800b1c0
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cce:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d102      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cda:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e047      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d102      	bne.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cec:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	e03e      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002cf2:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d136      	bne.n	8002d6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	3301      	adds	r3, #1
 8002d14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d10c      	bne.n	8002d36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d1c:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d26:	68d2      	ldr	r2, [r2, #12]
 8002d28:	0a12      	lsrs	r2, r2, #8
 8002d2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	617b      	str	r3, [r7, #20]
      break;
 8002d34:	e00c      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d36:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	4a10      	ldr	r2, [pc, #64]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d40:	68d2      	ldr	r2, [r2, #12]
 8002d42:	0a12      	lsrs	r2, r2, #8
 8002d44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]
      break;
 8002d4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0e5b      	lsrs	r3, r3, #25
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	e001      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d70:	693b      	ldr	r3, [r7, #16]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	00f42400 	.word	0x00f42400
 8002d88:	016e3600 	.word	0x016e3600

08002d8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000000 	.word	0x20000000

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002da8:	f7ff fff0 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dac:	4601      	mov	r1, r0
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	0800b1d0 	.word	0x0800b1d0

08002dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dd4:	f7ff ffda 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dd8:	4601      	mov	r1, r0
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0adb      	lsrs	r3, r3, #11
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021000 	.word	0x40021000
 8002df8:	0800b1d0 	.word	0x0800b1d0

08002dfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	3301      	adds	r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d10c      	bne.n	8002e3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e20:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e2a:	68d2      	ldr	r2, [r2, #12]
 8002e2c:	0a12      	lsrs	r2, r2, #8
 8002e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	617b      	str	r3, [r7, #20]
    break;
 8002e38:	e00c      	b.n	8002e54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e3a:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	0a12      	lsrs	r2, r2, #8
 8002e48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e4c:	fb02 f303 	mul.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    break;
 8002e52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0e5b      	lsrs	r3, r3, #25
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e6e:	687b      	ldr	r3, [r7, #4]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	016e3600 	.word	0x016e3600
 8002e84:	00f42400 	.word	0x00f42400

08002e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e90:	2300      	movs	r3, #0
 8002e92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e94:	2300      	movs	r3, #0
 8002e96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8098 	beq.w	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eaa:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10d      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	4a3f      	ldr	r2, [pc, #252]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec2:	4b3d      	ldr	r3, [pc, #244]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a39      	ldr	r2, [pc, #228]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ede:	f7fe f9b7 	bl	8001250 <HAL_GetTick>
 8002ee2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ee4:	e009      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee6:	f7fe f9b3 	bl	8001250 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d902      	bls.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	74fb      	strb	r3, [r7, #19]
        break;
 8002ef8:	e005      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ef      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d159      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01e      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d019      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f28:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f34:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d016      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fe f973 	bl	8001250 <HAL_GetTick>
 8002f6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe f96f 	bl	8001250 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d902      	bls.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	74fb      	strb	r3, [r7, #19]
            break;
 8002f84:	e006      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ec      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	74bb      	strb	r3, [r7, #18]
 8002fb6:	e005      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc4:	7c7b      	ldrb	r3, [r7, #17]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fca:	4baf      	ldr	r3, [pc, #700]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	4aae      	ldr	r2, [pc, #696]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fe2:	4ba9      	ldr	r3, [pc, #676]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f023 0203 	bic.w	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	49a5      	ldr	r1, [pc, #660]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003004:	4ba0      	ldr	r3, [pc, #640]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f023 020c 	bic.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	499d      	ldr	r1, [pc, #628]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003026:	4b98      	ldr	r3, [pc, #608]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4994      	ldr	r1, [pc, #592]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003048:	4b8f      	ldr	r3, [pc, #572]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	498c      	ldr	r1, [pc, #560]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800306a:	4b87      	ldr	r3, [pc, #540]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	4983      	ldr	r1, [pc, #524]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800308c:	4b7e      	ldr	r3, [pc, #504]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	497b      	ldr	r1, [pc, #492]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ae:	4b76      	ldr	r3, [pc, #472]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	4972      	ldr	r1, [pc, #456]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030d0:	4b6d      	ldr	r3, [pc, #436]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	496a      	ldr	r1, [pc, #424]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f2:	4b65      	ldr	r3, [pc, #404]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	4961      	ldr	r1, [pc, #388]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003114:	4b5c      	ldr	r3, [pc, #368]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003116:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800311a:	f023 0203 	bic.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	4959      	ldr	r1, [pc, #356]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003136:	4b54      	ldr	r3, [pc, #336]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	4950      	ldr	r1, [pc, #320]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d015      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003158:	4b4b      	ldr	r3, [pc, #300]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4948      	ldr	r1, [pc, #288]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003176:	d105      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003178:	4b43      	ldr	r3, [pc, #268]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a42      	ldr	r2, [pc, #264]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800317e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003182:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318c:	2b00      	cmp	r3, #0
 800318e:	d015      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003190:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	493a      	ldr	r1, [pc, #232]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ae:	d105      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b0:	4b35      	ldr	r3, [pc, #212]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4a34      	ldr	r2, [pc, #208]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d015      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031c8:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	492c      	ldr	r1, [pc, #176]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e6:	d105      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e8:	4b27      	ldr	r3, [pc, #156]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4a26      	ldr	r2, [pc, #152]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d015      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	491e      	ldr	r1, [pc, #120]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321e:	d105      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4a18      	ldr	r2, [pc, #96]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800322a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d015      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	4910      	ldr	r1, [pc, #64]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003256:	d105      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800325e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003262:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d018      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	4902      	ldr	r1, [pc, #8]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003286:	e001      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003288:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003294:	d105      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003296:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4a20      	ldr	r2, [pc, #128]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d015      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032bc:	4917      	ldr	r1, [pc, #92]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d105      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	4a12      	ldr	r2, [pc, #72]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d015      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f4:	4909      	ldr	r1, [pc, #36]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003304:	d105      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	4a04      	ldr	r2, [pc, #16]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800330c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003310:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003312:	7cbb      	ldrb	r3, [r7, #18]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d05c      	beq.n	80033ec <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd fcf2 	bl	8000d30 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003354:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <HAL_RTC_Init+0xd8>)
 8003356:	22ca      	movs	r2, #202	; 0xca
 8003358:	625a      	str	r2, [r3, #36]	; 0x24
 800335a:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RTC_Init+0xd8>)
 800335c:	2253      	movs	r2, #83	; 0x53
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fa37 	bl	80037d4 <RTC_EnterInitMode>
 8003366:	4603      	mov	r3, r0
 8003368:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d133      	bne.n	80033d8 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003370:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <HAL_RTC_Init+0xd8>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	4a20      	ldr	r2, [pc, #128]	; (80033f8 <HAL_RTC_Init+0xd8>)
 8003376:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800337a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800337e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HAL_RTC_Init+0xd8>)
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	4319      	orrs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	430b      	orrs	r3, r1
 8003394:	4918      	ldr	r1, [pc, #96]	; (80033f8 <HAL_RTC_Init+0xd8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	4914      	ldr	r1, [pc, #80]	; (80033f8 <HAL_RTC_Init+0xd8>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa46 	bl	800383c <RTC_ExitInitMode>
 80033b0:	4603      	mov	r3, r0
 80033b2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10e      	bne.n	80033d8 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 80033ba:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <HAL_RTC_Init+0xd8>)
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a19      	ldr	r1, [r3, #32]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	4319      	orrs	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	4909      	ldr	r1, [pc, #36]	; (80033f8 <HAL_RTC_Init+0xd8>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033d8:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <HAL_RTC_Init+0xd8>)
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40002800 	.word	0x40002800

080033fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_RTC_SetTime+0x1a>
 8003412:	2302      	movs	r3, #2
 8003414:	e081      	b.n	800351a <HAL_RTC_SetTime+0x11e>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2202      	movs	r2, #2
 8003422:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003426:	4b3f      	ldr	r3, [pc, #252]	; (8003524 <HAL_RTC_SetTime+0x128>)
 8003428:	22ca      	movs	r2, #202	; 0xca
 800342a:	625a      	str	r2, [r3, #36]	; 0x24
 800342c:	4b3d      	ldr	r3, [pc, #244]	; (8003524 <HAL_RTC_SetTime+0x128>)
 800342e:	2253      	movs	r2, #83	; 0x53
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f9ce 	bl	80037d4 <RTC_EnterInitMode>
 8003438:	4603      	mov	r3, r0
 800343a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d15c      	bne.n	80034fc <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d125      	bne.n	8003494 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003448:	4b36      	ldr	r3, [pc, #216]	; (8003524 <HAL_RTC_SetTime+0x128>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fa2a 	bl	80038b8 <RTC_ByteToBcd2>
 8003464:	4603      	mov	r3, r0
 8003466:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	785b      	ldrb	r3, [r3, #1]
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fa23 	bl	80038b8 <RTC_ByteToBcd2>
 8003472:	4603      	mov	r3, r0
 8003474:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003476:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	789b      	ldrb	r3, [r3, #2]
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fa1b 	bl	80038b8 <RTC_ByteToBcd2>
 8003482:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003484:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	78db      	ldrb	r3, [r3, #3]
 800348c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e017      	b.n	80034c4 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_RTC_SetTime+0x128>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2200      	movs	r2, #0
 80034a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	785b      	ldrb	r3, [r3, #1]
 80034b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034b2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034b8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	78db      	ldrb	r3, [r3, #3]
 80034be:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80034c4:	4a17      	ldr	r2, [pc, #92]	; (8003524 <HAL_RTC_SetTime+0x128>)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80034cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80034d0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80034d2:	4b14      	ldr	r3, [pc, #80]	; (8003524 <HAL_RTC_SetTime+0x128>)
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	4a13      	ldr	r2, [pc, #76]	; (8003524 <HAL_RTC_SetTime+0x128>)
 80034d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034dc:	6193      	str	r3, [r2, #24]

    /* Configure the RTC_CR register */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RTC_SetTime+0x128>)
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	68d9      	ldr	r1, [r3, #12]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	430b      	orrs	r3, r1
 80034ec:	490d      	ldr	r1, [pc, #52]	; (8003524 <HAL_RTC_SetTime+0x128>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f9a2 	bl	800383c <RTC_ExitInitMode>
 80034f8:	4603      	mov	r3, r0
 80034fa:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RTC_SetTime+0x128>)
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d103      	bne.n	8003510 <HAL_RTC_SetTime+0x114>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003518:	7cfb      	ldrb	r3, [r7, #19]
}
 800351a:	4618      	mov	r0, r3
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	bd90      	pop	{r4, r7, pc}
 8003522:	bf00      	nop
 8003524:	40002800 	.word	0x40002800

08003528 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_RTC_GetTime+0xb4>)
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800353c:	4b27      	ldr	r3, [pc, #156]	; (80035dc <HAL_RTC_GetTime+0xb4>)
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003548:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_RTC_GetTime+0xb4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003550:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003554:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800357e:	b2da      	uxtb	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	0d9b      	lsrs	r3, r3, #22
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d11a      	bne.n	80035d0 <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f9aa 	bl	80038f8 <RTC_Bcd2ToByte>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	785b      	ldrb	r3, [r3, #1]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f9a1 	bl	80038f8 <RTC_Bcd2ToByte>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	789b      	ldrb	r3, [r3, #2]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f998 	bl	80038f8 <RTC_Bcd2ToByte>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40002800 	.word	0x40002800

080035e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_RTC_SetDate+0x1a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e071      	b.n	80036de <HAL_RTC_SetDate+0xfe>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10e      	bne.n	800362e <HAL_RTC_SetDate+0x4e>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	785b      	ldrb	r3, [r3, #1]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	785b      	ldrb	r3, [r3, #1]
 8003620:	f023 0310 	bic.w	r3, r3, #16
 8003624:	b2db      	uxtb	r3, r3
 8003626:	330a      	adds	r3, #10
 8003628:	b2da      	uxtb	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d11c      	bne.n	800366e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	78db      	ldrb	r3, [r3, #3]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 f93d 	bl	80038b8 <RTC_ByteToBcd2>
 800363e:	4603      	mov	r3, r0
 8003640:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f936 	bl	80038b8 <RTC_ByteToBcd2>
 800364c:	4603      	mov	r3, r0
 800364e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003650:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	789b      	ldrb	r3, [r3, #2]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f92e 	bl	80038b8 <RTC_ByteToBcd2>
 800365c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800365e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	e00e      	b.n	800368c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	78db      	ldrb	r3, [r3, #3]
 8003672:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800367a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003680:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800368c:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_RTC_SetDate+0x108>)
 800368e:	22ca      	movs	r2, #202	; 0xca
 8003690:	625a      	str	r2, [r3, #36]	; 0x24
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <HAL_RTC_SetDate+0x108>)
 8003694:	2253      	movs	r2, #83	; 0x53
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f89b 	bl	80037d4 <RTC_EnterInitMode>
 800369e:	4603      	mov	r3, r0
 80036a0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80036a8:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <HAL_RTC_SetDate+0x108>)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036b4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f8c0 	bl	800383c <RTC_ExitInitMode>
 80036bc:	4603      	mov	r3, r0
 80036be:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_RTC_SetDate+0x108>)
 80036c2:	22ff      	movs	r2, #255	; 0xff
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d103      	bne.n	80036d4 <HAL_RTC_SetDate+0xf4>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd90      	pop	{r4, r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40002800 	.word	0x40002800

080036ec <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80036f8:	4b22      	ldr	r3, [pc, #136]	; (8003784 <HAL_RTC_GetDate+0x98>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003700:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003704:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	b2da      	uxtb	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	0b5b      	lsrs	r3, r3, #13
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11a      	bne.n	800377a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	78db      	ldrb	r3, [r3, #3]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f8d5 	bl	80038f8 <RTC_Bcd2ToByte>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f8cc 	bl	80038f8 <RTC_Bcd2ToByte>
 8003760:	4603      	mov	r3, r0
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	789b      	ldrb	r3, [r3, #2]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f8c3 	bl	80038f8 <RTC_Bcd2ToByte>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40002800 	.word	0x40002800

08003788 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_RTC_WaitForSynchro+0x48>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <HAL_RTC_WaitForSynchro+0x48>)
 8003796:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 800379a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800379c:	f7fd fd58 	bl	8001250 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80037a2:	e009      	b.n	80037b8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037a4:	f7fd fd54 	bl	8001250 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037b2:	d901      	bls.n	80037b8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e006      	b.n	80037c6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RTC_WaitForSynchro+0x48>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ef      	beq.n	80037a4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40002800 	.word	0x40002800

080037d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80037e0:	4b15      	ldr	r3, [pc, #84]	; (8003838 <RTC_EnterInitMode+0x64>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d120      	bne.n	800382e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <RTC_EnterInitMode+0x64>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a11      	ldr	r2, [pc, #68]	; (8003838 <RTC_EnterInitMode+0x64>)
 80037f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80037f8:	f7fd fd2a 	bl	8001250 <HAL_GetTick>
 80037fc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80037fe:	e00d      	b.n	800381c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003800:	f7fd fd26 	bl	8001250 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800380e:	d905      	bls.n	800381c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2203      	movs	r2, #3
 8003818:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <RTC_EnterInitMode+0x64>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <RTC_EnterInitMode+0x5a>
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b03      	cmp	r3, #3
 800382c:	d1e8      	bne.n	8003800 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40002800 	.word	0x40002800

0800383c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <RTC_ExitInitMode+0x78>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <RTC_ExitInitMode+0x78>)
 800384e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003852:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <RTC_ExitInitMode+0x78>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10c      	bne.n	800387a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff91 	bl	8003788 <HAL_RTC_WaitForSynchro>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01e      	beq.n	80038aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2203      	movs	r2, #3
 8003870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e017      	b.n	80038aa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800387a:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <RTC_ExitInitMode+0x78>)
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	4a0d      	ldr	r2, [pc, #52]	; (80038b4 <RTC_ExitInitMode+0x78>)
 8003880:	f023 0320 	bic.w	r3, r3, #32
 8003884:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ff7e 	bl	8003788 <HAL_RTC_WaitForSynchro>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2203      	movs	r2, #3
 8003896:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <RTC_ExitInitMode+0x78>)
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <RTC_ExitInitMode+0x78>)
 80038a4:	f043 0320 	orr.w	r3, r3, #32
 80038a8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40002800 	.word	0x40002800

080038b8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80038ca:	e005      	b.n	80038d8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3301      	adds	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	3b0a      	subs	r3, #10
 80038d6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80038d8:	7afb      	ldrb	r3, [r7, #11]
 80038da:	2b09      	cmp	r3, #9
 80038dc:	d8f6      	bhi.n	80038cc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	7afb      	ldrb	r3, [r7, #11]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	b2db      	uxtb	r3, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4413      	add	r3, r2
 8003922:	b2db      	uxtb	r3, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e084      	b.n	8003a4c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7fd fa41 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003978:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003982:	d902      	bls.n	800398a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	e002      	b.n	8003990 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800398a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800398e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003998:	d007      	beq.n	80039aa <HAL_SPI_Init+0x7a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039ba:	d903      	bls.n	80039c4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
 80039c2:	e002      	b.n	80039ca <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	ea42 0103 	orr.w	r1, r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f003 0204 	and.w	r2, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	ea42 0103 	orr.w	r1, r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_SPI_Transmit+0x22>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e150      	b.n	8003d18 <HAL_SPI_Transmit+0x2c4>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a7e:	f7fd fbe7 	bl	8001250 <HAL_GetTick>
 8003a82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d002      	beq.n	8003a9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
 8003a96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a98:	e135      	b.n	8003d06 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_SPI_Transmit+0x52>
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aaa:	e12c      	b.n	8003d06 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2203      	movs	r2, #3
 8003ab0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	88fa      	ldrh	r2, [r7, #6]
 8003aca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af6:	d107      	bne.n	8003b08 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d007      	beq.n	8003b26 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b2e:	d94b      	bls.n	8003bc8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_SPI_Transmit+0xea>
 8003b38:	8afb      	ldrh	r3, [r7, #22]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d13e      	bne.n	8003bbc <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	881a      	ldrh	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	1c9a      	adds	r2, r3, #2
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b62:	e02b      	b.n	8003bbc <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d112      	bne.n	8003b98 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	881a      	ldrh	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	1c9a      	adds	r2, r3, #2
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b96:	e011      	b.n	8003bbc <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b98:	f7fd fb5a 	bl	8001250 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d803      	bhi.n	8003bb0 <HAL_SPI_Transmit+0x15c>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d102      	bne.n	8003bb6 <HAL_SPI_Transmit+0x162>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d102      	bne.n	8003bbc <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bba:	e0a4      	b.n	8003d06 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ce      	bne.n	8003b64 <HAL_SPI_Transmit+0x110>
 8003bc6:	e07c      	b.n	8003cc2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_SPI_Transmit+0x182>
 8003bd0:	8afb      	ldrh	r3, [r7, #22]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d170      	bne.n	8003cb8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d912      	bls.n	8003c06 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	881a      	ldrh	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	1c9a      	adds	r2, r3, #2
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b02      	subs	r3, #2
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c04:	e058      	b.n	8003cb8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	7812      	ldrb	r2, [r2, #0]
 8003c12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c2c:	e044      	b.n	8003cb8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d12b      	bne.n	8003c94 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d912      	bls.n	8003c6c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	881a      	ldrh	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	1c9a      	adds	r2, r3, #2
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b02      	subs	r3, #2
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c6a:	e025      	b.n	8003cb8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	7812      	ldrb	r2, [r2, #0]
 8003c78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c92:	e011      	b.n	8003cb8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c94:	f7fd fadc 	bl	8001250 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d803      	bhi.n	8003cac <HAL_SPI_Transmit+0x258>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d102      	bne.n	8003cb2 <HAL_SPI_Transmit+0x25e>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cb6:	e026      	b.n	8003d06 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1b5      	bne.n	8003c2e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	6839      	ldr	r1, [r7, #0]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fca2 	bl	8004610 <SPI_EndRxTxTransaction>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	77fb      	strb	r3, [r7, #31]
 8003d02:	e000      	b.n	8003d06 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003d04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d16:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3c:	d112      	bne.n	8003d64 <HAL_SPI_Receive+0x44>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2204      	movs	r2, #4
 8003d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f908 	bl	8003f70 <HAL_SPI_TransmitReceive>
 8003d60:	4603      	mov	r3, r0
 8003d62:	e101      	b.n	8003f68 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_SPI_Receive+0x52>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e0fa      	b.n	8003f68 <HAL_SPI_Receive+0x248>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d7a:	f7fd fa69 	bl	8001250 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d002      	beq.n	8003d92 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d90:	e0e1      	b.n	8003f56 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_SPI_Receive+0x7e>
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003da2:	e0d8      	b.n	8003f56 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2204      	movs	r2, #4
 8003da8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dee:	d908      	bls.n	8003e02 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	e007      	b.n	8003e12 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e10:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1a:	d107      	bne.n	8003e2c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e2a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d007      	beq.n	8003e4a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e48:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e52:	d867      	bhi.n	8003f24 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e54:	e030      	b.n	8003eb8 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d117      	bne.n	8003e94 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f103 020c 	add.w	r2, r3, #12
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003e92:	e011      	b.n	8003eb8 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e94:	f7fd f9dc 	bl	8001250 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d803      	bhi.n	8003eac <HAL_SPI_Receive+0x18c>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d102      	bne.n	8003eb2 <HAL_SPI_Receive+0x192>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003eb6:	e04e      	b.n	8003f56 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1c8      	bne.n	8003e56 <HAL_SPI_Receive+0x136>
 8003ec4:	e034      	b.n	8003f30 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d115      	bne.n	8003f00 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003efe:	e011      	b.n	8003f24 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f00:	f7fd f9a6 	bl	8001250 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d803      	bhi.n	8003f18 <HAL_SPI_Receive+0x1f8>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d102      	bne.n	8003f1e <HAL_SPI_Receive+0x1fe>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f22:	e018      	b.n	8003f56 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ca      	bne.n	8003ec6 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	6839      	ldr	r1, [r7, #0]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fb13 	bl	8004560 <SPI_EndRxTransaction>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
 8003f52:	e000      	b.n	8003f56 <HAL_SPI_Receive+0x236>
  }

error :
 8003f54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x26>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e1fb      	b.n	800438e <HAL_SPI_TransmitReceive+0x41e>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f9e:	f7fd f957 	bl	8001250 <HAL_GetTick>
 8003fa2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003faa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003fb2:	887b      	ldrh	r3, [r7, #2]
 8003fb4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003fb6:	887b      	ldrh	r3, [r7, #2]
 8003fb8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fba:	7efb      	ldrb	r3, [r7, #27]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d00e      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x6e>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc6:	d106      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x66>
 8003fd0:	7efb      	ldrb	r3, [r7, #27]
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d003      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fdc:	e1cd      	b.n	800437a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x80>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x80>
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ff6:	e1c0      	b.n	800437a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b04      	cmp	r3, #4
 8004002:	d003      	beq.n	800400c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2205      	movs	r2, #5
 8004008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	887a      	ldrh	r2, [r7, #2]
 8004032:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	887a      	ldrh	r2, [r7, #2]
 8004038:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800404e:	d802      	bhi.n	8004056 <HAL_SPI_TransmitReceive+0xe6>
 8004050:	8a3b      	ldrh	r3, [r7, #16]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d908      	bls.n	8004068 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	e007      	b.n	8004078 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004076:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d007      	beq.n	8004096 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800409e:	d97c      	bls.n	800419a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_SPI_TransmitReceive+0x13e>
 80040a8:	8a7b      	ldrh	r3, [r7, #18]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d169      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	881a      	ldrh	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d2:	e056      	b.n	8004182 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d11b      	bne.n	800411a <HAL_SPI_TransmitReceive+0x1aa>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d016      	beq.n	800411a <HAL_SPI_TransmitReceive+0x1aa>
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d113      	bne.n	800411a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	1c9a      	adds	r2, r3, #2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d11c      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x1f2>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d016      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	b292      	uxth	r2, r2
 8004140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	1c9a      	adds	r2, r3, #2
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800415e:	2301      	movs	r3, #1
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004162:	f7fd f875 	bl	8001250 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800416e:	429a      	cmp	r2, r3
 8004170:	d807      	bhi.n	8004182 <HAL_SPI_TransmitReceive+0x212>
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d003      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004180:	e0fb      	b.n	800437a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1a3      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x164>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d19d      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x164>
 8004198:	e0df      	b.n	800435a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_SPI_TransmitReceive+0x23a>
 80041a2:	8a7b      	ldrh	r3, [r7, #18]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	f040 80cb 	bne.w	8004340 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d912      	bls.n	80041da <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	881a      	ldrh	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	1c9a      	adds	r2, r3, #2
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b02      	subs	r3, #2
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041d8:	e0b2      	b.n	8004340 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004200:	e09e      	b.n	8004340 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b02      	cmp	r3, #2
 800420e:	d134      	bne.n	800427a <HAL_SPI_TransmitReceive+0x30a>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d02f      	beq.n	800427a <HAL_SPI_TransmitReceive+0x30a>
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	2b01      	cmp	r3, #1
 800421e:	d12c      	bne.n	800427a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d912      	bls.n	8004250 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	1c9a      	adds	r2, r3, #2
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b02      	subs	r3, #2
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800424e:	e012      	b.n	8004276 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	7812      	ldrb	r2, [r2, #0]
 800425c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b01      	cmp	r3, #1
 8004286:	d148      	bne.n	800431a <HAL_SPI_TransmitReceive+0x3aa>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d042      	beq.n	800431a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d923      	bls.n	80042e8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	b292      	uxth	r2, r2
 80042ac:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	1c9a      	adds	r2, r3, #2
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b02      	subs	r3, #2
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d81f      	bhi.n	8004316 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	e016      	b.n	8004316 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f103 020c 	add.w	r2, r3, #12
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004316:	2301      	movs	r3, #1
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800431a:	f7fc ff99 	bl	8001250 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004326:	429a      	cmp	r2, r3
 8004328:	d803      	bhi.n	8004332 <HAL_SPI_TransmitReceive+0x3c2>
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d102      	bne.n	8004338 <HAL_SPI_TransmitReceive+0x3c8>
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	2b00      	cmp	r3, #0
 8004336:	d103      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800433e:	e01c      	b.n	800437a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	f47f af5b 	bne.w	8004202 <HAL_SPI_TransmitReceive+0x292>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	f47f af54 	bne.w	8004202 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f956 	bl	8004610 <SPI_EndRxTxTransaction>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	661a      	str	r2, [r3, #96]	; 0x60
 8004376:	e000      	b.n	800437a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004378:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800438a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800438e:	4618      	mov	r0, r3
 8004390:	3728      	adds	r7, #40	; 0x28
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043a4:	b2db      	uxtb	r3, r3
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	603b      	str	r3, [r7, #0]
 80043be:	4613      	mov	r3, r2
 80043c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043c2:	e04c      	b.n	800445e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d048      	beq.n	800445e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80043cc:	f7fc ff40 	bl	8001250 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d902      	bls.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d13d      	bne.n	800445e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fa:	d111      	bne.n	8004420 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004404:	d004      	beq.n	8004410 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440e:	d107      	bne.n	8004420 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004428:	d10f      	bne.n	800444a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004448:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e00f      	b.n	800447e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4013      	ands	r3, r2
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	bf0c      	ite	eq
 800446e:	2301      	moveq	r3, #1
 8004470:	2300      	movne	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	429a      	cmp	r2, r3
 800447a:	d1a3      	bne.n	80043c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004494:	e057      	b.n	8004546 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800449c:	d106      	bne.n	80044ac <SPI_WaitFifoStateUntilTimeout+0x26>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d103      	bne.n	80044ac <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b2:	d048      	beq.n	8004546 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044b4:	f7fc fecc 	bl	8001250 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d902      	bls.n	80044ca <SPI_WaitFifoStateUntilTimeout+0x44>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d13d      	bne.n	8004546 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044e2:	d111      	bne.n	8004508 <SPI_WaitFifoStateUntilTimeout+0x82>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ec:	d004      	beq.n	80044f8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f6:	d107      	bne.n	8004508 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004506:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004510:	d10f      	bne.n	8004532 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004530:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e008      	b.n	8004558 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4013      	ands	r3, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d19f      	bne.n	8004496 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004574:	d111      	bne.n	800459a <SPI_EndRxTransaction+0x3a>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457e:	d004      	beq.n	800458a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004588:	d107      	bne.n	800459a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004598:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2200      	movs	r2, #0
 80045a2:	2180      	movs	r1, #128	; 0x80
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff ff04 	bl	80043b2 <SPI_WaitFlagStateUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e023      	b.n	8004608 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c8:	d11d      	bne.n	8004606 <SPI_EndRxTransaction+0xa6>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d2:	d004      	beq.n	80045de <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045dc:	d113      	bne.n	8004606 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff ff4b 	bl	8004486 <SPI_WaitFifoStateUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fa:	f043 0220 	orr.w	r2, r3, #32
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e000      	b.n	8004608 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f7ff ff2c 	bl	8004486 <SPI_WaitFifoStateUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e027      	b.n	8004694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2200      	movs	r2, #0
 800464c:	2180      	movs	r1, #128	; 0x80
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff feaf 	bl	80043b2 <SPI_WaitFlagStateUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465e:	f043 0220 	orr.w	r2, r3, #32
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e014      	b.n	8004694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2200      	movs	r2, #0
 8004672:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7ff ff05 	bl	8004486 <SPI_WaitFifoStateUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	f043 0220 	orr.w	r2, r3, #32
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e000      	b.n	8004694 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e01d      	b.n	80046ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc fc8e 	bl	8000fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f000 f9dc 	bl	8004a98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <HAL_TIM_Base_Start_IT+0x50>)
 8004714:	4013      	ands	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b06      	cmp	r3, #6
 800471c:	d00b      	beq.n	8004736 <HAL_TIM_Base_Start_IT+0x42>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004724:	d007      	beq.n	8004736 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	00010007 	.word	0x00010007

08004748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d122      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b02      	cmp	r3, #2
 800476a:	d11b      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0202 	mvn.w	r2, #2
 8004774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f965 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f957 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f968 	bl	8004a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d122      	bne.n	80047f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d11b      	bne.n	80047f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0204 	mvn.w	r2, #4
 80047c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2202      	movs	r2, #2
 80047ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f93b 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 80047e4:	e005      	b.n	80047f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f92d 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f93e 	bl	8004a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b08      	cmp	r3, #8
 8004804:	d122      	bne.n	800484c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b08      	cmp	r3, #8
 8004812:	d11b      	bne.n	800484c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0208 	mvn.w	r2, #8
 800481c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2204      	movs	r2, #4
 8004822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f911 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 8004838:	e005      	b.n	8004846 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f903 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f914 	bl	8004a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b10      	cmp	r3, #16
 8004858:	d122      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b10      	cmp	r3, #16
 8004866:	d11b      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0210 	mvn.w	r2, #16
 8004870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2208      	movs	r2, #8
 8004876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f8e7 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 800488c:	e005      	b.n	800489a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f8d9 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f8ea 	bl	8004a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10e      	bne.n	80048cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d107      	bne.n	80048cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0201 	mvn.w	r2, #1
 80048c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc f8ae 	bl	8000a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d10e      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d107      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f982 	bl	8004bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004906:	d10e      	bne.n	8004926 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d107      	bne.n	8004926 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800491e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f975 	bl	8004c10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d10e      	bne.n	8004952 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d107      	bne.n	8004952 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800494a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f898 	bl	8004a82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b20      	cmp	r3, #32
 800495e:	d10e      	bne.n	800497e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b20      	cmp	r3, #32
 800496c:	d107      	bne.n	800497e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f06f 0220 	mvn.w	r2, #32
 8004976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f935 	bl	8004be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800498c:	d10f      	bne.n	80049ae <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499c:	d107      	bne.n	80049ae <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80049a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f93b 	bl	8004c24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049bc:	d10f      	bne.n	80049de <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049cc:	d107      	bne.n	80049de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f92d 	bl	8004c38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ec:	d10f      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049fc:	d107      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f91f 	bl	8004c4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a1c:	d10f      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a2c:	d107      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f911 	bl	8004c60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a46      	ldr	r2, [pc, #280]	; (8004bc4 <TIM_Base_SetConfig+0x12c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d017      	beq.n	8004ae0 <TIM_Base_SetConfig+0x48>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab6:	d013      	beq.n	8004ae0 <TIM_Base_SetConfig+0x48>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a43      	ldr	r2, [pc, #268]	; (8004bc8 <TIM_Base_SetConfig+0x130>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00f      	beq.n	8004ae0 <TIM_Base_SetConfig+0x48>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a42      	ldr	r2, [pc, #264]	; (8004bcc <TIM_Base_SetConfig+0x134>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00b      	beq.n	8004ae0 <TIM_Base_SetConfig+0x48>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a41      	ldr	r2, [pc, #260]	; (8004bd0 <TIM_Base_SetConfig+0x138>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d007      	beq.n	8004ae0 <TIM_Base_SetConfig+0x48>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a40      	ldr	r2, [pc, #256]	; (8004bd4 <TIM_Base_SetConfig+0x13c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_Base_SetConfig+0x48>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a3f      	ldr	r2, [pc, #252]	; (8004bd8 <TIM_Base_SetConfig+0x140>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d108      	bne.n	8004af2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a33      	ldr	r2, [pc, #204]	; (8004bc4 <TIM_Base_SetConfig+0x12c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d023      	beq.n	8004b42 <TIM_Base_SetConfig+0xaa>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b00:	d01f      	beq.n	8004b42 <TIM_Base_SetConfig+0xaa>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a30      	ldr	r2, [pc, #192]	; (8004bc8 <TIM_Base_SetConfig+0x130>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d01b      	beq.n	8004b42 <TIM_Base_SetConfig+0xaa>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2f      	ldr	r2, [pc, #188]	; (8004bcc <TIM_Base_SetConfig+0x134>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d017      	beq.n	8004b42 <TIM_Base_SetConfig+0xaa>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2e      	ldr	r2, [pc, #184]	; (8004bd0 <TIM_Base_SetConfig+0x138>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <TIM_Base_SetConfig+0xaa>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a2d      	ldr	r2, [pc, #180]	; (8004bd4 <TIM_Base_SetConfig+0x13c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00f      	beq.n	8004b42 <TIM_Base_SetConfig+0xaa>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a2d      	ldr	r2, [pc, #180]	; (8004bdc <TIM_Base_SetConfig+0x144>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00b      	beq.n	8004b42 <TIM_Base_SetConfig+0xaa>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a2c      	ldr	r2, [pc, #176]	; (8004be0 <TIM_Base_SetConfig+0x148>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <TIM_Base_SetConfig+0xaa>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a2b      	ldr	r2, [pc, #172]	; (8004be4 <TIM_Base_SetConfig+0x14c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_Base_SetConfig+0xaa>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a26      	ldr	r2, [pc, #152]	; (8004bd8 <TIM_Base_SetConfig+0x140>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d108      	bne.n	8004b54 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a12      	ldr	r2, [pc, #72]	; (8004bc4 <TIM_Base_SetConfig+0x12c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <TIM_Base_SetConfig+0x110>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <TIM_Base_SetConfig+0x13c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00f      	beq.n	8004ba8 <TIM_Base_SetConfig+0x110>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <TIM_Base_SetConfig+0x144>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <TIM_Base_SetConfig+0x110>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <TIM_Base_SetConfig+0x148>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <TIM_Base_SetConfig+0x110>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a12      	ldr	r2, [pc, #72]	; (8004be4 <TIM_Base_SetConfig+0x14c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_Base_SetConfig+0x110>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a0d      	ldr	r2, [pc, #52]	; (8004bd8 <TIM_Base_SetConfig+0x140>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d103      	bne.n	8004bb0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	615a      	str	r2, [r3, #20]
}
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40000c00 	.word	0x40000c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40015000 	.word	0x40015000
 8004bdc:	40014000 	.word	0x40014000
 8004be0:	40014400 	.word	0x40014400
 8004be4:	40014800 	.word	0x40014800

08004be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e042      	b.n	8004d0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fc fa09 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2224      	movs	r2, #36	; 0x24
 8004ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f82e 	bl	8004d18 <UART_SetConfig>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e022      	b.n	8004d0c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f001 fa10 	bl	80060f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f001 fa97 	bl	8006238 <UART_CheckIdleState>
 8004d0a:	4603      	mov	r3, r0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	0000      	movs	r0, r0
	...

08004d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004d1c:	b08a      	sub	sp, #40	; 0x28
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4baa      	ldr	r3, [pc, #680]	; (8005000 <UART_SetConfig+0x2e8>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a9f      	ldr	r2, [pc, #636]	; (8005004 <UART_SetConfig+0x2ec>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d90:	4313      	orrs	r3, r2
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	f023 010f 	bic.w	r1, r3, #15
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a90      	ldr	r2, [pc, #576]	; (8005008 <UART_SetConfig+0x2f0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d126      	bne.n	8004e1a <UART_SetConfig+0x102>
 8004dcc:	4b8f      	ldr	r3, [pc, #572]	; (800500c <UART_SetConfig+0x2f4>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d81a      	bhi.n	8004e10 <UART_SetConfig+0xf8>
 8004dda:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <UART_SetConfig+0xc8>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004df1 	.word	0x08004df1
 8004de4:	08004e01 	.word	0x08004e01
 8004de8:	08004df9 	.word	0x08004df9
 8004dec:	08004e09 	.word	0x08004e09
 8004df0:	2301      	movs	r3, #1
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df6:	e116      	b.n	8005026 <UART_SetConfig+0x30e>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfe:	e112      	b.n	8005026 <UART_SetConfig+0x30e>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e06:	e10e      	b.n	8005026 <UART_SetConfig+0x30e>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e10a      	b.n	8005026 <UART_SetConfig+0x30e>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e16:	bf00      	nop
 8004e18:	e105      	b.n	8005026 <UART_SetConfig+0x30e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a7c      	ldr	r2, [pc, #496]	; (8005010 <UART_SetConfig+0x2f8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d138      	bne.n	8004e96 <UART_SetConfig+0x17e>
 8004e24:	4b79      	ldr	r3, [pc, #484]	; (800500c <UART_SetConfig+0x2f4>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	d82c      	bhi.n	8004e8c <UART_SetConfig+0x174>
 8004e32:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0x120>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004e6d 	.word	0x08004e6d
 8004e3c:	08004e8d 	.word	0x08004e8d
 8004e40:	08004e8d 	.word	0x08004e8d
 8004e44:	08004e8d 	.word	0x08004e8d
 8004e48:	08004e7d 	.word	0x08004e7d
 8004e4c:	08004e8d 	.word	0x08004e8d
 8004e50:	08004e8d 	.word	0x08004e8d
 8004e54:	08004e8d 	.word	0x08004e8d
 8004e58:	08004e75 	.word	0x08004e75
 8004e5c:	08004e8d 	.word	0x08004e8d
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e85 	.word	0x08004e85
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e72:	e0d8      	b.n	8005026 <UART_SetConfig+0x30e>
 8004e74:	2302      	movs	r3, #2
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7a:	e0d4      	b.n	8005026 <UART_SetConfig+0x30e>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e82:	e0d0      	b.n	8005026 <UART_SetConfig+0x30e>
 8004e84:	2308      	movs	r3, #8
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8a:	e0cc      	b.n	8005026 <UART_SetConfig+0x30e>
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e92:	bf00      	nop
 8004e94:	e0c7      	b.n	8005026 <UART_SetConfig+0x30e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a5e      	ldr	r2, [pc, #376]	; (8005014 <UART_SetConfig+0x2fc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d125      	bne.n	8004eec <UART_SetConfig+0x1d4>
 8004ea0:	4b5a      	ldr	r3, [pc, #360]	; (800500c <UART_SetConfig+0x2f4>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d011      	beq.n	8004ed2 <UART_SetConfig+0x1ba>
 8004eae:	2b10      	cmp	r3, #16
 8004eb0:	d802      	bhi.n	8004eb8 <UART_SetConfig+0x1a0>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <UART_SetConfig+0x1aa>
 8004eb6:	e014      	b.n	8004ee2 <UART_SetConfig+0x1ca>
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d006      	beq.n	8004eca <UART_SetConfig+0x1b2>
 8004ebc:	2b30      	cmp	r3, #48	; 0x30
 8004ebe:	d00c      	beq.n	8004eda <UART_SetConfig+0x1c2>
 8004ec0:	e00f      	b.n	8004ee2 <UART_SetConfig+0x1ca>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec8:	e0ad      	b.n	8005026 <UART_SetConfig+0x30e>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed0:	e0a9      	b.n	8005026 <UART_SetConfig+0x30e>
 8004ed2:	2304      	movs	r3, #4
 8004ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed8:	e0a5      	b.n	8005026 <UART_SetConfig+0x30e>
 8004eda:	2308      	movs	r3, #8
 8004edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee0:	e0a1      	b.n	8005026 <UART_SetConfig+0x30e>
 8004ee2:	2310      	movs	r3, #16
 8004ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee8:	bf00      	nop
 8004eea:	e09c      	b.n	8005026 <UART_SetConfig+0x30e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a49      	ldr	r2, [pc, #292]	; (8005018 <UART_SetConfig+0x300>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d125      	bne.n	8004f42 <UART_SetConfig+0x22a>
 8004ef6:	4b45      	ldr	r3, [pc, #276]	; (800500c <UART_SetConfig+0x2f4>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d011      	beq.n	8004f28 <UART_SetConfig+0x210>
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d802      	bhi.n	8004f0e <UART_SetConfig+0x1f6>
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <UART_SetConfig+0x200>
 8004f0c:	e014      	b.n	8004f38 <UART_SetConfig+0x220>
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d006      	beq.n	8004f20 <UART_SetConfig+0x208>
 8004f12:	2bc0      	cmp	r3, #192	; 0xc0
 8004f14:	d00c      	beq.n	8004f30 <UART_SetConfig+0x218>
 8004f16:	e00f      	b.n	8004f38 <UART_SetConfig+0x220>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1e:	e082      	b.n	8005026 <UART_SetConfig+0x30e>
 8004f20:	2302      	movs	r3, #2
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f26:	e07e      	b.n	8005026 <UART_SetConfig+0x30e>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2e:	e07a      	b.n	8005026 <UART_SetConfig+0x30e>
 8004f30:	2308      	movs	r3, #8
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f36:	e076      	b.n	8005026 <UART_SetConfig+0x30e>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f3e:	bf00      	nop
 8004f40:	e071      	b.n	8005026 <UART_SetConfig+0x30e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a35      	ldr	r2, [pc, #212]	; (800501c <UART_SetConfig+0x304>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d129      	bne.n	8004fa0 <UART_SetConfig+0x288>
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	; (800500c <UART_SetConfig+0x2f4>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5a:	d014      	beq.n	8004f86 <UART_SetConfig+0x26e>
 8004f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f60:	d802      	bhi.n	8004f68 <UART_SetConfig+0x250>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <UART_SetConfig+0x25e>
 8004f66:	e016      	b.n	8004f96 <UART_SetConfig+0x27e>
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6c:	d007      	beq.n	8004f7e <UART_SetConfig+0x266>
 8004f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f72:	d00c      	beq.n	8004f8e <UART_SetConfig+0x276>
 8004f74:	e00f      	b.n	8004f96 <UART_SetConfig+0x27e>
 8004f76:	2300      	movs	r3, #0
 8004f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7c:	e053      	b.n	8005026 <UART_SetConfig+0x30e>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f84:	e04f      	b.n	8005026 <UART_SetConfig+0x30e>
 8004f86:	2304      	movs	r3, #4
 8004f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8c:	e04b      	b.n	8005026 <UART_SetConfig+0x30e>
 8004f8e:	2308      	movs	r3, #8
 8004f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f94:	e047      	b.n	8005026 <UART_SetConfig+0x30e>
 8004f96:	2310      	movs	r3, #16
 8004f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9c:	bf00      	nop
 8004f9e:	e042      	b.n	8005026 <UART_SetConfig+0x30e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a17      	ldr	r2, [pc, #92]	; (8005004 <UART_SetConfig+0x2ec>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d13a      	bne.n	8005020 <UART_SetConfig+0x308>
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <UART_SetConfig+0x2f4>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb8:	d014      	beq.n	8004fe4 <UART_SetConfig+0x2cc>
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fbe:	d802      	bhi.n	8004fc6 <UART_SetConfig+0x2ae>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <UART_SetConfig+0x2bc>
 8004fc4:	e016      	b.n	8004ff4 <UART_SetConfig+0x2dc>
 8004fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fca:	d007      	beq.n	8004fdc <UART_SetConfig+0x2c4>
 8004fcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fd0:	d00c      	beq.n	8004fec <UART_SetConfig+0x2d4>
 8004fd2:	e00f      	b.n	8004ff4 <UART_SetConfig+0x2dc>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fda:	e024      	b.n	8005026 <UART_SetConfig+0x30e>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe2:	e020      	b.n	8005026 <UART_SetConfig+0x30e>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fea:	e01c      	b.n	8005026 <UART_SetConfig+0x30e>
 8004fec:	2308      	movs	r3, #8
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff2:	e018      	b.n	8005026 <UART_SetConfig+0x30e>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffa:	bf00      	nop
 8004ffc:	e013      	b.n	8005026 <UART_SetConfig+0x30e>
 8004ffe:	bf00      	nop
 8005000:	cfff69f3 	.word	0xcfff69f3
 8005004:	40008000 	.word	0x40008000
 8005008:	40013800 	.word	0x40013800
 800500c:	40021000 	.word	0x40021000
 8005010:	40004400 	.word	0x40004400
 8005014:	40004800 	.word	0x40004800
 8005018:	40004c00 	.word	0x40004c00
 800501c:	40005000 	.word	0x40005000
 8005020:	2310      	movs	r3, #16
 8005022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a86      	ldr	r2, [pc, #536]	; (8005244 <UART_SetConfig+0x52c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	f040 8422 	bne.w	8005876 <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005036:	2b08      	cmp	r3, #8
 8005038:	f200 8173 	bhi.w	8005322 <UART_SetConfig+0x60a>
 800503c:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <UART_SetConfig+0x32c>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	08005069 	.word	0x08005069
 8005048:	08005323 	.word	0x08005323
 800504c:	0800510b 	.word	0x0800510b
 8005050:	08005323 	.word	0x08005323
 8005054:	080051a3 	.word	0x080051a3
 8005058:	08005323 	.word	0x08005323
 800505c:	08005323 	.word	0x08005323
 8005060:	08005323 	.word	0x08005323
 8005064:	08005275 	.word	0x08005275
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005068:	f7fd fe9c 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 800506c:	4602      	mov	r2, r0
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	d044      	beq.n	8005100 <UART_SetConfig+0x3e8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	2b01      	cmp	r3, #1
 800507c:	d03e      	beq.n	80050fc <UART_SetConfig+0x3e4>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	2b02      	cmp	r3, #2
 8005084:	d038      	beq.n	80050f8 <UART_SetConfig+0x3e0>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2b03      	cmp	r3, #3
 800508c:	d032      	beq.n	80050f4 <UART_SetConfig+0x3dc>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	2b04      	cmp	r3, #4
 8005094:	d02c      	beq.n	80050f0 <UART_SetConfig+0x3d8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	2b05      	cmp	r3, #5
 800509c:	d026      	beq.n	80050ec <UART_SetConfig+0x3d4>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	2b06      	cmp	r3, #6
 80050a4:	d020      	beq.n	80050e8 <UART_SetConfig+0x3d0>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	2b07      	cmp	r3, #7
 80050ac:	d01a      	beq.n	80050e4 <UART_SetConfig+0x3cc>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d014      	beq.n	80050e0 <UART_SetConfig+0x3c8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	2b09      	cmp	r3, #9
 80050bc:	d00e      	beq.n	80050dc <UART_SetConfig+0x3c4>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	2b0a      	cmp	r3, #10
 80050c4:	d008      	beq.n	80050d8 <UART_SetConfig+0x3c0>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	2b0b      	cmp	r3, #11
 80050cc:	d102      	bne.n	80050d4 <UART_SetConfig+0x3bc>
 80050ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d2:	e016      	b.n	8005102 <UART_SetConfig+0x3ea>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e014      	b.n	8005102 <UART_SetConfig+0x3ea>
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	e012      	b.n	8005102 <UART_SetConfig+0x3ea>
 80050dc:	2340      	movs	r3, #64	; 0x40
 80050de:	e010      	b.n	8005102 <UART_SetConfig+0x3ea>
 80050e0:	2320      	movs	r3, #32
 80050e2:	e00e      	b.n	8005102 <UART_SetConfig+0x3ea>
 80050e4:	2310      	movs	r3, #16
 80050e6:	e00c      	b.n	8005102 <UART_SetConfig+0x3ea>
 80050e8:	230c      	movs	r3, #12
 80050ea:	e00a      	b.n	8005102 <UART_SetConfig+0x3ea>
 80050ec:	230a      	movs	r3, #10
 80050ee:	e008      	b.n	8005102 <UART_SetConfig+0x3ea>
 80050f0:	2308      	movs	r3, #8
 80050f2:	e006      	b.n	8005102 <UART_SetConfig+0x3ea>
 80050f4:	2306      	movs	r3, #6
 80050f6:	e004      	b.n	8005102 <UART_SetConfig+0x3ea>
 80050f8:	2304      	movs	r3, #4
 80050fa:	e002      	b.n	8005102 <UART_SetConfig+0x3ea>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e000      	b.n	8005102 <UART_SetConfig+0x3ea>
 8005100:	2301      	movs	r3, #1
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	617b      	str	r3, [r7, #20]
        break;
 8005108:	e10e      	b.n	8005328 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	d044      	beq.n	800519c <UART_SetConfig+0x484>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	2b01      	cmp	r3, #1
 8005118:	d03e      	beq.n	8005198 <UART_SetConfig+0x480>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	2b02      	cmp	r3, #2
 8005120:	d038      	beq.n	8005194 <UART_SetConfig+0x47c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	2b03      	cmp	r3, #3
 8005128:	d032      	beq.n	8005190 <UART_SetConfig+0x478>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b04      	cmp	r3, #4
 8005130:	d02c      	beq.n	800518c <UART_SetConfig+0x474>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	2b05      	cmp	r3, #5
 8005138:	d026      	beq.n	8005188 <UART_SetConfig+0x470>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	2b06      	cmp	r3, #6
 8005140:	d020      	beq.n	8005184 <UART_SetConfig+0x46c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	2b07      	cmp	r3, #7
 8005148:	d01a      	beq.n	8005180 <UART_SetConfig+0x468>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	2b08      	cmp	r3, #8
 8005150:	d014      	beq.n	800517c <UART_SetConfig+0x464>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2b09      	cmp	r3, #9
 8005158:	d00e      	beq.n	8005178 <UART_SetConfig+0x460>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2b0a      	cmp	r3, #10
 8005160:	d008      	beq.n	8005174 <UART_SetConfig+0x45c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b0b      	cmp	r3, #11
 8005168:	d102      	bne.n	8005170 <UART_SetConfig+0x458>
 800516a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800516e:	e016      	b.n	800519e <UART_SetConfig+0x486>
 8005170:	4b35      	ldr	r3, [pc, #212]	; (8005248 <UART_SetConfig+0x530>)
 8005172:	e014      	b.n	800519e <UART_SetConfig+0x486>
 8005174:	4b35      	ldr	r3, [pc, #212]	; (800524c <UART_SetConfig+0x534>)
 8005176:	e012      	b.n	800519e <UART_SetConfig+0x486>
 8005178:	4b35      	ldr	r3, [pc, #212]	; (8005250 <UART_SetConfig+0x538>)
 800517a:	e010      	b.n	800519e <UART_SetConfig+0x486>
 800517c:	4b35      	ldr	r3, [pc, #212]	; (8005254 <UART_SetConfig+0x53c>)
 800517e:	e00e      	b.n	800519e <UART_SetConfig+0x486>
 8005180:	4b35      	ldr	r3, [pc, #212]	; (8005258 <UART_SetConfig+0x540>)
 8005182:	e00c      	b.n	800519e <UART_SetConfig+0x486>
 8005184:	4b35      	ldr	r3, [pc, #212]	; (800525c <UART_SetConfig+0x544>)
 8005186:	e00a      	b.n	800519e <UART_SetConfig+0x486>
 8005188:	4b35      	ldr	r3, [pc, #212]	; (8005260 <UART_SetConfig+0x548>)
 800518a:	e008      	b.n	800519e <UART_SetConfig+0x486>
 800518c:	4b35      	ldr	r3, [pc, #212]	; (8005264 <UART_SetConfig+0x54c>)
 800518e:	e006      	b.n	800519e <UART_SetConfig+0x486>
 8005190:	4b35      	ldr	r3, [pc, #212]	; (8005268 <UART_SetConfig+0x550>)
 8005192:	e004      	b.n	800519e <UART_SetConfig+0x486>
 8005194:	4b35      	ldr	r3, [pc, #212]	; (800526c <UART_SetConfig+0x554>)
 8005196:	e002      	b.n	800519e <UART_SetConfig+0x486>
 8005198:	4b35      	ldr	r3, [pc, #212]	; (8005270 <UART_SetConfig+0x558>)
 800519a:	e000      	b.n	800519e <UART_SetConfig+0x486>
 800519c:	4b2a      	ldr	r3, [pc, #168]	; (8005248 <UART_SetConfig+0x530>)
 800519e:	617b      	str	r3, [r7, #20]
        break;
 80051a0:	e0c2      	b.n	8005328 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80051a2:	f7fd fd91 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 80051a6:	4602      	mov	r2, r0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d044      	beq.n	800523a <UART_SetConfig+0x522>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d03e      	beq.n	8005236 <UART_SetConfig+0x51e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d038      	beq.n	8005232 <UART_SetConfig+0x51a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d032      	beq.n	800522e <UART_SetConfig+0x516>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d02c      	beq.n	800522a <UART_SetConfig+0x512>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	2b05      	cmp	r3, #5
 80051d6:	d026      	beq.n	8005226 <UART_SetConfig+0x50e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	2b06      	cmp	r3, #6
 80051de:	d020      	beq.n	8005222 <UART_SetConfig+0x50a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	2b07      	cmp	r3, #7
 80051e6:	d01a      	beq.n	800521e <UART_SetConfig+0x506>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d014      	beq.n	800521a <UART_SetConfig+0x502>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2b09      	cmp	r3, #9
 80051f6:	d00e      	beq.n	8005216 <UART_SetConfig+0x4fe>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	2b0a      	cmp	r3, #10
 80051fe:	d008      	beq.n	8005212 <UART_SetConfig+0x4fa>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b0b      	cmp	r3, #11
 8005206:	d102      	bne.n	800520e <UART_SetConfig+0x4f6>
 8005208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800520c:	e016      	b.n	800523c <UART_SetConfig+0x524>
 800520e:	2301      	movs	r3, #1
 8005210:	e014      	b.n	800523c <UART_SetConfig+0x524>
 8005212:	2380      	movs	r3, #128	; 0x80
 8005214:	e012      	b.n	800523c <UART_SetConfig+0x524>
 8005216:	2340      	movs	r3, #64	; 0x40
 8005218:	e010      	b.n	800523c <UART_SetConfig+0x524>
 800521a:	2320      	movs	r3, #32
 800521c:	e00e      	b.n	800523c <UART_SetConfig+0x524>
 800521e:	2310      	movs	r3, #16
 8005220:	e00c      	b.n	800523c <UART_SetConfig+0x524>
 8005222:	230c      	movs	r3, #12
 8005224:	e00a      	b.n	800523c <UART_SetConfig+0x524>
 8005226:	230a      	movs	r3, #10
 8005228:	e008      	b.n	800523c <UART_SetConfig+0x524>
 800522a:	2308      	movs	r3, #8
 800522c:	e006      	b.n	800523c <UART_SetConfig+0x524>
 800522e:	2306      	movs	r3, #6
 8005230:	e004      	b.n	800523c <UART_SetConfig+0x524>
 8005232:	2304      	movs	r3, #4
 8005234:	e002      	b.n	800523c <UART_SetConfig+0x524>
 8005236:	2302      	movs	r3, #2
 8005238:	e000      	b.n	800523c <UART_SetConfig+0x524>
 800523a:	2301      	movs	r3, #1
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	617b      	str	r3, [r7, #20]
        break;
 8005242:	e071      	b.n	8005328 <UART_SetConfig+0x610>
 8005244:	40008000 	.word	0x40008000
 8005248:	00f42400 	.word	0x00f42400
 800524c:	0001e848 	.word	0x0001e848
 8005250:	0003d090 	.word	0x0003d090
 8005254:	0007a120 	.word	0x0007a120
 8005258:	000f4240 	.word	0x000f4240
 800525c:	00145855 	.word	0x00145855
 8005260:	00186a00 	.word	0x00186a00
 8005264:	001e8480 	.word	0x001e8480
 8005268:	0028b0aa 	.word	0x0028b0aa
 800526c:	003d0900 	.word	0x003d0900
 8005270:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d04e      	beq.n	800531a <UART_SetConfig+0x602>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	2b01      	cmp	r3, #1
 8005282:	d047      	beq.n	8005314 <UART_SetConfig+0x5fc>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	2b02      	cmp	r3, #2
 800528a:	d040      	beq.n	800530e <UART_SetConfig+0x5f6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	2b03      	cmp	r3, #3
 8005292:	d039      	beq.n	8005308 <UART_SetConfig+0x5f0>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	2b04      	cmp	r3, #4
 800529a:	d032      	beq.n	8005302 <UART_SetConfig+0x5ea>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	2b05      	cmp	r3, #5
 80052a2:	d02b      	beq.n	80052fc <UART_SetConfig+0x5e4>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d024      	beq.n	80052f6 <UART_SetConfig+0x5de>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	2b07      	cmp	r3, #7
 80052b2:	d01d      	beq.n	80052f0 <UART_SetConfig+0x5d8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d016      	beq.n	80052ea <UART_SetConfig+0x5d2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	2b09      	cmp	r3, #9
 80052c2:	d00f      	beq.n	80052e4 <UART_SetConfig+0x5cc>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	2b0a      	cmp	r3, #10
 80052ca:	d008      	beq.n	80052de <UART_SetConfig+0x5c6>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	2b0b      	cmp	r3, #11
 80052d2:	d101      	bne.n	80052d8 <UART_SetConfig+0x5c0>
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	e022      	b.n	800531e <UART_SetConfig+0x606>
 80052d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052dc:	e01f      	b.n	800531e <UART_SetConfig+0x606>
 80052de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052e2:	e01c      	b.n	800531e <UART_SetConfig+0x606>
 80052e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e8:	e019      	b.n	800531e <UART_SetConfig+0x606>
 80052ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ee:	e016      	b.n	800531e <UART_SetConfig+0x606>
 80052f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052f4:	e013      	b.n	800531e <UART_SetConfig+0x606>
 80052f6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80052fa:	e010      	b.n	800531e <UART_SetConfig+0x606>
 80052fc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005300:	e00d      	b.n	800531e <UART_SetConfig+0x606>
 8005302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005306:	e00a      	b.n	800531e <UART_SetConfig+0x606>
 8005308:	f241 5355 	movw	r3, #5461	; 0x1555
 800530c:	e007      	b.n	800531e <UART_SetConfig+0x606>
 800530e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005312:	e004      	b.n	800531e <UART_SetConfig+0x606>
 8005314:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005318:	e001      	b.n	800531e <UART_SetConfig+0x606>
 800531a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800531e:	617b      	str	r3, [r7, #20]
        break;
 8005320:	e002      	b.n	8005328 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	76fb      	strb	r3, [r7, #27]
        break;
 8005326:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 86b7 	beq.w	800609e <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	4413      	add	r3, r2
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	429a      	cmp	r2, r3
 800533e:	d305      	bcc.n	800534c <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	429a      	cmp	r2, r3
 800534a:	d903      	bls.n	8005354 <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	76fb      	strb	r3, [r7, #27]
 8005350:	f000 bea5 	b.w	800609e <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 8005354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005358:	2b08      	cmp	r3, #8
 800535a:	f200 8277 	bhi.w	800584c <UART_SetConfig+0xb34>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0x64c>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005389 	.word	0x08005389
 8005368:	0800584d 	.word	0x0800584d
 800536c:	080054c7 	.word	0x080054c7
 8005370:	0800584d 	.word	0x0800584d
 8005374:	080055bd 	.word	0x080055bd
 8005378:	0800584d 	.word	0x0800584d
 800537c:	0800584d 	.word	0x0800584d
 8005380:	0800584d 	.word	0x0800584d
 8005384:	080056fb 	.word	0x080056fb
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005388:	f7fd fd0c 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 800538c:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	4618      	mov	r0, r3
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b00      	cmp	r3, #0
 800539c:	d067      	beq.n	800546e <UART_SetConfig+0x756>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d05e      	beq.n	8005464 <UART_SetConfig+0x74c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d055      	beq.n	800545a <UART_SetConfig+0x742>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d04c      	beq.n	8005450 <UART_SetConfig+0x738>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d043      	beq.n	8005446 <UART_SetConfig+0x72e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d03a      	beq.n	800543c <UART_SetConfig+0x724>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b06      	cmp	r3, #6
 80053cc:	d031      	beq.n	8005432 <UART_SetConfig+0x71a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b07      	cmp	r3, #7
 80053d4:	d028      	beq.n	8005428 <UART_SetConfig+0x710>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d01f      	beq.n	800541e <UART_SetConfig+0x706>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b09      	cmp	r3, #9
 80053e4:	d016      	beq.n	8005414 <UART_SetConfig+0x6fc>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	2b0a      	cmp	r3, #10
 80053ec:	d00d      	beq.n	800540a <UART_SetConfig+0x6f2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	2b0b      	cmp	r3, #11
 80053f4:	d104      	bne.n	8005400 <UART_SetConfig+0x6e8>
 80053f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053fa:	f04f 0400 	mov.w	r4, #0
 80053fe:	e03a      	b.n	8005476 <UART_SetConfig+0x75e>
 8005400:	f04f 0301 	mov.w	r3, #1
 8005404:	f04f 0400 	mov.w	r4, #0
 8005408:	e035      	b.n	8005476 <UART_SetConfig+0x75e>
 800540a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800540e:	f04f 0400 	mov.w	r4, #0
 8005412:	e030      	b.n	8005476 <UART_SetConfig+0x75e>
 8005414:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005418:	f04f 0400 	mov.w	r4, #0
 800541c:	e02b      	b.n	8005476 <UART_SetConfig+0x75e>
 800541e:	f04f 0320 	mov.w	r3, #32
 8005422:	f04f 0400 	mov.w	r4, #0
 8005426:	e026      	b.n	8005476 <UART_SetConfig+0x75e>
 8005428:	f04f 0310 	mov.w	r3, #16
 800542c:	f04f 0400 	mov.w	r4, #0
 8005430:	e021      	b.n	8005476 <UART_SetConfig+0x75e>
 8005432:	f04f 030c 	mov.w	r3, #12
 8005436:	f04f 0400 	mov.w	r4, #0
 800543a:	e01c      	b.n	8005476 <UART_SetConfig+0x75e>
 800543c:	f04f 030a 	mov.w	r3, #10
 8005440:	f04f 0400 	mov.w	r4, #0
 8005444:	e017      	b.n	8005476 <UART_SetConfig+0x75e>
 8005446:	f04f 0308 	mov.w	r3, #8
 800544a:	f04f 0400 	mov.w	r4, #0
 800544e:	e012      	b.n	8005476 <UART_SetConfig+0x75e>
 8005450:	f04f 0306 	mov.w	r3, #6
 8005454:	f04f 0400 	mov.w	r4, #0
 8005458:	e00d      	b.n	8005476 <UART_SetConfig+0x75e>
 800545a:	f04f 0304 	mov.w	r3, #4
 800545e:	f04f 0400 	mov.w	r4, #0
 8005462:	e008      	b.n	8005476 <UART_SetConfig+0x75e>
 8005464:	f04f 0302 	mov.w	r3, #2
 8005468:	f04f 0400 	mov.w	r4, #0
 800546c:	e003      	b.n	8005476 <UART_SetConfig+0x75e>
 800546e:	f04f 0301 	mov.w	r3, #1
 8005472:	f04f 0400 	mov.w	r4, #0
 8005476:	461a      	mov	r2, r3
 8005478:	4623      	mov	r3, r4
 800547a:	f7fa fecd 	bl	8000218 <__aeabi_uldivmod>
 800547e:	4603      	mov	r3, r0
 8005480:	460c      	mov	r4, r1
 8005482:	4619      	mov	r1, r3
 8005484:	4622      	mov	r2, r4
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	f04f 0400 	mov.w	r4, #0
 800548e:	0214      	lsls	r4, r2, #8
 8005490:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005494:	020b      	lsls	r3, r1, #8
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6852      	ldr	r2, [r2, #4]
 800549a:	0852      	lsrs	r2, r2, #1
 800549c:	4611      	mov	r1, r2
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	eb13 0b01 	adds.w	fp, r3, r1
 80054a6:	eb44 0c02 	adc.w	ip, r4, r2
 80054aa:	4658      	mov	r0, fp
 80054ac:	4661      	mov	r1, ip
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f04f 0400 	mov.w	r4, #0
 80054b6:	461a      	mov	r2, r3
 80054b8:	4623      	mov	r3, r4
 80054ba:	f7fa fead 	bl	8000218 <__aeabi_uldivmod>
 80054be:	4603      	mov	r3, r0
 80054c0:	460c      	mov	r4, r1
 80054c2:	61fb      	str	r3, [r7, #28]
            break;
 80054c4:	e1c5      	b.n	8005852 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d05b      	beq.n	8005586 <UART_SetConfig+0x86e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d053      	beq.n	800557e <UART_SetConfig+0x866>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d04b      	beq.n	8005576 <UART_SetConfig+0x85e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d043      	beq.n	800556e <UART_SetConfig+0x856>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d03b      	beq.n	8005566 <UART_SetConfig+0x84e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d033      	beq.n	800555e <UART_SetConfig+0x846>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	d02b      	beq.n	8005556 <UART_SetConfig+0x83e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	2b07      	cmp	r3, #7
 8005504:	d023      	beq.n	800554e <UART_SetConfig+0x836>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2b08      	cmp	r3, #8
 800550c:	d01b      	beq.n	8005546 <UART_SetConfig+0x82e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	2b09      	cmp	r3, #9
 8005514:	d013      	beq.n	800553e <UART_SetConfig+0x826>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b0a      	cmp	r3, #10
 800551c:	d00b      	beq.n	8005536 <UART_SetConfig+0x81e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	2b0b      	cmp	r3, #11
 8005524:	d103      	bne.n	800552e <UART_SetConfig+0x816>
 8005526:	4bae      	ldr	r3, [pc, #696]	; (80057e0 <UART_SetConfig+0xac8>)
 8005528:	f04f 0400 	mov.w	r4, #0
 800552c:	e02e      	b.n	800558c <UART_SetConfig+0x874>
 800552e:	4bad      	ldr	r3, [pc, #692]	; (80057e4 <UART_SetConfig+0xacc>)
 8005530:	f04f 0400 	mov.w	r4, #0
 8005534:	e02a      	b.n	800558c <UART_SetConfig+0x874>
 8005536:	4bac      	ldr	r3, [pc, #688]	; (80057e8 <UART_SetConfig+0xad0>)
 8005538:	f04f 0400 	mov.w	r4, #0
 800553c:	e026      	b.n	800558c <UART_SetConfig+0x874>
 800553e:	4bab      	ldr	r3, [pc, #684]	; (80057ec <UART_SetConfig+0xad4>)
 8005540:	f04f 0400 	mov.w	r4, #0
 8005544:	e022      	b.n	800558c <UART_SetConfig+0x874>
 8005546:	4baa      	ldr	r3, [pc, #680]	; (80057f0 <UART_SetConfig+0xad8>)
 8005548:	f04f 0400 	mov.w	r4, #0
 800554c:	e01e      	b.n	800558c <UART_SetConfig+0x874>
 800554e:	4ba9      	ldr	r3, [pc, #676]	; (80057f4 <UART_SetConfig+0xadc>)
 8005550:	f04f 0400 	mov.w	r4, #0
 8005554:	e01a      	b.n	800558c <UART_SetConfig+0x874>
 8005556:	a49e      	add	r4, pc, #632	; (adr r4, 80057d0 <UART_SetConfig+0xab8>)
 8005558:	e9d4 3400 	ldrd	r3, r4, [r4]
 800555c:	e016      	b.n	800558c <UART_SetConfig+0x874>
 800555e:	4ba6      	ldr	r3, [pc, #664]	; (80057f8 <UART_SetConfig+0xae0>)
 8005560:	f04f 0400 	mov.w	r4, #0
 8005564:	e012      	b.n	800558c <UART_SetConfig+0x874>
 8005566:	4ba5      	ldr	r3, [pc, #660]	; (80057fc <UART_SetConfig+0xae4>)
 8005568:	f04f 0400 	mov.w	r4, #0
 800556c:	e00e      	b.n	800558c <UART_SetConfig+0x874>
 800556e:	a49a      	add	r4, pc, #616	; (adr r4, 80057d8 <UART_SetConfig+0xac0>)
 8005570:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005574:	e00a      	b.n	800558c <UART_SetConfig+0x874>
 8005576:	4ba2      	ldr	r3, [pc, #648]	; (8005800 <UART_SetConfig+0xae8>)
 8005578:	f04f 0400 	mov.w	r4, #0
 800557c:	e006      	b.n	800558c <UART_SetConfig+0x874>
 800557e:	4ba1      	ldr	r3, [pc, #644]	; (8005804 <UART_SetConfig+0xaec>)
 8005580:	f04f 0400 	mov.w	r4, #0
 8005584:	e002      	b.n	800558c <UART_SetConfig+0x874>
 8005586:	4b97      	ldr	r3, [pc, #604]	; (80057e4 <UART_SetConfig+0xacc>)
 8005588:	f04f 0400 	mov.w	r4, #0
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6852      	ldr	r2, [r2, #4]
 8005590:	0852      	lsrs	r2, r2, #1
 8005592:	4611      	mov	r1, r2
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	eb13 0b01 	adds.w	fp, r3, r1
 800559c:	eb44 0c02 	adc.w	ip, r4, r2
 80055a0:	4658      	mov	r0, fp
 80055a2:	4661      	mov	r1, ip
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f04f 0400 	mov.w	r4, #0
 80055ac:	461a      	mov	r2, r3
 80055ae:	4623      	mov	r3, r4
 80055b0:	f7fa fe32 	bl	8000218 <__aeabi_uldivmod>
 80055b4:	4603      	mov	r3, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	61fb      	str	r3, [r7, #28]
            break;
 80055ba:	e14a      	b.n	8005852 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80055bc:	f7fd fb84 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 80055c0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d067      	beq.n	80056a2 <UART_SetConfig+0x98a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d05e      	beq.n	8005698 <UART_SetConfig+0x980>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d055      	beq.n	800568e <UART_SetConfig+0x976>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d04c      	beq.n	8005684 <UART_SetConfig+0x96c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d043      	beq.n	800567a <UART_SetConfig+0x962>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d03a      	beq.n	8005670 <UART_SetConfig+0x958>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b06      	cmp	r3, #6
 8005600:	d031      	beq.n	8005666 <UART_SetConfig+0x94e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b07      	cmp	r3, #7
 8005608:	d028      	beq.n	800565c <UART_SetConfig+0x944>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	2b08      	cmp	r3, #8
 8005610:	d01f      	beq.n	8005652 <UART_SetConfig+0x93a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b09      	cmp	r3, #9
 8005618:	d016      	beq.n	8005648 <UART_SetConfig+0x930>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b0a      	cmp	r3, #10
 8005620:	d00d      	beq.n	800563e <UART_SetConfig+0x926>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	2b0b      	cmp	r3, #11
 8005628:	d104      	bne.n	8005634 <UART_SetConfig+0x91c>
 800562a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800562e:	f04f 0400 	mov.w	r4, #0
 8005632:	e03a      	b.n	80056aa <UART_SetConfig+0x992>
 8005634:	f04f 0301 	mov.w	r3, #1
 8005638:	f04f 0400 	mov.w	r4, #0
 800563c:	e035      	b.n	80056aa <UART_SetConfig+0x992>
 800563e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005642:	f04f 0400 	mov.w	r4, #0
 8005646:	e030      	b.n	80056aa <UART_SetConfig+0x992>
 8005648:	f04f 0340 	mov.w	r3, #64	; 0x40
 800564c:	f04f 0400 	mov.w	r4, #0
 8005650:	e02b      	b.n	80056aa <UART_SetConfig+0x992>
 8005652:	f04f 0320 	mov.w	r3, #32
 8005656:	f04f 0400 	mov.w	r4, #0
 800565a:	e026      	b.n	80056aa <UART_SetConfig+0x992>
 800565c:	f04f 0310 	mov.w	r3, #16
 8005660:	f04f 0400 	mov.w	r4, #0
 8005664:	e021      	b.n	80056aa <UART_SetConfig+0x992>
 8005666:	f04f 030c 	mov.w	r3, #12
 800566a:	f04f 0400 	mov.w	r4, #0
 800566e:	e01c      	b.n	80056aa <UART_SetConfig+0x992>
 8005670:	f04f 030a 	mov.w	r3, #10
 8005674:	f04f 0400 	mov.w	r4, #0
 8005678:	e017      	b.n	80056aa <UART_SetConfig+0x992>
 800567a:	f04f 0308 	mov.w	r3, #8
 800567e:	f04f 0400 	mov.w	r4, #0
 8005682:	e012      	b.n	80056aa <UART_SetConfig+0x992>
 8005684:	f04f 0306 	mov.w	r3, #6
 8005688:	f04f 0400 	mov.w	r4, #0
 800568c:	e00d      	b.n	80056aa <UART_SetConfig+0x992>
 800568e:	f04f 0304 	mov.w	r3, #4
 8005692:	f04f 0400 	mov.w	r4, #0
 8005696:	e008      	b.n	80056aa <UART_SetConfig+0x992>
 8005698:	f04f 0302 	mov.w	r3, #2
 800569c:	f04f 0400 	mov.w	r4, #0
 80056a0:	e003      	b.n	80056aa <UART_SetConfig+0x992>
 80056a2:	f04f 0301 	mov.w	r3, #1
 80056a6:	f04f 0400 	mov.w	r4, #0
 80056aa:	461a      	mov	r2, r3
 80056ac:	4623      	mov	r3, r4
 80056ae:	f7fa fdb3 	bl	8000218 <__aeabi_uldivmod>
 80056b2:	4603      	mov	r3, r0
 80056b4:	460c      	mov	r4, r1
 80056b6:	4619      	mov	r1, r3
 80056b8:	4622      	mov	r2, r4
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	f04f 0400 	mov.w	r4, #0
 80056c2:	0214      	lsls	r4, r2, #8
 80056c4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80056c8:	020b      	lsls	r3, r1, #8
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6852      	ldr	r2, [r2, #4]
 80056ce:	0852      	lsrs	r2, r2, #1
 80056d0:	4611      	mov	r1, r2
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	eb13 0b01 	adds.w	fp, r3, r1
 80056da:	eb44 0c02 	adc.w	ip, r4, r2
 80056de:	4658      	mov	r0, fp
 80056e0:	4661      	mov	r1, ip
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f04f 0400 	mov.w	r4, #0
 80056ea:	461a      	mov	r2, r3
 80056ec:	4623      	mov	r3, r4
 80056ee:	f7fa fd93 	bl	8000218 <__aeabi_uldivmod>
 80056f2:	4603      	mov	r3, r0
 80056f4:	460c      	mov	r4, r1
 80056f6:	61fb      	str	r3, [r7, #28]
            break;
 80056f8:	e0ab      	b.n	8005852 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8088 	beq.w	8005814 <UART_SetConfig+0xafc>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2b01      	cmp	r3, #1
 800570a:	d05b      	beq.n	80057c4 <UART_SetConfig+0xaac>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	2b02      	cmp	r3, #2
 8005712:	d052      	beq.n	80057ba <UART_SetConfig+0xaa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b03      	cmp	r3, #3
 800571a:	d04a      	beq.n	80057b2 <UART_SetConfig+0xa9a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2b04      	cmp	r3, #4
 8005722:	d041      	beq.n	80057a8 <UART_SetConfig+0xa90>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b05      	cmp	r3, #5
 800572a:	d039      	beq.n	80057a0 <UART_SetConfig+0xa88>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2b06      	cmp	r3, #6
 8005732:	d031      	beq.n	8005798 <UART_SetConfig+0xa80>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	2b07      	cmp	r3, #7
 800573a:	d028      	beq.n	800578e <UART_SetConfig+0xa76>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	2b08      	cmp	r3, #8
 8005742:	d01f      	beq.n	8005784 <UART_SetConfig+0xa6c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b09      	cmp	r3, #9
 800574a:	d016      	beq.n	800577a <UART_SetConfig+0xa62>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b0a      	cmp	r3, #10
 8005752:	d00d      	beq.n	8005770 <UART_SetConfig+0xa58>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	2b0b      	cmp	r3, #11
 800575a:	d104      	bne.n	8005766 <UART_SetConfig+0xa4e>
 800575c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005760:	f04f 0400 	mov.w	r4, #0
 8005764:	e05a      	b.n	800581c <UART_SetConfig+0xb04>
 8005766:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800576a:	f04f 0400 	mov.w	r4, #0
 800576e:	e055      	b.n	800581c <UART_SetConfig+0xb04>
 8005770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005774:	f04f 0400 	mov.w	r4, #0
 8005778:	e050      	b.n	800581c <UART_SetConfig+0xb04>
 800577a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800577e:	f04f 0400 	mov.w	r4, #0
 8005782:	e04b      	b.n	800581c <UART_SetConfig+0xb04>
 8005784:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005788:	f04f 0400 	mov.w	r4, #0
 800578c:	e046      	b.n	800581c <UART_SetConfig+0xb04>
 800578e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005792:	f04f 0400 	mov.w	r4, #0
 8005796:	e041      	b.n	800581c <UART_SetConfig+0xb04>
 8005798:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <UART_SetConfig+0xaf0>)
 800579a:	f04f 0400 	mov.w	r4, #0
 800579e:	e03d      	b.n	800581c <UART_SetConfig+0xb04>
 80057a0:	4b1a      	ldr	r3, [pc, #104]	; (800580c <UART_SetConfig+0xaf4>)
 80057a2:	f04f 0400 	mov.w	r4, #0
 80057a6:	e039      	b.n	800581c <UART_SetConfig+0xb04>
 80057a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80057ac:	f04f 0400 	mov.w	r4, #0
 80057b0:	e034      	b.n	800581c <UART_SetConfig+0xb04>
 80057b2:	4b17      	ldr	r3, [pc, #92]	; (8005810 <UART_SetConfig+0xaf8>)
 80057b4:	f04f 0400 	mov.w	r4, #0
 80057b8:	e030      	b.n	800581c <UART_SetConfig+0xb04>
 80057ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80057be:	f04f 0400 	mov.w	r4, #0
 80057c2:	e02b      	b.n	800581c <UART_SetConfig+0xb04>
 80057c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80057c8:	f04f 0400 	mov.w	r4, #0
 80057cc:	e026      	b.n	800581c <UART_SetConfig+0xb04>
 80057ce:	bf00      	nop
 80057d0:	14585500 	.word	0x14585500
 80057d4:	00000000 	.word	0x00000000
 80057d8:	28b0aa00 	.word	0x28b0aa00
 80057dc:	00000000 	.word	0x00000000
 80057e0:	00f42400 	.word	0x00f42400
 80057e4:	f4240000 	.word	0xf4240000
 80057e8:	01e84800 	.word	0x01e84800
 80057ec:	03d09000 	.word	0x03d09000
 80057f0:	07a12000 	.word	0x07a12000
 80057f4:	0f424000 	.word	0x0f424000
 80057f8:	186a0000 	.word	0x186a0000
 80057fc:	1e848000 	.word	0x1e848000
 8005800:	3d090000 	.word	0x3d090000
 8005804:	7a120000 	.word	0x7a120000
 8005808:	000aaa00 	.word	0x000aaa00
 800580c:	000ccc00 	.word	0x000ccc00
 8005810:	00155500 	.word	0x00155500
 8005814:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005818:	f04f 0400 	mov.w	r4, #0
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6852      	ldr	r2, [r2, #4]
 8005820:	0852      	lsrs	r2, r2, #1
 8005822:	4611      	mov	r1, r2
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	eb13 0b01 	adds.w	fp, r3, r1
 800582c:	eb44 0c02 	adc.w	ip, r4, r2
 8005830:	4658      	mov	r0, fp
 8005832:	4661      	mov	r1, ip
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f04f 0400 	mov.w	r4, #0
 800583c:	461a      	mov	r2, r3
 800583e:	4623      	mov	r3, r4
 8005840:	f7fa fcea 	bl	8000218 <__aeabi_uldivmod>
 8005844:	4603      	mov	r3, r0
 8005846:	460c      	mov	r4, r1
 8005848:	61fb      	str	r3, [r7, #28]
            break;
 800584a:	e002      	b.n	8005852 <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	76fb      	strb	r3, [r7, #27]
            break;
 8005850:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005858:	d309      	bcc.n	800586e <UART_SetConfig+0xb56>
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005860:	d205      	bcs.n	800586e <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	60da      	str	r2, [r3, #12]
 800586a:	f000 bc18 	b.w	800609e <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	76fb      	strb	r3, [r7, #27]
 8005872:	f000 bc14 	b.w	800609e <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800587e:	f040 8204 	bne.w	8005c8a <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8005882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005886:	2b08      	cmp	r3, #8
 8005888:	f200 81df 	bhi.w	8005c4a <UART_SetConfig+0xf32>
 800588c:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <UART_SetConfig+0xb7c>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058b9 	.word	0x080058b9
 8005898:	08005971 	.word	0x08005971
 800589c:	08005a29 	.word	0x08005a29
 80058a0:	08005c4b 	.word	0x08005c4b
 80058a4:	08005ad1 	.word	0x08005ad1
 80058a8:	08005c4b 	.word	0x08005c4b
 80058ac:	08005c4b 	.word	0x08005c4b
 80058b0:	08005c4b 	.word	0x08005c4b
 80058b4:	08005b89 	.word	0x08005b89
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b8:	f7fd fa74 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 80058bc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d044      	beq.n	8005950 <UART_SetConfig+0xc38>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d03e      	beq.n	800594c <UART_SetConfig+0xc34>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d038      	beq.n	8005948 <UART_SetConfig+0xc30>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d032      	beq.n	8005944 <UART_SetConfig+0xc2c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d02c      	beq.n	8005940 <UART_SetConfig+0xc28>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d026      	beq.n	800593c <UART_SetConfig+0xc24>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b06      	cmp	r3, #6
 80058f4:	d020      	beq.n	8005938 <UART_SetConfig+0xc20>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b07      	cmp	r3, #7
 80058fc:	d01a      	beq.n	8005934 <UART_SetConfig+0xc1c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	2b08      	cmp	r3, #8
 8005904:	d014      	beq.n	8005930 <UART_SetConfig+0xc18>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	2b09      	cmp	r3, #9
 800590c:	d00e      	beq.n	800592c <UART_SetConfig+0xc14>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	2b0a      	cmp	r3, #10
 8005914:	d008      	beq.n	8005928 <UART_SetConfig+0xc10>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	2b0b      	cmp	r3, #11
 800591c:	d102      	bne.n	8005924 <UART_SetConfig+0xc0c>
 800591e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005922:	e016      	b.n	8005952 <UART_SetConfig+0xc3a>
 8005924:	2301      	movs	r3, #1
 8005926:	e014      	b.n	8005952 <UART_SetConfig+0xc3a>
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	e012      	b.n	8005952 <UART_SetConfig+0xc3a>
 800592c:	2340      	movs	r3, #64	; 0x40
 800592e:	e010      	b.n	8005952 <UART_SetConfig+0xc3a>
 8005930:	2320      	movs	r3, #32
 8005932:	e00e      	b.n	8005952 <UART_SetConfig+0xc3a>
 8005934:	2310      	movs	r3, #16
 8005936:	e00c      	b.n	8005952 <UART_SetConfig+0xc3a>
 8005938:	230c      	movs	r3, #12
 800593a:	e00a      	b.n	8005952 <UART_SetConfig+0xc3a>
 800593c:	230a      	movs	r3, #10
 800593e:	e008      	b.n	8005952 <UART_SetConfig+0xc3a>
 8005940:	2308      	movs	r3, #8
 8005942:	e006      	b.n	8005952 <UART_SetConfig+0xc3a>
 8005944:	2306      	movs	r3, #6
 8005946:	e004      	b.n	8005952 <UART_SetConfig+0xc3a>
 8005948:	2304      	movs	r3, #4
 800594a:	e002      	b.n	8005952 <UART_SetConfig+0xc3a>
 800594c:	2302      	movs	r3, #2
 800594e:	e000      	b.n	8005952 <UART_SetConfig+0xc3a>
 8005950:	2301      	movs	r3, #1
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	fbb2 f3f3 	udiv	r3, r2, r3
 8005958:	005a      	lsls	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	441a      	add	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	fbb2 f3f3 	udiv	r3, r2, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	61fb      	str	r3, [r7, #28]
        break;
 800596e:	e16f      	b.n	8005c50 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005970:	f7fd fa2e 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 8005974:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b00      	cmp	r3, #0
 800597c:	d044      	beq.n	8005a08 <UART_SetConfig+0xcf0>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b01      	cmp	r3, #1
 8005984:	d03e      	beq.n	8005a04 <UART_SetConfig+0xcec>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b02      	cmp	r3, #2
 800598c:	d038      	beq.n	8005a00 <UART_SetConfig+0xce8>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b03      	cmp	r3, #3
 8005994:	d032      	beq.n	80059fc <UART_SetConfig+0xce4>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b04      	cmp	r3, #4
 800599c:	d02c      	beq.n	80059f8 <UART_SetConfig+0xce0>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	d026      	beq.n	80059f4 <UART_SetConfig+0xcdc>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b06      	cmp	r3, #6
 80059ac:	d020      	beq.n	80059f0 <UART_SetConfig+0xcd8>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b07      	cmp	r3, #7
 80059b4:	d01a      	beq.n	80059ec <UART_SetConfig+0xcd4>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d014      	beq.n	80059e8 <UART_SetConfig+0xcd0>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	2b09      	cmp	r3, #9
 80059c4:	d00e      	beq.n	80059e4 <UART_SetConfig+0xccc>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2b0a      	cmp	r3, #10
 80059cc:	d008      	beq.n	80059e0 <UART_SetConfig+0xcc8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b0b      	cmp	r3, #11
 80059d4:	d102      	bne.n	80059dc <UART_SetConfig+0xcc4>
 80059d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059da:	e016      	b.n	8005a0a <UART_SetConfig+0xcf2>
 80059dc:	2301      	movs	r3, #1
 80059de:	e014      	b.n	8005a0a <UART_SetConfig+0xcf2>
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	e012      	b.n	8005a0a <UART_SetConfig+0xcf2>
 80059e4:	2340      	movs	r3, #64	; 0x40
 80059e6:	e010      	b.n	8005a0a <UART_SetConfig+0xcf2>
 80059e8:	2320      	movs	r3, #32
 80059ea:	e00e      	b.n	8005a0a <UART_SetConfig+0xcf2>
 80059ec:	2310      	movs	r3, #16
 80059ee:	e00c      	b.n	8005a0a <UART_SetConfig+0xcf2>
 80059f0:	230c      	movs	r3, #12
 80059f2:	e00a      	b.n	8005a0a <UART_SetConfig+0xcf2>
 80059f4:	230a      	movs	r3, #10
 80059f6:	e008      	b.n	8005a0a <UART_SetConfig+0xcf2>
 80059f8:	2308      	movs	r3, #8
 80059fa:	e006      	b.n	8005a0a <UART_SetConfig+0xcf2>
 80059fc:	2306      	movs	r3, #6
 80059fe:	e004      	b.n	8005a0a <UART_SetConfig+0xcf2>
 8005a00:	2304      	movs	r3, #4
 8005a02:	e002      	b.n	8005a0a <UART_SetConfig+0xcf2>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e000      	b.n	8005a0a <UART_SetConfig+0xcf2>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	005a      	lsls	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	085b      	lsrs	r3, r3, #1
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	61fb      	str	r3, [r7, #28]
        break;
 8005a26:	e113      	b.n	8005c50 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d043      	beq.n	8005ab8 <UART_SetConfig+0xda0>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d03d      	beq.n	8005ab4 <UART_SetConfig+0xd9c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d037      	beq.n	8005ab0 <UART_SetConfig+0xd98>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d031      	beq.n	8005aac <UART_SetConfig+0xd94>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d02b      	beq.n	8005aa8 <UART_SetConfig+0xd90>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b05      	cmp	r3, #5
 8005a56:	d025      	beq.n	8005aa4 <UART_SetConfig+0xd8c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b06      	cmp	r3, #6
 8005a5e:	d01f      	beq.n	8005aa0 <UART_SetConfig+0xd88>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b07      	cmp	r3, #7
 8005a66:	d019      	beq.n	8005a9c <UART_SetConfig+0xd84>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d013      	beq.n	8005a98 <UART_SetConfig+0xd80>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2b09      	cmp	r3, #9
 8005a76:	d00d      	beq.n	8005a94 <UART_SetConfig+0xd7c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2b0a      	cmp	r3, #10
 8005a7e:	d007      	beq.n	8005a90 <UART_SetConfig+0xd78>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b0b      	cmp	r3, #11
 8005a86:	d101      	bne.n	8005a8c <UART_SetConfig+0xd74>
 8005a88:	4b8d      	ldr	r3, [pc, #564]	; (8005cc0 <UART_SetConfig+0xfa8>)
 8005a8a:	e016      	b.n	8005aba <UART_SetConfig+0xda2>
 8005a8c:	4b8d      	ldr	r3, [pc, #564]	; (8005cc4 <UART_SetConfig+0xfac>)
 8005a8e:	e014      	b.n	8005aba <UART_SetConfig+0xda2>
 8005a90:	4b8d      	ldr	r3, [pc, #564]	; (8005cc8 <UART_SetConfig+0xfb0>)
 8005a92:	e012      	b.n	8005aba <UART_SetConfig+0xda2>
 8005a94:	4b8d      	ldr	r3, [pc, #564]	; (8005ccc <UART_SetConfig+0xfb4>)
 8005a96:	e010      	b.n	8005aba <UART_SetConfig+0xda2>
 8005a98:	4b8d      	ldr	r3, [pc, #564]	; (8005cd0 <UART_SetConfig+0xfb8>)
 8005a9a:	e00e      	b.n	8005aba <UART_SetConfig+0xda2>
 8005a9c:	4b8d      	ldr	r3, [pc, #564]	; (8005cd4 <UART_SetConfig+0xfbc>)
 8005a9e:	e00c      	b.n	8005aba <UART_SetConfig+0xda2>
 8005aa0:	4b8d      	ldr	r3, [pc, #564]	; (8005cd8 <UART_SetConfig+0xfc0>)
 8005aa2:	e00a      	b.n	8005aba <UART_SetConfig+0xda2>
 8005aa4:	4b8d      	ldr	r3, [pc, #564]	; (8005cdc <UART_SetConfig+0xfc4>)
 8005aa6:	e008      	b.n	8005aba <UART_SetConfig+0xda2>
 8005aa8:	4b8d      	ldr	r3, [pc, #564]	; (8005ce0 <UART_SetConfig+0xfc8>)
 8005aaa:	e006      	b.n	8005aba <UART_SetConfig+0xda2>
 8005aac:	4b8d      	ldr	r3, [pc, #564]	; (8005ce4 <UART_SetConfig+0xfcc>)
 8005aae:	e004      	b.n	8005aba <UART_SetConfig+0xda2>
 8005ab0:	4b8d      	ldr	r3, [pc, #564]	; (8005ce8 <UART_SetConfig+0xfd0>)
 8005ab2:	e002      	b.n	8005aba <UART_SetConfig+0xda2>
 8005ab4:	4b8d      	ldr	r3, [pc, #564]	; (8005cec <UART_SetConfig+0xfd4>)
 8005ab6:	e000      	b.n	8005aba <UART_SetConfig+0xda2>
 8005ab8:	4b82      	ldr	r3, [pc, #520]	; (8005cc4 <UART_SetConfig+0xfac>)
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6852      	ldr	r2, [r2, #4]
 8005abe:	0852      	lsrs	r2, r2, #1
 8005ac0:	441a      	add	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	61fb      	str	r3, [r7, #28]
        break;
 8005ace:	e0bf      	b.n	8005c50 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ad0:	f7fd f8fa 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8005ad4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d044      	beq.n	8005b68 <UART_SetConfig+0xe50>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d03e      	beq.n	8005b64 <UART_SetConfig+0xe4c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d038      	beq.n	8005b60 <UART_SetConfig+0xe48>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d032      	beq.n	8005b5c <UART_SetConfig+0xe44>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d02c      	beq.n	8005b58 <UART_SetConfig+0xe40>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2b05      	cmp	r3, #5
 8005b04:	d026      	beq.n	8005b54 <UART_SetConfig+0xe3c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b06      	cmp	r3, #6
 8005b0c:	d020      	beq.n	8005b50 <UART_SetConfig+0xe38>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b07      	cmp	r3, #7
 8005b14:	d01a      	beq.n	8005b4c <UART_SetConfig+0xe34>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d014      	beq.n	8005b48 <UART_SetConfig+0xe30>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b09      	cmp	r3, #9
 8005b24:	d00e      	beq.n	8005b44 <UART_SetConfig+0xe2c>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b0a      	cmp	r3, #10
 8005b2c:	d008      	beq.n	8005b40 <UART_SetConfig+0xe28>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b0b      	cmp	r3, #11
 8005b34:	d102      	bne.n	8005b3c <UART_SetConfig+0xe24>
 8005b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b3a:	e016      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e014      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	e012      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b44:	2340      	movs	r3, #64	; 0x40
 8005b46:	e010      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b48:	2320      	movs	r3, #32
 8005b4a:	e00e      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	e00c      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b50:	230c      	movs	r3, #12
 8005b52:	e00a      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b54:	230a      	movs	r3, #10
 8005b56:	e008      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b58:	2308      	movs	r3, #8
 8005b5a:	e006      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b5c:	2306      	movs	r3, #6
 8005b5e:	e004      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b60:	2304      	movs	r3, #4
 8005b62:	e002      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e000      	b.n	8005b6a <UART_SetConfig+0xe52>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	005a      	lsls	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	441a      	add	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	61fb      	str	r3, [r7, #28]
        break;
 8005b86:	e063      	b.n	8005c50 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d04f      	beq.n	8005c30 <UART_SetConfig+0xf18>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d048      	beq.n	8005c2a <UART_SetConfig+0xf12>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d041      	beq.n	8005c24 <UART_SetConfig+0xf0c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d03a      	beq.n	8005c1e <UART_SetConfig+0xf06>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d033      	beq.n	8005c18 <UART_SetConfig+0xf00>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	2b05      	cmp	r3, #5
 8005bb6:	d02c      	beq.n	8005c12 <UART_SetConfig+0xefa>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	2b06      	cmp	r3, #6
 8005bbe:	d025      	beq.n	8005c0c <UART_SetConfig+0xef4>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	2b07      	cmp	r3, #7
 8005bc6:	d01e      	beq.n	8005c06 <UART_SetConfig+0xeee>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d017      	beq.n	8005c00 <UART_SetConfig+0xee8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	2b09      	cmp	r3, #9
 8005bd6:	d010      	beq.n	8005bfa <UART_SetConfig+0xee2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	2b0a      	cmp	r3, #10
 8005bde:	d009      	beq.n	8005bf4 <UART_SetConfig+0xedc>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	2b0b      	cmp	r3, #11
 8005be6:	d102      	bne.n	8005bee <UART_SetConfig+0xed6>
 8005be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bec:	e022      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bf2:	e01f      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf8:	e01c      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bfe:	e019      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c04:	e016      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c0a:	e013      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005c0c:	f241 5354 	movw	r3, #5460	; 0x1554
 8005c10:	e010      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005c12:	f641 1398 	movw	r3, #6552	; 0x1998
 8005c16:	e00d      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c1c:	e00a      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005c1e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005c22:	e007      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005c24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c28:	e004      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2e:	e001      	b.n	8005c34 <UART_SetConfig+0xf1c>
 8005c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6852      	ldr	r2, [r2, #4]
 8005c38:	0852      	lsrs	r2, r2, #1
 8005c3a:	441a      	add	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	61fb      	str	r3, [r7, #28]
        break;
 8005c48:	e002      	b.n	8005c50 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	76fb      	strb	r3, [r7, #27]
        break;
 8005c4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	2b0f      	cmp	r3, #15
 8005c54:	d916      	bls.n	8005c84 <UART_SetConfig+0xf6c>
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5c:	d212      	bcs.n	8005c84 <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f023 030f 	bic.w	r3, r3, #15
 8005c66:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	89fb      	ldrh	r3, [r7, #14]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	89fa      	ldrh	r2, [r7, #14]
 8005c80:	60da      	str	r2, [r3, #12]
 8005c82:	e20c      	b.n	800609e <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	76fb      	strb	r3, [r7, #27]
 8005c88:	e209      	b.n	800609e <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8005c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	f200 81f4 	bhi.w	800607c <UART_SetConfig+0x1364>
 8005c94:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0xf84>)
 8005c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9a:	bf00      	nop
 8005c9c:	08005cf1 	.word	0x08005cf1
 8005ca0:	08005da7 	.word	0x08005da7
 8005ca4:	08005e5d 	.word	0x08005e5d
 8005ca8:	0800607d 	.word	0x0800607d
 8005cac:	08005f07 	.word	0x08005f07
 8005cb0:	0800607d 	.word	0x0800607d
 8005cb4:	0800607d 	.word	0x0800607d
 8005cb8:	0800607d 	.word	0x0800607d
 8005cbc:	08005fbd 	.word	0x08005fbd
 8005cc0:	0001e848 	.word	0x0001e848
 8005cc4:	01e84800 	.word	0x01e84800
 8005cc8:	0003d090 	.word	0x0003d090
 8005ccc:	0007a120 	.word	0x0007a120
 8005cd0:	000f4240 	.word	0x000f4240
 8005cd4:	001e8480 	.word	0x001e8480
 8005cd8:	0028b0aa 	.word	0x0028b0aa
 8005cdc:	0030d400 	.word	0x0030d400
 8005ce0:	003d0900 	.word	0x003d0900
 8005ce4:	00516154 	.word	0x00516154
 8005ce8:	007a1200 	.word	0x007a1200
 8005cec:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf0:	f7fd f858 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8005cf4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d044      	beq.n	8005d88 <UART_SetConfig+0x1070>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d03e      	beq.n	8005d84 <UART_SetConfig+0x106c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d038      	beq.n	8005d80 <UART_SetConfig+0x1068>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d032      	beq.n	8005d7c <UART_SetConfig+0x1064>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d02c      	beq.n	8005d78 <UART_SetConfig+0x1060>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b05      	cmp	r3, #5
 8005d24:	d026      	beq.n	8005d74 <UART_SetConfig+0x105c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b06      	cmp	r3, #6
 8005d2c:	d020      	beq.n	8005d70 <UART_SetConfig+0x1058>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b07      	cmp	r3, #7
 8005d34:	d01a      	beq.n	8005d6c <UART_SetConfig+0x1054>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d014      	beq.n	8005d68 <UART_SetConfig+0x1050>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2b09      	cmp	r3, #9
 8005d44:	d00e      	beq.n	8005d64 <UART_SetConfig+0x104c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b0a      	cmp	r3, #10
 8005d4c:	d008      	beq.n	8005d60 <UART_SetConfig+0x1048>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b0b      	cmp	r3, #11
 8005d54:	d102      	bne.n	8005d5c <UART_SetConfig+0x1044>
 8005d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d5a:	e016      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e014      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d60:	2380      	movs	r3, #128	; 0x80
 8005d62:	e012      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d64:	2340      	movs	r3, #64	; 0x40
 8005d66:	e010      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d68:	2320      	movs	r3, #32
 8005d6a:	e00e      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	e00c      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d70:	230c      	movs	r3, #12
 8005d72:	e00a      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d74:	230a      	movs	r3, #10
 8005d76:	e008      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	e006      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d7c:	2306      	movs	r3, #6
 8005d7e:	e004      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d80:	2304      	movs	r3, #4
 8005d82:	e002      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e000      	b.n	8005d8a <UART_SetConfig+0x1072>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	441a      	add	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	61fb      	str	r3, [r7, #28]
        break;
 8005da4:	e16d      	b.n	8006082 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da6:	f7fd f813 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 8005daa:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d044      	beq.n	8005e3e <UART_SetConfig+0x1126>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d03e      	beq.n	8005e3a <UART_SetConfig+0x1122>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d038      	beq.n	8005e36 <UART_SetConfig+0x111e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d032      	beq.n	8005e32 <UART_SetConfig+0x111a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d02c      	beq.n	8005e2e <UART_SetConfig+0x1116>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b05      	cmp	r3, #5
 8005dda:	d026      	beq.n	8005e2a <UART_SetConfig+0x1112>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b06      	cmp	r3, #6
 8005de2:	d020      	beq.n	8005e26 <UART_SetConfig+0x110e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2b07      	cmp	r3, #7
 8005dea:	d01a      	beq.n	8005e22 <UART_SetConfig+0x110a>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d014      	beq.n	8005e1e <UART_SetConfig+0x1106>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b09      	cmp	r3, #9
 8005dfa:	d00e      	beq.n	8005e1a <UART_SetConfig+0x1102>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	2b0a      	cmp	r3, #10
 8005e02:	d008      	beq.n	8005e16 <UART_SetConfig+0x10fe>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	2b0b      	cmp	r3, #11
 8005e0a:	d102      	bne.n	8005e12 <UART_SetConfig+0x10fa>
 8005e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e10:	e016      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e014      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e16:	2380      	movs	r3, #128	; 0x80
 8005e18:	e012      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e1a:	2340      	movs	r3, #64	; 0x40
 8005e1c:	e010      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e1e:	2320      	movs	r3, #32
 8005e20:	e00e      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e22:	2310      	movs	r3, #16
 8005e24:	e00c      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e26:	230c      	movs	r3, #12
 8005e28:	e00a      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e2a:	230a      	movs	r3, #10
 8005e2c:	e008      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e2e:	2308      	movs	r3, #8
 8005e30:	e006      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e32:	2306      	movs	r3, #6
 8005e34:	e004      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e36:	2304      	movs	r3, #4
 8005e38:	e002      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e000      	b.n	8005e40 <UART_SetConfig+0x1128>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	441a      	add	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	61fb      	str	r3, [r7, #28]
        break;
 8005e5a:	e112      	b.n	8006082 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d044      	beq.n	8005eee <UART_SetConfig+0x11d6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d03e      	beq.n	8005eea <UART_SetConfig+0x11d2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d038      	beq.n	8005ee6 <UART_SetConfig+0x11ce>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d032      	beq.n	8005ee2 <UART_SetConfig+0x11ca>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d02c      	beq.n	8005ede <UART_SetConfig+0x11c6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b05      	cmp	r3, #5
 8005e8a:	d026      	beq.n	8005eda <UART_SetConfig+0x11c2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b06      	cmp	r3, #6
 8005e92:	d020      	beq.n	8005ed6 <UART_SetConfig+0x11be>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b07      	cmp	r3, #7
 8005e9a:	d01a      	beq.n	8005ed2 <UART_SetConfig+0x11ba>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d014      	beq.n	8005ece <UART_SetConfig+0x11b6>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2b09      	cmp	r3, #9
 8005eaa:	d00e      	beq.n	8005eca <UART_SetConfig+0x11b2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2b0a      	cmp	r3, #10
 8005eb2:	d008      	beq.n	8005ec6 <UART_SetConfig+0x11ae>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2b0b      	cmp	r3, #11
 8005eba:	d102      	bne.n	8005ec2 <UART_SetConfig+0x11aa>
 8005ebc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005ec0:	e016      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005ec2:	4b81      	ldr	r3, [pc, #516]	; (80060c8 <UART_SetConfig+0x13b0>)
 8005ec4:	e014      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005ec6:	4b81      	ldr	r3, [pc, #516]	; (80060cc <UART_SetConfig+0x13b4>)
 8005ec8:	e012      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005eca:	4b81      	ldr	r3, [pc, #516]	; (80060d0 <UART_SetConfig+0x13b8>)
 8005ecc:	e010      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005ece:	4b81      	ldr	r3, [pc, #516]	; (80060d4 <UART_SetConfig+0x13bc>)
 8005ed0:	e00e      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005ed2:	4b81      	ldr	r3, [pc, #516]	; (80060d8 <UART_SetConfig+0x13c0>)
 8005ed4:	e00c      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005ed6:	4b81      	ldr	r3, [pc, #516]	; (80060dc <UART_SetConfig+0x13c4>)
 8005ed8:	e00a      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005eda:	4b81      	ldr	r3, [pc, #516]	; (80060e0 <UART_SetConfig+0x13c8>)
 8005edc:	e008      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005ede:	4b81      	ldr	r3, [pc, #516]	; (80060e4 <UART_SetConfig+0x13cc>)
 8005ee0:	e006      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005ee2:	4b81      	ldr	r3, [pc, #516]	; (80060e8 <UART_SetConfig+0x13d0>)
 8005ee4:	e004      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005ee6:	4b81      	ldr	r3, [pc, #516]	; (80060ec <UART_SetConfig+0x13d4>)
 8005ee8:	e002      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005eea:	4b81      	ldr	r3, [pc, #516]	; (80060f0 <UART_SetConfig+0x13d8>)
 8005eec:	e000      	b.n	8005ef0 <UART_SetConfig+0x11d8>
 8005eee:	4b76      	ldr	r3, [pc, #472]	; (80060c8 <UART_SetConfig+0x13b0>)
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6852      	ldr	r2, [r2, #4]
 8005ef4:	0852      	lsrs	r2, r2, #1
 8005ef6:	441a      	add	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	61fb      	str	r3, [r7, #28]
        break;
 8005f04:	e0bd      	b.n	8006082 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f06:	f7fc fedf 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8005f0a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d044      	beq.n	8005f9e <UART_SetConfig+0x1286>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d03e      	beq.n	8005f9a <UART_SetConfig+0x1282>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d038      	beq.n	8005f96 <UART_SetConfig+0x127e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d032      	beq.n	8005f92 <UART_SetConfig+0x127a>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d02c      	beq.n	8005f8e <UART_SetConfig+0x1276>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2b05      	cmp	r3, #5
 8005f3a:	d026      	beq.n	8005f8a <UART_SetConfig+0x1272>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b06      	cmp	r3, #6
 8005f42:	d020      	beq.n	8005f86 <UART_SetConfig+0x126e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b07      	cmp	r3, #7
 8005f4a:	d01a      	beq.n	8005f82 <UART_SetConfig+0x126a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d014      	beq.n	8005f7e <UART_SetConfig+0x1266>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	d00e      	beq.n	8005f7a <UART_SetConfig+0x1262>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	2b0a      	cmp	r3, #10
 8005f62:	d008      	beq.n	8005f76 <UART_SetConfig+0x125e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	2b0b      	cmp	r3, #11
 8005f6a:	d102      	bne.n	8005f72 <UART_SetConfig+0x125a>
 8005f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f70:	e016      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e014      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	e012      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f7a:	2340      	movs	r3, #64	; 0x40
 8005f7c:	e010      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f7e:	2320      	movs	r3, #32
 8005f80:	e00e      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f82:	2310      	movs	r3, #16
 8005f84:	e00c      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f86:	230c      	movs	r3, #12
 8005f88:	e00a      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f8a:	230a      	movs	r3, #10
 8005f8c:	e008      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f8e:	2308      	movs	r3, #8
 8005f90:	e006      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f92:	2306      	movs	r3, #6
 8005f94:	e004      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f96:	2304      	movs	r3, #4
 8005f98:	e002      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e000      	b.n	8005fa0 <UART_SetConfig+0x1288>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	441a      	add	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	61fb      	str	r3, [r7, #28]
        break;
 8005fba:	e062      	b.n	8006082 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d04e      	beq.n	8006062 <UART_SetConfig+0x134a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d047      	beq.n	800605c <UART_SetConfig+0x1344>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d040      	beq.n	8006056 <UART_SetConfig+0x133e>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d039      	beq.n	8006050 <UART_SetConfig+0x1338>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d032      	beq.n	800604a <UART_SetConfig+0x1332>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b05      	cmp	r3, #5
 8005fea:	d02b      	beq.n	8006044 <UART_SetConfig+0x132c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	2b06      	cmp	r3, #6
 8005ff2:	d024      	beq.n	800603e <UART_SetConfig+0x1326>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2b07      	cmp	r3, #7
 8005ffa:	d01d      	beq.n	8006038 <UART_SetConfig+0x1320>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	2b08      	cmp	r3, #8
 8006002:	d016      	beq.n	8006032 <UART_SetConfig+0x131a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	2b09      	cmp	r3, #9
 800600a:	d00f      	beq.n	800602c <UART_SetConfig+0x1314>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	2b0a      	cmp	r3, #10
 8006012:	d008      	beq.n	8006026 <UART_SetConfig+0x130e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	2b0b      	cmp	r3, #11
 800601a:	d101      	bne.n	8006020 <UART_SetConfig+0x1308>
 800601c:	2380      	movs	r3, #128	; 0x80
 800601e:	e022      	b.n	8006066 <UART_SetConfig+0x134e>
 8006020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006024:	e01f      	b.n	8006066 <UART_SetConfig+0x134e>
 8006026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800602a:	e01c      	b.n	8006066 <UART_SetConfig+0x134e>
 800602c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006030:	e019      	b.n	8006066 <UART_SetConfig+0x134e>
 8006032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006036:	e016      	b.n	8006066 <UART_SetConfig+0x134e>
 8006038:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800603c:	e013      	b.n	8006066 <UART_SetConfig+0x134e>
 800603e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006042:	e010      	b.n	8006066 <UART_SetConfig+0x134e>
 8006044:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006048:	e00d      	b.n	8006066 <UART_SetConfig+0x134e>
 800604a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800604e:	e00a      	b.n	8006066 <UART_SetConfig+0x134e>
 8006050:	f241 5355 	movw	r3, #5461	; 0x1555
 8006054:	e007      	b.n	8006066 <UART_SetConfig+0x134e>
 8006056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800605a:	e004      	b.n	8006066 <UART_SetConfig+0x134e>
 800605c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006060:	e001      	b.n	8006066 <UART_SetConfig+0x134e>
 8006062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6852      	ldr	r2, [r2, #4]
 800606a:	0852      	lsrs	r2, r2, #1
 800606c:	441a      	add	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	fbb2 f3f3 	udiv	r3, r2, r3
 8006076:	b29b      	uxth	r3, r3
 8006078:	61fb      	str	r3, [r7, #28]
        break;
 800607a:	e002      	b.n	8006082 <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	76fb      	strb	r3, [r7, #27]
        break;
 8006080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b0f      	cmp	r3, #15
 8006086:	d908      	bls.n	800609a <UART_SetConfig+0x1382>
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608e:	d204      	bcs.n	800609a <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	60da      	str	r2, [r3, #12]
 8006098:	e001      	b.n	800609e <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80060ba:	7efb      	ldrb	r3, [r7, #27]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3728      	adds	r7, #40	; 0x28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80060c6:	bf00      	nop
 80060c8:	00f42400 	.word	0x00f42400
 80060cc:	0001e848 	.word	0x0001e848
 80060d0:	0003d090 	.word	0x0003d090
 80060d4:	0007a120 	.word	0x0007a120
 80060d8:	000f4240 	.word	0x000f4240
 80060dc:	00145855 	.word	0x00145855
 80060e0:	00186a00 	.word	0x00186a00
 80060e4:	001e8480 	.word	0x001e8480
 80060e8:	0028b0aa 	.word	0x0028b0aa
 80060ec:	003d0900 	.word	0x003d0900
 80060f0:	007a1200 	.word	0x007a1200

080060f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01a      	beq.n	800620a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f2:	d10a      	bne.n	800620a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af02      	add	r7, sp, #8
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006248:	f7fb f802 	bl	8001250 <HAL_GetTick>
 800624c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b08      	cmp	r3, #8
 800625a:	d10e      	bne.n	800627a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800625c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f82c 	bl	80062c8 <UART_WaitOnFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e022      	b.n	80062c0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b04      	cmp	r3, #4
 8006286:	d10e      	bne.n	80062a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f816 	bl	80062c8 <UART_WaitOnFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e00c      	b.n	80062c0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d8:	e02c      	b.n	8006334 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d028      	beq.n	8006334 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e2:	f7fa ffb5 	bl	8001250 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d302      	bcc.n	80062f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d11d      	bne.n	8006334 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006306:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0201 	bic.w	r2, r2, #1
 8006316:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e00f      	b.n	8006354 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69da      	ldr	r2, [r3, #28]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4013      	ands	r3, r2
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	429a      	cmp	r2, r3
 8006342:	bf0c      	ite	eq
 8006344:	2301      	moveq	r3, #1
 8006346:	2300      	movne	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	429a      	cmp	r2, r3
 8006350:	d0c3      	beq.n	80062da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800636a:	2b01      	cmp	r3, #1
 800636c:	d101      	bne.n	8006372 <HAL_UARTEx_DisableFifoMode+0x16>
 800636e:	2302      	movs	r3, #2
 8006370:	e027      	b.n	80063c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2224      	movs	r2, #36	; 0x24
 800637e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80063a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e02d      	b.n	8006442 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2224      	movs	r2, #36	; 0x24
 80063f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0201 	bic.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f850 	bl	80064c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800645e:	2302      	movs	r3, #2
 8006460:	e02d      	b.n	80064be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2224      	movs	r2, #36	; 0x24
 800646e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f812 	bl	80064c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b089      	sub	sp, #36	; 0x24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80064d0:	4a2f      	ldr	r2, [pc, #188]	; (8006590 <UARTEx_SetNbDataToProcess+0xc8>)
 80064d2:	f107 0314 	add.w	r3, r7, #20
 80064d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064da:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80064de:	4a2d      	ldr	r2, [pc, #180]	; (8006594 <UARTEx_SetNbDataToProcess+0xcc>)
 80064e0:	f107 030c 	add.w	r3, r7, #12
 80064e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064e8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d108      	bne.n	8006506 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006504:	e03d      	b.n	8006582 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006506:	2308      	movs	r3, #8
 8006508:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800650a:	2308      	movs	r3, #8
 800650c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	0e5b      	lsrs	r3, r3, #25
 8006516:	b2db      	uxtb	r3, r3
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	0f5b      	lsrs	r3, r3, #29
 8006526:	b2db      	uxtb	r3, r3
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800652e:	7fbb      	ldrb	r3, [r7, #30]
 8006530:	7f3a      	ldrb	r2, [r7, #28]
 8006532:	f107 0120 	add.w	r1, r7, #32
 8006536:	440a      	add	r2, r1
 8006538:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800653c:	fb02 f303 	mul.w	r3, r2, r3
 8006540:	7f3a      	ldrb	r2, [r7, #28]
 8006542:	f107 0120 	add.w	r1, r7, #32
 8006546:	440a      	add	r2, r1
 8006548:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800654c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006550:	b29a      	uxth	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006558:	7ffb      	ldrb	r3, [r7, #31]
 800655a:	7f7a      	ldrb	r2, [r7, #29]
 800655c:	f107 0120 	add.w	r1, r7, #32
 8006560:	440a      	add	r2, r1
 8006562:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006566:	fb02 f303 	mul.w	r3, r2, r3
 800656a:	7f7a      	ldrb	r2, [r7, #29]
 800656c:	f107 0120 	add.w	r1, r7, #32
 8006570:	440a      	add	r2, r1
 8006572:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006576:	fb93 f3f2 	sdiv	r3, r3, r2
 800657a:	b29a      	uxth	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006582:	bf00      	nop
 8006584:	3724      	adds	r7, #36	; 0x24
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	0800b16c 	.word	0x0800b16c
 8006594:	0800b174 	.word	0x0800b174

08006598 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
 
if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800659c:	4907      	ldr	r1, [pc, #28]	; (80065bc <MX_FATFS_Init+0x24>)
 800659e:	4808      	ldr	r0, [pc, #32]	; (80065c0 <MX_FATFS_Init+0x28>)
 80065a0:	f004 fd8e 	bl	800b0c0 <FATFS_LinkDriver>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80065aa:	f04f 33ff 	mov.w	r3, #4294967295
 80065ae:	e003      	b.n	80065b8 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 80065b0:	4b04      	ldr	r3, [pc, #16]	; (80065c4 <MX_FATFS_Init+0x2c>)
 80065b2:	2201      	movs	r2, #1
 80065b4:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80065b6:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	200003dc 	.word	0x200003dc
 80065c0:	20000010 	.word	0x20000010
 80065c4:	20000050 	.word	0x20000050

080065c8 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80065cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <MY_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t MY_SD_Init(uint32_t Instance)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <MY_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80065ea:	f06f 0301 	mvn.w	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	e010      	b.n	8006614 <MY_SD_Init+0x3c>
  } /* Configure IO functionalities for SD pin */
  else if(SD_IO_Init() != BSP_ERROR_NONE)
 80065f2:	f000 fa9b 	bl	8006b2c <SD_IO_Init>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <MY_SD_Init+0x2c>
  {
    ret = BSP_ERROR_NO_INIT;
 80065fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	e007      	b.n	8006614 <MY_SD_Init+0x3c>
  }
  else
  {
    /* SD initialized and set to SPI mode properly */
    if(SD_GoIdleState() != BSP_ERROR_NONE)
 8006604:	f000 ff74 	bl	80074f0 <SD_GoIdleState>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <MY_SD_Init+0x3c>
    {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800660e:	f06f 0305 	mvn.w	r3, #5
 8006612:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006614:	68fb      	ldr	r3, [r7, #12]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <MY_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t MY_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	61bb      	str	r3, [r7, #24]
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <MY_SD_ReadBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800663c:	f06f 0301 	mvn.w	r3, #1
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	e0b2      	b.n	80067aa <MY_SD_ReadBlocks+0x18a>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006644:	2300      	movs	r3, #0
 8006646:	22ff      	movs	r2, #255	; 0xff
 8006648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800664c:	2010      	movs	r0, #16
 800664e:	f000 fdd1 	bl	80071f4 <SD_SendCmd>
 8006652:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 8006654:	2001      	movs	r0, #1
 8006656:	f000 fab5 	bl	8006bc4 <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800665a:	f107 0313 	add.w	r3, r7, #19
 800665e:	2101      	movs	r1, #1
 8006660:	4618      	mov	r0, r3
 8006662:	f001 f915 	bl	8007890 <BSP_SPI2_Send>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <MY_SD_ReadBlocks+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800666c:	f06f 0303 	mvn.w	r3, #3
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	e09a      	b.n	80067aa <MY_SD_ReadBlocks+0x18a>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00e      	beq.n	800669a <MY_SD_ReadBlocks+0x7a>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 800667c:	2001      	movs	r0, #1
 800667e:	f000 faa1 	bl	8006bc4 <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006682:	f107 0313 	add.w	r3, r7, #19
 8006686:	2101      	movs	r1, #1
 8006688:	4618      	mov	r0, r3
 800668a:	f001 f901 	bl	8007890 <BSP_SPI2_Send>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <MY_SD_ReadBlocks+0x7a>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006694:	f06f 0303 	mvn.w	r3, #3
 8006698:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	2b00      	cmp	r3, #0
 800669e:	f040 8084 	bne.w	80067aa <MY_SD_ReadBlocks+0x18a>
        /* Data transfer */
        do
        {
          /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
          /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U: MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	441a      	add	r2, r3
 80066a8:	4b42      	ldr	r3, [pc, #264]	; (80067b4 <MY_SD_ReadBlocks+0x194>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <MY_SD_ReadBlocks+0x94>
 80066b0:	2301      	movs	r3, #1
 80066b2:	e001      	b.n	80066b8 <MY_SD_ReadBlocks+0x98>
 80066b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b8:	fb02 f103 	mul.w	r1, r2, r3
 80066bc:	2300      	movs	r3, #0
 80066be:	22ff      	movs	r2, #255	; 0xff
 80066c0:	2011      	movs	r0, #17
 80066c2:	f000 fd97 	bl	80071f4 <SD_SendCmd>
 80066c6:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00f      	beq.n	80066f0 <MY_SD_ReadBlocks+0xd0>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 80066d0:	2001      	movs	r0, #1
 80066d2:	f000 fa77 	bl	8006bc4 <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80066d6:	f107 0313 	add.w	r3, r7, #19
 80066da:	2101      	movs	r1, #1
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 f8d7 	bl	8007890 <BSP_SPI2_Send>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <MY_SD_ReadBlocks+0xd0>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80066e8:	f06f 0303 	mvn.w	r3, #3
 80066ec:	61fb      	str	r3, [r7, #28]
              break;
 80066ee:	e05c      	b.n	80067aa <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* Now look for the data token to signify the start of the data */
          if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 80066f0:	20fe      	movs	r0, #254	; 0xfe
 80066f2:	f001 f83b 	bl	800776c <SD_WaitData>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d12f      	bne.n	800675c <MY_SD_ReadBlocks+0x13c>
          {
            /* Read the SD block data : read NumByteToRead data */
            if(BUS_SPIx_Recv((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	4413      	add	r3, r2
 8006702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006706:	4618      	mov	r0, r3
 8006708:	f001 f8de 	bl	80078c8 <BSP_SPI2_Recv>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <MY_SD_ReadBlocks+0xfa>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006712:	f06f 0303 	mvn.w	r3, #3
 8006716:	61fb      	str	r3, [r7, #28]
              break;
 8006718:	e047      	b.n	80067aa <MY_SD_ReadBlocks+0x18a>
            }

            /* Set next read address*/
            offset += MY_SD_BLOCK_SIZE;
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006720:	61bb      	str	r3, [r7, #24]
            BlocksNbr--;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	3b01      	subs	r3, #1
 8006726:	603b      	str	r3, [r7, #0]

            /* get CRC bytes (not really needed by us, but required by SD) */
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006728:	f107 0313 	add.w	r3, r7, #19
 800672c:	2101      	movs	r1, #1
 800672e:	4618      	mov	r0, r3
 8006730:	f001 f8ae 	bl	8007890 <BSP_SPI2_Send>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <MY_SD_ReadBlocks+0x122>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 800673a:	f06f 0303 	mvn.w	r3, #3
 800673e:	61fb      	str	r3, [r7, #28]
              break;
 8006740:	e033      	b.n	80067aa <MY_SD_ReadBlocks+0x18a>
            }
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006742:	f107 0313 	add.w	r3, r7, #19
 8006746:	2101      	movs	r1, #1
 8006748:	4618      	mov	r0, r3
 800674a:	f001 f8a1 	bl	8007890 <BSP_SPI2_Send>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d013      	beq.n	800677c <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006754:	f06f 0303 	mvn.w	r3, #3
 8006758:	61fb      	str	r3, [r7, #28]
              break;
 800675a:	e026      	b.n	80067aa <MY_SD_ReadBlocks+0x18a>
            }
          }
          else
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 800675c:	2001      	movs	r0, #1
 800675e:	f000 fa31 	bl	8006bc4 <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006762:	f107 0313 	add.w	r3, r7, #19
 8006766:	2101      	movs	r1, #1
 8006768:	4618      	mov	r0, r3
 800676a:	f001 f891 	bl	8007890 <BSP_SPI2_Send>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006774:	f06f 0303 	mvn.w	r3, #3
 8006778:	61fb      	str	r3, [r7, #28]
              break;
 800677a:	e016      	b.n	80067aa <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* End the command data read cycle */
          SD_IO_CSState(1);
 800677c:	2001      	movs	r0, #1
 800677e:	f000 fa21 	bl	8006bc4 <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006782:	f107 0313 	add.w	r3, r7, #19
 8006786:	2101      	movs	r1, #1
 8006788:	4618      	mov	r0, r3
 800678a:	f001 f881 	bl	8007890 <BSP_SPI2_Send>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <MY_SD_ReadBlocks+0x17c>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006794:	f06f 0303 	mvn.w	r3, #3
 8006798:	61fb      	str	r3, [r7, #28]
            break;
 800679a:	e006      	b.n	80067aa <MY_SD_ReadBlocks+0x18a>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <MY_SD_ReadBlocks+0x18a>
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f43f af7c 	beq.w	80066a2 <MY_SD_ReadBlocks+0x82>
      }
    }
  }

  /* Return BSP status */
  return ret;
 80067aa:	69fb      	ldr	r3, [r7, #28]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3720      	adds	r7, #32
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20000054 	.word	0x20000054

080067b8 <MY_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t MY_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61bb      	str	r3, [r7, #24]
  uint8_t tmp, data_response;

  if(Instance >= SD_INSTANCES_NBR)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <MY_SD_WriteBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80067d4:	f06f 0301 	mvn.w	r3, #1
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	e0e8      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80067dc:	2300      	movs	r3, #0
 80067de:	22ff      	movs	r2, #255	; 0xff
 80067e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067e4:	2010      	movs	r0, #16
 80067e6:	f000 fd05 	bl	80071f4 <SD_SendCmd>
 80067ea:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 80067ec:	2001      	movs	r0, #1
 80067ee:	f000 f9e9 	bl	8006bc4 <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 80067f2:	23ff      	movs	r3, #255	; 0xff
 80067f4:	74fb      	strb	r3, [r7, #19]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80067f6:	f107 0313 	add.w	r3, r7, #19
 80067fa:	2101      	movs	r1, #1
 80067fc:	4618      	mov	r0, r3
 80067fe:	f001 f847 	bl	8007890 <BSP_SPI2_Send>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <MY_SD_WriteBlocks+0x58>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006808:	f06f 0303 	mvn.w	r3, #3
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	e0ce      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00e      	beq.n	8006836 <MY_SD_WriteBlocks+0x7e>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 8006818:	2001      	movs	r0, #1
 800681a:	f000 f9d3 	bl	8006bc4 <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800681e:	f107 0313 	add.w	r3, r7, #19
 8006822:	2101      	movs	r1, #1
 8006824:	4618      	mov	r0, r3
 8006826:	f001 f833 	bl	8007890 <BSP_SPI2_Send>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <MY_SD_WriteBlocks+0x7e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006830:	f06f 0303 	mvn.w	r3, #3
 8006834:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	2b00      	cmp	r3, #0
 800683a:	f040 80b8 	bne.w	80069ae <MY_SD_WriteBlocks+0x1f6>
        /* Data transfer */
        do
        {
          /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
          Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U : MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	441a      	add	r2, r3
 8006844:	4b5c      	ldr	r3, [pc, #368]	; (80069b8 <MY_SD_WriteBlocks+0x200>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <MY_SD_WriteBlocks+0x98>
 800684c:	2301      	movs	r3, #1
 800684e:	e001      	b.n	8006854 <MY_SD_WriteBlocks+0x9c>
 8006850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006854:	fb02 f103 	mul.w	r1, r2, r3
 8006858:	2300      	movs	r3, #0
 800685a:	22ff      	movs	r2, #255	; 0xff
 800685c:	2018      	movs	r0, #24
 800685e:	f000 fcc9 	bl	80071f4 <SD_SendCmd>
 8006862:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00f      	beq.n	800688c <MY_SD_WriteBlocks+0xd4>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 800686c:	2001      	movs	r0, #1
 800686e:	f000 f9a9 	bl	8006bc4 <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006872:	f107 0313 	add.w	r3, r7, #19
 8006876:	2101      	movs	r1, #1
 8006878:	4618      	mov	r0, r3
 800687a:	f001 f809 	bl	8007890 <BSP_SPI2_Send>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <MY_SD_WriteBlocks+0xd4>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006884:	f06f 0303 	mvn.w	r3, #3
 8006888:	61fb      	str	r3, [r7, #28]
              break;
 800688a:	e090      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
            }
          }

          /* Send dummy byte for NWR timing : one byte between CMDWRITE and TOKEN */
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800688c:	f107 0313 	add.w	r3, r7, #19
 8006890:	2101      	movs	r1, #1
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fffc 	bl	8007890 <BSP_SPI2_Send>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <MY_SD_WriteBlocks+0xee>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 800689e:	f06f 0303 	mvn.w	r3, #3
 80068a2:	61fb      	str	r3, [r7, #28]
            break;
 80068a4:	e083      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80068a6:	f107 0313 	add.w	r3, r7, #19
 80068aa:	2101      	movs	r1, #1
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 ffef 	bl	8007890 <BSP_SPI2_Send>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <MY_SD_WriteBlocks+0x108>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80068b8:	f06f 0303 	mvn.w	r3, #3
 80068bc:	61fb      	str	r3, [r7, #28]
            break;
 80068be:	e076      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
          }

          /* Send the data token to signify the start of the data */
          tmp = SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE;
 80068c0:	23fe      	movs	r3, #254	; 0xfe
 80068c2:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80068c4:	f107 0313 	add.w	r3, r7, #19
 80068c8:	2101      	movs	r1, #1
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 ffe0 	bl	8007890 <BSP_SPI2_Send>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <MY_SD_WriteBlocks+0x126>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80068d6:	f06f 0303 	mvn.w	r3, #3
 80068da:	61fb      	str	r3, [r7, #28]
            break;
 80068dc:	e067      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
          }

          /* Write the block data to SD */
          if(BUS_SPIx_Send((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	4413      	add	r3, r2
 80068e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 ffd1 	bl	8007890 <BSP_SPI2_Send>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <MY_SD_WriteBlocks+0x144>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80068f4:	f06f 0303 	mvn.w	r3, #3
 80068f8:	61fb      	str	r3, [r7, #28]
            break;
 80068fa:	e058      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
          }

          /* Set next write address */
          offset += MY_SD_BLOCK_SIZE;
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006902:	61bb      	str	r3, [r7, #24]
          BlocksNbr--;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	3b01      	subs	r3, #1
 8006908:	603b      	str	r3, [r7, #0]

          /* get CRC bytes (not really needed by us, but required by SD) */
          tmp = SD_DUMMY_BYTE;
 800690a:	23ff      	movs	r3, #255	; 0xff
 800690c:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800690e:	f107 0313 	add.w	r3, r7, #19
 8006912:	2101      	movs	r1, #1
 8006914:	4618      	mov	r0, r3
 8006916:	f000 ffbb 	bl	8007890 <BSP_SPI2_Send>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <MY_SD_WriteBlocks+0x170>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006920:	f06f 0303 	mvn.w	r3, #3
 8006924:	61fb      	str	r3, [r7, #28]
            break;
 8006926:	e042      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006928:	f107 0313 	add.w	r3, r7, #19
 800692c:	2101      	movs	r1, #1
 800692e:	4618      	mov	r0, r3
 8006930:	f000 ffae 	bl	8007890 <BSP_SPI2_Send>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <MY_SD_WriteBlocks+0x18a>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 800693a:	f06f 0303 	mvn.w	r3, #3
 800693e:	61fb      	str	r3, [r7, #28]
            break;
 8006940:	e035      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
          }

          /* Read data response */
          if(SD_GetDataResponse(&data_response) != BSP_ERROR_NONE)
 8006942:	f107 0312 	add.w	r3, r7, #18
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fd6c 	bl	8007424 <SD_GetDataResponse>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <MY_SD_WriteBlocks+0x1a2>
          {
            ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006952:	f06f 0305 	mvn.w	r3, #5
 8006956:	61fb      	str	r3, [r7, #28]
            break;
 8006958:	e029      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
          }

          if (data_response != (uint8_t)SD_DATA_OK)
 800695a:	7cbb      	ldrb	r3, [r7, #18]
 800695c:	2b05      	cmp	r3, #5
 800695e:	d00f      	beq.n	8006980 <MY_SD_WriteBlocks+0x1c8>
          {
            /* Set response value to failure */
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006960:	2001      	movs	r0, #1
 8006962:	f000 f92f 	bl	8006bc4 <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006966:	f107 0313 	add.w	r3, r7, #19
 800696a:	2101      	movs	r1, #1
 800696c:	4618      	mov	r0, r3
 800696e:	f000 ff8f 	bl	8007890 <BSP_SPI2_Send>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <MY_SD_WriteBlocks+0x1c8>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006978:	f06f 0303 	mvn.w	r3, #3
 800697c:	61fb      	str	r3, [r7, #28]
              break;
 800697e:	e016      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
            }
          }

          SD_IO_CSState(1);
 8006980:	2001      	movs	r0, #1
 8006982:	f000 f91f 	bl	8006bc4 <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006986:	f107 0313 	add.w	r3, r7, #19
 800698a:	2101      	movs	r1, #1
 800698c:	4618      	mov	r0, r3
 800698e:	f000 ff7f 	bl	8007890 <BSP_SPI2_Send>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <MY_SD_WriteBlocks+0x1e8>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006998:	f06f 0303 	mvn.w	r3, #3
 800699c:	61fb      	str	r3, [r7, #28]
            break;
 800699e:	e006      	b.n	80069ae <MY_SD_WriteBlocks+0x1f6>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <MY_SD_WriteBlocks+0x1f6>
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f43f af48 	beq.w	800683e <MY_SD_WriteBlocks+0x86>
      }
    }
  }

  /* Return BSP status */
  return ret;
 80069ae:	69fb      	ldr	r3, [r7, #28]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3720      	adds	r7, #32
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000054 	.word	0x20000054

080069bc <MY_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t MY_SD_GetCardState(uint32_t Instance)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint32_t response;
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <MY_SD_GetCardState+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80069ca:	f06f 0301 	mvn.w	r3, #1
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	e026      	b.n	8006a20 <MY_SD_GetCardState+0x64>
  }
  else
  {
    /* Send CMD13 (SD_SEND_STATUS) to get SD status */
    response = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, (uint8_t)SD_ANSWER_R2_EXPECTED);
 80069d2:	2302      	movs	r3, #2
 80069d4:	22ff      	movs	r2, #255	; 0xff
 80069d6:	2100      	movs	r1, #0
 80069d8:	200d      	movs	r0, #13
 80069da:	f000 fc0b 	bl	80071f4 <SD_SendCmd>
 80069de:	6138      	str	r0, [r7, #16]
    SD_IO_CSState(1);
 80069e0:	2001      	movs	r0, #1
 80069e2:	f000 f8ef 	bl	8006bc4 <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 80069e6:	23ff      	movs	r3, #255	; 0xff
 80069e8:	73fb      	strb	r3, [r7, #15]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80069ea:	f107 030f 	add.w	r3, r7, #15
 80069ee:	2101      	movs	r1, #1
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 ff4d 	bl	8007890 <BSP_SPI2_Send>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <MY_SD_GetCardState+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80069fc:	f06f 0303 	mvn.w	r3, #3
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	e00d      	b.n	8006a20 <MY_SD_GetCardState+0x64>
    }/* Find SD status according to card state */
    else if(((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR) && ((uint8_t)((response & 0xFF00UL) >> 8) == (uint8_t)SD_R2_NO_ERROR))
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d107      	bne.n	8006a1c <MY_SD_GetCardState+0x60>
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d102      	bne.n	8006a1c <MY_SD_GetCardState+0x60>
    {
      ret = (int32_t)SD_TRANSFER_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	e001      	b.n	8006a20 <MY_SD_GetCardState+0x64>
    }
    else
    {
      //ret = (int32_t)SD_TRANSFER_BUSY;
      ret = (int32_t)SD_TRANSFER_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return Status */
  return ret;
 8006a20:	697b      	ldr	r3, [r7, #20]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <MY_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
int32_t MY_SD_GetCardInfo(uint32_t Instance, MY_SD_CardInfo_t *CardInfo)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <MY_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006a40:	f06f 0301 	mvn.w	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	e069      	b.n	8006b1c <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCSDRegister(&(CardInfo->Csd)) != BSP_ERROR_NONE)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f8d2 	bl	8006bf4 <SD_GetCSDRegister>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <MY_SD_GetCardInfo+0x32>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006a56:	f06f 0305 	mvn.w	r3, #5
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	e05e      	b.n	8006b1c <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCIDRegister(&(CardInfo->Cid)) != BSP_ERROR_NONE)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	3314      	adds	r3, #20
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 faf4 	bl	8007050 <SD_GetCIDRegister>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <MY_SD_GetCardInfo+0x4a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006a6e:	f06f 0305 	mvn.w	r3, #5
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e052      	b.n	8006b1c <MY_SD_GetCardInfo+0xf0>
  }
  else if(CardType == MY_CARD_SDHC)
 8006a76:	4b2c      	ldr	r3, [pc, #176]	; (8006b28 <MY_SD_GetCardInfo+0xfc>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d11c      	bne.n	8006ab8 <MY_SD_GetCardInfo+0x8c>
  {
    CardInfo->LogBlockSize = 512U;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a84:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = 512U;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity = (CardInfo->Csd.version.v2.DeviceSize + 1U) * 1024U * CardInfo->LogBlockSize;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f3c3 1395 	ubfx	r3, r3, #6, #22
 8006a96:	3301      	adds	r3, #1
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a9c:	fb02 f303 	mul.w	r3, r2, r3
 8006aa0:	029a      	lsls	r2, r3, #10
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aae:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	645a      	str	r2, [r3, #68]	; 0x44
 8006ab6:	e031      	b.n	8006b1c <MY_SD_GetCardInfo+0xf0>
  }
  else
  {
    CardInfo->CardCapacity = ((uint32_t)CardInfo->Csd.version.v1.DeviceSize + 1U) ;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	891b      	ldrh	r3, [r3, #8]
 8006abc:	f3c3 038b 	ubfx	r3, r3, #2, #12
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->CardCapacity *= (1UL << (CardInfo->Csd.version.v1.DeviceSizeMul + 2U));
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	7adb      	ldrb	r3, [r3, #11]
 8006ad0:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	3302      	adds	r3, #2
 8006ad8:	409a      	lsls	r2, r3
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockSize = 512U;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae4:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = (1UL << (uint32_t)CardInfo->Csd.RdBlockLen);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	795b      	ldrb	r3, [r3, #5]
 8006aea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	2301      	movs	r3, #1
 8006af4:	fa03 f202 	lsl.w	r2, r3, r2
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity *= CardInfo->CardBlockSize;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b04:	fb02 f203 	mul.w	r2, r2, r3
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return ret;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000054 	.word	0x20000054

08006b2c <SD_IO_Init>:
  * @brief  Initializes the SD Card and put it into StandBy State (Ready for
  *         data transfer).
  * @retval BSP status
  */
static int32_t SD_IO_Init(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61fb      	str	r3, [r7, #28]
  uint8_t counter = 0, tmp;
 8006b36:	2300      	movs	r3, #0
 8006b38:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* SD_CS_GPIO Periph clock enable */
  MY_SD_CS_GPIO_CLK_ENABLE();
 8006b3a:	4b20      	ldr	r3, [pc, #128]	; (8006bbc <SD_IO_Init+0x90>)
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3e:	4a1f      	ldr	r2, [pc, #124]	; (8006bbc <SD_IO_Init+0x90>)
 8006b40:	f043 0302 	orr.w	r3, r3, #2
 8006b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b46:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <SD_IO_Init+0x90>)
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	683b      	ldr	r3, [r7, #0]

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  GPIO_InitStruct.Pin   = MY_SD_CS_PIN;
 8006b52:	2304      	movs	r3, #4
 8006b54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8006b56:	2301      	movs	r3, #1
 8006b58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MY_SD_CS_GPIO_PORT, &GPIO_InitStruct);
 8006b62:	1d3b      	adds	r3, r7, #4
 8006b64:	4619      	mov	r1, r3
 8006b66:	4816      	ldr	r0, [pc, #88]	; (8006bc0 <SD_IO_Init+0x94>)
 8006b68:	f7fb f9de 	bl	8001f28 <HAL_GPIO_Init>

  /*------------Put SD in SPI mode--------------*/
  /* SD SPI Config */
  if(BUS_SPIx_Init() != BSP_ERROR_NONE)
 8006b6c:	f000 fe40 	bl	80077f0 <BSP_SPI2_Init>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <SD_IO_Init+0x52>
  {
    ret = BSP_ERROR_NO_INIT;
 8006b76:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	e019      	b.n	8006bb2 <SD_IO_Init+0x86>
  }
  else
  {
    /* SD chip select high */
    MY_SD_CS_HIGH();
 8006b7e:	2201      	movs	r2, #1
 8006b80:	2104      	movs	r1, #4
 8006b82:	480f      	ldr	r0, [pc, #60]	; (8006bc0 <SD_IO_Init+0x94>)
 8006b84:	f7fb fb52 	bl	800222c <HAL_GPIO_WritePin>

    /* Send dummy byte 0xFF, 10 times with CS high */
    /* Rise CS and MOSI for 80 clocks cycles */
    tmp = SD_DUMMY_BYTE;
 8006b88:	23ff      	movs	r3, #255	; 0xff
 8006b8a:	76bb      	strb	r3, [r7, #26]

    do
    {
      /* Send dummy byte 0xFF */
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b8c:	f107 031a 	add.w	r3, r7, #26
 8006b90:	2101      	movs	r1, #1
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fe7c 	bl	8007890 <BSP_SPI2_Send>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <SD_IO_Init+0x7a>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006b9e:	f06f 0303 	mvn.w	r3, #3
 8006ba2:	61fb      	str	r3, [r7, #28]
        break;
 8006ba4:	e005      	b.n	8006bb2 <SD_IO_Init+0x86>
      }
      counter++;
 8006ba6:	7efb      	ldrb	r3, [r7, #27]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	76fb      	strb	r3, [r7, #27]
    }while(counter <= 9U);
 8006bac:	7efb      	ldrb	r3, [r7, #27]
 8006bae:	2b09      	cmp	r3, #9
 8006bb0:	d9ec      	bls.n	8006b8c <SD_IO_Init+0x60>
  }

  return ret;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3720      	adds	r7, #32
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	48000400 	.word	0x48000400

08006bc4 <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  Value pin's value.
  * @retval None
  */
static void SD_IO_CSState(uint32_t Value)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  if(Value == 1U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d105      	bne.n	8006bde <SD_IO_CSState+0x1a>
  {
    MY_SD_CS_HIGH();
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	2104      	movs	r1, #4
 8006bd6:	4806      	ldr	r0, [pc, #24]	; (8006bf0 <SD_IO_CSState+0x2c>)
 8006bd8:	f7fb fb28 	bl	800222c <HAL_GPIO_WritePin>
  }
  else
  {
    MY_SD_CS_LOW();
  }
}
 8006bdc:	e004      	b.n	8006be8 <SD_IO_CSState+0x24>
    MY_SD_CS_LOW();
 8006bde:	2200      	movs	r2, #0
 8006be0:	2104      	movs	r1, #4
 8006be2:	4803      	ldr	r0, [pc, #12]	; (8006bf0 <SD_IO_CSState+0x2c>)
 8006be4:	f7fb fb22 	bl	800222c <HAL_GPIO_WritePin>
}
 8006be8:	bf00      	nop
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	48000400 	.word	0x48000400

08006bf4 <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd pointer on an SCD register structure
  * @retval SD status
  */
static int32_t SD_GetCSDRegister(SD_CardSpecificData_t* Csd)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b096      	sub	sp, #88	; 0x58
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t CSD_Tab[16];
  uint32_t response;
  uint8_t tmp;

  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006c00:	2300      	movs	r3, #0
 8006c02:	22ff      	movs	r2, #255	; 0xff
 8006c04:	2100      	movs	r1, #0
 8006c06:	2009      	movs	r0, #9
 8006c08:	f000 faf4 	bl	80071f4 <SD_SendCmd>
 8006c0c:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8006c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f040 8202 	bne.w	800701c <SD_GetCSDRegister+0x428>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006c18:	20fe      	movs	r0, #254	; 0xfe
 8006c1a:	f000 fda7 	bl	800776c <SD_WaitData>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f040 81fe 	bne.w	8007022 <SD_GetCSDRegister+0x42e>
    {
      tmp = SD_DUMMY_BYTE;
 8006c26:	23ff      	movs	r3, #255	; 0xff
 8006c28:	72fb      	strb	r3, [r7, #11]
      for (counter = 0U; counter < 16U; counter++)
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c2e:	e014      	b.n	8006c5a <SD_GetCSDRegister+0x66>
      {
        /* Store CSD register value on CSD_Tab */
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CSD_Tab[counter], 1U) != BSP_ERROR_NONE)
 8006c30:	f107 020c 	add.w	r2, r7, #12
 8006c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	18d1      	adds	r1, r2, r3
 8006c3a:	f107 030b 	add.w	r3, r7, #11
 8006c3e:	2201      	movs	r2, #1
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fe5d 	bl	8007900 <BSP_SPI2_SendRecv>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <SD_GetCSDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006c4c:	f06f 0303 	mvn.w	r3, #3
 8006c50:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8006c52:	e005      	b.n	8006c60 <SD_GetCSDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8006c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c56:	3301      	adds	r3, #1
 8006c58:	653b      	str	r3, [r7, #80]	; 0x50
 8006c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c5c:	2b0f      	cmp	r3, #15
 8006c5e:	d9e7      	bls.n	8006c30 <SD_GetCSDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 81dd 	bne.w	8007022 <SD_GetCSDRegister+0x42e>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006c68:	f107 030b 	add.w	r3, r7, #11
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fe0e 	bl	8007890 <BSP_SPI2_Send>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <SD_GetCSDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006c7a:	f06f 0303 	mvn.w	r3, #3
 8006c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8006c80:	e1cf      	b.n	8007022 <SD_GetCSDRegister+0x42e>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006c82:	f107 030b 	add.w	r3, r7, #11
 8006c86:	2101      	movs	r1, #1
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fe01 	bl	8007890 <BSP_SPI2_Send>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <SD_GetCSDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006c94:	f06f 0303 	mvn.w	r3, #3
 8006c98:	657b      	str	r3, [r7, #84]	; 0x54
 8006c9a:	e1c2      	b.n	8007022 <SD_GetCSDRegister+0x42e>
          /*************************************************************************
          CSD header decoding
          *************************************************************************/

          /* Byte 0 */
          Csd->CSDStruct = (CSD_Tab[0] & 0xC0U) >> 6U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	099b      	lsrs	r3, r3, #6
 8006ca0:	f003 0303 	and.w	r3, r3, #3
 8006ca4:	b2d9      	uxtb	r1, r3
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	7813      	ldrb	r3, [r2, #0]
 8006caa:	f361 0301 	bfi	r3, r1, #0, #2
 8006cae:	7013      	strb	r3, [r2, #0]
          Csd->Reserved1 =  CSD_Tab[0] & 0x3FU;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cb6:	b2d9      	uxtb	r1, r3
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	7813      	ldrb	r3, [r2, #0]
 8006cbc:	f361 0387 	bfi	r3, r1, #2, #6
 8006cc0:	7013      	strb	r3, [r2, #0]

          /* Byte 1 */
          Csd->TAAC = CSD_Tab[1];
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	705a      	strb	r2, [r3, #1]

          /* Byte 2 */
          Csd->NSAC = CSD_Tab[2];
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	709a      	strb	r2, [r3, #2]

          /* Byte 3 */
          Csd->MaxBusClkFrec = CSD_Tab[3];
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	70da      	strb	r2, [r3, #3]

          /* Byte 4/5 */
          Csd->CardComdClasses = (uint16_t)(((uint16_t)CSD_Tab[4] << 4U) | ((uint16_t)(CSD_Tab[5] & 0xF0U) >> 4U));
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	b21a      	sxth	r2, r3
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	111b      	asrs	r3, r3, #4
 8006ce8:	b21b      	sxth	r3, r3
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	b21b      	sxth	r3, r3
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	b21b      	sxth	r3, r3
 8006cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cf8:	b299      	uxth	r1, r3
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	8893      	ldrh	r3, [r2, #4]
 8006cfe:	f361 030b 	bfi	r3, r1, #0, #12
 8006d02:	8093      	strh	r3, [r2, #4]
          Csd->RdBlockLen = CSD_Tab[5] & 0x0FU;
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	b2d9      	uxtb	r1, r3
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	7953      	ldrb	r3, [r2, #5]
 8006d10:	f361 1307 	bfi	r3, r1, #4, #4
 8006d14:	7153      	strb	r3, [r2, #5]

          /* Byte 6 */
          Csd->PartBlockRead   = (CSD_Tab[6] & 0x80U) >> 7U;
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	09db      	lsrs	r3, r3, #7
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	b2d9      	uxtb	r1, r3
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	7993      	ldrb	r3, [r2, #6]
 8006d24:	f361 0300 	bfi	r3, r1, #0, #1
 8006d28:	7193      	strb	r3, [r2, #6]
          Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40U) >> 6U;
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	099b      	lsrs	r3, r3, #6
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	b2d9      	uxtb	r1, r3
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	7993      	ldrb	r3, [r2, #6]
 8006d38:	f361 0341 	bfi	r3, r1, #1, #1
 8006d3c:	7193      	strb	r3, [r2, #6]
          Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20U) >> 5U;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	b2d9      	uxtb	r1, r3
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	7993      	ldrb	r3, [r2, #6]
 8006d4c:	f361 0382 	bfi	r3, r1, #2, #1
 8006d50:	7193      	strb	r3, [r2, #6]
          Csd->DSRImpl         = (CSD_Tab[6] & 0x10U) >> 4U;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	091b      	lsrs	r3, r3, #4
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	b2d9      	uxtb	r1, r3
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	7993      	ldrb	r3, [r2, #6]
 8006d60:	f361 03c3 	bfi	r3, r1, #3, #1
 8006d64:	7193      	strb	r3, [r2, #6]

          /*************************************************************************
          CSD v1/v2 decoding
          *************************************************************************/

          if(CardType == MY_CARD_SDSC)
 8006d66:	4bac      	ldr	r3, [pc, #688]	; (8007018 <SD_GetCSDRegister+0x424>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d165      	bne.n	8006e3a <SD_GetCSDRegister+0x246>
          {
            Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0CU) >> 2U);
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	089b      	lsrs	r3, r3, #2
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	b2d9      	uxtb	r1, r3
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7a13      	ldrb	r3, [r2, #8]
 8006d7c:	f361 0301 	bfi	r3, r1, #0, #2
 8006d80:	7213      	strb	r3, [r2, #8]

            Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03U) << 10U) | (CSD_Tab[7] << 2U) | ((CSD_Tab[8] & 0xC0U) >> 6U);
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	029b      	lsls	r3, r3, #10
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	099b      	lsrs	r3, r3, #6
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	4313      	orrs	r3, r2
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006db0:	b299      	uxth	r1, r3
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	8913      	ldrh	r3, [r2, #8]
 8006db6:	f361 038d 	bfi	r3, r1, #2, #12
 8006dba:	8113      	strh	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38U) >> 3U;
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	08db      	lsrs	r3, r3, #3
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	b2d9      	uxtb	r1, r3
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6893      	ldr	r3, [r2, #8]
 8006dca:	f361 3390 	bfi	r3, r1, #14, #3
 8006dce:	6093      	str	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07U);
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	b2d9      	uxtb	r1, r3
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	7a93      	ldrb	r3, [r2, #10]
 8006ddc:	f361 0343 	bfi	r3, r1, #1, #3
 8006de0:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0U) >> 5U;
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	b2d9      	uxtb	r1, r3
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	7a93      	ldrb	r3, [r2, #10]
 8006df0:	f361 1306 	bfi	r3, r1, #4, #3
 8006df4:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1CU) >> 2U;
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	089b      	lsrs	r3, r3, #2
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	b2d9      	uxtb	r1, r3
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	8953      	ldrh	r3, [r2, #10]
 8006e04:	f361 13c9 	bfi	r3, r1, #7, #3
 8006e08:	8153      	strh	r3, [r2, #10]
            Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03U) << 1U) | ((CSD_Tab[10] & 0x80U) >> 7U);
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f003 0306 	and.w	r3, r3, #6
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1a:	09db      	lsrs	r3, r3, #7
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	4313      	orrs	r3, r2
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	b2d9      	uxtb	r1, r3
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	7ad3      	ldrb	r3, [r2, #11]
 8006e32:	f361 0384 	bfi	r3, r1, #2, #3
 8006e36:	72d3      	strb	r3, [r2, #11]
 8006e38:	e02b      	b.n	8006e92 <SD_GetCSDRegister+0x29e>
          }
          else
          {
            Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0FU) << 2U) | ((CSD_Tab[7] & 0xC0U) >> 6U);
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	099b      	lsrs	r3, r3, #6
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	4313      	orrs	r3, r2
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e5c:	b2d9      	uxtb	r1, r3
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	7a13      	ldrb	r3, [r2, #8]
 8006e62:	f361 0305 	bfi	r3, r1, #0, #6
 8006e66:	7213      	strb	r3, [r2, #8]
            Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3FU) << 16U) | (CSD_Tab[8] << 8U) | CSD_Tab[9];
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	041b      	lsls	r3, r3, #16
 8006e6c:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	431a      	orrs	r2, r3
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f3c3 0115 	ubfx	r1, r3, #0, #22
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6893      	ldr	r3, [r2, #8]
 8006e82:	f361 139b 	bfi	r3, r1, #6, #22
 8006e86:	6093      	str	r3, [r2, #8]
            Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80U) >> 8U);
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	7ad3      	ldrb	r3, [r2, #11]
 8006e8c:	f36f 1304 	bfc	r3, #4, #1
 8006e90:	72d3      	strb	r3, [r2, #11]
          }

          Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40U) >> 6U;
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	099b      	lsrs	r3, r3, #6
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	b2d9      	uxtb	r1, r3
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	7b13      	ldrb	r3, [r2, #12]
 8006ea0:	f361 0300 	bfi	r3, r1, #0, #1
 8006ea4:	7313      	strb	r3, [r2, #12]
          Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3FU) << 1U) | ((CSD_Tab[11] & 0x80U) >> 7U);
 8006ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	09db      	lsrs	r3, r3, #7
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec8:	b2d9      	uxtb	r1, r3
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	7b13      	ldrb	r3, [r2, #12]
 8006ece:	f361 0347 	bfi	r3, r1, #1, #7
 8006ed2:	7313      	strb	r3, [r2, #12]
          Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7FU);
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eda:	b2d9      	uxtb	r1, r3
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	7b53      	ldrb	r3, [r2, #13]
 8006ee0:	f361 0306 	bfi	r3, r1, #0, #7
 8006ee4:	7353      	strb	r3, [r2, #13]
          Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80U) >> 7U;
 8006ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee8:	09db      	lsrs	r3, r3, #7
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	b2d9      	uxtb	r1, r3
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7b53      	ldrb	r3, [r2, #13]
 8006ef4:	f361 13c7 	bfi	r3, r1, #7, #1
 8006ef8:	7353      	strb	r3, [r2, #13]
          Csd->Reserved2         = (CSD_Tab[12] & 0x60U) >> 5U;
 8006efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	b2d9      	uxtb	r1, r3
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	7b93      	ldrb	r3, [r2, #14]
 8006f08:	f361 0301 	bfi	r3, r1, #0, #2
 8006f0c:	7393      	strb	r3, [r2, #14]
          Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1CU) >> 2U;
 8006f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f10:	089b      	lsrs	r3, r3, #2
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	b2d9      	uxtb	r1, r3
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	7b93      	ldrb	r3, [r2, #14]
 8006f1c:	f361 0384 	bfi	r3, r1, #2, #3
 8006f20:	7393      	strb	r3, [r2, #14]
          Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03U) << 2U) | ((CSD_Tab[13] & 0xC0U) >> 6U);
 8006f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f003 030c 	and.w	r3, r3, #12
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f32:	099b      	lsrs	r3, r3, #6
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	f003 030f 	and.w	r3, r3, #15
 8006f44:	b2d9      	uxtb	r1, r3
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	89d3      	ldrh	r3, [r2, #14]
 8006f4a:	f361 1348 	bfi	r3, r1, #5, #4
 8006f4e:	81d3      	strh	r3, [r2, #14]
          Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20U) >> 5U;
 8006f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	b2d9      	uxtb	r1, r3
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	7bd3      	ldrb	r3, [r2, #15]
 8006f5e:	f361 0341 	bfi	r3, r1, #1, #1
 8006f62:	73d3      	strb	r3, [r2, #15]
          Csd->Reserved3         = (CSD_Tab[13] & 0x1FU);
 8006f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f66:	f003 031f 	and.w	r3, r3, #31
 8006f6a:	b2d9      	uxtb	r1, r3
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	7bd3      	ldrb	r3, [r2, #15]
 8006f70:	f361 0386 	bfi	r3, r1, #2, #5
 8006f74:	73d3      	strb	r3, [r2, #15]
          Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80U) >> 7U;
 8006f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f78:	09db      	lsrs	r3, r3, #7
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	b2d9      	uxtb	r1, r3
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	7bd3      	ldrb	r3, [r2, #15]
 8006f84:	f361 13c7 	bfi	r3, r1, #7, #1
 8006f88:	73d3      	strb	r3, [r2, #15]
          Csd->CopyFlag          = (CSD_Tab[14] & 0x40U) >> 6U;
 8006f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8c:	099b      	lsrs	r3, r3, #6
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	b2d9      	uxtb	r1, r3
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	7c13      	ldrb	r3, [r2, #16]
 8006f98:	f361 0300 	bfi	r3, r1, #0, #1
 8006f9c:	7413      	strb	r3, [r2, #16]
          Csd->PermWrProtect     = (CSD_Tab[14] & 0x20U) >> 5U;
 8006f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	b2d9      	uxtb	r1, r3
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	7c13      	ldrb	r3, [r2, #16]
 8006fac:	f361 0341 	bfi	r3, r1, #1, #1
 8006fb0:	7413      	strb	r3, [r2, #16]
          Csd->TempWrProtect     = (CSD_Tab[14] & 0x10U) >> 4U;
 8006fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	b2d9      	uxtb	r1, r3
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	7c13      	ldrb	r3, [r2, #16]
 8006fc0:	f361 0382 	bfi	r3, r1, #2, #1
 8006fc4:	7413      	strb	r3, [r2, #16]
          Csd->FileFormat        = (CSD_Tab[14] & 0x0CU) >> 2U;
 8006fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc8:	089b      	lsrs	r3, r3, #2
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	b2d9      	uxtb	r1, r3
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	7c13      	ldrb	r3, [r2, #16]
 8006fd4:	f361 03c4 	bfi	r3, r1, #3, #2
 8006fd8:	7413      	strb	r3, [r2, #16]
          Csd->Reserved4         = (CSD_Tab[14] & 0x03U);
 8006fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fdc:	f003 0303 	and.w	r3, r3, #3
 8006fe0:	b2d9      	uxtb	r1, r3
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	7c13      	ldrb	r3, [r2, #16]
 8006fe6:	f361 1346 	bfi	r3, r1, #5, #2
 8006fea:	7413      	strb	r3, [r2, #16]
          Csd->crc               = (CSD_Tab[15] & 0xFEU) >> 1U;
 8006fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fee:	085b      	lsrs	r3, r3, #1
 8006ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff4:	b2d9      	uxtb	r1, r3
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	8a13      	ldrh	r3, [r2, #16]
 8006ffa:	f361 13cd 	bfi	r3, r1, #7, #7
 8006ffe:	8213      	strh	r3, [r2, #16]
          Csd->Reserved5         = (CSD_Tab[15] & 0x01U);
 8007000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	b2d9      	uxtb	r1, r3
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7c53      	ldrb	r3, [r2, #17]
 800700c:	f361 1386 	bfi	r3, r1, #6, #1
 8007010:	7453      	strb	r3, [r2, #17]

          ret = BSP_ERROR_NONE;
 8007012:	2300      	movs	r3, #0
 8007014:	657b      	str	r3, [r7, #84]	; 0x54
 8007016:	e004      	b.n	8007022 <SD_GetCSDRegister+0x42e>
 8007018:	20000054 	.word	0x20000054
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800701c:	f06f 0305 	mvn.w	r3, #5
 8007020:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 8007022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10e      	bne.n	8007046 <SD_GetCSDRegister+0x452>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 8007028:	2001      	movs	r0, #1
 800702a:	f7ff fdcb 	bl	8006bc4 <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800702e:	f107 030b 	add.w	r3, r7, #11
 8007032:	2101      	movs	r1, #1
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fc2b 	bl	8007890 <BSP_SPI2_Send>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <SD_GetCSDRegister+0x452>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007040:	f06f 0303 	mvn.w	r3, #3
 8007044:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 8007046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8007048:	4618      	mov	r0, r3
 800704a:	3758      	adds	r7, #88	; 0x58
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
static int32_t SD_GetCIDRegister(SD_CardIdData_t* Cid)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b096      	sub	sp, #88	; 0x58
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007058:	2300      	movs	r3, #0
 800705a:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t response;
  uint32_t counter;
  uint8_t tmp;

  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CID, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800705c:	2300      	movs	r3, #0
 800705e:	22ff      	movs	r2, #255	; 0xff
 8007060:	2100      	movs	r1, #0
 8007062:	200a      	movs	r0, #10
 8007064:	f000 f8c6 	bl	80071f4 <SD_SendCmd>
 8007068:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 800706a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	f040 80a6 	bne.w	80071c0 <SD_GetCIDRegister+0x170>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8007074:	20fe      	movs	r0, #254	; 0xfe
 8007076:	f000 fb79 	bl	800776c <SD_WaitData>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	f040 80a2 	bne.w	80071c6 <SD_GetCIDRegister+0x176>
    {
      tmp = SD_DUMMY_BYTE;
 8007082:	23ff      	movs	r3, #255	; 0xff
 8007084:	72fb      	strb	r3, [r7, #11]

      /* Store CID register value on CID_Tab */
      for (counter = 0U; counter < 16U; counter++)
 8007086:	2300      	movs	r3, #0
 8007088:	653b      	str	r3, [r7, #80]	; 0x50
 800708a:	e014      	b.n	80070b6 <SD_GetCIDRegister+0x66>
      {
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CID_Tab[counter], 1U) != BSP_ERROR_NONE)
 800708c:	f107 020c 	add.w	r2, r7, #12
 8007090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	18d1      	adds	r1, r2, r3
 8007096:	f107 030b 	add.w	r3, r7, #11
 800709a:	2201      	movs	r2, #1
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fc2f 	bl	8007900 <BSP_SPI2_SendRecv>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <SD_GetCIDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80070a8:	f06f 0303 	mvn.w	r3, #3
 80070ac:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 80070ae:	e005      	b.n	80070bc <SD_GetCIDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 80070b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070b2:	3301      	adds	r3, #1
 80070b4:	653b      	str	r3, [r7, #80]	; 0x50
 80070b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070b8:	2b0f      	cmp	r3, #15
 80070ba:	d9e7      	bls.n	800708c <SD_GetCIDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 80070bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f040 8081 	bne.w	80071c6 <SD_GetCIDRegister+0x176>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80070c4:	f107 030b 	add.w	r3, r7, #11
 80070c8:	2101      	movs	r1, #1
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fbe0 	bl	8007890 <BSP_SPI2_Send>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <SD_GetCIDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80070d6:	f06f 0303 	mvn.w	r3, #3
 80070da:	657b      	str	r3, [r7, #84]	; 0x54
 80070dc:	e073      	b.n	80071c6 <SD_GetCIDRegister+0x176>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80070de:	f107 030b 	add.w	r3, r7, #11
 80070e2:	2101      	movs	r1, #1
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fbd3 	bl	8007890 <BSP_SPI2_Send>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <SD_GetCIDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80070f0:	f06f 0303 	mvn.w	r3, #3
 80070f4:	657b      	str	r3, [r7, #84]	; 0x54
 80070f6:	e066      	b.n	80071c6 <SD_GetCIDRegister+0x176>
        }
        else
        {
          /* Byte 0 */
          Cid->ManufacturerID = CID_Tab[0];
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]

          /* Byte 1 */
          Cid->OEM_AppliID = CID_Tab[1] << 8U;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	021a      	lsls	r2, r3, #8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	605a      	str	r2, [r3, #4]

          /* Byte 2 */
          Cid->OEM_AppliID |= CID_Tab[2];
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	605a      	str	r2, [r3, #4]

          /* Byte 3 */
          Cid->ProdName1 = CID_Tab[3] << 24U;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	061a      	lsls	r2, r3, #24
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	609a      	str	r2, [r3, #8]

          /* Byte 4 */
          Cid->ProdName1 |= CID_Tab[4] << 16U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689a      	ldr	r2, [r3, #8]
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	041b      	lsls	r3, r3, #16
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	609a      	str	r2, [r3, #8]

          /* Byte 5 */
          Cid->ProdName1 |= CID_Tab[5] << 8U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	609a      	str	r2, [r3, #8]

          /* Byte 6 */
          Cid->ProdName1 |= CID_Tab[6];
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	431a      	orrs	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	609a      	str	r2, [r3, #8]

          /* Byte 7 */
          Cid->ProdName2 = CID_Tab[7];
 8007142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	60da      	str	r2, [r3, #12]

          /* Byte 8 */
          Cid->ProdRev = CID_Tab[8];
 8007148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	611a      	str	r2, [r3, #16]

          /* Byte 9 */
          Cid->ProdSN = CID_Tab[9] << 24U;
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	061a      	lsls	r2, r3, #24
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	615a      	str	r2, [r3, #20]

          /* Byte 10 */
          Cid->ProdSN |= CID_Tab[10] << 16U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	695a      	ldr	r2, [r3, #20]
 800715a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715c:	041b      	lsls	r3, r3, #16
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	615a      	str	r2, [r3, #20]

          /* Byte 11 */
          Cid->ProdSN |= CID_Tab[11] << 8U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695a      	ldr	r2, [r3, #20]
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	431a      	orrs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	615a      	str	r2, [r3, #20]

          /* Byte 12 */
          Cid->ProdSN |= CID_Tab[12];
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695a      	ldr	r2, [r3, #20]
 8007176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007178:	431a      	orrs	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	615a      	str	r2, [r3, #20]

          /* Byte 13 */
          Cid->Reserved1 |= (CID_Tab[13] & 0xF0U) >> 4U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007184:	091b      	lsrs	r3, r3, #4
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	619a      	str	r2, [r3, #24]
          Cid->ManufactDate = (CID_Tab[13] & 0x0FU) << 8U;
 8007190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	61da      	str	r2, [r3, #28]

          /* Byte 14 */
          Cid->ManufactDate |= CID_Tab[14];
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	61da      	str	r2, [r3, #28]

          /* Byte 15 */
          Cid->CID_CRC = (CID_Tab[15] & 0xFEU) >> 1U;
 80071a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071aa:	085b      	lsrs	r3, r3, #1
 80071ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	621a      	str	r2, [r3, #32]
          Cid->Reserved2 = 1U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	625a      	str	r2, [r3, #36]	; 0x24

          ret = BSP_ERROR_NONE;
 80071ba:	2300      	movs	r3, #0
 80071bc:	657b      	str	r3, [r7, #84]	; 0x54
 80071be:	e002      	b.n	80071c6 <SD_GetCIDRegister+0x176>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80071c0:	f06f 0305 	mvn.w	r3, #5
 80071c4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 80071c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10e      	bne.n	80071ea <SD_GetCIDRegister+0x19a>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 80071cc:	2001      	movs	r0, #1
 80071ce:	f7ff fcf9 	bl	8006bc4 <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80071d2:	f107 030b 	add.w	r3, r7, #11
 80071d6:	2101      	movs	r1, #1
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fb59 	bl	8007890 <BSP_SPI2_Send>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <SD_GetCIDRegister+0x19a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80071e4:	f06f 0303 	mvn.w	r3, #3
 80071e8:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 80071ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3758      	adds	r7, #88	; 0x58
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <SD_SendCmd>:
  * @param  Crc The CRC.
  * @param  Answer SD_ANSWER_NOT_EXPECTED or SD_ANSWER_EXPECTED
  * @retval SD response or 0xFFFF in case of error
  */
static uint32_t SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Answer)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6039      	str	r1, [r7, #0]
 80071fc:	4611      	mov	r1, r2
 80071fe:	461a      	mov	r2, r3
 8007200:	4603      	mov	r3, r0
 8007202:	71fb      	strb	r3, [r7, #7]
 8007204:	460b      	mov	r3, r1
 8007206:	71bb      	strb	r3, [r7, #6]
 8007208:	4613      	mov	r3, r2
 800720a:	717b      	strb	r3, [r7, #5]
  uint8_t frame[SD_CMD_LENGTH], frameout[SD_CMD_LENGTH];
  uint32_t response = 0xFFFF;
 800720c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007210:	61fb      	str	r3, [r7, #28]
  /* R1 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 1 Bytes answer + NEC(0) = 15bytes */
  /* R1b identical to R1 + Busy information                                                   */
  /* R2 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 2 Bytes answer + NEC(0) = 16bytes */

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40U);         /* Construct byte 1 */
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007218:	b2db      	uxtb	r3, r3
 800721a:	753b      	strb	r3, [r7, #20]
  frame[1] = (uint8_t)(Arg >> 24U); /* Construct byte 2 */
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	0e1b      	lsrs	r3, r3, #24
 8007220:	b2db      	uxtb	r3, r3
 8007222:	757b      	strb	r3, [r7, #21]
  frame[2] = (uint8_t)(Arg >> 16U); /* Construct byte 3 */
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	0c1b      	lsrs	r3, r3, #16
 8007228:	b2db      	uxtb	r3, r3
 800722a:	75bb      	strb	r3, [r7, #22]
  frame[3] = (uint8_t)(Arg >> 8U);  /* Construct byte 4 */
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	0a1b      	lsrs	r3, r3, #8
 8007230:	b2db      	uxtb	r3, r3
 8007232:	75fb      	strb	r3, [r7, #23]
  frame[4] = (uint8_t)(Arg);        /* Construct byte 5 */
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	763b      	strb	r3, [r7, #24]
  frame[5] = (Crc | 0x01U);         /* Construct byte 6 */
 800723a:	79bb      	ldrb	r3, [r7, #6]
 800723c:	f043 0301 	orr.w	r3, r3, #1
 8007240:	b2db      	uxtb	r3, r3
 8007242:	767b      	strb	r3, [r7, #25]

  /* Send the command */
  SD_IO_CSState(0);
 8007244:	2000      	movs	r0, #0
 8007246:	f7ff fcbd 	bl	8006bc4 <SD_IO_CSState>
  /* Send the Cmd bytes */
  if(BUS_SPIx_SendRecv(frame, frameout, SD_CMD_LENGTH) != BSP_ERROR_NONE)
 800724a:	f107 010c 	add.w	r1, r7, #12
 800724e:	f107 0314 	add.w	r3, r7, #20
 8007252:	2206      	movs	r2, #6
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fb53 	bl	8007900 <BSP_SPI2_SendRecv>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <SD_SendCmd+0x72>
  {
    return 0xFFFF;
 8007260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007264:	e0da      	b.n	800741c <SD_SendCmd+0x228>
  }
  tmp = SD_DUMMY_BYTE;
 8007266:	23ff      	movs	r3, #255	; 0xff
 8007268:	72fb      	strb	r3, [r7, #11]
  switch(Answer)
 800726a:	797b      	ldrb	r3, [r7, #5]
 800726c:	2b05      	cmp	r3, #5
 800726e:	f200 80d1 	bhi.w	8007414 <SD_SendCmd+0x220>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <SD_SendCmd+0x84>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	08007291 	.word	0x08007291
 800727c:	080072ad 	.word	0x080072ad
 8007280:	0800733f 	.word	0x0800733f
 8007284:	08007381 	.word	0x08007381
 8007288:	08007415 	.word	0x08007415
 800728c:	08007381 	.word	0x08007381
  {
  case SD_ANSWER_R1_EXPECTED :
    /* Sends one byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8007290:	f107 030a 	add.w	r3, r7, #10
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fa3f 	bl	8007718 <SD_ReadData>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <SD_SendCmd+0xb2>
    {
      return 0xFFFF;
 80072a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072a4:	e0ba      	b.n	800741c <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80072a6:	7abb      	ldrb	r3, [r7, #10]
 80072a8:	61fb      	str	r3, [r7, #28]
    break;
 80072aa:	e0b6      	b.n	800741a <SD_SendCmd+0x226>
  case SD_ANSWER_R1B_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80072ac:	f107 030a 	add.w	r3, r7, #10
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fa31 	bl	8007718 <SD_ReadData>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <SD_SendCmd+0xce>
    {
      return 0xFFFF;
 80072bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072c0:	e0ac      	b.n	800741c <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80072c2:	7abb      	ldrb	r3, [r7, #10]
 80072c4:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80072c6:	f107 010a 	add.w	r1, r7, #10
 80072ca:	f107 030b 	add.w	r3, r7, #11
 80072ce:	2201      	movs	r2, #1
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fb15 	bl	8007900 <BSP_SPI2_SendRecv>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <SD_SendCmd+0xee>
    {
      return 0xFFFF;
 80072dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072e0:	e09c      	b.n	800741c <SD_SendCmd+0x228>
    }
    response |= response_tmp;
 80072e2:	7abb      	ldrb	r3, [r7, #10]
 80072e4:	461a      	mov	r2, r3
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	61fb      	str	r3, [r7, #28]
    /* Set CS High */
    SD_IO_CSState(1);
 80072ec:	2001      	movs	r0, #1
 80072ee:	f7ff fc69 	bl	8006bc4 <SD_IO_CSState>
    SPI_IO_Delay(1);
 80072f2:	2001      	movs	r0, #1
 80072f4:	f000 fa67 	bl	80077c6 <SPI_IO_Delay>
    /* Set CS Low */
    SD_IO_CSState(0);
 80072f8:	2000      	movs	r0, #0
 80072fa:	f7ff fc63 	bl	8006bc4 <SD_IO_CSState>

    /* Wait IO line return 0xFF */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80072fe:	f107 010a 	add.w	r1, r7, #10
 8007302:	f107 030b 	add.w	r3, r7, #11
 8007306:	2201      	movs	r2, #1
 8007308:	4618      	mov	r0, r3
 800730a:	f000 faf9 	bl	8007900 <BSP_SPI2_SendRecv>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d010      	beq.n	8007336 <SD_SendCmd+0x142>
    {
      return 0xFFFF;
 8007314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007318:	e080      	b.n	800741c <SD_SendCmd+0x228>
    }
    while(response_tmp != 0xFFU)
    {
      if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 800731a:	f107 010a 	add.w	r1, r7, #10
 800731e:	f107 030b 	add.w	r3, r7, #11
 8007322:	2201      	movs	r2, #1
 8007324:	4618      	mov	r0, r3
 8007326:	f000 faeb 	bl	8007900 <BSP_SPI2_SendRecv>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <SD_SendCmd+0x142>
      {
        return 0xFFFF;
 8007330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007334:	e072      	b.n	800741c <SD_SendCmd+0x228>
    while(response_tmp != 0xFFU)
 8007336:	7abb      	ldrb	r3, [r7, #10]
 8007338:	2bff      	cmp	r3, #255	; 0xff
 800733a:	d1ee      	bne.n	800731a <SD_SendCmd+0x126>
      }
    }
    break;
 800733c:	e06d      	b.n	800741a <SD_SendCmd+0x226>
  case SD_ANSWER_R2_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 800733e:	f107 030a 	add.w	r3, r7, #10
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f9e8 	bl	8007718 <SD_ReadData>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <SD_SendCmd+0x160>
    {
      return 0xFFFF;
 800734e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007352:	e063      	b.n	800741c <SD_SendCmd+0x228>
    }
    response = response_tmp;
 8007354:	7abb      	ldrb	r3, [r7, #10]
 8007356:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007358:	f107 010a 	add.w	r1, r7, #10
 800735c:	f107 030b 	add.w	r3, r7, #11
 8007360:	2201      	movs	r2, #1
 8007362:	4618      	mov	r0, r3
 8007364:	f000 facc 	bl	8007900 <BSP_SPI2_SendRecv>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <SD_SendCmd+0x180>
    {
      return 0xFFFF;
 800736e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007372:	e053      	b.n	800741c <SD_SendCmd+0x228>
    }
    response |= ((uint32_t)response_tmp << 8);
 8007374:	7abb      	ldrb	r3, [r7, #10]
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	4313      	orrs	r3, r2
 800737c:	61fb      	str	r3, [r7, #28]
    break;
 800737e:	e04c      	b.n	800741a <SD_SendCmd+0x226>
  case SD_ANSWER_R3_EXPECTED :
  case SD_ANSWER_R7_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8007380:	f107 030a 	add.w	r3, r7, #10
 8007384:	4618      	mov	r0, r3
 8007386:	f000 f9c7 	bl	8007718 <SD_ReadData>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <SD_SendCmd+0x1a2>
    {
      return 0xFFFF;
 8007390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007394:	e042      	b.n	800741c <SD_SendCmd+0x228>
    }
    response = response_tmp;
 8007396:	7abb      	ldrb	r3, [r7, #10]
 8007398:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 800739a:	f107 010a 	add.w	r1, r7, #10
 800739e:	f107 030b 	add.w	r3, r7, #11
 80073a2:	2201      	movs	r2, #1
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 faab 	bl	8007900 <BSP_SPI2_SendRecv>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <SD_SendCmd+0x1c2>
    {
      return 0xFFFF;
 80073b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073b4:	e032      	b.n	800741c <SD_SendCmd+0x228>
    }
    /* Only first and second responses are required */
    response |= ((uint32_t)response_tmp << 8U);
 80073b6:	7abb      	ldrb	r3, [r7, #10]
 80073b8:	021b      	lsls	r3, r3, #8
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	4313      	orrs	r3, r2
 80073be:	61fb      	str	r3, [r7, #28]
    /* Sends third byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80073c0:	f107 010a 	add.w	r1, r7, #10
 80073c4:	f107 030b 	add.w	r3, r7, #11
 80073c8:	2201      	movs	r2, #1
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fa98 	bl	8007900 <BSP_SPI2_SendRecv>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <SD_SendCmd+0x1e8>
    {
      return 0xFFFF;
 80073d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073da:	e01f      	b.n	800741c <SD_SendCmd+0x228>
    }
    /* Sends fourth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80073dc:	f107 010a 	add.w	r1, r7, #10
 80073e0:	f107 030b 	add.w	r3, r7, #11
 80073e4:	2201      	movs	r2, #1
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fa8a 	bl	8007900 <BSP_SPI2_SendRecv>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <SD_SendCmd+0x204>
    {
      return 0xFFFF;
 80073f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073f6:	e011      	b.n	800741c <SD_SendCmd+0x228>
    }
    /* Sends fifth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80073f8:	f107 010a 	add.w	r1, r7, #10
 80073fc:	f107 030b 	add.w	r3, r7, #11
 8007400:	2201      	movs	r2, #1
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fa7c 	bl	8007900 <BSP_SPI2_SendRecv>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d004      	beq.n	8007418 <SD_SendCmd+0x224>
    {
      return 0xFFFF;
 800740e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007412:	e003      	b.n	800741c <SD_SendCmd+0x228>
    }

    break;
  default :
    break;
 8007414:	bf00      	nop
 8007416:	e000      	b.n	800741a <SD_SendCmd+0x226>
    break;
 8007418:	bf00      	nop
  }
  return response;
 800741a:	69fb      	ldr	r3, [r7, #28]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
static int32_t SD_GetDataResponse(uint8_t *DataResponse)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint8_t dataresponse, tmp, tmp1;
  *DataResponse = (uint8_t)SD_DATA_OTHER_ERROR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	22ff      	movs	r2, #255	; 0xff
 8007430:	701a      	strb	r2, [r3, #0]

  tmp = SD_DUMMY_BYTE;
 8007432:	23ff      	movs	r3, #255	; 0xff
 8007434:	73bb      	strb	r3, [r7, #14]
  if(BUS_SPIx_SendRecv(&tmp, &dataresponse, 1U) != BSP_ERROR_NONE)
 8007436:	f107 010f 	add.w	r1, r7, #15
 800743a:	f107 030e 	add.w	r3, r7, #14
 800743e:	2201      	movs	r2, #1
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fa5d 	bl	8007900 <BSP_SPI2_SendRecv>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <SD_GetDataResponse+0x2e>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800744c:	f06f 0303 	mvn.w	r3, #3
 8007450:	e049      	b.n	80074e6 <SD_GetDataResponse+0xc2>
  }
  /* read the busy response byte*/
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007452:	f107 030e 	add.w	r3, r7, #14
 8007456:	2101      	movs	r1, #1
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fa19 	bl	8007890 <BSP_SPI2_Send>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <SD_GetDataResponse+0x46>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8007464:	f06f 0303 	mvn.w	r3, #3
 8007468:	e03d      	b.n	80074e6 <SD_GetDataResponse+0xc2>
  }
  else
  {
    /* Mask unused bits */
    switch (dataresponse & 0x1FU)
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2b0b      	cmp	r3, #11
 8007472:	d02f      	beq.n	80074d4 <SD_GetDataResponse+0xb0>
 8007474:	2b0d      	cmp	r3, #13
 8007476:	d031      	beq.n	80074dc <SD_GetDataResponse+0xb8>
 8007478:	2b05      	cmp	r3, #5
 800747a:	d000      	beq.n	800747e <SD_GetDataResponse+0x5a>
      break;
    case SD_DATA_WRITE_ERROR:
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
      break;
    default:
      break;
 800747c:	e032      	b.n	80074e4 <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_OK;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2205      	movs	r2, #5
 8007482:	701a      	strb	r2, [r3, #0]
      SD_IO_CSState(1);
 8007484:	2001      	movs	r0, #1
 8007486:	f7ff fb9d 	bl	8006bc4 <SD_IO_CSState>
      SD_IO_CSState(0);
 800748a:	2000      	movs	r0, #0
 800748c:	f7ff fb9a 	bl	8006bc4 <SD_IO_CSState>
      tmp = SD_DUMMY_BYTE;
 8007490:	23ff      	movs	r3, #255	; 0xff
 8007492:	73bb      	strb	r3, [r7, #14]
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 8007494:	f107 010d 	add.w	r1, r7, #13
 8007498:	f107 030e 	add.w	r3, r7, #14
 800749c:	2201      	movs	r2, #1
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fa2e 	bl	8007900 <BSP_SPI2_SendRecv>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d010      	beq.n	80074cc <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 80074aa:	f06f 0303 	mvn.w	r3, #3
 80074ae:	e01a      	b.n	80074e6 <SD_GetDataResponse+0xc2>
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 80074b0:	f107 010d 	add.w	r1, r7, #13
 80074b4:	f107 030e 	add.w	r3, r7, #14
 80074b8:	2201      	movs	r2, #1
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fa20 	bl	8007900 <BSP_SPI2_SendRecv>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 80074c6:	f06f 0303 	mvn.w	r3, #3
 80074ca:	e00c      	b.n	80074e6 <SD_GetDataResponse+0xc2>
      while(tmp1 != 0xFFU)
 80074cc:	7b7b      	ldrb	r3, [r7, #13]
 80074ce:	2bff      	cmp	r3, #255	; 0xff
 80074d0:	d1ee      	bne.n	80074b0 <SD_GetDataResponse+0x8c>
      break;
 80074d2:	e007      	b.n	80074e4 <SD_GetDataResponse+0xc0>
      *DataResponse =  (uint8_t)SD_DATA_CRC_ERROR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	220b      	movs	r2, #11
 80074d8:	701a      	strb	r2, [r3, #0]
      break;
 80074da:	e003      	b.n	80074e4 <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	220d      	movs	r2, #13
 80074e0:	701a      	strb	r2, [r3, #0]
      break;
 80074e2:	bf00      	nop
    }
  }

  /* Return response */
  return BSP_ERROR_NONE;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <SD_GoIdleState>:
  * @brief  Put the SD in Idle state.
  * @param  None
  * @retval SD status
  */
static int32_t SD_GoIdleState(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
  uint32_t response;
  __IO uint8_t counter = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	70fb      	strb	r3, [r7, #3]
  uint8_t tmp = SD_DUMMY_BYTE;
 80074fa:	23ff      	movs	r3, #255	; 0xff
 80074fc:	70bb      	strb	r3, [r7, #2]

  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and
  wait for In Idle State Response (R1 Format) equal to 0x01 */
  do
  {
    counter++;
 80074fe:	78fb      	ldrb	r3, [r7, #3]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	3301      	adds	r3, #1
 8007504:	b2db      	uxtb	r3, r3
 8007506:	70fb      	strb	r3, [r7, #3]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0U, 0x95U, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007508:	2300      	movs	r3, #0
 800750a:	2295      	movs	r2, #149	; 0x95
 800750c:	2100      	movs	r1, #0
 800750e:	2000      	movs	r0, #0
 8007510:	f7ff fe70 	bl	80071f4 <SD_SendCmd>
 8007514:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 8007516:	2001      	movs	r0, #1
 8007518:	f7ff fb54 	bl	8006bc4 <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800751c:	1cbb      	adds	r3, r7, #2
 800751e:	2101      	movs	r1, #1
 8007520:	4618      	mov	r0, r3
 8007522:	f000 f9b5 	bl	8007890 <BSP_SPI2_Send>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <SD_GoIdleState+0x42>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800752c:	f06f 0303 	mvn.w	r3, #3
 8007530:	e0ec      	b.n	800770c <SD_GoIdleState+0x21c>
    }
    else
    {
      if(counter >= SD_MAX_TRY)
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b63      	cmp	r3, #99	; 0x63
 8007538:	d902      	bls.n	8007540 <SD_GoIdleState+0x50>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 800753a:	f06f 0305 	mvn.w	r3, #5
 800753e:	e0e5      	b.n	800770c <SD_GoIdleState+0x21c>
      }
    }
  }while((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	d1da      	bne.n	80074fe <SD_GoIdleState+0xe>

  /* Send CMD8 (SD_CMD_SEND_IF_COND) to check the power supply status
  and wait until response (R7 Format) equal to 0xAA and */
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AAU, 0x87U, (uint8_t)SD_ANSWER_R7_EXPECTED);
 8007548:	2305      	movs	r3, #5
 800754a:	2287      	movs	r2, #135	; 0x87
 800754c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007550:	2008      	movs	r0, #8
 8007552:	f7ff fe4f 	bl	80071f4 <SD_SendCmd>
 8007556:	6078      	str	r0, [r7, #4]
  SD_IO_CSState(1);
 8007558:	2001      	movs	r0, #1
 800755a:	f7ff fb33 	bl	8006bc4 <SD_IO_CSState>
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800755e:	1cbb      	adds	r3, r7, #2
 8007560:	2101      	movs	r1, #1
 8007562:	4618      	mov	r0, r3
 8007564:	f000 f994 	bl	8007890 <BSP_SPI2_Send>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <SD_GoIdleState+0x84>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800756e:	f06f 0303 	mvn.w	r3, #3
 8007572:	e0cb      	b.n	800770c <SD_GoIdleState+0x21c>
  }
  else if(((uint8_t)(response & 0xFFU)  & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d030      	beq.n	80075e2 <SD_GoIdleState+0xf2>
    /* initialise card V1 */
    do
    {
      /* initialise card V1 */
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007580:	2300      	movs	r3, #0
 8007582:	22ff      	movs	r2, #255	; 0xff
 8007584:	2100      	movs	r1, #0
 8007586:	2037      	movs	r0, #55	; 0x37
 8007588:	f7ff fe34 	bl	80071f4 <SD_SendCmd>
      SD_IO_CSState(1);
 800758c:	2001      	movs	r0, #1
 800758e:	f7ff fb19 	bl	8006bc4 <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007592:	1cbb      	adds	r3, r7, #2
 8007594:	2101      	movs	r1, #1
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f97a 	bl	8007890 <BSP_SPI2_Send>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <SD_GoIdleState+0xb8>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 80075a2:	f06f 0303 	mvn.w	r3, #3
 80075a6:	e0b1      	b.n	800770c <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80075a8:	2300      	movs	r3, #0
 80075aa:	22ff      	movs	r2, #255	; 0xff
 80075ac:	2100      	movs	r1, #0
 80075ae:	2029      	movs	r0, #41	; 0x29
 80075b0:	f7ff fe20 	bl	80071f4 <SD_SendCmd>
 80075b4:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 80075b6:	2001      	movs	r0, #1
 80075b8:	f7ff fb04 	bl	8006bc4 <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80075bc:	1cbb      	adds	r3, r7, #2
 80075be:	2101      	movs	r1, #1
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 f965 	bl	8007890 <BSP_SPI2_Send>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <SD_GoIdleState+0xe2>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 80075cc:	f06f 0303 	mvn.w	r3, #3
 80075d0:	e09c      	b.n	800770c <SD_GoIdleState+0x21c>
        }
      }
    }
    while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d0d2      	beq.n	8007580 <SD_GoIdleState+0x90>
    CardType = MY_CARD_SDSC;
 80075da:	4b4e      	ldr	r3, [pc, #312]	; (8007714 <SD_GoIdleState+0x224>)
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	e093      	b.n	800770a <SD_GoIdleState+0x21a>
  }
  else if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	f040 808c 	bne.w	8007704 <SD_GoIdleState+0x214>
  {
    /* initialise card V2 */
    do {
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80075ec:	2300      	movs	r3, #0
 80075ee:	22ff      	movs	r2, #255	; 0xff
 80075f0:	2100      	movs	r1, #0
 80075f2:	2037      	movs	r0, #55	; 0x37
 80075f4:	f7ff fdfe 	bl	80071f4 <SD_SendCmd>
      SD_IO_CSState(1);
 80075f8:	2001      	movs	r0, #1
 80075fa:	f7ff fae3 	bl	8006bc4 <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80075fe:	1cbb      	adds	r3, r7, #2
 8007600:	2101      	movs	r1, #1
 8007602:	4618      	mov	r0, r3
 8007604:	f000 f944 	bl	8007890 <BSP_SPI2_Send>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <SD_GoIdleState+0x124>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 800760e:	f06f 0303 	mvn.w	r3, #3
 8007612:	e07b      	b.n	800770c <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007614:	2300      	movs	r3, #0
 8007616:	22ff      	movs	r2, #255	; 0xff
 8007618:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800761c:	2029      	movs	r0, #41	; 0x29
 800761e:	f7ff fde9 	bl	80071f4 <SD_SendCmd>
 8007622:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 8007624:	2001      	movs	r0, #1
 8007626:	f7ff facd 	bl	8006bc4 <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800762a:	1cbb      	adds	r3, r7, #2
 800762c:	2101      	movs	r1, #1
 800762e:	4618      	mov	r0, r3
 8007630:	f000 f92e 	bl	8007890 <BSP_SPI2_Send>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <SD_GoIdleState+0x150>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 800763a:	f06f 0303 	mvn.w	r3, #3
 800763e:	e065      	b.n	800770c <SD_GoIdleState+0x21c>
        }
      }
    }
    while(((uint8_t)response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b01      	cmp	r3, #1
 8007646:	d0d1      	beq.n	80075ec <SD_GoIdleState+0xfc>

    if(((uint8_t)(response & 0xFFU) & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	b2db      	uxtb	r3, r3
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d033      	beq.n	80076bc <SD_GoIdleState+0x1cc>
    {
      do {
        /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
        (void)SD_SendCmd(SD_CMD_APP_CMD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007654:	2300      	movs	r3, #0
 8007656:	22ff      	movs	r2, #255	; 0xff
 8007658:	2100      	movs	r1, #0
 800765a:	2037      	movs	r0, #55	; 0x37
 800765c:	f7ff fdca 	bl	80071f4 <SD_SendCmd>
        SD_IO_CSState(1);
 8007660:	2001      	movs	r0, #1
 8007662:	f7ff faaf 	bl	8006bc4 <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007666:	1cbb      	adds	r3, r7, #2
 8007668:	2101      	movs	r1, #1
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f910 	bl	8007890 <BSP_SPI2_Send>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <SD_GoIdleState+0x18c>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8007676:	f06f 0303 	mvn.w	r3, #3
 800767a:	e047      	b.n	800770c <SD_GoIdleState+0x21c>
        }
        else
        {
          if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b01      	cmp	r3, #1
 8007682:	d002      	beq.n	800768a <SD_GoIdleState+0x19a>
          {
            return BSP_ERROR_UNKNOWN_FAILURE;
 8007684:	f06f 0305 	mvn.w	r3, #5
 8007688:	e040      	b.n	800770c <SD_GoIdleState+0x21c>
          }
          /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800768a:	2300      	movs	r3, #0
 800768c:	22ff      	movs	r2, #255	; 0xff
 800768e:	2100      	movs	r1, #0
 8007690:	2029      	movs	r0, #41	; 0x29
 8007692:	f7ff fdaf 	bl	80071f4 <SD_SendCmd>
 8007696:	6078      	str	r0, [r7, #4]
          SD_IO_CSState(1);
 8007698:	2001      	movs	r0, #1
 800769a:	f7ff fa93 	bl	8006bc4 <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800769e:	1cbb      	adds	r3, r7, #2
 80076a0:	2101      	movs	r1, #1
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f8f4 	bl	8007890 <BSP_SPI2_Send>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <SD_GoIdleState+0x1c4>
          {
            return BSP_ERROR_PERIPH_FAILURE;
 80076ae:	f06f 0303 	mvn.w	r3, #3
 80076b2:	e02b      	b.n	800770c <SD_GoIdleState+0x21c>
          }
        }
      }
      while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d0cb      	beq.n	8007654 <SD_GoIdleState+0x164>
    }

    /* Send CMD58 (SD_CMD_READ_OCR) to initialize SDHC or SDXC cards: R3 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R3_EXPECTED);
 80076bc:	2303      	movs	r3, #3
 80076be:	22ff      	movs	r2, #255	; 0xff
 80076c0:	2100      	movs	r1, #0
 80076c2:	203a      	movs	r0, #58	; 0x3a
 80076c4:	f7ff fd96 	bl	80071f4 <SD_SendCmd>
 80076c8:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 80076ca:	2001      	movs	r0, #1
 80076cc:	f7ff fa7a 	bl	8006bc4 <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80076d0:	1cbb      	adds	r3, r7, #2
 80076d2:	2101      	movs	r1, #1
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 f8db 	bl	8007890 <BSP_SPI2_Send>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <SD_GoIdleState+0x1f6>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80076e0:	f06f 0303 	mvn.w	r3, #3
 80076e4:	e012      	b.n	800770c <SD_GoIdleState+0x21c>
    }
    else
    {
      if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <SD_GoIdleState+0x204>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 80076ee:	f06f 0305 	mvn.w	r3, #5
 80076f2:	e00b      	b.n	800770c <SD_GoIdleState+0x21c>
      }
      CardType = (uint32_t)(((response >> 8U) & 0x40U) >> 6U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	0a1b      	lsrs	r3, r3, #8
 80076f8:	099b      	lsrs	r3, r3, #6
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	4a05      	ldr	r2, [pc, #20]	; (8007714 <SD_GoIdleState+0x224>)
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	e002      	b.n	800770a <SD_GoIdleState+0x21a>
    }
  }
  else
  {
    return BSP_ERROR_BUSY;
 8007704:	f06f 0302 	mvn.w	r3, #2
 8007708:	e000      	b.n	800770c <SD_GoIdleState+0x21c>
  }

  return BSP_ERROR_NONE;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	20000054 	.word	0x20000054

08007718 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  Data data to be read
  * @retval BSP status
  */
static int32_t SD_ReadData(uint8_t *Data)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint8_t timeout = 0x08U;
 8007720:	2308      	movs	r3, #8
 8007722:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  tmp = SD_DUMMY_BYTE;
 8007724:	23ff      	movs	r3, #255	; 0xff
 8007726:	73bb      	strb	r3, [r7, #14]
  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, Data, 1) != BSP_ERROR_NONE)
 8007728:	f107 030e 	add.w	r3, r7, #14
 800772c:	2201      	movs	r2, #1
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	4618      	mov	r0, r3
 8007732:	f000 f8e5 	bl	8007900 <BSP_SPI2_SendRecv>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <SD_ReadData+0x2a>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800773c:	f06f 0303 	mvn.w	r3, #3
 8007740:	e010      	b.n	8007764 <SD_ReadData+0x4c>
    }
    timeout--;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	3b01      	subs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]

  }while ((*Data == SD_DUMMY_BYTE) && (timeout != 0U));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2bff      	cmp	r3, #255	; 0xff
 800774e:	d102      	bne.n	8007756 <SD_ReadData+0x3e>
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e8      	bne.n	8007728 <SD_ReadData+0x10>

  if (timeout == 0U)
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <SD_ReadData+0x4a>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 800775c:	f06f 0302 	mvn.w	r3, #2
 8007760:	e000      	b.n	8007764 <SD_ReadData+0x4c>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <SD_WaitData>:
  * @brief  Waits a data from the SD card
  * @param  data  Expected data from the SD card
  * @retval BSP status
  */
static int32_t SD_WaitData(uint8_t Data)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	71fb      	strb	r3, [r7, #7]
  uint16_t timeout = 0xFFFF;
 8007776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800777a:	81fb      	strh	r3, [r7, #14]
  uint8_t readvalue, tmp;

  tmp = SD_DUMMY_BYTE;
 800777c:	23ff      	movs	r3, #255	; 0xff
 800777e:	733b      	strb	r3, [r7, #12]

  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, &readvalue, 1) != BSP_ERROR_NONE)
 8007780:	f107 010d 	add.w	r1, r7, #13
 8007784:	f107 030c 	add.w	r3, r7, #12
 8007788:	2201      	movs	r2, #1
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f8b8 	bl	8007900 <BSP_SPI2_SendRecv>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <SD_WaitData+0x30>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007796:	f06f 0303 	mvn.w	r3, #3
 800779a:	e010      	b.n	80077be <SD_WaitData+0x52>
    }
    timeout--;
 800779c:	89fb      	ldrh	r3, [r7, #14]
 800779e:	3b01      	subs	r3, #1
 80077a0:	81fb      	strh	r3, [r7, #14]
  }while ((readvalue != Data) && (timeout != 0U));
 80077a2:	7b7b      	ldrb	r3, [r7, #13]
 80077a4:	79fa      	ldrb	r2, [r7, #7]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d002      	beq.n	80077b0 <SD_WaitData+0x44>
 80077aa:	89fb      	ldrh	r3, [r7, #14]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e7      	bne.n	8007780 <SD_WaitData+0x14>

  if (timeout == 0U)
 80077b0:	89fb      	ldrh	r3, [r7, #14]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <SD_WaitData+0x50>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 80077b6:	f06f 0302 	mvn.w	r3, #2
 80077ba:	e000      	b.n	80077be <SD_WaitData+0x52>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <SPI_IO_Delay>:
  * @brief  SPI IO delay
  * @param  Delay  Delay in ms
  * @retval None
  */
static void SPI_IO_Delay(uint32_t Delay)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  int32_t tickstart;
  tickstart = BSP_GetTick();
 80077ce:	f000 f8b7 	bl	8007940 <BSP_GetTick>
 80077d2:	60f8      	str	r0, [r7, #12]
  while((BSP_GetTick() - tickstart) < (int32_t)Delay)
 80077d4:	bf00      	nop
 80077d6:	f000 f8b3 	bl	8007940 <BSP_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	dbf7      	blt.n	80077d6 <SPI_IO_Delay+0x10>
  {
  }
}
 80077e6:	bf00      	nop
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <BSP_SPI2_Init>:

static void SPI_MspInit(SPI_HandleTypeDef *hspi);
static void SPI_MspDeInit(SPI_HandleTypeDef *hspi);

int32_t BSP_SPI2_Init(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hSpiHandle) == HAL_SPI_STATE_RESET)
 80077f4:	480a      	ldr	r0, [pc, #40]	; (8007820 <BSP_SPI2_Init+0x30>)
 80077f6:	f7fc fdce 	bl	8004396 <HAL_SPI_GetState>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10b      	bne.n	8007818 <BSP_SPI2_Init+0x28>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI_MspInit(&hSpiHandle);
 8007800:	4807      	ldr	r0, [pc, #28]	; (8007820 <BSP_SPI2_Init+0x30>)
 8007802:	f000 f8a5 	bl	8007950 <SPI_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_BSP_SPI2_Init(&hSpiHandle) != HAL_OK)
 8007806:	4806      	ldr	r0, [pc, #24]	; (8007820 <BSP_SPI2_Init+0x30>)
 8007808:	f000 f80c 	bl	8007824 <MX_BSP_SPI2_Init>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <BSP_SPI2_Init+0x28>
    {
      return BSP_ERROR_BUS_FAILURE;
 8007812:	f06f 0307 	mvn.w	r3, #7
 8007816:	e000      	b.n	800781a <BSP_SPI2_Init+0x2a>
    }
  }
  return BSP_ERROR_NONE;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20000a40 	.word	0x20000a40

08007824 <MX_BSP_SPI2_Init>:
  * @brief  MX SPI initialization.
  * @param  hspi SPI handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_BSP_SPI2_Init(SPI_HandleTypeDef *hspi)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* SPI Config */
  hspi->Instance               = NUCLEO_SPI;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a17      	ldr	r2, [pc, #92]	; (800788c <MX_BSP_SPI2_Init+0x68>)
 8007830:	601a      	str	r2, [r3, #0]
  hspi->Init.BaudRatePrescaler = NUCLEO_SPI_BAUDRATEPRESCALER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2210      	movs	r2, #16
 8007836:	61da      	str	r2, [r3, #28]
  hspi->Init.Direction         = SPI_DIRECTION_2LINES;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	609a      	str	r2, [r3, #8]
  hspi->Init.CLKPhase          = SPI_PHASE_2EDGE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	615a      	str	r2, [r3, #20]
  hspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	611a      	str	r2, [r3, #16]
  hspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial     = 7;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2207      	movs	r2, #7
 8007854:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800785c:	60da      	str	r2, [r3, #12]
  hspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	621a      	str	r2, [r3, #32]
  hspi->Init.NSS               = SPI_NSS_SOFT;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800786a:	619a      	str	r2, [r3, #24]
  hspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.Mode              = SPI_MODE_MASTER;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007878:	605a      	str	r2, [r3, #4]

  return HAL_SPI_Init(hspi);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fc f858 	bl	8003930 <HAL_SPI_Init>
 8007880:	4603      	mov	r3, r0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	40003800 	.word	0x40003800

08007890 <BSP_SPI2_Send>:
  * @param  pTxData pointer to TX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pTxData, uint32_t Length)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hSpiHandle, pTxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	4806      	ldr	r0, [pc, #24]	; (80078c4 <BSP_SPI2_Send+0x34>)
 80078aa:	f7fc f8d3 	bl	8003a54 <HAL_SPI_Transmit>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <BSP_SPI2_Send+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80078b4:	f06f 0307 	mvn.w	r3, #7
 80078b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	20000a40 	.word	0x20000a40

080078c8 <BSP_SPI2_Recv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Recv(uint8_t *pRxData, uint32_t Length)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hSpiHandle, pRxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	b29a      	uxth	r2, r3
 80078da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	4806      	ldr	r0, [pc, #24]	; (80078fc <BSP_SPI2_Recv+0x34>)
 80078e2:	f7fc fa1d 	bl	8003d20 <HAL_SPI_Receive>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <BSP_SPI2_Recv+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80078ec:	f06f 0307 	mvn.w	r3, #7
 80078f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80078f2:	68fb      	ldr	r3, [r7, #12]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	20000a40 	.word	0x20000a40

08007900 <BSP_SPI2_SendRecv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint32_t Legnth)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af02      	add	r7, sp, #8
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hSpiHandle, pTxData, pRxData, (uint16_t)Legnth, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	b29a      	uxth	r2, r3
 8007914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	4613      	mov	r3, r2
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	68f9      	ldr	r1, [r7, #12]
 8007920:	4806      	ldr	r0, [pc, #24]	; (800793c <BSP_SPI2_SendRecv+0x3c>)
 8007922:	f7fc fb25 	bl	8003f70 <HAL_SPI_TransmitReceive>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <BSP_SPI2_SendRecv+0x32>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800792c:	f06f 0307 	mvn.w	r3, #7
 8007930:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007932:	697b      	ldr	r3, [r7, #20]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	20000a40 	.word	0x20000a40

08007940 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8007944:	f7f9 fc84 	bl	8001250 <HAL_GetTick>
 8007948:	4603      	mov	r3, r0
}
 800794a:	4618      	mov	r0, r3
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <SPI_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi SPI handler
  * @retval None
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08c      	sub	sp, #48	; 0x30
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*** Configure the SPI peripheral ***/
  /* Enable SPI clock */
  NUCLEO_SPI_CLK_ENABLE();
 8007958:	4b2e      	ldr	r3, [pc, #184]	; (8007a14 <SPI_MspInit+0xc4>)
 800795a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795c:	4a2d      	ldr	r2, [pc, #180]	; (8007a14 <SPI_MspInit+0xc4>)
 800795e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007962:	6593      	str	r3, [r2, #88]	; 0x58
 8007964:	4b2b      	ldr	r3, [pc, #172]	; (8007a14 <SPI_MspInit+0xc4>)
 8007966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  NUCLEO_SPI_SCK_GPIO_CLK_ENABLE();
 8007970:	4b28      	ldr	r3, [pc, #160]	; (8007a14 <SPI_MspInit+0xc4>)
 8007972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007974:	4a27      	ldr	r2, [pc, #156]	; (8007a14 <SPI_MspInit+0xc4>)
 8007976:	f043 0301 	orr.w	r3, r3, #1
 800797a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800797c:	4b25      	ldr	r3, [pc, #148]	; (8007a14 <SPI_MspInit+0xc4>)
 800797e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	697b      	ldr	r3, [r7, #20]
  NUCLEO_SPI_MOSI_GPIO_CLK_ENABLE();
 8007988:	4b22      	ldr	r3, [pc, #136]	; (8007a14 <SPI_MspInit+0xc4>)
 800798a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800798c:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <SPI_MspInit+0xc4>)
 800798e:	f043 0301 	orr.w	r3, r3, #1
 8007992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007994:	4b1f      	ldr	r3, [pc, #124]	; (8007a14 <SPI_MspInit+0xc4>)
 8007996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	613b      	str	r3, [r7, #16]
 800799e:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPI_MISO_GPIO_CLK_ENABLE();
 80079a0:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <SPI_MspInit+0xc4>)
 80079a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a4:	4a1b      	ldr	r2, [pc, #108]	; (8007a14 <SPI_MspInit+0xc4>)
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079ac:	4b19      	ldr	r3, [pc, #100]	; (8007a14 <SPI_MspInit+0xc4>)
 80079ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]
 80079b6:	68fb      	ldr	r3, [r7, #12]

  /* Configure SPI SCK */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_SCK_PIN;
 80079b8:	2320      	movs	r3, #32
 80079ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80079bc:	2302      	movs	r3, #2
 80079be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80079c0:	2301      	movs	r3, #1
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80079c4:	2303      	movs	r3, #3
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = NUCLEO_SPI_SCK_AF;
 80079c8:	2305      	movs	r3, #5
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80079cc:	f107 031c 	add.w	r3, r7, #28
 80079d0:	4619      	mov	r1, r3
 80079d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079d6:	f7fa faa7 	bl	8001f28 <HAL_GPIO_Init>

  /* Configure SPI MOSI */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_MOSI_PIN;
 80079da:	2380      	movs	r3, #128	; 0x80
 80079dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MOSI_AF;
 80079de:	2305      	movs	r3, #5
 80079e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 80079e2:	2302      	movs	r3, #2
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80079e6:	f107 031c 	add.w	r3, r7, #28
 80079ea:	4619      	mov	r1, r3
 80079ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079f0:	f7fa fa9a 	bl	8001f28 <HAL_GPIO_Init>

  /* Configure SPI MISO */
  GPIO_InitStruct.Pin = NUCLEO_SPI_MISO_PIN;
 80079f4:	2340      	movs	r3, #64	; 0x40
 80079f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MISO_AF;
 80079f8:	2305      	movs	r3, #5
 80079fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80079fc:	f107 031c 	add.w	r3, r7, #28
 8007a00:	4619      	mov	r1, r3
 8007a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a06:	f7fa fa8f 	bl	8001f28 <HAL_GPIO_Init>
}
 8007a0a:	bf00      	nop
 8007a0c:	3730      	adds	r7, #48	; 0x30
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	40021000 	.word	0x40021000

08007a18 <USER_CheckStatus>:
#define DISABLE_SD_INIT
/* Private variables ---------------------------------------------------------*/
/* Disk status */
static volatile DSTATUS Stat = STA_NOINIT;
static DSTATUS USER_CheckStatus(BYTE lun)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007a22:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <USER_CheckStatus+0x3c>)
 8007a24:	2201      	movs	r2, #1
 8007a26:	701a      	strb	r2, [r3, #0]
  // TO DO:
  if(MY_SD_GetCardState(0) == BSP_ERROR_NONE)
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f7fe ffc7 	bl	80069bc <MY_SD_GetCardState>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d107      	bne.n	8007a44 <USER_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 8007a34:	4b07      	ldr	r3, [pc, #28]	; (8007a54 <USER_CheckStatus+0x3c>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	4b04      	ldr	r3, [pc, #16]	; (8007a54 <USER_CheckStatus+0x3c>)
 8007a42:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007a44:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <USER_CheckStatus+0x3c>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	b2db      	uxtb	r3, r3
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	2000000c 	.word	0x2000000c

08007a58 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007a62:	4b09      	ldr	r3, [pc, #36]	; (8007a88 <USER_initialize+0x30>)
 8007a64:	2201      	movs	r2, #1
 8007a66:	701a      	strb	r2, [r3, #0]
	  if(MY_SD_Init(0) == BSP_ERROR_NONE)
	  {
		Stat = USER_CheckStatus(pdrv);
	  }
	#else
	  Stat = USER_CheckStatus(pdrv);
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff ffd4 	bl	8007a18 <USER_CheckStatus>
 8007a70:	4603      	mov	r3, r0
 8007a72:	461a      	mov	r2, r3
 8007a74:	4b04      	ldr	r3, [pc, #16]	; (8007a88 <USER_initialize+0x30>)
 8007a76:	701a      	strb	r2, [r3, #0]
	#endif
    return Stat;
 8007a78:	4b03      	ldr	r3, [pc, #12]	; (8007a88 <USER_initialize+0x30>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	2000000c 	.word	0x2000000c

08007a8c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_CheckStatus(pdrv);
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff ffbd 	bl	8007a18 <USER_CheckStatus>
 8007a9e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	DRESULT res = RES_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_ReadBlocks(0, (uint32_t*)buff,
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	68b9      	ldr	r1, [r7, #8]
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f7fe fdac 	bl	8006620 <MY_SD_ReadBlocks>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d108      	bne.n	8007ae0 <USER_read+0x38>
						   (uint32_t) (sector),
						   count) == BSP_ERROR_NONE)
	  {
		/* wait until the read operation is finished */
		while( MY_SD_GetCardState(0)!= BSP_ERROR_NONE)
 8007ace:	bf00      	nop
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	f7fe ff73 	bl	80069bc <MY_SD_GetCardState>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1f9      	bne.n	8007ad0 <USER_read+0x28>
		{
		}
		res = RES_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	75fb      	strb	r3, [r7, #23]
	  }
	  return res;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END READ */
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
 8007af6:	4603      	mov	r3, r0
 8007af8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	DRESULT res = RES_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_WriteBlocks(0, (uint32_t*)buff,
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	2000      	movs	r0, #0
 8007b06:	f7fe fe57 	bl	80067b8 <MY_SD_WriteBlocks>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d108      	bne.n	8007b22 <USER_write+0x38>
	                        (uint32_t)(sector),
	                        count) == BSP_ERROR_NONE)
	  {
	  /* wait until the Write operation is finished */
	    while(MY_SD_GetCardState(0) != BSP_ERROR_NONE)
 8007b10:	bf00      	nop
 8007b12:	2000      	movs	r0, #0
 8007b14:	f7fe ff52 	bl	80069bc <MY_SD_GetCardState>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f9      	bne.n	8007b12 <USER_write+0x28>
	    {
	    }
	    res = RES_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	75fb      	strb	r3, [r7, #23]
	  }

	  return res;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END WRITE */
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b096      	sub	sp, #88	; 0x58
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	603a      	str	r2, [r7, #0]
 8007b36:	71fb      	strb	r3, [r7, #7]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  SD_CardInfo_t CardInfo;

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007b42:	4b26      	ldr	r3, [pc, #152]	; (8007bdc <USER_ioctl+0xb0>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <USER_ioctl+0x28>
 8007b50:	2303      	movs	r3, #3
 8007b52:	e03f      	b.n	8007bd4 <USER_ioctl+0xa8>

	  switch (cmd)
 8007b54:	79bb      	ldrb	r3, [r7, #6]
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d837      	bhi.n	8007bca <USER_ioctl+0x9e>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <USER_ioctl+0x34>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b71 	.word	0x08007b71
 8007b64:	08007b79 	.word	0x08007b79
 8007b68:	08007b93 	.word	0x08007b93
 8007b6c:	08007baf 	.word	0x08007baf
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007b76:	e02b      	b.n	8007bd0 <USER_ioctl+0xa4>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007b78:	f107 0308 	add.w	r3, r7, #8
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f7fe ff54 	bl	8006a2c <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007b90:	e01e      	b.n	8007bd0 <USER_ioctl+0xa4>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007b92:	f107 0308 	add.w	r3, r7, #8
 8007b96:	4619      	mov	r1, r3
 8007b98:	2000      	movs	r0, #0
 8007b9a:	f7fe ff47 	bl	8006a2c <MY_SD_GetCardInfo>
	    *(WORD*)buff = CardInfo.LogBlockSize;
 8007b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007bac:	e010      	b.n	8007bd0 <USER_ioctl+0xa4>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007bae:	f107 0308 	add.w	r3, r7, #8
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f7fe ff39 	bl	8006a2c <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bbc:	0a5a      	lsrs	r2, r3, #9
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007bc8:	e002      	b.n	8007bd0 <USER_ioctl+0xa4>

	  default:
	    res = RES_PARERR;
 8007bca:	2304      	movs	r3, #4
 8007bcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  }

	  return res;
 8007bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END IOCTL */
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3758      	adds	r7, #88	; 0x58
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	2000000c 	.word	0x2000000c

08007be0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	4a08      	ldr	r2, [pc, #32]	; (8007c10 <disk_status+0x30>)
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	79fa      	ldrb	r2, [r7, #7]
 8007bf8:	4905      	ldr	r1, [pc, #20]	; (8007c10 <disk_status+0x30>)
 8007bfa:	440a      	add	r2, r1
 8007bfc:	7a12      	ldrb	r2, [r2, #8]
 8007bfe:	4610      	mov	r0, r2
 8007c00:	4798      	blx	r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000080 	.word	0x20000080

08007c14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	4a0d      	ldr	r2, [pc, #52]	; (8007c5c <disk_initialize+0x48>)
 8007c26:	5cd3      	ldrb	r3, [r2, r3]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d111      	bne.n	8007c50 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	4a0b      	ldr	r2, [pc, #44]	; (8007c5c <disk_initialize+0x48>)
 8007c30:	2101      	movs	r1, #1
 8007c32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	4a09      	ldr	r2, [pc, #36]	; (8007c5c <disk_initialize+0x48>)
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	79fa      	ldrb	r2, [r7, #7]
 8007c42:	4906      	ldr	r1, [pc, #24]	; (8007c5c <disk_initialize+0x48>)
 8007c44:	440a      	add	r2, r1
 8007c46:	7a12      	ldrb	r2, [r2, #8]
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000080 	.word	0x20000080

08007c60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007c60:	b590      	push	{r4, r7, lr}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	4a0a      	ldr	r2, [pc, #40]	; (8007c9c <disk_read+0x3c>)
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	689c      	ldr	r4, [r3, #8]
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	4a07      	ldr	r2, [pc, #28]	; (8007c9c <disk_read+0x3c>)
 8007c80:	4413      	add	r3, r2
 8007c82:	7a18      	ldrb	r0, [r3, #8]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	68b9      	ldr	r1, [r7, #8]
 8007c8a:	47a0      	blx	r4
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd90      	pop	{r4, r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000080 	.word	0x20000080

08007ca0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007ca0:	b590      	push	{r4, r7, lr}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60b9      	str	r1, [r7, #8]
 8007ca8:	607a      	str	r2, [r7, #4]
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	4603      	mov	r3, r0
 8007cae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
 8007cb2:	4a0a      	ldr	r2, [pc, #40]	; (8007cdc <disk_write+0x3c>)
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	68dc      	ldr	r4, [r3, #12]
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	4a07      	ldr	r2, [pc, #28]	; (8007cdc <disk_write+0x3c>)
 8007cc0:	4413      	add	r3, r2
 8007cc2:	7a18      	ldrb	r0, [r3, #8]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	47a0      	blx	r4
 8007ccc:	4603      	mov	r3, r0
 8007cce:	75fb      	strb	r3, [r7, #23]
  return res;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd90      	pop	{r4, r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000080 	.word	0x20000080

08007ce0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	603a      	str	r2, [r7, #0]
 8007cea:	71fb      	strb	r3, [r7, #7]
 8007cec:	460b      	mov	r3, r1
 8007cee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	4a09      	ldr	r2, [pc, #36]	; (8007d18 <disk_ioctl+0x38>)
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	79fa      	ldrb	r2, [r7, #7]
 8007cfe:	4906      	ldr	r1, [pc, #24]	; (8007d18 <disk_ioctl+0x38>)
 8007d00:	440a      	add	r2, r1
 8007d02:	7a10      	ldrb	r0, [r2, #8]
 8007d04:	79b9      	ldrb	r1, [r7, #6]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	4798      	blx	r3
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20000080 	.word	0x20000080

08007d1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3301      	adds	r3, #1
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007d2c:	89fb      	ldrh	r3, [r7, #14]
 8007d2e:	021b      	lsls	r3, r3, #8
 8007d30:	b21a      	sxth	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	b21b      	sxth	r3, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	b21b      	sxth	r3, r3
 8007d3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007d3e:	89fb      	ldrh	r3, [r7, #14]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3303      	adds	r3, #3
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	3202      	adds	r2, #2
 8007d64:	7812      	ldrb	r2, [r2, #0]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	3201      	adds	r2, #1
 8007d72:	7812      	ldrb	r2, [r2, #0]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	021b      	lsls	r3, r3, #8
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	7812      	ldrb	r2, [r2, #0]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d84:	68fb      	ldr	r3, [r7, #12]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	887a      	ldrh	r2, [r7, #2]
 8007da6:	b2d2      	uxtb	r2, r2
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	887b      	ldrh	r3, [r7, #2]
 8007dac:	0a1b      	lsrs	r3, r3, #8
 8007dae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	607a      	str	r2, [r7, #4]
 8007db6:	887a      	ldrh	r2, [r7, #2]
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	701a      	strb	r2, [r3, #0]
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	b2d2      	uxtb	r2, r2
 8007ddc:	701a      	strb	r2, [r3, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	0a1b      	lsrs	r3, r3, #8
 8007de2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	701a      	strb	r2, [r3, #0]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	0a1b      	lsrs	r3, r3, #8
 8007df4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	0a1b      	lsrs	r3, r3, #8
 8007e06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	607a      	str	r2, [r7, #4]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	b2d2      	uxtb	r2, r2
 8007e12:	701a      	strb	r2, [r3, #0]
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00d      	beq.n	8007e56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	1c53      	adds	r3, r2, #1
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	1c59      	adds	r1, r3, #1
 8007e44:	6179      	str	r1, [r7, #20]
 8007e46:	7812      	ldrb	r2, [r2, #0]
 8007e48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	607b      	str	r3, [r7, #4]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1f1      	bne.n	8007e3a <mem_cpy+0x1a>
	}
}
 8007e56:	bf00      	nop
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007e62:	b480      	push	{r7}
 8007e64:	b087      	sub	sp, #28
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	617a      	str	r2, [r7, #20]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	607b      	str	r3, [r7, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f3      	bne.n	8007e72 <mem_set+0x10>
}
 8007e8a:	bf00      	nop
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007e96:	b480      	push	{r7}
 8007e98:	b089      	sub	sp, #36	; 0x24
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	61fa      	str	r2, [r7, #28]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	61ba      	str	r2, [r7, #24]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	1acb      	subs	r3, r1, r3
 8007ec2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	607b      	str	r3, [r7, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <mem_cmp+0x40>
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0eb      	beq.n	8007eae <mem_cmp+0x18>

	return r;
 8007ed6:	697b      	ldr	r3, [r7, #20]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3724      	adds	r7, #36	; 0x24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007eee:	e002      	b.n	8007ef6 <chk_chr+0x12>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	607b      	str	r3, [r7, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d005      	beq.n	8007f0a <chk_chr+0x26>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d1f2      	bne.n	8007ef0 <chk_chr+0xc>
	return *str;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
	...

08007f1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f26:	2300      	movs	r3, #0
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	e029      	b.n	8007f84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007f30:	4a27      	ldr	r2, [pc, #156]	; (8007fd0 <chk_lock+0xb4>)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	4413      	add	r3, r2
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01d      	beq.n	8007f7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f3e:	4a24      	ldr	r2, [pc, #144]	; (8007fd0 <chk_lock+0xb4>)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	011b      	lsls	r3, r3, #4
 8007f44:	4413      	add	r3, r2
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d116      	bne.n	8007f7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007f50:	4a1f      	ldr	r2, [pc, #124]	; (8007fd0 <chk_lock+0xb4>)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	4413      	add	r3, r2
 8007f58:	3304      	adds	r3, #4
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d10c      	bne.n	8007f7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f64:	4a1a      	ldr	r2, [pc, #104]	; (8007fd0 <chk_lock+0xb4>)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	011b      	lsls	r3, r3, #4
 8007f6a:	4413      	add	r3, r2
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d102      	bne.n	8007f7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f78:	e007      	b.n	8007f8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d9d2      	bls.n	8007f30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d109      	bne.n	8007fa4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d102      	bne.n	8007f9c <chk_lock+0x80>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d101      	bne.n	8007fa0 <chk_lock+0x84>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e010      	b.n	8007fc2 <chk_lock+0xa6>
 8007fa0:	2312      	movs	r3, #18
 8007fa2:	e00e      	b.n	8007fc2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d108      	bne.n	8007fbc <chk_lock+0xa0>
 8007faa:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <chk_lock+0xb4>)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	011b      	lsls	r3, r3, #4
 8007fb0:	4413      	add	r3, r2
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fba:	d101      	bne.n	8007fc0 <chk_lock+0xa4>
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	e000      	b.n	8007fc2 <chk_lock+0xa6>
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	20000060 	.word	0x20000060

08007fd4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	607b      	str	r3, [r7, #4]
 8007fde:	e002      	b.n	8007fe6 <enq_lock+0x12>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	607b      	str	r3, [r7, #4]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d806      	bhi.n	8007ffa <enq_lock+0x26>
 8007fec:	4a09      	ldr	r2, [pc, #36]	; (8008014 <enq_lock+0x40>)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	4413      	add	r3, r2
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1f2      	bne.n	8007fe0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	bf14      	ite	ne
 8008000:	2301      	movne	r3, #1
 8008002:	2300      	moveq	r3, #0
 8008004:	b2db      	uxtb	r3, r3
}
 8008006:	4618      	mov	r0, r3
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	20000060 	.word	0x20000060

08008018 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008022:	2300      	movs	r3, #0
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	e01f      	b.n	8008068 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008028:	4a41      	ldr	r2, [pc, #260]	; (8008130 <inc_lock+0x118>)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	4413      	add	r3, r2
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d113      	bne.n	8008062 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800803a:	4a3d      	ldr	r2, [pc, #244]	; (8008130 <inc_lock+0x118>)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	011b      	lsls	r3, r3, #4
 8008040:	4413      	add	r3, r2
 8008042:	3304      	adds	r3, #4
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800804a:	429a      	cmp	r2, r3
 800804c:	d109      	bne.n	8008062 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800804e:	4a38      	ldr	r2, [pc, #224]	; (8008130 <inc_lock+0x118>)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	011b      	lsls	r3, r3, #4
 8008054:	4413      	add	r3, r2
 8008056:	3308      	adds	r3, #8
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800805e:	429a      	cmp	r2, r3
 8008060:	d006      	beq.n	8008070 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3301      	adds	r3, #1
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d9dc      	bls.n	8008028 <inc_lock+0x10>
 800806e:	e000      	b.n	8008072 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008070:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b02      	cmp	r3, #2
 8008076:	d132      	bne.n	80080de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	e002      	b.n	8008084 <inc_lock+0x6c>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d806      	bhi.n	8008098 <inc_lock+0x80>
 800808a:	4a29      	ldr	r2, [pc, #164]	; (8008130 <inc_lock+0x118>)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	4413      	add	r3, r2
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f2      	bne.n	800807e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d101      	bne.n	80080a2 <inc_lock+0x8a>
 800809e:	2300      	movs	r3, #0
 80080a0:	e040      	b.n	8008124 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	4922      	ldr	r1, [pc, #136]	; (8008130 <inc_lock+0x118>)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	011b      	lsls	r3, r3, #4
 80080ac:	440b      	add	r3, r1
 80080ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	491e      	ldr	r1, [pc, #120]	; (8008130 <inc_lock+0x118>)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	440b      	add	r3, r1
 80080bc:	3304      	adds	r3, #4
 80080be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	695a      	ldr	r2, [r3, #20]
 80080c4:	491a      	ldr	r1, [pc, #104]	; (8008130 <inc_lock+0x118>)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	440b      	add	r3, r1
 80080cc:	3308      	adds	r3, #8
 80080ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80080d0:	4a17      	ldr	r2, [pc, #92]	; (8008130 <inc_lock+0x118>)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	4413      	add	r3, r2
 80080d8:	330c      	adds	r3, #12
 80080da:	2200      	movs	r2, #0
 80080dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d009      	beq.n	80080f8 <inc_lock+0xe0>
 80080e4:	4a12      	ldr	r2, [pc, #72]	; (8008130 <inc_lock+0x118>)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	4413      	add	r3, r2
 80080ec:	330c      	adds	r3, #12
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <inc_lock+0xe0>
 80080f4:	2300      	movs	r3, #0
 80080f6:	e015      	b.n	8008124 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d108      	bne.n	8008110 <inc_lock+0xf8>
 80080fe:	4a0c      	ldr	r2, [pc, #48]	; (8008130 <inc_lock+0x118>)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	4413      	add	r3, r2
 8008106:	330c      	adds	r3, #12
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	3301      	adds	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	e001      	b.n	8008114 <inc_lock+0xfc>
 8008110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008114:	4906      	ldr	r1, [pc, #24]	; (8008130 <inc_lock+0x118>)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	440b      	add	r3, r1
 800811c:	330c      	adds	r3, #12
 800811e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	20000060 	.word	0x20000060

08008134 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3b01      	subs	r3, #1
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d825      	bhi.n	8008194 <dec_lock+0x60>
		n = Files[i].ctr;
 8008148:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <dec_lock+0x74>)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	011b      	lsls	r3, r3, #4
 800814e:	4413      	add	r3, r2
 8008150:	330c      	adds	r3, #12
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008156:	89fb      	ldrh	r3, [r7, #14]
 8008158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800815c:	d101      	bne.n	8008162 <dec_lock+0x2e>
 800815e:	2300      	movs	r3, #0
 8008160:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008162:	89fb      	ldrh	r3, [r7, #14]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <dec_lock+0x3a>
 8008168:	89fb      	ldrh	r3, [r7, #14]
 800816a:	3b01      	subs	r3, #1
 800816c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800816e:	4a0e      	ldr	r2, [pc, #56]	; (80081a8 <dec_lock+0x74>)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	011b      	lsls	r3, r3, #4
 8008174:	4413      	add	r3, r2
 8008176:	330c      	adds	r3, #12
 8008178:	89fa      	ldrh	r2, [r7, #14]
 800817a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800817c:	89fb      	ldrh	r3, [r7, #14]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d105      	bne.n	800818e <dec_lock+0x5a>
 8008182:	4a09      	ldr	r2, [pc, #36]	; (80081a8 <dec_lock+0x74>)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	4413      	add	r3, r2
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	737b      	strb	r3, [r7, #13]
 8008192:	e001      	b.n	8008198 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008194:	2302      	movs	r3, #2
 8008196:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008198:	7b7b      	ldrb	r3, [r7, #13]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	20000060 	.word	0x20000060

080081ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	e010      	b.n	80081dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80081ba:	4a0d      	ldr	r2, [pc, #52]	; (80081f0 <clear_lock+0x44>)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	4413      	add	r3, r2
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d105      	bne.n	80081d6 <clear_lock+0x2a>
 80081ca:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <clear_lock+0x44>)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	011b      	lsls	r3, r3, #4
 80081d0:	4413      	add	r3, r2
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3301      	adds	r3, #1
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d9eb      	bls.n	80081ba <clear_lock+0xe>
	}
}
 80081e2:	bf00      	nop
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000060 	.word	0x20000060

080081f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	78db      	ldrb	r3, [r3, #3]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d034      	beq.n	8008272 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	7858      	ldrb	r0, [r3, #1]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008218:	2301      	movs	r3, #1
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	f7ff fd40 	bl	8007ca0 <disk_write>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d002      	beq.n	800822c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008226:	2301      	movs	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
 800822a:	e022      	b.n	8008272 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	1ad2      	subs	r2, r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	429a      	cmp	r2, r3
 8008240:	d217      	bcs.n	8008272 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	789b      	ldrb	r3, [r3, #2]
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	e010      	b.n	800826c <sync_window+0x78>
					wsect += fs->fsize;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	4413      	add	r3, r2
 8008252:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	7858      	ldrb	r0, [r3, #1]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800825e:	2301      	movs	r3, #1
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	f7ff fd1d 	bl	8007ca0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3b01      	subs	r3, #1
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d8eb      	bhi.n	800824a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008272:	7bfb      	ldrb	r3, [r7, #15]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d01b      	beq.n	80082cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7ff ffad 	bl	80081f4 <sync_window>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d113      	bne.n	80082cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	7858      	ldrb	r0, [r3, #1]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082ae:	2301      	movs	r3, #1
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	f7ff fcd5 	bl	8007c60 <disk_read>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d004      	beq.n	80082c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80082bc:	f04f 33ff 	mov.w	r3, #4294967295
 80082c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff ff87 	bl	80081f4 <sync_window>
 80082e6:	4603      	mov	r3, r0
 80082e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d158      	bne.n	80083a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d148      	bne.n	800838a <sync_fs+0xb2>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	791b      	ldrb	r3, [r3, #4]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d144      	bne.n	800838a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3330      	adds	r3, #48	; 0x30
 8008304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff fda9 	bl	8007e62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3330      	adds	r3, #48	; 0x30
 8008314:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008318:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff fd38 	bl	8007d92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	3330      	adds	r3, #48	; 0x30
 8008326:	4921      	ldr	r1, [pc, #132]	; (80083ac <sync_fs+0xd4>)
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff fd4d 	bl	8007dc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3330      	adds	r3, #48	; 0x30
 8008332:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008336:	491e      	ldr	r1, [pc, #120]	; (80083b0 <sync_fs+0xd8>)
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff fd45 	bl	8007dc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3330      	adds	r3, #48	; 0x30
 8008342:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	4619      	mov	r1, r3
 800834c:	4610      	mov	r0, r2
 800834e:	f7ff fd3b 	bl	8007dc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3330      	adds	r3, #48	; 0x30
 8008356:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	4619      	mov	r1, r3
 8008360:	4610      	mov	r0, r2
 8008362:	f7ff fd31 	bl	8007dc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	7858      	ldrb	r0, [r3, #1]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837e:	2301      	movs	r3, #1
 8008380:	f7ff fc8e 	bl	8007ca0 <disk_write>
			fs->fsi_flag = 0;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	785b      	ldrb	r3, [r3, #1]
 800838e:	2200      	movs	r2, #0
 8008390:	2100      	movs	r1, #0
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff fca4 	bl	8007ce0 <disk_ioctl>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <sync_fs+0xca>
 800839e:	2301      	movs	r3, #1
 80083a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	41615252 	.word	0x41615252
 80083b0:	61417272 	.word	0x61417272

080083b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	3b02      	subs	r3, #2
 80083c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	3b02      	subs	r3, #2
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d301      	bcc.n	80083d4 <clust2sect+0x20>
 80083d0:	2300      	movs	r3, #0
 80083d2:	e008      	b.n	80083e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	895b      	ldrh	r3, [r3, #10]
 80083d8:	461a      	mov	r2, r3
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	fb03 f202 	mul.w	r2, r3, r2
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	4413      	add	r3, r2
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b086      	sub	sp, #24
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d904      	bls.n	8008412 <get_fat+0x20>
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d302      	bcc.n	8008418 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008412:	2301      	movs	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e08c      	b.n	8008532 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008418:	f04f 33ff 	mov.w	r3, #4294967295
 800841c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d045      	beq.n	80084b2 <get_fat+0xc0>
 8008426:	2b03      	cmp	r3, #3
 8008428:	d05d      	beq.n	80084e6 <get_fat+0xf4>
 800842a:	2b01      	cmp	r3, #1
 800842c:	d177      	bne.n	800851e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	085b      	lsrs	r3, r3, #1
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	6a1a      	ldr	r2, [r3, #32]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	0a5b      	lsrs	r3, r3, #9
 8008444:	4413      	add	r3, r2
 8008446:	4619      	mov	r1, r3
 8008448:	6938      	ldr	r0, [r7, #16]
 800844a:	f7ff ff17 	bl	800827c <move_window>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d167      	bne.n	8008524 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	60fa      	str	r2, [r7, #12]
 800845a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4413      	add	r3, r2
 8008462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008466:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	6a1a      	ldr	r2, [r3, #32]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	0a5b      	lsrs	r3, r3, #9
 8008470:	4413      	add	r3, r2
 8008472:	4619      	mov	r1, r3
 8008474:	6938      	ldr	r0, [r7, #16]
 8008476:	f7ff ff01 	bl	800827c <move_window>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d153      	bne.n	8008528 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	4413      	add	r3, r2
 800848a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800848e:	021b      	lsls	r3, r3, #8
 8008490:	461a      	mov	r2, r3
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	4313      	orrs	r3, r2
 8008496:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <get_fat+0xb6>
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	091b      	lsrs	r3, r3, #4
 80084a6:	e002      	b.n	80084ae <get_fat+0xbc>
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084ae:	617b      	str	r3, [r7, #20]
			break;
 80084b0:	e03f      	b.n	8008532 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	6a1a      	ldr	r2, [r3, #32]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	0a1b      	lsrs	r3, r3, #8
 80084ba:	4413      	add	r3, r2
 80084bc:	4619      	mov	r1, r3
 80084be:	6938      	ldr	r0, [r7, #16]
 80084c0:	f7ff fedc 	bl	800827c <move_window>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d130      	bne.n	800852c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80084d8:	4413      	add	r3, r2
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff fc1e 	bl	8007d1c <ld_word>
 80084e0:	4603      	mov	r3, r0
 80084e2:	617b      	str	r3, [r7, #20]
			break;
 80084e4:	e025      	b.n	8008532 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	6a1a      	ldr	r2, [r3, #32]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	09db      	lsrs	r3, r3, #7
 80084ee:	4413      	add	r3, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	6938      	ldr	r0, [r7, #16]
 80084f4:	f7ff fec2 	bl	800827c <move_window>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d118      	bne.n	8008530 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800850c:	4413      	add	r3, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff fc1c 	bl	8007d4c <ld_dword>
 8008514:	4603      	mov	r3, r0
 8008516:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800851a:	617b      	str	r3, [r7, #20]
			break;
 800851c:	e009      	b.n	8008532 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800851e:	2301      	movs	r3, #1
 8008520:	617b      	str	r3, [r7, #20]
 8008522:	e006      	b.n	8008532 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008524:	bf00      	nop
 8008526:	e004      	b.n	8008532 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008528:	bf00      	nop
 800852a:	e002      	b.n	8008532 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800852c:	bf00      	nop
 800852e:	e000      	b.n	8008532 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008530:	bf00      	nop
		}
	}

	return val;
 8008532:	697b      	ldr	r3, [r7, #20]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800853c:	b590      	push	{r4, r7, lr}
 800853e:	b089      	sub	sp, #36	; 0x24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008548:	2302      	movs	r3, #2
 800854a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2b01      	cmp	r3, #1
 8008550:	f240 80d6 	bls.w	8008700 <put_fat+0x1c4>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	429a      	cmp	r2, r3
 800855c:	f080 80d0 	bcs.w	8008700 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b02      	cmp	r3, #2
 8008566:	d073      	beq.n	8008650 <put_fat+0x114>
 8008568:	2b03      	cmp	r3, #3
 800856a:	f000 8091 	beq.w	8008690 <put_fat+0x154>
 800856e:	2b01      	cmp	r3, #1
 8008570:	f040 80c6 	bne.w	8008700 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	61bb      	str	r3, [r7, #24]
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	085b      	lsrs	r3, r3, #1
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	4413      	add	r3, r2
 8008580:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6a1a      	ldr	r2, [r3, #32]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	0a5b      	lsrs	r3, r3, #9
 800858a:	4413      	add	r3, r2
 800858c:	4619      	mov	r1, r3
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff fe74 	bl	800827c <move_window>
 8008594:	4603      	mov	r3, r0
 8008596:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008598:	7ffb      	ldrb	r3, [r7, #31]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f040 80a9 	bne.w	80086f2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	1c59      	adds	r1, r3, #1
 80085aa:	61b9      	str	r1, [r7, #24]
 80085ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b0:	4413      	add	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00d      	beq.n	80085da <put_fat+0x9e>
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	b25b      	sxtb	r3, r3
 80085c4:	f003 030f 	and.w	r3, r3, #15
 80085c8:	b25a      	sxtb	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	b25b      	sxtb	r3, r3
 80085d2:	4313      	orrs	r3, r2
 80085d4:	b25b      	sxtb	r3, r3
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	e001      	b.n	80085de <put_fat+0xa2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2201      	movs	r2, #1
 80085e6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a1a      	ldr	r2, [r3, #32]
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	0a5b      	lsrs	r3, r3, #9
 80085f0:	4413      	add	r3, r2
 80085f2:	4619      	mov	r1, r3
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f7ff fe41 	bl	800827c <move_window>
 80085fa:	4603      	mov	r3, r0
 80085fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085fe:	7ffb      	ldrb	r3, [r7, #31]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d178      	bne.n	80086f6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008610:	4413      	add	r3, r2
 8008612:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <put_fat+0xea>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	091b      	lsrs	r3, r3, #4
 8008622:	b2db      	uxtb	r3, r3
 8008624:	e00e      	b.n	8008644 <put_fat+0x108>
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	b25b      	sxtb	r3, r3
 800862c:	f023 030f 	bic.w	r3, r3, #15
 8008630:	b25a      	sxtb	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	0a1b      	lsrs	r3, r3, #8
 8008636:	b25b      	sxtb	r3, r3
 8008638:	f003 030f 	and.w	r3, r3, #15
 800863c:	b25b      	sxtb	r3, r3
 800863e:	4313      	orrs	r3, r2
 8008640:	b25b      	sxtb	r3, r3
 8008642:	b2db      	uxtb	r3, r3
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2201      	movs	r2, #1
 800864c:	70da      	strb	r2, [r3, #3]
			break;
 800864e:	e057      	b.n	8008700 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a1a      	ldr	r2, [r3, #32]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	4413      	add	r3, r2
 800865a:	4619      	mov	r1, r3
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f7ff fe0d 	bl	800827c <move_window>
 8008662:	4603      	mov	r3, r0
 8008664:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008666:	7ffb      	ldrb	r3, [r7, #31]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d146      	bne.n	80086fa <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800867a:	4413      	add	r3, r2
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	b292      	uxth	r2, r2
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff fb85 	bl	8007d92 <st_word>
			fs->wflag = 1;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2201      	movs	r2, #1
 800868c:	70da      	strb	r2, [r3, #3]
			break;
 800868e:	e037      	b.n	8008700 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a1a      	ldr	r2, [r3, #32]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	09db      	lsrs	r3, r3, #7
 8008698:	4413      	add	r3, r2
 800869a:	4619      	mov	r1, r3
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff fded 	bl	800827c <move_window>
 80086a2:	4603      	mov	r3, r0
 80086a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086a6:	7ffb      	ldrb	r3, [r7, #31]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d128      	bne.n	80086fe <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086c0:	4413      	add	r3, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7ff fb42 	bl	8007d4c <ld_dword>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80086ce:	4323      	orrs	r3, r4
 80086d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086e0:	4413      	add	r3, r2
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff fb6f 	bl	8007dc8 <st_dword>
			fs->wflag = 1;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	70da      	strb	r2, [r3, #3]
			break;
 80086f0:	e006      	b.n	8008700 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80086f2:	bf00      	nop
 80086f4:	e004      	b.n	8008700 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80086f6:	bf00      	nop
 80086f8:	e002      	b.n	8008700 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80086fa:	bf00      	nop
 80086fc:	e000      	b.n	8008700 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80086fe:	bf00      	nop
		}
	}
	return res;
 8008700:	7ffb      	ldrb	r3, [r7, #31]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3724      	adds	r7, #36	; 0x24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd90      	pop	{r4, r7, pc}

0800870a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b088      	sub	sp, #32
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d904      	bls.n	8008730 <remove_chain+0x26>
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	429a      	cmp	r2, r3
 800872e:	d301      	bcc.n	8008734 <remove_chain+0x2a>
 8008730:	2302      	movs	r3, #2
 8008732:	e04b      	b.n	80087cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00c      	beq.n	8008754 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800873a:	f04f 32ff 	mov.w	r2, #4294967295
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	69b8      	ldr	r0, [r7, #24]
 8008742:	f7ff fefb 	bl	800853c <put_fat>
 8008746:	4603      	mov	r3, r0
 8008748:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800874a:	7ffb      	ldrb	r3, [r7, #31]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <remove_chain+0x4a>
 8008750:	7ffb      	ldrb	r3, [r7, #31]
 8008752:	e03b      	b.n	80087cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008754:	68b9      	ldr	r1, [r7, #8]
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7ff fe4b 	bl	80083f2 <get_fat>
 800875c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d031      	beq.n	80087c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d101      	bne.n	800876e <remove_chain+0x64>
 800876a:	2302      	movs	r3, #2
 800876c:	e02e      	b.n	80087cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008774:	d101      	bne.n	800877a <remove_chain+0x70>
 8008776:	2301      	movs	r3, #1
 8008778:	e028      	b.n	80087cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800877a:	2200      	movs	r2, #0
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	69b8      	ldr	r0, [r7, #24]
 8008780:	f7ff fedc 	bl	800853c <put_fat>
 8008784:	4603      	mov	r3, r0
 8008786:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008788:	7ffb      	ldrb	r3, [r7, #31]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <remove_chain+0x88>
 800878e:	7ffb      	ldrb	r3, [r7, #31]
 8008790:	e01c      	b.n	80087cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	691a      	ldr	r2, [r3, #16]
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	3b02      	subs	r3, #2
 800879c:	429a      	cmp	r2, r3
 800879e:	d20b      	bcs.n	80087b8 <remove_chain+0xae>
			fs->free_clst++;
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	791b      	ldrb	r3, [r3, #4]
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d3c6      	bcc.n	8008754 <remove_chain+0x4a>
 80087c6:	e000      	b.n	80087ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80087c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10d      	bne.n	8008806 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d004      	beq.n	8008800 <create_chain+0x2c>
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d31b      	bcc.n	8008838 <create_chain+0x64>
 8008800:	2301      	movs	r3, #1
 8008802:	61bb      	str	r3, [r7, #24]
 8008804:	e018      	b.n	8008838 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7ff fdf2 	bl	80083f2 <get_fat>
 800880e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d801      	bhi.n	800881a <create_chain+0x46>
 8008816:	2301      	movs	r3, #1
 8008818:	e070      	b.n	80088fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008820:	d101      	bne.n	8008826 <create_chain+0x52>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	e06a      	b.n	80088fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	429a      	cmp	r2, r3
 800882e:	d201      	bcs.n	8008834 <create_chain+0x60>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	e063      	b.n	80088fc <create_chain+0x128>
		scl = clst;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	3301      	adds	r3, #1
 8008840:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	429a      	cmp	r2, r3
 800884a:	d307      	bcc.n	800885c <create_chain+0x88>
				ncl = 2;
 800884c:	2302      	movs	r3, #2
 800884e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008850:	69fa      	ldr	r2, [r7, #28]
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	429a      	cmp	r2, r3
 8008856:	d901      	bls.n	800885c <create_chain+0x88>
 8008858:	2300      	movs	r3, #0
 800885a:	e04f      	b.n	80088fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800885c:	69f9      	ldr	r1, [r7, #28]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff fdc7 	bl	80083f2 <get_fat>
 8008864:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00e      	beq.n	800888a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d003      	beq.n	800887a <create_chain+0xa6>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d101      	bne.n	800887e <create_chain+0xaa>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	e03e      	b.n	80088fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	429a      	cmp	r2, r3
 8008884:	d1da      	bne.n	800883c <create_chain+0x68>
 8008886:	2300      	movs	r3, #0
 8008888:	e038      	b.n	80088fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800888a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800888c:	f04f 32ff 	mov.w	r2, #4294967295
 8008890:	69f9      	ldr	r1, [r7, #28]
 8008892:	6938      	ldr	r0, [r7, #16]
 8008894:	f7ff fe52 	bl	800853c <put_fat>
 8008898:	4603      	mov	r3, r0
 800889a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800889c:	7dfb      	ldrb	r3, [r7, #23]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d109      	bne.n	80088b6 <create_chain+0xe2>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d006      	beq.n	80088b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80088a8:	69fa      	ldr	r2, [r7, #28]
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6938      	ldr	r0, [r7, #16]
 80088ae:	f7ff fe45 	bl	800853c <put_fat>
 80088b2:	4603      	mov	r3, r0
 80088b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d116      	bne.n	80088ea <create_chain+0x116>
		fs->last_clst = ncl;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	69fa      	ldr	r2, [r7, #28]
 80088c0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	691a      	ldr	r2, [r3, #16]
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	3b02      	subs	r3, #2
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d804      	bhi.n	80088da <create_chain+0x106>
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	1e5a      	subs	r2, r3, #1
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	791b      	ldrb	r3, [r3, #4]
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	711a      	strb	r2, [r3, #4]
 80088e8:	e007      	b.n	80088fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d102      	bne.n	80088f6 <create_chain+0x122>
 80088f0:	f04f 33ff 	mov.w	r3, #4294967295
 80088f4:	e000      	b.n	80088f8 <create_chain+0x124>
 80088f6:	2301      	movs	r3, #1
 80088f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80088fa:	69fb      	ldr	r3, [r7, #28]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3720      	adds	r7, #32
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008904:	b480      	push	{r7}
 8008906:	b087      	sub	sp, #28
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	3304      	adds	r3, #4
 800891a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	0a5b      	lsrs	r3, r3, #9
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	8952      	ldrh	r2, [r2, #10]
 8008924:	fbb3 f3f2 	udiv	r3, r3, r2
 8008928:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	1d1a      	adds	r2, r3, #4
 800892e:	613a      	str	r2, [r7, #16]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <clmt_clust+0x3a>
 800893a:	2300      	movs	r3, #0
 800893c:	e010      	b.n	8008960 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	429a      	cmp	r2, r3
 8008944:	d307      	bcc.n	8008956 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	617b      	str	r3, [r7, #20]
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	3304      	adds	r3, #4
 8008952:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008954:	e7e9      	b.n	800892a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008956:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	4413      	add	r3, r2
}
 8008960:	4618      	mov	r0, r3
 8008962:	371c      	adds	r7, #28
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008982:	d204      	bcs.n	800898e <dir_sdi+0x22>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	f003 031f 	and.w	r3, r3, #31
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <dir_sdi+0x26>
		return FR_INT_ERR;
 800898e:	2302      	movs	r3, #2
 8008990:	e063      	b.n	8008a5a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d106      	bne.n	80089b2 <dir_sdi+0x46>
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d902      	bls.n	80089b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10c      	bne.n	80089d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	095b      	lsrs	r3, r3, #5
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	8912      	ldrh	r2, [r2, #8]
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d301      	bcc.n	80089c8 <dir_sdi+0x5c>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e048      	b.n	8008a5a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	61da      	str	r2, [r3, #28]
 80089d0:	e029      	b.n	8008a26 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	895b      	ldrh	r3, [r3, #10]
 80089d6:	025b      	lsls	r3, r3, #9
 80089d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80089da:	e019      	b.n	8008a10 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6979      	ldr	r1, [r7, #20]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff fd06 	bl	80083f2 <get_fat>
 80089e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ee:	d101      	bne.n	80089f4 <dir_sdi+0x88>
 80089f0:	2301      	movs	r3, #1
 80089f2:	e032      	b.n	8008a5a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d904      	bls.n	8008a04 <dir_sdi+0x98>
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d301      	bcc.n	8008a08 <dir_sdi+0x9c>
 8008a04:	2302      	movs	r3, #2
 8008a06:	e028      	b.n	8008a5a <dir_sdi+0xee>
			ofs -= csz;
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d2e1      	bcs.n	80089dc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008a18:	6979      	ldr	r1, [r7, #20]
 8008a1a:	6938      	ldr	r0, [r7, #16]
 8008a1c:	f7ff fcca 	bl	80083b4 <clust2sect>
 8008a20:	4602      	mov	r2, r0
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <dir_sdi+0xcc>
 8008a34:	2302      	movs	r3, #2
 8008a36:	e010      	b.n	8008a5a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	69da      	ldr	r2, [r3, #28]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	0a5b      	lsrs	r3, r3, #9
 8008a40:	441a      	add	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a52:	441a      	add	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b086      	sub	sp, #24
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	3320      	adds	r3, #32
 8008a78:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <dir_next+0x28>
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a88:	d301      	bcc.n	8008a8e <dir_next+0x2c>
 8008a8a:	2304      	movs	r3, #4
 8008a8c:	e0aa      	b.n	8008be4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f040 8098 	bne.w	8008bca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10b      	bne.n	8008ac4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	095b      	lsrs	r3, r3, #5
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	8912      	ldrh	r2, [r2, #8]
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	f0c0 8088 	bcc.w	8008bca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	61da      	str	r2, [r3, #28]
 8008ac0:	2304      	movs	r3, #4
 8008ac2:	e08f      	b.n	8008be4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	0a5b      	lsrs	r3, r3, #9
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	8952      	ldrh	r2, [r2, #10]
 8008acc:	3a01      	subs	r2, #1
 8008ace:	4013      	ands	r3, r2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d17a      	bne.n	8008bca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	4619      	mov	r1, r3
 8008adc:	4610      	mov	r0, r2
 8008ade:	f7ff fc88 	bl	80083f2 <get_fat>
 8008ae2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d801      	bhi.n	8008aee <dir_next+0x8c>
 8008aea:	2302      	movs	r3, #2
 8008aec:	e07a      	b.n	8008be4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af4:	d101      	bne.n	8008afa <dir_next+0x98>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e074      	b.n	8008be4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d358      	bcc.n	8008bb6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d104      	bne.n	8008b14 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	61da      	str	r2, [r3, #28]
 8008b10:	2304      	movs	r3, #4
 8008b12:	e067      	b.n	8008be4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f7ff fe59 	bl	80087d4 <create_chain>
 8008b22:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <dir_next+0xcc>
 8008b2a:	2307      	movs	r3, #7
 8008b2c:	e05a      	b.n	8008be4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <dir_next+0xd6>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e055      	b.n	8008be4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3e:	d101      	bne.n	8008b44 <dir_next+0xe2>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e04f      	b.n	8008be4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f7ff fb55 	bl	80081f4 <sync_window>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <dir_next+0xf2>
 8008b50:	2301      	movs	r3, #1
 8008b52:	e047      	b.n	8008be4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3330      	adds	r3, #48	; 0x30
 8008b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7ff f97f 	bl	8007e62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008b64:	2300      	movs	r3, #0
 8008b66:	613b      	str	r3, [r7, #16]
 8008b68:	6979      	ldr	r1, [r7, #20]
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7ff fc22 	bl	80083b4 <clust2sect>
 8008b70:	4602      	mov	r2, r0
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b76:	e012      	b.n	8008b9e <dir_next+0x13c>
						fs->wflag = 1;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7ff fb38 	bl	80081f4 <sync_window>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <dir_next+0x12c>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e02a      	b.n	8008be4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	3301      	adds	r3, #1
 8008b92:	613b      	str	r3, [r7, #16]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	895b      	ldrh	r3, [r3, #10]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d3e6      	bcc.n	8008b78 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1ad2      	subs	r2, r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008bbc:	6979      	ldr	r1, [r7, #20]
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7ff fbf8 	bl	80083b4 <clust2sect>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bdc:	441a      	add	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3718      	adds	r7, #24
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff feb4 	bl	800896c <dir_sdi>
 8008c04:	4603      	mov	r3, r0
 8008c06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d12b      	bne.n	8008c66 <dir_alloc+0x7a>
		n = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	4619      	mov	r1, r3
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff fb2f 	bl	800827c <move_window>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d11d      	bne.n	8008c64 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2be5      	cmp	r3, #229	; 0xe5
 8008c30:	d004      	beq.n	8008c3c <dir_alloc+0x50>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d107      	bne.n	8008c4c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	613b      	str	r3, [r7, #16]
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d102      	bne.n	8008c50 <dir_alloc+0x64>
 8008c4a:	e00c      	b.n	8008c66 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008c50:	2101      	movs	r1, #1
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff ff05 	bl	8008a62 <dir_next>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0d7      	beq.n	8008c12 <dir_alloc+0x26>
 8008c62:	e000      	b.n	8008c66 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008c64:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d101      	bne.n	8008c70 <dir_alloc+0x84>
 8008c6c:	2307      	movs	r3, #7
 8008c6e:	75fb      	strb	r3, [r7, #23]
	return res;
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	331a      	adds	r3, #26
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff f847 	bl	8007d1c <ld_word>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d109      	bne.n	8008cae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	3314      	adds	r3, #20
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff f83c 	bl	8007d1c <ld_word>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	041b      	lsls	r3, r3, #16
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008cae:	68fb      	ldr	r3, [r7, #12]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	331a      	adds	r3, #26
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	b292      	uxth	r2, r2
 8008ccc:	4611      	mov	r1, r2
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff f85f 	bl	8007d92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d109      	bne.n	8008cf0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f103 0214 	add.w	r2, r3, #20
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	0c1b      	lsrs	r3, r3, #16
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4610      	mov	r0, r2
 8008cec:	f7ff f851 	bl	8007d92 <st_word>
	}
}
 8008cf0:	bf00      	nop
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008d06:	2100      	movs	r1, #0
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff fe2f 	bl	800896c <dir_sdi>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <dir_find+0x24>
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	e03e      	b.n	8008d9a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	4619      	mov	r1, r3
 8008d22:	6938      	ldr	r0, [r7, #16]
 8008d24:	f7ff faaa 	bl	800827c <move_window>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d12f      	bne.n	8008d92 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <dir_find+0x4e>
 8008d40:	2304      	movs	r3, #4
 8008d42:	75fb      	strb	r3, [r7, #23]
 8008d44:	e028      	b.n	8008d98 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	330b      	adds	r3, #11
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	330b      	adds	r3, #11
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	f003 0308 	and.w	r3, r3, #8
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10a      	bne.n	8008d7e <dir_find+0x86>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a18      	ldr	r0, [r3, #32]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3324      	adds	r3, #36	; 0x24
 8008d70:	220b      	movs	r2, #11
 8008d72:	4619      	mov	r1, r3
 8008d74:	f7ff f88f 	bl	8007e96 <mem_cmp>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00b      	beq.n	8008d96 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008d7e:	2100      	movs	r1, #0
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff fe6e 	bl	8008a62 <dir_next>
 8008d86:	4603      	mov	r3, r0
 8008d88:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0c5      	beq.n	8008d1c <dir_find+0x24>
 8008d90:	e002      	b.n	8008d98 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008d92:	bf00      	nop
 8008d94:	e000      	b.n	8008d98 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008d96:	bf00      	nop

	return res;
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008db0:	2101      	movs	r1, #1
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff ff1a 	bl	8008bec <dir_alloc>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d11c      	bne.n	8008dfc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	68b8      	ldr	r0, [r7, #8]
 8008dca:	f7ff fa57 	bl	800827c <move_window>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d111      	bne.n	8008dfc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	2100      	movs	r1, #0
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff f83e 	bl	8007e62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a18      	ldr	r0, [r3, #32]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3324      	adds	r3, #36	; 0x24
 8008dee:	220b      	movs	r2, #11
 8008df0:	4619      	mov	r1, r3
 8008df2:	f7ff f815 	bl	8007e20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3324      	adds	r3, #36	; 0x24
 8008e1c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008e1e:	220b      	movs	r2, #11
 8008e20:	2120      	movs	r1, #32
 8008e22:	68b8      	ldr	r0, [r7, #8]
 8008e24:	f7ff f81d 	bl	8007e62 <mem_set>
	si = i = 0; ni = 8;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	613b      	str	r3, [r7, #16]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	2308      	movs	r3, #8
 8008e32:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	617a      	str	r2, [r7, #20]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008e42:	7ffb      	ldrb	r3, [r7, #31]
 8008e44:	2b20      	cmp	r3, #32
 8008e46:	d94e      	bls.n	8008ee6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008e48:	7ffb      	ldrb	r3, [r7, #31]
 8008e4a:	2b2f      	cmp	r3, #47	; 0x2f
 8008e4c:	d006      	beq.n	8008e5c <create_name+0x54>
 8008e4e:	7ffb      	ldrb	r3, [r7, #31]
 8008e50:	2b5c      	cmp	r3, #92	; 0x5c
 8008e52:	d110      	bne.n	8008e76 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008e54:	e002      	b.n	8008e5c <create_name+0x54>
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	617b      	str	r3, [r7, #20]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	4413      	add	r3, r2
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b2f      	cmp	r3, #47	; 0x2f
 8008e66:	d0f6      	beq.n	8008e56 <create_name+0x4e>
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b5c      	cmp	r3, #92	; 0x5c
 8008e72:	d0f0      	beq.n	8008e56 <create_name+0x4e>
			break;
 8008e74:	e038      	b.n	8008ee8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008e76:	7ffb      	ldrb	r3, [r7, #31]
 8008e78:	2b2e      	cmp	r3, #46	; 0x2e
 8008e7a:	d003      	beq.n	8008e84 <create_name+0x7c>
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d30c      	bcc.n	8008e9e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	2b0b      	cmp	r3, #11
 8008e88:	d002      	beq.n	8008e90 <create_name+0x88>
 8008e8a:	7ffb      	ldrb	r3, [r7, #31]
 8008e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e8e:	d001      	beq.n	8008e94 <create_name+0x8c>
 8008e90:	2306      	movs	r3, #6
 8008e92:	e044      	b.n	8008f1e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008e94:	2308      	movs	r3, #8
 8008e96:	613b      	str	r3, [r7, #16]
 8008e98:	230b      	movs	r3, #11
 8008e9a:	61bb      	str	r3, [r7, #24]
			continue;
 8008e9c:	e022      	b.n	8008ee4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008e9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	da04      	bge.n	8008eb0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008ea6:	7ffb      	ldrb	r3, [r7, #31]
 8008ea8:	3b80      	subs	r3, #128	; 0x80
 8008eaa:	4a1f      	ldr	r2, [pc, #124]	; (8008f28 <create_name+0x120>)
 8008eac:	5cd3      	ldrb	r3, [r2, r3]
 8008eae:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008eb0:	7ffb      	ldrb	r3, [r7, #31]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	481d      	ldr	r0, [pc, #116]	; (8008f2c <create_name+0x124>)
 8008eb6:	f7ff f815 	bl	8007ee4 <chk_chr>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <create_name+0xbc>
 8008ec0:	2306      	movs	r3, #6
 8008ec2:	e02c      	b.n	8008f1e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008ec4:	7ffb      	ldrb	r3, [r7, #31]
 8008ec6:	2b60      	cmp	r3, #96	; 0x60
 8008ec8:	d905      	bls.n	8008ed6 <create_name+0xce>
 8008eca:	7ffb      	ldrb	r3, [r7, #31]
 8008ecc:	2b7a      	cmp	r3, #122	; 0x7a
 8008ece:	d802      	bhi.n	8008ed6 <create_name+0xce>
 8008ed0:	7ffb      	ldrb	r3, [r7, #31]
 8008ed2:	3b20      	subs	r3, #32
 8008ed4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	613a      	str	r2, [r7, #16]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	4413      	add	r3, r2
 8008ee0:	7ffa      	ldrb	r2, [r7, #31]
 8008ee2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008ee4:	e7a6      	b.n	8008e34 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008ee6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	441a      	add	r2, r3
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <create_name+0xf4>
 8008ef8:	2306      	movs	r3, #6
 8008efa:	e010      	b.n	8008f1e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2be5      	cmp	r3, #229	; 0xe5
 8008f02:	d102      	bne.n	8008f0a <create_name+0x102>
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2205      	movs	r2, #5
 8008f08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008f0a:	7ffb      	ldrb	r3, [r7, #31]
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	d801      	bhi.n	8008f14 <create_name+0x10c>
 8008f10:	2204      	movs	r2, #4
 8008f12:	e000      	b.n	8008f16 <create_name+0x10e>
 8008f14:	2200      	movs	r2, #0
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	330b      	adds	r3, #11
 8008f1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008f1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3720      	adds	r7, #32
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	0800b1e8 	.word	0x0800b1e8
 8008f2c:	0800b17c 	.word	0x0800b17c

08008f30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008f44:	e002      	b.n	8008f4c <follow_path+0x1c>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	603b      	str	r3, [r7, #0]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b2f      	cmp	r3, #47	; 0x2f
 8008f52:	d0f8      	beq.n	8008f46 <follow_path+0x16>
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b5c      	cmp	r3, #92	; 0x5c
 8008f5a:	d0f4      	beq.n	8008f46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2b1f      	cmp	r3, #31
 8008f68:	d80a      	bhi.n	8008f80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2280      	movs	r2, #128	; 0x80
 8008f6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008f72:	2100      	movs	r1, #0
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff fcf9 	bl	800896c <dir_sdi>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	75fb      	strb	r3, [r7, #23]
 8008f7e:	e043      	b.n	8009008 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f80:	463b      	mov	r3, r7
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff ff3f 	bl	8008e08 <create_name>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d134      	bne.n	8008ffe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff feaf 	bl	8008cf8 <dir_find>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008fa4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d127      	bne.n	8009002 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d122      	bne.n	8009002 <follow_path+0xd2>
 8008fbc:	2305      	movs	r3, #5
 8008fbe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008fc0:	e01f      	b.n	8009002 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008fc2:	7afb      	ldrb	r3, [r7, #11]
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d11c      	bne.n	8009006 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	799b      	ldrb	r3, [r3, #6]
 8008fd0:	f003 0310 	and.w	r3, r3, #16
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008fd8:	2305      	movs	r3, #5
 8008fda:	75fb      	strb	r3, [r7, #23]
 8008fdc:	e014      	b.n	8009008 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fec:	4413      	add	r3, r2
 8008fee:	4619      	mov	r1, r3
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f7ff fe42 	bl	8008c7a <ld_clust>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ffc:	e7c0      	b.n	8008f80 <follow_path+0x50>
			if (res != FR_OK) break;
 8008ffe:	bf00      	nop
 8009000:	e002      	b.n	8009008 <follow_path+0xd8>
				break;
 8009002:	bf00      	nop
 8009004:	e000      	b.n	8009008 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009006:	bf00      	nop
			}
		}
	}

	return res;
 8009008:	7dfb      	ldrb	r3, [r7, #23]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009012:	b480      	push	{r7}
 8009014:	b087      	sub	sp, #28
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800901a:	f04f 33ff 	mov.w	r3, #4294967295
 800901e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d031      	beq.n	800908c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	617b      	str	r3, [r7, #20]
 800902e:	e002      	b.n	8009036 <get_ldnumber+0x24>
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	3301      	adds	r3, #1
 8009034:	617b      	str	r3, [r7, #20]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b20      	cmp	r3, #32
 800903c:	d903      	bls.n	8009046 <get_ldnumber+0x34>
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b3a      	cmp	r3, #58	; 0x3a
 8009044:	d1f4      	bne.n	8009030 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b3a      	cmp	r3, #58	; 0x3a
 800904c:	d11c      	bne.n	8009088 <get_ldnumber+0x76>
			tp = *path;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	60fa      	str	r2, [r7, #12]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	3b30      	subs	r3, #48	; 0x30
 800905e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2b09      	cmp	r3, #9
 8009064:	d80e      	bhi.n	8009084 <get_ldnumber+0x72>
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	429a      	cmp	r2, r3
 800906c:	d10a      	bne.n	8009084 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d107      	bne.n	8009084 <get_ldnumber+0x72>
					vol = (int)i;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	3301      	adds	r3, #1
 800907c:	617b      	str	r3, [r7, #20]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	e002      	b.n	800908e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009088:	2300      	movs	r3, #0
 800908a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800908c:	693b      	ldr	r3, [r7, #16]
}
 800908e:	4618      	mov	r0, r3
 8009090:	371c      	adds	r7, #28
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
	...

0800909c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	70da      	strb	r2, [r3, #3]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f04f 32ff 	mov.w	r2, #4294967295
 80090b2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff f8e0 	bl	800827c <move_window>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <check_fs+0x2a>
 80090c2:	2304      	movs	r3, #4
 80090c4:	e038      	b.n	8009138 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	3330      	adds	r3, #48	; 0x30
 80090ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe fe24 	bl	8007d1c <ld_word>
 80090d4:	4603      	mov	r3, r0
 80090d6:	461a      	mov	r2, r3
 80090d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80090dc:	429a      	cmp	r2, r3
 80090de:	d001      	beq.n	80090e4 <check_fs+0x48>
 80090e0:	2303      	movs	r3, #3
 80090e2:	e029      	b.n	8009138 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090ea:	2be9      	cmp	r3, #233	; 0xe9
 80090ec:	d009      	beq.n	8009102 <check_fs+0x66>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090f4:	2beb      	cmp	r3, #235	; 0xeb
 80090f6:	d11e      	bne.n	8009136 <check_fs+0x9a>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80090fe:	2b90      	cmp	r3, #144	; 0x90
 8009100:	d119      	bne.n	8009136 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3330      	adds	r3, #48	; 0x30
 8009106:	3336      	adds	r3, #54	; 0x36
 8009108:	4618      	mov	r0, r3
 800910a:	f7fe fe1f 	bl	8007d4c <ld_dword>
 800910e:	4603      	mov	r3, r0
 8009110:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009114:	4a0a      	ldr	r2, [pc, #40]	; (8009140 <check_fs+0xa4>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d101      	bne.n	800911e <check_fs+0x82>
 800911a:	2300      	movs	r3, #0
 800911c:	e00c      	b.n	8009138 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3330      	adds	r3, #48	; 0x30
 8009122:	3352      	adds	r3, #82	; 0x52
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fe11 	bl	8007d4c <ld_dword>
 800912a:	4602      	mov	r2, r0
 800912c:	4b05      	ldr	r3, [pc, #20]	; (8009144 <check_fs+0xa8>)
 800912e:	429a      	cmp	r2, r3
 8009130:	d101      	bne.n	8009136 <check_fs+0x9a>
 8009132:	2300      	movs	r3, #0
 8009134:	e000      	b.n	8009138 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009136:	2302      	movs	r3, #2
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	00544146 	.word	0x00544146
 8009144:	33544146 	.word	0x33544146

08009148 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b096      	sub	sp, #88	; 0x58
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	4613      	mov	r3, r2
 8009154:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f7ff ff58 	bl	8009012 <get_ldnumber>
 8009162:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009166:	2b00      	cmp	r3, #0
 8009168:	da01      	bge.n	800916e <find_volume+0x26>
 800916a:	230b      	movs	r3, #11
 800916c:	e22e      	b.n	80095cc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800916e:	4aa8      	ldr	r2, [pc, #672]	; (8009410 <find_volume+0x2c8>)
 8009170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009176:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <find_volume+0x3a>
 800917e:	230c      	movs	r3, #12
 8009180:	e224      	b.n	80095cc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009186:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	f023 0301 	bic.w	r3, r3, #1
 800918e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01a      	beq.n	80091ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	785b      	ldrb	r3, [r3, #1]
 800919c:	4618      	mov	r0, r3
 800919e:	f7fe fd1f 	bl	8007be0 <disk_status>
 80091a2:	4603      	mov	r3, r0
 80091a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80091a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10c      	bne.n	80091ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d007      	beq.n	80091ca <find_volume+0x82>
 80091ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091be:	f003 0304 	and.w	r3, r3, #4
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80091c6:	230a      	movs	r3, #10
 80091c8:	e200      	b.n	80095cc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80091ca:	2300      	movs	r3, #0
 80091cc:	e1fe      	b.n	80095cc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80091ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d0:	2200      	movs	r2, #0
 80091d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80091d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	785b      	ldrb	r3, [r3, #1]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe fd17 	bl	8007c14 <disk_initialize>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80091ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80091f8:	2303      	movs	r3, #3
 80091fa:	e1e7      	b.n	80095cc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d007      	beq.n	8009212 <find_volume+0xca>
 8009202:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800920e:	230a      	movs	r3, #10
 8009210:	e1dc      	b.n	80095cc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009216:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009218:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800921a:	f7ff ff3f 	bl	800909c <check_fs>
 800921e:	4603      	mov	r3, r0
 8009220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009228:	2b02      	cmp	r3, #2
 800922a:	d14b      	bne.n	80092c4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800922c:	2300      	movs	r3, #0
 800922e:	643b      	str	r3, [r7, #64]	; 0x40
 8009230:	e01f      	b.n	8009272 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009234:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800923a:	011b      	lsls	r3, r3, #4
 800923c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009240:	4413      	add	r3, r2
 8009242:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	3304      	adds	r3, #4
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d006      	beq.n	800925c <find_volume+0x114>
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	3308      	adds	r3, #8
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fd7a 	bl	8007d4c <ld_dword>
 8009258:	4602      	mov	r2, r0
 800925a:	e000      	b.n	800925e <find_volume+0x116>
 800925c:	2200      	movs	r2, #0
 800925e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009266:	440b      	add	r3, r1
 8009268:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800926c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800926e:	3301      	adds	r3, #1
 8009270:	643b      	str	r3, [r7, #64]	; 0x40
 8009272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009274:	2b03      	cmp	r3, #3
 8009276:	d9dc      	bls.n	8009232 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009278:	2300      	movs	r3, #0
 800927a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800927c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <find_volume+0x140>
 8009282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009284:	3b01      	subs	r3, #1
 8009286:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009290:	4413      	add	r3, r2
 8009292:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009296:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800929a:	2b00      	cmp	r3, #0
 800929c:	d005      	beq.n	80092aa <find_volume+0x162>
 800929e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092a2:	f7ff fefb 	bl	800909c <check_fs>
 80092a6:	4603      	mov	r3, r0
 80092a8:	e000      	b.n	80092ac <find_volume+0x164>
 80092aa:	2303      	movs	r3, #3
 80092ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80092b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d905      	bls.n	80092c4 <find_volume+0x17c>
 80092b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ba:	3301      	adds	r3, #1
 80092bc:	643b      	str	r3, [r7, #64]	; 0x40
 80092be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d9e1      	bls.n	8009288 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80092c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d101      	bne.n	80092d0 <find_volume+0x188>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e17d      	b.n	80095cc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80092d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d901      	bls.n	80092dc <find_volume+0x194>
 80092d8:	230d      	movs	r3, #13
 80092da:	e177      	b.n	80095cc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	3330      	adds	r3, #48	; 0x30
 80092e0:	330b      	adds	r3, #11
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe fd1a 	bl	8007d1c <ld_word>
 80092e8:	4603      	mov	r3, r0
 80092ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092ee:	d001      	beq.n	80092f4 <find_volume+0x1ac>
 80092f0:	230d      	movs	r3, #13
 80092f2:	e16b      	b.n	80095cc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	3330      	adds	r3, #48	; 0x30
 80092f8:	3316      	adds	r3, #22
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fd0e 	bl	8007d1c <ld_word>
 8009300:	4603      	mov	r3, r0
 8009302:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <find_volume+0x1d0>
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930c:	3330      	adds	r3, #48	; 0x30
 800930e:	3324      	adds	r3, #36	; 0x24
 8009310:	4618      	mov	r0, r3
 8009312:	f7fe fd1b 	bl	8007d4c <ld_dword>
 8009316:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800931c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009320:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932a:	789b      	ldrb	r3, [r3, #2]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d005      	beq.n	800933c <find_volume+0x1f4>
 8009330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009332:	789b      	ldrb	r3, [r3, #2]
 8009334:	2b02      	cmp	r3, #2
 8009336:	d001      	beq.n	800933c <find_volume+0x1f4>
 8009338:	230d      	movs	r3, #13
 800933a:	e147      	b.n	80095cc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	789b      	ldrb	r3, [r3, #2]
 8009340:	461a      	mov	r2, r3
 8009342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009344:	fb02 f303 	mul.w	r3, r2, r3
 8009348:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800934a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009350:	b29a      	uxth	r2, r3
 8009352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009354:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009358:	895b      	ldrh	r3, [r3, #10]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d008      	beq.n	8009370 <find_volume+0x228>
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	895b      	ldrh	r3, [r3, #10]
 8009362:	461a      	mov	r2, r3
 8009364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009366:	895b      	ldrh	r3, [r3, #10]
 8009368:	3b01      	subs	r3, #1
 800936a:	4013      	ands	r3, r2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <find_volume+0x22c>
 8009370:	230d      	movs	r3, #13
 8009372:	e12b      	b.n	80095cc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009376:	3330      	adds	r3, #48	; 0x30
 8009378:	3311      	adds	r3, #17
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fcce 	bl	8007d1c <ld_word>
 8009380:	4603      	mov	r3, r0
 8009382:	461a      	mov	r2, r3
 8009384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009386:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938a:	891b      	ldrh	r3, [r3, #8]
 800938c:	f003 030f 	and.w	r3, r3, #15
 8009390:	b29b      	uxth	r3, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <find_volume+0x252>
 8009396:	230d      	movs	r3, #13
 8009398:	e118      	b.n	80095cc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	3330      	adds	r3, #48	; 0x30
 800939e:	3313      	adds	r3, #19
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe fcbb 	bl	8007d1c <ld_word>
 80093a6:	4603      	mov	r3, r0
 80093a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80093aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d106      	bne.n	80093be <find_volume+0x276>
 80093b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b2:	3330      	adds	r3, #48	; 0x30
 80093b4:	3320      	adds	r3, #32
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe fcc8 	bl	8007d4c <ld_dword>
 80093bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80093be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c0:	3330      	adds	r3, #48	; 0x30
 80093c2:	330e      	adds	r3, #14
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fca9 	bl	8007d1c <ld_word>
 80093ca:	4603      	mov	r3, r0
 80093cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80093ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <find_volume+0x290>
 80093d4:	230d      	movs	r3, #13
 80093d6:	e0f9      	b.n	80095cc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80093d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093dc:	4413      	add	r3, r2
 80093de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093e0:	8912      	ldrh	r2, [r2, #8]
 80093e2:	0912      	lsrs	r2, r2, #4
 80093e4:	b292      	uxth	r2, r2
 80093e6:	4413      	add	r3, r2
 80093e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80093ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d201      	bcs.n	80093f6 <find_volume+0x2ae>
 80093f2:	230d      	movs	r3, #13
 80093f4:	e0ea      	b.n	80095cc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80093f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093fe:	8952      	ldrh	r2, [r2, #10]
 8009400:	fbb3 f3f2 	udiv	r3, r3, r2
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	2b00      	cmp	r3, #0
 800940a:	d103      	bne.n	8009414 <find_volume+0x2cc>
 800940c:	230d      	movs	r3, #13
 800940e:	e0dd      	b.n	80095cc <find_volume+0x484>
 8009410:	20000058 	.word	0x20000058
		fmt = FS_FAT32;
 8009414:	2303      	movs	r3, #3
 8009416:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800941a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009420:	4293      	cmp	r3, r2
 8009422:	d802      	bhi.n	800942a <find_volume+0x2e2>
 8009424:	2302      	movs	r3, #2
 8009426:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009430:	4293      	cmp	r3, r2
 8009432:	d802      	bhi.n	800943a <find_volume+0x2f2>
 8009434:	2301      	movs	r3, #1
 8009436:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943c:	1c9a      	adds	r2, r3, #2
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009444:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009446:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009448:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800944a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800944c:	441a      	add	r2, r3
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009452:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	441a      	add	r2, r3
 8009458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800945c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009460:	2b03      	cmp	r3, #3
 8009462:	d11e      	bne.n	80094a2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	3330      	adds	r3, #48	; 0x30
 8009468:	332a      	adds	r3, #42	; 0x2a
 800946a:	4618      	mov	r0, r3
 800946c:	f7fe fc56 	bl	8007d1c <ld_word>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <find_volume+0x332>
 8009476:	230d      	movs	r3, #13
 8009478:	e0a8      	b.n	80095cc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947c:	891b      	ldrh	r3, [r3, #8]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <find_volume+0x33e>
 8009482:	230d      	movs	r3, #13
 8009484:	e0a2      	b.n	80095cc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	3330      	adds	r3, #48	; 0x30
 800948a:	332c      	adds	r3, #44	; 0x2c
 800948c:	4618      	mov	r0, r3
 800948e:	f7fe fc5d 	bl	8007d4c <ld_dword>
 8009492:	4602      	mov	r2, r0
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	647b      	str	r3, [r7, #68]	; 0x44
 80094a0:	e01f      	b.n	80094e2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80094a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a4:	891b      	ldrh	r3, [r3, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <find_volume+0x366>
 80094aa:	230d      	movs	r3, #13
 80094ac:	e08e      	b.n	80095cc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80094ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b0:	6a1a      	ldr	r2, [r3, #32]
 80094b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b4:	441a      	add	r2, r3
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80094ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d103      	bne.n	80094ca <find_volume+0x382>
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	e00a      	b.n	80094e0 <find_volume+0x398>
 80094ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094cc:	695a      	ldr	r2, [r3, #20]
 80094ce:	4613      	mov	r3, r2
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	4413      	add	r3, r2
 80094d4:	085a      	lsrs	r2, r3, #1
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80094e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	699a      	ldr	r2, [r3, #24]
 80094e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80094ec:	0a5b      	lsrs	r3, r3, #9
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d201      	bcs.n	80094f6 <find_volume+0x3ae>
 80094f2:	230d      	movs	r3, #13
 80094f4:	e06a      	b.n	80095cc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	f04f 32ff 	mov.w	r2, #4294967295
 80094fc:	611a      	str	r2, [r3, #16]
 80094fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009500:	691a      	ldr	r2, [r3, #16]
 8009502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009504:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	2280      	movs	r2, #128	; 0x80
 800950a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800950c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009510:	2b03      	cmp	r3, #3
 8009512:	d149      	bne.n	80095a8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009516:	3330      	adds	r3, #48	; 0x30
 8009518:	3330      	adds	r3, #48	; 0x30
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe fbfe 	bl	8007d1c <ld_word>
 8009520:	4603      	mov	r3, r0
 8009522:	2b01      	cmp	r3, #1
 8009524:	d140      	bne.n	80095a8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009528:	3301      	adds	r3, #1
 800952a:	4619      	mov	r1, r3
 800952c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800952e:	f7fe fea5 	bl	800827c <move_window>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d137      	bne.n	80095a8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	2200      	movs	r2, #0
 800953c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009540:	3330      	adds	r3, #48	; 0x30
 8009542:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe fbe8 	bl	8007d1c <ld_word>
 800954c:	4603      	mov	r3, r0
 800954e:	461a      	mov	r2, r3
 8009550:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009554:	429a      	cmp	r2, r3
 8009556:	d127      	bne.n	80095a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	3330      	adds	r3, #48	; 0x30
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe fbf5 	bl	8007d4c <ld_dword>
 8009562:	4602      	mov	r2, r0
 8009564:	4b1b      	ldr	r3, [pc, #108]	; (80095d4 <find_volume+0x48c>)
 8009566:	429a      	cmp	r2, r3
 8009568:	d11e      	bne.n	80095a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	3330      	adds	r3, #48	; 0x30
 800956e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fbea 	bl	8007d4c <ld_dword>
 8009578:	4602      	mov	r2, r0
 800957a:	4b17      	ldr	r3, [pc, #92]	; (80095d8 <find_volume+0x490>)
 800957c:	429a      	cmp	r2, r3
 800957e:	d113      	bne.n	80095a8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	3330      	adds	r3, #48	; 0x30
 8009584:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe fbdf 	bl	8007d4c <ld_dword>
 800958e:	4602      	mov	r2, r0
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	3330      	adds	r3, #48	; 0x30
 8009598:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe fbd5 	bl	8007d4c <ld_dword>
 80095a2:	4602      	mov	r2, r0
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80095ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80095b0:	4b0a      	ldr	r3, [pc, #40]	; (80095dc <find_volume+0x494>)
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	3301      	adds	r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	4b08      	ldr	r3, [pc, #32]	; (80095dc <find_volume+0x494>)
 80095ba:	801a      	strh	r2, [r3, #0]
 80095bc:	4b07      	ldr	r3, [pc, #28]	; (80095dc <find_volume+0x494>)
 80095be:	881a      	ldrh	r2, [r3, #0]
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80095c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095c6:	f7fe fdf1 	bl	80081ac <clear_lock>
#endif
	return FR_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3758      	adds	r7, #88	; 0x58
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	41615252 	.word	0x41615252
 80095d8:	61417272 	.word	0x61417272
 80095dc:	2000005c 	.word	0x2000005c

080095e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80095ea:	2309      	movs	r3, #9
 80095ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d01c      	beq.n	800962e <validate+0x4e>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d018      	beq.n	800962e <validate+0x4e>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d013      	beq.n	800962e <validate+0x4e>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	889a      	ldrh	r2, [r3, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	88db      	ldrh	r3, [r3, #6]
 8009610:	429a      	cmp	r2, r3
 8009612:	d10c      	bne.n	800962e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	785b      	ldrb	r3, [r3, #1]
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fae0 	bl	8007be0 <disk_status>
 8009620:	4603      	mov	r3, r0
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <validate+0x4e>
			res = FR_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d102      	bne.n	800963a <validate+0x5a>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	e000      	b.n	800963c <validate+0x5c>
 800963a:	2300      	movs	r3, #0
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	6013      	str	r3, [r2, #0]
	return res;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b088      	sub	sp, #32
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	4613      	mov	r3, r2
 8009658:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800965e:	f107 0310 	add.w	r3, r7, #16
 8009662:	4618      	mov	r0, r3
 8009664:	f7ff fcd5 	bl	8009012 <get_ldnumber>
 8009668:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	2b00      	cmp	r3, #0
 800966e:	da01      	bge.n	8009674 <f_mount+0x28>
 8009670:	230b      	movs	r3, #11
 8009672:	e02b      	b.n	80096cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009674:	4a17      	ldr	r2, [pc, #92]	; (80096d4 <f_mount+0x88>)
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800967c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d005      	beq.n	8009690 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009684:	69b8      	ldr	r0, [r7, #24]
 8009686:	f7fe fd91 	bl	80081ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	2200      	movs	r2, #0
 800968e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	490d      	ldr	r1, [pc, #52]	; (80096d4 <f_mount+0x88>)
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <f_mount+0x66>
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d001      	beq.n	80096b6 <f_mount+0x6a>
 80096b2:	2300      	movs	r3, #0
 80096b4:	e00a      	b.n	80096cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80096b6:	f107 010c 	add.w	r1, r7, #12
 80096ba:	f107 0308 	add.w	r3, r7, #8
 80096be:	2200      	movs	r2, #0
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff fd41 	bl	8009148 <find_volume>
 80096c6:	4603      	mov	r3, r0
 80096c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3720      	adds	r7, #32
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	20000058 	.word	0x20000058

080096d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b098      	sub	sp, #96	; 0x60
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	4613      	mov	r3, r2
 80096e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <f_open+0x18>
 80096ec:	2309      	movs	r3, #9
 80096ee:	e1ad      	b.n	8009a4c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80096f8:	79fa      	ldrb	r2, [r7, #7]
 80096fa:	f107 0110 	add.w	r1, r7, #16
 80096fe:	f107 0308 	add.w	r3, r7, #8
 8009702:	4618      	mov	r0, r3
 8009704:	f7ff fd20 	bl	8009148 <find_volume>
 8009708:	4603      	mov	r3, r0
 800970a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800970e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 8191 	bne.w	8009a3a <f_open+0x362>
		dj.obj.fs = fs;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	f107 0314 	add.w	r3, r7, #20
 8009722:	4611      	mov	r1, r2
 8009724:	4618      	mov	r0, r3
 8009726:	f7ff fc03 	bl	8008f30 <follow_path>
 800972a:	4603      	mov	r3, r0
 800972c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009734:	2b00      	cmp	r3, #0
 8009736:	d11a      	bne.n	800976e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009738:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800973c:	b25b      	sxtb	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	da03      	bge.n	800974a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009742:	2306      	movs	r3, #6
 8009744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009748:	e011      	b.n	800976e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	bf14      	ite	ne
 8009754:	2301      	movne	r3, #1
 8009756:	2300      	moveq	r3, #0
 8009758:	b2db      	uxtb	r3, r3
 800975a:	461a      	mov	r2, r3
 800975c:	f107 0314 	add.w	r3, r7, #20
 8009760:	4611      	mov	r1, r2
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe fbda 	bl	8007f1c <chk_lock>
 8009768:	4603      	mov	r3, r0
 800976a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	f003 031c 	and.w	r3, r3, #28
 8009774:	2b00      	cmp	r3, #0
 8009776:	d07f      	beq.n	8009878 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800977c:	2b00      	cmp	r3, #0
 800977e:	d017      	beq.n	80097b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009784:	2b04      	cmp	r3, #4
 8009786:	d10e      	bne.n	80097a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009788:	f7fe fc24 	bl	8007fd4 <enq_lock>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d006      	beq.n	80097a0 <f_open+0xc8>
 8009792:	f107 0314 	add.w	r3, r7, #20
 8009796:	4618      	mov	r0, r3
 8009798:	f7ff fb03 	bl	8008da2 <dir_register>
 800979c:	4603      	mov	r3, r0
 800979e:	e000      	b.n	80097a2 <f_open+0xca>
 80097a0:	2312      	movs	r3, #18
 80097a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80097a6:	79fb      	ldrb	r3, [r7, #7]
 80097a8:	f043 0308 	orr.w	r3, r3, #8
 80097ac:	71fb      	strb	r3, [r7, #7]
 80097ae:	e010      	b.n	80097d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80097b0:	7ebb      	ldrb	r3, [r7, #26]
 80097b2:	f003 0311 	and.w	r3, r3, #17
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <f_open+0xea>
					res = FR_DENIED;
 80097ba:	2307      	movs	r3, #7
 80097bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80097c0:	e007      	b.n	80097d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <f_open+0xfa>
 80097cc:	2308      	movs	r3, #8
 80097ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80097d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d168      	bne.n	80098ac <f_open+0x1d4>
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	f003 0308 	and.w	r3, r3, #8
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d063      	beq.n	80098ac <f_open+0x1d4>
				dw = GET_FATTIME();
 80097e4:	f7fc fef0 	bl	80065c8 <get_fattime>
 80097e8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80097ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ec:	330e      	adds	r3, #14
 80097ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fae9 	bl	8007dc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80097f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f8:	3316      	adds	r3, #22
 80097fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fae3 	bl	8007dc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009804:	330b      	adds	r3, #11
 8009806:	2220      	movs	r2, #32
 8009808:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800980e:	4611      	mov	r1, r2
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff fa32 	bl	8008c7a <ld_clust>
 8009816:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800981c:	2200      	movs	r2, #0
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fa4a 	bl	8008cb8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009826:	331c      	adds	r3, #28
 8009828:	2100      	movs	r1, #0
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe facc 	bl	8007dc8 <st_dword>
					fs->wflag = 1;
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	2201      	movs	r2, #1
 8009834:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009838:	2b00      	cmp	r3, #0
 800983a:	d037      	beq.n	80098ac <f_open+0x1d4>
						dw = fs->winsect;
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009842:	f107 0314 	add.w	r3, r7, #20
 8009846:	2200      	movs	r2, #0
 8009848:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe ff5d 	bl	800870a <remove_chain>
 8009850:	4603      	mov	r3, r0
 8009852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800985a:	2b00      	cmp	r3, #0
 800985c:	d126      	bne.n	80098ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe fd0a 	bl	800827c <move_window>
 8009868:	4603      	mov	r3, r0
 800986a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009872:	3a01      	subs	r2, #1
 8009874:	60da      	str	r2, [r3, #12]
 8009876:	e019      	b.n	80098ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009878:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800987c:	2b00      	cmp	r3, #0
 800987e:	d115      	bne.n	80098ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009880:	7ebb      	ldrb	r3, [r7, #26]
 8009882:	f003 0310 	and.w	r3, r3, #16
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <f_open+0x1ba>
					res = FR_NO_FILE;
 800988a:	2304      	movs	r3, #4
 800988c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009890:	e00c      	b.n	80098ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d007      	beq.n	80098ac <f_open+0x1d4>
 800989c:	7ebb      	ldrb	r3, [r7, #26]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <f_open+0x1d4>
						res = FR_DENIED;
 80098a6:	2307      	movs	r3, #7
 80098a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80098ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d128      	bne.n	8009906 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	f003 0308 	and.w	r3, r3, #8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80098be:	79fb      	ldrb	r3, [r7, #7]
 80098c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80098ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	f023 0301 	bic.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	bf14      	ite	ne
 80098de:	2301      	movne	r3, #1
 80098e0:	2300      	moveq	r3, #0
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	461a      	mov	r2, r3
 80098e6:	f107 0314 	add.w	r3, r7, #20
 80098ea:	4611      	mov	r1, r2
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fe fb93 	bl	8008018 <inc_lock>
 80098f2:	4602      	mov	r2, r0
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d102      	bne.n	8009906 <f_open+0x22e>
 8009900:	2302      	movs	r3, #2
 8009902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800990a:	2b00      	cmp	r3, #0
 800990c:	f040 8095 	bne.w	8009a3a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff f9af 	bl	8008c7a <ld_clust>
 800991c:	4602      	mov	r2, r0
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009924:	331c      	adds	r3, #28
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe fa10 	bl	8007d4c <ld_dword>
 800992c:	4602      	mov	r2, r0
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	88da      	ldrh	r2, [r3, #6]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	79fa      	ldrb	r2, [r7, #7]
 800994a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3330      	adds	r3, #48	; 0x30
 8009962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe fa7a 	bl	8007e62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	f003 0320 	and.w	r3, r3, #32
 8009974:	2b00      	cmp	r3, #0
 8009976:	d060      	beq.n	8009a3a <f_open+0x362>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d05c      	beq.n	8009a3a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	895b      	ldrh	r3, [r3, #10]
 800998c:	025b      	lsls	r3, r3, #9
 800998e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	657b      	str	r3, [r7, #84]	; 0x54
 800999c:	e016      	b.n	80099cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fe fd25 	bl	80083f2 <get_fat>
 80099a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80099aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d802      	bhi.n	80099b6 <f_open+0x2de>
 80099b0:	2302      	movs	r3, #2
 80099b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80099b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099bc:	d102      	bne.n	80099c4 <f_open+0x2ec>
 80099be:	2301      	movs	r3, #1
 80099c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	657b      	str	r3, [r7, #84]	; 0x54
 80099cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d103      	bne.n	80099dc <f_open+0x304>
 80099d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099d8:	429a      	cmp	r2, r3
 80099da:	d8e0      	bhi.n	800999e <f_open+0x2c6>
				}
				fp->clust = clst;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80099e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d127      	bne.n	8009a3a <f_open+0x362>
 80099ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d022      	beq.n	8009a3a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fcdb 	bl	80083b4 <clust2sect>
 80099fe:	6478      	str	r0, [r7, #68]	; 0x44
 8009a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d103      	bne.n	8009a0e <f_open+0x336>
						res = FR_INT_ERR;
 8009a06:	2302      	movs	r3, #2
 8009a08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a0c:	e015      	b.n	8009a3a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a10:	0a5a      	lsrs	r2, r3, #9
 8009a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a14:	441a      	add	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	7858      	ldrb	r0, [r3, #1]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6a1a      	ldr	r2, [r3, #32]
 8009a28:	2301      	movs	r3, #1
 8009a2a:	f7fe f919 	bl	8007c60 <disk_read>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d002      	beq.n	8009a3a <f_open+0x362>
 8009a34:	2301      	movs	r3, #1
 8009a36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <f_open+0x370>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009a48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3760      	adds	r7, #96	; 0x60
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08c      	sub	sp, #48	; 0x30
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f107 0210 	add.w	r2, r7, #16
 8009a72:	4611      	mov	r1, r2
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff fdb3 	bl	80095e0 <validate>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009a80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d107      	bne.n	8009a98 <f_write+0x44>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	7d5b      	ldrb	r3, [r3, #21]
 8009a8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <f_write+0x4a>
 8009a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a9c:	e14b      	b.n	8009d36 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	7d1b      	ldrb	r3, [r3, #20]
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <f_write+0x5a>
 8009aaa:	2307      	movs	r3, #7
 8009aac:	e143      	b.n	8009d36 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	699a      	ldr	r2, [r3, #24]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	441a      	add	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	f080 812d 	bcs.w	8009d1a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	43db      	mvns	r3, r3
 8009ac6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009ac8:	e127      	b.n	8009d1a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f040 80e3 	bne.w	8009c9e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	0a5b      	lsrs	r3, r3, #9
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	8952      	ldrh	r2, [r2, #10]
 8009ae2:	3a01      	subs	r2, #1
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d143      	bne.n	8009b76 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10c      	bne.n	8009b10 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d11a      	bne.n	8009b38 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2100      	movs	r1, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe fe64 	bl	80087d4 <create_chain>
 8009b0c:	62b8      	str	r0, [r7, #40]	; 0x28
 8009b0e:	e013      	b.n	8009b38 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d007      	beq.n	8009b28 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f7fe fef0 	bl	8008904 <clmt_clust>
 8009b24:	62b8      	str	r0, [r7, #40]	; 0x28
 8009b26:	e007      	b.n	8009b38 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	4610      	mov	r0, r2
 8009b32:	f7fe fe4f 	bl	80087d4 <create_chain>
 8009b36:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f000 80f2 	beq.w	8009d24 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d104      	bne.n	8009b50 <f_write+0xfc>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2202      	movs	r2, #2
 8009b4a:	755a      	strb	r2, [r3, #21]
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e0f2      	b.n	8009d36 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b56:	d104      	bne.n	8009b62 <f_write+0x10e>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	755a      	strb	r2, [r3, #21]
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e0e9      	b.n	8009d36 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b66:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <f_write+0x122>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b74:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	7d1b      	ldrb	r3, [r3, #20]
 8009b7a:	b25b      	sxtb	r3, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	da18      	bge.n	8009bb2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	7858      	ldrb	r0, [r3, #1]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6a1a      	ldr	r2, [r3, #32]
 8009b8e:	2301      	movs	r3, #1
 8009b90:	f7fe f886 	bl	8007ca0 <disk_write>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d004      	beq.n	8009ba4 <f_write+0x150>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	755a      	strb	r2, [r3, #21]
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e0c8      	b.n	8009d36 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	7d1b      	ldrb	r3, [r3, #20]
 8009ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	69db      	ldr	r3, [r3, #28]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7fe fbfa 	bl	80083b4 <clust2sect>
 8009bc0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d104      	bne.n	8009bd2 <f_write+0x17e>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	755a      	strb	r2, [r3, #21]
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e0b1      	b.n	8009d36 <f_write+0x2e2>
			sect += csect;
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	0a5b      	lsrs	r3, r3, #9
 8009bde:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d03c      	beq.n	8009c60 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	6a3b      	ldr	r3, [r7, #32]
 8009bea:	4413      	add	r3, r2
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	8952      	ldrh	r2, [r2, #10]
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d905      	bls.n	8009c00 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	895b      	ldrh	r3, [r3, #10]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	7858      	ldrb	r0, [r3, #1]
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	69f9      	ldr	r1, [r7, #28]
 8009c0a:	f7fe f849 	bl	8007ca0 <disk_write>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <f_write+0x1ca>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2201      	movs	r2, #1
 8009c18:	755a      	strb	r2, [r3, #21]
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e08b      	b.n	8009d36 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6a1a      	ldr	r2, [r3, #32]
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	6a3a      	ldr	r2, [r7, #32]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d915      	bls.n	8009c58 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a1a      	ldr	r2, [r3, #32]
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	025b      	lsls	r3, r3, #9
 8009c3c:	69fa      	ldr	r2, [r7, #28]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c44:	4619      	mov	r1, r3
 8009c46:	f7fe f8eb 	bl	8007e20 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	7d1b      	ldrb	r3, [r3, #20]
 8009c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	025b      	lsls	r3, r3, #9
 8009c5c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009c5e:	e03f      	b.n	8009ce0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d016      	beq.n	8009c98 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	699a      	ldr	r2, [r3, #24]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d210      	bcs.n	8009c98 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	7858      	ldrb	r0, [r3, #1]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c80:	2301      	movs	r3, #1
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	f7fd ffec 	bl	8007c60 <disk_read>
 8009c88:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d004      	beq.n	8009c98 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2201      	movs	r2, #1
 8009c92:	755a      	strb	r2, [r3, #21]
 8009c94:	2301      	movs	r3, #1
 8009c96:	e04e      	b.n	8009d36 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009caa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d901      	bls.n	8009cb8 <f_write+0x264>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc6:	4413      	add	r3, r2
 8009cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cca:	69f9      	ldr	r1, [r7, #28]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fe f8a7 	bl	8007e20 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	7d1b      	ldrb	r3, [r3, #20]
 8009cd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009cda:	b2da      	uxtb	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009ce0:	69fa      	ldr	r2, [r7, #28]
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	4413      	add	r3, r2
 8009ce6:	61fb      	str	r3, [r7, #28]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	699a      	ldr	r2, [r3, #24]
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	441a      	add	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	619a      	str	r2, [r3, #24]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	68da      	ldr	r2, [r3, #12]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	bf38      	it	cc
 8009d00:	461a      	movcc	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	60da      	str	r2, [r3, #12]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	441a      	add	r2, r3
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f47f aed4 	bne.w	8009aca <f_write+0x76>
 8009d22:	e000      	b.n	8009d26 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d24:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	7d1b      	ldrb	r3, [r3, #20]
 8009d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3730      	adds	r7, #48	; 0x30
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b086      	sub	sp, #24
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f107 0208 	add.w	r2, r7, #8
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7ff fc46 	bl	80095e0 <validate>
 8009d54:	4603      	mov	r3, r0
 8009d56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d168      	bne.n	8009e30 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	7d1b      	ldrb	r3, [r3, #20]
 8009d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d062      	beq.n	8009e30 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	7d1b      	ldrb	r3, [r3, #20]
 8009d6e:	b25b      	sxtb	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	da15      	bge.n	8009da0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	7858      	ldrb	r0, [r3, #1]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1a      	ldr	r2, [r3, #32]
 8009d82:	2301      	movs	r3, #1
 8009d84:	f7fd ff8c 	bl	8007ca0 <disk_write>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <f_sync+0x54>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e04f      	b.n	8009e32 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	7d1b      	ldrb	r3, [r3, #20]
 8009d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009da0:	f7fc fc12 	bl	80065c8 <get_fattime>
 8009da4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dac:	4619      	mov	r1, r3
 8009dae:	4610      	mov	r0, r2
 8009db0:	f7fe fa64 	bl	800827c <move_window>
 8009db4:	4603      	mov	r3, r0
 8009db6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d138      	bne.n	8009e30 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	330b      	adds	r3, #11
 8009dc8:	781a      	ldrb	r2, [r3, #0]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	330b      	adds	r3, #11
 8009dce:	f042 0220 	orr.w	r2, r2, #32
 8009dd2:	b2d2      	uxtb	r2, r2
 8009dd4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	461a      	mov	r2, r3
 8009de0:	68f9      	ldr	r1, [r7, #12]
 8009de2:	f7fe ff69 	bl	8008cb8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f103 021c 	add.w	r2, r3, #28
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	4619      	mov	r1, r3
 8009df2:	4610      	mov	r0, r2
 8009df4:	f7fd ffe8 	bl	8007dc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3316      	adds	r3, #22
 8009dfc:	6939      	ldr	r1, [r7, #16]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fd ffe2 	bl	8007dc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3312      	adds	r3, #18
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fd ffc1 	bl	8007d92 <st_word>
					fs->wflag = 1;
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2201      	movs	r2, #1
 8009e14:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe fa5d 	bl	80082d8 <sync_fs>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	7d1b      	ldrb	r3, [r3, #20]
 8009e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3718      	adds	r7, #24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7ff ff7b 	bl	8009d3e <f_sync>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d118      	bne.n	8009e84 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f107 0208 	add.w	r2, r7, #8
 8009e58:	4611      	mov	r1, r2
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7ff fbc0 	bl	80095e0 <validate>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10c      	bne.n	8009e84 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fe f960 	bl	8008134 <dec_lock>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d102      	bne.n	8009e84 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b090      	sub	sp, #64	; 0x40
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f107 0208 	add.w	r2, r7, #8
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff fb9d 	bl	80095e0 <validate>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009eac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d103      	bne.n	8009ebc <f_lseek+0x2e>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	7d5b      	ldrb	r3, [r3, #21]
 8009eb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009ebc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d002      	beq.n	8009eca <f_lseek+0x3c>
 8009ec4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ec8:	e1e6      	b.n	800a298 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f000 80d1 	beq.w	800a076 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eda:	d15a      	bne.n	8009f92 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	1d1a      	adds	r2, r3, #4
 8009ee6:	627a      	str	r2, [r7, #36]	; 0x24
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	2302      	movs	r3, #2
 8009eee:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d03a      	beq.n	8009f72 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	613b      	str	r3, [r7, #16]
 8009f00:	2300      	movs	r3, #0
 8009f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	3302      	adds	r3, #2
 8009f08:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f10:	3301      	adds	r3, #1
 8009f12:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fe fa6a 	bl	80083f2 <get_fat>
 8009f1e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d804      	bhi.n	8009f30 <f_lseek+0xa2>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2202      	movs	r2, #2
 8009f2a:	755a      	strb	r2, [r3, #21]
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	e1b3      	b.n	800a298 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f36:	d104      	bne.n	8009f42 <f_lseek+0xb4>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	755a      	strb	r2, [r3, #21]
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e1aa      	b.n	800a298 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3301      	adds	r3, #1
 8009f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d0de      	beq.n	8009f0a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d809      	bhi.n	8009f68 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	1d1a      	adds	r2, r3, #4
 8009f58:	627a      	str	r2, [r7, #36]	; 0x24
 8009f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	1d1a      	adds	r2, r3, #4
 8009f62:	627a      	str	r2, [r7, #36]	; 0x24
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d3c4      	bcc.n	8009efc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f78:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d803      	bhi.n	8009f8a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	e184      	b.n	800a294 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009f8a:	2311      	movs	r3, #17
 8009f8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009f90:	e180      	b.n	800a294 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d902      	bls.n	8009fa2 <f_lseek+0x114>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 8172 	beq.w	800a294 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7fe fca4 	bl	8008904 <clmt_clust>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	69db      	ldr	r3, [r3, #28]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4610      	mov	r0, r2
 8009fcc:	f7fe f9f2 	bl	80083b4 <clust2sect>
 8009fd0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d104      	bne.n	8009fe2 <f_lseek+0x154>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	755a      	strb	r2, [r3, #21]
 8009fde:	2302      	movs	r3, #2
 8009fe0:	e15a      	b.n	800a298 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	0a5b      	lsrs	r3, r3, #9
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	8952      	ldrh	r2, [r2, #10]
 8009fec:	3a01      	subs	r2, #1
 8009fee:	4013      	ands	r3, r2
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 8148 	beq.w	800a294 <f_lseek+0x406>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a1b      	ldr	r3, [r3, #32]
 800a008:	69ba      	ldr	r2, [r7, #24]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	f000 8142 	beq.w	800a294 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	7d1b      	ldrb	r3, [r3, #20]
 800a014:	b25b      	sxtb	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	da18      	bge.n	800a04c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	7858      	ldrb	r0, [r3, #1]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a1a      	ldr	r2, [r3, #32]
 800a028:	2301      	movs	r3, #1
 800a02a:	f7fd fe39 	bl	8007ca0 <disk_write>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d004      	beq.n	800a03e <f_lseek+0x1b0>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	755a      	strb	r2, [r3, #21]
 800a03a:	2301      	movs	r3, #1
 800a03c:	e12c      	b.n	800a298 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	7d1b      	ldrb	r3, [r3, #20]
 800a042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a046:	b2da      	uxtb	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	7858      	ldrb	r0, [r3, #1]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a056:	2301      	movs	r3, #1
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	f7fd fe01 	bl	8007c60 <disk_read>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <f_lseek+0x1e0>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	755a      	strb	r2, [r3, #21]
 800a06a:	2301      	movs	r3, #1
 800a06c:	e114      	b.n	800a298 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	621a      	str	r2, [r3, #32]
 800a074:	e10e      	b.n	800a294 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d908      	bls.n	800a092 <f_lseek+0x204>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	7d1b      	ldrb	r3, [r3, #20]
 800a084:	f003 0302 	and.w	r3, r3, #2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d102      	bne.n	800a092 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	637b      	str	r3, [r7, #52]	; 0x34
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0a0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 80a7 	beq.w	800a1f8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	895b      	ldrh	r3, [r3, #10]
 800a0ae:	025b      	lsls	r3, r3, #9
 800a0b0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d01b      	beq.n	800a0f0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	1e5a      	subs	r2, r3, #1
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	1e59      	subs	r1, r3, #1
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d30f      	bcc.n	800a0f0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	1e5a      	subs	r2, r3, #1
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	425b      	negs	r3, r3
 800a0d8:	401a      	ands	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0ee:	e022      	b.n	800a136 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d119      	bne.n	800a130 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2100      	movs	r1, #0
 800a100:	4618      	mov	r0, r3
 800a102:	f7fe fb67 	bl	80087d4 <create_chain>
 800a106:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d104      	bne.n	800a118 <f_lseek+0x28a>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2202      	movs	r2, #2
 800a112:	755a      	strb	r2, [r3, #21]
 800a114:	2302      	movs	r3, #2
 800a116:	e0bf      	b.n	800a298 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11e:	d104      	bne.n	800a12a <f_lseek+0x29c>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	755a      	strb	r2, [r3, #21]
 800a126:	2301      	movs	r3, #1
 800a128:	e0b6      	b.n	800a298 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a12e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a134:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d05d      	beq.n	800a1f8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a13c:	e03a      	b.n	800a1b4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	603b      	str	r3, [r7, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	699a      	ldr	r2, [r3, #24]
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	441a      	add	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	7d1b      	ldrb	r3, [r3, #20]
 800a156:	f003 0302 	and.w	r3, r3, #2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00b      	beq.n	800a176 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a162:	4618      	mov	r0, r3
 800a164:	f7fe fb36 	bl	80087d4 <create_chain>
 800a168:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d108      	bne.n	800a182 <f_lseek+0x2f4>
							ofs = 0; break;
 800a170:	2300      	movs	r3, #0
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	e022      	b.n	800a1bc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe f939 	bl	80083f2 <get_fat>
 800a180:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a188:	d104      	bne.n	800a194 <f_lseek+0x306>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	755a      	strb	r2, [r3, #21]
 800a190:	2301      	movs	r3, #1
 800a192:	e081      	b.n	800a298 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	2b01      	cmp	r3, #1
 800a198:	d904      	bls.n	800a1a4 <f_lseek+0x316>
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d304      	bcc.n	800a1ae <f_lseek+0x320>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	755a      	strb	r2, [r3, #21]
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	e074      	b.n	800a298 <f_lseek+0x40a>
					fp->clust = clst;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1b2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d8c0      	bhi.n	800a13e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	699a      	ldr	r2, [r3, #24]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	441a      	add	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d012      	beq.n	800a1f8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fe f8ec 	bl	80083b4 <clust2sect>
 800a1dc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d104      	bne.n	800a1ee <f_lseek+0x360>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	755a      	strb	r2, [r3, #21]
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	e054      	b.n	800a298 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	0a5b      	lsrs	r3, r3, #9
 800a1f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1f4:	4413      	add	r3, r2
 800a1f6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	699a      	ldr	r2, [r3, #24]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	429a      	cmp	r2, r3
 800a202:	d90a      	bls.n	800a21a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	699a      	ldr	r2, [r3, #24]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	7d1b      	ldrb	r3, [r3, #20]
 800a210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a214:	b2da      	uxtb	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a222:	2b00      	cmp	r3, #0
 800a224:	d036      	beq.n	800a294 <f_lseek+0x406>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d031      	beq.n	800a294 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	7d1b      	ldrb	r3, [r3, #20]
 800a234:	b25b      	sxtb	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	da18      	bge.n	800a26c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	7858      	ldrb	r0, [r3, #1]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a1a      	ldr	r2, [r3, #32]
 800a248:	2301      	movs	r3, #1
 800a24a:	f7fd fd29 	bl	8007ca0 <disk_write>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d004      	beq.n	800a25e <f_lseek+0x3d0>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	755a      	strb	r2, [r3, #21]
 800a25a:	2301      	movs	r3, #1
 800a25c:	e01c      	b.n	800a298 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	7d1b      	ldrb	r3, [r3, #20]
 800a262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a266:	b2da      	uxtb	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	7858      	ldrb	r0, [r3, #1]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a276:	2301      	movs	r3, #1
 800a278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a27a:	f7fd fcf1 	bl	8007c60 <disk_read>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d004      	beq.n	800a28e <f_lseek+0x400>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	755a      	strb	r2, [r3, #21]
 800a28a:	2301      	movs	r3, #1
 800a28c:	e004      	b.n	800a298 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a292:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a294:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3740      	adds	r7, #64	; 0x40
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800a2a0:	b590      	push	{r4, r7, lr}
 800a2a2:	b09d      	sub	sp, #116	; 0x74
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	607a      	str	r2, [r7, #4]
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800a2b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2b8:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a2ba:	f107 030c 	add.w	r3, r7, #12
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe fea7 	bl	8009012 <get_ldnumber>
 800a2c4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	da02      	bge.n	800a2d2 <f_mkfs+0x32>
 800a2cc:	230b      	movs	r3, #11
 800a2ce:	f000 bc0d 	b.w	800aaec <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800a2d2:	4a94      	ldr	r2, [pc, #592]	; (800a524 <f_mkfs+0x284>)
 800a2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d005      	beq.n	800a2ea <f_mkfs+0x4a>
 800a2de:	4a91      	ldr	r2, [pc, #580]	; (800a524 <f_mkfs+0x284>)
 800a2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800a2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800a2f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fd fc8a 	bl	8007c14 <disk_initialize>
 800a300:	4603      	mov	r3, r0
 800a302:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a306:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <f_mkfs+0x76>
 800a312:	2303      	movs	r3, #3
 800a314:	e3ea      	b.n	800aaec <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a316:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a31a:	f003 0304 	and.w	r3, r3, #4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <f_mkfs+0x86>
 800a322:	230a      	movs	r3, #10
 800a324:	e3e2      	b.n	800aaec <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800a326:	f107 0214 	add.w	r2, r7, #20
 800a32a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a32e:	2103      	movs	r1, #3
 800a330:	4618      	mov	r0, r3
 800a332:	f7fd fcd5 	bl	8007ce0 <disk_ioctl>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10c      	bne.n	800a356 <f_mkfs+0xb6>
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d009      	beq.n	800a356 <f_mkfs+0xb6>
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a348:	d805      	bhi.n	800a356 <f_mkfs+0xb6>
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	1e5a      	subs	r2, r3, #1
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	4013      	ands	r3, r2
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <f_mkfs+0xba>
 800a356:	2301      	movs	r3, #1
 800a358:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800a35a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a35e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <f_mkfs+0xce>
 800a366:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d309      	bcc.n	800a382 <f_mkfs+0xe2>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a374:	d805      	bhi.n	800a382 <f_mkfs+0xe2>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	1e5a      	subs	r2, r3, #1
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4013      	ands	r3, r2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <f_mkfs+0xe6>
 800a382:	2313      	movs	r3, #19
 800a384:	e3b2      	b.n	800aaec <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800a386:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a38e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800a394:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a396:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800a3a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	fb02 f303 	mul.w	r3, r2, r3
 800a3a8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800a3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <f_mkfs+0x114>
 800a3b0:	230e      	movs	r3, #14
 800a3b2:	e39b      	b.n	800aaec <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800a3b4:	f107 0210 	add.w	r2, r7, #16
 800a3b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3bc:	2101      	movs	r1, #1
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fd fc8e 	bl	8007ce0 <disk_ioctl>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <f_mkfs+0x12e>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e38e      	b.n	800aaec <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800a3ce:	7afb      	ldrb	r3, [r7, #11]
 800a3d0:	f003 0308 	and.w	r3, r3, #8
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <f_mkfs+0x13c>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e000      	b.n	800a3de <f_mkfs+0x13e>
 800a3dc:	233f      	movs	r3, #63	; 0x3f
 800a3de:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d901      	bls.n	800a3ec <f_mkfs+0x14c>
 800a3e8:	230e      	movs	r3, #14
 800a3ea:	e37f      	b.n	800aaec <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a3f8:	d801      	bhi.n	800a3fe <f_mkfs+0x15e>
 800a3fa:	230e      	movs	r3, #14
 800a3fc:	e376      	b.n	800aaec <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b80      	cmp	r3, #128	; 0x80
 800a402:	d901      	bls.n	800a408 <f_mkfs+0x168>
 800a404:	2313      	movs	r3, #19
 800a406:	e371      	b.n	800aaec <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800a408:	7afb      	ldrb	r3, [r7, #11]
 800a40a:	f003 0302 	and.w	r3, r3, #2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00d      	beq.n	800a42e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800a412:	7afb      	ldrb	r3, [r7, #11]
 800a414:	f003 0307 	and.w	r3, r3, #7
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d004      	beq.n	800a426 <f_mkfs+0x186>
 800a41c:	7afb      	ldrb	r3, [r7, #11]
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d103      	bne.n	800a42e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800a426:	2303      	movs	r3, #3
 800a428:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a42c:	e009      	b.n	800a442 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800a42e:	7afb      	ldrb	r3, [r7, #11]
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <f_mkfs+0x19c>
 800a438:	2313      	movs	r3, #19
 800a43a:	e357      	b.n	800aaec <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800a43c:	2302      	movs	r3, #2
 800a43e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800a446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	d13c      	bne.n	800a4c8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800a44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d11b      	bne.n	800a48c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	0c5b      	lsrs	r3, r3, #17
 800a458:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a45a:	2300      	movs	r3, #0
 800a45c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a45e:	2301      	movs	r3, #1
 800a460:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a462:	e005      	b.n	800a470 <f_mkfs+0x1d0>
 800a464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a466:	3301      	adds	r3, #1
 800a468:	64bb      	str	r3, [r7, #72]	; 0x48
 800a46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a470:	4a2d      	ldr	r2, [pc, #180]	; (800a528 <f_mkfs+0x288>)
 800a472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d007      	beq.n	800a48c <f_mkfs+0x1ec>
 800a47c:	4a2a      	ldr	r2, [pc, #168]	; (800a528 <f_mkfs+0x288>)
 800a47e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a484:	461a      	mov	r2, r3
 800a486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a488:	4293      	cmp	r3, r2
 800a48a:	d2eb      	bcs.n	800a464 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a490:	fbb2 f3f3 	udiv	r3, r2, r3
 800a494:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a496:	6a3b      	ldr	r3, [r7, #32]
 800a498:	3302      	adds	r3, #2
 800a49a:	009a      	lsls	r2, r3, #2
 800a49c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a49e:	4413      	add	r3, r2
 800a4a0:	1e5a      	subs	r2, r3, #1
 800a4a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800a4aa:	2320      	movs	r3, #32
 800a4ac:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d903      	bls.n	800a4c4 <f_mkfs+0x224>
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	4a1b      	ldr	r2, [pc, #108]	; (800a52c <f_mkfs+0x28c>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d952      	bls.n	800a56a <f_mkfs+0x2ca>
 800a4c4:	230e      	movs	r3, #14
 800a4c6:	e311      	b.n	800aaec <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800a4c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d11b      	bne.n	800a506 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	0b1b      	lsrs	r3, r3, #12
 800a4d2:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4d8:	2301      	movs	r3, #1
 800a4da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4dc:	e005      	b.n	800a4ea <f_mkfs+0x24a>
 800a4de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4e6:	005b      	lsls	r3, r3, #1
 800a4e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4ea:	4a11      	ldr	r2, [pc, #68]	; (800a530 <f_mkfs+0x290>)
 800a4ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d007      	beq.n	800a506 <f_mkfs+0x266>
 800a4f6:	4a0e      	ldr	r2, [pc, #56]	; (800a530 <f_mkfs+0x290>)
 800a4f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4fe:	461a      	mov	r2, r3
 800a500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a502:	4293      	cmp	r3, r2
 800a504:	d2eb      	bcs.n	800a4de <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a516:	4293      	cmp	r3, r2
 800a518:	d90c      	bls.n	800a534 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	3302      	adds	r3, #2
 800a51e:	005b      	lsls	r3, r3, #1
 800a520:	663b      	str	r3, [r7, #96]	; 0x60
 800a522:	e012      	b.n	800a54a <f_mkfs+0x2aa>
 800a524:	20000058 	.word	0x20000058
 800a528:	0800b268 	.word	0x0800b268
 800a52c:	0ffffff5 	.word	0x0ffffff5
 800a530:	0800b278 	.word	0x0800b278
				} else {
					fmt = FS_FAT12;
 800a534:	2301      	movs	r3, #1
 800a536:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a53a:	6a3a      	ldr	r2, [r7, #32]
 800a53c:	4613      	mov	r3, r2
 800a53e:	005b      	lsls	r3, r3, #1
 800a540:	4413      	add	r3, r2
 800a542:	3301      	adds	r3, #1
 800a544:	085b      	lsrs	r3, r3, #1
 800a546:	3303      	adds	r3, #3
 800a548:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a54a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a54c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a54e:	4413      	add	r3, r2
 800a550:	1e5a      	subs	r2, r3, #1
 800a552:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a554:	fbb2 f3f3 	udiv	r3, r2, r3
 800a558:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800a55a:	2301      	movs	r3, #1
 800a55c:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800a55e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a560:	015a      	lsls	r2, r3, #5
 800a562:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a564:	fbb2 f3f3 	udiv	r3, r2, r3
 800a568:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a56a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a56c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a56e:	4413      	add	r3, r2
 800a570:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800a572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a576:	fb02 f203 	mul.w	r2, r2, r3
 800a57a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a57c:	4413      	add	r3, r2
 800a57e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a580:	4413      	add	r3, r2
 800a582:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	4413      	add	r3, r2
 800a58a:	1e5a      	subs	r2, r3, #1
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	425b      	negs	r3, r3
 800a590:	401a      	ands	r2, r3
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	1ad3      	subs	r3, r2, r3
 800a596:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800a598:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d108      	bne.n	800a5b2 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800a5a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5a4:	4413      	add	r3, r2
 800a5a6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a5aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5ac:	4413      	add	r3, r2
 800a5ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5b0:	e006      	b.n	800a5c0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800a5b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5bc:	4413      	add	r3, r2
 800a5be:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800a5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5c2:	011a      	lsls	r2, r3, #4
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	441a      	add	r2, r3
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	1ad2      	subs	r2, r2, r3
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d901      	bls.n	800a5d6 <f_mkfs+0x336>
 800a5d2:	230e      	movs	r3, #14
 800a5d4:	e28a      	b.n	800aaec <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5da:	1ad2      	subs	r2, r2, r3
 800a5dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5e0:	fb01 f303 	mul.w	r3, r1, r3
 800a5e4:	1ad2      	subs	r2, r2, r3
 800a5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5e8:	1ad2      	subs	r2, r2, r3
 800a5ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800a5f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d10f      	bne.n	800a61a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a600:	4293      	cmp	r3, r2
 800a602:	d80a      	bhi.n	800a61a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d105      	bne.n	800a616 <f_mkfs+0x376>
 800a60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a60c:	085b      	lsrs	r3, r3, #1
 800a60e:	607b      	str	r3, [r7, #4]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d144      	bne.n	800a6a0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800a616:	230e      	movs	r3, #14
 800a618:	e268      	b.n	800aaec <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800a61a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d133      	bne.n	800a68a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a628:	4293      	cmp	r3, r2
 800a62a:	d91e      	bls.n	800a66a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d107      	bne.n	800a642 <f_mkfs+0x3a2>
 800a632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a634:	005b      	lsls	r3, r3, #1
 800a636:	2b40      	cmp	r3, #64	; 0x40
 800a638:	d803      	bhi.n	800a642 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800a63a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	607b      	str	r3, [r7, #4]
 800a640:	e033      	b.n	800a6aa <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800a642:	7afb      	ldrb	r3, [r7, #11]
 800a644:	f003 0302 	and.w	r3, r3, #2
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d003      	beq.n	800a654 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a64c:	2303      	movs	r3, #3
 800a64e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a652:	e02a      	b.n	800a6aa <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d105      	bne.n	800a666 <f_mkfs+0x3c6>
 800a65a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	607b      	str	r3, [r7, #4]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b80      	cmp	r3, #128	; 0x80
 800a664:	d91e      	bls.n	800a6a4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800a666:	230e      	movs	r3, #14
 800a668:	e240      	b.n	800aaec <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a670:	4293      	cmp	r3, r2
 800a672:	d80a      	bhi.n	800a68a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d105      	bne.n	800a686 <f_mkfs+0x3e6>
 800a67a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	607b      	str	r3, [r7, #4]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b80      	cmp	r3, #128	; 0x80
 800a684:	d910      	bls.n	800a6a8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800a686:	230e      	movs	r3, #14
 800a688:	e230      	b.n	800aaec <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800a68a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d10c      	bne.n	800a6ac <f_mkfs+0x40c>
 800a692:	6a3b      	ldr	r3, [r7, #32]
 800a694:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a698:	4293      	cmp	r3, r2
 800a69a:	d907      	bls.n	800a6ac <f_mkfs+0x40c>
 800a69c:	230e      	movs	r3, #14
 800a69e:	e225      	b.n	800aaec <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a6a0:	bf00      	nop
 800a6a2:	e6ce      	b.n	800a442 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a6a4:	bf00      	nop
 800a6a6:	e6cc      	b.n	800a442 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a6a8:	bf00      	nop
			pau = au;
 800a6aa:	e6ca      	b.n	800a442 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800a6ac:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800a6ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6b6:	f7fd fbd4 	bl	8007e62 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800a6ba:	220b      	movs	r2, #11
 800a6bc:	49bc      	ldr	r1, [pc, #752]	; (800a9b0 <f_mkfs+0x710>)
 800a6be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6c0:	f7fd fbae 	bl	8007e20 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	330b      	adds	r3, #11
 800a6c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fd fb60 	bl	8007d92 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d4:	330d      	adds	r3, #13
 800a6d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a6d8:	b2d2      	uxtb	r2, r2
 800a6da:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	330e      	adds	r3, #14
 800a6e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6e2:	b292      	uxth	r2, r2
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fd fb53 	bl	8007d92 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ee:	3310      	adds	r3, #16
 800a6f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6f2:	b2d2      	uxtb	r2, r2
 800a6f4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f8:	f103 0211 	add.w	r2, r3, #17
 800a6fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a700:	2b03      	cmp	r3, #3
 800a702:	d002      	beq.n	800a70a <f_mkfs+0x46a>
 800a704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a706:	b29b      	uxth	r3, r3
 800a708:	e000      	b.n	800a70c <f_mkfs+0x46c>
 800a70a:	2300      	movs	r3, #0
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	f7fd fb3f 	bl	8007d92 <st_word>
		if (sz_vol < 0x10000) {
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a71a:	d208      	bcs.n	800a72e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71e:	3313      	adds	r3, #19
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	b292      	uxth	r2, r2
 800a724:	4611      	mov	r1, r2
 800a726:	4618      	mov	r0, r3
 800a728:	f7fd fb33 	bl	8007d92 <st_word>
 800a72c:	e006      	b.n	800a73c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	3320      	adds	r3, #32
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	4611      	mov	r1, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f7fd fb46 	bl	8007dc8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73e:	3315      	adds	r3, #21
 800a740:	22f8      	movs	r2, #248	; 0xf8
 800a742:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	3318      	adds	r3, #24
 800a748:	213f      	movs	r1, #63	; 0x3f
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fd fb21 	bl	8007d92 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a752:	331a      	adds	r3, #26
 800a754:	21ff      	movs	r1, #255	; 0xff
 800a756:	4618      	mov	r0, r3
 800a758:	f7fd fb1b 	bl	8007d92 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75e:	331c      	adds	r3, #28
 800a760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a762:	4618      	mov	r0, r3
 800a764:	f7fd fb30 	bl	8007dc8 <st_dword>
		if (fmt == FS_FAT32) {
 800a768:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d131      	bne.n	800a7d4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800a776:	f7fb ff27 	bl	80065c8 <get_fattime>
 800a77a:	4603      	mov	r3, r0
 800a77c:	4619      	mov	r1, r3
 800a77e:	4620      	mov	r0, r4
 800a780:	f7fd fb22 	bl	8007dc8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	3324      	adds	r3, #36	; 0x24
 800a788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fd fb1c 	bl	8007dc8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a792:	332c      	adds	r3, #44	; 0x2c
 800a794:	2102      	movs	r1, #2
 800a796:	4618      	mov	r0, r3
 800a798:	f7fd fb16 	bl	8007dc8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	3330      	adds	r3, #48	; 0x30
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fd faf5 	bl	8007d92 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7aa:	3332      	adds	r3, #50	; 0x32
 800a7ac:	2106      	movs	r1, #6
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fd faef 	bl	8007d92 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	3340      	adds	r3, #64	; 0x40
 800a7b8:	2280      	movs	r2, #128	; 0x80
 800a7ba:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	3342      	adds	r3, #66	; 0x42
 800a7c0:	2229      	movs	r2, #41	; 0x29
 800a7c2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	3347      	adds	r3, #71	; 0x47
 800a7c8:	2213      	movs	r2, #19
 800a7ca:	497a      	ldr	r1, [pc, #488]	; (800a9b4 <f_mkfs+0x714>)
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fd fb27 	bl	8007e20 <mem_cpy>
 800a7d2:	e020      	b.n	800a816 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800a7da:	f7fb fef5 	bl	80065c8 <get_fattime>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f7fd faf0 	bl	8007dc8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	3316      	adds	r3, #22
 800a7ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7ee:	b292      	uxth	r2, r2
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fd facd 	bl	8007d92 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	3324      	adds	r3, #36	; 0x24
 800a7fc:	2280      	movs	r2, #128	; 0x80
 800a7fe:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	3326      	adds	r3, #38	; 0x26
 800a804:	2229      	movs	r2, #41	; 0x29
 800a806:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80a:	332b      	adds	r3, #43	; 0x2b
 800a80c:	2213      	movs	r2, #19
 800a80e:	496a      	ldr	r1, [pc, #424]	; (800a9b8 <f_mkfs+0x718>)
 800a810:	4618      	mov	r0, r3
 800a812:	f7fd fb05 	bl	8007e20 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a81c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a820:	4618      	mov	r0, r3
 800a822:	f7fd fab6 	bl	8007d92 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800a826:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a82a:	2301      	movs	r3, #1
 800a82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a82e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a830:	f7fd fa36 	bl	8007ca0 <disk_write>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <f_mkfs+0x59e>
 800a83a:	2301      	movs	r3, #1
 800a83c:	e156      	b.n	800aaec <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800a83e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a842:	2b03      	cmp	r3, #3
 800a844:	d140      	bne.n	800a8c8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	1d9a      	adds	r2, r3, #6
 800a84a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a84e:	2301      	movs	r3, #1
 800a850:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a852:	f7fd fa25 	bl	8007ca0 <disk_write>
			mem_set(buf, 0, ss);
 800a856:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a858:	461a      	mov	r2, r3
 800a85a:	2100      	movs	r1, #0
 800a85c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a85e:	f7fd fb00 	bl	8007e62 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a862:	4956      	ldr	r1, [pc, #344]	; (800a9bc <f_mkfs+0x71c>)
 800a864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a866:	f7fd faaf 	bl	8007dc8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a870:	4953      	ldr	r1, [pc, #332]	; (800a9c0 <f_mkfs+0x720>)
 800a872:	4618      	mov	r0, r3
 800a874:	f7fd faa8 	bl	8007dc8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	3b01      	subs	r3, #1
 800a882:	4619      	mov	r1, r3
 800a884:	4610      	mov	r0, r2
 800a886:	f7fd fa9f 	bl	8007dc8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a890:	2102      	movs	r1, #2
 800a892:	4618      	mov	r0, r3
 800a894:	f7fd fa98 	bl	8007dc8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a89e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fd fa75 	bl	8007d92 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	1dda      	adds	r2, r3, #7
 800a8ac:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8b4:	f7fd f9f4 	bl	8007ca0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8c4:	f7fd f9ec 	bl	8007ca0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800a8c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ce:	f7fd fac8 	bl	8007e62 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800a8d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8d4:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8da:	e04b      	b.n	800a974 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800a8dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a8e0:	2b03      	cmp	r3, #3
 800a8e2:	d113      	bne.n	800a90c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800a8e4:	f06f 0107 	mvn.w	r1, #7
 800a8e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ea:	f7fd fa6d 	bl	8007dc8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	f04f 31ff 	mov.w	r1, #4294967295
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fd fa66 	bl	8007dc8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	3308      	adds	r3, #8
 800a900:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a904:	4618      	mov	r0, r3
 800a906:	f7fd fa5f 	bl	8007dc8 <st_dword>
 800a90a:	e00b      	b.n	800a924 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800a90c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a910:	2b01      	cmp	r3, #1
 800a912:	d101      	bne.n	800a918 <f_mkfs+0x678>
 800a914:	4b2b      	ldr	r3, [pc, #172]	; (800a9c4 <f_mkfs+0x724>)
 800a916:	e001      	b.n	800a91c <f_mkfs+0x67c>
 800a918:	f06f 0307 	mvn.w	r3, #7
 800a91c:	4619      	mov	r1, r3
 800a91e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a920:	f7fd fa52 	bl	8007dc8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800a924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a926:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800a928:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92c:	4293      	cmp	r3, r2
 800a92e:	bf28      	it	cs
 800a930:	4613      	movcs	r3, r2
 800a932:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a934:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a938:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a93a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a93c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a93e:	f7fd f9af 	bl	8007ca0 <disk_write>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <f_mkfs+0x6ac>
 800a948:	2301      	movs	r3, #1
 800a94a:	e0cf      	b.n	800aaec <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800a94c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a94e:	461a      	mov	r2, r3
 800a950:	2100      	movs	r1, #0
 800a952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a954:	f7fd fa85 	bl	8007e62 <mem_set>
				sect += n; nsect -= n;
 800a958:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a95a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a95c:	4413      	add	r3, r2
 800a95e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a960:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800a968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1dc      	bne.n	800a928 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a970:	3301      	adds	r3, #1
 800a972:	64bb      	str	r3, [r7, #72]	; 0x48
 800a974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a978:	429a      	cmp	r2, r3
 800a97a:	d3af      	bcc.n	800a8dc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800a97c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a980:	2b03      	cmp	r3, #3
 800a982:	d101      	bne.n	800a988 <f_mkfs+0x6e8>
 800a984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a986:	e000      	b.n	800a98a <f_mkfs+0x6ea>
 800a988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a98a:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800a98c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a990:	4293      	cmp	r3, r2
 800a992:	bf28      	it	cs
 800a994:	4613      	movcs	r3, r2
 800a996:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a998:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a99c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a99e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9a2:	f7fd f97d 	bl	8007ca0 <disk_write>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00d      	beq.n	800a9c8 <f_mkfs+0x728>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e09d      	b.n	800aaec <f_mkfs+0x84c>
 800a9b0:	0800b18c 	.word	0x0800b18c
 800a9b4:	0800b198 	.word	0x0800b198
 800a9b8:	0800b1ac 	.word	0x0800b1ac
 800a9bc:	41615252 	.word	0x41615252
 800a9c0:	61417272 	.word	0x61417272
 800a9c4:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800a9c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9cc:	4413      	add	r3, r2
 800a9ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a9d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800a9d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1d6      	bne.n	800a98c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800a9de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d103      	bne.n	800a9ee <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800a9e6:	230c      	movs	r3, #12
 800a9e8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800a9ec:	e010      	b.n	800aa10 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f4:	d303      	bcc.n	800a9fe <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800a9f6:	2306      	movs	r3, #6
 800a9f8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800a9fc:	e008      	b.n	800aa10 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800a9fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d101      	bne.n	800aa0a <f_mkfs+0x76a>
 800aa06:	2304      	movs	r3, #4
 800aa08:	e000      	b.n	800aa0c <f_mkfs+0x76c>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800aa10:	7afb      	ldrb	r3, [r7, #11]
 800aa12:	f003 0308 	and.w	r3, r3, #8
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d15b      	bne.n	800aad2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800aa1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	2100      	movs	r1, #0
 800aa20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa22:	f7fd fa1e 	bl	8007e62 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa28:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa2c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fd f9ae 	bl	8007d92 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800aa3c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	2200      	movs	r2, #0
 800aa42:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	3301      	adds	r3, #1
 800aa48:	2201      	movs	r2, #1
 800aa4a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	3302      	adds	r3, #2
 800aa50:	2201      	movs	r2, #1
 800aa52:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	3303      	adds	r3, #3
 800aa58:	2200      	movs	r2, #0
 800aa5a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	3304      	adds	r3, #4
 800aa60:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800aa64:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800aa66:	693a      	ldr	r2, [r7, #16]
 800aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6a:	441a      	add	r2, r3
 800aa6c:	4b21      	ldr	r3, [pc, #132]	; (800aaf4 <f_mkfs+0x854>)
 800aa6e:	fba3 1302 	umull	r1, r3, r3, r2
 800aa72:	1ad2      	subs	r2, r2, r3
 800aa74:	0852      	lsrs	r2, r2, #1
 800aa76:	4413      	add	r3, r2
 800aa78:	0b5b      	lsrs	r3, r3, #13
 800aa7a:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	3305      	adds	r3, #5
 800aa80:	22fe      	movs	r2, #254	; 0xfe
 800aa82:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800aa84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa86:	089b      	lsrs	r3, r3, #2
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	3306      	adds	r3, #6
 800aa8e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800aa92:	b2d2      	uxtb	r2, r2
 800aa94:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	3307      	adds	r3, #7
 800aa9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa9c:	b2d2      	uxtb	r2, r2
 800aa9e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fd f98e 	bl	8007dc8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	330c      	adds	r3, #12
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	4611      	mov	r1, r2
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fd f987 	bl	8007dc8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800aaba:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800aabe:	2301      	movs	r3, #1
 800aac0:	2200      	movs	r2, #0
 800aac2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aac4:	f7fd f8ec 	bl	8007ca0 <disk_write>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d001      	beq.n	800aad2 <f_mkfs+0x832>
 800aace:	2301      	movs	r3, #1
 800aad0:	e00c      	b.n	800aaec <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800aad2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aad6:	2200      	movs	r2, #0
 800aad8:	2100      	movs	r1, #0
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fd f900 	bl	8007ce0 <disk_ioctl>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <f_mkfs+0x84a>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e000      	b.n	800aaec <f_mkfs+0x84c>

	return FR_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3774      	adds	r7, #116	; 0x74
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd90      	pop	{r4, r7, pc}
 800aaf4:	0515565b 	.word	0x0515565b

0800aaf8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	460b      	mov	r3, r1
 800ab02:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ab04:	78fb      	ldrb	r3, [r7, #3]
 800ab06:	2b0a      	cmp	r3, #10
 800ab08:	d103      	bne.n	800ab12 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ab0a:	210d      	movs	r1, #13
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7ff fff3 	bl	800aaf8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	db25      	blt.n	800ab6a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	60fa      	str	r2, [r7, #12]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	4413      	add	r3, r2
 800ab28:	78fa      	ldrb	r2, [r7, #3]
 800ab2a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b3c      	cmp	r3, #60	; 0x3c
 800ab30:	dd12      	ble.n	800ab58 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6818      	ldr	r0, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f103 010c 	add.w	r1, r3, #12
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	f107 0308 	add.w	r3, r7, #8
 800ab42:	f7fe ff87 	bl	8009a54 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d101      	bne.n	800ab52 <putc_bfd+0x5a>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	e001      	b.n	800ab56 <putc_bfd+0x5e>
 800ab52:	f04f 33ff 	mov.w	r3, #4294967295
 800ab56:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	609a      	str	r2, [r3, #8]
 800ab68:	e000      	b.n	800ab6c <putc_bfd+0x74>
	if (i < 0) return;
 800ab6a:	bf00      	nop
}
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	db17      	blt.n	800abb2 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6818      	ldr	r0, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f103 010c 	add.w	r1, r3, #12
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	461a      	mov	r2, r3
 800ab92:	f107 030c 	add.w	r3, r7, #12
 800ab96:	f7fe ff5d 	bl	8009a54 <f_write>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d108      	bne.n	800abb2 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	461a      	mov	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d102      	bne.n	800abb2 <putc_flush+0x40>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	e001      	b.n	800abb6 <putc_flush+0x44>
	return EOF;
 800abb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b083      	sub	sp, #12
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	605a      	str	r2, [r3, #4]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	609a      	str	r2, [r3, #8]
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800abe8:	b40e      	push	{r1, r2, r3}
 800abea:	b580      	push	{r7, lr}
 800abec:	b0a7      	sub	sp, #156	; 0x9c
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800abf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7ff ffe0 	bl	800abbe <putc_init>

	va_start(arp, fmt);
 800abfe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ac02:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800ac04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800ac14:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 81f4 	beq.w	800b006 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800ac1e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ac22:	2b25      	cmp	r3, #37	; 0x25
 800ac24:	d008      	beq.n	800ac38 <f_printf+0x50>
			putc_bfd(&pb, c);
 800ac26:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ac2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac2e:	4611      	mov	r1, r2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7ff ff61 	bl	800aaf8 <putc_bfd>
			continue;
 800ac36:	e1e5      	b.n	800b004 <f_printf+0x41c>
		}
		w = f = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800ac44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800ac54:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ac58:	2b30      	cmp	r3, #48	; 0x30
 800ac5a:	d10b      	bne.n	800ac74 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ac62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800ac72:	e024      	b.n	800acbe <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800ac74:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ac78:	2b2d      	cmp	r3, #45	; 0x2d
 800ac7a:	d120      	bne.n	800acbe <f_printf+0xd6>
				f = 2; c = *fmt++;
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ac82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800ac92:	e014      	b.n	800acbe <f_printf+0xd6>
			w = w * 10 + c - '0';
 800ac94:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ac98:	4613      	mov	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	461a      	mov	r2, r3
 800aca2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aca6:	4413      	add	r3, r2
 800aca8:	3b30      	subs	r3, #48	; 0x30
 800acaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800acae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800acbe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800acc2:	2b2f      	cmp	r3, #47	; 0x2f
 800acc4:	d903      	bls.n	800acce <f_printf+0xe6>
 800acc6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800acca:	2b39      	cmp	r3, #57	; 0x39
 800accc:	d9e2      	bls.n	800ac94 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800acce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800acd2:	2b6c      	cmp	r3, #108	; 0x6c
 800acd4:	d003      	beq.n	800acde <f_printf+0xf6>
 800acd6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800acda:	2b4c      	cmp	r3, #76	; 0x4c
 800acdc:	d10d      	bne.n	800acfa <f_printf+0x112>
			f |= 4; c = *fmt++;
 800acde:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ace2:	f043 0304 	orr.w	r3, r3, #4
 800ace6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800acea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800acfa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f000 8183 	beq.w	800b00a <f_printf+0x422>
		d = c;
 800ad04:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ad08:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800ad0c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad10:	2b60      	cmp	r3, #96	; 0x60
 800ad12:	d908      	bls.n	800ad26 <f_printf+0x13e>
 800ad14:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad18:	2b7a      	cmp	r3, #122	; 0x7a
 800ad1a:	d804      	bhi.n	800ad26 <f_printf+0x13e>
 800ad1c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad20:	3b20      	subs	r3, #32
 800ad22:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800ad26:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad2a:	3b42      	subs	r3, #66	; 0x42
 800ad2c:	2b16      	cmp	r3, #22
 800ad2e:	f200 8098 	bhi.w	800ae62 <f_printf+0x27a>
 800ad32:	a201      	add	r2, pc, #4	; (adr r2, 800ad38 <f_printf+0x150>)
 800ad34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad38:	0800ae43 	.word	0x0800ae43
 800ad3c:	0800ae2b 	.word	0x0800ae2b
 800ad40:	0800ae53 	.word	0x0800ae53
 800ad44:	0800ae63 	.word	0x0800ae63
 800ad48:	0800ae63 	.word	0x0800ae63
 800ad4c:	0800ae63 	.word	0x0800ae63
 800ad50:	0800ae63 	.word	0x0800ae63
 800ad54:	0800ae63 	.word	0x0800ae63
 800ad58:	0800ae63 	.word	0x0800ae63
 800ad5c:	0800ae63 	.word	0x0800ae63
 800ad60:	0800ae63 	.word	0x0800ae63
 800ad64:	0800ae63 	.word	0x0800ae63
 800ad68:	0800ae63 	.word	0x0800ae63
 800ad6c:	0800ae4b 	.word	0x0800ae4b
 800ad70:	0800ae63 	.word	0x0800ae63
 800ad74:	0800ae63 	.word	0x0800ae63
 800ad78:	0800ae63 	.word	0x0800ae63
 800ad7c:	0800ad95 	.word	0x0800ad95
 800ad80:	0800ae63 	.word	0x0800ae63
 800ad84:	0800ae53 	.word	0x0800ae53
 800ad88:	0800ae63 	.word	0x0800ae63
 800ad8c:	0800ae63 	.word	0x0800ae63
 800ad90:	0800ae5b 	.word	0x0800ae5b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800ad94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad96:	1d1a      	adds	r2, r3, #4
 800ad98:	67ba      	str	r2, [r7, #120]	; 0x78
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ada4:	e004      	b.n	800adb0 <f_printf+0x1c8>
 800ada6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adaa:	3301      	adds	r3, #1
 800adac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800adb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800adb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adb6:	4413      	add	r3, r2
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1f3      	bne.n	800ada6 <f_printf+0x1be>
			if (!(f & 2)) {
 800adbe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800adc2:	f003 0302 	and.w	r3, r3, #2
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d11a      	bne.n	800ae00 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800adca:	e005      	b.n	800add8 <f_printf+0x1f0>
 800adcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800add0:	2120      	movs	r1, #32
 800add2:	4618      	mov	r0, r3
 800add4:	f7ff fe90 	bl	800aaf8 <putc_bfd>
 800add8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ade2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d8f0      	bhi.n	800adcc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800adea:	e009      	b.n	800ae00 <f_printf+0x218>
 800adec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adee:	1c5a      	adds	r2, r3, #1
 800adf0:	67fa      	str	r2, [r7, #124]	; 0x7c
 800adf2:	781a      	ldrb	r2, [r3, #0]
 800adf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800adf8:	4611      	mov	r1, r2
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7ff fe7c 	bl	800aaf8 <putc_bfd>
 800ae00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1f1      	bne.n	800adec <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800ae08:	e005      	b.n	800ae16 <f_printf+0x22e>
 800ae0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae0e:	2120      	movs	r1, #32
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff fe71 	bl	800aaf8 <putc_bfd>
 800ae16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae1a:	1c5a      	adds	r2, r3, #1
 800ae1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae20:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d8f0      	bhi.n	800ae0a <f_printf+0x222>
			continue;
 800ae28:	e0ec      	b.n	800b004 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800ae2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae2c:	1d1a      	adds	r2, r3, #4
 800ae2e:	67ba      	str	r2, [r7, #120]	; 0x78
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae38:	4611      	mov	r1, r2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7ff fe5c 	bl	800aaf8 <putc_bfd>
 800ae40:	e0e0      	b.n	800b004 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800ae42:	2302      	movs	r3, #2
 800ae44:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ae48:	e014      	b.n	800ae74 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800ae4a:	2308      	movs	r3, #8
 800ae4c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ae50:	e010      	b.n	800ae74 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800ae52:	230a      	movs	r3, #10
 800ae54:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ae58:	e00c      	b.n	800ae74 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800ae5a:	2310      	movs	r3, #16
 800ae5c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ae60:	e008      	b.n	800ae74 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800ae62:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ae66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7ff fe43 	bl	800aaf8 <putc_bfd>
 800ae72:	e0c7      	b.n	800b004 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800ae74:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d004      	beq.n	800ae8a <f_printf+0x2a2>
 800ae80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae82:	1d1a      	adds	r2, r3, #4
 800ae84:	67ba      	str	r2, [r7, #120]	; 0x78
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	e00c      	b.n	800aea4 <f_printf+0x2bc>
 800ae8a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ae8e:	2b44      	cmp	r3, #68	; 0x44
 800ae90:	d104      	bne.n	800ae9c <f_printf+0x2b4>
 800ae92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae94:	1d1a      	adds	r2, r3, #4
 800ae96:	67ba      	str	r2, [r7, #120]	; 0x78
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	e003      	b.n	800aea4 <f_printf+0x2bc>
 800ae9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae9e:	1d1a      	adds	r2, r3, #4
 800aea0:	67ba      	str	r2, [r7, #120]	; 0x78
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800aea8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aeac:	2b44      	cmp	r3, #68	; 0x44
 800aeae:	d10e      	bne.n	800aece <f_printf+0x2e6>
 800aeb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	da0a      	bge.n	800aece <f_printf+0x2e6>
			v = 0 - v;
 800aeb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aebc:	425b      	negs	r3, r3
 800aebe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800aec2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aec6:	f043 0308 	orr.w	r3, r3, #8
 800aeca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800aed4:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800aed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aedc:	fbb3 f1f2 	udiv	r1, r3, r2
 800aee0:	fb02 f201 	mul.w	r2, r2, r1
 800aee4:	1a9b      	subs	r3, r3, r2
 800aee6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800aeea:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800aeee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aef2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800aefa:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aefe:	2b09      	cmp	r3, #9
 800af00:	d90b      	bls.n	800af1a <f_printf+0x332>
 800af02:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800af06:	2b78      	cmp	r3, #120	; 0x78
 800af08:	d101      	bne.n	800af0e <f_printf+0x326>
 800af0a:	2227      	movs	r2, #39	; 0x27
 800af0c:	e000      	b.n	800af10 <f_printf+0x328>
 800af0e:	2207      	movs	r2, #7
 800af10:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800af14:	4413      	add	r3, r2
 800af16:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800af1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af1e:	1c5a      	adds	r2, r3, #1
 800af20:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800af24:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800af28:	3230      	adds	r2, #48	; 0x30
 800af2a:	b2d2      	uxtb	r2, r2
 800af2c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800af30:	440b      	add	r3, r1
 800af32:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800af36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <f_printf+0x35e>
 800af3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af42:	2b1f      	cmp	r3, #31
 800af44:	d9c6      	bls.n	800aed4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800af46:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800af4a:	f003 0308 	and.w	r3, r3, #8
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00a      	beq.n	800af68 <f_printf+0x380>
 800af52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800af5c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800af60:	4413      	add	r3, r2
 800af62:	222d      	movs	r2, #45	; 0x2d
 800af64:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800af68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af70:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <f_printf+0x398>
 800af7c:	2330      	movs	r3, #48	; 0x30
 800af7e:	e000      	b.n	800af82 <f_printf+0x39a>
 800af80:	2320      	movs	r3, #32
 800af82:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800af86:	e007      	b.n	800af98 <f_printf+0x3b0>
 800af88:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800af8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af90:	4611      	mov	r1, r2
 800af92:	4618      	mov	r0, r3
 800af94:	f7ff fdb0 	bl	800aaf8 <putc_bfd>
 800af98:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d108      	bne.n	800afb6 <f_printf+0x3ce>
 800afa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800afae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d8e8      	bhi.n	800af88 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800afb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afba:	3b01      	subs	r3, #1
 800afbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afc0:	f107 020c 	add.w	r2, r7, #12
 800afc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afc8:	4413      	add	r3, r2
 800afca:	781a      	ldrb	r2, [r3, #0]
 800afcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afd0:	4611      	mov	r1, r2
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fd90 	bl	800aaf8 <putc_bfd>
		} while (i);
 800afd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1ea      	bne.n	800afb6 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800afe0:	e007      	b.n	800aff2 <f_printf+0x40a>
 800afe2:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800afe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afea:	4611      	mov	r1, r2
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff fd83 	bl	800aaf8 <putc_bfd>
 800aff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aff6:	1c5a      	adds	r2, r3, #1
 800aff8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800affc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b000:	429a      	cmp	r2, r3
 800b002:	d8ee      	bhi.n	800afe2 <f_printf+0x3fa>
		c = *fmt++;
 800b004:	e5fe      	b.n	800ac04 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b006:	bf00      	nop
 800b008:	e000      	b.n	800b00c <f_printf+0x424>
		if (!c) break;
 800b00a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b00c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff fdae 	bl	800ab72 <putc_flush>
 800b016:	4603      	mov	r3, r0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	379c      	adds	r7, #156	; 0x9c
 800b01c:	46bd      	mov	sp, r7
 800b01e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b022:	b003      	add	sp, #12
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop

0800b028 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b028:	b480      	push	{r7}
 800b02a:	b087      	sub	sp, #28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	4613      	mov	r3, r2
 800b034:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b036:	2301      	movs	r3, #1
 800b038:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b03e:	4b1f      	ldr	r3, [pc, #124]	; (800b0bc <FATFS_LinkDriverEx+0x94>)
 800b040:	7a5b      	ldrb	r3, [r3, #9]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b00      	cmp	r3, #0
 800b046:	d131      	bne.n	800b0ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b048:	4b1c      	ldr	r3, [pc, #112]	; (800b0bc <FATFS_LinkDriverEx+0x94>)
 800b04a:	7a5b      	ldrb	r3, [r3, #9]
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	461a      	mov	r2, r3
 800b050:	4b1a      	ldr	r3, [pc, #104]	; (800b0bc <FATFS_LinkDriverEx+0x94>)
 800b052:	2100      	movs	r1, #0
 800b054:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b056:	4b19      	ldr	r3, [pc, #100]	; (800b0bc <FATFS_LinkDriverEx+0x94>)
 800b058:	7a5b      	ldrb	r3, [r3, #9]
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	4a17      	ldr	r2, [pc, #92]	; (800b0bc <FATFS_LinkDriverEx+0x94>)
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b066:	4b15      	ldr	r3, [pc, #84]	; (800b0bc <FATFS_LinkDriverEx+0x94>)
 800b068:	7a5b      	ldrb	r3, [r3, #9]
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	461a      	mov	r2, r3
 800b06e:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <FATFS_LinkDriverEx+0x94>)
 800b070:	4413      	add	r3, r2
 800b072:	79fa      	ldrb	r2, [r7, #7]
 800b074:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b076:	4b11      	ldr	r3, [pc, #68]	; (800b0bc <FATFS_LinkDriverEx+0x94>)
 800b078:	7a5b      	ldrb	r3, [r3, #9]
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	b2d1      	uxtb	r1, r2
 800b080:	4a0e      	ldr	r2, [pc, #56]	; (800b0bc <FATFS_LinkDriverEx+0x94>)
 800b082:	7251      	strb	r1, [r2, #9]
 800b084:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b086:	7dbb      	ldrb	r3, [r7, #22]
 800b088:	3330      	adds	r3, #48	; 0x30
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	3301      	adds	r3, #1
 800b094:	223a      	movs	r2, #58	; 0x3a
 800b096:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	3302      	adds	r3, #2
 800b09c:	222f      	movs	r2, #47	; 0x2f
 800b09e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	3303      	adds	r3, #3
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	371c      	adds	r7, #28
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	20000080 	.word	0x20000080

0800b0c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7ff ffaa 	bl	800b028 <FATFS_LinkDriverEx>
 800b0d4:	4603      	mov	r3, r0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <__libc_init_array>:
 800b0e0:	b570      	push	{r4, r5, r6, lr}
 800b0e2:	4e0d      	ldr	r6, [pc, #52]	; (800b118 <__libc_init_array+0x38>)
 800b0e4:	4c0d      	ldr	r4, [pc, #52]	; (800b11c <__libc_init_array+0x3c>)
 800b0e6:	1ba4      	subs	r4, r4, r6
 800b0e8:	10a4      	asrs	r4, r4, #2
 800b0ea:	2500      	movs	r5, #0
 800b0ec:	42a5      	cmp	r5, r4
 800b0ee:	d109      	bne.n	800b104 <__libc_init_array+0x24>
 800b0f0:	4e0b      	ldr	r6, [pc, #44]	; (800b120 <__libc_init_array+0x40>)
 800b0f2:	4c0c      	ldr	r4, [pc, #48]	; (800b124 <__libc_init_array+0x44>)
 800b0f4:	f000 f820 	bl	800b138 <_init>
 800b0f8:	1ba4      	subs	r4, r4, r6
 800b0fa:	10a4      	asrs	r4, r4, #2
 800b0fc:	2500      	movs	r5, #0
 800b0fe:	42a5      	cmp	r5, r4
 800b100:	d105      	bne.n	800b10e <__libc_init_array+0x2e>
 800b102:	bd70      	pop	{r4, r5, r6, pc}
 800b104:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b108:	4798      	blx	r3
 800b10a:	3501      	adds	r5, #1
 800b10c:	e7ee      	b.n	800b0ec <__libc_init_array+0xc>
 800b10e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b112:	4798      	blx	r3
 800b114:	3501      	adds	r5, #1
 800b116:	e7f2      	b.n	800b0fe <__libc_init_array+0x1e>
 800b118:	0800b290 	.word	0x0800b290
 800b11c:	0800b290 	.word	0x0800b290
 800b120:	0800b290 	.word	0x0800b290
 800b124:	0800b294 	.word	0x0800b294

0800b128 <memset>:
 800b128:	4402      	add	r2, r0
 800b12a:	4603      	mov	r3, r0
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d100      	bne.n	800b132 <memset+0xa>
 800b130:	4770      	bx	lr
 800b132:	f803 1b01 	strb.w	r1, [r3], #1
 800b136:	e7f9      	b.n	800b12c <memset+0x4>

0800b138 <_init>:
 800b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13a:	bf00      	nop
 800b13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13e:	bc08      	pop	{r3}
 800b140:	469e      	mov	lr, r3
 800b142:	4770      	bx	lr

0800b144 <_fini>:
 800b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b146:	bf00      	nop
 800b148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14a:	bc08      	pop	{r3}
 800b14c:	469e      	mov	lr, r3
 800b14e:	4770      	bx	lr
