
NucleoG474-USB-SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9c0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800ab98  0800ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acf0  0800acf0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800acf0  0800acf0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acf8  0800acf8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf8  0800acf8  0001acf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acfc  0800acfc  0001acfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800ad00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed4  20000024  0800ad24  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef8  0800ad24  00020ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e357  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033b4  00000000  00000000  0003e3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001878  00000000  00000000  00041760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001708  00000000  00000000  00042fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029898  00000000  00000000  000446e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000156b9  00000000  00000000  0006df78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108524  00000000  00000000  00083631  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018bb55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000688c  00000000  00000000  0018bbd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ab80 	.word	0x0800ab80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	0800ab80 	.word	0x0800ab80

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800051e:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fdd9 	bl	80010d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f8e0 	bl	80006e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Initialize the micro SD Card */
  if(MY_SD_Init(0) != BSP_ERROR_NONE){
 8000528:	2000      	movs	r0, #0
 800052a:	f005 ff81 	bl	8006430 <MY_SD_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <main+0x20>
	  Error_Handler();
 8000534:	f000 fc08 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 fac0 	bl	8000abc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800053c:	f000 f9b2 	bl	80008a4 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000540:	f000 fa58 	bl	80009f4 <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000544:	f005 ff54 	bl	80063f0 <MX_FATFS_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <main+0x3a>
    Error_Handler();
 800054e:	f000 fbfb 	bl	8000d48 <Error_Handler>
  }
  MX_FDCAN1_Init();
 8000552:	f000 f961 	bl	8000818 <MX_FDCAN1_Init>
  MX_RTC_Init();
 8000556:	f000 f9eb 	bl	8000930 <MX_RTC_Init>
  MX_TIM17_Init();
 800055a:	f000 fa89 	bl	8000a70 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800055e:	f000 f93f 	bl	80007e0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.Identifier = 0x0;
 8000562:	4b58      	ldr	r3, [pc, #352]	; (80006c4 <main+0x1ac>)
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000568:	4b56      	ldr	r3, [pc, #344]	; (80006c4 <main+0x1ac>)
 800056a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800056e:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000570:	4b54      	ldr	r3, [pc, #336]	; (80006c4 <main+0x1ac>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000576:	4b53      	ldr	r3, [pc, #332]	; (80006c4 <main+0x1ac>)
 8000578:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800057c:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800057e:	4b51      	ldr	r3, [pc, #324]	; (80006c4 <main+0x1ac>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000584:	4b4f      	ldr	r3, [pc, #316]	; (80006c4 <main+0x1ac>)
 8000586:	2200      	movs	r2, #0
 8000588:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800058a:	4b4e      	ldr	r3, [pc, #312]	; (80006c4 <main+0x1ac>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000590:	4b4c      	ldr	r3, [pc, #304]	; (80006c4 <main+0x1ac>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 8000596:	4b4b      	ldr	r3, [pc, #300]	; (80006c4 <main+0x1ac>)
 8000598:	2200      	movs	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
    TxData[0] = ubKeyNumber++;
 800059c:	4b4a      	ldr	r3, [pc, #296]	; (80006c8 <main+0x1b0>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	b2d1      	uxtb	r1, r2
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <main+0x1b0>)
 80005a6:	7011      	strb	r1, [r2, #0]
 80005a8:	4a48      	ldr	r2, [pc, #288]	; (80006cc <main+0x1b4>)
 80005aa:	7013      	strb	r3, [r2, #0]
    TxData[1] = 0xAD;
 80005ac:	4b47      	ldr	r3, [pc, #284]	; (80006cc <main+0x1b4>)
 80005ae:	22ad      	movs	r2, #173	; 0xad
 80005b0:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0xDE;
 80005b2:	4b46      	ldr	r3, [pc, #280]	; (80006cc <main+0x1b4>)
 80005b4:	22de      	movs	r2, #222	; 0xde
 80005b6:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0xAD;
 80005b8:	4b44      	ldr	r3, [pc, #272]	; (80006cc <main+0x1b4>)
 80005ba:	22ad      	movs	r2, #173	; 0xad
 80005bc:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0xBE;
 80005be:	4b43      	ldr	r3, [pc, #268]	; (80006cc <main+0x1b4>)
 80005c0:	22be      	movs	r2, #190	; 0xbe
 80005c2:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0xEF;
 80005c4:	4b41      	ldr	r3, [pc, #260]	; (80006cc <main+0x1b4>)
 80005c6:	22ef      	movs	r2, #239	; 0xef
 80005c8:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0xFA;
 80005ca:	4b40      	ldr	r3, [pc, #256]	; (80006cc <main+0x1b4>)
 80005cc:	22fa      	movs	r2, #250	; 0xfa
 80005ce:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0xCE;
 80005d0:	4b3e      	ldr	r3, [pc, #248]	; (80006cc <main+0x1b4>)
 80005d2:	22ce      	movs	r2, #206	; 0xce
 80005d4:	71da      	strb	r2, [r3, #7]
    uint16_t aug=3456;
 80005d6:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 80005da:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80005de:	483c      	ldr	r0, [pc, #240]	; (80006d0 <main+0x1b8>)
 80005e0:	f001 f876 	bl	80016d0 <HAL_FDCAN_Start>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <main+0xd6>
        {
          /* Start Error */
          Error_Handler();
 80005ea:	f000 fbad 	bl	8000d48 <Error_Handler>
        }

      if ( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80005ee:	2200      	movs	r2, #0
 80005f0:	2101      	movs	r1, #1
 80005f2:	4837      	ldr	r0, [pc, #220]	; (80006d0 <main+0x1b8>)
 80005f4:	f001 f96e 	bl	80018d4 <HAL_FDCAN_ActivateNotification>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <main+0xea>
        {
          /* Notification Error */
          Error_Handler();
 80005fe:	f000 fba3 	bl	8000d48 <Error_Handler>
      uint8_t workBuffer[_MAX_SS];

            /* File  object for USER */
      char USERPath[4];   /* USER logical drive path */
      FRESULT res,res1; /* FatFs function common result code */
      uint8_t path1[] = "STM32.TXT";
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4a33      	ldr	r2, [pc, #204]	; (80006d4 <main+0x1bc>)
 8000606:	ca07      	ldmia	r2, {r0, r1, r2}
 8000608:	c303      	stmia	r3!, {r0, r1}
 800060a:	801a      	strh	r2, [r3, #0]

      if(MY_SD_GetCardState(0) == BSP_ERROR_NONE){
 800060c:	2000      	movs	r0, #0
 800060e:	f006 f901 	bl	8006814 <MY_SD_GetCardState>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d12c      	bne.n	8000672 <main+0x15a>

    	  if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin)==GPIO_PIN_SET){
 8000618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061c:	482e      	ldr	r0, [pc, #184]	; (80006d8 <main+0x1c0>)
 800061e:	f001 fdcf 	bl	80021c0 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d124      	bne.n	8000672 <main+0x15a>
    		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2120      	movs	r1, #32
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f001 fdde 	bl	80021f0 <HAL_GPIO_WritePin>
    		  res = f_mkfs(USERPath, FM_FAT32, 10, workBuffer, sizeof(workBuffer));
 8000634:	f107 0214 	add.w	r2, r7, #20
 8000638:	f107 0010 	add.w	r0, r7, #16
 800063c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	4613      	mov	r3, r2
 8000644:	220a      	movs	r2, #10
 8000646:	2102      	movs	r1, #2
 8000648:	f009 fb4e 	bl	8009ce8 <f_mkfs>
 800064c:	4603      	mov	r3, r0
 800064e:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
    		  if (res != FR_OK){
 8000652:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <main+0x146>
    			  Error_Handler();
 800065a:	f000 fb75 	bl	8000d48 <Error_Handler>
    		  }
    		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f001 fdc3 	bl	80021f0 <HAL_GPIO_WritePin>
    		  HAL_Delay(2000);
 800066a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800066e:	f000 fda3 	bl	80011b8 <HAL_Delay>
}

      }
      res = f_mount(&USERFatFs, (TCHAR const*)USERPath, 0);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	2200      	movs	r2, #0
 8000678:	4619      	mov	r1, r3
 800067a:	4818      	ldr	r0, [pc, #96]	; (80006dc <main+0x1c4>)
 800067c:	f008 ff12 	bl	80094a4 <f_mount>
 8000680:	4603      	mov	r3, r0
 8000682:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
      res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2208      	movs	r2, #8
 800068a:	4619      	mov	r1, r3
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <main+0x1c8>)
 800068e:	f008 ff4f 	bl	8009530 <f_open>
 8000692:	4603      	mov	r3, r0
 8000694:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
      res = f_close(&writeFile);
 8000698:	4811      	ldr	r0, [pc, #68]	; (80006e0 <main+0x1c8>)
 800069a:	f009 fafa 	bl	8009c92 <f_close>
 800069e:	4603      	mov	r3, r0
 80006a0:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
      res = f_open(&writeFile, &path1,FA_OPEN_APPEND | FA_WRITE);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2232      	movs	r2, #50	; 0x32
 80006a8:	4619      	mov	r1, r3
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <main+0x1c8>)
 80006ac:	f008 ff40 	bl	8009530 <f_open>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
      MX_NVIC_Init();
 80006b6:	f000 f893 	bl	80007e0 <MX_NVIC_Init>
      HAL_TIM_Base_Start_IT(&htim17);
 80006ba:	480a      	ldr	r0, [pc, #40]	; (80006e4 <main+0x1cc>)
 80006bc:	f003 ff1c 	bl	80044f8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
 80006c0:	e7fe      	b.n	80006c0 <main+0x1a8>
 80006c2:	bf00      	nop
 80006c4:	200007c4 	.word	0x200007c4
 80006c8:	20000040 	.word	0x20000040
 80006cc:	2000078c 	.word	0x2000078c
 80006d0:	20000728 	.word	0x20000728
 80006d4:	0800ab98 	.word	0x0800ab98
 80006d8:	48000800 	.word	0x48000800
 80006dc:	20000a48 	.word	0x20000a48
 80006e0:	200003d0 	.word	0x200003d0
 80006e4:	20000370 	.word	0x20000370

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0a8      	sub	sp, #160	; 0xa0
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006f2:	2238      	movs	r2, #56	; 0x38
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f00a fa3a 	bl	800ab70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2254      	movs	r2, #84	; 0x54
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f00a fa2c 	bl	800ab70 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	f44f 7000 	mov.w	r0, #512	; 0x200
 800071c:	f001 fda4 	bl	8002268 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000720:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <SystemClock_Config+0xf0>)
 8000722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000726:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <SystemClock_Config+0xf0>)
 8000728:	f023 0318 	bic.w	r3, r3, #24
 800072c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000730:	2306      	movs	r3, #6
 8000732:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000754:	2320      	movs	r3, #32
 8000756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000760:	2306      	movs	r3, #6
 8000762:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fe1d 	bl	80023b0 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800077c:	f000 fae4 	bl	8000d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2303      	movs	r3, #3
 8000786:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000794:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000798:	2106      	movs	r1, #6
 800079a:	4618      	mov	r0, r3
 800079c:	f002 f920 	bl	80029e0 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a6:	f000 facf 	bl	8000d48 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <SystemClock_Config+0xf4>)
 80007ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80007b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fb29 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80007cc:	f000 fabc 	bl	8000d48 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	37a0      	adds	r7, #160	; 0xa0
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	00081020 	.word	0x00081020

080007e0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	2015      	movs	r0, #21
 80007ea:	f000 fde2 	bl	80013b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80007ee:	2015      	movs	r0, #21
 80007f0:	f000 fdf9 	bl	80013e6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2028      	movs	r0, #40	; 0x28
 80007fa:	f000 fdda 	bl	80013b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fe:	2028      	movs	r0, #40	; 0x28
 8000800:	f000 fdf1 	bl	80013e6 <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	201a      	movs	r0, #26
 800080a:	f000 fdd2 	bl	80013b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800080e:	201a      	movs	r0, #26
 8000810:	f000 fde9 	bl	80013e6 <HAL_NVIC_EnableIRQ>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_FDCAN1_Init+0x84>)
 800081e:	4a20      	ldr	r2, [pc, #128]	; (80008a0 <MX_FDCAN1_Init+0x88>)
 8000820:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_FDCAN1_Init+0x84>)
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_FDCAN1_Init+0x84>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_FDCAN1_Init+0x84>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_FDCAN1_Init+0x84>)
 8000836:	2200      	movs	r2, #0
 8000838:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_FDCAN1_Init+0x84>)
 800083c:	2200      	movs	r2, #0
 800083e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_FDCAN1_Init+0x84>)
 8000842:	2200      	movs	r2, #0
 8000844:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 40;
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_FDCAN1_Init+0x84>)
 8000848:	2228      	movs	r2, #40	; 0x28
 800084a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_FDCAN1_Init+0x84>)
 800084e:	2201      	movs	r2, #1
 8000850:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_FDCAN1_Init+0x84>)
 8000854:	220d      	movs	r2, #13
 8000856:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_FDCAN1_Init+0x84>)
 800085a:	2202      	movs	r2, #2
 800085c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_FDCAN1_Init+0x84>)
 8000860:	2201      	movs	r2, #1
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_FDCAN1_Init+0x84>)
 8000866:	2201      	movs	r2, #1
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_FDCAN1_Init+0x84>)
 800086c:	2201      	movs	r2, #1
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_FDCAN1_Init+0x84>)
 8000872:	2201      	movs	r2, #1
 8000874:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_FDCAN1_Init+0x84>)
 8000878:	2200      	movs	r2, #0
 800087a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_FDCAN1_Init+0x84>)
 800087e:	2200      	movs	r2, #0
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_FDCAN1_Init+0x84>)
 8000884:	2200      	movs	r2, #0
 8000886:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_FDCAN1_Init+0x84>)
 800088a:	f000 fdc7 	bl	800141c <HAL_FDCAN_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000894:	f000 fa58 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000728 	.word	0x20000728
 80008a0:	40006400 	.word	0x40006400

080008a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 80008aa:	4a20      	ldr	r2, [pc, #128]	; (800092c <MX_LPUART1_UART_Init+0x88>)
 80008ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 80008e2:	f004 f8f3 	bl	8004acc <HAL_UART_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80008ec:	f000 fa2c 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 80008f4:	f005 fc97 	bl	8006226 <HAL_UARTEx_SetTxFifoThreshold>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 80008fe:	f000 fa23 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 8000906:	f005 fccc 	bl	80062a2 <HAL_UARTEx_SetRxFifoThreshold>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8000910:	f000 fa1a 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_LPUART1_UART_Init+0x84>)
 8000916:	f005 fc4d 	bl	80061b4 <HAL_UARTEx_DisableFifoMode>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8000920:	f000 fa12 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000608 	.word	0x20000608
 800092c:	40008000 	.word	0x40008000

08000930 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000948:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_RTC_Init+0xbc>)
 800094a:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <MX_RTC_Init+0xc0>)
 800094c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_RTC_Init+0xbc>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_RTC_Init+0xbc>)
 8000956:	227f      	movs	r2, #127	; 0x7f
 8000958:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_RTC_Init+0xbc>)
 800095c:	22ff      	movs	r2, #255	; 0xff
 800095e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_RTC_Init+0xbc>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_RTC_Init+0xbc>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_RTC_Init+0xbc>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_RTC_Init+0xbc>)
 8000974:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000978:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_RTC_Init+0xbc>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000980:	481a      	ldr	r0, [pc, #104]	; (80009ec <MX_RTC_Init+0xbc>)
 8000982:	f002 fc95 	bl	80032b0 <HAL_RTC_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800098c:	f000 f9dc 	bl	8000d48 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000990:	2300      	movs	r3, #0
 8000992:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000994:	2300      	movs	r3, #0
 8000996:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000998:	2300      	movs	r3, #0
 800099a:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2201      	movs	r2, #1
 80009ac:	4619      	mov	r1, r3
 80009ae:	480f      	ldr	r0, [pc, #60]	; (80009ec <MX_RTC_Init+0xbc>)
 80009b0:	f002 fcec 	bl	800338c <HAL_RTC_SetTime>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 80009ba:	f000 f9c5 	bl	8000d48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009be:	2301      	movs	r3, #1
 80009c0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009c2:	2301      	movs	r3, #1
 80009c4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	2201      	movs	r2, #1
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_RTC_Init+0xbc>)
 80009d6:	f002 fd6f 	bl	80034b8 <HAL_RTC_SetDate>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80009e0:	f000 f9b2 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000700 	.word	0x20000700
 80009f0:	40002800 	.word	0x40002800

080009f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_SPI2_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <MX_SPI2_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a12:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a26:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a42:	2207      	movs	r2, #7
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_SPI2_Init+0x74>)
 8000a54:	f002 fe6e 	bl	8003734 <HAL_SPI_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 f973 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200002b4 	.word	0x200002b4
 8000a6c:	40003800 	.word	0x40003800

08000a70 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_TIM17_Init+0x44>)
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <MX_TIM17_Init+0x48>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_TIM17_Init+0x44>)
 8000a7c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a80:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_TIM17_Init+0x44>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_TIM17_Init+0x44>)
 8000a8a:	2264      	movs	r2, #100	; 0x64
 8000a8c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_TIM17_Init+0x44>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <MX_TIM17_Init+0x44>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_TIM17_Init+0x44>)
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_TIM17_Init+0x44>)
 8000aa2:	f003 fcfd 	bl	80044a0 <HAL_TIM_Base_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000aac:	f000 f94c 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000370 	.word	0x20000370
 8000ab8:	40014800 	.word	0x40014800

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a2a      	ldr	r2, [pc, #168]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a24      	ldr	r2, [pc, #144]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000af0:	f043 0320 	orr.w	r3, r3, #32
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0320 	and.w	r3, r3, #32
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_GPIO_Init+0xc4>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2120      	movs	r1, #32
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f001 fb59 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_GPIO_Init+0xc8>)
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_GPIO_Init+0xcc>)
 8000b54:	f001 f9b2 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b58:	2320      	movs	r3, #32
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f001 f9a3 	bl	8001ebc <HAL_GPIO_Init>

}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	10110000 	.word	0x10110000
 8000b88:	48000800 	.word	0x48000800

08000b8c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u) != HAL_OK){
 8000b96:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <HAL_FDCAN_RxFifo0Callback+0x104>)
 8000b98:	4a3e      	ldr	r2, [pc, #248]	; (8000c94 <HAL_FDCAN_RxFifo0Callback+0x108>)
 8000b9a:	2140      	movs	r1, #64	; 0x40
 8000b9c:	483e      	ldr	r0, [pc, #248]	; (8000c98 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 8000b9e:	f000 fdbf 	bl	8001720 <HAL_FDCAN_GetRxMessage>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d06e      	beq.n	8000c86 <HAL_FDCAN_RxFifo0Callback+0xfa>
		 if(RxHeader.Identifier<100){
 8000ba8:	4b3a      	ldr	r3, [pc, #232]	; (8000c94 <HAL_FDCAN_RxFifo0Callback+0x108>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b63      	cmp	r3, #99	; 0x63
 8000bae:	d831      	bhi.n	8000c14 <HAL_FDCAN_RxFifo0Callback+0x88>
		        Dati.ID=(uint8_t)RxHeader.Identifier;
 8000bb0:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <HAL_FDCAN_RxFifo0Callback+0x108>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <HAL_FDCAN_RxFifo0Callback+0x110>)
 8000bb8:	771a      	strb	r2, [r3, #28]
		        Dati.Timer=RxData[0]+RxData[1]*256+RxData[2]*256*256+RxData[3]*256*256*256;
 8000bba:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000bc2:	785b      	ldrb	r3, [r3, #1]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	441a      	add	r2, r3
 8000bc8:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000bca:	789b      	ldrb	r3, [r3, #2]
 8000bcc:	041b      	lsls	r3, r3, #16
 8000bce:	441a      	add	r2, r3
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	061b      	lsls	r3, r3, #24
 8000bd6:	4413      	add	r3, r2
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <HAL_FDCAN_RxFifo0Callback+0x110>)
 8000bdc:	619a      	str	r2, [r3, #24]
		        Dati.Gir_x=RxData[4]+RxData[5]*256;
 8000bde:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000be6:	795b      	ldrb	r3, [r3, #5]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4413      	add	r3, r2
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <HAL_FDCAN_RxFifo0Callback+0x110>)
 8000bf6:	80da      	strh	r2, [r3, #6]
		        Dati.Gir_y=RxData[6]+RxData[7]*256;
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000bfa:	799b      	ldrb	r3, [r3, #6]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000c00:	79db      	ldrb	r3, [r3, #7]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <HAL_FDCAN_RxFifo0Callback+0x110>)
 8000c10:	811a      	strh	r2, [r3, #8]
		        Dati.Acc_y=RxData[2]+RxData[3]*256;
		        Dati.Acc_z=RxData[4]+RxData[5]*256;
		        Dati.T_b=RxData[6]+RxData[7]*256;
		    }
	}
}
 8000c12:	e038      	b.n	8000c86 <HAL_FDCAN_RxFifo0Callback+0xfa>
		        Dati.ID=(uint8_t)RxHeader.Identifier&0x0FFFFFFF;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <HAL_FDCAN_RxFifo0Callback+0x108>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_FDCAN_RxFifo0Callback+0x110>)
 8000c1c:	771a      	strb	r2, [r3, #28]
		        Dati.Acc_x=RxData[0]+RxData[1]*256;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	4413      	add	r3, r2
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_FDCAN_RxFifo0Callback+0x110>)
 8000c36:	801a      	strh	r2, [r3, #0]
		        Dati.Acc_y=RxData[2]+RxData[3]*256;
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000c3a:	789b      	ldrb	r3, [r3, #2]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000c40:	78db      	ldrb	r3, [r3, #3]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	4413      	add	r3, r2
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_FDCAN_RxFifo0Callback+0x110>)
 8000c50:	805a      	strh	r2, [r3, #2]
		        Dati.Acc_z=RxData[4]+RxData[5]*256;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000c54:	791b      	ldrb	r3, [r3, #4]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000c5a:	795b      	ldrb	r3, [r3, #5]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4413      	add	r3, r2
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_FDCAN_RxFifo0Callback+0x110>)
 8000c6a:	809a      	strh	r2, [r3, #4]
		        Dati.T_b=RxData[6]+RxData[7]*256;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000c6e:	799b      	ldrb	r3, [r3, #6]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000c74:	79db      	ldrb	r3, [r3, #7]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_FDCAN_RxFifo0Callback+0x110>)
 8000c84:	81da      	strh	r2, [r3, #14]
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000007c 	.word	0x2000007c
 8000c94:	200007e8 	.word	0x200007e8
 8000c98:	20000728 	.word	0x20000728
 8000c9c:	20000798 	.word	0x20000798
 8000ca0:	200007b8 	.word	0x200007b8

08000ca4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{FRESULT res;
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	b08b      	sub	sp, #44	; 0x2c
 8000ca8:	af06      	add	r7, sp, #24
 8000caa:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17) //check if the interrupt comes from TIM17
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d138      	bne.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x84>
        {
    	if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin)==GPIO_PIN_SET){
 8000cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cba:	481e      	ldr	r0, [pc, #120]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000cbc:	f001 fa80 	bl	80021c0 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d108      	bne.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x34>

    		res = f_close(&writeFile);
 8000cc6:	481c      	ldr	r0, [pc, #112]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000cc8:	f008 ffe3 	bl	8009c92 <f_close>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	72fb      	strb	r3, [r7, #11]
    		HAL_TIM_Base_Stop_IT(&htim17);
 8000cd0:	481a      	ldr	r0, [pc, #104]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000cd2:	f003 fc3b 	bl	800454c <HAL_TIM_Base_Stop_IT>
    		int r =f_printf(&writeFile,"%d,%d,%d,%d,%d,%d,%d,%d\n",Dati.Timer,Dati.ID,Dati.Acc_x,Dati.Acc_y,Dati.Acc_z,Dati.Gir_x,Dati.Gir_y,Dati.T_b);

    	}
        }

}
 8000cd6:	e027      	b.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x84>
    		int r =f_printf(&writeFile,"%d,%d,%d,%d,%d,%d,%d,%d\n",Dati.Timer,Dati.ID,Dati.Acc_x,Dati.Acc_y,Dati.Acc_z,Dati.Gir_x,Dati.Gir_y,Dati.T_b);
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cda:	699a      	ldr	r2, [r3, #24]
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cde:	7f1b      	ldrb	r3, [r3, #28]
 8000ce0:	469c      	mov	ip, r3
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cf8:	461c      	mov	r4, r3
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cfc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d00:	461d      	mov	r5, r3
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d08:	461e      	mov	r6, r3
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d0c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	9604      	str	r6, [sp, #16]
 8000d14:	9503      	str	r5, [sp, #12]
 8000d16:	9402      	str	r4, [sp, #8]
 8000d18:	9001      	str	r0, [sp, #4]
 8000d1a:	9100      	str	r1, [sp, #0]
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	4909      	ldr	r1, [pc, #36]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d22:	f009 fc85 	bl	800a630 <f_printf>
 8000d26:	60f8      	str	r0, [r7, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d30:	40014800 	.word	0x40014800
 8000d34:	48000800 	.word	0x48000800
 8000d38:	200003d0 	.word	0x200003d0
 8000d3c:	20000370 	.word	0x20000370
 8000d40:	20000798 	.word	0x20000798
 8000d44:	0800aba4 	.word	0x0800aba4

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//printf("** Error. ** \n\r");
	while(1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x4>
	...

08000d50 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d5e:	6093      	str	r3, [r2, #8]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40007000 	.word	0x40007000

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_MspInit+0x44>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_MspInit+0x44>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6613      	str	r3, [r2, #96]	; 0x60
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x44>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x44>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6593      	str	r3, [r2, #88]	; 0x58
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000da6:	f7ff ffd3 	bl	8000d50 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_FDCAN_MspInit+0x80>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d129      	bne.n	8000e2e <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_FDCAN_MspInit+0x84>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_FDCAN_MspInit+0x84>)
 8000de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_FDCAN_MspInit+0x84>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_FDCAN_MspInit+0x84>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <HAL_FDCAN_MspInit+0x84>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_FDCAN_MspInit+0x84>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f001 f847 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40006400 	.word	0x40006400
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0x7c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d128      	bne.n	8000eb4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_UART_MspInit+0x80>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e92:	230c      	movs	r3, #12
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f001 f804 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40008000 	.word	0x40008000
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_RTC_MspInit+0x30>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d107      	bne.n	8000ee6 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_RTC_MspInit+0x34>)
 8000ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_RTC_MspInit+0x34>)
 8000ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40002800 	.word	0x40002800
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <HAL_SPI_MspInit+0x7c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d128      	bne.n	8000f70 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_SPI_MspInit+0x80>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <HAL_SPI_MspInit+0x80>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f28:	6593      	str	r3, [r2, #88]	; 0x58
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_SPI_MspInit+0x80>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_SPI_MspInit+0x80>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HAL_SPI_MspInit+0x80>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_SPI_MspInit+0x80>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f60:	2305      	movs	r3, #5
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <HAL_SPI_MspInit+0x84>)
 8000f6c:	f000 ffa6 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40003800 	.word	0x40003800
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	48000400 	.word	0x48000400

08000f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_TIM_Base_MspInit+0x38>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10b      	bne.n	8000fae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40014800 	.word	0x40014800
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 f8b0 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <FDCAN1_IT0_IRQHandler+0x10>)
 8001026:	f000 fd3b 	bl	8001aa0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000728 	.word	0x20000728

08001034 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800103a:	f003 fab2 	bl	80045a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000370 	.word	0x20000370

08001048 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800104c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001050:	f001 f8e6 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <SystemInit+0x28>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a07      	ldr	r2, [pc, #28]	; (8001080 <SystemInit+0x28>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SystemInit+0x28>)
 800106e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001072:	609a      	str	r2, [r3, #8]
#endif
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001086:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <LoopForever+0xe>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a0:	4c0b      	ldr	r4, [pc, #44]	; (80010d0 <LoopForever+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ae:	f7ff ffd3 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b2:	f009 fd39 	bl	800ab28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010b6:	f7ff fa2f 	bl	8000518 <main>

080010ba <LoopForever>:

LoopForever:
    b LoopForever
 80010ba:	e7fe      	b.n	80010ba <LoopForever>
  ldr   r0, =_estack
 80010bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80010c8:	0800ad00 	.word	0x0800ad00
  ldr r2, =_sbss
 80010cc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80010d0:	20000ef8 	.word	0x20000ef8

080010d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_2_IRQHandler>

080010d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f95b 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f80e 	bl	8001108 <HAL_InitTick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	e001      	b.n	80010fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f8:	f7ff fe3a 	bl	8000d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010fc:	79fb      	ldrb	r3, [r7, #7]

}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_InitTick+0x68>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d022      	beq.n	8001162 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_InitTick+0x6c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_InitTick+0x68>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001128:	fbb1 f3f3 	udiv	r3, r1, r3
 800112c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f966 	bl	8001402 <HAL_SYSTICK_Config>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10f      	bne.n	800115c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	d809      	bhi.n	8001156 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001142:	2200      	movs	r2, #0
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	f04f 30ff 	mov.w	r0, #4294967295
 800114a:	f000 f932 	bl	80013b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_InitTick+0x70>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e007      	b.n	8001166 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e004      	b.n	8001166 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e001      	b.n	8001166 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000008 	.word	0x20000008
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x1c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x20>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4413      	add	r3, r2
 800118a:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_IncTick+0x1c>)
 800118c:	6013      	str	r3, [r2, #0]
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	20000c8c 	.word	0x20000c8c
 800119c:	20000008 	.word	0x20000008

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000c8c 	.word	0x20000c8c

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d004      	beq.n	80011dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_Delay+0x40>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011dc:	bf00      	nop
 80011de:	f7ff ffdf 	bl	80011a0 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d8f7      	bhi.n	80011de <HAL_Delay+0x26>
  {
  }
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff40 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff90 	bl	80012f0 <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5f 	bl	800129c <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff33 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa4 	bl	8001358 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e147      	b.n	80016be <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fcb8 	bl	8000db8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0210 	bic.w	r2, r2, #16
 8001456:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001458:	f7ff fea2 	bl	80011a0 <HAL_GetTick>
 800145c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800145e:	e012      	b.n	8001486 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001460:	f7ff fe9e 	bl	80011a0 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b0a      	cmp	r3, #10
 800146c:	d90b      	bls.n	8001486 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2203      	movs	r2, #3
 800147e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e11b      	b.n	80016be <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b08      	cmp	r3, #8
 8001492:	d0e5      	beq.n	8001460 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a4:	f7ff fe7c 	bl	80011a0 <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014aa:	e012      	b.n	80014d2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014ac:	f7ff fe78 	bl	80011a0 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b0a      	cmp	r3, #10
 80014b8:	d90b      	bls.n	80014d2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014be:	f043 0201 	orr.w	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2203      	movs	r2, #3
 80014ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0f5      	b.n	80016be <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0e5      	beq.n	80014ac <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	699a      	ldr	r2, [r3, #24]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0202 	orr.w	r2, r2, #2
 80014ee:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a74      	ldr	r2, [pc, #464]	; (80016c8 <HAL_FDCAN_Init+0x2ac>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d103      	bne.n	8001502 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80014fa:	4a74      	ldr	r2, [pc, #464]	; (80016cc <HAL_FDCAN_Init+0x2b0>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7c1b      	ldrb	r3, [r3, #16]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d108      	bne.n	800151c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699a      	ldr	r2, [r3, #24]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001518:	619a      	str	r2, [r3, #24]
 800151a:	e007      	b.n	800152c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800152a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7c5b      	ldrb	r3, [r3, #17]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d108      	bne.n	8001546 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699a      	ldr	r2, [r3, #24]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001542:	619a      	str	r2, [r3, #24]
 8001544:	e007      	b.n	8001556 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	699a      	ldr	r2, [r3, #24]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001554:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7c9b      	ldrb	r3, [r3, #18]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d108      	bne.n	8001570 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800156c:	619a      	str	r2, [r3, #24]
 800156e:	e007      	b.n	8001580 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699a      	ldr	r2, [r3, #24]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800157e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80015a4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0210 	bic.w	r2, r2, #16
 80015b4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d108      	bne.n	80015d0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	699a      	ldr	r2, [r3, #24]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 0204 	orr.w	r2, r2, #4
 80015cc:	619a      	str	r2, [r3, #24]
 80015ce:	e02c      	b.n	800162a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d028      	beq.n	800162a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d01c      	beq.n	800161a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015ee:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0210 	orr.w	r2, r2, #16
 80015fe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d110      	bne.n	800162a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0220 	orr.w	r2, r2, #32
 8001616:	619a      	str	r2, [r3, #24]
 8001618:	e007      	b.n	800162a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0220 	orr.w	r2, r2, #32
 8001628:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	3b01      	subs	r3, #1
 8001630:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	3b01      	subs	r3, #1
 8001638:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800163a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001642:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	3b01      	subs	r3, #1
 800164c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001652:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001654:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800165e:	d115      	bne.n	800168c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	3b01      	subs	r3, #1
 800166c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800166e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	3b01      	subs	r3, #1
 8001676:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001678:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	3b01      	subs	r3, #1
 8001682:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001688:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800168a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 fb9e 	bl	8001de4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40006400 	.word	0x40006400
 80016cc:	40006500 	.word	0x40006500

080016d0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d110      	bne.n	8001706 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699a      	ldr	r2, [r3, #24]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e006      	b.n	8001714 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	f043 0204 	orr.w	r2, r3, #4
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001720:	b480      	push	{r7}
 8001722:	b08b      	sub	sp, #44	; 0x2c
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001734:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001736:	7efb      	ldrb	r3, [r7, #27]
 8001738:	2b02      	cmp	r3, #2
 800173a:	f040 80bc 	bne.w	80018b6 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b40      	cmp	r3, #64	; 0x40
 8001742:	d121      	bne.n	8001788 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001758:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0af      	b.n	80018c4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
 8001786:	e020      	b.n	80017ca <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e08d      	b.n	80018c4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d107      	bne.n	80017ee <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	0c9b      	lsrs	r3, r3, #18
 80017e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e005      	b.n	80017fa <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	3304      	adds	r3, #4
 8001816:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	b29a      	uxth	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	0e1b      	lsrs	r3, r3, #24
 800184c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0fda      	lsrs	r2, r3, #31
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	3304      	adds	r3, #4
 8001862:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
 800186c:	e00a      	b.n	8001884 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	441a      	add	r2, r3
 8001874:	6839      	ldr	r1, [r7, #0]
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	440b      	add	r3, r1
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	3301      	adds	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	461a      	mov	r2, r3
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	4293      	cmp	r3, r2
 8001894:	d3eb      	bcc.n	800186e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b40      	cmp	r3, #64	; 0x40
 800189a:	d105      	bne.n	80018a8 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80018a6:	e004      	b.n	80018b2 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e006      	b.n	80018c4 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	f043 0208 	orr.w	r2, r3, #8
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
  }
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	372c      	adds	r7, #44	; 0x2c
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	0800ac40 	.word	0x0800ac40

080018d4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80018e6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d003      	beq.n	80018f6 <HAL_FDCAN_ActivateNotification+0x22>
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	f040 80c8 	bne.w	8001a86 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <HAL_FDCAN_ActivateNotification+0x3e>
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d03b      	beq.n	800198a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d031      	beq.n	800198a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b00      	cmp	r3, #0
 8001938:	d027      	beq.n	800198a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d01d      	beq.n	800198a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001954:	2b00      	cmp	r3, #0
 8001956:	d004      	beq.n	8001962 <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	2b00      	cmp	r3, #0
 8001960:	d013      	beq.n	800198a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00c      	beq.n	800199a <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001986:	2b00      	cmp	r3, #0
 8001988:	d107      	bne.n	800199a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0201 	orr.w	r2, r2, #1
 8001998:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <HAL_FDCAN_ActivateNotification+0xda>
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d13b      	bne.n	8001a26 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d131      	bne.n	8001a26 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d127      	bne.n	8001a26 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d11d      	bne.n	8001a26 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d113      	bne.n	8001a26 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00c      	beq.n	8001a36 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0202 	orr.w	r2, r2, #2
 8001a34:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e006      	b.n	8001a94 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	f043 0202 	orr.w	r2, r3, #2
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aae:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abc:	4013      	ands	r3, r2
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad2:	6a3a      	ldr	r2, [r7, #32]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ae2:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001afa:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b12:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00d      	beq.n	8001b4a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2240      	movs	r2, #64	; 0x40
 8001b42:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f92e 	bl	8001da6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01b      	beq.n	8001b90 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d014      	beq.n	8001b90 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b6e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b86:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f8ec 	bl	8001d68 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001b9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f8b6 	bl	8001d12 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a3a      	ldr	r2, [r7, #32]
 8001bb2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001bb4:	6a39      	ldr	r1, [r7, #32]
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe ffe8 	bl	8000b8c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001bca:	69f9      	ldr	r1, [r7, #28]
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f8ab 	bl	8001d28 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00e      	beq.n	8001bfe <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f8a0 	bl	8001d3e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01a      	beq.n	8001c42 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d013      	beq.n	8001c42 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c22:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001c3a:	68f9      	ldr	r1, [r7, #12]
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f888 	bl	8001d52 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00e      	beq.n	8001c6e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c66:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f888 	bl	8001d7e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00e      	beq.n	8001c9a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c92:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f87c 	bl	8001d92 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d011      	beq.n	8001ccc <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00a      	beq.n	8001ccc <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cbe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001cda:	6979      	ldr	r1, [r7, #20]
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f876 	bl	8001dce <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f858 	bl	8001dba <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001dee:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2f      	ldr	r2, [pc, #188]	; (8001eb4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d103      	bne.n	8001e02 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001e00:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a2c      	ldr	r2, [pc, #176]	; (8001eb8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d103      	bne.n	8001e14 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001e12:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e22:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e48:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e50:	061a      	lsls	r2, r3, #24
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e005      	b.n	8001e96 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3304      	adds	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d3f3      	bcc.n	8001e8a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	4000a400 	.word	0x4000a400
 8001eb4:	40006800 	.word	0x40006800
 8001eb8:	40006c00 	.word	0x40006c00

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eca:	e15a      	b.n	8002182 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 814c 	beq.w	800217c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x38>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b12      	cmp	r3, #18
 8001ef2:	d123      	bne.n	8001f3c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	08da      	lsrs	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3208      	adds	r2, #8
 8001f36:	6939      	ldr	r1, [r7, #16]
 8001f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0203 	and.w	r2, r3, #3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d00b      	beq.n	8001f90 <HAL_GPIO_Init+0xd4>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d007      	beq.n	8001f90 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f84:	2b11      	cmp	r3, #17
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b12      	cmp	r3, #18
 8001f8e:	d130      	bne.n	8001ff2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	f003 0201 	and.w	r2, r3, #1
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80a6 	beq.w	800217c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002030:	4b5b      	ldr	r3, [pc, #364]	; (80021a0 <HAL_GPIO_Init+0x2e4>)
 8002032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002034:	4a5a      	ldr	r2, [pc, #360]	; (80021a0 <HAL_GPIO_Init+0x2e4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6613      	str	r3, [r2, #96]	; 0x60
 800203c:	4b58      	ldr	r3, [pc, #352]	; (80021a0 <HAL_GPIO_Init+0x2e4>)
 800203e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002048:	4a56      	ldr	r2, [pc, #344]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002072:	d01f      	beq.n	80020b4 <HAL_GPIO_Init+0x1f8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a4c      	ldr	r2, [pc, #304]	; (80021a8 <HAL_GPIO_Init+0x2ec>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d019      	beq.n	80020b0 <HAL_GPIO_Init+0x1f4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4b      	ldr	r2, [pc, #300]	; (80021ac <HAL_GPIO_Init+0x2f0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_GPIO_Init+0x1f0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a4a      	ldr	r2, [pc, #296]	; (80021b0 <HAL_GPIO_Init+0x2f4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1ec>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a49      	ldr	r2, [pc, #292]	; (80021b4 <HAL_GPIO_Init+0x2f8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1e8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a48      	ldr	r2, [pc, #288]	; (80021b8 <HAL_GPIO_Init+0x2fc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1e4>
 800209c:	2305      	movs	r3, #5
 800209e:	e00a      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a0:	2306      	movs	r3, #6
 80020a2:	e008      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a4:	2304      	movs	r3, #4
 80020a6:	e006      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a8:	2303      	movs	r3, #3
 80020aa:	e004      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e002      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020b4:	2300      	movs	r3, #0
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	f002 0203 	and.w	r2, r2, #3
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	4093      	lsls	r3, r2
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c6:	4937      	ldr	r1, [pc, #220]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020d4:	4b39      	ldr	r3, [pc, #228]	; (80021bc <HAL_GPIO_Init+0x300>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020f8:	4a30      	ldr	r2, [pc, #192]	; (80021bc <HAL_GPIO_Init+0x300>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <HAL_GPIO_Init+0x300>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002122:	4a26      	ldr	r2, [pc, #152]	; (80021bc <HAL_GPIO_Init+0x300>)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_GPIO_Init+0x300>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_GPIO_Init+0x300>)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_GPIO_Init+0x300>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <HAL_GPIO_Init+0x300>)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	f47f ae9d 	bne.w	8001ecc <HAL_GPIO_Init+0x10>
  }
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010000 	.word	0x40010000
 80021a8:	48000400 	.word	0x48000400
 80021ac:	48000800 	.word	0x48000800
 80021b0:	48000c00 	.word	0x48000c00
 80021b4:	48001000 	.word	0x48001000
 80021b8:	48001400 	.word	0x48001400
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
 80021fc:	4613      	mov	r3, r2
 80021fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002200:	787b      	ldrb	r3, [r7, #1]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800220c:	e002      	b.n	8002214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d006      	beq.n	8002244 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f806 	bl	8002250 <HAL_GPIO_EXTI_Callback>
  }
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40010400 	.word	0x40010400

08002250 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d141      	bne.n	80022fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002276:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800227e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002282:	d131      	bne.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002284:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800228a:	4a46      	ldr	r2, [pc, #280]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002290:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002294:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800229c:	4a41      	ldr	r2, [pc, #260]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022a4:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2232      	movs	r2, #50	; 0x32
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	4a3f      	ldr	r2, [pc, #252]	; (80023ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	0c9b      	lsrs	r3, r3, #18
 80022b6:	3301      	adds	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ba:	e002      	b.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3b01      	subs	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ce:	d102      	bne.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f2      	bne.n	80022bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022d6:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e2:	d158      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e057      	b.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e8:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ee:	4a2d      	ldr	r2, [pc, #180]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022f8:	e04d      	b.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002300:	d141      	bne.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800230a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230e:	d131      	bne.n	8002374 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002316:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002328:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800232e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2232      	movs	r2, #50	; 0x32
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	4a1c      	ldr	r2, [pc, #112]	; (80023ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	0c9b      	lsrs	r3, r3, #18
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002346:	e002      	b.n	800234e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3b01      	subs	r3, #1
 800234c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235a:	d102      	bne.n	8002362 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f2      	bne.n	8002348 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236e:	d112      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e011      	b.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002384:	e007      	b.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002394:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40007000 	.word	0x40007000
 80023a8:	20000000 	.word	0x20000000
 80023ac:	431bde83 	.word	0x431bde83

080023b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e308      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d075      	beq.n	80024ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ce:	4ba3      	ldr	r3, [pc, #652]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d8:	4ba0      	ldr	r3, [pc, #640]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b0c      	cmp	r3, #12
 80023e6:	d102      	bne.n	80023ee <HAL_RCC_OscConfig+0x3e>
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d002      	beq.n	80023f4 <HAL_RCC_OscConfig+0x44>
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d10b      	bne.n	800240c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	4b99      	ldr	r3, [pc, #612]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d05b      	beq.n	80024b8 <HAL_RCC_OscConfig+0x108>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d157      	bne.n	80024b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e2e3      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002414:	d106      	bne.n	8002424 <HAL_RCC_OscConfig+0x74>
 8002416:	4b91      	ldr	r3, [pc, #580]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a90      	ldr	r2, [pc, #576]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e01d      	b.n	8002460 <HAL_RCC_OscConfig+0xb0>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x98>
 800242e:	4b8b      	ldr	r3, [pc, #556]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a8a      	ldr	r2, [pc, #552]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a87      	ldr	r2, [pc, #540]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xb0>
 8002448:	4b84      	ldr	r3, [pc, #528]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a83      	ldr	r2, [pc, #524]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b81      	ldr	r3, [pc, #516]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a80      	ldr	r2, [pc, #512]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe fe9a 	bl	80011a0 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7fe fe96 	bl	80011a0 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e2a8      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002482:	4b76      	ldr	r3, [pc, #472]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xc0>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fe86 	bl	80011a0 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe fe82 	bl	80011a0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e294      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024aa:	4b6c      	ldr	r3, [pc, #432]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0xe8>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d075      	beq.n	80025b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c6:	4b65      	ldr	r3, [pc, #404]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d0:	4b62      	ldr	r3, [pc, #392]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b0c      	cmp	r3, #12
 80024de:	d102      	bne.n	80024e6 <HAL_RCC_OscConfig+0x136>
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d002      	beq.n	80024ec <HAL_RCC_OscConfig+0x13c>
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d11f      	bne.n	800252c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ec:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_OscConfig+0x154>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e267      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b55      	ldr	r3, [pc, #340]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	4952      	ldr	r1, [pc, #328]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002518:	4b51      	ldr	r3, [pc, #324]	; (8002660 <HAL_RCC_OscConfig+0x2b0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fdf3 	bl	8001108 <HAL_InitTick>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d043      	beq.n	80025b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e253      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d023      	beq.n	800257c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002534:	4b49      	ldr	r3, [pc, #292]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a48      	ldr	r2, [pc, #288]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fe2e 	bl	80011a0 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002548:	f7fe fe2a 	bl	80011a0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e23c      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255a:	4b40      	ldr	r3, [pc, #256]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	061b      	lsls	r3, r3, #24
 8002574:	4939      	ldr	r1, [pc, #228]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002576:	4313      	orrs	r3, r2
 8002578:	604b      	str	r3, [r1, #4]
 800257a:	e01a      	b.n	80025b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257c:	4b37      	ldr	r3, [pc, #220]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a36      	ldr	r2, [pc, #216]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fe0a 	bl	80011a0 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002590:	f7fe fe06 	bl	80011a0 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e218      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x1e0>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d03c      	beq.n	8002638 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01c      	beq.n	8002600 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c6:	4b25      	ldr	r3, [pc, #148]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025cc:	4a23      	ldr	r2, [pc, #140]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7fe fde3 	bl	80011a0 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025de:	f7fe fddf 	bl	80011a0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e1f1      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0ef      	beq.n	80025de <HAL_RCC_OscConfig+0x22e>
 80025fe:	e01b      	b.n	8002638 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002606:	4a15      	ldr	r2, [pc, #84]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe fdc6 	bl	80011a0 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002618:	f7fe fdc2 	bl	80011a0 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1d4      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 800262c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ef      	bne.n	8002618 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80ab 	beq.w	800279c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_RCC_OscConfig+0x2ac>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_RCC_OscConfig+0x2b4>
 8002656:	2301      	movs	r3, #1
 8002658:	e005      	b.n	8002666 <HAL_RCC_OscConfig+0x2b6>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	20000004 	.word	0x20000004
 8002664:	2300      	movs	r3, #0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	4baf      	ldr	r3, [pc, #700]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	4aae      	ldr	r2, [pc, #696]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6593      	str	r3, [r2, #88]	; 0x58
 8002676:	4bac      	ldr	r3, [pc, #688]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002686:	4ba9      	ldr	r3, [pc, #676]	; (800292c <HAL_RCC_OscConfig+0x57c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002692:	4ba6      	ldr	r3, [pc, #664]	; (800292c <HAL_RCC_OscConfig+0x57c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4aa5      	ldr	r2, [pc, #660]	; (800292c <HAL_RCC_OscConfig+0x57c>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7fe fd7f 	bl	80011a0 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7fe fd7b 	bl	80011a0 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e18d      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b8:	4b9c      	ldr	r3, [pc, #624]	; (800292c <HAL_RCC_OscConfig+0x57c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d108      	bne.n	80026de <HAL_RCC_OscConfig+0x32e>
 80026cc:	4b96      	ldr	r3, [pc, #600]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	4a95      	ldr	r2, [pc, #596]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026dc:	e024      	b.n	8002728 <HAL_RCC_OscConfig+0x378>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d110      	bne.n	8002708 <HAL_RCC_OscConfig+0x358>
 80026e6:	4b90      	ldr	r3, [pc, #576]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ec:	4a8e      	ldr	r2, [pc, #568]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f6:	4b8c      	ldr	r3, [pc, #560]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	4a8a      	ldr	r2, [pc, #552]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002706:	e00f      	b.n	8002728 <HAL_RCC_OscConfig+0x378>
 8002708:	4b87      	ldr	r3, [pc, #540]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	4a86      	ldr	r2, [pc, #536]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002718:	4b83      	ldr	r3, [pc, #524]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	4a82      	ldr	r2, [pc, #520]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d016      	beq.n	800275e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002730:	f7fe fd36 	bl	80011a0 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002736:	e00a      	b.n	800274e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f7fe fd32 	bl	80011a0 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e142      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274e:	4b76      	ldr	r3, [pc, #472]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ed      	beq.n	8002738 <HAL_RCC_OscConfig+0x388>
 800275c:	e015      	b.n	800278a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7fe fd1f 	bl	80011a0 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe fd1b 	bl	80011a0 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e12b      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800277c:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1ed      	bne.n	8002766 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800278a:	7ffb      	ldrb	r3, [r7, #31]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002790:	4b65      	ldr	r3, [pc, #404]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002794:	4a64      	ldr	r2, [pc, #400]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d03c      	beq.n	8002822 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01c      	beq.n	80027ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027b0:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80027b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027b6:	4a5c      	ldr	r2, [pc, #368]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe fcee 	bl	80011a0 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c8:	f7fe fcea 	bl	80011a0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0fc      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027da:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80027dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ef      	beq.n	80027c8 <HAL_RCC_OscConfig+0x418>
 80027e8:	e01b      	b.n	8002822 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ea:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80027ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027f0:	4a4d      	ldr	r2, [pc, #308]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe fcd1 	bl	80011a0 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002802:	f7fe fccd 	bl	80011a0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0df      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002814:	4b44      	ldr	r3, [pc, #272]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ef      	bne.n	8002802 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80d3 	beq.w	80029d2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800282c:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b0c      	cmp	r3, #12
 8002836:	f000 808d 	beq.w	8002954 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d15a      	bne.n	80028f8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a38      	ldr	r2, [pc, #224]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002848:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800284c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe fca7 	bl	80011a0 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe fca3 	bl	80011a0 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e0b5      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002868:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002874:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_RCC_OscConfig+0x580>)
 800287a:	4013      	ands	r3, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6a11      	ldr	r1, [r2, #32]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002884:	3a01      	subs	r2, #1
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	4311      	orrs	r1, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800288e:	0212      	lsls	r2, r2, #8
 8002890:	4311      	orrs	r1, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002896:	0852      	lsrs	r2, r2, #1
 8002898:	3a01      	subs	r2, #1
 800289a:	0552      	lsls	r2, r2, #21
 800289c:	4311      	orrs	r1, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028a2:	0852      	lsrs	r2, r2, #1
 80028a4:	3a01      	subs	r2, #1
 80028a6:	0652      	lsls	r2, r2, #25
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028ae:	06d2      	lsls	r2, r2, #27
 80028b0:	430a      	orrs	r2, r1
 80028b2:	491d      	ldr	r1, [pc, #116]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe fc66 	bl	80011a0 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fe fc62 	bl	80011a0 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e074      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x528>
 80028f6:	e06c      	b.n	80029d2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002902:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800290a:	f023 0303 	bic.w	r3, r3, #3
 800290e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002916:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800291a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fc3e 	bl	80011a0 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002926:	e00e      	b.n	8002946 <HAL_RCC_OscConfig+0x596>
 8002928:	40021000 	.word	0x40021000
 800292c:	40007000 	.word	0x40007000
 8002930:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fc34 	bl	80011a0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e046      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002946:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_RCC_OscConfig+0x62c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x584>
 8002952:	e03e      	b.n	80029d2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e039      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002960:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <HAL_RCC_OscConfig+0x62c>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0203 	and.w	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	429a      	cmp	r2, r3
 8002972:	d12c      	bne.n	80029ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	3b01      	subs	r3, #1
 8002980:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d123      	bne.n	80029ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d11b      	bne.n	80029ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d113      	bne.n	80029ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	3b01      	subs	r3, #1
 80029b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d109      	bne.n	80029ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	3b01      	subs	r3, #1
 80029c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e11e      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b91      	ldr	r3, [pc, #580]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d910      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b8e      	ldr	r3, [pc, #568]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 020f 	bic.w	r2, r3, #15
 8002a0e:	498c      	ldr	r1, [pc, #560]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b8a      	ldr	r3, [pc, #552]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e106      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d073      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d129      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3c:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0f4      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a4c:	f000 f99e 	bl	8002d8c <RCC_GetSysClockFreqFromPLLSource>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4a7c      	ldr	r2, [pc, #496]	; (8002c48 <HAL_RCC_ClockConfig+0x268>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d93f      	bls.n	8002ada <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a5a:	4b7a      	ldr	r3, [pc, #488]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d033      	beq.n	8002ada <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d12f      	bne.n	8002ada <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a7a:	4b72      	ldr	r3, [pc, #456]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a82:	4a70      	ldr	r2, [pc, #448]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e024      	b.n	8002ada <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a98:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0c6      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa8:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0be      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ab8:	f000 f8ce 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4a61      	ldr	r2, [pc, #388]	; (8002c48 <HAL_RCC_ClockConfig+0x268>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d909      	bls.n	8002ada <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ac6:	4b5f      	ldr	r3, [pc, #380]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ace:	4a5d      	ldr	r2, [pc, #372]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	4b5a      	ldr	r3, [pc, #360]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4957      	ldr	r1, [pc, #348]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aec:	f7fe fb58 	bl	80011a0 <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fb54 	bl	80011a0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e095      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	4b4e      	ldr	r3, [pc, #312]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 020c 	and.w	r2, r3, #12
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1eb      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d023      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a42      	ldr	r2, [pc, #264]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b4c:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b54:	4a3b      	ldr	r2, [pc, #236]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b5c:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4936      	ldr	r1, [pc, #216]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d105      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b76:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d21d      	bcs.n	8002bcc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 020f 	bic.w	r2, r3, #15
 8002b98:	4929      	ldr	r1, [pc, #164]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ba0:	f7fe fafe 	bl	80011a0 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fe fafa 	bl	80011a0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e03b      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1ed      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4917      	ldr	r1, [pc, #92]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	490f      	ldr	r1, [pc, #60]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c0a:	f000 f825 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c0e:	4601      	mov	r1, r0
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <HAL_RCC_ClockConfig+0x26c>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	fa21 f303 	lsr.w	r3, r1, r3
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x270>)
 8002c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RCC_ClockConfig+0x274>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fa6a 	bl	8001108 <HAL_InitTick>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40022000 	.word	0x40022000
 8002c44:	40021000 	.word	0x40021000
 8002c48:	04c4b400 	.word	0x04c4b400
 8002c4c:	0800ac28 	.word	0x0800ac28
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d102      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e047      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d102      	bne.n	8002c82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c7c:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	e03e      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c82:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d136      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d10c      	bne.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cac:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	4a16      	ldr	r2, [pc, #88]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb6:	68d2      	ldr	r2, [r2, #12]
 8002cb8:	0a12      	lsrs	r2, r2, #8
 8002cba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
      break;
 8002cc4:	e00c      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cc6:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd0:	68d2      	ldr	r2, [r2, #12]
 8002cd2:	0a12      	lsrs	r2, r2, #8
 8002cd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
      break;
 8002cde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0e5b      	lsrs	r3, r3, #25
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	e001      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d00:	693b      	ldr	r3, [r7, #16]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	016e3600 	.word	0x016e3600

08002d1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d38:	f7ff fff0 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d3c:	4601      	mov	r1, r0
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d4a:	5cd3      	ldrb	r3, [r2, r3]
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	0800ac38 	.word	0x0800ac38

08002d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d64:	f7ff ffda 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d68:	4601      	mov	r1, r0
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0adb      	lsrs	r3, r3, #11
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	0800ac38 	.word	0x0800ac38

08002d8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d92:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	3301      	adds	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d10c      	bne.n	8002dca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dba:	68d2      	ldr	r2, [r2, #12]
 8002dbc:	0a12      	lsrs	r2, r2, #8
 8002dbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	617b      	str	r3, [r7, #20]
    break;
 8002dc8:	e00c      	b.n	8002de4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dca:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dd4:	68d2      	ldr	r2, [r2, #12]
 8002dd6:	0a12      	lsrs	r2, r2, #8
 8002dd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]
    break;
 8002de2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	0e5b      	lsrs	r3, r3, #25
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	3301      	adds	r3, #1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002dfe:	687b      	ldr	r3, [r7, #4]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	016e3600 	.word	0x016e3600
 8002e14:	00f42400 	.word	0x00f42400

08002e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e20:	2300      	movs	r3, #0
 8002e22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e24:	2300      	movs	r3, #0
 8002e26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8098 	beq.w	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b40      	ldr	r3, [pc, #256]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	4a3f      	ldr	r2, [pc, #252]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6593      	str	r3, [r2, #88]	; 0x58
 8002e52:	4b3d      	ldr	r3, [pc, #244]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e62:	4b3a      	ldr	r3, [pc, #232]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a39      	ldr	r2, [pc, #228]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e6e:	f7fe f997 	bl	80011a0 <HAL_GetTick>
 8002e72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e74:	e009      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7fe f993 	bl	80011a0 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d902      	bls.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	74fb      	strb	r3, [r7, #19]
        break;
 8002e88:	e005      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e8a:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ef      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d159      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01e      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d019      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eb8:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	4a1b      	ldr	r2, [pc, #108]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ee4:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe f953 	bl	80011a0 <HAL_GetTick>
 8002efa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efc:	e00b      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe f94f 	bl	80011a0 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d902      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	74fb      	strb	r3, [r7, #19]
            break;
 8002f14:	e006      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ec      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f38:	4903      	ldr	r1, [pc, #12]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f40:	e008      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
 8002f44:	74bb      	strb	r3, [r7, #18]
 8002f46:	e005      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f54:	7c7b      	ldrb	r3, [r7, #17]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d105      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5a:	4baf      	ldr	r3, [pc, #700]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	4aae      	ldr	r2, [pc, #696]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f72:	4ba9      	ldr	r3, [pc, #676]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f78:	f023 0203 	bic.w	r2, r3, #3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	49a5      	ldr	r1, [pc, #660]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f94:	4ba0      	ldr	r3, [pc, #640]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	f023 020c 	bic.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	499d      	ldr	r1, [pc, #628]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fb6:	4b98      	ldr	r3, [pc, #608]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4994      	ldr	r1, [pc, #592]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fd8:	4b8f      	ldr	r3, [pc, #572]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	498c      	ldr	r1, [pc, #560]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ffa:	4b87      	ldr	r3, [pc, #540]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	4983      	ldr	r1, [pc, #524]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800301c:	4b7e      	ldr	r3, [pc, #504]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	497b      	ldr	r1, [pc, #492]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800303e:	4b76      	ldr	r3, [pc, #472]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4972      	ldr	r1, [pc, #456]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003060:	4b6d      	ldr	r3, [pc, #436]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	496a      	ldr	r1, [pc, #424]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003082:	4b65      	ldr	r3, [pc, #404]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	4961      	ldr	r1, [pc, #388]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030a4:	4b5c      	ldr	r3, [pc, #368]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	4959      	ldr	r1, [pc, #356]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030c6:	4b54      	ldr	r3, [pc, #336]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	4950      	ldr	r1, [pc, #320]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d015      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030e8:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	4948      	ldr	r1, [pc, #288]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003106:	d105      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003108:	4b43      	ldr	r3, [pc, #268]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a42      	ldr	r2, [pc, #264]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800310e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003112:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311c:	2b00      	cmp	r3, #0
 800311e:	d015      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003120:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	493a      	ldr	r1, [pc, #232]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313e:	d105      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003140:	4b35      	ldr	r3, [pc, #212]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a34      	ldr	r2, [pc, #208]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800314a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d015      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003158:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	492c      	ldr	r1, [pc, #176]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003176:	d105      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003178:	4b27      	ldr	r3, [pc, #156]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a26      	ldr	r2, [pc, #152]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800317e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003182:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d015      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	491e      	ldr	r1, [pc, #120]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ae:	d105      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4a18      	ldr	r2, [pc, #96]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d015      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031c8:	4b13      	ldr	r3, [pc, #76]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4910      	ldr	r1, [pc, #64]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e6:	d105      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d018      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	4902      	ldr	r1, [pc, #8]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003216:	e001      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003218:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003224:	d105      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003226:	4b21      	ldr	r3, [pc, #132]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a20      	ldr	r2, [pc, #128]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d015      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324c:	4917      	ldr	r1, [pc, #92]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d105      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	4a12      	ldr	r2, [pc, #72]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d015      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800327c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	4909      	ldr	r1, [pc, #36]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003294:	d105      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800329c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80032a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000

080032b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d05c      	beq.n	800337c <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fdf4 	bl	8000ec4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032e4:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_RTC_Init+0xd8>)
 80032e6:	22ca      	movs	r2, #202	; 0xca
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
 80032ea:	4b27      	ldr	r3, [pc, #156]	; (8003388 <HAL_RTC_Init+0xd8>)
 80032ec:	2253      	movs	r2, #83	; 0x53
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f98d 	bl	8003610 <RTC_EnterInitMode>
 80032f6:	4603      	mov	r3, r0
 80032f8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d133      	bne.n	8003368 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003300:	4b21      	ldr	r3, [pc, #132]	; (8003388 <HAL_RTC_Init+0xd8>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	4a20      	ldr	r2, [pc, #128]	; (8003388 <HAL_RTC_Init+0xd8>)
 8003306:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800330a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800330e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_RTC_Init+0xd8>)
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	4319      	orrs	r1, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	430b      	orrs	r3, r1
 8003324:	4918      	ldr	r1, [pc, #96]	; (8003388 <HAL_RTC_Init+0xd8>)
 8003326:	4313      	orrs	r3, r2
 8003328:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	4914      	ldr	r1, [pc, #80]	; (8003388 <HAL_RTC_Init+0xd8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f99c 	bl	8003678 <RTC_ExitInitMode>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10e      	bne.n	8003368 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <HAL_RTC_Init+0xd8>)
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a19      	ldr	r1, [r3, #32]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4319      	orrs	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	430b      	orrs	r3, r1
 8003362:	4909      	ldr	r1, [pc, #36]	; (8003388 <HAL_RTC_Init+0xd8>)
 8003364:	4313      	orrs	r3, r2
 8003366:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003368:	4b07      	ldr	r3, [pc, #28]	; (8003388 <HAL_RTC_Init+0xd8>)
 800336a:	22ff      	movs	r2, #255	; 0xff
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d103      	bne.n	800337c <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40002800 	.word	0x40002800

0800338c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_RTC_SetTime+0x1a>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e081      	b.n	80034aa <HAL_RTC_SetTime+0x11e>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033b6:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <HAL_RTC_SetTime+0x128>)
 80033b8:	22ca      	movs	r2, #202	; 0xca
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24
 80033bc:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <HAL_RTC_SetTime+0x128>)
 80033be:	2253      	movs	r2, #83	; 0x53
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f924 	bl	8003610 <RTC_EnterInitMode>
 80033c8:	4603      	mov	r3, r0
 80033ca:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d15c      	bne.n	800348c <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d125      	bne.n	8003424 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80033d8:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <HAL_RTC_SetTime+0x128>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2200      	movs	r2, #0
 80033e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f980 	bl	80036f4 <RTC_ByteToBcd2>
 80033f4:	4603      	mov	r3, r0
 80033f6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f979 	bl	80036f4 <RTC_ByteToBcd2>
 8003402:	4603      	mov	r3, r0
 8003404:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003406:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	789b      	ldrb	r3, [r3, #2]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f971 	bl	80036f4 <RTC_ByteToBcd2>
 8003412:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003414:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	78db      	ldrb	r3, [r3, #3]
 800341c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e017      	b.n	8003454 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003424:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <HAL_RTC_SetTime+0x128>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2200      	movs	r2, #0
 8003434:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003442:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003448:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	78db      	ldrb	r3, [r3, #3]
 800344e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003454:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <HAL_RTC_SetTime+0x128>)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800345c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003460:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <HAL_RTC_SetTime+0x128>)
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	4a13      	ldr	r2, [pc, #76]	; (80034b4 <HAL_RTC_SetTime+0x128>)
 8003468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346c:	6193      	str	r3, [r2, #24]

    /* Configure the RTC_CR register */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <HAL_RTC_SetTime+0x128>)
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	68d9      	ldr	r1, [r3, #12]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	430b      	orrs	r3, r1
 800347c:	490d      	ldr	r1, [pc, #52]	; (80034b4 <HAL_RTC_SetTime+0x128>)
 800347e:	4313      	orrs	r3, r2
 8003480:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f8f8 	bl	8003678 <RTC_ExitInitMode>
 8003488:	4603      	mov	r3, r0
 800348a:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_RTC_SetTime+0x128>)
 800348e:	22ff      	movs	r2, #255	; 0xff
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d103      	bne.n	80034a0 <HAL_RTC_SetTime+0x114>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd90      	pop	{r4, r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40002800 	.word	0x40002800

080034b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_RTC_SetDate+0x1a>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e071      	b.n	80035b6 <HAL_RTC_SetDate+0xfe>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2202      	movs	r2, #2
 80034de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10e      	bne.n	8003506 <HAL_RTC_SetDate+0x4e>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	f023 0310 	bic.w	r3, r3, #16
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	330a      	adds	r3, #10
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d11c      	bne.n	8003546 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	78db      	ldrb	r3, [r3, #3]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f8ef 	bl	80036f4 <RTC_ByteToBcd2>
 8003516:	4603      	mov	r3, r0
 8003518:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	785b      	ldrb	r3, [r3, #1]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f8e8 	bl	80036f4 <RTC_ByteToBcd2>
 8003524:	4603      	mov	r3, r0
 8003526:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003528:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	789b      	ldrb	r3, [r3, #2]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f8e0 	bl	80036f4 <RTC_ByteToBcd2>
 8003534:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003536:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e00e      	b.n	8003564 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	78db      	ldrb	r3, [r3, #3]
 800354a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003552:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003558:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003564:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <HAL_RTC_SetDate+0x108>)
 8003566:	22ca      	movs	r2, #202	; 0xca
 8003568:	625a      	str	r2, [r3, #36]	; 0x24
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <HAL_RTC_SetDate+0x108>)
 800356c:	2253      	movs	r2, #83	; 0x53
 800356e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f84d 	bl	8003610 <RTC_EnterInitMode>
 8003576:	4603      	mov	r3, r0
 8003578:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800357a:	7cfb      	ldrb	r3, [r7, #19]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003580:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_RTC_SetDate+0x108>)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003588:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800358c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f872 	bl	8003678 <RTC_ExitInitMode>
 8003594:	4603      	mov	r3, r0
 8003596:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RTC_SetDate+0x108>)
 800359a:	22ff      	movs	r2, #255	; 0xff
 800359c:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d103      	bne.n	80035ac <HAL_RTC_SetDate+0xf4>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}
 80035be:	bf00      	nop
 80035c0:	40002800 	.word	0x40002800

080035c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <HAL_RTC_WaitForSynchro+0x48>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a0e      	ldr	r2, [pc, #56]	; (800360c <HAL_RTC_WaitForSynchro+0x48>)
 80035d2:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 80035d6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80035d8:	f7fd fde2 	bl	80011a0 <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80035de:	e009      	b.n	80035f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035e0:	f7fd fdde 	bl	80011a0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ee:	d901      	bls.n	80035f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e006      	b.n	8003602 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RTC_WaitForSynchro+0x48>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ef      	beq.n	80035e0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40002800 	.word	0x40002800

08003610 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800361c:	4b15      	ldr	r3, [pc, #84]	; (8003674 <RTC_EnterInitMode+0x64>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d120      	bne.n	800366a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003628:	4b12      	ldr	r3, [pc, #72]	; (8003674 <RTC_EnterInitMode+0x64>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a11      	ldr	r2, [pc, #68]	; (8003674 <RTC_EnterInitMode+0x64>)
 800362e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003632:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003634:	f7fd fdb4 	bl	80011a0 <HAL_GetTick>
 8003638:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800363a:	e00d      	b.n	8003658 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800363c:	f7fd fdb0 	bl	80011a0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800364a:	d905      	bls.n	8003658 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2203      	movs	r2, #3
 8003654:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <RTC_EnterInitMode+0x64>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <RTC_EnterInitMode+0x5a>
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d1e8      	bne.n	800363c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40002800 	.word	0x40002800

08003678 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003684:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <RTC_ExitInitMode+0x78>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <RTC_ExitInitMode+0x78>)
 800368a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <RTC_ExitInitMode+0x78>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10c      	bne.n	80036b6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff91 	bl	80035c4 <HAL_RTC_WaitForSynchro>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01e      	beq.n	80036e6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2203      	movs	r2, #3
 80036ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	e017      	b.n	80036e6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <RTC_ExitInitMode+0x78>)
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	4a0d      	ldr	r2, [pc, #52]	; (80036f0 <RTC_ExitInitMode+0x78>)
 80036bc:	f023 0320 	bic.w	r3, r3, #32
 80036c0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff7e 	bl	80035c4 <HAL_RTC_WaitForSynchro>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2203      	movs	r2, #3
 80036d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <RTC_ExitInitMode+0x78>)
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <RTC_ExitInitMode+0x78>)
 80036e0:	f043 0320 	orr.w	r3, r3, #32
 80036e4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40002800 	.word	0x40002800

080036f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003706:	e005      	b.n	8003714 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3301      	adds	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800370e:	7afb      	ldrb	r3, [r7, #11]
 8003710:	3b0a      	subs	r3, #10
 8003712:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003714:	7afb      	ldrb	r3, [r7, #11]
 8003716:	2b09      	cmp	r3, #9
 8003718:	d8f6      	bhi.n	8003708 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	b2da      	uxtb	r2, r3
 8003722:	7afb      	ldrb	r3, [r7, #11]
 8003724:	4313      	orrs	r3, r2
 8003726:	b2db      	uxtb	r3, r3
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e084      	b.n	8003850 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fd fbcb 	bl	8000efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003786:	d902      	bls.n	800378e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e002      	b.n	8003794 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800378e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003792:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800379c:	d007      	beq.n	80037ae <HAL_SPI_Init+0x7a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037a6:	d002      	beq.n	80037ae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10b      	bne.n	80037ce <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037be:	d903      	bls.n	80037c8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
 80037c6:	e002      	b.n	80037ce <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	ea42 0103 	orr.w	r1, r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	f003 0204 	and.w	r2, r3, #4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	ea42 0103 	orr.w	r1, r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	430a      	orrs	r2, r1
 800382e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800383e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_SPI_Transmit+0x22>
 8003876:	2302      	movs	r3, #2
 8003878:	e150      	b.n	8003b1c <HAL_SPI_Transmit+0x2c4>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003882:	f7fd fc8d 	bl	80011a0 <HAL_GetTick>
 8003886:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d002      	beq.n	800389e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003898:	2302      	movs	r3, #2
 800389a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800389c:	e135      	b.n	8003b0a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_SPI_Transmit+0x52>
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038ae:	e12c      	b.n	8003b0a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2203      	movs	r2, #3
 80038b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	88fa      	ldrh	r2, [r7, #6]
 80038ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fa:	d107      	bne.n	800390c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800390a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b40      	cmp	r3, #64	; 0x40
 8003918:	d007      	beq.n	800392a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003928:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003932:	d94b      	bls.n	80039cc <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_SPI_Transmit+0xea>
 800393c:	8afb      	ldrh	r3, [r7, #22]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d13e      	bne.n	80039c0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	881a      	ldrh	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	1c9a      	adds	r2, r3, #2
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003966:	e02b      	b.n	80039c0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d112      	bne.n	800399c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	1c9a      	adds	r2, r3, #2
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	87da      	strh	r2, [r3, #62]	; 0x3e
 800399a:	e011      	b.n	80039c0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800399c:	f7fd fc00 	bl	80011a0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d803      	bhi.n	80039b4 <HAL_SPI_Transmit+0x15c>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d102      	bne.n	80039ba <HAL_SPI_Transmit+0x162>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d102      	bne.n	80039c0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039be:	e0a4      	b.n	8003b0a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1ce      	bne.n	8003968 <HAL_SPI_Transmit+0x110>
 80039ca:	e07c      	b.n	8003ac6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_SPI_Transmit+0x182>
 80039d4:	8afb      	ldrh	r3, [r7, #22]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d170      	bne.n	8003abc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d912      	bls.n	8003a0a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	1c9a      	adds	r2, r3, #2
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b02      	subs	r3, #2
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a08:	e058      	b.n	8003abc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	7812      	ldrb	r2, [r2, #0]
 8003a16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a30:	e044      	b.n	8003abc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d12b      	bne.n	8003a98 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d912      	bls.n	8003a70 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	881a      	ldrh	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b02      	subs	r3, #2
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a6e:	e025      	b.n	8003abc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	7812      	ldrb	r2, [r2, #0]
 8003a7c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a96:	e011      	b.n	8003abc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a98:	f7fd fb82 	bl	80011a0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d803      	bhi.n	8003ab0 <HAL_SPI_Transmit+0x258>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d102      	bne.n	8003ab6 <HAL_SPI_Transmit+0x25e>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aba:	e026      	b.n	8003b0a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1b5      	bne.n	8003a32 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fca2 	bl	8004414 <SPI_EndRxTxTransaction>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e000      	b.n	8003b0a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003b08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b40:	d112      	bne.n	8003b68 <HAL_SPI_Receive+0x44>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10e      	bne.n	8003b68 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f908 	bl	8003d74 <HAL_SPI_TransmitReceive>
 8003b64:	4603      	mov	r3, r0
 8003b66:	e101      	b.n	8003d6c <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_SPI_Receive+0x52>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e0fa      	b.n	8003d6c <HAL_SPI_Receive+0x248>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b7e:	f7fd fb0f 	bl	80011a0 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d002      	beq.n	8003b96 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
 8003b92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b94:	e0e1      	b.n	8003d5a <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_SPI_Receive+0x7e>
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ba6:	e0d8      	b.n	8003d5a <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2204      	movs	r2, #4
 8003bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bf2:	d908      	bls.n	8003c06 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	e007      	b.n	8003c16 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c1e:	d107      	bne.n	8003c30 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d007      	beq.n	8003c4e <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c56:	d867      	bhi.n	8003d28 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c58:	e030      	b.n	8003cbc <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d117      	bne.n	8003c98 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f103 020c 	add.w	r2, r3, #12
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	7812      	ldrb	r2, [r2, #0]
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c96:	e011      	b.n	8003cbc <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c98:	f7fd fa82 	bl	80011a0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d803      	bhi.n	8003cb0 <HAL_SPI_Receive+0x18c>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d102      	bne.n	8003cb6 <HAL_SPI_Receive+0x192>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cba:	e04e      	b.n	8003d5a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1c8      	bne.n	8003c5a <HAL_SPI_Receive+0x136>
 8003cc8:	e034      	b.n	8003d34 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d115      	bne.n	8003d04 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	b292      	uxth	r2, r2
 8003ce4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	1c9a      	adds	r2, r3, #2
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003d02:	e011      	b.n	8003d28 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d04:	f7fd fa4c 	bl	80011a0 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d803      	bhi.n	8003d1c <HAL_SPI_Receive+0x1f8>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1a:	d102      	bne.n	8003d22 <HAL_SPI_Receive+0x1fe>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d26:	e018      	b.n	8003d5a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1ca      	bne.n	8003cca <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	6839      	ldr	r1, [r7, #0]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 fb13 	bl	8004364 <SPI_EndRxTransaction>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	75fb      	strb	r3, [r7, #23]
 8003d56:	e000      	b.n	8003d5a <HAL_SPI_Receive+0x236>
  }

error :
 8003d58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d82:	2301      	movs	r3, #1
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_SPI_TransmitReceive+0x26>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e1fb      	b.n	8004192 <HAL_SPI_TransmitReceive+0x41e>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003da2:	f7fd f9fd 	bl	80011a0 <HAL_GetTick>
 8003da6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003db6:	887b      	ldrh	r3, [r7, #2]
 8003db8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003dba:	887b      	ldrh	r3, [r7, #2]
 8003dbc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dbe:	7efb      	ldrb	r3, [r7, #27]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d00e      	beq.n	8003de2 <HAL_SPI_TransmitReceive+0x6e>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dca:	d106      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x66>
 8003dd4:	7efb      	ldrb	r3, [r7, #27]
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d003      	beq.n	8003de2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003de0:	e1cd      	b.n	800417e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_SPI_TransmitReceive+0x80>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_SPI_TransmitReceive+0x80>
 8003dee:	887b      	ldrh	r3, [r7, #2]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d103      	bne.n	8003dfc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003dfa:	e1c0      	b.n	800417e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d003      	beq.n	8003e10 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2205      	movs	r2, #5
 8003e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	887a      	ldrh	r2, [r7, #2]
 8003e20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	887a      	ldrh	r2, [r7, #2]
 8003e28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	887a      	ldrh	r2, [r7, #2]
 8003e36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e52:	d802      	bhi.n	8003e5a <HAL_SPI_TransmitReceive+0xe6>
 8003e54:	8a3b      	ldrh	r3, [r7, #16]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d908      	bls.n	8003e6c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	e007      	b.n	8003e7c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e7a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d007      	beq.n	8003e9a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea2:	d97c      	bls.n	8003f9e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_SPI_TransmitReceive+0x13e>
 8003eac:	8a7b      	ldrh	r3, [r7, #18]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d169      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	1c9a      	adds	r2, r3, #2
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed6:	e056      	b.n	8003f86 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d11b      	bne.n	8003f1e <HAL_SPI_TransmitReceive+0x1aa>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d016      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x1aa>
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d113      	bne.n	8003f1e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	881a      	ldrh	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	1c9a      	adds	r2, r3, #2
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d11c      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x1f2>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d016      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	b292      	uxth	r2, r2
 8003f44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	1c9a      	adds	r2, r3, #2
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f62:	2301      	movs	r3, #1
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f66:	f7fd f91b 	bl	80011a0 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d807      	bhi.n	8003f86 <HAL_SPI_TransmitReceive+0x212>
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d003      	beq.n	8003f86 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f84:	e0fb      	b.n	800417e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1a3      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x164>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d19d      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x164>
 8003f9c:	e0df      	b.n	800415e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x23a>
 8003fa6:	8a7b      	ldrh	r3, [r7, #18]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	f040 80cb 	bne.w	8004144 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d912      	bls.n	8003fde <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	881a      	ldrh	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	1c9a      	adds	r2, r3, #2
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b02      	subs	r3, #2
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fdc:	e0b2      	b.n	8004144 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004004:	e09e      	b.n	8004144 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d134      	bne.n	800407e <HAL_SPI_TransmitReceive+0x30a>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d02f      	beq.n	800407e <HAL_SPI_TransmitReceive+0x30a>
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	2b01      	cmp	r3, #1
 8004022:	d12c      	bne.n	800407e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b01      	cmp	r3, #1
 800402c:	d912      	bls.n	8004054 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	881a      	ldrh	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	1c9a      	adds	r2, r3, #2
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b02      	subs	r3, #2
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004052:	e012      	b.n	800407a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d148      	bne.n	800411e <HAL_SPI_TransmitReceive+0x3aa>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d042      	beq.n	800411e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d923      	bls.n	80040ec <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	b292      	uxth	r2, r2
 80040b0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	1c9a      	adds	r2, r3, #2
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b02      	subs	r3, #2
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d81f      	bhi.n	800411a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	e016      	b.n	800411a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f103 020c 	add.w	r2, r3, #12
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	7812      	ldrb	r2, [r2, #0]
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800411a:	2301      	movs	r3, #1
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800411e:	f7fd f83f 	bl	80011a0 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412a:	429a      	cmp	r2, r3
 800412c:	d803      	bhi.n	8004136 <HAL_SPI_TransmitReceive+0x3c2>
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d102      	bne.n	800413c <HAL_SPI_TransmitReceive+0x3c8>
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2b00      	cmp	r3, #0
 800413a:	d103      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004142:	e01c      	b.n	800417e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	f47f af5b 	bne.w	8004006 <HAL_SPI_TransmitReceive+0x292>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	f47f af54 	bne.w	8004006 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f956 	bl	8004414 <SPI_EndRxTxTransaction>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	661a      	str	r2, [r3, #96]	; 0x60
 800417a:	e000      	b.n	800417e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800417c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800418e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004192:	4618      	mov	r0, r3
 8004194:	3728      	adds	r7, #40	; 0x28
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041a8:	b2db      	uxtb	r3, r3
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	4613      	mov	r3, r2
 80041c4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041c6:	e04c      	b.n	8004262 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d048      	beq.n	8004262 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80041d0:	f7fc ffe6 	bl	80011a0 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d902      	bls.n	80041e6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d13d      	bne.n	8004262 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fe:	d111      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004208:	d004      	beq.n	8004214 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004212:	d107      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004222:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422c:	d10f      	bne.n	800424e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800424c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e00f      	b.n	8004282 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	429a      	cmp	r2, r3
 800427e:	d1a3      	bne.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004298:	e057      	b.n	800434a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042a0:	d106      	bne.n	80042b0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d103      	bne.n	80042b0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d048      	beq.n	800434a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80042b8:	f7fc ff72 	bl	80011a0 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d902      	bls.n	80042ce <SPI_WaitFifoStateUntilTimeout+0x44>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d13d      	bne.n	800434a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e6:	d111      	bne.n	800430c <SPI_WaitFifoStateUntilTimeout+0x82>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f0:	d004      	beq.n	80042fc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fa:	d107      	bne.n	800430c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004314:	d10f      	bne.n	8004336 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004334:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e008      	b.n	800435c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4013      	ands	r3, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	429a      	cmp	r2, r3
 8004358:	d19f      	bne.n	800429a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004378:	d111      	bne.n	800439e <SPI_EndRxTransaction+0x3a>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004382:	d004      	beq.n	800438e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438c:	d107      	bne.n	800439e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f7ff ff04 	bl	80041b6 <SPI_WaitFlagStateUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	f043 0220 	orr.w	r2, r3, #32
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e023      	b.n	800440c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043cc:	d11d      	bne.n	800440a <SPI_EndRxTransaction+0xa6>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d6:	d004      	beq.n	80043e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e0:	d113      	bne.n	800440a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff ff4b 	bl	800428a <SPI_WaitFifoStateUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e000      	b.n	800440c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2200      	movs	r2, #0
 8004428:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff ff2c 	bl	800428a <SPI_WaitFifoStateUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d007      	beq.n	8004448 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e027      	b.n	8004498 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2200      	movs	r2, #0
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff feaf 	bl	80041b6 <SPI_WaitFlagStateUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004462:	f043 0220 	orr.w	r2, r3, #32
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e014      	b.n	8004498 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2200      	movs	r2, #0
 8004476:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f7ff ff05 	bl	800428a <SPI_WaitFifoStateUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e000      	b.n	8004498 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e01d      	b.n	80044ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fc fd5c 	bl	8000f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f000 fa06 	bl	80048f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <HAL_TIM_Base_Start_IT+0x50>)
 8004518:	4013      	ands	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b06      	cmp	r3, #6
 8004520:	d00b      	beq.n	800453a <HAL_TIM_Base_Start_IT+0x42>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d007      	beq.n	800453a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	00010007 	.word	0x00010007

0800454c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6a1a      	ldr	r2, [r3, #32]
 800456a:	f241 1311 	movw	r3, #4369	; 0x1111
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10f      	bne.n	8004594 <HAL_TIM_Base_Stop_IT+0x48>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6a1a      	ldr	r2, [r3, #32]
 800457a:	f244 4344 	movw	r3, #17476	; 0x4444
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d107      	bne.n	8004594 <HAL_TIM_Base_Stop_IT+0x48>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d122      	bne.n	80045fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d11b      	bne.n	80045fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f06f 0202 	mvn.w	r2, #2
 80045ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f965 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 80045ea:	e005      	b.n	80045f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f957 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f968 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b04      	cmp	r3, #4
 800460a:	d122      	bne.n	8004652 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d11b      	bne.n	8004652 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f06f 0204 	mvn.w	r2, #4
 8004622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f93b 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 800463e:	e005      	b.n	800464c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f92d 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f93e 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b08      	cmp	r3, #8
 800465e:	d122      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b08      	cmp	r3, #8
 800466c:	d11b      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f06f 0208 	mvn.w	r2, #8
 8004676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2204      	movs	r2, #4
 800467c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f911 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 8004692:	e005      	b.n	80046a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f903 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f914 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d122      	bne.n	80046fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d11b      	bne.n	80046fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f06f 0210 	mvn.w	r2, #16
 80046ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2208      	movs	r2, #8
 80046d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8e7 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 80046e6:	e005      	b.n	80046f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f8d9 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8ea 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b01      	cmp	r3, #1
 8004706:	d10e      	bne.n	8004726 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d107      	bne.n	8004726 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f06f 0201 	mvn.w	r2, #1
 800471e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7fc fabf 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	2b80      	cmp	r3, #128	; 0x80
 8004732:	d10e      	bne.n	8004752 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473e:	2b80      	cmp	r3, #128	; 0x80
 8004740:	d107      	bne.n	8004752 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800474a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f981 	bl	8004a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004760:	d10e      	bne.n	8004780 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	2b80      	cmp	r3, #128	; 0x80
 800476e:	d107      	bne.n	8004780 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f974 	bl	8004a68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d10e      	bne.n	80047ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d107      	bne.n	80047ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f898 	bl	80048dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	d10e      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d107      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0220 	mvn.w	r2, #32
 80047d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f934 	bl	8004a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047e6:	d10f      	bne.n	8004808 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047f6:	d107      	bne.n	8004808 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f93a 	bl	8004a7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004816:	d10f      	bne.n	8004838 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004826:	d107      	bne.n	8004838 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f92c 	bl	8004a90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004846:	d10f      	bne.n	8004868 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004856:	d107      	bne.n	8004868 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f91e 	bl	8004aa4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004872:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004876:	d10f      	bne.n	8004898 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004882:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004886:	d107      	bne.n	8004898 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f910 	bl	8004ab8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004898:	bf00      	nop
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a46      	ldr	r2, [pc, #280]	; (8004a1c <TIM_Base_SetConfig+0x12c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d017      	beq.n	8004938 <TIM_Base_SetConfig+0x48>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d013      	beq.n	8004938 <TIM_Base_SetConfig+0x48>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a43      	ldr	r2, [pc, #268]	; (8004a20 <TIM_Base_SetConfig+0x130>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00f      	beq.n	8004938 <TIM_Base_SetConfig+0x48>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a42      	ldr	r2, [pc, #264]	; (8004a24 <TIM_Base_SetConfig+0x134>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_Base_SetConfig+0x48>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a41      	ldr	r2, [pc, #260]	; (8004a28 <TIM_Base_SetConfig+0x138>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_Base_SetConfig+0x48>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a40      	ldr	r2, [pc, #256]	; (8004a2c <TIM_Base_SetConfig+0x13c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0x48>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a3f      	ldr	r2, [pc, #252]	; (8004a30 <TIM_Base_SetConfig+0x140>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a33      	ldr	r2, [pc, #204]	; (8004a1c <TIM_Base_SetConfig+0x12c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d023      	beq.n	800499a <TIM_Base_SetConfig+0xaa>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d01f      	beq.n	800499a <TIM_Base_SetConfig+0xaa>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a30      	ldr	r2, [pc, #192]	; (8004a20 <TIM_Base_SetConfig+0x130>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01b      	beq.n	800499a <TIM_Base_SetConfig+0xaa>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a2f      	ldr	r2, [pc, #188]	; (8004a24 <TIM_Base_SetConfig+0x134>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d017      	beq.n	800499a <TIM_Base_SetConfig+0xaa>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2e      	ldr	r2, [pc, #184]	; (8004a28 <TIM_Base_SetConfig+0x138>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <TIM_Base_SetConfig+0xaa>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2d      	ldr	r2, [pc, #180]	; (8004a2c <TIM_Base_SetConfig+0x13c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_Base_SetConfig+0xaa>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2d      	ldr	r2, [pc, #180]	; (8004a34 <TIM_Base_SetConfig+0x144>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_Base_SetConfig+0xaa>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2c      	ldr	r2, [pc, #176]	; (8004a38 <TIM_Base_SetConfig+0x148>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_Base_SetConfig+0xaa>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2b      	ldr	r2, [pc, #172]	; (8004a3c <TIM_Base_SetConfig+0x14c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_Base_SetConfig+0xaa>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a26      	ldr	r2, [pc, #152]	; (8004a30 <TIM_Base_SetConfig+0x140>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <TIM_Base_SetConfig+0x12c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d013      	beq.n	8004a00 <TIM_Base_SetConfig+0x110>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a14      	ldr	r2, [pc, #80]	; (8004a2c <TIM_Base_SetConfig+0x13c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00f      	beq.n	8004a00 <TIM_Base_SetConfig+0x110>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <TIM_Base_SetConfig+0x144>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00b      	beq.n	8004a00 <TIM_Base_SetConfig+0x110>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <TIM_Base_SetConfig+0x148>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <TIM_Base_SetConfig+0x110>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a12      	ldr	r2, [pc, #72]	; (8004a3c <TIM_Base_SetConfig+0x14c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_Base_SetConfig+0x110>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a0d      	ldr	r2, [pc, #52]	; (8004a30 <TIM_Base_SetConfig+0x140>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d103      	bne.n	8004a08 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	615a      	str	r2, [r3, #20]
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800
 8004a28:	40000c00 	.word	0x40000c00
 8004a2c:	40013400 	.word	0x40013400
 8004a30:	40015000 	.word	0x40015000
 8004a34:	40014000 	.word	0x40014000
 8004a38:	40014400 	.word	0x40014400
 8004a3c:	40014800 	.word	0x40014800

08004a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e042      	b.n	8004b64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d106      	bne.n	8004af6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7fc f9a5 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2224      	movs	r2, #36	; 0x24
 8004afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f82e 	bl	8004b70 <UART_SetConfig>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e022      	b.n	8004b64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f001 fa10 	bl	8005f4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f001 fa97 	bl	8006090 <UART_CheckIdleState>
 8004b62:	4603      	mov	r3, r0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	0000      	movs	r0, r0
	...

08004b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b70:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004b74:	b08a      	sub	sp, #40	; 0x28
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4baa      	ldr	r3, [pc, #680]	; (8004e58 <UART_SetConfig+0x2e8>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a9f      	ldr	r2, [pc, #636]	; (8004e5c <UART_SetConfig+0x2ec>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	4313      	orrs	r3, r2
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004bf6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	f023 010f 	bic.w	r1, r3, #15
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a90      	ldr	r2, [pc, #576]	; (8004e60 <UART_SetConfig+0x2f0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d126      	bne.n	8004c72 <UART_SetConfig+0x102>
 8004c24:	4b8f      	ldr	r3, [pc, #572]	; (8004e64 <UART_SetConfig+0x2f4>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d81a      	bhi.n	8004c68 <UART_SetConfig+0xf8>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <UART_SetConfig+0xc8>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c59 	.word	0x08004c59
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c61 	.word	0x08004c61
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4e:	e116      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004c50:	2302      	movs	r3, #2
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c56:	e112      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5e:	e10e      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004c60:	2308      	movs	r3, #8
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c66:	e10a      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6e:	bf00      	nop
 8004c70:	e105      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a7c      	ldr	r2, [pc, #496]	; (8004e68 <UART_SetConfig+0x2f8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d138      	bne.n	8004cee <UART_SetConfig+0x17e>
 8004c7c:	4b79      	ldr	r3, [pc, #484]	; (8004e64 <UART_SetConfig+0x2f4>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	2b0c      	cmp	r3, #12
 8004c88:	d82c      	bhi.n	8004ce4 <UART_SetConfig+0x174>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <UART_SetConfig+0x120>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004ce5 	.word	0x08004ce5
 8004c98:	08004ce5 	.word	0x08004ce5
 8004c9c:	08004ce5 	.word	0x08004ce5
 8004ca0:	08004cd5 	.word	0x08004cd5
 8004ca4:	08004ce5 	.word	0x08004ce5
 8004ca8:	08004ce5 	.word	0x08004ce5
 8004cac:	08004ce5 	.word	0x08004ce5
 8004cb0:	08004ccd 	.word	0x08004ccd
 8004cb4:	08004ce5 	.word	0x08004ce5
 8004cb8:	08004ce5 	.word	0x08004ce5
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004cdd 	.word	0x08004cdd
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e0d8      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e0d4      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e0d0      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e0cc      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	bf00      	nop
 8004cec:	e0c7      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a5e      	ldr	r2, [pc, #376]	; (8004e6c <UART_SetConfig+0x2fc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d125      	bne.n	8004d44 <UART_SetConfig+0x1d4>
 8004cf8:	4b5a      	ldr	r3, [pc, #360]	; (8004e64 <UART_SetConfig+0x2f4>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d02:	2b10      	cmp	r3, #16
 8004d04:	d011      	beq.n	8004d2a <UART_SetConfig+0x1ba>
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d802      	bhi.n	8004d10 <UART_SetConfig+0x1a0>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <UART_SetConfig+0x1aa>
 8004d0e:	e014      	b.n	8004d3a <UART_SetConfig+0x1ca>
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d006      	beq.n	8004d22 <UART_SetConfig+0x1b2>
 8004d14:	2b30      	cmp	r3, #48	; 0x30
 8004d16:	d00c      	beq.n	8004d32 <UART_SetConfig+0x1c2>
 8004d18:	e00f      	b.n	8004d3a <UART_SetConfig+0x1ca>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d20:	e0ad      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004d22:	2302      	movs	r3, #2
 8004d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d28:	e0a9      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d30:	e0a5      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004d32:	2308      	movs	r3, #8
 8004d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d38:	e0a1      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004d3a:	2310      	movs	r3, #16
 8004d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d40:	bf00      	nop
 8004d42:	e09c      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a49      	ldr	r2, [pc, #292]	; (8004e70 <UART_SetConfig+0x300>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d125      	bne.n	8004d9a <UART_SetConfig+0x22a>
 8004d4e:	4b45      	ldr	r3, [pc, #276]	; (8004e64 <UART_SetConfig+0x2f4>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d011      	beq.n	8004d80 <UART_SetConfig+0x210>
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d802      	bhi.n	8004d66 <UART_SetConfig+0x1f6>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <UART_SetConfig+0x200>
 8004d64:	e014      	b.n	8004d90 <UART_SetConfig+0x220>
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d006      	beq.n	8004d78 <UART_SetConfig+0x208>
 8004d6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d6c:	d00c      	beq.n	8004d88 <UART_SetConfig+0x218>
 8004d6e:	e00f      	b.n	8004d90 <UART_SetConfig+0x220>
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e082      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e07e      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d86:	e07a      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e076      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d96:	bf00      	nop
 8004d98:	e071      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a35      	ldr	r2, [pc, #212]	; (8004e74 <UART_SetConfig+0x304>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d129      	bne.n	8004df8 <UART_SetConfig+0x288>
 8004da4:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <UART_SetConfig+0x2f4>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db2:	d014      	beq.n	8004dde <UART_SetConfig+0x26e>
 8004db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db8:	d802      	bhi.n	8004dc0 <UART_SetConfig+0x250>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <UART_SetConfig+0x25e>
 8004dbe:	e016      	b.n	8004dee <UART_SetConfig+0x27e>
 8004dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc4:	d007      	beq.n	8004dd6 <UART_SetConfig+0x266>
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dca:	d00c      	beq.n	8004de6 <UART_SetConfig+0x276>
 8004dcc:	e00f      	b.n	8004dee <UART_SetConfig+0x27e>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd4:	e053      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ddc:	e04f      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004dde:	2304      	movs	r3, #4
 8004de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de4:	e04b      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004de6:	2308      	movs	r3, #8
 8004de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dec:	e047      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004dee:	2310      	movs	r3, #16
 8004df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df4:	bf00      	nop
 8004df6:	e042      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a17      	ldr	r2, [pc, #92]	; (8004e5c <UART_SetConfig+0x2ec>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d13a      	bne.n	8004e78 <UART_SetConfig+0x308>
 8004e02:	4b18      	ldr	r3, [pc, #96]	; (8004e64 <UART_SetConfig+0x2f4>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e10:	d014      	beq.n	8004e3c <UART_SetConfig+0x2cc>
 8004e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e16:	d802      	bhi.n	8004e1e <UART_SetConfig+0x2ae>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <UART_SetConfig+0x2bc>
 8004e1c:	e016      	b.n	8004e4c <UART_SetConfig+0x2dc>
 8004e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e22:	d007      	beq.n	8004e34 <UART_SetConfig+0x2c4>
 8004e24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e28:	d00c      	beq.n	8004e44 <UART_SetConfig+0x2d4>
 8004e2a:	e00f      	b.n	8004e4c <UART_SetConfig+0x2dc>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e32:	e024      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004e34:	2302      	movs	r3, #2
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3a:	e020      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e42:	e01c      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004e44:	2308      	movs	r3, #8
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4a:	e018      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e52:	bf00      	nop
 8004e54:	e013      	b.n	8004e7e <UART_SetConfig+0x30e>
 8004e56:	bf00      	nop
 8004e58:	cfff69f3 	.word	0xcfff69f3
 8004e5c:	40008000 	.word	0x40008000
 8004e60:	40013800 	.word	0x40013800
 8004e64:	40021000 	.word	0x40021000
 8004e68:	40004400 	.word	0x40004400
 8004e6c:	40004800 	.word	0x40004800
 8004e70:	40004c00 	.word	0x40004c00
 8004e74:	40005000 	.word	0x40005000
 8004e78:	2310      	movs	r3, #16
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a86      	ldr	r2, [pc, #536]	; (800509c <UART_SetConfig+0x52c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	f040 8422 	bne.w	80056ce <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	f200 8173 	bhi.w	800517a <UART_SetConfig+0x60a>
 8004e94:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <UART_SetConfig+0x32c>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ec1 	.word	0x08004ec1
 8004ea0:	0800517b 	.word	0x0800517b
 8004ea4:	08004f63 	.word	0x08004f63
 8004ea8:	0800517b 	.word	0x0800517b
 8004eac:	08004ffb 	.word	0x08004ffb
 8004eb0:	0800517b 	.word	0x0800517b
 8004eb4:	0800517b 	.word	0x0800517b
 8004eb8:	0800517b 	.word	0x0800517b
 8004ebc:	080050cd 	.word	0x080050cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ec0:	f7fd ff38 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d044      	beq.n	8004f58 <UART_SetConfig+0x3e8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d03e      	beq.n	8004f54 <UART_SetConfig+0x3e4>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d038      	beq.n	8004f50 <UART_SetConfig+0x3e0>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d032      	beq.n	8004f4c <UART_SetConfig+0x3dc>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d02c      	beq.n	8004f48 <UART_SetConfig+0x3d8>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d026      	beq.n	8004f44 <UART_SetConfig+0x3d4>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d020      	beq.n	8004f40 <UART_SetConfig+0x3d0>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	2b07      	cmp	r3, #7
 8004f04:	d01a      	beq.n	8004f3c <UART_SetConfig+0x3cc>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d014      	beq.n	8004f38 <UART_SetConfig+0x3c8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2b09      	cmp	r3, #9
 8004f14:	d00e      	beq.n	8004f34 <UART_SetConfig+0x3c4>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	2b0a      	cmp	r3, #10
 8004f1c:	d008      	beq.n	8004f30 <UART_SetConfig+0x3c0>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	2b0b      	cmp	r3, #11
 8004f24:	d102      	bne.n	8004f2c <UART_SetConfig+0x3bc>
 8004f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f2a:	e016      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e014      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	e012      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f34:	2340      	movs	r3, #64	; 0x40
 8004f36:	e010      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f38:	2320      	movs	r3, #32
 8004f3a:	e00e      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	e00c      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f40:	230c      	movs	r3, #12
 8004f42:	e00a      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f44:	230a      	movs	r3, #10
 8004f46:	e008      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	e006      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f4c:	2306      	movs	r3, #6
 8004f4e:	e004      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f50:	2304      	movs	r3, #4
 8004f52:	e002      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e000      	b.n	8004f5a <UART_SetConfig+0x3ea>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5e:	617b      	str	r3, [r7, #20]
        break;
 8004f60:	e10e      	b.n	8005180 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d044      	beq.n	8004ff4 <UART_SetConfig+0x484>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d03e      	beq.n	8004ff0 <UART_SetConfig+0x480>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d038      	beq.n	8004fec <UART_SetConfig+0x47c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d032      	beq.n	8004fe8 <UART_SetConfig+0x478>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d02c      	beq.n	8004fe4 <UART_SetConfig+0x474>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	2b05      	cmp	r3, #5
 8004f90:	d026      	beq.n	8004fe0 <UART_SetConfig+0x470>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	2b06      	cmp	r3, #6
 8004f98:	d020      	beq.n	8004fdc <UART_SetConfig+0x46c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	2b07      	cmp	r3, #7
 8004fa0:	d01a      	beq.n	8004fd8 <UART_SetConfig+0x468>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d014      	beq.n	8004fd4 <UART_SetConfig+0x464>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	2b09      	cmp	r3, #9
 8004fb0:	d00e      	beq.n	8004fd0 <UART_SetConfig+0x460>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	2b0a      	cmp	r3, #10
 8004fb8:	d008      	beq.n	8004fcc <UART_SetConfig+0x45c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2b0b      	cmp	r3, #11
 8004fc0:	d102      	bne.n	8004fc8 <UART_SetConfig+0x458>
 8004fc2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004fc6:	e016      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004fc8:	4b35      	ldr	r3, [pc, #212]	; (80050a0 <UART_SetConfig+0x530>)
 8004fca:	e014      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004fcc:	4b35      	ldr	r3, [pc, #212]	; (80050a4 <UART_SetConfig+0x534>)
 8004fce:	e012      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004fd0:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <UART_SetConfig+0x538>)
 8004fd2:	e010      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004fd4:	4b35      	ldr	r3, [pc, #212]	; (80050ac <UART_SetConfig+0x53c>)
 8004fd6:	e00e      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004fd8:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <UART_SetConfig+0x540>)
 8004fda:	e00c      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004fdc:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <UART_SetConfig+0x544>)
 8004fde:	e00a      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004fe0:	4b35      	ldr	r3, [pc, #212]	; (80050b8 <UART_SetConfig+0x548>)
 8004fe2:	e008      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004fe4:	4b35      	ldr	r3, [pc, #212]	; (80050bc <UART_SetConfig+0x54c>)
 8004fe6:	e006      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004fe8:	4b35      	ldr	r3, [pc, #212]	; (80050c0 <UART_SetConfig+0x550>)
 8004fea:	e004      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004fec:	4b35      	ldr	r3, [pc, #212]	; (80050c4 <UART_SetConfig+0x554>)
 8004fee:	e002      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004ff0:	4b35      	ldr	r3, [pc, #212]	; (80050c8 <UART_SetConfig+0x558>)
 8004ff2:	e000      	b.n	8004ff6 <UART_SetConfig+0x486>
 8004ff4:	4b2a      	ldr	r3, [pc, #168]	; (80050a0 <UART_SetConfig+0x530>)
 8004ff6:	617b      	str	r3, [r7, #20]
        break;
 8004ff8:	e0c2      	b.n	8005180 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ffa:	f7fd fe2d 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8004ffe:	4602      	mov	r2, r0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d044      	beq.n	8005092 <UART_SetConfig+0x522>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2b01      	cmp	r3, #1
 800500e:	d03e      	beq.n	800508e <UART_SetConfig+0x51e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	2b02      	cmp	r3, #2
 8005016:	d038      	beq.n	800508a <UART_SetConfig+0x51a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2b03      	cmp	r3, #3
 800501e:	d032      	beq.n	8005086 <UART_SetConfig+0x516>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	2b04      	cmp	r3, #4
 8005026:	d02c      	beq.n	8005082 <UART_SetConfig+0x512>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	2b05      	cmp	r3, #5
 800502e:	d026      	beq.n	800507e <UART_SetConfig+0x50e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	2b06      	cmp	r3, #6
 8005036:	d020      	beq.n	800507a <UART_SetConfig+0x50a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	2b07      	cmp	r3, #7
 800503e:	d01a      	beq.n	8005076 <UART_SetConfig+0x506>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	2b08      	cmp	r3, #8
 8005046:	d014      	beq.n	8005072 <UART_SetConfig+0x502>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2b09      	cmp	r3, #9
 800504e:	d00e      	beq.n	800506e <UART_SetConfig+0x4fe>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2b0a      	cmp	r3, #10
 8005056:	d008      	beq.n	800506a <UART_SetConfig+0x4fa>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	2b0b      	cmp	r3, #11
 800505e:	d102      	bne.n	8005066 <UART_SetConfig+0x4f6>
 8005060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005064:	e016      	b.n	8005094 <UART_SetConfig+0x524>
 8005066:	2301      	movs	r3, #1
 8005068:	e014      	b.n	8005094 <UART_SetConfig+0x524>
 800506a:	2380      	movs	r3, #128	; 0x80
 800506c:	e012      	b.n	8005094 <UART_SetConfig+0x524>
 800506e:	2340      	movs	r3, #64	; 0x40
 8005070:	e010      	b.n	8005094 <UART_SetConfig+0x524>
 8005072:	2320      	movs	r3, #32
 8005074:	e00e      	b.n	8005094 <UART_SetConfig+0x524>
 8005076:	2310      	movs	r3, #16
 8005078:	e00c      	b.n	8005094 <UART_SetConfig+0x524>
 800507a:	230c      	movs	r3, #12
 800507c:	e00a      	b.n	8005094 <UART_SetConfig+0x524>
 800507e:	230a      	movs	r3, #10
 8005080:	e008      	b.n	8005094 <UART_SetConfig+0x524>
 8005082:	2308      	movs	r3, #8
 8005084:	e006      	b.n	8005094 <UART_SetConfig+0x524>
 8005086:	2306      	movs	r3, #6
 8005088:	e004      	b.n	8005094 <UART_SetConfig+0x524>
 800508a:	2304      	movs	r3, #4
 800508c:	e002      	b.n	8005094 <UART_SetConfig+0x524>
 800508e:	2302      	movs	r3, #2
 8005090:	e000      	b.n	8005094 <UART_SetConfig+0x524>
 8005092:	2301      	movs	r3, #1
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	617b      	str	r3, [r7, #20]
        break;
 800509a:	e071      	b.n	8005180 <UART_SetConfig+0x610>
 800509c:	40008000 	.word	0x40008000
 80050a0:	00f42400 	.word	0x00f42400
 80050a4:	0001e848 	.word	0x0001e848
 80050a8:	0003d090 	.word	0x0003d090
 80050ac:	0007a120 	.word	0x0007a120
 80050b0:	000f4240 	.word	0x000f4240
 80050b4:	00145855 	.word	0x00145855
 80050b8:	00186a00 	.word	0x00186a00
 80050bc:	001e8480 	.word	0x001e8480
 80050c0:	0028b0aa 	.word	0x0028b0aa
 80050c4:	003d0900 	.word	0x003d0900
 80050c8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d04e      	beq.n	8005172 <UART_SetConfig+0x602>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d047      	beq.n	800516c <UART_SetConfig+0x5fc>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d040      	beq.n	8005166 <UART_SetConfig+0x5f6>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d039      	beq.n	8005160 <UART_SetConfig+0x5f0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d032      	beq.n	800515a <UART_SetConfig+0x5ea>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d02b      	beq.n	8005154 <UART_SetConfig+0x5e4>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b06      	cmp	r3, #6
 8005102:	d024      	beq.n	800514e <UART_SetConfig+0x5de>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	2b07      	cmp	r3, #7
 800510a:	d01d      	beq.n	8005148 <UART_SetConfig+0x5d8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2b08      	cmp	r3, #8
 8005112:	d016      	beq.n	8005142 <UART_SetConfig+0x5d2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	2b09      	cmp	r3, #9
 800511a:	d00f      	beq.n	800513c <UART_SetConfig+0x5cc>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	2b0a      	cmp	r3, #10
 8005122:	d008      	beq.n	8005136 <UART_SetConfig+0x5c6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	2b0b      	cmp	r3, #11
 800512a:	d101      	bne.n	8005130 <UART_SetConfig+0x5c0>
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	e022      	b.n	8005176 <UART_SetConfig+0x606>
 8005130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005134:	e01f      	b.n	8005176 <UART_SetConfig+0x606>
 8005136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800513a:	e01c      	b.n	8005176 <UART_SetConfig+0x606>
 800513c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005140:	e019      	b.n	8005176 <UART_SetConfig+0x606>
 8005142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005146:	e016      	b.n	8005176 <UART_SetConfig+0x606>
 8005148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800514c:	e013      	b.n	8005176 <UART_SetConfig+0x606>
 800514e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005152:	e010      	b.n	8005176 <UART_SetConfig+0x606>
 8005154:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005158:	e00d      	b.n	8005176 <UART_SetConfig+0x606>
 800515a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800515e:	e00a      	b.n	8005176 <UART_SetConfig+0x606>
 8005160:	f241 5355 	movw	r3, #5461	; 0x1555
 8005164:	e007      	b.n	8005176 <UART_SetConfig+0x606>
 8005166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800516a:	e004      	b.n	8005176 <UART_SetConfig+0x606>
 800516c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005170:	e001      	b.n	8005176 <UART_SetConfig+0x606>
 8005172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005176:	617b      	str	r3, [r7, #20]
        break;
 8005178:	e002      	b.n	8005180 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	76fb      	strb	r3, [r7, #27]
        break;
 800517e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 86b7 	beq.w	8005ef6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	4413      	add	r3, r2
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	429a      	cmp	r2, r3
 8005196:	d305      	bcc.n	80051a4 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d903      	bls.n	80051ac <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	76fb      	strb	r3, [r7, #27]
 80051a8:	f000 bea5 	b.w	8005ef6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80051ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	f200 8277 	bhi.w	80056a4 <UART_SetConfig+0xb34>
 80051b6:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <UART_SetConfig+0x64c>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080056a5 	.word	0x080056a5
 80051c4:	0800531f 	.word	0x0800531f
 80051c8:	080056a5 	.word	0x080056a5
 80051cc:	08005415 	.word	0x08005415
 80051d0:	080056a5 	.word	0x080056a5
 80051d4:	080056a5 	.word	0x080056a5
 80051d8:	080056a5 	.word	0x080056a5
 80051dc:	08005553 	.word	0x08005553
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80051e0:	f7fd fda8 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 80051e4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d067      	beq.n	80052c6 <UART_SetConfig+0x756>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d05e      	beq.n	80052bc <UART_SetConfig+0x74c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b02      	cmp	r3, #2
 8005204:	d055      	beq.n	80052b2 <UART_SetConfig+0x742>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b03      	cmp	r3, #3
 800520c:	d04c      	beq.n	80052a8 <UART_SetConfig+0x738>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	2b04      	cmp	r3, #4
 8005214:	d043      	beq.n	800529e <UART_SetConfig+0x72e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	2b05      	cmp	r3, #5
 800521c:	d03a      	beq.n	8005294 <UART_SetConfig+0x724>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	2b06      	cmp	r3, #6
 8005224:	d031      	beq.n	800528a <UART_SetConfig+0x71a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	2b07      	cmp	r3, #7
 800522c:	d028      	beq.n	8005280 <UART_SetConfig+0x710>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	2b08      	cmp	r3, #8
 8005234:	d01f      	beq.n	8005276 <UART_SetConfig+0x706>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b09      	cmp	r3, #9
 800523c:	d016      	beq.n	800526c <UART_SetConfig+0x6fc>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b0a      	cmp	r3, #10
 8005244:	d00d      	beq.n	8005262 <UART_SetConfig+0x6f2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b0b      	cmp	r3, #11
 800524c:	d104      	bne.n	8005258 <UART_SetConfig+0x6e8>
 800524e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005252:	f04f 0400 	mov.w	r4, #0
 8005256:	e03a      	b.n	80052ce <UART_SetConfig+0x75e>
 8005258:	f04f 0301 	mov.w	r3, #1
 800525c:	f04f 0400 	mov.w	r4, #0
 8005260:	e035      	b.n	80052ce <UART_SetConfig+0x75e>
 8005262:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005266:	f04f 0400 	mov.w	r4, #0
 800526a:	e030      	b.n	80052ce <UART_SetConfig+0x75e>
 800526c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005270:	f04f 0400 	mov.w	r4, #0
 8005274:	e02b      	b.n	80052ce <UART_SetConfig+0x75e>
 8005276:	f04f 0320 	mov.w	r3, #32
 800527a:	f04f 0400 	mov.w	r4, #0
 800527e:	e026      	b.n	80052ce <UART_SetConfig+0x75e>
 8005280:	f04f 0310 	mov.w	r3, #16
 8005284:	f04f 0400 	mov.w	r4, #0
 8005288:	e021      	b.n	80052ce <UART_SetConfig+0x75e>
 800528a:	f04f 030c 	mov.w	r3, #12
 800528e:	f04f 0400 	mov.w	r4, #0
 8005292:	e01c      	b.n	80052ce <UART_SetConfig+0x75e>
 8005294:	f04f 030a 	mov.w	r3, #10
 8005298:	f04f 0400 	mov.w	r4, #0
 800529c:	e017      	b.n	80052ce <UART_SetConfig+0x75e>
 800529e:	f04f 0308 	mov.w	r3, #8
 80052a2:	f04f 0400 	mov.w	r4, #0
 80052a6:	e012      	b.n	80052ce <UART_SetConfig+0x75e>
 80052a8:	f04f 0306 	mov.w	r3, #6
 80052ac:	f04f 0400 	mov.w	r4, #0
 80052b0:	e00d      	b.n	80052ce <UART_SetConfig+0x75e>
 80052b2:	f04f 0304 	mov.w	r3, #4
 80052b6:	f04f 0400 	mov.w	r4, #0
 80052ba:	e008      	b.n	80052ce <UART_SetConfig+0x75e>
 80052bc:	f04f 0302 	mov.w	r3, #2
 80052c0:	f04f 0400 	mov.w	r4, #0
 80052c4:	e003      	b.n	80052ce <UART_SetConfig+0x75e>
 80052c6:	f04f 0301 	mov.w	r3, #1
 80052ca:	f04f 0400 	mov.w	r4, #0
 80052ce:	461a      	mov	r2, r3
 80052d0:	4623      	mov	r3, r4
 80052d2:	f7fa ffa1 	bl	8000218 <__aeabi_uldivmod>
 80052d6:	4603      	mov	r3, r0
 80052d8:	460c      	mov	r4, r1
 80052da:	4619      	mov	r1, r3
 80052dc:	4622      	mov	r2, r4
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	f04f 0400 	mov.w	r4, #0
 80052e6:	0214      	lsls	r4, r2, #8
 80052e8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80052ec:	020b      	lsls	r3, r1, #8
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6852      	ldr	r2, [r2, #4]
 80052f2:	0852      	lsrs	r2, r2, #1
 80052f4:	4611      	mov	r1, r2
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	eb13 0b01 	adds.w	fp, r3, r1
 80052fe:	eb44 0c02 	adc.w	ip, r4, r2
 8005302:	4658      	mov	r0, fp
 8005304:	4661      	mov	r1, ip
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f04f 0400 	mov.w	r4, #0
 800530e:	461a      	mov	r2, r3
 8005310:	4623      	mov	r3, r4
 8005312:	f7fa ff81 	bl	8000218 <__aeabi_uldivmod>
 8005316:	4603      	mov	r3, r0
 8005318:	460c      	mov	r4, r1
 800531a:	61fb      	str	r3, [r7, #28]
            break;
 800531c:	e1c5      	b.n	80056aa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d05b      	beq.n	80053de <UART_SetConfig+0x86e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b01      	cmp	r3, #1
 800532c:	d053      	beq.n	80053d6 <UART_SetConfig+0x866>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	2b02      	cmp	r3, #2
 8005334:	d04b      	beq.n	80053ce <UART_SetConfig+0x85e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	2b03      	cmp	r3, #3
 800533c:	d043      	beq.n	80053c6 <UART_SetConfig+0x856>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2b04      	cmp	r3, #4
 8005344:	d03b      	beq.n	80053be <UART_SetConfig+0x84e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	2b05      	cmp	r3, #5
 800534c:	d033      	beq.n	80053b6 <UART_SetConfig+0x846>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	2b06      	cmp	r3, #6
 8005354:	d02b      	beq.n	80053ae <UART_SetConfig+0x83e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	2b07      	cmp	r3, #7
 800535c:	d023      	beq.n	80053a6 <UART_SetConfig+0x836>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	2b08      	cmp	r3, #8
 8005364:	d01b      	beq.n	800539e <UART_SetConfig+0x82e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	2b09      	cmp	r3, #9
 800536c:	d013      	beq.n	8005396 <UART_SetConfig+0x826>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	2b0a      	cmp	r3, #10
 8005374:	d00b      	beq.n	800538e <UART_SetConfig+0x81e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	2b0b      	cmp	r3, #11
 800537c:	d103      	bne.n	8005386 <UART_SetConfig+0x816>
 800537e:	4bae      	ldr	r3, [pc, #696]	; (8005638 <UART_SetConfig+0xac8>)
 8005380:	f04f 0400 	mov.w	r4, #0
 8005384:	e02e      	b.n	80053e4 <UART_SetConfig+0x874>
 8005386:	4bad      	ldr	r3, [pc, #692]	; (800563c <UART_SetConfig+0xacc>)
 8005388:	f04f 0400 	mov.w	r4, #0
 800538c:	e02a      	b.n	80053e4 <UART_SetConfig+0x874>
 800538e:	4bac      	ldr	r3, [pc, #688]	; (8005640 <UART_SetConfig+0xad0>)
 8005390:	f04f 0400 	mov.w	r4, #0
 8005394:	e026      	b.n	80053e4 <UART_SetConfig+0x874>
 8005396:	4bab      	ldr	r3, [pc, #684]	; (8005644 <UART_SetConfig+0xad4>)
 8005398:	f04f 0400 	mov.w	r4, #0
 800539c:	e022      	b.n	80053e4 <UART_SetConfig+0x874>
 800539e:	4baa      	ldr	r3, [pc, #680]	; (8005648 <UART_SetConfig+0xad8>)
 80053a0:	f04f 0400 	mov.w	r4, #0
 80053a4:	e01e      	b.n	80053e4 <UART_SetConfig+0x874>
 80053a6:	4ba9      	ldr	r3, [pc, #676]	; (800564c <UART_SetConfig+0xadc>)
 80053a8:	f04f 0400 	mov.w	r4, #0
 80053ac:	e01a      	b.n	80053e4 <UART_SetConfig+0x874>
 80053ae:	a49e      	add	r4, pc, #632	; (adr r4, 8005628 <UART_SetConfig+0xab8>)
 80053b0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80053b4:	e016      	b.n	80053e4 <UART_SetConfig+0x874>
 80053b6:	4ba6      	ldr	r3, [pc, #664]	; (8005650 <UART_SetConfig+0xae0>)
 80053b8:	f04f 0400 	mov.w	r4, #0
 80053bc:	e012      	b.n	80053e4 <UART_SetConfig+0x874>
 80053be:	4ba5      	ldr	r3, [pc, #660]	; (8005654 <UART_SetConfig+0xae4>)
 80053c0:	f04f 0400 	mov.w	r4, #0
 80053c4:	e00e      	b.n	80053e4 <UART_SetConfig+0x874>
 80053c6:	a49a      	add	r4, pc, #616	; (adr r4, 8005630 <UART_SetConfig+0xac0>)
 80053c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80053cc:	e00a      	b.n	80053e4 <UART_SetConfig+0x874>
 80053ce:	4ba2      	ldr	r3, [pc, #648]	; (8005658 <UART_SetConfig+0xae8>)
 80053d0:	f04f 0400 	mov.w	r4, #0
 80053d4:	e006      	b.n	80053e4 <UART_SetConfig+0x874>
 80053d6:	4ba1      	ldr	r3, [pc, #644]	; (800565c <UART_SetConfig+0xaec>)
 80053d8:	f04f 0400 	mov.w	r4, #0
 80053dc:	e002      	b.n	80053e4 <UART_SetConfig+0x874>
 80053de:	4b97      	ldr	r3, [pc, #604]	; (800563c <UART_SetConfig+0xacc>)
 80053e0:	f04f 0400 	mov.w	r4, #0
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6852      	ldr	r2, [r2, #4]
 80053e8:	0852      	lsrs	r2, r2, #1
 80053ea:	4611      	mov	r1, r2
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	eb13 0b01 	adds.w	fp, r3, r1
 80053f4:	eb44 0c02 	adc.w	ip, r4, r2
 80053f8:	4658      	mov	r0, fp
 80053fa:	4661      	mov	r1, ip
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f04f 0400 	mov.w	r4, #0
 8005404:	461a      	mov	r2, r3
 8005406:	4623      	mov	r3, r4
 8005408:	f7fa ff06 	bl	8000218 <__aeabi_uldivmod>
 800540c:	4603      	mov	r3, r0
 800540e:	460c      	mov	r4, r1
 8005410:	61fb      	str	r3, [r7, #28]
            break;
 8005412:	e14a      	b.n	80056aa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005414:	f7fd fc20 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8005418:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4618      	mov	r0, r3
 800541e:	f04f 0100 	mov.w	r1, #0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d067      	beq.n	80054fa <UART_SetConfig+0x98a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b01      	cmp	r3, #1
 8005430:	d05e      	beq.n	80054f0 <UART_SetConfig+0x980>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b02      	cmp	r3, #2
 8005438:	d055      	beq.n	80054e6 <UART_SetConfig+0x976>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b03      	cmp	r3, #3
 8005440:	d04c      	beq.n	80054dc <UART_SetConfig+0x96c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b04      	cmp	r3, #4
 8005448:	d043      	beq.n	80054d2 <UART_SetConfig+0x962>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b05      	cmp	r3, #5
 8005450:	d03a      	beq.n	80054c8 <UART_SetConfig+0x958>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b06      	cmp	r3, #6
 8005458:	d031      	beq.n	80054be <UART_SetConfig+0x94e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b07      	cmp	r3, #7
 8005460:	d028      	beq.n	80054b4 <UART_SetConfig+0x944>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b08      	cmp	r3, #8
 8005468:	d01f      	beq.n	80054aa <UART_SetConfig+0x93a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b09      	cmp	r3, #9
 8005470:	d016      	beq.n	80054a0 <UART_SetConfig+0x930>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b0a      	cmp	r3, #10
 8005478:	d00d      	beq.n	8005496 <UART_SetConfig+0x926>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b0b      	cmp	r3, #11
 8005480:	d104      	bne.n	800548c <UART_SetConfig+0x91c>
 8005482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005486:	f04f 0400 	mov.w	r4, #0
 800548a:	e03a      	b.n	8005502 <UART_SetConfig+0x992>
 800548c:	f04f 0301 	mov.w	r3, #1
 8005490:	f04f 0400 	mov.w	r4, #0
 8005494:	e035      	b.n	8005502 <UART_SetConfig+0x992>
 8005496:	f04f 0380 	mov.w	r3, #128	; 0x80
 800549a:	f04f 0400 	mov.w	r4, #0
 800549e:	e030      	b.n	8005502 <UART_SetConfig+0x992>
 80054a0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80054a4:	f04f 0400 	mov.w	r4, #0
 80054a8:	e02b      	b.n	8005502 <UART_SetConfig+0x992>
 80054aa:	f04f 0320 	mov.w	r3, #32
 80054ae:	f04f 0400 	mov.w	r4, #0
 80054b2:	e026      	b.n	8005502 <UART_SetConfig+0x992>
 80054b4:	f04f 0310 	mov.w	r3, #16
 80054b8:	f04f 0400 	mov.w	r4, #0
 80054bc:	e021      	b.n	8005502 <UART_SetConfig+0x992>
 80054be:	f04f 030c 	mov.w	r3, #12
 80054c2:	f04f 0400 	mov.w	r4, #0
 80054c6:	e01c      	b.n	8005502 <UART_SetConfig+0x992>
 80054c8:	f04f 030a 	mov.w	r3, #10
 80054cc:	f04f 0400 	mov.w	r4, #0
 80054d0:	e017      	b.n	8005502 <UART_SetConfig+0x992>
 80054d2:	f04f 0308 	mov.w	r3, #8
 80054d6:	f04f 0400 	mov.w	r4, #0
 80054da:	e012      	b.n	8005502 <UART_SetConfig+0x992>
 80054dc:	f04f 0306 	mov.w	r3, #6
 80054e0:	f04f 0400 	mov.w	r4, #0
 80054e4:	e00d      	b.n	8005502 <UART_SetConfig+0x992>
 80054e6:	f04f 0304 	mov.w	r3, #4
 80054ea:	f04f 0400 	mov.w	r4, #0
 80054ee:	e008      	b.n	8005502 <UART_SetConfig+0x992>
 80054f0:	f04f 0302 	mov.w	r3, #2
 80054f4:	f04f 0400 	mov.w	r4, #0
 80054f8:	e003      	b.n	8005502 <UART_SetConfig+0x992>
 80054fa:	f04f 0301 	mov.w	r3, #1
 80054fe:	f04f 0400 	mov.w	r4, #0
 8005502:	461a      	mov	r2, r3
 8005504:	4623      	mov	r3, r4
 8005506:	f7fa fe87 	bl	8000218 <__aeabi_uldivmod>
 800550a:	4603      	mov	r3, r0
 800550c:	460c      	mov	r4, r1
 800550e:	4619      	mov	r1, r3
 8005510:	4622      	mov	r2, r4
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	f04f 0400 	mov.w	r4, #0
 800551a:	0214      	lsls	r4, r2, #8
 800551c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005520:	020b      	lsls	r3, r1, #8
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6852      	ldr	r2, [r2, #4]
 8005526:	0852      	lsrs	r2, r2, #1
 8005528:	4611      	mov	r1, r2
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	eb13 0b01 	adds.w	fp, r3, r1
 8005532:	eb44 0c02 	adc.w	ip, r4, r2
 8005536:	4658      	mov	r0, fp
 8005538:	4661      	mov	r1, ip
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f04f 0400 	mov.w	r4, #0
 8005542:	461a      	mov	r2, r3
 8005544:	4623      	mov	r3, r4
 8005546:	f7fa fe67 	bl	8000218 <__aeabi_uldivmod>
 800554a:	4603      	mov	r3, r0
 800554c:	460c      	mov	r4, r1
 800554e:	61fb      	str	r3, [r7, #28]
            break;
 8005550:	e0ab      	b.n	80056aa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8088 	beq.w	800566c <UART_SetConfig+0xafc>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2b01      	cmp	r3, #1
 8005562:	d05b      	beq.n	800561c <UART_SetConfig+0xaac>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2b02      	cmp	r3, #2
 800556a:	d052      	beq.n	8005612 <UART_SetConfig+0xaa2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b03      	cmp	r3, #3
 8005572:	d04a      	beq.n	800560a <UART_SetConfig+0xa9a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b04      	cmp	r3, #4
 800557a:	d041      	beq.n	8005600 <UART_SetConfig+0xa90>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2b05      	cmp	r3, #5
 8005582:	d039      	beq.n	80055f8 <UART_SetConfig+0xa88>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b06      	cmp	r3, #6
 800558a:	d031      	beq.n	80055f0 <UART_SetConfig+0xa80>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2b07      	cmp	r3, #7
 8005592:	d028      	beq.n	80055e6 <UART_SetConfig+0xa76>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	2b08      	cmp	r3, #8
 800559a:	d01f      	beq.n	80055dc <UART_SetConfig+0xa6c>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2b09      	cmp	r3, #9
 80055a2:	d016      	beq.n	80055d2 <UART_SetConfig+0xa62>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2b0a      	cmp	r3, #10
 80055aa:	d00d      	beq.n	80055c8 <UART_SetConfig+0xa58>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b0b      	cmp	r3, #11
 80055b2:	d104      	bne.n	80055be <UART_SetConfig+0xa4e>
 80055b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b8:	f04f 0400 	mov.w	r4, #0
 80055bc:	e05a      	b.n	8005674 <UART_SetConfig+0xb04>
 80055be:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80055c2:	f04f 0400 	mov.w	r4, #0
 80055c6:	e055      	b.n	8005674 <UART_SetConfig+0xb04>
 80055c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055cc:	f04f 0400 	mov.w	r4, #0
 80055d0:	e050      	b.n	8005674 <UART_SetConfig+0xb04>
 80055d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055d6:	f04f 0400 	mov.w	r4, #0
 80055da:	e04b      	b.n	8005674 <UART_SetConfig+0xb04>
 80055dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80055e0:	f04f 0400 	mov.w	r4, #0
 80055e4:	e046      	b.n	8005674 <UART_SetConfig+0xb04>
 80055e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80055ea:	f04f 0400 	mov.w	r4, #0
 80055ee:	e041      	b.n	8005674 <UART_SetConfig+0xb04>
 80055f0:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <UART_SetConfig+0xaf0>)
 80055f2:	f04f 0400 	mov.w	r4, #0
 80055f6:	e03d      	b.n	8005674 <UART_SetConfig+0xb04>
 80055f8:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <UART_SetConfig+0xaf4>)
 80055fa:	f04f 0400 	mov.w	r4, #0
 80055fe:	e039      	b.n	8005674 <UART_SetConfig+0xb04>
 8005600:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005604:	f04f 0400 	mov.w	r4, #0
 8005608:	e034      	b.n	8005674 <UART_SetConfig+0xb04>
 800560a:	4b17      	ldr	r3, [pc, #92]	; (8005668 <UART_SetConfig+0xaf8>)
 800560c:	f04f 0400 	mov.w	r4, #0
 8005610:	e030      	b.n	8005674 <UART_SetConfig+0xb04>
 8005612:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005616:	f04f 0400 	mov.w	r4, #0
 800561a:	e02b      	b.n	8005674 <UART_SetConfig+0xb04>
 800561c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005620:	f04f 0400 	mov.w	r4, #0
 8005624:	e026      	b.n	8005674 <UART_SetConfig+0xb04>
 8005626:	bf00      	nop
 8005628:	14585500 	.word	0x14585500
 800562c:	00000000 	.word	0x00000000
 8005630:	28b0aa00 	.word	0x28b0aa00
 8005634:	00000000 	.word	0x00000000
 8005638:	00f42400 	.word	0x00f42400
 800563c:	f4240000 	.word	0xf4240000
 8005640:	01e84800 	.word	0x01e84800
 8005644:	03d09000 	.word	0x03d09000
 8005648:	07a12000 	.word	0x07a12000
 800564c:	0f424000 	.word	0x0f424000
 8005650:	186a0000 	.word	0x186a0000
 8005654:	1e848000 	.word	0x1e848000
 8005658:	3d090000 	.word	0x3d090000
 800565c:	7a120000 	.word	0x7a120000
 8005660:	000aaa00 	.word	0x000aaa00
 8005664:	000ccc00 	.word	0x000ccc00
 8005668:	00155500 	.word	0x00155500
 800566c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005670:	f04f 0400 	mov.w	r4, #0
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6852      	ldr	r2, [r2, #4]
 8005678:	0852      	lsrs	r2, r2, #1
 800567a:	4611      	mov	r1, r2
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	eb13 0b01 	adds.w	fp, r3, r1
 8005684:	eb44 0c02 	adc.w	ip, r4, r2
 8005688:	4658      	mov	r0, fp
 800568a:	4661      	mov	r1, ip
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f04f 0400 	mov.w	r4, #0
 8005694:	461a      	mov	r2, r3
 8005696:	4623      	mov	r3, r4
 8005698:	f7fa fdbe 	bl	8000218 <__aeabi_uldivmod>
 800569c:	4603      	mov	r3, r0
 800569e:	460c      	mov	r4, r1
 80056a0:	61fb      	str	r3, [r7, #28]
            break;
 80056a2:	e002      	b.n	80056aa <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	76fb      	strb	r3, [r7, #27]
            break;
 80056a8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b0:	d309      	bcc.n	80056c6 <UART_SetConfig+0xb56>
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b8:	d205      	bcs.n	80056c6 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	60da      	str	r2, [r3, #12]
 80056c2:	f000 bc18 	b.w	8005ef6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	76fb      	strb	r3, [r7, #27]
 80056ca:	f000 bc14 	b.w	8005ef6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d6:	f040 8204 	bne.w	8005ae2 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 80056da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056de:	2b08      	cmp	r3, #8
 80056e0:	f200 81df 	bhi.w	8005aa2 <UART_SetConfig+0xf32>
 80056e4:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <UART_SetConfig+0xb7c>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005711 	.word	0x08005711
 80056f0:	080057c9 	.word	0x080057c9
 80056f4:	08005881 	.word	0x08005881
 80056f8:	08005aa3 	.word	0x08005aa3
 80056fc:	08005929 	.word	0x08005929
 8005700:	08005aa3 	.word	0x08005aa3
 8005704:	08005aa3 	.word	0x08005aa3
 8005708:	08005aa3 	.word	0x08005aa3
 800570c:	080059e1 	.word	0x080059e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005710:	f7fd fb10 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8005714:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	2b00      	cmp	r3, #0
 800571c:	d044      	beq.n	80057a8 <UART_SetConfig+0xc38>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b01      	cmp	r3, #1
 8005724:	d03e      	beq.n	80057a4 <UART_SetConfig+0xc34>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	2b02      	cmp	r3, #2
 800572c:	d038      	beq.n	80057a0 <UART_SetConfig+0xc30>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	2b03      	cmp	r3, #3
 8005734:	d032      	beq.n	800579c <UART_SetConfig+0xc2c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	2b04      	cmp	r3, #4
 800573c:	d02c      	beq.n	8005798 <UART_SetConfig+0xc28>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b05      	cmp	r3, #5
 8005744:	d026      	beq.n	8005794 <UART_SetConfig+0xc24>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	2b06      	cmp	r3, #6
 800574c:	d020      	beq.n	8005790 <UART_SetConfig+0xc20>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b07      	cmp	r3, #7
 8005754:	d01a      	beq.n	800578c <UART_SetConfig+0xc1c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b08      	cmp	r3, #8
 800575c:	d014      	beq.n	8005788 <UART_SetConfig+0xc18>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	2b09      	cmp	r3, #9
 8005764:	d00e      	beq.n	8005784 <UART_SetConfig+0xc14>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b0a      	cmp	r3, #10
 800576c:	d008      	beq.n	8005780 <UART_SetConfig+0xc10>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b0b      	cmp	r3, #11
 8005774:	d102      	bne.n	800577c <UART_SetConfig+0xc0c>
 8005776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800577a:	e016      	b.n	80057aa <UART_SetConfig+0xc3a>
 800577c:	2301      	movs	r3, #1
 800577e:	e014      	b.n	80057aa <UART_SetConfig+0xc3a>
 8005780:	2380      	movs	r3, #128	; 0x80
 8005782:	e012      	b.n	80057aa <UART_SetConfig+0xc3a>
 8005784:	2340      	movs	r3, #64	; 0x40
 8005786:	e010      	b.n	80057aa <UART_SetConfig+0xc3a>
 8005788:	2320      	movs	r3, #32
 800578a:	e00e      	b.n	80057aa <UART_SetConfig+0xc3a>
 800578c:	2310      	movs	r3, #16
 800578e:	e00c      	b.n	80057aa <UART_SetConfig+0xc3a>
 8005790:	230c      	movs	r3, #12
 8005792:	e00a      	b.n	80057aa <UART_SetConfig+0xc3a>
 8005794:	230a      	movs	r3, #10
 8005796:	e008      	b.n	80057aa <UART_SetConfig+0xc3a>
 8005798:	2308      	movs	r3, #8
 800579a:	e006      	b.n	80057aa <UART_SetConfig+0xc3a>
 800579c:	2306      	movs	r3, #6
 800579e:	e004      	b.n	80057aa <UART_SetConfig+0xc3a>
 80057a0:	2304      	movs	r3, #4
 80057a2:	e002      	b.n	80057aa <UART_SetConfig+0xc3a>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e000      	b.n	80057aa <UART_SetConfig+0xc3a>
 80057a8:	2301      	movs	r3, #1
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	005a      	lsls	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	441a      	add	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	61fb      	str	r3, [r7, #28]
        break;
 80057c6:	e16f      	b.n	8005aa8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c8:	f7fd faca 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 80057cc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d044      	beq.n	8005860 <UART_SetConfig+0xcf0>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d03e      	beq.n	800585c <UART_SetConfig+0xcec>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d038      	beq.n	8005858 <UART_SetConfig+0xce8>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d032      	beq.n	8005854 <UART_SetConfig+0xce4>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d02c      	beq.n	8005850 <UART_SetConfig+0xce0>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d026      	beq.n	800584c <UART_SetConfig+0xcdc>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	2b06      	cmp	r3, #6
 8005804:	d020      	beq.n	8005848 <UART_SetConfig+0xcd8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b07      	cmp	r3, #7
 800580c:	d01a      	beq.n	8005844 <UART_SetConfig+0xcd4>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	2b08      	cmp	r3, #8
 8005814:	d014      	beq.n	8005840 <UART_SetConfig+0xcd0>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b09      	cmp	r3, #9
 800581c:	d00e      	beq.n	800583c <UART_SetConfig+0xccc>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b0a      	cmp	r3, #10
 8005824:	d008      	beq.n	8005838 <UART_SetConfig+0xcc8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b0b      	cmp	r3, #11
 800582c:	d102      	bne.n	8005834 <UART_SetConfig+0xcc4>
 800582e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005832:	e016      	b.n	8005862 <UART_SetConfig+0xcf2>
 8005834:	2301      	movs	r3, #1
 8005836:	e014      	b.n	8005862 <UART_SetConfig+0xcf2>
 8005838:	2380      	movs	r3, #128	; 0x80
 800583a:	e012      	b.n	8005862 <UART_SetConfig+0xcf2>
 800583c:	2340      	movs	r3, #64	; 0x40
 800583e:	e010      	b.n	8005862 <UART_SetConfig+0xcf2>
 8005840:	2320      	movs	r3, #32
 8005842:	e00e      	b.n	8005862 <UART_SetConfig+0xcf2>
 8005844:	2310      	movs	r3, #16
 8005846:	e00c      	b.n	8005862 <UART_SetConfig+0xcf2>
 8005848:	230c      	movs	r3, #12
 800584a:	e00a      	b.n	8005862 <UART_SetConfig+0xcf2>
 800584c:	230a      	movs	r3, #10
 800584e:	e008      	b.n	8005862 <UART_SetConfig+0xcf2>
 8005850:	2308      	movs	r3, #8
 8005852:	e006      	b.n	8005862 <UART_SetConfig+0xcf2>
 8005854:	2306      	movs	r3, #6
 8005856:	e004      	b.n	8005862 <UART_SetConfig+0xcf2>
 8005858:	2304      	movs	r3, #4
 800585a:	e002      	b.n	8005862 <UART_SetConfig+0xcf2>
 800585c:	2302      	movs	r3, #2
 800585e:	e000      	b.n	8005862 <UART_SetConfig+0xcf2>
 8005860:	2301      	movs	r3, #1
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	005a      	lsls	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	441a      	add	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	b29b      	uxth	r3, r3
 800587c:	61fb      	str	r3, [r7, #28]
        break;
 800587e:	e113      	b.n	8005aa8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	d043      	beq.n	8005910 <UART_SetConfig+0xda0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	2b01      	cmp	r3, #1
 800588e:	d03d      	beq.n	800590c <UART_SetConfig+0xd9c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	2b02      	cmp	r3, #2
 8005896:	d037      	beq.n	8005908 <UART_SetConfig+0xd98>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	2b03      	cmp	r3, #3
 800589e:	d031      	beq.n	8005904 <UART_SetConfig+0xd94>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d02b      	beq.n	8005900 <UART_SetConfig+0xd90>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	d025      	beq.n	80058fc <UART_SetConfig+0xd8c>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	2b06      	cmp	r3, #6
 80058b6:	d01f      	beq.n	80058f8 <UART_SetConfig+0xd88>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2b07      	cmp	r3, #7
 80058be:	d019      	beq.n	80058f4 <UART_SetConfig+0xd84>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d013      	beq.n	80058f0 <UART_SetConfig+0xd80>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	2b09      	cmp	r3, #9
 80058ce:	d00d      	beq.n	80058ec <UART_SetConfig+0xd7c>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	2b0a      	cmp	r3, #10
 80058d6:	d007      	beq.n	80058e8 <UART_SetConfig+0xd78>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	2b0b      	cmp	r3, #11
 80058de:	d101      	bne.n	80058e4 <UART_SetConfig+0xd74>
 80058e0:	4b8d      	ldr	r3, [pc, #564]	; (8005b18 <UART_SetConfig+0xfa8>)
 80058e2:	e016      	b.n	8005912 <UART_SetConfig+0xda2>
 80058e4:	4b8d      	ldr	r3, [pc, #564]	; (8005b1c <UART_SetConfig+0xfac>)
 80058e6:	e014      	b.n	8005912 <UART_SetConfig+0xda2>
 80058e8:	4b8d      	ldr	r3, [pc, #564]	; (8005b20 <UART_SetConfig+0xfb0>)
 80058ea:	e012      	b.n	8005912 <UART_SetConfig+0xda2>
 80058ec:	4b8d      	ldr	r3, [pc, #564]	; (8005b24 <UART_SetConfig+0xfb4>)
 80058ee:	e010      	b.n	8005912 <UART_SetConfig+0xda2>
 80058f0:	4b8d      	ldr	r3, [pc, #564]	; (8005b28 <UART_SetConfig+0xfb8>)
 80058f2:	e00e      	b.n	8005912 <UART_SetConfig+0xda2>
 80058f4:	4b8d      	ldr	r3, [pc, #564]	; (8005b2c <UART_SetConfig+0xfbc>)
 80058f6:	e00c      	b.n	8005912 <UART_SetConfig+0xda2>
 80058f8:	4b8d      	ldr	r3, [pc, #564]	; (8005b30 <UART_SetConfig+0xfc0>)
 80058fa:	e00a      	b.n	8005912 <UART_SetConfig+0xda2>
 80058fc:	4b8d      	ldr	r3, [pc, #564]	; (8005b34 <UART_SetConfig+0xfc4>)
 80058fe:	e008      	b.n	8005912 <UART_SetConfig+0xda2>
 8005900:	4b8d      	ldr	r3, [pc, #564]	; (8005b38 <UART_SetConfig+0xfc8>)
 8005902:	e006      	b.n	8005912 <UART_SetConfig+0xda2>
 8005904:	4b8d      	ldr	r3, [pc, #564]	; (8005b3c <UART_SetConfig+0xfcc>)
 8005906:	e004      	b.n	8005912 <UART_SetConfig+0xda2>
 8005908:	4b8d      	ldr	r3, [pc, #564]	; (8005b40 <UART_SetConfig+0xfd0>)
 800590a:	e002      	b.n	8005912 <UART_SetConfig+0xda2>
 800590c:	4b8d      	ldr	r3, [pc, #564]	; (8005b44 <UART_SetConfig+0xfd4>)
 800590e:	e000      	b.n	8005912 <UART_SetConfig+0xda2>
 8005910:	4b82      	ldr	r3, [pc, #520]	; (8005b1c <UART_SetConfig+0xfac>)
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6852      	ldr	r2, [r2, #4]
 8005916:	0852      	lsrs	r2, r2, #1
 8005918:	441a      	add	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005922:	b29b      	uxth	r3, r3
 8005924:	61fb      	str	r3, [r7, #28]
        break;
 8005926:	e0bf      	b.n	8005aa8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005928:	f7fd f996 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 800592c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	2b00      	cmp	r3, #0
 8005934:	d044      	beq.n	80059c0 <UART_SetConfig+0xe50>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	2b01      	cmp	r3, #1
 800593c:	d03e      	beq.n	80059bc <UART_SetConfig+0xe4c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	2b02      	cmp	r3, #2
 8005944:	d038      	beq.n	80059b8 <UART_SetConfig+0xe48>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	2b03      	cmp	r3, #3
 800594c:	d032      	beq.n	80059b4 <UART_SetConfig+0xe44>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	2b04      	cmp	r3, #4
 8005954:	d02c      	beq.n	80059b0 <UART_SetConfig+0xe40>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b05      	cmp	r3, #5
 800595c:	d026      	beq.n	80059ac <UART_SetConfig+0xe3c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	2b06      	cmp	r3, #6
 8005964:	d020      	beq.n	80059a8 <UART_SetConfig+0xe38>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b07      	cmp	r3, #7
 800596c:	d01a      	beq.n	80059a4 <UART_SetConfig+0xe34>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b08      	cmp	r3, #8
 8005974:	d014      	beq.n	80059a0 <UART_SetConfig+0xe30>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b09      	cmp	r3, #9
 800597c:	d00e      	beq.n	800599c <UART_SetConfig+0xe2c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b0a      	cmp	r3, #10
 8005984:	d008      	beq.n	8005998 <UART_SetConfig+0xe28>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b0b      	cmp	r3, #11
 800598c:	d102      	bne.n	8005994 <UART_SetConfig+0xe24>
 800598e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005992:	e016      	b.n	80059c2 <UART_SetConfig+0xe52>
 8005994:	2301      	movs	r3, #1
 8005996:	e014      	b.n	80059c2 <UART_SetConfig+0xe52>
 8005998:	2380      	movs	r3, #128	; 0x80
 800599a:	e012      	b.n	80059c2 <UART_SetConfig+0xe52>
 800599c:	2340      	movs	r3, #64	; 0x40
 800599e:	e010      	b.n	80059c2 <UART_SetConfig+0xe52>
 80059a0:	2320      	movs	r3, #32
 80059a2:	e00e      	b.n	80059c2 <UART_SetConfig+0xe52>
 80059a4:	2310      	movs	r3, #16
 80059a6:	e00c      	b.n	80059c2 <UART_SetConfig+0xe52>
 80059a8:	230c      	movs	r3, #12
 80059aa:	e00a      	b.n	80059c2 <UART_SetConfig+0xe52>
 80059ac:	230a      	movs	r3, #10
 80059ae:	e008      	b.n	80059c2 <UART_SetConfig+0xe52>
 80059b0:	2308      	movs	r3, #8
 80059b2:	e006      	b.n	80059c2 <UART_SetConfig+0xe52>
 80059b4:	2306      	movs	r3, #6
 80059b6:	e004      	b.n	80059c2 <UART_SetConfig+0xe52>
 80059b8:	2304      	movs	r3, #4
 80059ba:	e002      	b.n	80059c2 <UART_SetConfig+0xe52>
 80059bc:	2302      	movs	r3, #2
 80059be:	e000      	b.n	80059c2 <UART_SetConfig+0xe52>
 80059c0:	2301      	movs	r3, #1
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c8:	005a      	lsls	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	441a      	add	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059da:	b29b      	uxth	r3, r3
 80059dc:	61fb      	str	r3, [r7, #28]
        break;
 80059de:	e063      	b.n	8005aa8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d04f      	beq.n	8005a88 <UART_SetConfig+0xf18>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d048      	beq.n	8005a82 <UART_SetConfig+0xf12>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d041      	beq.n	8005a7c <UART_SetConfig+0xf0c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d03a      	beq.n	8005a76 <UART_SetConfig+0xf06>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d033      	beq.n	8005a70 <UART_SetConfig+0xf00>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	2b05      	cmp	r3, #5
 8005a0e:	d02c      	beq.n	8005a6a <UART_SetConfig+0xefa>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	2b06      	cmp	r3, #6
 8005a16:	d025      	beq.n	8005a64 <UART_SetConfig+0xef4>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b07      	cmp	r3, #7
 8005a1e:	d01e      	beq.n	8005a5e <UART_SetConfig+0xeee>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d017      	beq.n	8005a58 <UART_SetConfig+0xee8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b09      	cmp	r3, #9
 8005a2e:	d010      	beq.n	8005a52 <UART_SetConfig+0xee2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2b0a      	cmp	r3, #10
 8005a36:	d009      	beq.n	8005a4c <UART_SetConfig+0xedc>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b0b      	cmp	r3, #11
 8005a3e:	d102      	bne.n	8005a46 <UART_SetConfig+0xed6>
 8005a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a44:	e022      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a4a:	e01f      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a50:	e01c      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a56:	e019      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a5c:	e016      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a62:	e013      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a64:	f241 5354 	movw	r3, #5460	; 0x1554
 8005a68:	e010      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a6a:	f641 1398 	movw	r3, #6552	; 0x1998
 8005a6e:	e00d      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a74:	e00a      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a76:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005a7a:	e007      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a80:	e004      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a86:	e001      	b.n	8005a8c <UART_SetConfig+0xf1c>
 8005a88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6852      	ldr	r2, [r2, #4]
 8005a90:	0852      	lsrs	r2, r2, #1
 8005a92:	441a      	add	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	61fb      	str	r3, [r7, #28]
        break;
 8005aa0:	e002      	b.n	8005aa8 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	76fb      	strb	r3, [r7, #27]
        break;
 8005aa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	2b0f      	cmp	r3, #15
 8005aac:	d916      	bls.n	8005adc <UART_SetConfig+0xf6c>
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab4:	d212      	bcs.n	8005adc <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f023 030f 	bic.w	r3, r3, #15
 8005abe:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	89fb      	ldrh	r3, [r7, #14]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	89fa      	ldrh	r2, [r7, #14]
 8005ad8:	60da      	str	r2, [r3, #12]
 8005ada:	e20c      	b.n	8005ef6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	76fb      	strb	r3, [r7, #27]
 8005ae0:	e209      	b.n	8005ef6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8005ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	f200 81f4 	bhi.w	8005ed4 <UART_SetConfig+0x1364>
 8005aec:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <UART_SetConfig+0xf84>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b49 	.word	0x08005b49
 8005af8:	08005bff 	.word	0x08005bff
 8005afc:	08005cb5 	.word	0x08005cb5
 8005b00:	08005ed5 	.word	0x08005ed5
 8005b04:	08005d5f 	.word	0x08005d5f
 8005b08:	08005ed5 	.word	0x08005ed5
 8005b0c:	08005ed5 	.word	0x08005ed5
 8005b10:	08005ed5 	.word	0x08005ed5
 8005b14:	08005e15 	.word	0x08005e15
 8005b18:	0001e848 	.word	0x0001e848
 8005b1c:	01e84800 	.word	0x01e84800
 8005b20:	0003d090 	.word	0x0003d090
 8005b24:	0007a120 	.word	0x0007a120
 8005b28:	000f4240 	.word	0x000f4240
 8005b2c:	001e8480 	.word	0x001e8480
 8005b30:	0028b0aa 	.word	0x0028b0aa
 8005b34:	0030d400 	.word	0x0030d400
 8005b38:	003d0900 	.word	0x003d0900
 8005b3c:	00516154 	.word	0x00516154
 8005b40:	007a1200 	.word	0x007a1200
 8005b44:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b48:	f7fd f8f4 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8005b4c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d044      	beq.n	8005be0 <UART_SetConfig+0x1070>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d03e      	beq.n	8005bdc <UART_SetConfig+0x106c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d038      	beq.n	8005bd8 <UART_SetConfig+0x1068>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d032      	beq.n	8005bd4 <UART_SetConfig+0x1064>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d02c      	beq.n	8005bd0 <UART_SetConfig+0x1060>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b05      	cmp	r3, #5
 8005b7c:	d026      	beq.n	8005bcc <UART_SetConfig+0x105c>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d020      	beq.n	8005bc8 <UART_SetConfig+0x1058>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	2b07      	cmp	r3, #7
 8005b8c:	d01a      	beq.n	8005bc4 <UART_SetConfig+0x1054>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d014      	beq.n	8005bc0 <UART_SetConfig+0x1050>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b09      	cmp	r3, #9
 8005b9c:	d00e      	beq.n	8005bbc <UART_SetConfig+0x104c>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b0a      	cmp	r3, #10
 8005ba4:	d008      	beq.n	8005bb8 <UART_SetConfig+0x1048>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b0b      	cmp	r3, #11
 8005bac:	d102      	bne.n	8005bb4 <UART_SetConfig+0x1044>
 8005bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bb2:	e016      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e014      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	e012      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005bbc:	2340      	movs	r3, #64	; 0x40
 8005bbe:	e010      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	e00e      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	e00c      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005bc8:	230c      	movs	r3, #12
 8005bca:	e00a      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005bcc:	230a      	movs	r3, #10
 8005bce:	e008      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	e006      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005bd4:	2306      	movs	r3, #6
 8005bd6:	e004      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	e002      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e000      	b.n	8005be2 <UART_SetConfig+0x1072>
 8005be0:	2301      	movs	r3, #1
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	085b      	lsrs	r3, r3, #1
 8005bee:	441a      	add	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	61fb      	str	r3, [r7, #28]
        break;
 8005bfc:	e16d      	b.n	8005eda <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bfe:	f7fd f8af 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 8005c02:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d044      	beq.n	8005c96 <UART_SetConfig+0x1126>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d03e      	beq.n	8005c92 <UART_SetConfig+0x1122>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d038      	beq.n	8005c8e <UART_SetConfig+0x111e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d032      	beq.n	8005c8a <UART_SetConfig+0x111a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d02c      	beq.n	8005c86 <UART_SetConfig+0x1116>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	d026      	beq.n	8005c82 <UART_SetConfig+0x1112>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	2b06      	cmp	r3, #6
 8005c3a:	d020      	beq.n	8005c7e <UART_SetConfig+0x110e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	2b07      	cmp	r3, #7
 8005c42:	d01a      	beq.n	8005c7a <UART_SetConfig+0x110a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d014      	beq.n	8005c76 <UART_SetConfig+0x1106>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2b09      	cmp	r3, #9
 8005c52:	d00e      	beq.n	8005c72 <UART_SetConfig+0x1102>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2b0a      	cmp	r3, #10
 8005c5a:	d008      	beq.n	8005c6e <UART_SetConfig+0x10fe>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	2b0b      	cmp	r3, #11
 8005c62:	d102      	bne.n	8005c6a <UART_SetConfig+0x10fa>
 8005c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c68:	e016      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e014      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	e012      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c72:	2340      	movs	r3, #64	; 0x40
 8005c74:	e010      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c76:	2320      	movs	r3, #32
 8005c78:	e00e      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	e00c      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	e00a      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c82:	230a      	movs	r3, #10
 8005c84:	e008      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c86:	2308      	movs	r3, #8
 8005c88:	e006      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c8a:	2306      	movs	r3, #6
 8005c8c:	e004      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c8e:	2304      	movs	r3, #4
 8005c90:	e002      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e000      	b.n	8005c98 <UART_SetConfig+0x1128>
 8005c96:	2301      	movs	r3, #1
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	441a      	add	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	61fb      	str	r3, [r7, #28]
        break;
 8005cb2:	e112      	b.n	8005eda <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d044      	beq.n	8005d46 <UART_SetConfig+0x11d6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d03e      	beq.n	8005d42 <UART_SetConfig+0x11d2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d038      	beq.n	8005d3e <UART_SetConfig+0x11ce>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d032      	beq.n	8005d3a <UART_SetConfig+0x11ca>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d02c      	beq.n	8005d36 <UART_SetConfig+0x11c6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b05      	cmp	r3, #5
 8005ce2:	d026      	beq.n	8005d32 <UART_SetConfig+0x11c2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b06      	cmp	r3, #6
 8005cea:	d020      	beq.n	8005d2e <UART_SetConfig+0x11be>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b07      	cmp	r3, #7
 8005cf2:	d01a      	beq.n	8005d2a <UART_SetConfig+0x11ba>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d014      	beq.n	8005d26 <UART_SetConfig+0x11b6>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b09      	cmp	r3, #9
 8005d02:	d00e      	beq.n	8005d22 <UART_SetConfig+0x11b2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2b0a      	cmp	r3, #10
 8005d0a:	d008      	beq.n	8005d1e <UART_SetConfig+0x11ae>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b0b      	cmp	r3, #11
 8005d12:	d102      	bne.n	8005d1a <UART_SetConfig+0x11aa>
 8005d14:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005d18:	e016      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d1a:	4b81      	ldr	r3, [pc, #516]	; (8005f20 <UART_SetConfig+0x13b0>)
 8005d1c:	e014      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d1e:	4b81      	ldr	r3, [pc, #516]	; (8005f24 <UART_SetConfig+0x13b4>)
 8005d20:	e012      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d22:	4b81      	ldr	r3, [pc, #516]	; (8005f28 <UART_SetConfig+0x13b8>)
 8005d24:	e010      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d26:	4b81      	ldr	r3, [pc, #516]	; (8005f2c <UART_SetConfig+0x13bc>)
 8005d28:	e00e      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d2a:	4b81      	ldr	r3, [pc, #516]	; (8005f30 <UART_SetConfig+0x13c0>)
 8005d2c:	e00c      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d2e:	4b81      	ldr	r3, [pc, #516]	; (8005f34 <UART_SetConfig+0x13c4>)
 8005d30:	e00a      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d32:	4b81      	ldr	r3, [pc, #516]	; (8005f38 <UART_SetConfig+0x13c8>)
 8005d34:	e008      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d36:	4b81      	ldr	r3, [pc, #516]	; (8005f3c <UART_SetConfig+0x13cc>)
 8005d38:	e006      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d3a:	4b81      	ldr	r3, [pc, #516]	; (8005f40 <UART_SetConfig+0x13d0>)
 8005d3c:	e004      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d3e:	4b81      	ldr	r3, [pc, #516]	; (8005f44 <UART_SetConfig+0x13d4>)
 8005d40:	e002      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d42:	4b81      	ldr	r3, [pc, #516]	; (8005f48 <UART_SetConfig+0x13d8>)
 8005d44:	e000      	b.n	8005d48 <UART_SetConfig+0x11d8>
 8005d46:	4b76      	ldr	r3, [pc, #472]	; (8005f20 <UART_SetConfig+0x13b0>)
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6852      	ldr	r2, [r2, #4]
 8005d4c:	0852      	lsrs	r2, r2, #1
 8005d4e:	441a      	add	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	61fb      	str	r3, [r7, #28]
        break;
 8005d5c:	e0bd      	b.n	8005eda <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d5e:	f7fc ff7b 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8005d62:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d044      	beq.n	8005df6 <UART_SetConfig+0x1286>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d03e      	beq.n	8005df2 <UART_SetConfig+0x1282>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d038      	beq.n	8005dee <UART_SetConfig+0x127e>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d032      	beq.n	8005dea <UART_SetConfig+0x127a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d02c      	beq.n	8005de6 <UART_SetConfig+0x1276>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2b05      	cmp	r3, #5
 8005d92:	d026      	beq.n	8005de2 <UART_SetConfig+0x1272>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b06      	cmp	r3, #6
 8005d9a:	d020      	beq.n	8005dde <UART_SetConfig+0x126e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	2b07      	cmp	r3, #7
 8005da2:	d01a      	beq.n	8005dda <UART_SetConfig+0x126a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d014      	beq.n	8005dd6 <UART_SetConfig+0x1266>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b09      	cmp	r3, #9
 8005db2:	d00e      	beq.n	8005dd2 <UART_SetConfig+0x1262>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b0a      	cmp	r3, #10
 8005dba:	d008      	beq.n	8005dce <UART_SetConfig+0x125e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b0b      	cmp	r3, #11
 8005dc2:	d102      	bne.n	8005dca <UART_SetConfig+0x125a>
 8005dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dc8:	e016      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e014      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005dce:	2380      	movs	r3, #128	; 0x80
 8005dd0:	e012      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005dd2:	2340      	movs	r3, #64	; 0x40
 8005dd4:	e010      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005dd6:	2320      	movs	r3, #32
 8005dd8:	e00e      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005dda:	2310      	movs	r3, #16
 8005ddc:	e00c      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005dde:	230c      	movs	r3, #12
 8005de0:	e00a      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005de2:	230a      	movs	r3, #10
 8005de4:	e008      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005de6:	2308      	movs	r3, #8
 8005de8:	e006      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005dea:	2306      	movs	r3, #6
 8005dec:	e004      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005dee:	2304      	movs	r3, #4
 8005df0:	e002      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e000      	b.n	8005df8 <UART_SetConfig+0x1288>
 8005df6:	2301      	movs	r3, #1
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	61fb      	str	r3, [r7, #28]
        break;
 8005e12:	e062      	b.n	8005eda <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d04e      	beq.n	8005eba <UART_SetConfig+0x134a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d047      	beq.n	8005eb4 <UART_SetConfig+0x1344>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d040      	beq.n	8005eae <UART_SetConfig+0x133e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d039      	beq.n	8005ea8 <UART_SetConfig+0x1338>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d032      	beq.n	8005ea2 <UART_SetConfig+0x1332>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b05      	cmp	r3, #5
 8005e42:	d02b      	beq.n	8005e9c <UART_SetConfig+0x132c>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	2b06      	cmp	r3, #6
 8005e4a:	d024      	beq.n	8005e96 <UART_SetConfig+0x1326>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b07      	cmp	r3, #7
 8005e52:	d01d      	beq.n	8005e90 <UART_SetConfig+0x1320>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d016      	beq.n	8005e8a <UART_SetConfig+0x131a>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b09      	cmp	r3, #9
 8005e62:	d00f      	beq.n	8005e84 <UART_SetConfig+0x1314>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b0a      	cmp	r3, #10
 8005e6a:	d008      	beq.n	8005e7e <UART_SetConfig+0x130e>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b0b      	cmp	r3, #11
 8005e72:	d101      	bne.n	8005e78 <UART_SetConfig+0x1308>
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	e022      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e7c:	e01f      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e82:	e01c      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e88:	e019      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e8e:	e016      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e94:	e013      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005e96:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005e9a:	e010      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005e9c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005ea0:	e00d      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ea6:	e00a      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005ea8:	f241 5355 	movw	r3, #5461	; 0x1555
 8005eac:	e007      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005eb2:	e004      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005eb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005eb8:	e001      	b.n	8005ebe <UART_SetConfig+0x134e>
 8005eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6852      	ldr	r2, [r2, #4]
 8005ec2:	0852      	lsrs	r2, r2, #1
 8005ec4:	441a      	add	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	61fb      	str	r3, [r7, #28]
        break;
 8005ed2:	e002      	b.n	8005eda <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	76fb      	strb	r3, [r7, #27]
        break;
 8005ed8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	2b0f      	cmp	r3, #15
 8005ede:	d908      	bls.n	8005ef2 <UART_SetConfig+0x1382>
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee6:	d204      	bcs.n	8005ef2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	60da      	str	r2, [r3, #12]
 8005ef0:	e001      	b.n	8005ef6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005f12:	7efb      	ldrb	r3, [r7, #27]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3728      	adds	r7, #40	; 0x28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005f1e:	bf00      	nop
 8005f20:	00f42400 	.word	0x00f42400
 8005f24:	0001e848 	.word	0x0001e848
 8005f28:	0003d090 	.word	0x0003d090
 8005f2c:	0007a120 	.word	0x0007a120
 8005f30:	000f4240 	.word	0x000f4240
 8005f34:	00145855 	.word	0x00145855
 8005f38:	00186a00 	.word	0x00186a00
 8005f3c:	001e8480 	.word	0x001e8480
 8005f40:	0028b0aa 	.word	0x0028b0aa
 8005f44:	003d0900 	.word	0x003d0900
 8005f48:	007a1200 	.word	0x007a1200

08005f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01a      	beq.n	8006062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604a:	d10a      	bne.n	8006062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	605a      	str	r2, [r3, #4]
  }
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af02      	add	r7, sp, #8
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80060a0:	f7fb f87e 	bl	80011a0 <HAL_GetTick>
 80060a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d10e      	bne.n	80060d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f82c 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e022      	b.n	8006118 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b04      	cmp	r3, #4
 80060de:	d10e      	bne.n	80060fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f816 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e00c      	b.n	8006118 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006130:	e02c      	b.n	800618c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d028      	beq.n	800618c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613a:	f7fb f831 	bl	80011a0 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <UART_WaitOnFlagUntilTimeout+0x30>
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d11d      	bne.n	800618c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800615e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0201 	bic.w	r2, r2, #1
 800616e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2220      	movs	r2, #32
 8006174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e00f      	b.n	80061ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69da      	ldr	r2, [r3, #28]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	429a      	cmp	r2, r3
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d0c3      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d101      	bne.n	80061ca <HAL_UARTEx_DisableFifoMode+0x16>
 80061c6:	2302      	movs	r3, #2
 80061c8:	e027      	b.n	800621a <HAL_UARTEx_DisableFifoMode+0x66>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2224      	movs	r2, #36	; 0x24
 80061d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0201 	bic.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800623a:	2302      	movs	r3, #2
 800623c:	e02d      	b.n	800629a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2224      	movs	r2, #36	; 0x24
 800624a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f850 	bl	8006320 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e02d      	b.n	8006316 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2224      	movs	r2, #36	; 0x24
 80062c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0201 	bic.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f812 	bl	8006320 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b089      	sub	sp, #36	; 0x24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006328:	4a2f      	ldr	r2, [pc, #188]	; (80063e8 <UARTEx_SetNbDataToProcess+0xc8>)
 800632a:	f107 0314 	add.w	r3, r7, #20
 800632e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006332:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006336:	4a2d      	ldr	r2, [pc, #180]	; (80063ec <UARTEx_SetNbDataToProcess+0xcc>)
 8006338:	f107 030c 	add.w	r3, r7, #12
 800633c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006340:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006348:	2b00      	cmp	r3, #0
 800634a:	d108      	bne.n	800635e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800635c:	e03d      	b.n	80063da <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800635e:	2308      	movs	r3, #8
 8006360:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006362:	2308      	movs	r3, #8
 8006364:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	0e5b      	lsrs	r3, r3, #25
 800636e:	b2db      	uxtb	r3, r3
 8006370:	f003 0307 	and.w	r3, r3, #7
 8006374:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	0f5b      	lsrs	r3, r3, #29
 800637e:	b2db      	uxtb	r3, r3
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006386:	7fbb      	ldrb	r3, [r7, #30]
 8006388:	7f3a      	ldrb	r2, [r7, #28]
 800638a:	f107 0120 	add.w	r1, r7, #32
 800638e:	440a      	add	r2, r1
 8006390:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006394:	fb02 f303 	mul.w	r3, r2, r3
 8006398:	7f3a      	ldrb	r2, [r7, #28]
 800639a:	f107 0120 	add.w	r1, r7, #32
 800639e:	440a      	add	r2, r1
 80063a0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80063a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80063b0:	7ffb      	ldrb	r3, [r7, #31]
 80063b2:	7f7a      	ldrb	r2, [r7, #29]
 80063b4:	f107 0120 	add.w	r1, r7, #32
 80063b8:	440a      	add	r2, r1
 80063ba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80063be:	fb02 f303 	mul.w	r3, r2, r3
 80063c2:	7f7a      	ldrb	r2, [r7, #29]
 80063c4:	f107 0120 	add.w	r1, r7, #32
 80063c8:	440a      	add	r2, r1
 80063ca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80063ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063da:	bf00      	nop
 80063dc:	3724      	adds	r7, #36	; 0x24
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	0800abd4 	.word	0x0800abd4
 80063ec:	0800abdc 	.word	0x0800abdc

080063f0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
 
if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80063f4:	4907      	ldr	r1, [pc, #28]	; (8006414 <MX_FATFS_Init+0x24>)
 80063f6:	4808      	ldr	r0, [pc, #32]	; (8006418 <MX_FATFS_Init+0x28>)
 80063f8:	f004 fb86 	bl	800ab08 <FATFS_LinkDriver>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8006402:	f04f 33ff 	mov.w	r3, #4294967295
 8006406:	e003      	b.n	8006410 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006408:	4b04      	ldr	r3, [pc, #16]	; (800641c <MX_FATFS_Init+0x2c>)
 800640a:	2201      	movs	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800640e:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8006410:	4618      	mov	r0, r3
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20000c90 	.word	0x20000c90
 8006418:	20000010 	.word	0x20000010
 800641c:	20000041 	.word	0x20000041

08006420 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006424:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006426:	4618      	mov	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <MY_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t MY_SD_Init(uint32_t Instance)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <MY_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006442:	f06f 0301 	mvn.w	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	e010      	b.n	800646c <MY_SD_Init+0x3c>
  } /* Configure IO functionalities for SD pin */
  else if(SD_IO_Init() != BSP_ERROR_NONE)
 800644a:	f000 fa9b 	bl	8006984 <SD_IO_Init>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <MY_SD_Init+0x2c>
  {
    ret = BSP_ERROR_NO_INIT;
 8006454:	f04f 33ff 	mov.w	r3, #4294967295
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	e007      	b.n	800646c <MY_SD_Init+0x3c>
  }
  else
  {
    /* SD initialized and set to SPI mode properly */
    if(SD_GoIdleState() != BSP_ERROR_NONE)
 800645c:	f000 ff74 	bl	8007348 <SD_GoIdleState>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <MY_SD_Init+0x3c>
    {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006466:	f06f 0305 	mvn.w	r3, #5
 800646a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800646c:	68fb      	ldr	r3, [r7, #12]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <MY_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t MY_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006486:	2300      	movs	r3, #0
 8006488:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	61bb      	str	r3, [r7, #24]
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <MY_SD_ReadBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006494:	f06f 0301 	mvn.w	r3, #1
 8006498:	61fb      	str	r3, [r7, #28]
 800649a:	e0b2      	b.n	8006602 <MY_SD_ReadBlocks+0x18a>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800649c:	2300      	movs	r3, #0
 800649e:	22ff      	movs	r2, #255	; 0xff
 80064a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064a4:	2010      	movs	r0, #16
 80064a6:	f000 fdd1 	bl	800704c <SD_SendCmd>
 80064aa:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 80064ac:	2001      	movs	r0, #1
 80064ae:	f000 fab5 	bl	8006a1c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80064b2:	f107 0313 	add.w	r3, r7, #19
 80064b6:	2101      	movs	r1, #1
 80064b8:	4618      	mov	r0, r3
 80064ba:	f001 f915 	bl	80076e8 <BSP_SPI2_Send>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <MY_SD_ReadBlocks+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80064c4:	f06f 0303 	mvn.w	r3, #3
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	e09a      	b.n	8006602 <MY_SD_ReadBlocks+0x18a>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00e      	beq.n	80064f2 <MY_SD_ReadBlocks+0x7a>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 80064d4:	2001      	movs	r0, #1
 80064d6:	f000 faa1 	bl	8006a1c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80064da:	f107 0313 	add.w	r3, r7, #19
 80064de:	2101      	movs	r1, #1
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 f901 	bl	80076e8 <BSP_SPI2_Send>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <MY_SD_ReadBlocks+0x7a>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80064ec:	f06f 0303 	mvn.w	r3, #3
 80064f0:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f040 8084 	bne.w	8006602 <MY_SD_ReadBlocks+0x18a>
        /* Data transfer */
        do
        {
          /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
          /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U: MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	441a      	add	r2, r3
 8006500:	4b42      	ldr	r3, [pc, #264]	; (800660c <MY_SD_ReadBlocks+0x194>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <MY_SD_ReadBlocks+0x94>
 8006508:	2301      	movs	r3, #1
 800650a:	e001      	b.n	8006510 <MY_SD_ReadBlocks+0x98>
 800650c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006510:	fb02 f103 	mul.w	r1, r2, r3
 8006514:	2300      	movs	r3, #0
 8006516:	22ff      	movs	r2, #255	; 0xff
 8006518:	2011      	movs	r0, #17
 800651a:	f000 fd97 	bl	800704c <SD_SendCmd>
 800651e:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00f      	beq.n	8006548 <MY_SD_ReadBlocks+0xd0>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006528:	2001      	movs	r0, #1
 800652a:	f000 fa77 	bl	8006a1c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800652e:	f107 0313 	add.w	r3, r7, #19
 8006532:	2101      	movs	r1, #1
 8006534:	4618      	mov	r0, r3
 8006536:	f001 f8d7 	bl	80076e8 <BSP_SPI2_Send>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <MY_SD_ReadBlocks+0xd0>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006540:	f06f 0303 	mvn.w	r3, #3
 8006544:	61fb      	str	r3, [r7, #28]
              break;
 8006546:	e05c      	b.n	8006602 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* Now look for the data token to signify the start of the data */
          if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006548:	20fe      	movs	r0, #254	; 0xfe
 800654a:	f001 f83b 	bl	80075c4 <SD_WaitData>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d12f      	bne.n	80065b4 <MY_SD_ReadBlocks+0x13c>
          {
            /* Read the SD block data : read NumByteToRead data */
            if(BUS_SPIx_Recv((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	4413      	add	r3, r2
 800655a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800655e:	4618      	mov	r0, r3
 8006560:	f001 f8de 	bl	8007720 <BSP_SPI2_Recv>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <MY_SD_ReadBlocks+0xfa>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 800656a:	f06f 0303 	mvn.w	r3, #3
 800656e:	61fb      	str	r3, [r7, #28]
              break;
 8006570:	e047      	b.n	8006602 <MY_SD_ReadBlocks+0x18a>
            }

            /* Set next read address*/
            offset += MY_SD_BLOCK_SIZE;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006578:	61bb      	str	r3, [r7, #24]
            BlocksNbr--;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	3b01      	subs	r3, #1
 800657e:	603b      	str	r3, [r7, #0]

            /* get CRC bytes (not really needed by us, but required by SD) */
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006580:	f107 0313 	add.w	r3, r7, #19
 8006584:	2101      	movs	r1, #1
 8006586:	4618      	mov	r0, r3
 8006588:	f001 f8ae 	bl	80076e8 <BSP_SPI2_Send>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <MY_SD_ReadBlocks+0x122>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006592:	f06f 0303 	mvn.w	r3, #3
 8006596:	61fb      	str	r3, [r7, #28]
              break;
 8006598:	e033      	b.n	8006602 <MY_SD_ReadBlocks+0x18a>
            }
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800659a:	f107 0313 	add.w	r3, r7, #19
 800659e:	2101      	movs	r1, #1
 80065a0:	4618      	mov	r0, r3
 80065a2:	f001 f8a1 	bl	80076e8 <BSP_SPI2_Send>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d013      	beq.n	80065d4 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80065ac:	f06f 0303 	mvn.w	r3, #3
 80065b0:	61fb      	str	r3, [r7, #28]
              break;
 80065b2:	e026      	b.n	8006602 <MY_SD_ReadBlocks+0x18a>
            }
          }
          else
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 80065b4:	2001      	movs	r0, #1
 80065b6:	f000 fa31 	bl	8006a1c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80065ba:	f107 0313 	add.w	r3, r7, #19
 80065be:	2101      	movs	r1, #1
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 f891 	bl	80076e8 <BSP_SPI2_Send>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80065cc:	f06f 0303 	mvn.w	r3, #3
 80065d0:	61fb      	str	r3, [r7, #28]
              break;
 80065d2:	e016      	b.n	8006602 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* End the command data read cycle */
          SD_IO_CSState(1);
 80065d4:	2001      	movs	r0, #1
 80065d6:	f000 fa21 	bl	8006a1c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80065da:	f107 0313 	add.w	r3, r7, #19
 80065de:	2101      	movs	r1, #1
 80065e0:	4618      	mov	r0, r3
 80065e2:	f001 f881 	bl	80076e8 <BSP_SPI2_Send>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <MY_SD_ReadBlocks+0x17c>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80065ec:	f06f 0303 	mvn.w	r3, #3
 80065f0:	61fb      	str	r3, [r7, #28]
            break;
 80065f2:	e006      	b.n	8006602 <MY_SD_ReadBlocks+0x18a>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <MY_SD_ReadBlocks+0x18a>
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f43f af7c 	beq.w	80064fa <MY_SD_ReadBlocks+0x82>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006602:	69fb      	ldr	r3, [r7, #28]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20000044 	.word	0x20000044

08006610 <MY_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t MY_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800661e:	2300      	movs	r3, #0
 8006620:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	61bb      	str	r3, [r7, #24]
  uint8_t tmp, data_response;

  if(Instance >= SD_INSTANCES_NBR)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <MY_SD_WriteBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800662c:	f06f 0301 	mvn.w	r3, #1
 8006630:	61fb      	str	r3, [r7, #28]
 8006632:	e0e8      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006634:	2300      	movs	r3, #0
 8006636:	22ff      	movs	r2, #255	; 0xff
 8006638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800663c:	2010      	movs	r0, #16
 800663e:	f000 fd05 	bl	800704c <SD_SendCmd>
 8006642:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 8006644:	2001      	movs	r0, #1
 8006646:	f000 f9e9 	bl	8006a1c <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 800664a:	23ff      	movs	r3, #255	; 0xff
 800664c:	74fb      	strb	r3, [r7, #19]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800664e:	f107 0313 	add.w	r3, r7, #19
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f001 f847 	bl	80076e8 <BSP_SPI2_Send>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <MY_SD_WriteBlocks+0x58>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006660:	f06f 0303 	mvn.w	r3, #3
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	e0ce      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <MY_SD_WriteBlocks+0x7e>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 8006670:	2001      	movs	r0, #1
 8006672:	f000 f9d3 	bl	8006a1c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006676:	f107 0313 	add.w	r3, r7, #19
 800667a:	2101      	movs	r1, #1
 800667c:	4618      	mov	r0, r3
 800667e:	f001 f833 	bl	80076e8 <BSP_SPI2_Send>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <MY_SD_WriteBlocks+0x7e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006688:	f06f 0303 	mvn.w	r3, #3
 800668c:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f040 80b8 	bne.w	8006806 <MY_SD_WriteBlocks+0x1f6>
        /* Data transfer */
        do
        {
          /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
          Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U : MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	441a      	add	r2, r3
 800669c:	4b5c      	ldr	r3, [pc, #368]	; (8006810 <MY_SD_WriteBlocks+0x200>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <MY_SD_WriteBlocks+0x98>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e001      	b.n	80066ac <MY_SD_WriteBlocks+0x9c>
 80066a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066ac:	fb02 f103 	mul.w	r1, r2, r3
 80066b0:	2300      	movs	r3, #0
 80066b2:	22ff      	movs	r2, #255	; 0xff
 80066b4:	2018      	movs	r0, #24
 80066b6:	f000 fcc9 	bl	800704c <SD_SendCmd>
 80066ba:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00f      	beq.n	80066e4 <MY_SD_WriteBlocks+0xd4>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 80066c4:	2001      	movs	r0, #1
 80066c6:	f000 f9a9 	bl	8006a1c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80066ca:	f107 0313 	add.w	r3, r7, #19
 80066ce:	2101      	movs	r1, #1
 80066d0:	4618      	mov	r0, r3
 80066d2:	f001 f809 	bl	80076e8 <BSP_SPI2_Send>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <MY_SD_WriteBlocks+0xd4>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80066dc:	f06f 0303 	mvn.w	r3, #3
 80066e0:	61fb      	str	r3, [r7, #28]
              break;
 80066e2:	e090      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          /* Send dummy byte for NWR timing : one byte between CMDWRITE and TOKEN */
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80066e4:	f107 0313 	add.w	r3, r7, #19
 80066e8:	2101      	movs	r1, #1
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fffc 	bl	80076e8 <BSP_SPI2_Send>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <MY_SD_WriteBlocks+0xee>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80066f6:	f06f 0303 	mvn.w	r3, #3
 80066fa:	61fb      	str	r3, [r7, #28]
            break;
 80066fc:	e083      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80066fe:	f107 0313 	add.w	r3, r7, #19
 8006702:	2101      	movs	r1, #1
 8006704:	4618      	mov	r0, r3
 8006706:	f000 ffef 	bl	80076e8 <BSP_SPI2_Send>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <MY_SD_WriteBlocks+0x108>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006710:	f06f 0303 	mvn.w	r3, #3
 8006714:	61fb      	str	r3, [r7, #28]
            break;
 8006716:	e076      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Send the data token to signify the start of the data */
          tmp = SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE;
 8006718:	23fe      	movs	r3, #254	; 0xfe
 800671a:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800671c:	f107 0313 	add.w	r3, r7, #19
 8006720:	2101      	movs	r1, #1
 8006722:	4618      	mov	r0, r3
 8006724:	f000 ffe0 	bl	80076e8 <BSP_SPI2_Send>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <MY_SD_WriteBlocks+0x126>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 800672e:	f06f 0303 	mvn.w	r3, #3
 8006732:	61fb      	str	r3, [r7, #28]
            break;
 8006734:	e067      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Write the block data to SD */
          if(BUS_SPIx_Send((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	4413      	add	r3, r2
 800673c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006740:	4618      	mov	r0, r3
 8006742:	f000 ffd1 	bl	80076e8 <BSP_SPI2_Send>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <MY_SD_WriteBlocks+0x144>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 800674c:	f06f 0303 	mvn.w	r3, #3
 8006750:	61fb      	str	r3, [r7, #28]
            break;
 8006752:	e058      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Set next write address */
          offset += MY_SD_BLOCK_SIZE;
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800675a:	61bb      	str	r3, [r7, #24]
          BlocksNbr--;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	3b01      	subs	r3, #1
 8006760:	603b      	str	r3, [r7, #0]

          /* get CRC bytes (not really needed by us, but required by SD) */
          tmp = SD_DUMMY_BYTE;
 8006762:	23ff      	movs	r3, #255	; 0xff
 8006764:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006766:	f107 0313 	add.w	r3, r7, #19
 800676a:	2101      	movs	r1, #1
 800676c:	4618      	mov	r0, r3
 800676e:	f000 ffbb 	bl	80076e8 <BSP_SPI2_Send>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <MY_SD_WriteBlocks+0x170>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006778:	f06f 0303 	mvn.w	r3, #3
 800677c:	61fb      	str	r3, [r7, #28]
            break;
 800677e:	e042      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006780:	f107 0313 	add.w	r3, r7, #19
 8006784:	2101      	movs	r1, #1
 8006786:	4618      	mov	r0, r3
 8006788:	f000 ffae 	bl	80076e8 <BSP_SPI2_Send>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <MY_SD_WriteBlocks+0x18a>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006792:	f06f 0303 	mvn.w	r3, #3
 8006796:	61fb      	str	r3, [r7, #28]
            break;
 8006798:	e035      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Read data response */
          if(SD_GetDataResponse(&data_response) != BSP_ERROR_NONE)
 800679a:	f107 0312 	add.w	r3, r7, #18
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fd6c 	bl	800727c <SD_GetDataResponse>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <MY_SD_WriteBlocks+0x1a2>
          {
            ret = BSP_ERROR_UNKNOWN_FAILURE;
 80067aa:	f06f 0305 	mvn.w	r3, #5
 80067ae:	61fb      	str	r3, [r7, #28]
            break;
 80067b0:	e029      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
          }

          if (data_response != (uint8_t)SD_DATA_OK)
 80067b2:	7cbb      	ldrb	r3, [r7, #18]
 80067b4:	2b05      	cmp	r3, #5
 80067b6:	d00f      	beq.n	80067d8 <MY_SD_WriteBlocks+0x1c8>
          {
            /* Set response value to failure */
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 80067b8:	2001      	movs	r0, #1
 80067ba:	f000 f92f 	bl	8006a1c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80067be:	f107 0313 	add.w	r3, r7, #19
 80067c2:	2101      	movs	r1, #1
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 ff8f 	bl	80076e8 <BSP_SPI2_Send>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <MY_SD_WriteBlocks+0x1c8>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80067d0:	f06f 0303 	mvn.w	r3, #3
 80067d4:	61fb      	str	r3, [r7, #28]
              break;
 80067d6:	e016      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          SD_IO_CSState(1);
 80067d8:	2001      	movs	r0, #1
 80067da:	f000 f91f 	bl	8006a1c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80067de:	f107 0313 	add.w	r3, r7, #19
 80067e2:	2101      	movs	r1, #1
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 ff7f 	bl	80076e8 <BSP_SPI2_Send>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <MY_SD_WriteBlocks+0x1e8>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80067f0:	f06f 0303 	mvn.w	r3, #3
 80067f4:	61fb      	str	r3, [r7, #28]
            break;
 80067f6:	e006      	b.n	8006806 <MY_SD_WriteBlocks+0x1f6>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <MY_SD_WriteBlocks+0x1f6>
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	2b00      	cmp	r3, #0
 8006802:	f43f af48 	beq.w	8006696 <MY_SD_WriteBlocks+0x86>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006806:	69fb      	ldr	r3, [r7, #28]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3720      	adds	r7, #32
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20000044 	.word	0x20000044

08006814 <MY_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t MY_SD_GetCardState(uint32_t Instance)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint32_t response;
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <MY_SD_GetCardState+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006822:	f06f 0301 	mvn.w	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e026      	b.n	8006878 <MY_SD_GetCardState+0x64>
  }
  else
  {
    /* Send CMD13 (SD_SEND_STATUS) to get SD status */
    response = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, (uint8_t)SD_ANSWER_R2_EXPECTED);
 800682a:	2302      	movs	r3, #2
 800682c:	22ff      	movs	r2, #255	; 0xff
 800682e:	2100      	movs	r1, #0
 8006830:	200d      	movs	r0, #13
 8006832:	f000 fc0b 	bl	800704c <SD_SendCmd>
 8006836:	6138      	str	r0, [r7, #16]
    SD_IO_CSState(1);
 8006838:	2001      	movs	r0, #1
 800683a:	f000 f8ef 	bl	8006a1c <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 800683e:	23ff      	movs	r3, #255	; 0xff
 8006840:	73fb      	strb	r3, [r7, #15]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006842:	f107 030f 	add.w	r3, r7, #15
 8006846:	2101      	movs	r1, #1
 8006848:	4618      	mov	r0, r3
 800684a:	f000 ff4d 	bl	80076e8 <BSP_SPI2_Send>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <MY_SD_GetCardState+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006854:	f06f 0303 	mvn.w	r3, #3
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	e00d      	b.n	8006878 <MY_SD_GetCardState+0x64>
    }/* Find SD status according to card state */
    else if(((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR) && ((uint8_t)((response & 0xFF00UL) >> 8) == (uint8_t)SD_R2_NO_ERROR))
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	d107      	bne.n	8006874 <MY_SD_GetCardState+0x60>
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d102      	bne.n	8006874 <MY_SD_GetCardState+0x60>
    {
      ret = (int32_t)SD_TRANSFER_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	e001      	b.n	8006878 <MY_SD_GetCardState+0x64>
    }
    else
    {
      //ret = (int32_t)SD_TRANSFER_BUSY;
      ret = (int32_t)SD_TRANSFER_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return Status */
  return ret;
 8006878:	697b      	ldr	r3, [r7, #20]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <MY_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
int32_t MY_SD_GetCardInfo(uint32_t Instance, MY_SD_CardInfo_t *CardInfo)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <MY_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006898:	f06f 0301 	mvn.w	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	e069      	b.n	8006974 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCSDRegister(&(CardInfo->Csd)) != BSP_ERROR_NONE)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f8d2 	bl	8006a4c <SD_GetCSDRegister>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <MY_SD_GetCardInfo+0x32>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80068ae:	f06f 0305 	mvn.w	r3, #5
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	e05e      	b.n	8006974 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCIDRegister(&(CardInfo->Cid)) != BSP_ERROR_NONE)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	3314      	adds	r3, #20
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 faf4 	bl	8006ea8 <SD_GetCIDRegister>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <MY_SD_GetCardInfo+0x4a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80068c6:	f06f 0305 	mvn.w	r3, #5
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	e052      	b.n	8006974 <MY_SD_GetCardInfo+0xf0>
  }
  else if(CardType == MY_CARD_SDHC)
 80068ce:	4b2c      	ldr	r3, [pc, #176]	; (8006980 <MY_SD_GetCardInfo+0xfc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d11c      	bne.n	8006910 <MY_SD_GetCardInfo+0x8c>
  {
    CardInfo->LogBlockSize = 512U;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068dc:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = 512U;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity = (CardInfo->Csd.version.v2.DeviceSize + 1U) * 1024U * CardInfo->LogBlockSize;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f3c3 1395 	ubfx	r3, r3, #6, #22
 80068ee:	3301      	adds	r3, #1
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068f4:	fb02 f303 	mul.w	r3, r2, r3
 80068f8:	029a      	lsls	r2, r3, #10
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006906:	fbb2 f2f3 	udiv	r2, r2, r3
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	645a      	str	r2, [r3, #68]	; 0x44
 800690e:	e031      	b.n	8006974 <MY_SD_GetCardInfo+0xf0>
  }
  else
  {
    CardInfo->CardCapacity = ((uint32_t)CardInfo->Csd.version.v1.DeviceSize + 1U) ;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	891b      	ldrh	r3, [r3, #8]
 8006914:	f3c3 038b 	ubfx	r3, r3, #2, #12
 8006918:	b29b      	uxth	r3, r3
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->CardCapacity *= (1UL << (CardInfo->Csd.version.v1.DeviceSizeMul + 2U));
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	7adb      	ldrb	r3, [r3, #11]
 8006928:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800692c:	b2db      	uxtb	r3, r3
 800692e:	3302      	adds	r3, #2
 8006930:	409a      	lsls	r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockSize = 512U;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800693c:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = (1UL << (uint32_t)CardInfo->Csd.RdBlockLen);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	795b      	ldrb	r3, [r3, #5]
 8006942:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006946:	b2db      	uxtb	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	2301      	movs	r3, #1
 800694c:	fa03 f202 	lsl.w	r2, r3, r2
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity *= CardInfo->CardBlockSize;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800695c:	fb02 f203 	mul.w	r2, r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return ret;
 8006974:	68fb      	ldr	r3, [r7, #12]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000044 	.word	0x20000044

08006984 <SD_IO_Init>:
  * @brief  Initializes the SD Card and put it into StandBy State (Ready for
  *         data transfer).
  * @retval BSP status
  */
static int32_t SD_IO_Init(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800698a:	2300      	movs	r3, #0
 800698c:	61fb      	str	r3, [r7, #28]
  uint8_t counter = 0, tmp;
 800698e:	2300      	movs	r3, #0
 8006990:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* SD_CS_GPIO Periph clock enable */
  MY_SD_CS_GPIO_CLK_ENABLE();
 8006992:	4b20      	ldr	r3, [pc, #128]	; (8006a14 <SD_IO_Init+0x90>)
 8006994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006996:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <SD_IO_Init+0x90>)
 8006998:	f043 0302 	orr.w	r3, r3, #2
 800699c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800699e:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <SD_IO_Init+0x90>)
 80069a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  GPIO_InitStruct.Pin   = MY_SD_CS_PIN;
 80069aa:	2304      	movs	r3, #4
 80069ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80069ae:	2301      	movs	r3, #1
 80069b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80069b2:	2301      	movs	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069b6:	2302      	movs	r3, #2
 80069b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MY_SD_CS_GPIO_PORT, &GPIO_InitStruct);
 80069ba:	1d3b      	adds	r3, r7, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4816      	ldr	r0, [pc, #88]	; (8006a18 <SD_IO_Init+0x94>)
 80069c0:	f7fb fa7c 	bl	8001ebc <HAL_GPIO_Init>

  /*------------Put SD in SPI mode--------------*/
  /* SD SPI Config */
  if(BUS_SPIx_Init() != BSP_ERROR_NONE)
 80069c4:	f000 fe40 	bl	8007648 <BSP_SPI2_Init>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <SD_IO_Init+0x52>
  {
    ret = BSP_ERROR_NO_INIT;
 80069ce:	f04f 33ff 	mov.w	r3, #4294967295
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	e019      	b.n	8006a0a <SD_IO_Init+0x86>
  }
  else
  {
    /* SD chip select high */
    MY_SD_CS_HIGH();
 80069d6:	2201      	movs	r2, #1
 80069d8:	2104      	movs	r1, #4
 80069da:	480f      	ldr	r0, [pc, #60]	; (8006a18 <SD_IO_Init+0x94>)
 80069dc:	f7fb fc08 	bl	80021f0 <HAL_GPIO_WritePin>

    /* Send dummy byte 0xFF, 10 times with CS high */
    /* Rise CS and MOSI for 80 clocks cycles */
    tmp = SD_DUMMY_BYTE;
 80069e0:	23ff      	movs	r3, #255	; 0xff
 80069e2:	76bb      	strb	r3, [r7, #26]

    do
    {
      /* Send dummy byte 0xFF */
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80069e4:	f107 031a 	add.w	r3, r7, #26
 80069e8:	2101      	movs	r1, #1
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fe7c 	bl	80076e8 <BSP_SPI2_Send>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <SD_IO_Init+0x7a>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80069f6:	f06f 0303 	mvn.w	r3, #3
 80069fa:	61fb      	str	r3, [r7, #28]
        break;
 80069fc:	e005      	b.n	8006a0a <SD_IO_Init+0x86>
      }
      counter++;
 80069fe:	7efb      	ldrb	r3, [r7, #27]
 8006a00:	3301      	adds	r3, #1
 8006a02:	76fb      	strb	r3, [r7, #27]
    }while(counter <= 9U);
 8006a04:	7efb      	ldrb	r3, [r7, #27]
 8006a06:	2b09      	cmp	r3, #9
 8006a08:	d9ec      	bls.n	80069e4 <SD_IO_Init+0x60>
  }

  return ret;
 8006a0a:	69fb      	ldr	r3, [r7, #28]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3720      	adds	r7, #32
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40021000 	.word	0x40021000
 8006a18:	48000400 	.word	0x48000400

08006a1c <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  Value pin's value.
  * @retval None
  */
static void SD_IO_CSState(uint32_t Value)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  if(Value == 1U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d105      	bne.n	8006a36 <SD_IO_CSState+0x1a>
  {
    MY_SD_CS_HIGH();
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	2104      	movs	r1, #4
 8006a2e:	4806      	ldr	r0, [pc, #24]	; (8006a48 <SD_IO_CSState+0x2c>)
 8006a30:	f7fb fbde 	bl	80021f0 <HAL_GPIO_WritePin>
  }
  else
  {
    MY_SD_CS_LOW();
  }
}
 8006a34:	e004      	b.n	8006a40 <SD_IO_CSState+0x24>
    MY_SD_CS_LOW();
 8006a36:	2200      	movs	r2, #0
 8006a38:	2104      	movs	r1, #4
 8006a3a:	4803      	ldr	r0, [pc, #12]	; (8006a48 <SD_IO_CSState+0x2c>)
 8006a3c:	f7fb fbd8 	bl	80021f0 <HAL_GPIO_WritePin>
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	48000400 	.word	0x48000400

08006a4c <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd pointer on an SCD register structure
  * @retval SD status
  */
static int32_t SD_GetCSDRegister(SD_CardSpecificData_t* Csd)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b096      	sub	sp, #88	; 0x58
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006a54:	2300      	movs	r3, #0
 8006a56:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t CSD_Tab[16];
  uint32_t response;
  uint8_t tmp;

  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006a58:	2300      	movs	r3, #0
 8006a5a:	22ff      	movs	r2, #255	; 0xff
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	2009      	movs	r0, #9
 8006a60:	f000 faf4 	bl	800704c <SD_SendCmd>
 8006a64:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8006a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 8202 	bne.w	8006e74 <SD_GetCSDRegister+0x428>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006a70:	20fe      	movs	r0, #254	; 0xfe
 8006a72:	f000 fda7 	bl	80075c4 <SD_WaitData>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f040 81fe 	bne.w	8006e7a <SD_GetCSDRegister+0x42e>
    {
      tmp = SD_DUMMY_BYTE;
 8006a7e:	23ff      	movs	r3, #255	; 0xff
 8006a80:	72fb      	strb	r3, [r7, #11]
      for (counter = 0U; counter < 16U; counter++)
 8006a82:	2300      	movs	r3, #0
 8006a84:	653b      	str	r3, [r7, #80]	; 0x50
 8006a86:	e014      	b.n	8006ab2 <SD_GetCSDRegister+0x66>
      {
        /* Store CSD register value on CSD_Tab */
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CSD_Tab[counter], 1U) != BSP_ERROR_NONE)
 8006a88:	f107 020c 	add.w	r2, r7, #12
 8006a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	18d1      	adds	r1, r2, r3
 8006a92:	f107 030b 	add.w	r3, r7, #11
 8006a96:	2201      	movs	r2, #1
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fe5d 	bl	8007758 <BSP_SPI2_SendRecv>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <SD_GetCSDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006aa4:	f06f 0303 	mvn.w	r3, #3
 8006aa8:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8006aaa:	e005      	b.n	8006ab8 <SD_GetCSDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8006aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aae:	3301      	adds	r3, #1
 8006ab0:	653b      	str	r3, [r7, #80]	; 0x50
 8006ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab4:	2b0f      	cmp	r3, #15
 8006ab6:	d9e7      	bls.n	8006a88 <SD_GetCSDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 81dd 	bne.w	8006e7a <SD_GetCSDRegister+0x42e>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006ac0:	f107 030b 	add.w	r3, r7, #11
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fe0e 	bl	80076e8 <BSP_SPI2_Send>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <SD_GetCSDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006ad2:	f06f 0303 	mvn.w	r3, #3
 8006ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ad8:	e1cf      	b.n	8006e7a <SD_GetCSDRegister+0x42e>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006ada:	f107 030b 	add.w	r3, r7, #11
 8006ade:	2101      	movs	r1, #1
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fe01 	bl	80076e8 <BSP_SPI2_Send>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <SD_GetCSDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006aec:	f06f 0303 	mvn.w	r3, #3
 8006af0:	657b      	str	r3, [r7, #84]	; 0x54
 8006af2:	e1c2      	b.n	8006e7a <SD_GetCSDRegister+0x42e>
          /*************************************************************************
          CSD header decoding
          *************************************************************************/

          /* Byte 0 */
          Csd->CSDStruct = (CSD_Tab[0] & 0xC0U) >> 6U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	099b      	lsrs	r3, r3, #6
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	b2d9      	uxtb	r1, r3
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	7813      	ldrb	r3, [r2, #0]
 8006b02:	f361 0301 	bfi	r3, r1, #0, #2
 8006b06:	7013      	strb	r3, [r2, #0]
          Csd->Reserved1 =  CSD_Tab[0] & 0x3FU;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b0e:	b2d9      	uxtb	r1, r3
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	7813      	ldrb	r3, [r2, #0]
 8006b14:	f361 0387 	bfi	r3, r1, #2, #6
 8006b18:	7013      	strb	r3, [r2, #0]

          /* Byte 1 */
          Csd->TAAC = CSD_Tab[1];
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	705a      	strb	r2, [r3, #1]

          /* Byte 2 */
          Csd->NSAC = CSD_Tab[2];
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	709a      	strb	r2, [r3, #2]

          /* Byte 3 */
          Csd->MaxBusClkFrec = CSD_Tab[3];
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	70da      	strb	r2, [r3, #3]

          /* Byte 4/5 */
          Csd->CardComdClasses = (uint16_t)(((uint16_t)CSD_Tab[4] << 4U) | ((uint16_t)(CSD_Tab[5] & 0xF0U) >> 4U));
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	b21a      	sxth	r2, r3
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	111b      	asrs	r3, r3, #4
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	b21b      	sxth	r3, r3
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	b21b      	sxth	r3, r3
 8006b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b50:	b299      	uxth	r1, r3
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	8893      	ldrh	r3, [r2, #4]
 8006b56:	f361 030b 	bfi	r3, r1, #0, #12
 8006b5a:	8093      	strh	r3, [r2, #4]
          Csd->RdBlockLen = CSD_Tab[5] & 0x0FU;
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	b2d9      	uxtb	r1, r3
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	7953      	ldrb	r3, [r2, #5]
 8006b68:	f361 1307 	bfi	r3, r1, #4, #4
 8006b6c:	7153      	strb	r3, [r2, #5]

          /* Byte 6 */
          Csd->PartBlockRead   = (CSD_Tab[6] & 0x80U) >> 7U;
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	09db      	lsrs	r3, r3, #7
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	b2d9      	uxtb	r1, r3
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	7993      	ldrb	r3, [r2, #6]
 8006b7c:	f361 0300 	bfi	r3, r1, #0, #1
 8006b80:	7193      	strb	r3, [r2, #6]
          Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40U) >> 6U;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	099b      	lsrs	r3, r3, #6
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	b2d9      	uxtb	r1, r3
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	7993      	ldrb	r3, [r2, #6]
 8006b90:	f361 0341 	bfi	r3, r1, #1, #1
 8006b94:	7193      	strb	r3, [r2, #6]
          Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20U) >> 5U;
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	b2d9      	uxtb	r1, r3
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	7993      	ldrb	r3, [r2, #6]
 8006ba4:	f361 0382 	bfi	r3, r1, #2, #1
 8006ba8:	7193      	strb	r3, [r2, #6]
          Csd->DSRImpl         = (CSD_Tab[6] & 0x10U) >> 4U;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	091b      	lsrs	r3, r3, #4
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	b2d9      	uxtb	r1, r3
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	7993      	ldrb	r3, [r2, #6]
 8006bb8:	f361 03c3 	bfi	r3, r1, #3, #1
 8006bbc:	7193      	strb	r3, [r2, #6]

          /*************************************************************************
          CSD v1/v2 decoding
          *************************************************************************/

          if(CardType == MY_CARD_SDSC)
 8006bbe:	4bac      	ldr	r3, [pc, #688]	; (8006e70 <SD_GetCSDRegister+0x424>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d165      	bne.n	8006c92 <SD_GetCSDRegister+0x246>
          {
            Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0CU) >> 2U);
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	089b      	lsrs	r3, r3, #2
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	b2d9      	uxtb	r1, r3
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	7a13      	ldrb	r3, [r2, #8]
 8006bd4:	f361 0301 	bfi	r3, r1, #0, #2
 8006bd8:	7213      	strb	r3, [r2, #8]

            Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03U) << 10U) | (CSD_Tab[7] << 2U) | ((CSD_Tab[8] & 0xC0U) >> 6U);
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	029b      	lsls	r3, r3, #10
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	099b      	lsrs	r3, r3, #6
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4313      	orrs	r3, r2
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c08:	b299      	uxth	r1, r3
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	8913      	ldrh	r3, [r2, #8]
 8006c0e:	f361 038d 	bfi	r3, r1, #2, #12
 8006c12:	8113      	strh	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38U) >> 3U;
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	08db      	lsrs	r3, r3, #3
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	b2d9      	uxtb	r1, r3
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6893      	ldr	r3, [r2, #8]
 8006c22:	f361 3390 	bfi	r3, r1, #14, #3
 8006c26:	6093      	str	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07U);
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	b2d9      	uxtb	r1, r3
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	7a93      	ldrb	r3, [r2, #10]
 8006c34:	f361 0343 	bfi	r3, r1, #1, #3
 8006c38:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0U) >> 5U;
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	b2d9      	uxtb	r1, r3
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	7a93      	ldrb	r3, [r2, #10]
 8006c48:	f361 1306 	bfi	r3, r1, #4, #3
 8006c4c:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1CU) >> 2U;
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	089b      	lsrs	r3, r3, #2
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	b2d9      	uxtb	r1, r3
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	8953      	ldrh	r3, [r2, #10]
 8006c5c:	f361 13c9 	bfi	r3, r1, #7, #3
 8006c60:	8153      	strh	r3, [r2, #10]
            Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03U) << 1U) | ((CSD_Tab[10] & 0x80U) >> 7U);
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f003 0306 	and.w	r3, r3, #6
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c72:	09db      	lsrs	r3, r3, #7
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	b2d9      	uxtb	r1, r3
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	7ad3      	ldrb	r3, [r2, #11]
 8006c8a:	f361 0384 	bfi	r3, r1, #2, #3
 8006c8e:	72d3      	strb	r3, [r2, #11]
 8006c90:	e02b      	b.n	8006cea <SD_GetCSDRegister+0x29e>
          }
          else
          {
            Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0FU) << 2U) | ((CSD_Tab[7] & 0xC0U) >> 6U);
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca2:	099b      	lsrs	r3, r3, #6
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	4313      	orrs	r3, r2
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cb4:	b2d9      	uxtb	r1, r3
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	7a13      	ldrb	r3, [r2, #8]
 8006cba:	f361 0305 	bfi	r3, r1, #0, #6
 8006cbe:	7213      	strb	r3, [r2, #8]
            Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3FU) << 16U) | (CSD_Tab[8] << 8U) | CSD_Tab[9];
 8006cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc2:	041b      	lsls	r3, r3, #16
 8006cc4:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	021b      	lsls	r3, r3, #8
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f3c3 0115 	ubfx	r1, r3, #0, #22
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6893      	ldr	r3, [r2, #8]
 8006cda:	f361 139b 	bfi	r3, r1, #6, #22
 8006cde:	6093      	str	r3, [r2, #8]
            Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80U) >> 8U);
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	7ad3      	ldrb	r3, [r2, #11]
 8006ce4:	f36f 1304 	bfc	r3, #4, #1
 8006ce8:	72d3      	strb	r3, [r2, #11]
          }

          Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40U) >> 6U;
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cec:	099b      	lsrs	r3, r3, #6
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	b2d9      	uxtb	r1, r3
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	7b13      	ldrb	r3, [r2, #12]
 8006cf8:	f361 0300 	bfi	r3, r1, #0, #1
 8006cfc:	7313      	strb	r3, [r2, #12]
          Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3FU) << 1U) | ((CSD_Tab[11] & 0x80U) >> 7U);
 8006cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	09db      	lsrs	r3, r3, #7
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d20:	b2d9      	uxtb	r1, r3
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	7b13      	ldrb	r3, [r2, #12]
 8006d26:	f361 0347 	bfi	r3, r1, #1, #7
 8006d2a:	7313      	strb	r3, [r2, #12]
          Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7FU);
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d32:	b2d9      	uxtb	r1, r3
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	7b53      	ldrb	r3, [r2, #13]
 8006d38:	f361 0306 	bfi	r3, r1, #0, #7
 8006d3c:	7353      	strb	r3, [r2, #13]
          Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80U) >> 7U;
 8006d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d40:	09db      	lsrs	r3, r3, #7
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	b2d9      	uxtb	r1, r3
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	7b53      	ldrb	r3, [r2, #13]
 8006d4c:	f361 13c7 	bfi	r3, r1, #7, #1
 8006d50:	7353      	strb	r3, [r2, #13]
          Csd->Reserved2         = (CSD_Tab[12] & 0x60U) >> 5U;
 8006d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	b2d9      	uxtb	r1, r3
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	7b93      	ldrb	r3, [r2, #14]
 8006d60:	f361 0301 	bfi	r3, r1, #0, #2
 8006d64:	7393      	strb	r3, [r2, #14]
          Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1CU) >> 2U;
 8006d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d68:	089b      	lsrs	r3, r3, #2
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	b2d9      	uxtb	r1, r3
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	7b93      	ldrb	r3, [r2, #14]
 8006d74:	f361 0384 	bfi	r3, r1, #2, #3
 8006d78:	7393      	strb	r3, [r2, #14]
          Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03U) << 2U) | ((CSD_Tab[13] & 0xC0U) >> 6U);
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	f003 030c 	and.w	r3, r3, #12
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d8a:	099b      	lsrs	r3, r3, #6
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	4313      	orrs	r3, r2
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 030f 	and.w	r3, r3, #15
 8006d9c:	b2d9      	uxtb	r1, r3
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	89d3      	ldrh	r3, [r2, #14]
 8006da2:	f361 1348 	bfi	r3, r1, #5, #4
 8006da6:	81d3      	strh	r3, [r2, #14]
          Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20U) >> 5U;
 8006da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006daa:	095b      	lsrs	r3, r3, #5
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	b2d9      	uxtb	r1, r3
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	7bd3      	ldrb	r3, [r2, #15]
 8006db6:	f361 0341 	bfi	r3, r1, #1, #1
 8006dba:	73d3      	strb	r3, [r2, #15]
          Csd->Reserved3         = (CSD_Tab[13] & 0x1FU);
 8006dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dbe:	f003 031f 	and.w	r3, r3, #31
 8006dc2:	b2d9      	uxtb	r1, r3
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	7bd3      	ldrb	r3, [r2, #15]
 8006dc8:	f361 0386 	bfi	r3, r1, #2, #5
 8006dcc:	73d3      	strb	r3, [r2, #15]
          Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80U) >> 7U;
 8006dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd0:	09db      	lsrs	r3, r3, #7
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	b2d9      	uxtb	r1, r3
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	7bd3      	ldrb	r3, [r2, #15]
 8006ddc:	f361 13c7 	bfi	r3, r1, #7, #1
 8006de0:	73d3      	strb	r3, [r2, #15]
          Csd->CopyFlag          = (CSD_Tab[14] & 0x40U) >> 6U;
 8006de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de4:	099b      	lsrs	r3, r3, #6
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	b2d9      	uxtb	r1, r3
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	7c13      	ldrb	r3, [r2, #16]
 8006df0:	f361 0300 	bfi	r3, r1, #0, #1
 8006df4:	7413      	strb	r3, [r2, #16]
          Csd->PermWrProtect     = (CSD_Tab[14] & 0x20U) >> 5U;
 8006df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	b2d9      	uxtb	r1, r3
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	7c13      	ldrb	r3, [r2, #16]
 8006e04:	f361 0341 	bfi	r3, r1, #1, #1
 8006e08:	7413      	strb	r3, [r2, #16]
          Csd->TempWrProtect     = (CSD_Tab[14] & 0x10U) >> 4U;
 8006e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e0c:	091b      	lsrs	r3, r3, #4
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	b2d9      	uxtb	r1, r3
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7c13      	ldrb	r3, [r2, #16]
 8006e18:	f361 0382 	bfi	r3, r1, #2, #1
 8006e1c:	7413      	strb	r3, [r2, #16]
          Csd->FileFormat        = (CSD_Tab[14] & 0x0CU) >> 2U;
 8006e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e20:	089b      	lsrs	r3, r3, #2
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	b2d9      	uxtb	r1, r3
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	7c13      	ldrb	r3, [r2, #16]
 8006e2c:	f361 03c4 	bfi	r3, r1, #3, #2
 8006e30:	7413      	strb	r3, [r2, #16]
          Csd->Reserved4         = (CSD_Tab[14] & 0x03U);
 8006e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	b2d9      	uxtb	r1, r3
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	7c13      	ldrb	r3, [r2, #16]
 8006e3e:	f361 1346 	bfi	r3, r1, #5, #2
 8006e42:	7413      	strb	r3, [r2, #16]
          Csd->crc               = (CSD_Tab[15] & 0xFEU) >> 1U;
 8006e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e4c:	b2d9      	uxtb	r1, r3
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	8a13      	ldrh	r3, [r2, #16]
 8006e52:	f361 13cd 	bfi	r3, r1, #7, #7
 8006e56:	8213      	strh	r3, [r2, #16]
          Csd->Reserved5         = (CSD_Tab[15] & 0x01U);
 8006e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	b2d9      	uxtb	r1, r3
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	7c53      	ldrb	r3, [r2, #17]
 8006e64:	f361 1386 	bfi	r3, r1, #6, #1
 8006e68:	7453      	strb	r3, [r2, #17]

          ret = BSP_ERROR_NONE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8006e6e:	e004      	b.n	8006e7a <SD_GetCSDRegister+0x42e>
 8006e70:	20000044 	.word	0x20000044
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006e74:	f06f 0305 	mvn.w	r3, #5
 8006e78:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 8006e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10e      	bne.n	8006e9e <SD_GetCSDRegister+0x452>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 8006e80:	2001      	movs	r0, #1
 8006e82:	f7ff fdcb 	bl	8006a1c <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006e86:	f107 030b 	add.w	r3, r7, #11
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fc2b 	bl	80076e8 <BSP_SPI2_Send>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <SD_GetCSDRegister+0x452>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006e98:	f06f 0303 	mvn.w	r3, #3
 8006e9c:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 8006e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3758      	adds	r7, #88	; 0x58
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
static int32_t SD_GetCIDRegister(SD_CardIdData_t* Cid)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b096      	sub	sp, #88	; 0x58
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t response;
  uint32_t counter;
  uint8_t tmp;

  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CID, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	22ff      	movs	r2, #255	; 0xff
 8006eb8:	2100      	movs	r1, #0
 8006eba:	200a      	movs	r0, #10
 8006ebc:	f000 f8c6 	bl	800704c <SD_SendCmd>
 8006ec0:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8006ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 80a6 	bne.w	8007018 <SD_GetCIDRegister+0x170>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006ecc:	20fe      	movs	r0, #254	; 0xfe
 8006ece:	f000 fb79 	bl	80075c4 <SD_WaitData>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f040 80a2 	bne.w	800701e <SD_GetCIDRegister+0x176>
    {
      tmp = SD_DUMMY_BYTE;
 8006eda:	23ff      	movs	r3, #255	; 0xff
 8006edc:	72fb      	strb	r3, [r7, #11]

      /* Store CID register value on CID_Tab */
      for (counter = 0U; counter < 16U; counter++)
 8006ede:	2300      	movs	r3, #0
 8006ee0:	653b      	str	r3, [r7, #80]	; 0x50
 8006ee2:	e014      	b.n	8006f0e <SD_GetCIDRegister+0x66>
      {
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CID_Tab[counter], 1U) != BSP_ERROR_NONE)
 8006ee4:	f107 020c 	add.w	r2, r7, #12
 8006ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	18d1      	adds	r1, r2, r3
 8006eee:	f107 030b 	add.w	r3, r7, #11
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fc2f 	bl	8007758 <BSP_SPI2_SendRecv>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <SD_GetCIDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006f00:	f06f 0303 	mvn.w	r3, #3
 8006f04:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8006f06:	e005      	b.n	8006f14 <SD_GetCIDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8006f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8006f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f10:	2b0f      	cmp	r3, #15
 8006f12:	d9e7      	bls.n	8006ee4 <SD_GetCIDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f040 8081 	bne.w	800701e <SD_GetCIDRegister+0x176>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006f1c:	f107 030b 	add.w	r3, r7, #11
 8006f20:	2101      	movs	r1, #1
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fbe0 	bl	80076e8 <BSP_SPI2_Send>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <SD_GetCIDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006f2e:	f06f 0303 	mvn.w	r3, #3
 8006f32:	657b      	str	r3, [r7, #84]	; 0x54
 8006f34:	e073      	b.n	800701e <SD_GetCIDRegister+0x176>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006f36:	f107 030b 	add.w	r3, r7, #11
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 fbd3 	bl	80076e8 <BSP_SPI2_Send>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <SD_GetCIDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006f48:	f06f 0303 	mvn.w	r3, #3
 8006f4c:	657b      	str	r3, [r7, #84]	; 0x54
 8006f4e:	e066      	b.n	800701e <SD_GetCIDRegister+0x176>
        }
        else
        {
          /* Byte 0 */
          Cid->ManufacturerID = CID_Tab[0];
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	601a      	str	r2, [r3, #0]

          /* Byte 1 */
          Cid->OEM_AppliID = CID_Tab[1] << 8U;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	021a      	lsls	r2, r3, #8
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	605a      	str	r2, [r3, #4]

          /* Byte 2 */
          Cid->OEM_AppliID |= CID_Tab[2];
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	605a      	str	r2, [r3, #4]

          /* Byte 3 */
          Cid->ProdName1 = CID_Tab[3] << 24U;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	061a      	lsls	r2, r3, #24
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	609a      	str	r2, [r3, #8]

          /* Byte 4 */
          Cid->ProdName1 |= CID_Tab[4] << 16U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	041b      	lsls	r3, r3, #16
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	609a      	str	r2, [r3, #8]

          /* Byte 5 */
          Cid->ProdName1 |= CID_Tab[5] << 8U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	021b      	lsls	r3, r3, #8
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	609a      	str	r2, [r3, #8]

          /* Byte 6 */
          Cid->ProdName1 |= CID_Tab[6];
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	609a      	str	r2, [r3, #8]

          /* Byte 7 */
          Cid->ProdName2 = CID_Tab[7];
 8006f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60da      	str	r2, [r3, #12]

          /* Byte 8 */
          Cid->ProdRev = CID_Tab[8];
 8006fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	611a      	str	r2, [r3, #16]

          /* Byte 9 */
          Cid->ProdSN = CID_Tab[9] << 24U;
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	061a      	lsls	r2, r3, #24
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	615a      	str	r2, [r3, #20]

          /* Byte 10 */
          Cid->ProdSN |= CID_Tab[10] << 16U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695a      	ldr	r2, [r3, #20]
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb4:	041b      	lsls	r3, r3, #16
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	615a      	str	r2, [r3, #20]

          /* Byte 11 */
          Cid->ProdSN |= CID_Tab[11] << 8U;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	695a      	ldr	r2, [r3, #20]
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	021b      	lsls	r3, r3, #8
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	615a      	str	r2, [r3, #20]

          /* Byte 12 */
          Cid->ProdSN |= CID_Tab[12];
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	695a      	ldr	r2, [r3, #20]
 8006fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	615a      	str	r2, [r3, #20]

          /* Byte 13 */
          Cid->Reserved1 |= (CID_Tab[13] & 0xF0U) >> 4U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	699a      	ldr	r2, [r3, #24]
 8006fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	619a      	str	r2, [r3, #24]
          Cid->ManufactDate = (CID_Tab[13] & 0x0FU) << 8U;
 8006fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fea:	021b      	lsls	r3, r3, #8
 8006fec:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	61da      	str	r2, [r3, #28]

          /* Byte 14 */
          Cid->ManufactDate |= CID_Tab[14];
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	61da      	str	r2, [r3, #28]

          /* Byte 15 */
          Cid->CID_CRC = (CID_Tab[15] & 0xFEU) >> 1U;
 8007000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007002:	085b      	lsrs	r3, r3, #1
 8007004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	621a      	str	r2, [r3, #32]
          Cid->Reserved2 = 1U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	625a      	str	r2, [r3, #36]	; 0x24

          ret = BSP_ERROR_NONE;
 8007012:	2300      	movs	r3, #0
 8007014:	657b      	str	r3, [r7, #84]	; 0x54
 8007016:	e002      	b.n	800701e <SD_GetCIDRegister+0x176>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8007018:	f06f 0305 	mvn.w	r3, #5
 800701c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 800701e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10e      	bne.n	8007042 <SD_GetCIDRegister+0x19a>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 8007024:	2001      	movs	r0, #1
 8007026:	f7ff fcf9 	bl	8006a1c <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800702a:	f107 030b 	add.w	r3, r7, #11
 800702e:	2101      	movs	r1, #1
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fb59 	bl	80076e8 <BSP_SPI2_Send>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <SD_GetCIDRegister+0x19a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800703c:	f06f 0303 	mvn.w	r3, #3
 8007040:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 8007042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8007044:	4618      	mov	r0, r3
 8007046:	3758      	adds	r7, #88	; 0x58
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <SD_SendCmd>:
  * @param  Crc The CRC.
  * @param  Answer SD_ANSWER_NOT_EXPECTED or SD_ANSWER_EXPECTED
  * @retval SD response or 0xFFFF in case of error
  */
static uint32_t SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Answer)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	6039      	str	r1, [r7, #0]
 8007054:	4611      	mov	r1, r2
 8007056:	461a      	mov	r2, r3
 8007058:	4603      	mov	r3, r0
 800705a:	71fb      	strb	r3, [r7, #7]
 800705c:	460b      	mov	r3, r1
 800705e:	71bb      	strb	r3, [r7, #6]
 8007060:	4613      	mov	r3, r2
 8007062:	717b      	strb	r3, [r7, #5]
  uint8_t frame[SD_CMD_LENGTH], frameout[SD_CMD_LENGTH];
  uint32_t response = 0xFFFF;
 8007064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007068:	61fb      	str	r3, [r7, #28]
  /* R1 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 1 Bytes answer + NEC(0) = 15bytes */
  /* R1b identical to R1 + Busy information                                                   */
  /* R2 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 2 Bytes answer + NEC(0) = 16bytes */

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40U);         /* Construct byte 1 */
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007070:	b2db      	uxtb	r3, r3
 8007072:	753b      	strb	r3, [r7, #20]
  frame[1] = (uint8_t)(Arg >> 24U); /* Construct byte 2 */
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	0e1b      	lsrs	r3, r3, #24
 8007078:	b2db      	uxtb	r3, r3
 800707a:	757b      	strb	r3, [r7, #21]
  frame[2] = (uint8_t)(Arg >> 16U); /* Construct byte 3 */
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	0c1b      	lsrs	r3, r3, #16
 8007080:	b2db      	uxtb	r3, r3
 8007082:	75bb      	strb	r3, [r7, #22]
  frame[3] = (uint8_t)(Arg >> 8U);  /* Construct byte 4 */
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	b2db      	uxtb	r3, r3
 800708a:	75fb      	strb	r3, [r7, #23]
  frame[4] = (uint8_t)(Arg);        /* Construct byte 5 */
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	763b      	strb	r3, [r7, #24]
  frame[5] = (Crc | 0x01U);         /* Construct byte 6 */
 8007092:	79bb      	ldrb	r3, [r7, #6]
 8007094:	f043 0301 	orr.w	r3, r3, #1
 8007098:	b2db      	uxtb	r3, r3
 800709a:	767b      	strb	r3, [r7, #25]

  /* Send the command */
  SD_IO_CSState(0);
 800709c:	2000      	movs	r0, #0
 800709e:	f7ff fcbd 	bl	8006a1c <SD_IO_CSState>
  /* Send the Cmd bytes */
  if(BUS_SPIx_SendRecv(frame, frameout, SD_CMD_LENGTH) != BSP_ERROR_NONE)
 80070a2:	f107 010c 	add.w	r1, r7, #12
 80070a6:	f107 0314 	add.w	r3, r7, #20
 80070aa:	2206      	movs	r2, #6
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fb53 	bl	8007758 <BSP_SPI2_SendRecv>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <SD_SendCmd+0x72>
  {
    return 0xFFFF;
 80070b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070bc:	e0da      	b.n	8007274 <SD_SendCmd+0x228>
  }
  tmp = SD_DUMMY_BYTE;
 80070be:	23ff      	movs	r3, #255	; 0xff
 80070c0:	72fb      	strb	r3, [r7, #11]
  switch(Answer)
 80070c2:	797b      	ldrb	r3, [r7, #5]
 80070c4:	2b05      	cmp	r3, #5
 80070c6:	f200 80d1 	bhi.w	800726c <SD_SendCmd+0x220>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <SD_SendCmd+0x84>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	080070e9 	.word	0x080070e9
 80070d4:	08007105 	.word	0x08007105
 80070d8:	08007197 	.word	0x08007197
 80070dc:	080071d9 	.word	0x080071d9
 80070e0:	0800726d 	.word	0x0800726d
 80070e4:	080071d9 	.word	0x080071d9
  {
  case SD_ANSWER_R1_EXPECTED :
    /* Sends one byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80070e8:	f107 030a 	add.w	r3, r7, #10
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fa3f 	bl	8007570 <SD_ReadData>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <SD_SendCmd+0xb2>
    {
      return 0xFFFF;
 80070f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070fc:	e0ba      	b.n	8007274 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80070fe:	7abb      	ldrb	r3, [r7, #10]
 8007100:	61fb      	str	r3, [r7, #28]
    break;
 8007102:	e0b6      	b.n	8007272 <SD_SendCmd+0x226>
  case SD_ANSWER_R1B_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8007104:	f107 030a 	add.w	r3, r7, #10
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fa31 	bl	8007570 <SD_ReadData>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <SD_SendCmd+0xce>
    {
      return 0xFFFF;
 8007114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007118:	e0ac      	b.n	8007274 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 800711a:	7abb      	ldrb	r3, [r7, #10]
 800711c:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 800711e:	f107 010a 	add.w	r1, r7, #10
 8007122:	f107 030b 	add.w	r3, r7, #11
 8007126:	2201      	movs	r2, #1
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fb15 	bl	8007758 <BSP_SPI2_SendRecv>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <SD_SendCmd+0xee>
    {
      return 0xFFFF;
 8007134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007138:	e09c      	b.n	8007274 <SD_SendCmd+0x228>
    }
    response |= response_tmp;
 800713a:	7abb      	ldrb	r3, [r7, #10]
 800713c:	461a      	mov	r2, r3
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	4313      	orrs	r3, r2
 8007142:	61fb      	str	r3, [r7, #28]
    /* Set CS High */
    SD_IO_CSState(1);
 8007144:	2001      	movs	r0, #1
 8007146:	f7ff fc69 	bl	8006a1c <SD_IO_CSState>
    SPI_IO_Delay(1);
 800714a:	2001      	movs	r0, #1
 800714c:	f000 fa67 	bl	800761e <SPI_IO_Delay>
    /* Set CS Low */
    SD_IO_CSState(0);
 8007150:	2000      	movs	r0, #0
 8007152:	f7ff fc63 	bl	8006a1c <SD_IO_CSState>

    /* Wait IO line return 0xFF */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007156:	f107 010a 	add.w	r1, r7, #10
 800715a:	f107 030b 	add.w	r3, r7, #11
 800715e:	2201      	movs	r2, #1
 8007160:	4618      	mov	r0, r3
 8007162:	f000 faf9 	bl	8007758 <BSP_SPI2_SendRecv>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d010      	beq.n	800718e <SD_SendCmd+0x142>
    {
      return 0xFFFF;
 800716c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007170:	e080      	b.n	8007274 <SD_SendCmd+0x228>
    }
    while(response_tmp != 0xFFU)
    {
      if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007172:	f107 010a 	add.w	r1, r7, #10
 8007176:	f107 030b 	add.w	r3, r7, #11
 800717a:	2201      	movs	r2, #1
 800717c:	4618      	mov	r0, r3
 800717e:	f000 faeb 	bl	8007758 <BSP_SPI2_SendRecv>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <SD_SendCmd+0x142>
      {
        return 0xFFFF;
 8007188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800718c:	e072      	b.n	8007274 <SD_SendCmd+0x228>
    while(response_tmp != 0xFFU)
 800718e:	7abb      	ldrb	r3, [r7, #10]
 8007190:	2bff      	cmp	r3, #255	; 0xff
 8007192:	d1ee      	bne.n	8007172 <SD_SendCmd+0x126>
      }
    }
    break;
 8007194:	e06d      	b.n	8007272 <SD_SendCmd+0x226>
  case SD_ANSWER_R2_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8007196:	f107 030a 	add.w	r3, r7, #10
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f9e8 	bl	8007570 <SD_ReadData>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <SD_SendCmd+0x160>
    {
      return 0xFFFF;
 80071a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071aa:	e063      	b.n	8007274 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80071ac:	7abb      	ldrb	r3, [r7, #10]
 80071ae:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80071b0:	f107 010a 	add.w	r1, r7, #10
 80071b4:	f107 030b 	add.w	r3, r7, #11
 80071b8:	2201      	movs	r2, #1
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 facc 	bl	8007758 <BSP_SPI2_SendRecv>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <SD_SendCmd+0x180>
    {
      return 0xFFFF;
 80071c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071ca:	e053      	b.n	8007274 <SD_SendCmd+0x228>
    }
    response |= ((uint32_t)response_tmp << 8);
 80071cc:	7abb      	ldrb	r3, [r7, #10]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	61fb      	str	r3, [r7, #28]
    break;
 80071d6:	e04c      	b.n	8007272 <SD_SendCmd+0x226>
  case SD_ANSWER_R3_EXPECTED :
  case SD_ANSWER_R7_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80071d8:	f107 030a 	add.w	r3, r7, #10
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 f9c7 	bl	8007570 <SD_ReadData>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <SD_SendCmd+0x1a2>
    {
      return 0xFFFF;
 80071e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071ec:	e042      	b.n	8007274 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80071ee:	7abb      	ldrb	r3, [r7, #10]
 80071f0:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80071f2:	f107 010a 	add.w	r1, r7, #10
 80071f6:	f107 030b 	add.w	r3, r7, #11
 80071fa:	2201      	movs	r2, #1
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 faab 	bl	8007758 <BSP_SPI2_SendRecv>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <SD_SendCmd+0x1c2>
    {
      return 0xFFFF;
 8007208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800720c:	e032      	b.n	8007274 <SD_SendCmd+0x228>
    }
    /* Only first and second responses are required */
    response |= ((uint32_t)response_tmp << 8U);
 800720e:	7abb      	ldrb	r3, [r7, #10]
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	4313      	orrs	r3, r2
 8007216:	61fb      	str	r3, [r7, #28]
    /* Sends third byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007218:	f107 010a 	add.w	r1, r7, #10
 800721c:	f107 030b 	add.w	r3, r7, #11
 8007220:	2201      	movs	r2, #1
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fa98 	bl	8007758 <BSP_SPI2_SendRecv>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <SD_SendCmd+0x1e8>
    {
      return 0xFFFF;
 800722e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007232:	e01f      	b.n	8007274 <SD_SendCmd+0x228>
    }
    /* Sends fourth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007234:	f107 010a 	add.w	r1, r7, #10
 8007238:	f107 030b 	add.w	r3, r7, #11
 800723c:	2201      	movs	r2, #1
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fa8a 	bl	8007758 <BSP_SPI2_SendRecv>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <SD_SendCmd+0x204>
    {
      return 0xFFFF;
 800724a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800724e:	e011      	b.n	8007274 <SD_SendCmd+0x228>
    }
    /* Sends fifth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007250:	f107 010a 	add.w	r1, r7, #10
 8007254:	f107 030b 	add.w	r3, r7, #11
 8007258:	2201      	movs	r2, #1
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fa7c 	bl	8007758 <BSP_SPI2_SendRecv>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d004      	beq.n	8007270 <SD_SendCmd+0x224>
    {
      return 0xFFFF;
 8007266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800726a:	e003      	b.n	8007274 <SD_SendCmd+0x228>
    }

    break;
  default :
    break;
 800726c:	bf00      	nop
 800726e:	e000      	b.n	8007272 <SD_SendCmd+0x226>
    break;
 8007270:	bf00      	nop
  }
  return response;
 8007272:	69fb      	ldr	r3, [r7, #28]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3720      	adds	r7, #32
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
static int32_t SD_GetDataResponse(uint8_t *DataResponse)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint8_t dataresponse, tmp, tmp1;
  *DataResponse = (uint8_t)SD_DATA_OTHER_ERROR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	22ff      	movs	r2, #255	; 0xff
 8007288:	701a      	strb	r2, [r3, #0]

  tmp = SD_DUMMY_BYTE;
 800728a:	23ff      	movs	r3, #255	; 0xff
 800728c:	73bb      	strb	r3, [r7, #14]
  if(BUS_SPIx_SendRecv(&tmp, &dataresponse, 1U) != BSP_ERROR_NONE)
 800728e:	f107 010f 	add.w	r1, r7, #15
 8007292:	f107 030e 	add.w	r3, r7, #14
 8007296:	2201      	movs	r2, #1
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fa5d 	bl	8007758 <BSP_SPI2_SendRecv>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <SD_GetDataResponse+0x2e>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80072a4:	f06f 0303 	mvn.w	r3, #3
 80072a8:	e049      	b.n	800733e <SD_GetDataResponse+0xc2>
  }
  /* read the busy response byte*/
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80072aa:	f107 030e 	add.w	r3, r7, #14
 80072ae:	2101      	movs	r1, #1
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fa19 	bl	80076e8 <BSP_SPI2_Send>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <SD_GetDataResponse+0x46>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80072bc:	f06f 0303 	mvn.w	r3, #3
 80072c0:	e03d      	b.n	800733e <SD_GetDataResponse+0xc2>
  }
  else
  {
    /* Mask unused bits */
    switch (dataresponse & 0x1FU)
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	f003 031f 	and.w	r3, r3, #31
 80072c8:	2b0b      	cmp	r3, #11
 80072ca:	d02f      	beq.n	800732c <SD_GetDataResponse+0xb0>
 80072cc:	2b0d      	cmp	r3, #13
 80072ce:	d031      	beq.n	8007334 <SD_GetDataResponse+0xb8>
 80072d0:	2b05      	cmp	r3, #5
 80072d2:	d000      	beq.n	80072d6 <SD_GetDataResponse+0x5a>
      break;
    case SD_DATA_WRITE_ERROR:
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
      break;
    default:
      break;
 80072d4:	e032      	b.n	800733c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_OK;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2205      	movs	r2, #5
 80072da:	701a      	strb	r2, [r3, #0]
      SD_IO_CSState(1);
 80072dc:	2001      	movs	r0, #1
 80072de:	f7ff fb9d 	bl	8006a1c <SD_IO_CSState>
      SD_IO_CSState(0);
 80072e2:	2000      	movs	r0, #0
 80072e4:	f7ff fb9a 	bl	8006a1c <SD_IO_CSState>
      tmp = SD_DUMMY_BYTE;
 80072e8:	23ff      	movs	r3, #255	; 0xff
 80072ea:	73bb      	strb	r3, [r7, #14]
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 80072ec:	f107 010d 	add.w	r1, r7, #13
 80072f0:	f107 030e 	add.w	r3, r7, #14
 80072f4:	2201      	movs	r2, #1
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fa2e 	bl	8007758 <BSP_SPI2_SendRecv>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d010      	beq.n	8007324 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 8007302:	f06f 0303 	mvn.w	r3, #3
 8007306:	e01a      	b.n	800733e <SD_GetDataResponse+0xc2>
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 8007308:	f107 010d 	add.w	r1, r7, #13
 800730c:	f107 030e 	add.w	r3, r7, #14
 8007310:	2201      	movs	r2, #1
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fa20 	bl	8007758 <BSP_SPI2_SendRecv>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 800731e:	f06f 0303 	mvn.w	r3, #3
 8007322:	e00c      	b.n	800733e <SD_GetDataResponse+0xc2>
      while(tmp1 != 0xFFU)
 8007324:	7b7b      	ldrb	r3, [r7, #13]
 8007326:	2bff      	cmp	r3, #255	; 0xff
 8007328:	d1ee      	bne.n	8007308 <SD_GetDataResponse+0x8c>
      break;
 800732a:	e007      	b.n	800733c <SD_GetDataResponse+0xc0>
      *DataResponse =  (uint8_t)SD_DATA_CRC_ERROR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	220b      	movs	r2, #11
 8007330:	701a      	strb	r2, [r3, #0]
      break;
 8007332:	e003      	b.n	800733c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	220d      	movs	r2, #13
 8007338:	701a      	strb	r2, [r3, #0]
      break;
 800733a:	bf00      	nop
    }
  }

  /* Return response */
  return BSP_ERROR_NONE;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <SD_GoIdleState>:
  * @brief  Put the SD in Idle state.
  * @param  None
  * @retval SD status
  */
static int32_t SD_GoIdleState(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
  uint32_t response;
  __IO uint8_t counter = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	70fb      	strb	r3, [r7, #3]
  uint8_t tmp = SD_DUMMY_BYTE;
 8007352:	23ff      	movs	r3, #255	; 0xff
 8007354:	70bb      	strb	r3, [r7, #2]

  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and
  wait for In Idle State Response (R1 Format) equal to 0x01 */
  do
  {
    counter++;
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	3301      	adds	r3, #1
 800735c:	b2db      	uxtb	r3, r3
 800735e:	70fb      	strb	r3, [r7, #3]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0U, 0x95U, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007360:	2300      	movs	r3, #0
 8007362:	2295      	movs	r2, #149	; 0x95
 8007364:	2100      	movs	r1, #0
 8007366:	2000      	movs	r0, #0
 8007368:	f7ff fe70 	bl	800704c <SD_SendCmd>
 800736c:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 800736e:	2001      	movs	r0, #1
 8007370:	f7ff fb54 	bl	8006a1c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007374:	1cbb      	adds	r3, r7, #2
 8007376:	2101      	movs	r1, #1
 8007378:	4618      	mov	r0, r3
 800737a:	f000 f9b5 	bl	80076e8 <BSP_SPI2_Send>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <SD_GoIdleState+0x42>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007384:	f06f 0303 	mvn.w	r3, #3
 8007388:	e0ec      	b.n	8007564 <SD_GoIdleState+0x21c>
    }
    else
    {
      if(counter >= SD_MAX_TRY)
 800738a:	78fb      	ldrb	r3, [r7, #3]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b63      	cmp	r3, #99	; 0x63
 8007390:	d902      	bls.n	8007398 <SD_GoIdleState+0x50>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 8007392:	f06f 0305 	mvn.w	r3, #5
 8007396:	e0e5      	b.n	8007564 <SD_GoIdleState+0x21c>
      }
    }
  }while((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	d1da      	bne.n	8007356 <SD_GoIdleState+0xe>

  /* Send CMD8 (SD_CMD_SEND_IF_COND) to check the power supply status
  and wait until response (R7 Format) equal to 0xAA and */
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AAU, 0x87U, (uint8_t)SD_ANSWER_R7_EXPECTED);
 80073a0:	2305      	movs	r3, #5
 80073a2:	2287      	movs	r2, #135	; 0x87
 80073a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073a8:	2008      	movs	r0, #8
 80073aa:	f7ff fe4f 	bl	800704c <SD_SendCmd>
 80073ae:	6078      	str	r0, [r7, #4]
  SD_IO_CSState(1);
 80073b0:	2001      	movs	r0, #1
 80073b2:	f7ff fb33 	bl	8006a1c <SD_IO_CSState>
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80073b6:	1cbb      	adds	r3, r7, #2
 80073b8:	2101      	movs	r1, #1
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 f994 	bl	80076e8 <BSP_SPI2_Send>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <SD_GoIdleState+0x84>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80073c6:	f06f 0303 	mvn.w	r3, #3
 80073ca:	e0cb      	b.n	8007564 <SD_GoIdleState+0x21c>
  }
  else if(((uint8_t)(response & 0xFFU)  & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d030      	beq.n	800743a <SD_GoIdleState+0xf2>
    /* initialise card V1 */
    do
    {
      /* initialise card V1 */
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80073d8:	2300      	movs	r3, #0
 80073da:	22ff      	movs	r2, #255	; 0xff
 80073dc:	2100      	movs	r1, #0
 80073de:	2037      	movs	r0, #55	; 0x37
 80073e0:	f7ff fe34 	bl	800704c <SD_SendCmd>
      SD_IO_CSState(1);
 80073e4:	2001      	movs	r0, #1
 80073e6:	f7ff fb19 	bl	8006a1c <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80073ea:	1cbb      	adds	r3, r7, #2
 80073ec:	2101      	movs	r1, #1
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 f97a 	bl	80076e8 <BSP_SPI2_Send>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <SD_GoIdleState+0xb8>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 80073fa:	f06f 0303 	mvn.w	r3, #3
 80073fe:	e0b1      	b.n	8007564 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007400:	2300      	movs	r3, #0
 8007402:	22ff      	movs	r2, #255	; 0xff
 8007404:	2100      	movs	r1, #0
 8007406:	2029      	movs	r0, #41	; 0x29
 8007408:	f7ff fe20 	bl	800704c <SD_SendCmd>
 800740c:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 800740e:	2001      	movs	r0, #1
 8007410:	f7ff fb04 	bl	8006a1c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007414:	1cbb      	adds	r3, r7, #2
 8007416:	2101      	movs	r1, #1
 8007418:	4618      	mov	r0, r3
 800741a:	f000 f965 	bl	80076e8 <BSP_SPI2_Send>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <SD_GoIdleState+0xe2>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8007424:	f06f 0303 	mvn.w	r3, #3
 8007428:	e09c      	b.n	8007564 <SD_GoIdleState+0x21c>
        }
      }
    }
    while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b01      	cmp	r3, #1
 8007430:	d0d2      	beq.n	80073d8 <SD_GoIdleState+0x90>
    CardType = MY_CARD_SDSC;
 8007432:	4b4e      	ldr	r3, [pc, #312]	; (800756c <SD_GoIdleState+0x224>)
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	e093      	b.n	8007562 <SD_GoIdleState+0x21a>
  }
  else if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b01      	cmp	r3, #1
 8007440:	f040 808c 	bne.w	800755c <SD_GoIdleState+0x214>
  {
    /* initialise card V2 */
    do {
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007444:	2300      	movs	r3, #0
 8007446:	22ff      	movs	r2, #255	; 0xff
 8007448:	2100      	movs	r1, #0
 800744a:	2037      	movs	r0, #55	; 0x37
 800744c:	f7ff fdfe 	bl	800704c <SD_SendCmd>
      SD_IO_CSState(1);
 8007450:	2001      	movs	r0, #1
 8007452:	f7ff fae3 	bl	8006a1c <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007456:	1cbb      	adds	r3, r7, #2
 8007458:	2101      	movs	r1, #1
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f944 	bl	80076e8 <BSP_SPI2_Send>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <SD_GoIdleState+0x124>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8007466:	f06f 0303 	mvn.w	r3, #3
 800746a:	e07b      	b.n	8007564 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800746c:	2300      	movs	r3, #0
 800746e:	22ff      	movs	r2, #255	; 0xff
 8007470:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007474:	2029      	movs	r0, #41	; 0x29
 8007476:	f7ff fde9 	bl	800704c <SD_SendCmd>
 800747a:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 800747c:	2001      	movs	r0, #1
 800747e:	f7ff facd 	bl	8006a1c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007482:	1cbb      	adds	r3, r7, #2
 8007484:	2101      	movs	r1, #1
 8007486:	4618      	mov	r0, r3
 8007488:	f000 f92e 	bl	80076e8 <BSP_SPI2_Send>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <SD_GoIdleState+0x150>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8007492:	f06f 0303 	mvn.w	r3, #3
 8007496:	e065      	b.n	8007564 <SD_GoIdleState+0x21c>
        }
      }
    }
    while(((uint8_t)response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b01      	cmp	r3, #1
 800749e:	d0d1      	beq.n	8007444 <SD_GoIdleState+0xfc>

    if(((uint8_t)(response & 0xFFU) & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d033      	beq.n	8007514 <SD_GoIdleState+0x1cc>
    {
      do {
        /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
        (void)SD_SendCmd(SD_CMD_APP_CMD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80074ac:	2300      	movs	r3, #0
 80074ae:	22ff      	movs	r2, #255	; 0xff
 80074b0:	2100      	movs	r1, #0
 80074b2:	2037      	movs	r0, #55	; 0x37
 80074b4:	f7ff fdca 	bl	800704c <SD_SendCmd>
        SD_IO_CSState(1);
 80074b8:	2001      	movs	r0, #1
 80074ba:	f7ff faaf 	bl	8006a1c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80074be:	1cbb      	adds	r3, r7, #2
 80074c0:	2101      	movs	r1, #1
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f910 	bl	80076e8 <BSP_SPI2_Send>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <SD_GoIdleState+0x18c>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 80074ce:	f06f 0303 	mvn.w	r3, #3
 80074d2:	e047      	b.n	8007564 <SD_GoIdleState+0x21c>
        }
        else
        {
          if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d002      	beq.n	80074e2 <SD_GoIdleState+0x19a>
          {
            return BSP_ERROR_UNKNOWN_FAILURE;
 80074dc:	f06f 0305 	mvn.w	r3, #5
 80074e0:	e040      	b.n	8007564 <SD_GoIdleState+0x21c>
          }
          /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80074e2:	2300      	movs	r3, #0
 80074e4:	22ff      	movs	r2, #255	; 0xff
 80074e6:	2100      	movs	r1, #0
 80074e8:	2029      	movs	r0, #41	; 0x29
 80074ea:	f7ff fdaf 	bl	800704c <SD_SendCmd>
 80074ee:	6078      	str	r0, [r7, #4]
          SD_IO_CSState(1);
 80074f0:	2001      	movs	r0, #1
 80074f2:	f7ff fa93 	bl	8006a1c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80074f6:	1cbb      	adds	r3, r7, #2
 80074f8:	2101      	movs	r1, #1
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 f8f4 	bl	80076e8 <BSP_SPI2_Send>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <SD_GoIdleState+0x1c4>
          {
            return BSP_ERROR_PERIPH_FAILURE;
 8007506:	f06f 0303 	mvn.w	r3, #3
 800750a:	e02b      	b.n	8007564 <SD_GoIdleState+0x21c>
          }
        }
      }
      while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	d0cb      	beq.n	80074ac <SD_GoIdleState+0x164>
    }

    /* Send CMD58 (SD_CMD_READ_OCR) to initialize SDHC or SDXC cards: R3 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R3_EXPECTED);
 8007514:	2303      	movs	r3, #3
 8007516:	22ff      	movs	r2, #255	; 0xff
 8007518:	2100      	movs	r1, #0
 800751a:	203a      	movs	r0, #58	; 0x3a
 800751c:	f7ff fd96 	bl	800704c <SD_SendCmd>
 8007520:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 8007522:	2001      	movs	r0, #1
 8007524:	f7ff fa7a 	bl	8006a1c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007528:	1cbb      	adds	r3, r7, #2
 800752a:	2101      	movs	r1, #1
 800752c:	4618      	mov	r0, r3
 800752e:	f000 f8db 	bl	80076e8 <BSP_SPI2_Send>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <SD_GoIdleState+0x1f6>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007538:	f06f 0303 	mvn.w	r3, #3
 800753c:	e012      	b.n	8007564 <SD_GoIdleState+0x21c>
    }
    else
    {
      if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <SD_GoIdleState+0x204>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 8007546:	f06f 0305 	mvn.w	r3, #5
 800754a:	e00b      	b.n	8007564 <SD_GoIdleState+0x21c>
      }
      CardType = (uint32_t)(((response >> 8U) & 0x40U) >> 6U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	0a1b      	lsrs	r3, r3, #8
 8007550:	099b      	lsrs	r3, r3, #6
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	4a05      	ldr	r2, [pc, #20]	; (800756c <SD_GoIdleState+0x224>)
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	e002      	b.n	8007562 <SD_GoIdleState+0x21a>
    }
  }
  else
  {
    return BSP_ERROR_BUSY;
 800755c:	f06f 0302 	mvn.w	r3, #2
 8007560:	e000      	b.n	8007564 <SD_GoIdleState+0x21c>
  }

  return BSP_ERROR_NONE;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	20000044 	.word	0x20000044

08007570 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  Data data to be read
  * @retval BSP status
  */
static int32_t SD_ReadData(uint8_t *Data)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint8_t timeout = 0x08U;
 8007578:	2308      	movs	r3, #8
 800757a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  tmp = SD_DUMMY_BYTE;
 800757c:	23ff      	movs	r3, #255	; 0xff
 800757e:	73bb      	strb	r3, [r7, #14]
  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, Data, 1) != BSP_ERROR_NONE)
 8007580:	f107 030e 	add.w	r3, r7, #14
 8007584:	2201      	movs	r2, #1
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f8e5 	bl	8007758 <BSP_SPI2_SendRecv>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <SD_ReadData+0x2a>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007594:	f06f 0303 	mvn.w	r3, #3
 8007598:	e010      	b.n	80075bc <SD_ReadData+0x4c>
    }
    timeout--;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	3b01      	subs	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]

  }while ((*Data == SD_DUMMY_BYTE) && (timeout != 0U));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2bff      	cmp	r3, #255	; 0xff
 80075a6:	d102      	bne.n	80075ae <SD_ReadData+0x3e>
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e8      	bne.n	8007580 <SD_ReadData+0x10>

  if (timeout == 0U)
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d102      	bne.n	80075ba <SD_ReadData+0x4a>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 80075b4:	f06f 0302 	mvn.w	r3, #2
 80075b8:	e000      	b.n	80075bc <SD_ReadData+0x4c>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <SD_WaitData>:
  * @brief  Waits a data from the SD card
  * @param  data  Expected data from the SD card
  * @retval BSP status
  */
static int32_t SD_WaitData(uint8_t Data)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	71fb      	strb	r3, [r7, #7]
  uint16_t timeout = 0xFFFF;
 80075ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075d2:	81fb      	strh	r3, [r7, #14]
  uint8_t readvalue, tmp;

  tmp = SD_DUMMY_BYTE;
 80075d4:	23ff      	movs	r3, #255	; 0xff
 80075d6:	733b      	strb	r3, [r7, #12]

  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, &readvalue, 1) != BSP_ERROR_NONE)
 80075d8:	f107 010d 	add.w	r1, r7, #13
 80075dc:	f107 030c 	add.w	r3, r7, #12
 80075e0:	2201      	movs	r2, #1
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 f8b8 	bl	8007758 <BSP_SPI2_SendRecv>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <SD_WaitData+0x30>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80075ee:	f06f 0303 	mvn.w	r3, #3
 80075f2:	e010      	b.n	8007616 <SD_WaitData+0x52>
    }
    timeout--;
 80075f4:	89fb      	ldrh	r3, [r7, #14]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	81fb      	strh	r3, [r7, #14]
  }while ((readvalue != Data) && (timeout != 0U));
 80075fa:	7b7b      	ldrb	r3, [r7, #13]
 80075fc:	79fa      	ldrb	r2, [r7, #7]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d002      	beq.n	8007608 <SD_WaitData+0x44>
 8007602:	89fb      	ldrh	r3, [r7, #14]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e7      	bne.n	80075d8 <SD_WaitData+0x14>

  if (timeout == 0U)
 8007608:	89fb      	ldrh	r3, [r7, #14]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <SD_WaitData+0x50>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 800760e:	f06f 0302 	mvn.w	r3, #2
 8007612:	e000      	b.n	8007616 <SD_WaitData+0x52>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <SPI_IO_Delay>:
  * @brief  SPI IO delay
  * @param  Delay  Delay in ms
  * @retval None
  */
static void SPI_IO_Delay(uint32_t Delay)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  int32_t tickstart;
  tickstart = BSP_GetTick();
 8007626:	f000 f8b7 	bl	8007798 <BSP_GetTick>
 800762a:	60f8      	str	r0, [r7, #12]
  while((BSP_GetTick() - tickstart) < (int32_t)Delay)
 800762c:	bf00      	nop
 800762e:	f000 f8b3 	bl	8007798 <BSP_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	429a      	cmp	r2, r3
 800763c:	dbf7      	blt.n	800762e <SPI_IO_Delay+0x10>
  {
  }
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <BSP_SPI2_Init>:

static void SPI_MspInit(SPI_HandleTypeDef *hspi);
static void SPI_MspDeInit(SPI_HandleTypeDef *hspi);

int32_t BSP_SPI2_Init(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hSpiHandle) == HAL_SPI_STATE_RESET)
 800764c:	480a      	ldr	r0, [pc, #40]	; (8007678 <BSP_SPI2_Init+0x30>)
 800764e:	f7fc fda4 	bl	800419a <HAL_SPI_GetState>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10b      	bne.n	8007670 <BSP_SPI2_Init+0x28>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI_MspInit(&hSpiHandle);
 8007658:	4807      	ldr	r0, [pc, #28]	; (8007678 <BSP_SPI2_Init+0x30>)
 800765a:	f000 f8a5 	bl	80077a8 <SPI_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_BSP_SPI2_Init(&hSpiHandle) != HAL_OK)
 800765e:	4806      	ldr	r0, [pc, #24]	; (8007678 <BSP_SPI2_Init+0x30>)
 8007660:	f000 f80c 	bl	800767c <MX_BSP_SPI2_Init>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <BSP_SPI2_Init+0x28>
    {
      return BSP_ERROR_BUS_FAILURE;
 800766a:	f06f 0307 	mvn.w	r3, #7
 800766e:	e000      	b.n	8007672 <BSP_SPI2_Init+0x2a>
    }
  }
  return BSP_ERROR_NONE;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000e94 	.word	0x20000e94

0800767c <MX_BSP_SPI2_Init>:
  * @brief  MX SPI initialization.
  * @param  hspi SPI handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_BSP_SPI2_Init(SPI_HandleTypeDef *hspi)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* SPI Config */
  hspi->Instance               = NUCLEO_SPI;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a17      	ldr	r2, [pc, #92]	; (80076e4 <MX_BSP_SPI2_Init+0x68>)
 8007688:	601a      	str	r2, [r3, #0]
  hspi->Init.BaudRatePrescaler = NUCLEO_SPI_BAUDRATEPRESCALER;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2210      	movs	r2, #16
 800768e:	61da      	str	r2, [r3, #28]
  hspi->Init.Direction         = SPI_DIRECTION_2LINES;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	609a      	str	r2, [r3, #8]
  hspi->Init.CLKPhase          = SPI_PHASE_2EDGE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	615a      	str	r2, [r3, #20]
  hspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	611a      	str	r2, [r3, #16]
  hspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial     = 7;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2207      	movs	r2, #7
 80076ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80076b4:	60da      	str	r2, [r3, #12]
  hspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	621a      	str	r2, [r3, #32]
  hspi->Init.NSS               = SPI_NSS_SOFT;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076c2:	619a      	str	r2, [r3, #24]
  hspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.Mode              = SPI_MODE_MASTER;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80076d0:	605a      	str	r2, [r3, #4]

  return HAL_SPI_Init(hspi);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fc f82e 	bl	8003734 <HAL_SPI_Init>
 80076d8:	4603      	mov	r3, r0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	40003800 	.word	0x40003800

080076e8 <BSP_SPI2_Send>:
  * @param  pTxData pointer to TX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pTxData, uint32_t Length)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hSpiHandle, pTxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	4806      	ldr	r0, [pc, #24]	; (800771c <BSP_SPI2_Send+0x34>)
 8007702:	f7fc f8a9 	bl	8003858 <HAL_SPI_Transmit>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <BSP_SPI2_Send+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800770c:	f06f 0307 	mvn.w	r3, #7
 8007710:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007712:	68fb      	ldr	r3, [r7, #12]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000e94 	.word	0x20000e94

08007720 <BSP_SPI2_Recv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Recv(uint8_t *pRxData, uint32_t Length)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hSpiHandle, pRxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	b29a      	uxth	r2, r3
 8007732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4806      	ldr	r0, [pc, #24]	; (8007754 <BSP_SPI2_Recv+0x34>)
 800773a:	f7fc f9f3 	bl	8003b24 <HAL_SPI_Receive>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <BSP_SPI2_Recv+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007744:	f06f 0307 	mvn.w	r3, #7
 8007748:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800774a:	68fb      	ldr	r3, [r7, #12]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000e94 	.word	0x20000e94

08007758 <BSP_SPI2_SendRecv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint32_t Legnth)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af02      	add	r7, sp, #8
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hSpiHandle, pTxData, pRxData, (uint16_t)Legnth, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	b29a      	uxth	r2, r3
 800776c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	4613      	mov	r3, r2
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	4806      	ldr	r0, [pc, #24]	; (8007794 <BSP_SPI2_SendRecv+0x3c>)
 800777a:	f7fc fafb 	bl	8003d74 <HAL_SPI_TransmitReceive>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <BSP_SPI2_SendRecv+0x32>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007784:	f06f 0307 	mvn.w	r3, #7
 8007788:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800778a:	697b      	ldr	r3, [r7, #20]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000e94 	.word	0x20000e94

08007798 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800779c:	f7f9 fd00 	bl	80011a0 <HAL_GetTick>
 80077a0:	4603      	mov	r3, r0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <SPI_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi SPI handler
  * @retval None
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08c      	sub	sp, #48	; 0x30
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*** Configure the SPI peripheral ***/
  /* Enable SPI clock */
  NUCLEO_SPI_CLK_ENABLE();
 80077b0:	4b2e      	ldr	r3, [pc, #184]	; (800786c <SPI_MspInit+0xc4>)
 80077b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b4:	4a2d      	ldr	r2, [pc, #180]	; (800786c <SPI_MspInit+0xc4>)
 80077b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077ba:	6593      	str	r3, [r2, #88]	; 0x58
 80077bc:	4b2b      	ldr	r3, [pc, #172]	; (800786c <SPI_MspInit+0xc4>)
 80077be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077c4:	61bb      	str	r3, [r7, #24]
 80077c6:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  NUCLEO_SPI_SCK_GPIO_CLK_ENABLE();
 80077c8:	4b28      	ldr	r3, [pc, #160]	; (800786c <SPI_MspInit+0xc4>)
 80077ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077cc:	4a27      	ldr	r2, [pc, #156]	; (800786c <SPI_MspInit+0xc4>)
 80077ce:	f043 0301 	orr.w	r3, r3, #1
 80077d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <SPI_MspInit+0xc4>)
 80077d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	617b      	str	r3, [r7, #20]
 80077de:	697b      	ldr	r3, [r7, #20]
  NUCLEO_SPI_MOSI_GPIO_CLK_ENABLE();
 80077e0:	4b22      	ldr	r3, [pc, #136]	; (800786c <SPI_MspInit+0xc4>)
 80077e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e4:	4a21      	ldr	r2, [pc, #132]	; (800786c <SPI_MspInit+0xc4>)
 80077e6:	f043 0301 	orr.w	r3, r3, #1
 80077ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077ec:	4b1f      	ldr	r3, [pc, #124]	; (800786c <SPI_MspInit+0xc4>)
 80077ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPI_MISO_GPIO_CLK_ENABLE();
 80077f8:	4b1c      	ldr	r3, [pc, #112]	; (800786c <SPI_MspInit+0xc4>)
 80077fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fc:	4a1b      	ldr	r2, [pc, #108]	; (800786c <SPI_MspInit+0xc4>)
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007804:	4b19      	ldr	r3, [pc, #100]	; (800786c <SPI_MspInit+0xc4>)
 8007806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	68fb      	ldr	r3, [r7, #12]

  /* Configure SPI SCK */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_SCK_PIN;
 8007810:	2320      	movs	r3, #32
 8007812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007814:	2302      	movs	r3, #2
 8007816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007818:	2301      	movs	r3, #1
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800781c:	2303      	movs	r3, #3
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = NUCLEO_SPI_SCK_AF;
 8007820:	2305      	movs	r3, #5
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007824:	f107 031c 	add.w	r3, r7, #28
 8007828:	4619      	mov	r1, r3
 800782a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800782e:	f7fa fb45 	bl	8001ebc <HAL_GPIO_Init>

  /* Configure SPI MOSI */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_MOSI_PIN;
 8007832:	2380      	movs	r3, #128	; 0x80
 8007834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MOSI_AF;
 8007836:	2305      	movs	r3, #5
 8007838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 800783a:	2302      	movs	r3, #2
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800783e:	f107 031c 	add.w	r3, r7, #28
 8007842:	4619      	mov	r1, r3
 8007844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007848:	f7fa fb38 	bl	8001ebc <HAL_GPIO_Init>

  /* Configure SPI MISO */
  GPIO_InitStruct.Pin = NUCLEO_SPI_MISO_PIN;
 800784c:	2340      	movs	r3, #64	; 0x40
 800784e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MISO_AF;
 8007850:	2305      	movs	r3, #5
 8007852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8007854:	f107 031c 	add.w	r3, r7, #28
 8007858:	4619      	mov	r1, r3
 800785a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800785e:	f7fa fb2d 	bl	8001ebc <HAL_GPIO_Init>
}
 8007862:	bf00      	nop
 8007864:	3730      	adds	r7, #48	; 0x30
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	40021000 	.word	0x40021000

08007870 <USER_CheckStatus>:
#define DISABLE_SD_INIT
/* Private variables ---------------------------------------------------------*/
/* Disk status */
static volatile DSTATUS Stat = STA_NOINIT;
static DSTATUS USER_CheckStatus(BYTE lun)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800787a:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <USER_CheckStatus+0x3c>)
 800787c:	2201      	movs	r2, #1
 800787e:	701a      	strb	r2, [r3, #0]
  // TO DO:
  if(MY_SD_GetCardState(0) == BSP_ERROR_NONE)
 8007880:	2000      	movs	r0, #0
 8007882:	f7fe ffc7 	bl	8006814 <MY_SD_GetCardState>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d107      	bne.n	800789c <USER_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 800788c:	4b07      	ldr	r3, [pc, #28]	; (80078ac <USER_CheckStatus+0x3c>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	f023 0301 	bic.w	r3, r3, #1
 8007896:	b2da      	uxtb	r2, r3
 8007898:	4b04      	ldr	r3, [pc, #16]	; (80078ac <USER_CheckStatus+0x3c>)
 800789a:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800789c:	4b03      	ldr	r3, [pc, #12]	; (80078ac <USER_CheckStatus+0x3c>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	b2db      	uxtb	r3, r3
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	2000000c 	.word	0x2000000c

080078b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	4603      	mov	r3, r0
 80078b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80078ba:	4b09      	ldr	r3, [pc, #36]	; (80078e0 <USER_initialize+0x30>)
 80078bc:	2201      	movs	r2, #1
 80078be:	701a      	strb	r2, [r3, #0]
	  if(MY_SD_Init(0) == BSP_ERROR_NONE)
	  {
		Stat = USER_CheckStatus(pdrv);
	  }
	#else
	  Stat = USER_CheckStatus(pdrv);
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff ffd4 	bl	8007870 <USER_CheckStatus>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <USER_initialize+0x30>)
 80078ce:	701a      	strb	r2, [r3, #0]
	#endif
    return Stat;
 80078d0:	4b03      	ldr	r3, [pc, #12]	; (80078e0 <USER_initialize+0x30>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	2000000c 	.word	0x2000000c

080078e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_CheckStatus(pdrv);
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff ffbd 	bl	8007870 <USER_CheckStatus>
 80078f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	607a      	str	r2, [r7, #4]
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	DRESULT res = RES_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_ReadBlocks(0, (uint32_t*)buff,
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	68b9      	ldr	r1, [r7, #8]
 800791a:	2000      	movs	r0, #0
 800791c:	f7fe fdac 	bl	8006478 <MY_SD_ReadBlocks>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d108      	bne.n	8007938 <USER_read+0x38>
						   (uint32_t) (sector),
						   count) == BSP_ERROR_NONE)
	  {
		/* wait until the read operation is finished */
		while( MY_SD_GetCardState(0)!= BSP_ERROR_NONE)
 8007926:	bf00      	nop
 8007928:	2000      	movs	r0, #0
 800792a:	f7fe ff73 	bl	8006814 <MY_SD_GetCardState>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1f9      	bne.n	8007928 <USER_read+0x28>
		{
		}
		res = RES_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	75fb      	strb	r3, [r7, #23]
	  }
	  return res;
 8007938:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END READ */
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8007942:	b580      	push	{r7, lr}
 8007944:	b086      	sub	sp, #24
 8007946:	af00      	add	r7, sp, #0
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	603b      	str	r3, [r7, #0]
 800794e:	4603      	mov	r3, r0
 8007950:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	DRESULT res = RES_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_WriteBlocks(0, (uint32_t*)buff,
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	68b9      	ldr	r1, [r7, #8]
 800795c:	2000      	movs	r0, #0
 800795e:	f7fe fe57 	bl	8006610 <MY_SD_WriteBlocks>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d108      	bne.n	800797a <USER_write+0x38>
	                        (uint32_t)(sector),
	                        count) == BSP_ERROR_NONE)
	  {
	  /* wait until the Write operation is finished */
	    while(MY_SD_GetCardState(0) != BSP_ERROR_NONE)
 8007968:	bf00      	nop
 800796a:	2000      	movs	r0, #0
 800796c:	f7fe ff52 	bl	8006814 <MY_SD_GetCardState>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f9      	bne.n	800796a <USER_write+0x28>
	    {
	    }
	    res = RES_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	75fb      	strb	r3, [r7, #23]
	  }

	  return res;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END WRITE */
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b096      	sub	sp, #88	; 0x58
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	603a      	str	r2, [r7, #0]
 800798e:	71fb      	strb	r3, [r7, #7]
 8007990:	460b      	mov	r3, r1
 8007992:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  SD_CardInfo_t CardInfo;

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800799a:	4b26      	ldr	r3, [pc, #152]	; (8007a34 <USER_ioctl+0xb0>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <USER_ioctl+0x28>
 80079a8:	2303      	movs	r3, #3
 80079aa:	e03f      	b.n	8007a2c <USER_ioctl+0xa8>

	  switch (cmd)
 80079ac:	79bb      	ldrb	r3, [r7, #6]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d837      	bhi.n	8007a22 <USER_ioctl+0x9e>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <USER_ioctl+0x34>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079c9 	.word	0x080079c9
 80079bc:	080079d1 	.word	0x080079d1
 80079c0:	080079eb 	.word	0x080079eb
 80079c4:	08007a07 	.word	0x08007a07
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 80079ce:	e02b      	b.n	8007a28 <USER_ioctl+0xa4>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    MY_SD_GetCardInfo(0, &CardInfo);
 80079d0:	f107 0308 	add.w	r3, r7, #8
 80079d4:	4619      	mov	r1, r3
 80079d6:	2000      	movs	r0, #0
 80079d8:	f7fe ff54 	bl	8006884 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80079dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 80079e8:	e01e      	b.n	8007a28 <USER_ioctl+0xa4>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 80079ea:	f107 0308 	add.w	r3, r7, #8
 80079ee:	4619      	mov	r1, r3
 80079f0:	2000      	movs	r0, #0
 80079f2:	f7fe ff47 	bl	8006884 <MY_SD_GetCardInfo>
	    *(WORD*)buff = CardInfo.LogBlockSize;
 80079f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007a04:	e010      	b.n	8007a28 <USER_ioctl+0xa4>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007a06:	f107 0308 	add.w	r3, r7, #8
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	f7fe ff39 	bl	8006884 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a14:	0a5a      	lsrs	r2, r3, #9
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007a20:	e002      	b.n	8007a28 <USER_ioctl+0xa4>

	  default:
	    res = RES_PARERR;
 8007a22:	2304      	movs	r3, #4
 8007a24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  }

	  return res;
 8007a28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END IOCTL */
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3758      	adds	r7, #88	; 0x58
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	2000000c 	.word	0x2000000c

08007a38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	4a08      	ldr	r2, [pc, #32]	; (8007a68 <disk_status+0x30>)
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	79fa      	ldrb	r2, [r7, #7]
 8007a50:	4905      	ldr	r1, [pc, #20]	; (8007a68 <disk_status+0x30>)
 8007a52:	440a      	add	r2, r1
 8007a54:	7a12      	ldrb	r2, [r2, #8]
 8007a56:	4610      	mov	r0, r2
 8007a58:	4798      	blx	r3
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	20000070 	.word	0x20000070

08007a6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	4603      	mov	r3, r0
 8007a74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	4a0d      	ldr	r2, [pc, #52]	; (8007ab4 <disk_initialize+0x48>)
 8007a7e:	5cd3      	ldrb	r3, [r2, r3]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d111      	bne.n	8007aa8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	4a0b      	ldr	r2, [pc, #44]	; (8007ab4 <disk_initialize+0x48>)
 8007a88:	2101      	movs	r1, #1
 8007a8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007a8c:	79fb      	ldrb	r3, [r7, #7]
 8007a8e:	4a09      	ldr	r2, [pc, #36]	; (8007ab4 <disk_initialize+0x48>)
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	79fa      	ldrb	r2, [r7, #7]
 8007a9a:	4906      	ldr	r1, [pc, #24]	; (8007ab4 <disk_initialize+0x48>)
 8007a9c:	440a      	add	r2, r1
 8007a9e:	7a12      	ldrb	r2, [r2, #8]
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4798      	blx	r3
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000070 	.word	0x20000070

08007ab8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	603b      	str	r3, [r7, #0]
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	4a0a      	ldr	r2, [pc, #40]	; (8007af4 <disk_read+0x3c>)
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	689c      	ldr	r4, [r3, #8]
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	4a07      	ldr	r2, [pc, #28]	; (8007af4 <disk_read+0x3c>)
 8007ad8:	4413      	add	r3, r2
 8007ada:	7a18      	ldrb	r0, [r3, #8]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	47a0      	blx	r4
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	371c      	adds	r7, #28
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd90      	pop	{r4, r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20000070 	.word	0x20000070

08007af8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007af8:	b590      	push	{r4, r7, lr}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	4603      	mov	r3, r0
 8007b06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	4a0a      	ldr	r2, [pc, #40]	; (8007b34 <disk_write+0x3c>)
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	68dc      	ldr	r4, [r3, #12]
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	4a07      	ldr	r2, [pc, #28]	; (8007b34 <disk_write+0x3c>)
 8007b18:	4413      	add	r3, r2
 8007b1a:	7a18      	ldrb	r0, [r3, #8]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	68b9      	ldr	r1, [r7, #8]
 8007b22:	47a0      	blx	r4
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]
  return res;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd90      	pop	{r4, r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000070 	.word	0x20000070

08007b38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	603a      	str	r2, [r7, #0]
 8007b42:	71fb      	strb	r3, [r7, #7]
 8007b44:	460b      	mov	r3, r1
 8007b46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	4a09      	ldr	r2, [pc, #36]	; (8007b70 <disk_ioctl+0x38>)
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	79fa      	ldrb	r2, [r7, #7]
 8007b56:	4906      	ldr	r1, [pc, #24]	; (8007b70 <disk_ioctl+0x38>)
 8007b58:	440a      	add	r2, r1
 8007b5a:	7a10      	ldrb	r0, [r2, #8]
 8007b5c:	79b9      	ldrb	r1, [r7, #6]
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	4798      	blx	r3
 8007b62:	4603      	mov	r3, r0
 8007b64:	73fb      	strb	r3, [r7, #15]
  return res;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20000070 	.word	0x20000070

08007b74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007b84:	89fb      	ldrh	r3, [r7, #14]
 8007b86:	021b      	lsls	r3, r3, #8
 8007b88:	b21a      	sxth	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	b21b      	sxth	r3, r3
 8007b90:	4313      	orrs	r3, r2
 8007b92:	b21b      	sxth	r3, r3
 8007b94:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007b96:	89fb      	ldrh	r3, [r7, #14]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3303      	adds	r3, #3
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	021b      	lsls	r3, r3, #8
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	3202      	adds	r2, #2
 8007bbc:	7812      	ldrb	r2, [r2, #0]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	3201      	adds	r2, #1
 8007bca:	7812      	ldrb	r2, [r2, #0]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	7812      	ldrb	r2, [r2, #0]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
	return rv;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	887a      	ldrh	r2, [r7, #2]
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	887b      	ldrh	r3, [r7, #2]
 8007c04:	0a1b      	lsrs	r3, r3, #8
 8007c06:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	607a      	str	r2, [r7, #4]
 8007c0e:	887a      	ldrh	r2, [r7, #2]
 8007c10:	b2d2      	uxtb	r2, r2
 8007c12:	701a      	strb	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	0a1b      	lsrs	r3, r3, #8
 8007c3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	b2d2      	uxtb	r2, r2
 8007c46:	701a      	strb	r2, [r3, #0]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	0a1b      	lsrs	r3, r3, #8
 8007c4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	b2d2      	uxtb	r2, r2
 8007c58:	701a      	strb	r2, [r3, #0]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	0a1b      	lsrs	r3, r3, #8
 8007c5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	607a      	str	r2, [r7, #4]
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	b2d2      	uxtb	r2, r2
 8007c6a:	701a      	strb	r2, [r3, #0]
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00d      	beq.n	8007cae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	1c53      	adds	r3, r2, #1
 8007c96:	613b      	str	r3, [r7, #16]
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	1c59      	adds	r1, r3, #1
 8007c9c:	6179      	str	r1, [r7, #20]
 8007c9e:	7812      	ldrb	r2, [r2, #0]
 8007ca0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	607b      	str	r3, [r7, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1f1      	bne.n	8007c92 <mem_cpy+0x1a>
	}
}
 8007cae:	bf00      	nop
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007cba:	b480      	push	{r7}
 8007cbc:	b087      	sub	sp, #28
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	617a      	str	r2, [r7, #20]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	607b      	str	r3, [r7, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f3      	bne.n	8007cca <mem_set+0x10>
}
 8007ce2:	bf00      	nop
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007cee:	b480      	push	{r7}
 8007cf0:	b089      	sub	sp, #36	; 0x24
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007d02:	2300      	movs	r3, #0
 8007d04:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	61fa      	str	r2, [r7, #28]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	61ba      	str	r2, [r7, #24]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	1acb      	subs	r3, r1, r3
 8007d1a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	607b      	str	r3, [r7, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <mem_cmp+0x40>
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0eb      	beq.n	8007d06 <mem_cmp+0x18>

	return r;
 8007d2e:	697b      	ldr	r3, [r7, #20]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3724      	adds	r7, #36	; 0x24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007d46:	e002      	b.n	8007d4e <chk_chr+0x12>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	607b      	str	r3, [r7, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <chk_chr+0x26>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d1f2      	bne.n	8007d48 <chk_chr+0xc>
	return *str;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	781b      	ldrb	r3, [r3, #0]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
	...

08007d74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e029      	b.n	8007ddc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007d88:	4a27      	ldr	r2, [pc, #156]	; (8007e28 <chk_lock+0xb4>)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	4413      	add	r3, r2
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d01d      	beq.n	8007dd2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007d96:	4a24      	ldr	r2, [pc, #144]	; (8007e28 <chk_lock+0xb4>)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	4413      	add	r3, r2
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d116      	bne.n	8007dd6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007da8:	4a1f      	ldr	r2, [pc, #124]	; (8007e28 <chk_lock+0xb4>)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	4413      	add	r3, r2
 8007db0:	3304      	adds	r3, #4
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d10c      	bne.n	8007dd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007dbc:	4a1a      	ldr	r2, [pc, #104]	; (8007e28 <chk_lock+0xb4>)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	011b      	lsls	r3, r3, #4
 8007dc2:	4413      	add	r3, r2
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d102      	bne.n	8007dd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007dd0:	e007      	b.n	8007de2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d9d2      	bls.n	8007d88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d109      	bne.n	8007dfc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <chk_lock+0x80>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d101      	bne.n	8007df8 <chk_lock+0x84>
 8007df4:	2300      	movs	r3, #0
 8007df6:	e010      	b.n	8007e1a <chk_lock+0xa6>
 8007df8:	2312      	movs	r3, #18
 8007dfa:	e00e      	b.n	8007e1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d108      	bne.n	8007e14 <chk_lock+0xa0>
 8007e02:	4a09      	ldr	r2, [pc, #36]	; (8007e28 <chk_lock+0xb4>)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	4413      	add	r3, r2
 8007e0a:	330c      	adds	r3, #12
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e12:	d101      	bne.n	8007e18 <chk_lock+0xa4>
 8007e14:	2310      	movs	r3, #16
 8007e16:	e000      	b.n	8007e1a <chk_lock+0xa6>
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20000050 	.word	0x20000050

08007e2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007e32:	2300      	movs	r3, #0
 8007e34:	607b      	str	r3, [r7, #4]
 8007e36:	e002      	b.n	8007e3e <enq_lock+0x12>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	607b      	str	r3, [r7, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d806      	bhi.n	8007e52 <enq_lock+0x26>
 8007e44:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <enq_lock+0x40>)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	4413      	add	r3, r2
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1f2      	bne.n	8007e38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	bf14      	ite	ne
 8007e58:	2301      	movne	r3, #1
 8007e5a:	2300      	moveq	r3, #0
 8007e5c:	b2db      	uxtb	r3, r3
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20000050 	.word	0x20000050

08007e70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	e01f      	b.n	8007ec0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007e80:	4a41      	ldr	r2, [pc, #260]	; (8007f88 <inc_lock+0x118>)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	4413      	add	r3, r2
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d113      	bne.n	8007eba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007e92:	4a3d      	ldr	r2, [pc, #244]	; (8007f88 <inc_lock+0x118>)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	4413      	add	r3, r2
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d109      	bne.n	8007eba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007ea6:	4a38      	ldr	r2, [pc, #224]	; (8007f88 <inc_lock+0x118>)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	4413      	add	r3, r2
 8007eae:	3308      	adds	r3, #8
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d006      	beq.n	8007ec8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d9dc      	bls.n	8007e80 <inc_lock+0x10>
 8007ec6:	e000      	b.n	8007eca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007ec8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d132      	bne.n	8007f36 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	e002      	b.n	8007edc <inc_lock+0x6c>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d806      	bhi.n	8007ef0 <inc_lock+0x80>
 8007ee2:	4a29      	ldr	r2, [pc, #164]	; (8007f88 <inc_lock+0x118>)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	4413      	add	r3, r2
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1f2      	bne.n	8007ed6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d101      	bne.n	8007efa <inc_lock+0x8a>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	e040      	b.n	8007f7c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4922      	ldr	r1, [pc, #136]	; (8007f88 <inc_lock+0x118>)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	440b      	add	r3, r1
 8007f06:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	491e      	ldr	r1, [pc, #120]	; (8007f88 <inc_lock+0x118>)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	011b      	lsls	r3, r3, #4
 8007f12:	440b      	add	r3, r1
 8007f14:	3304      	adds	r3, #4
 8007f16:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	695a      	ldr	r2, [r3, #20]
 8007f1c:	491a      	ldr	r1, [pc, #104]	; (8007f88 <inc_lock+0x118>)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	011b      	lsls	r3, r3, #4
 8007f22:	440b      	add	r3, r1
 8007f24:	3308      	adds	r3, #8
 8007f26:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007f28:	4a17      	ldr	r2, [pc, #92]	; (8007f88 <inc_lock+0x118>)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	4413      	add	r3, r2
 8007f30:	330c      	adds	r3, #12
 8007f32:	2200      	movs	r2, #0
 8007f34:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <inc_lock+0xe0>
 8007f3c:	4a12      	ldr	r2, [pc, #72]	; (8007f88 <inc_lock+0x118>)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	4413      	add	r3, r2
 8007f44:	330c      	adds	r3, #12
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <inc_lock+0xe0>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	e015      	b.n	8007f7c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d108      	bne.n	8007f68 <inc_lock+0xf8>
 8007f56:	4a0c      	ldr	r2, [pc, #48]	; (8007f88 <inc_lock+0x118>)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	011b      	lsls	r3, r3, #4
 8007f5c:	4413      	add	r3, r2
 8007f5e:	330c      	adds	r3, #12
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	3301      	adds	r3, #1
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	e001      	b.n	8007f6c <inc_lock+0xfc>
 8007f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f6c:	4906      	ldr	r1, [pc, #24]	; (8007f88 <inc_lock+0x118>)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	440b      	add	r3, r1
 8007f74:	330c      	adds	r3, #12
 8007f76:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3301      	adds	r3, #1
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	20000050 	.word	0x20000050

08007f8c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	607b      	str	r3, [r7, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d825      	bhi.n	8007fec <dec_lock+0x60>
		n = Files[i].ctr;
 8007fa0:	4a17      	ldr	r2, [pc, #92]	; (8008000 <dec_lock+0x74>)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	4413      	add	r3, r2
 8007fa8:	330c      	adds	r3, #12
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007fae:	89fb      	ldrh	r3, [r7, #14]
 8007fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb4:	d101      	bne.n	8007fba <dec_lock+0x2e>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007fba:	89fb      	ldrh	r3, [r7, #14]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <dec_lock+0x3a>
 8007fc0:	89fb      	ldrh	r3, [r7, #14]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007fc6:	4a0e      	ldr	r2, [pc, #56]	; (8008000 <dec_lock+0x74>)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	4413      	add	r3, r2
 8007fce:	330c      	adds	r3, #12
 8007fd0:	89fa      	ldrh	r2, [r7, #14]
 8007fd2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007fd4:	89fb      	ldrh	r3, [r7, #14]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d105      	bne.n	8007fe6 <dec_lock+0x5a>
 8007fda:	4a09      	ldr	r2, [pc, #36]	; (8008000 <dec_lock+0x74>)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	4413      	add	r3, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	737b      	strb	r3, [r7, #13]
 8007fea:	e001      	b.n	8007ff0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007fec:	2302      	movs	r3, #2
 8007fee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007ff0:	7b7b      	ldrb	r3, [r7, #13]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000050 	.word	0x20000050

08008004 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	e010      	b.n	8008034 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008012:	4a0d      	ldr	r2, [pc, #52]	; (8008048 <clear_lock+0x44>)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	4413      	add	r3, r2
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	429a      	cmp	r2, r3
 8008020:	d105      	bne.n	800802e <clear_lock+0x2a>
 8008022:	4a09      	ldr	r2, [pc, #36]	; (8008048 <clear_lock+0x44>)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	4413      	add	r3, r2
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3301      	adds	r3, #1
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d9eb      	bls.n	8008012 <clear_lock+0xe>
	}
}
 800803a:	bf00      	nop
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	20000050 	.word	0x20000050

0800804c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	78db      	ldrb	r3, [r3, #3]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d034      	beq.n	80080ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008064:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	7858      	ldrb	r0, [r3, #1]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008070:	2301      	movs	r3, #1
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	f7ff fd40 	bl	8007af8 <disk_write>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <sync_window+0x38>
			res = FR_DISK_ERR;
 800807e:	2301      	movs	r3, #1
 8008080:	73fb      	strb	r3, [r7, #15]
 8008082:	e022      	b.n	80080ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	1ad2      	subs	r2, r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	429a      	cmp	r2, r3
 8008098:	d217      	bcs.n	80080ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	789b      	ldrb	r3, [r3, #2]
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	e010      	b.n	80080c4 <sync_window+0x78>
					wsect += fs->fsize;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4413      	add	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	7858      	ldrb	r0, [r3, #1]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080b6:	2301      	movs	r3, #1
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	f7ff fd1d 	bl	8007af8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	613b      	str	r3, [r7, #16]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d8eb      	bhi.n	80080a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d01b      	beq.n	8008124 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff ffad 	bl	800804c <sync_window>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d113      	bne.n	8008124 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	7858      	ldrb	r0, [r3, #1]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008106:	2301      	movs	r3, #1
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	f7ff fcd5 	bl	8007ab8 <disk_read>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d004      	beq.n	800811e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008114:	f04f 33ff 	mov.w	r3, #4294967295
 8008118:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800811a:	2301      	movs	r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008124:	7bfb      	ldrb	r3, [r7, #15]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff ff87 	bl	800804c <sync_window>
 800813e:	4603      	mov	r3, r0
 8008140:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d158      	bne.n	80081fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b03      	cmp	r3, #3
 800814e:	d148      	bne.n	80081e2 <sync_fs+0xb2>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	791b      	ldrb	r3, [r3, #4]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d144      	bne.n	80081e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3330      	adds	r3, #48	; 0x30
 800815c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008160:	2100      	movs	r1, #0
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff fda9 	bl	8007cba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3330      	adds	r3, #48	; 0x30
 800816c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008170:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fd38 	bl	8007bea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3330      	adds	r3, #48	; 0x30
 800817e:	4921      	ldr	r1, [pc, #132]	; (8008204 <sync_fs+0xd4>)
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff fd4d 	bl	8007c20 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3330      	adds	r3, #48	; 0x30
 800818a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800818e:	491e      	ldr	r1, [pc, #120]	; (8008208 <sync_fs+0xd8>)
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff fd45 	bl	8007c20 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3330      	adds	r3, #48	; 0x30
 800819a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	4619      	mov	r1, r3
 80081a4:	4610      	mov	r0, r2
 80081a6:	f7ff fd3b 	bl	8007c20 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3330      	adds	r3, #48	; 0x30
 80081ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f7ff fd31 	bl	8007c20 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	7858      	ldrb	r0, [r3, #1]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d6:	2301      	movs	r3, #1
 80081d8:	f7ff fc8e 	bl	8007af8 <disk_write>
			fs->fsi_flag = 0;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	2200      	movs	r2, #0
 80081e8:	2100      	movs	r1, #0
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fca4 	bl	8007b38 <disk_ioctl>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <sync_fs+0xca>
 80081f6:	2301      	movs	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	41615252 	.word	0x41615252
 8008208:	61417272 	.word	0x61417272

0800820c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	3b02      	subs	r3, #2
 800821a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	3b02      	subs	r3, #2
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d301      	bcc.n	800822c <clust2sect+0x20>
 8008228:	2300      	movs	r3, #0
 800822a:	e008      	b.n	800823e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	895b      	ldrh	r3, [r3, #10]
 8008230:	461a      	mov	r2, r3
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	fb03 f202 	mul.w	r2, r3, r2
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823c:	4413      	add	r3, r2
}
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b086      	sub	sp, #24
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d904      	bls.n	800826a <get_fat+0x20>
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d302      	bcc.n	8008270 <get_fat+0x26>
		val = 1;	/* Internal error */
 800826a:	2301      	movs	r3, #1
 800826c:	617b      	str	r3, [r7, #20]
 800826e:	e08c      	b.n	800838a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008270:	f04f 33ff 	mov.w	r3, #4294967295
 8008274:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b02      	cmp	r3, #2
 800827c:	d045      	beq.n	800830a <get_fat+0xc0>
 800827e:	2b03      	cmp	r3, #3
 8008280:	d05d      	beq.n	800833e <get_fat+0xf4>
 8008282:	2b01      	cmp	r3, #1
 8008284:	d177      	bne.n	8008376 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	085b      	lsrs	r3, r3, #1
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4413      	add	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	6a1a      	ldr	r2, [r3, #32]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	0a5b      	lsrs	r3, r3, #9
 800829c:	4413      	add	r3, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	6938      	ldr	r0, [r7, #16]
 80082a2:	f7ff ff17 	bl	80080d4 <move_window>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d167      	bne.n	800837c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	60fa      	str	r2, [r7, #12]
 80082b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4413      	add	r3, r2
 80082ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082be:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	6a1a      	ldr	r2, [r3, #32]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	0a5b      	lsrs	r3, r3, #9
 80082c8:	4413      	add	r3, r2
 80082ca:	4619      	mov	r1, r3
 80082cc:	6938      	ldr	r0, [r7, #16]
 80082ce:	f7ff ff01 	bl	80080d4 <move_window>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d153      	bne.n	8008380 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4413      	add	r3, r2
 80082e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082e6:	021b      	lsls	r3, r3, #8
 80082e8:	461a      	mov	r2, r3
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <get_fat+0xb6>
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	091b      	lsrs	r3, r3, #4
 80082fe:	e002      	b.n	8008306 <get_fat+0xbc>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008306:	617b      	str	r3, [r7, #20]
			break;
 8008308:	e03f      	b.n	800838a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	6a1a      	ldr	r2, [r3, #32]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	0a1b      	lsrs	r3, r3, #8
 8008312:	4413      	add	r3, r2
 8008314:	4619      	mov	r1, r3
 8008316:	6938      	ldr	r0, [r7, #16]
 8008318:	f7ff fedc 	bl	80080d4 <move_window>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d130      	bne.n	8008384 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008330:	4413      	add	r3, r2
 8008332:	4618      	mov	r0, r3
 8008334:	f7ff fc1e 	bl	8007b74 <ld_word>
 8008338:	4603      	mov	r3, r0
 800833a:	617b      	str	r3, [r7, #20]
			break;
 800833c:	e025      	b.n	800838a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	6a1a      	ldr	r2, [r3, #32]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	09db      	lsrs	r3, r3, #7
 8008346:	4413      	add	r3, r2
 8008348:	4619      	mov	r1, r3
 800834a:	6938      	ldr	r0, [r7, #16]
 800834c:	f7ff fec2 	bl	80080d4 <move_window>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d118      	bne.n	8008388 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008364:	4413      	add	r3, r2
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff fc1c 	bl	8007ba4 <ld_dword>
 800836c:	4603      	mov	r3, r0
 800836e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008372:	617b      	str	r3, [r7, #20]
			break;
 8008374:	e009      	b.n	800838a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008376:	2301      	movs	r3, #1
 8008378:	617b      	str	r3, [r7, #20]
 800837a:	e006      	b.n	800838a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800837c:	bf00      	nop
 800837e:	e004      	b.n	800838a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008380:	bf00      	nop
 8008382:	e002      	b.n	800838a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008384:	bf00      	nop
 8008386:	e000      	b.n	800838a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008388:	bf00      	nop
		}
	}

	return val;
 800838a:	697b      	ldr	r3, [r7, #20]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008394:	b590      	push	{r4, r7, lr}
 8008396:	b089      	sub	sp, #36	; 0x24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80083a0:	2302      	movs	r3, #2
 80083a2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	f240 80d6 	bls.w	8008558 <put_fat+0x1c4>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	f080 80d0 	bcs.w	8008558 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d073      	beq.n	80084a8 <put_fat+0x114>
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	f000 8091 	beq.w	80084e8 <put_fat+0x154>
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	f040 80c6 	bne.w	8008558 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	61bb      	str	r3, [r7, #24]
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	085b      	lsrs	r3, r3, #1
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	4413      	add	r3, r2
 80083d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a1a      	ldr	r2, [r3, #32]
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	0a5b      	lsrs	r3, r3, #9
 80083e2:	4413      	add	r3, r2
 80083e4:	4619      	mov	r1, r3
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7ff fe74 	bl	80080d4 <move_window>
 80083ec:	4603      	mov	r3, r0
 80083ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083f0:	7ffb      	ldrb	r3, [r7, #31]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f040 80a9 	bne.w	800854a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	1c59      	adds	r1, r3, #1
 8008402:	61b9      	str	r1, [r7, #24]
 8008404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008408:	4413      	add	r3, r2
 800840a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00d      	beq.n	8008432 <put_fat+0x9e>
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	b25b      	sxtb	r3, r3
 800841c:	f003 030f 	and.w	r3, r3, #15
 8008420:	b25a      	sxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	b2db      	uxtb	r3, r3
 8008426:	011b      	lsls	r3, r3, #4
 8008428:	b25b      	sxtb	r3, r3
 800842a:	4313      	orrs	r3, r2
 800842c:	b25b      	sxtb	r3, r3
 800842e:	b2db      	uxtb	r3, r3
 8008430:	e001      	b.n	8008436 <put_fat+0xa2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a1a      	ldr	r2, [r3, #32]
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	0a5b      	lsrs	r3, r3, #9
 8008448:	4413      	add	r3, r2
 800844a:	4619      	mov	r1, r3
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f7ff fe41 	bl	80080d4 <move_window>
 8008452:	4603      	mov	r3, r0
 8008454:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008456:	7ffb      	ldrb	r3, [r7, #31]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d178      	bne.n	800854e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008468:	4413      	add	r3, r2
 800846a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <put_fat+0xea>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	091b      	lsrs	r3, r3, #4
 800847a:	b2db      	uxtb	r3, r3
 800847c:	e00e      	b.n	800849c <put_fat+0x108>
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	b25b      	sxtb	r3, r3
 8008484:	f023 030f 	bic.w	r3, r3, #15
 8008488:	b25a      	sxtb	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	0a1b      	lsrs	r3, r3, #8
 800848e:	b25b      	sxtb	r3, r3
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	b25b      	sxtb	r3, r3
 8008496:	4313      	orrs	r3, r2
 8008498:	b25b      	sxtb	r3, r3
 800849a:	b2db      	uxtb	r3, r3
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2201      	movs	r2, #1
 80084a4:	70da      	strb	r2, [r3, #3]
			break;
 80084a6:	e057      	b.n	8008558 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a1a      	ldr	r2, [r3, #32]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	0a1b      	lsrs	r3, r3, #8
 80084b0:	4413      	add	r3, r2
 80084b2:	4619      	mov	r1, r3
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f7ff fe0d 	bl	80080d4 <move_window>
 80084ba:	4603      	mov	r3, r0
 80084bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084be:	7ffb      	ldrb	r3, [r7, #31]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d146      	bne.n	8008552 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80084d2:	4413      	add	r3, r2
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	b292      	uxth	r2, r2
 80084d8:	4611      	mov	r1, r2
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff fb85 	bl	8007bea <st_word>
			fs->wflag = 1;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	70da      	strb	r2, [r3, #3]
			break;
 80084e6:	e037      	b.n	8008558 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a1a      	ldr	r2, [r3, #32]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	09db      	lsrs	r3, r3, #7
 80084f0:	4413      	add	r3, r2
 80084f2:	4619      	mov	r1, r3
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f7ff fded 	bl	80080d4 <move_window>
 80084fa:	4603      	mov	r3, r0
 80084fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084fe:	7ffb      	ldrb	r3, [r7, #31]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d128      	bne.n	8008556 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008518:	4413      	add	r3, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff fb42 	bl	8007ba4 <ld_dword>
 8008520:	4603      	mov	r3, r0
 8008522:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008526:	4323      	orrs	r3, r4
 8008528:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008538:	4413      	add	r3, r2
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fb6f 	bl	8007c20 <st_dword>
			fs->wflag = 1;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2201      	movs	r2, #1
 8008546:	70da      	strb	r2, [r3, #3]
			break;
 8008548:	e006      	b.n	8008558 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800854a:	bf00      	nop
 800854c:	e004      	b.n	8008558 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800854e:	bf00      	nop
 8008550:	e002      	b.n	8008558 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008552:	bf00      	nop
 8008554:	e000      	b.n	8008558 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008556:	bf00      	nop
		}
	}
	return res;
 8008558:	7ffb      	ldrb	r3, [r7, #31]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3724      	adds	r7, #36	; 0x24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd90      	pop	{r4, r7, pc}

08008562 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b088      	sub	sp, #32
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d904      	bls.n	8008588 <remove_chain+0x26>
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	429a      	cmp	r2, r3
 8008586:	d301      	bcc.n	800858c <remove_chain+0x2a>
 8008588:	2302      	movs	r3, #2
 800858a:	e04b      	b.n	8008624 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00c      	beq.n	80085ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008592:	f04f 32ff 	mov.w	r2, #4294967295
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	69b8      	ldr	r0, [r7, #24]
 800859a:	f7ff fefb 	bl	8008394 <put_fat>
 800859e:	4603      	mov	r3, r0
 80085a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80085a2:	7ffb      	ldrb	r3, [r7, #31]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <remove_chain+0x4a>
 80085a8:	7ffb      	ldrb	r3, [r7, #31]
 80085aa:	e03b      	b.n	8008624 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff fe4b 	bl	800824a <get_fat>
 80085b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d031      	beq.n	8008620 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <remove_chain+0x64>
 80085c2:	2302      	movs	r3, #2
 80085c4:	e02e      	b.n	8008624 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085cc:	d101      	bne.n	80085d2 <remove_chain+0x70>
 80085ce:	2301      	movs	r3, #1
 80085d0:	e028      	b.n	8008624 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80085d2:	2200      	movs	r2, #0
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	69b8      	ldr	r0, [r7, #24]
 80085d8:	f7ff fedc 	bl	8008394 <put_fat>
 80085dc:	4603      	mov	r3, r0
 80085de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80085e0:	7ffb      	ldrb	r3, [r7, #31]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <remove_chain+0x88>
 80085e6:	7ffb      	ldrb	r3, [r7, #31]
 80085e8:	e01c      	b.n	8008624 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	691a      	ldr	r2, [r3, #16]
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	3b02      	subs	r3, #2
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d20b      	bcs.n	8008610 <remove_chain+0xae>
			fs->free_clst++;
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	791b      	ldrb	r3, [r3, #4]
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	b2da      	uxtb	r2, r3
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	429a      	cmp	r2, r3
 800861c:	d3c6      	bcc.n	80085ac <remove_chain+0x4a>
 800861e:	e000      	b.n	8008622 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008620:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3720      	adds	r7, #32
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10d      	bne.n	800865e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d004      	beq.n	8008658 <create_chain+0x2c>
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	429a      	cmp	r2, r3
 8008656:	d31b      	bcc.n	8008690 <create_chain+0x64>
 8008658:	2301      	movs	r3, #1
 800865a:	61bb      	str	r3, [r7, #24]
 800865c:	e018      	b.n	8008690 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff fdf2 	bl	800824a <get_fat>
 8008666:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d801      	bhi.n	8008672 <create_chain+0x46>
 800866e:	2301      	movs	r3, #1
 8008670:	e070      	b.n	8008754 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008678:	d101      	bne.n	800867e <create_chain+0x52>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	e06a      	b.n	8008754 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	429a      	cmp	r2, r3
 8008686:	d201      	bcs.n	800868c <create_chain+0x60>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	e063      	b.n	8008754 <create_chain+0x128>
		scl = clst;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	3301      	adds	r3, #1
 8008698:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	69fa      	ldr	r2, [r7, #28]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d307      	bcc.n	80086b4 <create_chain+0x88>
				ncl = 2;
 80086a4:	2302      	movs	r3, #2
 80086a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d901      	bls.n	80086b4 <create_chain+0x88>
 80086b0:	2300      	movs	r3, #0
 80086b2:	e04f      	b.n	8008754 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80086b4:	69f9      	ldr	r1, [r7, #28]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff fdc7 	bl	800824a <get_fat>
 80086bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00e      	beq.n	80086e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d003      	beq.n	80086d2 <create_chain+0xa6>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d101      	bne.n	80086d6 <create_chain+0xaa>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	e03e      	b.n	8008754 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80086d6:	69fa      	ldr	r2, [r7, #28]
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d1da      	bne.n	8008694 <create_chain+0x68>
 80086de:	2300      	movs	r3, #0
 80086e0:	e038      	b.n	8008754 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80086e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80086e4:	f04f 32ff 	mov.w	r2, #4294967295
 80086e8:	69f9      	ldr	r1, [r7, #28]
 80086ea:	6938      	ldr	r0, [r7, #16]
 80086ec:	f7ff fe52 	bl	8008394 <put_fat>
 80086f0:	4603      	mov	r3, r0
 80086f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <create_chain+0xe2>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d006      	beq.n	800870e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008700:	69fa      	ldr	r2, [r7, #28]
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6938      	ldr	r0, [r7, #16]
 8008706:	f7ff fe45 	bl	8008394 <put_fat>
 800870a:	4603      	mov	r3, r0
 800870c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d116      	bne.n	8008742 <create_chain+0x116>
		fs->last_clst = ncl;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	69fa      	ldr	r2, [r7, #28]
 8008718:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	691a      	ldr	r2, [r3, #16]
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	3b02      	subs	r3, #2
 8008724:	429a      	cmp	r2, r3
 8008726:	d804      	bhi.n	8008732 <create_chain+0x106>
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	1e5a      	subs	r2, r3, #1
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	791b      	ldrb	r3, [r3, #4]
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	b2da      	uxtb	r2, r3
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	711a      	strb	r2, [r3, #4]
 8008740:	e007      	b.n	8008752 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d102      	bne.n	800874e <create_chain+0x122>
 8008748:	f04f 33ff 	mov.w	r3, #4294967295
 800874c:	e000      	b.n	8008750 <create_chain+0x124>
 800874e:	2301      	movs	r3, #1
 8008750:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008752:	69fb      	ldr	r3, [r7, #28]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3720      	adds	r7, #32
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008770:	3304      	adds	r3, #4
 8008772:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	0a5b      	lsrs	r3, r3, #9
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	8952      	ldrh	r2, [r2, #10]
 800877c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008780:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	1d1a      	adds	r2, r3, #4
 8008786:	613a      	str	r2, [r7, #16]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <clmt_clust+0x3a>
 8008792:	2300      	movs	r3, #0
 8008794:	e010      	b.n	80087b8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	429a      	cmp	r2, r3
 800879c:	d307      	bcc.n	80087ae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	3304      	adds	r3, #4
 80087aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80087ac:	e7e9      	b.n	8008782 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80087ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	4413      	add	r3, r2
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087da:	d204      	bcs.n	80087e6 <dir_sdi+0x22>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	f003 031f 	and.w	r3, r3, #31
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <dir_sdi+0x26>
		return FR_INT_ERR;
 80087e6:	2302      	movs	r3, #2
 80087e8:	e063      	b.n	80088b2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d106      	bne.n	800880a <dir_sdi+0x46>
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b02      	cmp	r3, #2
 8008802:	d902      	bls.n	800880a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10c      	bne.n	800882a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	095b      	lsrs	r3, r3, #5
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	8912      	ldrh	r2, [r2, #8]
 8008818:	4293      	cmp	r3, r2
 800881a:	d301      	bcc.n	8008820 <dir_sdi+0x5c>
 800881c:	2302      	movs	r3, #2
 800881e:	e048      	b.n	80088b2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	61da      	str	r2, [r3, #28]
 8008828:	e029      	b.n	800887e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	895b      	ldrh	r3, [r3, #10]
 800882e:	025b      	lsls	r3, r3, #9
 8008830:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008832:	e019      	b.n	8008868 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6979      	ldr	r1, [r7, #20]
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff fd06 	bl	800824a <get_fat>
 800883e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008846:	d101      	bne.n	800884c <dir_sdi+0x88>
 8008848:	2301      	movs	r3, #1
 800884a:	e032      	b.n	80088b2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d904      	bls.n	800885c <dir_sdi+0x98>
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	429a      	cmp	r2, r3
 800885a:	d301      	bcc.n	8008860 <dir_sdi+0x9c>
 800885c:	2302      	movs	r3, #2
 800885e:	e028      	b.n	80088b2 <dir_sdi+0xee>
			ofs -= csz;
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	429a      	cmp	r2, r3
 800886e:	d2e1      	bcs.n	8008834 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008870:	6979      	ldr	r1, [r7, #20]
 8008872:	6938      	ldr	r0, [r7, #16]
 8008874:	f7ff fcca 	bl	800820c <clust2sect>
 8008878:	4602      	mov	r2, r0
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <dir_sdi+0xcc>
 800888c:	2302      	movs	r3, #2
 800888e:	e010      	b.n	80088b2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	69da      	ldr	r2, [r3, #28]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	0a5b      	lsrs	r3, r3, #9
 8008898:	441a      	add	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088aa:	441a      	add	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b086      	sub	sp, #24
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	3320      	adds	r3, #32
 80088d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <dir_next+0x28>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088e0:	d301      	bcc.n	80088e6 <dir_next+0x2c>
 80088e2:	2304      	movs	r3, #4
 80088e4:	e0aa      	b.n	8008a3c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f040 8098 	bne.w	8008a22 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10b      	bne.n	800891c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	095b      	lsrs	r3, r3, #5
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	8912      	ldrh	r2, [r2, #8]
 800890c:	4293      	cmp	r3, r2
 800890e:	f0c0 8088 	bcc.w	8008a22 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	61da      	str	r2, [r3, #28]
 8008918:	2304      	movs	r3, #4
 800891a:	e08f      	b.n	8008a3c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	0a5b      	lsrs	r3, r3, #9
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	8952      	ldrh	r2, [r2, #10]
 8008924:	3a01      	subs	r2, #1
 8008926:	4013      	ands	r3, r2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d17a      	bne.n	8008a22 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	4619      	mov	r1, r3
 8008934:	4610      	mov	r0, r2
 8008936:	f7ff fc88 	bl	800824a <get_fat>
 800893a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d801      	bhi.n	8008946 <dir_next+0x8c>
 8008942:	2302      	movs	r3, #2
 8008944:	e07a      	b.n	8008a3c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894c:	d101      	bne.n	8008952 <dir_next+0x98>
 800894e:	2301      	movs	r3, #1
 8008950:	e074      	b.n	8008a3c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	429a      	cmp	r2, r3
 800895a:	d358      	bcc.n	8008a0e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d104      	bne.n	800896c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	61da      	str	r2, [r3, #28]
 8008968:	2304      	movs	r3, #4
 800896a:	e067      	b.n	8008a3c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	4619      	mov	r1, r3
 8008974:	4610      	mov	r0, r2
 8008976:	f7ff fe59 	bl	800862c <create_chain>
 800897a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <dir_next+0xcc>
 8008982:	2307      	movs	r3, #7
 8008984:	e05a      	b.n	8008a3c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d101      	bne.n	8008990 <dir_next+0xd6>
 800898c:	2302      	movs	r3, #2
 800898e:	e055      	b.n	8008a3c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008996:	d101      	bne.n	800899c <dir_next+0xe2>
 8008998:	2301      	movs	r3, #1
 800899a:	e04f      	b.n	8008a3c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f7ff fb55 	bl	800804c <sync_window>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <dir_next+0xf2>
 80089a8:	2301      	movs	r3, #1
 80089aa:	e047      	b.n	8008a3c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3330      	adds	r3, #48	; 0x30
 80089b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089b4:	2100      	movs	r1, #0
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7ff f97f 	bl	8007cba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80089bc:	2300      	movs	r3, #0
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	6979      	ldr	r1, [r7, #20]
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7ff fc22 	bl	800820c <clust2sect>
 80089c8:	4602      	mov	r2, r0
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80089ce:	e012      	b.n	80089f6 <dir_next+0x13c>
						fs->wflag = 1;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f7ff fb38 	bl	800804c <sync_window>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <dir_next+0x12c>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e02a      	b.n	8008a3c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	3301      	adds	r3, #1
 80089ea:	613b      	str	r3, [r7, #16]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	895b      	ldrh	r3, [r3, #10]
 80089fa:	461a      	mov	r2, r3
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d3e6      	bcc.n	80089d0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	1ad2      	subs	r2, r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008a14:	6979      	ldr	r1, [r7, #20]
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff fbf8 	bl	800820c <clust2sect>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a34:	441a      	add	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008a54:	2100      	movs	r1, #0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff feb4 	bl	80087c4 <dir_sdi>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d12b      	bne.n	8008abe <dir_alloc+0x7a>
		n = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	4619      	mov	r1, r3
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f7ff fb2f 	bl	80080d4 <move_window>
 8008a76:	4603      	mov	r3, r0
 8008a78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d11d      	bne.n	8008abc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2be5      	cmp	r3, #229	; 0xe5
 8008a88:	d004      	beq.n	8008a94 <dir_alloc+0x50>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d107      	bne.n	8008aa4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	3301      	adds	r3, #1
 8008a98:	613b      	str	r3, [r7, #16]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d102      	bne.n	8008aa8 <dir_alloc+0x64>
 8008aa2:	e00c      	b.n	8008abe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff ff05 	bl	80088ba <dir_next>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0d7      	beq.n	8008a6a <dir_alloc+0x26>
 8008aba:	e000      	b.n	8008abe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008abc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	d101      	bne.n	8008ac8 <dir_alloc+0x84>
 8008ac4:	2307      	movs	r3, #7
 8008ac6:	75fb      	strb	r3, [r7, #23]
	return res;
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	331a      	adds	r3, #26
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff f847 	bl	8007b74 <ld_word>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d109      	bne.n	8008b06 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	3314      	adds	r3, #20
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff f83c 	bl	8007b74 <ld_word>
 8008afc:	4603      	mov	r3, r0
 8008afe:	041b      	lsls	r3, r3, #16
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008b06:	68fb      	ldr	r3, [r7, #12]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	331a      	adds	r3, #26
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	b292      	uxth	r2, r2
 8008b24:	4611      	mov	r1, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff f85f 	bl	8007bea <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d109      	bne.n	8008b48 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f103 0214 	add.w	r2, r3, #20
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	0c1b      	lsrs	r3, r3, #16
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	4619      	mov	r1, r3
 8008b42:	4610      	mov	r0, r2
 8008b44:	f7ff f851 	bl	8007bea <st_word>
	}
}
 8008b48:	bf00      	nop
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008b5e:	2100      	movs	r1, #0
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff fe2f 	bl	80087c4 <dir_sdi>
 8008b66:	4603      	mov	r3, r0
 8008b68:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <dir_find+0x24>
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	e03e      	b.n	8008bf2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6938      	ldr	r0, [r7, #16]
 8008b7c:	f7ff faaa 	bl	80080d4 <move_window>
 8008b80:	4603      	mov	r3, r0
 8008b82:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d12f      	bne.n	8008bea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <dir_find+0x4e>
 8008b98:	2304      	movs	r3, #4
 8008b9a:	75fb      	strb	r3, [r7, #23]
 8008b9c:	e028      	b.n	8008bf0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	330b      	adds	r3, #11
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	330b      	adds	r3, #11
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	f003 0308 	and.w	r3, r3, #8
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <dir_find+0x86>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a18      	ldr	r0, [r3, #32]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3324      	adds	r3, #36	; 0x24
 8008bc8:	220b      	movs	r2, #11
 8008bca:	4619      	mov	r1, r3
 8008bcc:	f7ff f88f 	bl	8007cee <mem_cmp>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00b      	beq.n	8008bee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff fe6e 	bl	80088ba <dir_next>
 8008bde:	4603      	mov	r3, r0
 8008be0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0c5      	beq.n	8008b74 <dir_find+0x24>
 8008be8:	e002      	b.n	8008bf0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008bea:	bf00      	nop
 8008bec:	e000      	b.n	8008bf0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008bee:	bf00      	nop

	return res;
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008c08:	2101      	movs	r1, #1
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff ff1a 	bl	8008a44 <dir_alloc>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d11c      	bne.n	8008c54 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	69db      	ldr	r3, [r3, #28]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	68b8      	ldr	r0, [r7, #8]
 8008c22:	f7ff fa57 	bl	80080d4 <move_window>
 8008c26:	4603      	mov	r3, r0
 8008c28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d111      	bne.n	8008c54 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	2220      	movs	r2, #32
 8008c36:	2100      	movs	r1, #0
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7ff f83e 	bl	8007cba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a18      	ldr	r0, [r3, #32]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3324      	adds	r3, #36	; 0x24
 8008c46:	220b      	movs	r2, #11
 8008c48:	4619      	mov	r1, r3
 8008c4a:	f7ff f815 	bl	8007c78 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2201      	movs	r2, #1
 8008c52:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3324      	adds	r3, #36	; 0x24
 8008c74:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008c76:	220b      	movs	r2, #11
 8008c78:	2120      	movs	r1, #32
 8008c7a:	68b8      	ldr	r0, [r7, #8]
 8008c7c:	f7ff f81d 	bl	8007cba <mem_set>
	si = i = 0; ni = 8;
 8008c80:	2300      	movs	r3, #0
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	2308      	movs	r3, #8
 8008c8a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	617a      	str	r2, [r7, #20]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4413      	add	r3, r2
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008c9a:	7ffb      	ldrb	r3, [r7, #31]
 8008c9c:	2b20      	cmp	r3, #32
 8008c9e:	d94e      	bls.n	8008d3e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008ca0:	7ffb      	ldrb	r3, [r7, #31]
 8008ca2:	2b2f      	cmp	r3, #47	; 0x2f
 8008ca4:	d006      	beq.n	8008cb4 <create_name+0x54>
 8008ca6:	7ffb      	ldrb	r3, [r7, #31]
 8008ca8:	2b5c      	cmp	r3, #92	; 0x5c
 8008caa:	d110      	bne.n	8008cce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008cac:	e002      	b.n	8008cb4 <create_name+0x54>
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	617b      	str	r3, [r7, #20]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	4413      	add	r3, r2
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	2b2f      	cmp	r3, #47	; 0x2f
 8008cbe:	d0f6      	beq.n	8008cae <create_name+0x4e>
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b5c      	cmp	r3, #92	; 0x5c
 8008cca:	d0f0      	beq.n	8008cae <create_name+0x4e>
			break;
 8008ccc:	e038      	b.n	8008d40 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008cce:	7ffb      	ldrb	r3, [r7, #31]
 8008cd0:	2b2e      	cmp	r3, #46	; 0x2e
 8008cd2:	d003      	beq.n	8008cdc <create_name+0x7c>
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d30c      	bcc.n	8008cf6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	2b0b      	cmp	r3, #11
 8008ce0:	d002      	beq.n	8008ce8 <create_name+0x88>
 8008ce2:	7ffb      	ldrb	r3, [r7, #31]
 8008ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ce6:	d001      	beq.n	8008cec <create_name+0x8c>
 8008ce8:	2306      	movs	r3, #6
 8008cea:	e044      	b.n	8008d76 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008cec:	2308      	movs	r3, #8
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	230b      	movs	r3, #11
 8008cf2:	61bb      	str	r3, [r7, #24]
			continue;
 8008cf4:	e022      	b.n	8008d3c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008cf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	da04      	bge.n	8008d08 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008cfe:	7ffb      	ldrb	r3, [r7, #31]
 8008d00:	3b80      	subs	r3, #128	; 0x80
 8008d02:	4a1f      	ldr	r2, [pc, #124]	; (8008d80 <create_name+0x120>)
 8008d04:	5cd3      	ldrb	r3, [r2, r3]
 8008d06:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008d08:	7ffb      	ldrb	r3, [r7, #31]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	481d      	ldr	r0, [pc, #116]	; (8008d84 <create_name+0x124>)
 8008d0e:	f7ff f815 	bl	8007d3c <chk_chr>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <create_name+0xbc>
 8008d18:	2306      	movs	r3, #6
 8008d1a:	e02c      	b.n	8008d76 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008d1c:	7ffb      	ldrb	r3, [r7, #31]
 8008d1e:	2b60      	cmp	r3, #96	; 0x60
 8008d20:	d905      	bls.n	8008d2e <create_name+0xce>
 8008d22:	7ffb      	ldrb	r3, [r7, #31]
 8008d24:	2b7a      	cmp	r3, #122	; 0x7a
 8008d26:	d802      	bhi.n	8008d2e <create_name+0xce>
 8008d28:	7ffb      	ldrb	r3, [r7, #31]
 8008d2a:	3b20      	subs	r3, #32
 8008d2c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	1c5a      	adds	r2, r3, #1
 8008d32:	613a      	str	r2, [r7, #16]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	4413      	add	r3, r2
 8008d38:	7ffa      	ldrb	r2, [r7, #31]
 8008d3a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008d3c:	e7a6      	b.n	8008c8c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008d3e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	441a      	add	r2, r3
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <create_name+0xf4>
 8008d50:	2306      	movs	r3, #6
 8008d52:	e010      	b.n	8008d76 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2be5      	cmp	r3, #229	; 0xe5
 8008d5a:	d102      	bne.n	8008d62 <create_name+0x102>
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2205      	movs	r2, #5
 8008d60:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008d62:	7ffb      	ldrb	r3, [r7, #31]
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	d801      	bhi.n	8008d6c <create_name+0x10c>
 8008d68:	2204      	movs	r2, #4
 8008d6a:	e000      	b.n	8008d6e <create_name+0x10e>
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	330b      	adds	r3, #11
 8008d72:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008d74:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3720      	adds	r7, #32
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	0800ac50 	.word	0x0800ac50
 8008d84:	0800abe4 	.word	0x0800abe4

08008d88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008d9c:	e002      	b.n	8008da4 <follow_path+0x1c>
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b2f      	cmp	r3, #47	; 0x2f
 8008daa:	d0f8      	beq.n	8008d9e <follow_path+0x16>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b5c      	cmp	r3, #92	; 0x5c
 8008db2:	d0f4      	beq.n	8008d9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	2200      	movs	r2, #0
 8008db8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b1f      	cmp	r3, #31
 8008dc0:	d80a      	bhi.n	8008dd8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2280      	movs	r2, #128	; 0x80
 8008dc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008dca:	2100      	movs	r1, #0
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff fcf9 	bl	80087c4 <dir_sdi>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	75fb      	strb	r3, [r7, #23]
 8008dd6:	e043      	b.n	8008e60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008dd8:	463b      	mov	r3, r7
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff ff3f 	bl	8008c60 <create_name>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d134      	bne.n	8008e56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff feaf 	bl	8008b50 <dir_find>
 8008df2:	4603      	mov	r3, r0
 8008df4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008dfc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d127      	bne.n	8008e5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	f003 0304 	and.w	r3, r3, #4
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d122      	bne.n	8008e5a <follow_path+0xd2>
 8008e14:	2305      	movs	r3, #5
 8008e16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008e18:	e01f      	b.n	8008e5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e1a:	7afb      	ldrb	r3, [r7, #11]
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d11c      	bne.n	8008e5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	799b      	ldrb	r3, [r3, #6]
 8008e28:	f003 0310 	and.w	r3, r3, #16
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008e30:	2305      	movs	r3, #5
 8008e32:	75fb      	strb	r3, [r7, #23]
 8008e34:	e014      	b.n	8008e60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e44:	4413      	add	r3, r2
 8008e46:	4619      	mov	r1, r3
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff fe42 	bl	8008ad2 <ld_clust>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e54:	e7c0      	b.n	8008dd8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008e56:	bf00      	nop
 8008e58:	e002      	b.n	8008e60 <follow_path+0xd8>
				break;
 8008e5a:	bf00      	nop
 8008e5c:	e000      	b.n	8008e60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e5e:	bf00      	nop
			}
		}
	}

	return res;
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3718      	adds	r7, #24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b087      	sub	sp, #28
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008e72:	f04f 33ff 	mov.w	r3, #4294967295
 8008e76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d031      	beq.n	8008ee4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	617b      	str	r3, [r7, #20]
 8008e86:	e002      	b.n	8008e8e <get_ldnumber+0x24>
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	617b      	str	r3, [r7, #20]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2b20      	cmp	r3, #32
 8008e94:	d903      	bls.n	8008e9e <get_ldnumber+0x34>
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b3a      	cmp	r3, #58	; 0x3a
 8008e9c:	d1f4      	bne.n	8008e88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b3a      	cmp	r3, #58	; 0x3a
 8008ea4:	d11c      	bne.n	8008ee0 <get_ldnumber+0x76>
			tp = *path;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	60fa      	str	r2, [r7, #12]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	3b30      	subs	r3, #48	; 0x30
 8008eb6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b09      	cmp	r3, #9
 8008ebc:	d80e      	bhi.n	8008edc <get_ldnumber+0x72>
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d10a      	bne.n	8008edc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d107      	bne.n	8008edc <get_ldnumber+0x72>
					vol = (int)i;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	617b      	str	r3, [r7, #20]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	e002      	b.n	8008ee6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008ee4:	693b      	ldr	r3, [r7, #16]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
	...

08008ef4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	70da      	strb	r2, [r3, #3]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f04f 32ff 	mov.w	r2, #4294967295
 8008f0a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff f8e0 	bl	80080d4 <move_window>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <check_fs+0x2a>
 8008f1a:	2304      	movs	r3, #4
 8008f1c:	e038      	b.n	8008f90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3330      	adds	r3, #48	; 0x30
 8008f22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe fe24 	bl	8007b74 <ld_word>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d001      	beq.n	8008f3c <check_fs+0x48>
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e029      	b.n	8008f90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f42:	2be9      	cmp	r3, #233	; 0xe9
 8008f44:	d009      	beq.n	8008f5a <check_fs+0x66>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f4c:	2beb      	cmp	r3, #235	; 0xeb
 8008f4e:	d11e      	bne.n	8008f8e <check_fs+0x9a>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008f56:	2b90      	cmp	r3, #144	; 0x90
 8008f58:	d119      	bne.n	8008f8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3330      	adds	r3, #48	; 0x30
 8008f5e:	3336      	adds	r3, #54	; 0x36
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe fe1f 	bl	8007ba4 <ld_dword>
 8008f66:	4603      	mov	r3, r0
 8008f68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f6c:	4a0a      	ldr	r2, [pc, #40]	; (8008f98 <check_fs+0xa4>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d101      	bne.n	8008f76 <check_fs+0x82>
 8008f72:	2300      	movs	r3, #0
 8008f74:	e00c      	b.n	8008f90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3330      	adds	r3, #48	; 0x30
 8008f7a:	3352      	adds	r3, #82	; 0x52
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe fe11 	bl	8007ba4 <ld_dword>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <check_fs+0xa8>)
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d101      	bne.n	8008f8e <check_fs+0x9a>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	e000      	b.n	8008f90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008f8e:	2302      	movs	r3, #2
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	00544146 	.word	0x00544146
 8008f9c:	33544146 	.word	0x33544146

08008fa0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b096      	sub	sp, #88	; 0x58
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	4613      	mov	r3, r2
 8008fac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f7ff ff58 	bl	8008e6a <get_ldnumber>
 8008fba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da01      	bge.n	8008fc6 <find_volume+0x26>
 8008fc2:	230b      	movs	r3, #11
 8008fc4:	e22e      	b.n	8009424 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008fc6:	4aa8      	ldr	r2, [pc, #672]	; (8009268 <find_volume+0x2c8>)
 8008fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <find_volume+0x3a>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	e224      	b.n	8009424 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fde:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	f023 0301 	bic.w	r3, r3, #1
 8008fe6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01a      	beq.n	8009026 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff2:	785b      	ldrb	r3, [r3, #1]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe fd1f 	bl	8007a38 <disk_status>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10c      	bne.n	8009026 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d007      	beq.n	8009022 <find_volume+0x82>
 8009012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800901e:	230a      	movs	r3, #10
 8009020:	e200      	b.n	8009424 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8009022:	2300      	movs	r3, #0
 8009024:	e1fe      	b.n	8009424 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800902c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800902e:	b2da      	uxtb	r2, r3
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	785b      	ldrb	r3, [r3, #1]
 8009038:	4618      	mov	r0, r3
 800903a:	f7fe fd17 	bl	8007a6c <disk_initialize>
 800903e:	4603      	mov	r3, r0
 8009040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009044:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009050:	2303      	movs	r3, #3
 8009052:	e1e7      	b.n	8009424 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <find_volume+0xca>
 800905a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800905e:	f003 0304 	and.w	r3, r3, #4
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009066:	230a      	movs	r3, #10
 8009068:	e1dc      	b.n	8009424 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800906e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009070:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009072:	f7ff ff3f 	bl	8008ef4 <check_fs>
 8009076:	4603      	mov	r3, r0
 8009078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800907c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009080:	2b02      	cmp	r3, #2
 8009082:	d14b      	bne.n	800911c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009084:	2300      	movs	r3, #0
 8009086:	643b      	str	r3, [r7, #64]	; 0x40
 8009088:	e01f      	b.n	80090ca <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009092:	011b      	lsls	r3, r3, #4
 8009094:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009098:	4413      	add	r3, r2
 800909a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	3304      	adds	r3, #4
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d006      	beq.n	80090b4 <find_volume+0x114>
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	3308      	adds	r3, #8
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fd7a 	bl	8007ba4 <ld_dword>
 80090b0:	4602      	mov	r2, r0
 80090b2:	e000      	b.n	80090b6 <find_volume+0x116>
 80090b4:	2200      	movs	r2, #0
 80090b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80090be:	440b      	add	r3, r1
 80090c0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090c6:	3301      	adds	r3, #1
 80090c8:	643b      	str	r3, [r7, #64]	; 0x40
 80090ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d9dc      	bls.n	800908a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80090d0:	2300      	movs	r3, #0
 80090d2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80090d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <find_volume+0x140>
 80090da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090dc:	3b01      	subs	r3, #1
 80090de:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80090e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80090e8:	4413      	add	r3, r2
 80090ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80090ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80090f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d005      	beq.n	8009102 <find_volume+0x162>
 80090f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090fa:	f7ff fefb 	bl	8008ef4 <check_fs>
 80090fe:	4603      	mov	r3, r0
 8009100:	e000      	b.n	8009104 <find_volume+0x164>
 8009102:	2303      	movs	r3, #3
 8009104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009108:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800910c:	2b01      	cmp	r3, #1
 800910e:	d905      	bls.n	800911c <find_volume+0x17c>
 8009110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009112:	3301      	adds	r3, #1
 8009114:	643b      	str	r3, [r7, #64]	; 0x40
 8009116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009118:	2b03      	cmp	r3, #3
 800911a:	d9e1      	bls.n	80090e0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800911c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009120:	2b04      	cmp	r3, #4
 8009122:	d101      	bne.n	8009128 <find_volume+0x188>
 8009124:	2301      	movs	r3, #1
 8009126:	e17d      	b.n	8009424 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800912c:	2b01      	cmp	r3, #1
 800912e:	d901      	bls.n	8009134 <find_volume+0x194>
 8009130:	230d      	movs	r3, #13
 8009132:	e177      	b.n	8009424 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009136:	3330      	adds	r3, #48	; 0x30
 8009138:	330b      	adds	r3, #11
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fd1a 	bl	8007b74 <ld_word>
 8009140:	4603      	mov	r3, r0
 8009142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009146:	d001      	beq.n	800914c <find_volume+0x1ac>
 8009148:	230d      	movs	r3, #13
 800914a:	e16b      	b.n	8009424 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800914c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914e:	3330      	adds	r3, #48	; 0x30
 8009150:	3316      	adds	r3, #22
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe fd0e 	bl	8007b74 <ld_word>
 8009158:	4603      	mov	r3, r0
 800915a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800915c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d106      	bne.n	8009170 <find_volume+0x1d0>
 8009162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009164:	3330      	adds	r3, #48	; 0x30
 8009166:	3324      	adds	r3, #36	; 0x24
 8009168:	4618      	mov	r0, r3
 800916a:	f7fe fd1b 	bl	8007ba4 <ld_dword>
 800916e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009174:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	789b      	ldrb	r3, [r3, #2]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d005      	beq.n	8009194 <find_volume+0x1f4>
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	789b      	ldrb	r3, [r3, #2]
 800918c:	2b02      	cmp	r3, #2
 800918e:	d001      	beq.n	8009194 <find_volume+0x1f4>
 8009190:	230d      	movs	r3, #13
 8009192:	e147      	b.n	8009424 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009196:	789b      	ldrb	r3, [r3, #2]
 8009198:	461a      	mov	r2, r3
 800919a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800919c:	fb02 f303 	mul.w	r3, r2, r3
 80091a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80091a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80091ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b0:	895b      	ldrh	r3, [r3, #10]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d008      	beq.n	80091c8 <find_volume+0x228>
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	895b      	ldrh	r3, [r3, #10]
 80091ba:	461a      	mov	r2, r3
 80091bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091be:	895b      	ldrh	r3, [r3, #10]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	4013      	ands	r3, r2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <find_volume+0x22c>
 80091c8:	230d      	movs	r3, #13
 80091ca:	e12b      	b.n	8009424 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	3330      	adds	r3, #48	; 0x30
 80091d0:	3311      	adds	r3, #17
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe fcce 	bl	8007b74 <ld_word>
 80091d8:	4603      	mov	r3, r0
 80091da:	461a      	mov	r2, r3
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80091e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e2:	891b      	ldrh	r3, [r3, #8]
 80091e4:	f003 030f 	and.w	r3, r3, #15
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <find_volume+0x252>
 80091ee:	230d      	movs	r3, #13
 80091f0:	e118      	b.n	8009424 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80091f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f4:	3330      	adds	r3, #48	; 0x30
 80091f6:	3313      	adds	r3, #19
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe fcbb 	bl	8007b74 <ld_word>
 80091fe:	4603      	mov	r3, r0
 8009200:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009204:	2b00      	cmp	r3, #0
 8009206:	d106      	bne.n	8009216 <find_volume+0x276>
 8009208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920a:	3330      	adds	r3, #48	; 0x30
 800920c:	3320      	adds	r3, #32
 800920e:	4618      	mov	r0, r3
 8009210:	f7fe fcc8 	bl	8007ba4 <ld_dword>
 8009214:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009218:	3330      	adds	r3, #48	; 0x30
 800921a:	330e      	adds	r3, #14
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe fca9 	bl	8007b74 <ld_word>
 8009222:	4603      	mov	r3, r0
 8009224:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009226:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <find_volume+0x290>
 800922c:	230d      	movs	r3, #13
 800922e:	e0f9      	b.n	8009424 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009230:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009234:	4413      	add	r3, r2
 8009236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009238:	8912      	ldrh	r2, [r2, #8]
 800923a:	0912      	lsrs	r2, r2, #4
 800923c:	b292      	uxth	r2, r2
 800923e:	4413      	add	r3, r2
 8009240:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	429a      	cmp	r2, r3
 8009248:	d201      	bcs.n	800924e <find_volume+0x2ae>
 800924a:	230d      	movs	r3, #13
 800924c:	e0ea      	b.n	8009424 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800924e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009256:	8952      	ldrh	r2, [r2, #10]
 8009258:	fbb3 f3f2 	udiv	r3, r3, r2
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	2b00      	cmp	r3, #0
 8009262:	d103      	bne.n	800926c <find_volume+0x2cc>
 8009264:	230d      	movs	r3, #13
 8009266:	e0dd      	b.n	8009424 <find_volume+0x484>
 8009268:	20000048 	.word	0x20000048
		fmt = FS_FAT32;
 800926c:	2303      	movs	r3, #3
 800926e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009278:	4293      	cmp	r3, r2
 800927a:	d802      	bhi.n	8009282 <find_volume+0x2e2>
 800927c:	2302      	movs	r3, #2
 800927e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009288:	4293      	cmp	r3, r2
 800928a:	d802      	bhi.n	8009292 <find_volume+0x2f2>
 800928c:	2301      	movs	r3, #1
 800928e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	1c9a      	adds	r2, r3, #2
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800929e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80092a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80092a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092a4:	441a      	add	r2, r3
 80092a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80092aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	441a      	add	r2, r3
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80092b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d11e      	bne.n	80092fa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80092bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092be:	3330      	adds	r3, #48	; 0x30
 80092c0:	332a      	adds	r3, #42	; 0x2a
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe fc56 	bl	8007b74 <ld_word>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <find_volume+0x332>
 80092ce:	230d      	movs	r3, #13
 80092d0:	e0a8      	b.n	8009424 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	891b      	ldrh	r3, [r3, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <find_volume+0x33e>
 80092da:	230d      	movs	r3, #13
 80092dc:	e0a2      	b.n	8009424 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80092de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e0:	3330      	adds	r3, #48	; 0x30
 80092e2:	332c      	adds	r3, #44	; 0x2c
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fe fc5d 	bl	8007ba4 <ld_dword>
 80092ea:	4602      	mov	r2, r0
 80092ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ee:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	647b      	str	r3, [r7, #68]	; 0x44
 80092f8:	e01f      	b.n	800933a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	891b      	ldrh	r3, [r3, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <find_volume+0x366>
 8009302:	230d      	movs	r3, #13
 8009304:	e08e      	b.n	8009424 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	6a1a      	ldr	r2, [r3, #32]
 800930a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800930c:	441a      	add	r2, r3
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009312:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009316:	2b02      	cmp	r3, #2
 8009318:	d103      	bne.n	8009322 <find_volume+0x382>
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	e00a      	b.n	8009338 <find_volume+0x398>
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	695a      	ldr	r2, [r3, #20]
 8009326:	4613      	mov	r3, r2
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	4413      	add	r3, r2
 800932c:	085a      	lsrs	r2, r3, #1
 800932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009338:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	699a      	ldr	r2, [r3, #24]
 800933e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009340:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009344:	0a5b      	lsrs	r3, r3, #9
 8009346:	429a      	cmp	r2, r3
 8009348:	d201      	bcs.n	800934e <find_volume+0x3ae>
 800934a:	230d      	movs	r3, #13
 800934c:	e06a      	b.n	8009424 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	f04f 32ff 	mov.w	r2, #4294967295
 8009354:	611a      	str	r2, [r3, #16]
 8009356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009358:	691a      	ldr	r2, [r3, #16]
 800935a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	2280      	movs	r2, #128	; 0x80
 8009362:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009368:	2b03      	cmp	r3, #3
 800936a:	d149      	bne.n	8009400 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	3330      	adds	r3, #48	; 0x30
 8009370:	3330      	adds	r3, #48	; 0x30
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fbfe 	bl	8007b74 <ld_word>
 8009378:	4603      	mov	r3, r0
 800937a:	2b01      	cmp	r3, #1
 800937c:	d140      	bne.n	8009400 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800937e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009380:	3301      	adds	r3, #1
 8009382:	4619      	mov	r1, r3
 8009384:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009386:	f7fe fea5 	bl	80080d4 <move_window>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d137      	bne.n	8009400 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	2200      	movs	r2, #0
 8009394:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009398:	3330      	adds	r3, #48	; 0x30
 800939a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fbe8 	bl	8007b74 <ld_word>
 80093a4:	4603      	mov	r3, r0
 80093a6:	461a      	mov	r2, r3
 80093a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d127      	bne.n	8009400 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80093b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b2:	3330      	adds	r3, #48	; 0x30
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fbf5 	bl	8007ba4 <ld_dword>
 80093ba:	4602      	mov	r2, r0
 80093bc:	4b1b      	ldr	r3, [pc, #108]	; (800942c <find_volume+0x48c>)
 80093be:	429a      	cmp	r2, r3
 80093c0:	d11e      	bne.n	8009400 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80093c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c4:	3330      	adds	r3, #48	; 0x30
 80093c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fbea 	bl	8007ba4 <ld_dword>
 80093d0:	4602      	mov	r2, r0
 80093d2:	4b17      	ldr	r3, [pc, #92]	; (8009430 <find_volume+0x490>)
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d113      	bne.n	8009400 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80093d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093da:	3330      	adds	r3, #48	; 0x30
 80093dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fe fbdf 	bl	8007ba4 <ld_dword>
 80093e6:	4602      	mov	r2, r0
 80093e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ea:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80093ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ee:	3330      	adds	r3, #48	; 0x30
 80093f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fe fbd5 	bl	8007ba4 <ld_dword>
 80093fa:	4602      	mov	r2, r0
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009406:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <find_volume+0x494>)
 800940a:	881b      	ldrh	r3, [r3, #0]
 800940c:	3301      	adds	r3, #1
 800940e:	b29a      	uxth	r2, r3
 8009410:	4b08      	ldr	r3, [pc, #32]	; (8009434 <find_volume+0x494>)
 8009412:	801a      	strh	r2, [r3, #0]
 8009414:	4b07      	ldr	r3, [pc, #28]	; (8009434 <find_volume+0x494>)
 8009416:	881a      	ldrh	r2, [r3, #0]
 8009418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800941c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800941e:	f7fe fdf1 	bl	8008004 <clear_lock>
#endif
	return FR_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3758      	adds	r7, #88	; 0x58
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	41615252 	.word	0x41615252
 8009430:	61417272 	.word	0x61417272
 8009434:	2000004c 	.word	0x2000004c

08009438 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009442:	2309      	movs	r3, #9
 8009444:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01c      	beq.n	8009486 <validate+0x4e>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d018      	beq.n	8009486 <validate+0x4e>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d013      	beq.n	8009486 <validate+0x4e>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	889a      	ldrh	r2, [r3, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	88db      	ldrh	r3, [r3, #6]
 8009468:	429a      	cmp	r2, r3
 800946a:	d10c      	bne.n	8009486 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	785b      	ldrb	r3, [r3, #1]
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe fae0 	bl	8007a38 <disk_status>
 8009478:	4603      	mov	r3, r0
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <validate+0x4e>
			res = FR_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d102      	bne.n	8009492 <validate+0x5a>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	e000      	b.n	8009494 <validate+0x5c>
 8009492:	2300      	movs	r3, #0
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	6013      	str	r3, [r2, #0]
	return res;
 8009498:	7bfb      	ldrb	r3, [r7, #15]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b088      	sub	sp, #32
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	4613      	mov	r3, r2
 80094b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80094b6:	f107 0310 	add.w	r3, r7, #16
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff fcd5 	bl	8008e6a <get_ldnumber>
 80094c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	da01      	bge.n	80094cc <f_mount+0x28>
 80094c8:	230b      	movs	r3, #11
 80094ca:	e02b      	b.n	8009524 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80094cc:	4a17      	ldr	r2, [pc, #92]	; (800952c <f_mount+0x88>)
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80094dc:	69b8      	ldr	r0, [r7, #24]
 80094de:	f7fe fd91 	bl	8008004 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	490d      	ldr	r1, [pc, #52]	; (800952c <f_mount+0x88>)
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d002      	beq.n	800950a <f_mount+0x66>
 8009504:	79fb      	ldrb	r3, [r7, #7]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d001      	beq.n	800950e <f_mount+0x6a>
 800950a:	2300      	movs	r3, #0
 800950c:	e00a      	b.n	8009524 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800950e:	f107 010c 	add.w	r1, r7, #12
 8009512:	f107 0308 	add.w	r3, r7, #8
 8009516:	2200      	movs	r2, #0
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff fd41 	bl	8008fa0 <find_volume>
 800951e:	4603      	mov	r3, r0
 8009520:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009522:	7dfb      	ldrb	r3, [r7, #23]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3720      	adds	r7, #32
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20000048 	.word	0x20000048

08009530 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b098      	sub	sp, #96	; 0x60
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	4613      	mov	r3, r2
 800953c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <f_open+0x18>
 8009544:	2309      	movs	r3, #9
 8009546:	e1ad      	b.n	80098a4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800954e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009550:	79fa      	ldrb	r2, [r7, #7]
 8009552:	f107 0110 	add.w	r1, r7, #16
 8009556:	f107 0308 	add.w	r3, r7, #8
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff fd20 	bl	8008fa0 <find_volume>
 8009560:	4603      	mov	r3, r0
 8009562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800956a:	2b00      	cmp	r3, #0
 800956c:	f040 8191 	bne.w	8009892 <f_open+0x362>
		dj.obj.fs = fs;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	f107 0314 	add.w	r3, r7, #20
 800957a:	4611      	mov	r1, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff fc03 	bl	8008d88 <follow_path>
 8009582:	4603      	mov	r3, r0
 8009584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800958c:	2b00      	cmp	r3, #0
 800958e:	d11a      	bne.n	80095c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009590:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009594:	b25b      	sxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	da03      	bge.n	80095a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800959a:	2306      	movs	r3, #6
 800959c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80095a0:	e011      	b.n	80095c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	f023 0301 	bic.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	bf14      	ite	ne
 80095ac:	2301      	movne	r3, #1
 80095ae:	2300      	moveq	r3, #0
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	461a      	mov	r2, r3
 80095b4:	f107 0314 	add.w	r3, r7, #20
 80095b8:	4611      	mov	r1, r2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe fbda 	bl	8007d74 <chk_lock>
 80095c0:	4603      	mov	r3, r0
 80095c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80095c6:	79fb      	ldrb	r3, [r7, #7]
 80095c8:	f003 031c 	and.w	r3, r3, #28
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d07f      	beq.n	80096d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80095d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d017      	beq.n	8009608 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80095d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095dc:	2b04      	cmp	r3, #4
 80095de:	d10e      	bne.n	80095fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80095e0:	f7fe fc24 	bl	8007e2c <enq_lock>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d006      	beq.n	80095f8 <f_open+0xc8>
 80095ea:	f107 0314 	add.w	r3, r7, #20
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7ff fb03 	bl	8008bfa <dir_register>
 80095f4:	4603      	mov	r3, r0
 80095f6:	e000      	b.n	80095fa <f_open+0xca>
 80095f8:	2312      	movs	r3, #18
 80095fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80095fe:	79fb      	ldrb	r3, [r7, #7]
 8009600:	f043 0308 	orr.w	r3, r3, #8
 8009604:	71fb      	strb	r3, [r7, #7]
 8009606:	e010      	b.n	800962a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009608:	7ebb      	ldrb	r3, [r7, #26]
 800960a:	f003 0311 	and.w	r3, r3, #17
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <f_open+0xea>
					res = FR_DENIED;
 8009612:	2307      	movs	r3, #7
 8009614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009618:	e007      	b.n	800962a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800961a:	79fb      	ldrb	r3, [r7, #7]
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <f_open+0xfa>
 8009624:	2308      	movs	r3, #8
 8009626:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800962a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800962e:	2b00      	cmp	r3, #0
 8009630:	d168      	bne.n	8009704 <f_open+0x1d4>
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b00      	cmp	r3, #0
 800963a:	d063      	beq.n	8009704 <f_open+0x1d4>
				dw = GET_FATTIME();
 800963c:	f7fc fef0 	bl	8006420 <get_fattime>
 8009640:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009644:	330e      	adds	r3, #14
 8009646:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009648:	4618      	mov	r0, r3
 800964a:	f7fe fae9 	bl	8007c20 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800964e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009650:	3316      	adds	r3, #22
 8009652:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009654:	4618      	mov	r0, r3
 8009656:	f7fe fae3 	bl	8007c20 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800965a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965c:	330b      	adds	r3, #11
 800965e:	2220      	movs	r2, #32
 8009660:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009666:	4611      	mov	r1, r2
 8009668:	4618      	mov	r0, r3
 800966a:	f7ff fa32 	bl	8008ad2 <ld_clust>
 800966e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009674:	2200      	movs	r2, #0
 8009676:	4618      	mov	r0, r3
 8009678:	f7ff fa4a 	bl	8008b10 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800967c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967e:	331c      	adds	r3, #28
 8009680:	2100      	movs	r1, #0
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe facc 	bl	8007c20 <st_dword>
					fs->wflag = 1;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	2201      	movs	r2, #1
 800968c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800968e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009690:	2b00      	cmp	r3, #0
 8009692:	d037      	beq.n	8009704 <f_open+0x1d4>
						dw = fs->winsect;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800969a:	f107 0314 	add.w	r3, r7, #20
 800969e:	2200      	movs	r2, #0
 80096a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe ff5d 	bl	8008562 <remove_chain>
 80096a8:	4603      	mov	r3, r0
 80096aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80096ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d126      	bne.n	8009704 <f_open+0x1d4>
							res = move_window(fs, dw);
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe fd0a 	bl	80080d4 <move_window>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096ca:	3a01      	subs	r2, #1
 80096cc:	60da      	str	r2, [r3, #12]
 80096ce:	e019      	b.n	8009704 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80096d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d115      	bne.n	8009704 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80096d8:	7ebb      	ldrb	r3, [r7, #26]
 80096da:	f003 0310 	and.w	r3, r3, #16
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <f_open+0x1ba>
					res = FR_NO_FILE;
 80096e2:	2304      	movs	r3, #4
 80096e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80096e8:	e00c      	b.n	8009704 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d007      	beq.n	8009704 <f_open+0x1d4>
 80096f4:	7ebb      	ldrb	r3, [r7, #26]
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <f_open+0x1d4>
						res = FR_DENIED;
 80096fe:	2307      	movs	r3, #7
 8009700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009708:	2b00      	cmp	r3, #0
 800970a:	d128      	bne.n	800975e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009716:	79fb      	ldrb	r3, [r7, #7]
 8009718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800971c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800972c:	79fb      	ldrb	r3, [r7, #7]
 800972e:	f023 0301 	bic.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	bf14      	ite	ne
 8009736:	2301      	movne	r3, #1
 8009738:	2300      	moveq	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	f107 0314 	add.w	r3, r7, #20
 8009742:	4611      	mov	r1, r2
 8009744:	4618      	mov	r0, r3
 8009746:	f7fe fb93 	bl	8007e70 <inc_lock>
 800974a:	4602      	mov	r2, r0
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d102      	bne.n	800975e <f_open+0x22e>
 8009758:	2302      	movs	r3, #2
 800975a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800975e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009762:	2b00      	cmp	r3, #0
 8009764:	f040 8095 	bne.w	8009892 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800976c:	4611      	mov	r1, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff f9af 	bl	8008ad2 <ld_clust>
 8009774:	4602      	mov	r2, r0
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800977a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977c:	331c      	adds	r3, #28
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe fa10 	bl	8007ba4 <ld_dword>
 8009784:	4602      	mov	r2, r0
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	88da      	ldrh	r2, [r3, #6]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	79fa      	ldrb	r2, [r7, #7]
 80097a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3330      	adds	r3, #48	; 0x30
 80097ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097be:	2100      	movs	r1, #0
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fa7a 	bl	8007cba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	f003 0320 	and.w	r3, r3, #32
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d060      	beq.n	8009892 <f_open+0x362>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d05c      	beq.n	8009892 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	68da      	ldr	r2, [r3, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	895b      	ldrh	r3, [r3, #10]
 80097e4:	025b      	lsls	r3, r3, #9
 80097e6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	657b      	str	r3, [r7, #84]	; 0x54
 80097f4:	e016      	b.n	8009824 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fd25 	bl	800824a <get_fat>
 8009800:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009804:	2b01      	cmp	r3, #1
 8009806:	d802      	bhi.n	800980e <f_open+0x2de>
 8009808:	2302      	movs	r3, #2
 800980a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800980e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009814:	d102      	bne.n	800981c <f_open+0x2ec>
 8009816:	2301      	movs	r3, #1
 8009818:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800981c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800981e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	657b      	str	r3, [r7, #84]	; 0x54
 8009824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009828:	2b00      	cmp	r3, #0
 800982a:	d103      	bne.n	8009834 <f_open+0x304>
 800982c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800982e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009830:	429a      	cmp	r2, r3
 8009832:	d8e0      	bhi.n	80097f6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009838:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800983a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800983e:	2b00      	cmp	r3, #0
 8009840:	d127      	bne.n	8009892 <f_open+0x362>
 8009842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009848:	2b00      	cmp	r3, #0
 800984a:	d022      	beq.n	8009892 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe fcdb 	bl	800820c <clust2sect>
 8009856:	6478      	str	r0, [r7, #68]	; 0x44
 8009858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800985a:	2b00      	cmp	r3, #0
 800985c:	d103      	bne.n	8009866 <f_open+0x336>
						res = FR_INT_ERR;
 800985e:	2302      	movs	r3, #2
 8009860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009864:	e015      	b.n	8009892 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009868:	0a5a      	lsrs	r2, r3, #9
 800986a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986c:	441a      	add	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	7858      	ldrb	r0, [r3, #1]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6a1a      	ldr	r2, [r3, #32]
 8009880:	2301      	movs	r3, #1
 8009882:	f7fe f919 	bl	8007ab8 <disk_read>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <f_open+0x362>
 800988c:	2301      	movs	r3, #1
 800988e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009896:	2b00      	cmp	r3, #0
 8009898:	d002      	beq.n	80098a0 <f_open+0x370>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80098a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3760      	adds	r7, #96	; 0x60
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08c      	sub	sp, #48	; 0x30
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f107 0210 	add.w	r2, r7, #16
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7ff fdb3 	bl	8009438 <validate>
 80098d2:	4603      	mov	r3, r0
 80098d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80098d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d107      	bne.n	80098f0 <f_write+0x44>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	7d5b      	ldrb	r3, [r3, #21]
 80098e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80098e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <f_write+0x4a>
 80098f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098f4:	e14b      	b.n	8009b8e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	7d1b      	ldrb	r3, [r3, #20]
 80098fa:	f003 0302 	and.w	r3, r3, #2
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <f_write+0x5a>
 8009902:	2307      	movs	r3, #7
 8009904:	e143      	b.n	8009b8e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	699a      	ldr	r2, [r3, #24]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	441a      	add	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	429a      	cmp	r2, r3
 8009914:	f080 812d 	bcs.w	8009b72 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	43db      	mvns	r3, r3
 800991e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009920:	e127      	b.n	8009b72 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992a:	2b00      	cmp	r3, #0
 800992c:	f040 80e3 	bne.w	8009af6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	0a5b      	lsrs	r3, r3, #9
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	8952      	ldrh	r2, [r2, #10]
 800993a:	3a01      	subs	r2, #1
 800993c:	4013      	ands	r3, r2
 800993e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d143      	bne.n	80099ce <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10c      	bne.n	8009968 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	2b00      	cmp	r3, #0
 8009958:	d11a      	bne.n	8009990 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2100      	movs	r1, #0
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe fe64 	bl	800862c <create_chain>
 8009964:	62b8      	str	r0, [r7, #40]	; 0x28
 8009966:	e013      	b.n	8009990 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d007      	beq.n	8009980 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	4619      	mov	r1, r3
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f7fe fef0 	bl	800875c <clmt_clust>
 800997c:	62b8      	str	r0, [r7, #40]	; 0x28
 800997e:	e007      	b.n	8009990 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	69db      	ldr	r3, [r3, #28]
 8009986:	4619      	mov	r1, r3
 8009988:	4610      	mov	r0, r2
 800998a:	f7fe fe4f 	bl	800862c <create_chain>
 800998e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	2b00      	cmp	r3, #0
 8009994:	f000 80f2 	beq.w	8009b7c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	2b01      	cmp	r3, #1
 800999c:	d104      	bne.n	80099a8 <f_write+0xfc>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2202      	movs	r2, #2
 80099a2:	755a      	strb	r2, [r3, #21]
 80099a4:	2302      	movs	r3, #2
 80099a6:	e0f2      	b.n	8009b8e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ae:	d104      	bne.n	80099ba <f_write+0x10e>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2201      	movs	r2, #1
 80099b4:	755a      	strb	r2, [r3, #21]
 80099b6:	2301      	movs	r3, #1
 80099b8:	e0e9      	b.n	8009b8e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099be:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d102      	bne.n	80099ce <f_write+0x122>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	7d1b      	ldrb	r3, [r3, #20]
 80099d2:	b25b      	sxtb	r3, r3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	da18      	bge.n	8009a0a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	7858      	ldrb	r0, [r3, #1]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6a1a      	ldr	r2, [r3, #32]
 80099e6:	2301      	movs	r3, #1
 80099e8:	f7fe f886 	bl	8007af8 <disk_write>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d004      	beq.n	80099fc <f_write+0x150>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2201      	movs	r2, #1
 80099f6:	755a      	strb	r2, [r3, #21]
 80099f8:	2301      	movs	r3, #1
 80099fa:	e0c8      	b.n	8009b8e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	7d1b      	ldrb	r3, [r3, #20]
 8009a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	4619      	mov	r1, r3
 8009a12:	4610      	mov	r0, r2
 8009a14:	f7fe fbfa 	bl	800820c <clust2sect>
 8009a18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d104      	bne.n	8009a2a <f_write+0x17e>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2202      	movs	r2, #2
 8009a24:	755a      	strb	r2, [r3, #21]
 8009a26:	2302      	movs	r3, #2
 8009a28:	e0b1      	b.n	8009b8e <f_write+0x2e2>
			sect += csect;
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	4413      	add	r3, r2
 8009a30:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	0a5b      	lsrs	r3, r3, #9
 8009a36:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d03c      	beq.n	8009ab8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	4413      	add	r3, r2
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	8952      	ldrh	r2, [r2, #10]
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d905      	bls.n	8009a58 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	895b      	ldrh	r3, [r3, #10]
 8009a50:	461a      	mov	r2, r3
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	7858      	ldrb	r0, [r3, #1]
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	69f9      	ldr	r1, [r7, #28]
 8009a62:	f7fe f849 	bl	8007af8 <disk_write>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d004      	beq.n	8009a76 <f_write+0x1ca>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	755a      	strb	r2, [r3, #21]
 8009a72:	2301      	movs	r3, #1
 8009a74:	e08b      	b.n	8009b8e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a1a      	ldr	r2, [r3, #32]
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	6a3a      	ldr	r2, [r7, #32]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d915      	bls.n	8009ab0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6a1a      	ldr	r2, [r3, #32]
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	025b      	lsls	r3, r3, #9
 8009a94:	69fa      	ldr	r2, [r7, #28]
 8009a96:	4413      	add	r3, r2
 8009a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	f7fe f8eb 	bl	8007c78 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	7d1b      	ldrb	r3, [r3, #20]
 8009aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	025b      	lsls	r3, r3, #9
 8009ab4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009ab6:	e03f      	b.n	8009b38 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d016      	beq.n	8009af0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	699a      	ldr	r2, [r3, #24]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d210      	bcs.n	8009af0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	7858      	ldrb	r0, [r3, #1]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ad8:	2301      	movs	r3, #1
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	f7fd ffec 	bl	8007ab8 <disk_read>
 8009ae0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	755a      	strb	r2, [r3, #21]
 8009aec:	2301      	movs	r3, #1
 8009aee:	e04e      	b.n	8009b8e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009afe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009b02:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d901      	bls.n	8009b10 <f_write+0x264>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1e:	4413      	add	r3, r2
 8009b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b22:	69f9      	ldr	r1, [r7, #28]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe f8a7 	bl	8007c78 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	7d1b      	ldrb	r3, [r3, #20]
 8009b2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009b38:	69fa      	ldr	r2, [r7, #28]
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	4413      	add	r3, r2
 8009b3e:	61fb      	str	r3, [r7, #28]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	441a      	add	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	619a      	str	r2, [r3, #24]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68da      	ldr	r2, [r3, #12]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	bf38      	it	cc
 8009b58:	461a      	movcc	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	60da      	str	r2, [r3, #12]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	441a      	add	r2, r3
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f47f aed4 	bne.w	8009922 <f_write+0x76>
 8009b7a:	e000      	b.n	8009b7e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009b7c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	7d1b      	ldrb	r3, [r3, #20]
 8009b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3730      	adds	r7, #48	; 0x30
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b086      	sub	sp, #24
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f107 0208 	add.w	r2, r7, #8
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7ff fc46 	bl	8009438 <validate>
 8009bac:	4603      	mov	r3, r0
 8009bae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d168      	bne.n	8009c88 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	7d1b      	ldrb	r3, [r3, #20]
 8009bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d062      	beq.n	8009c88 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	7d1b      	ldrb	r3, [r3, #20]
 8009bc6:	b25b      	sxtb	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	da15      	bge.n	8009bf8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	7858      	ldrb	r0, [r3, #1]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1a      	ldr	r2, [r3, #32]
 8009bda:	2301      	movs	r3, #1
 8009bdc:	f7fd ff8c 	bl	8007af8 <disk_write>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <f_sync+0x54>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e04f      	b.n	8009c8a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	7d1b      	ldrb	r3, [r3, #20]
 8009bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009bf8:	f7fc fc12 	bl	8006420 <get_fattime>
 8009bfc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c04:	4619      	mov	r1, r3
 8009c06:	4610      	mov	r0, r2
 8009c08:	f7fe fa64 	bl	80080d4 <move_window>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d138      	bne.n	8009c88 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	330b      	adds	r3, #11
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	330b      	adds	r3, #11
 8009c26:	f042 0220 	orr.w	r2, r2, #32
 8009c2a:	b2d2      	uxtb	r2, r2
 8009c2c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6818      	ldr	r0, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	461a      	mov	r2, r3
 8009c38:	68f9      	ldr	r1, [r7, #12]
 8009c3a:	f7fe ff69 	bl	8008b10 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f103 021c 	add.w	r2, r3, #28
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	f7fd ffe8 	bl	8007c20 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	3316      	adds	r3, #22
 8009c54:	6939      	ldr	r1, [r7, #16]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fd ffe2 	bl	8007c20 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3312      	adds	r3, #18
 8009c60:	2100      	movs	r1, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fd ffc1 	bl	8007bea <st_word>
					fs->wflag = 1;
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe fa5d 	bl	8008130 <sync_fs>
 8009c76:	4603      	mov	r3, r0
 8009c78:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	7d1b      	ldrb	r3, [r3, #20]
 8009c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3718      	adds	r7, #24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7ff ff7b 	bl	8009b96 <f_sync>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d118      	bne.n	8009cdc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f107 0208 	add.w	r2, r7, #8
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff fbc0 	bl	8009438 <validate>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10c      	bne.n	8009cdc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe f960 	bl	8007f8c <dec_lock>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d102      	bne.n	8009cdc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8009ce8:	b590      	push	{r4, r7, lr}
 8009cea:	b09d      	sub	sp, #116	; 0x74
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	607a      	str	r2, [r7, #4]
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8009cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d00:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8009d02:	f107 030c 	add.w	r3, r7, #12
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7ff f8af 	bl	8008e6a <get_ldnumber>
 8009d0c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	da02      	bge.n	8009d1a <f_mkfs+0x32>
 8009d14:	230b      	movs	r3, #11
 8009d16:	f000 bc0d 	b.w	800a534 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8009d1a:	4a94      	ldr	r2, [pc, #592]	; (8009f6c <f_mkfs+0x284>)
 8009d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d005      	beq.n	8009d32 <f_mkfs+0x4a>
 8009d26:	4a91      	ldr	r2, [pc, #580]	; (8009f6c <f_mkfs+0x284>)
 8009d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8009d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d34:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8009d3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fd fe92 	bl	8007a6c <disk_initialize>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8009d4e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <f_mkfs+0x76>
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e3ea      	b.n	800a534 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8009d5e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009d62:	f003 0304 	and.w	r3, r3, #4
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <f_mkfs+0x86>
 8009d6a:	230a      	movs	r3, #10
 8009d6c:	e3e2      	b.n	800a534 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8009d6e:	f107 0214 	add.w	r2, r7, #20
 8009d72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009d76:	2103      	movs	r1, #3
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fd fedd 	bl	8007b38 <disk_ioctl>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10c      	bne.n	8009d9e <f_mkfs+0xb6>
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d009      	beq.n	8009d9e <f_mkfs+0xb6>
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d90:	d805      	bhi.n	8009d9e <f_mkfs+0xb6>
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	1e5a      	subs	r2, r3, #1
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <f_mkfs+0xba>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8009da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009da6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <f_mkfs+0xce>
 8009dae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d309      	bcc.n	8009dca <f_mkfs+0xe2>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009dbc:	d805      	bhi.n	8009dca <f_mkfs+0xe2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	1e5a      	subs	r2, r3, #1
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d001      	beq.n	8009dce <f_mkfs+0xe6>
 8009dca:	2313      	movs	r3, #19
 8009dcc:	e3b2      	b.n	800a534 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8009dce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8009ddc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8009de8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	fb02 f303 	mul.w	r3, r2, r3
 8009df0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8009df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d101      	bne.n	8009dfc <f_mkfs+0x114>
 8009df8:	230e      	movs	r3, #14
 8009dfa:	e39b      	b.n	800a534 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8009dfc:	f107 0210 	add.w	r2, r7, #16
 8009e00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e04:	2101      	movs	r1, #1
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fd fe96 	bl	8007b38 <disk_ioctl>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <f_mkfs+0x12e>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e38e      	b.n	800a534 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	f003 0308 	and.w	r3, r3, #8
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <f_mkfs+0x13c>
 8009e20:	2300      	movs	r3, #0
 8009e22:	e000      	b.n	8009e26 <f_mkfs+0x13e>
 8009e24:	233f      	movs	r3, #63	; 0x3f
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d901      	bls.n	8009e34 <f_mkfs+0x14c>
 8009e30:	230e      	movs	r3, #14
 8009e32:	e37f      	b.n	800a534 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8009e40:	d801      	bhi.n	8009e46 <f_mkfs+0x15e>
 8009e42:	230e      	movs	r3, #14
 8009e44:	e376      	b.n	800a534 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b80      	cmp	r3, #128	; 0x80
 8009e4a:	d901      	bls.n	8009e50 <f_mkfs+0x168>
 8009e4c:	2313      	movs	r3, #19
 8009e4e:	e371      	b.n	800a534 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8009e50:	7afb      	ldrb	r3, [r7, #11]
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00d      	beq.n	8009e76 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8009e5a:	7afb      	ldrb	r3, [r7, #11]
 8009e5c:	f003 0307 	and.w	r3, r3, #7
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d004      	beq.n	8009e6e <f_mkfs+0x186>
 8009e64:	7afb      	ldrb	r3, [r7, #11]
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d103      	bne.n	8009e76 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009e74:	e009      	b.n	8009e8a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8009e76:	7afb      	ldrb	r3, [r7, #11]
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <f_mkfs+0x19c>
 8009e80:	2313      	movs	r3, #19
 8009e82:	e357      	b.n	800a534 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8009e84:	2302      	movs	r3, #2
 8009e86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8009e8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d13c      	bne.n	8009f10 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8009e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d11b      	bne.n	8009ed4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	0c5b      	lsrs	r3, r3, #17
 8009ea0:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009eaa:	e005      	b.n	8009eb8 <f_mkfs+0x1d0>
 8009eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eae:	3301      	adds	r3, #1
 8009eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009eb8:	4a2d      	ldr	r2, [pc, #180]	; (8009f70 <f_mkfs+0x288>)
 8009eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d007      	beq.n	8009ed4 <f_mkfs+0x1ec>
 8009ec4:	4a2a      	ldr	r2, [pc, #168]	; (8009f70 <f_mkfs+0x288>)
 8009ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d2eb      	bcs.n	8009eac <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8009ed4:	693a      	ldr	r2, [r7, #16]
 8009ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009edc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	3302      	adds	r3, #2
 8009ee2:	009a      	lsls	r2, r3, #2
 8009ee4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ee6:	4413      	add	r3, r2
 8009ee8:	1e5a      	subs	r2, r3, #1
 8009eea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8009ef2:	2320      	movs	r3, #32
 8009ef4:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d903      	bls.n	8009f0c <f_mkfs+0x224>
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	4a1b      	ldr	r2, [pc, #108]	; (8009f74 <f_mkfs+0x28c>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d952      	bls.n	8009fb2 <f_mkfs+0x2ca>
 8009f0c:	230e      	movs	r3, #14
 8009f0e:	e311      	b.n	800a534 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8009f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d11b      	bne.n	8009f4e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	0b1b      	lsrs	r3, r3, #12
 8009f1a:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f20:	2301      	movs	r3, #1
 8009f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f24:	e005      	b.n	8009f32 <f_mkfs+0x24a>
 8009f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f28:	3301      	adds	r3, #1
 8009f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f2e:	005b      	lsls	r3, r3, #1
 8009f30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f32:	4a11      	ldr	r2, [pc, #68]	; (8009f78 <f_mkfs+0x290>)
 8009f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d007      	beq.n	8009f4e <f_mkfs+0x266>
 8009f3e:	4a0e      	ldr	r2, [pc, #56]	; (8009f78 <f_mkfs+0x290>)
 8009f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f46:	461a      	mov	r2, r3
 8009f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d2eb      	bcs.n	8009f26 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f56:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d90c      	bls.n	8009f7c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	3302      	adds	r3, #2
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	663b      	str	r3, [r7, #96]	; 0x60
 8009f6a:	e012      	b.n	8009f92 <f_mkfs+0x2aa>
 8009f6c:	20000048 	.word	0x20000048
 8009f70:	0800acd0 	.word	0x0800acd0
 8009f74:	0ffffff5 	.word	0x0ffffff5
 8009f78:	0800ace0 	.word	0x0800ace0
				} else {
					fmt = FS_FAT12;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8009f82:	6a3a      	ldr	r2, [r7, #32]
 8009f84:	4613      	mov	r3, r2
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	4413      	add	r3, r2
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	085b      	lsrs	r3, r3, #1
 8009f8e:	3303      	adds	r3, #3
 8009f90:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8009f92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009f94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f96:	4413      	add	r3, r2
 8009f98:	1e5a      	subs	r2, r3, #1
 8009f9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8009fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fa8:	015a      	lsls	r2, r3, #5
 8009faa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb0:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8009fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fb6:	4413      	add	r3, r2
 8009fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8009fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fbe:	fb02 f203 	mul.w	r2, r2, r3
 8009fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fc4:	4413      	add	r3, r2
 8009fc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fc8:	4413      	add	r3, r2
 8009fca:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8009fcc:	697a      	ldr	r2, [r7, #20]
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	1e5a      	subs	r2, r3, #1
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	425b      	negs	r3, r3
 8009fd8:	401a      	ands	r2, r3
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8009fe0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d108      	bne.n	8009ffa <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8009fe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fec:	4413      	add	r3, r2
 8009fee:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ff0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ff4:	4413      	add	r3, r2
 8009ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ff8:	e006      	b.n	800a008 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8009ffa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a002:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a004:	4413      	add	r3, r2
 800a006:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800a008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a00a:	011a      	lsls	r2, r3, #4
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	441a      	add	r2, r3
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	1ad2      	subs	r2, r2, r3
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	429a      	cmp	r2, r3
 800a018:	d901      	bls.n	800a01e <f_mkfs+0x336>
 800a01a:	230e      	movs	r3, #14
 800a01c:	e28a      	b.n	800a534 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a022:	1ad2      	subs	r2, r2, r3
 800a024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a028:	fb01 f303 	mul.w	r3, r1, r3
 800a02c:	1ad2      	subs	r2, r2, r3
 800a02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a030:	1ad2      	subs	r2, r2, r3
 800a032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a034:	fbb2 f3f3 	udiv	r3, r2, r3
 800a038:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800a03a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d10f      	bne.n	800a062 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a048:	4293      	cmp	r3, r2
 800a04a:	d80a      	bhi.n	800a062 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d105      	bne.n	800a05e <f_mkfs+0x376>
 800a052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a054:	085b      	lsrs	r3, r3, #1
 800a056:	607b      	str	r3, [r7, #4]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d144      	bne.n	800a0e8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800a05e:	230e      	movs	r3, #14
 800a060:	e268      	b.n	800a534 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800a062:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a066:	2b02      	cmp	r3, #2
 800a068:	d133      	bne.n	800a0d2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a070:	4293      	cmp	r3, r2
 800a072:	d91e      	bls.n	800a0b2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d107      	bne.n	800a08a <f_mkfs+0x3a2>
 800a07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a07c:	005b      	lsls	r3, r3, #1
 800a07e:	2b40      	cmp	r3, #64	; 0x40
 800a080:	d803      	bhi.n	800a08a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800a082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	607b      	str	r3, [r7, #4]
 800a088:	e033      	b.n	800a0f2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	f003 0302 	and.w	r3, r3, #2
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a094:	2303      	movs	r3, #3
 800a096:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a09a:	e02a      	b.n	800a0f2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d105      	bne.n	800a0ae <f_mkfs+0x3c6>
 800a0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	607b      	str	r3, [r7, #4]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b80      	cmp	r3, #128	; 0x80
 800a0ac:	d91e      	bls.n	800a0ec <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800a0ae:	230e      	movs	r3, #14
 800a0b0:	e240      	b.n	800a534 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d80a      	bhi.n	800a0d2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d105      	bne.n	800a0ce <f_mkfs+0x3e6>
 800a0c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	607b      	str	r3, [r7, #4]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b80      	cmp	r3, #128	; 0x80
 800a0cc:	d910      	bls.n	800a0f0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800a0ce:	230e      	movs	r3, #14
 800a0d0:	e230      	b.n	800a534 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800a0d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d10c      	bne.n	800a0f4 <f_mkfs+0x40c>
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d907      	bls.n	800a0f4 <f_mkfs+0x40c>
 800a0e4:	230e      	movs	r3, #14
 800a0e6:	e225      	b.n	800a534 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a0e8:	bf00      	nop
 800a0ea:	e6ce      	b.n	8009e8a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a0ec:	bf00      	nop
 800a0ee:	e6cc      	b.n	8009e8a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a0f0:	bf00      	nop
			pau = au;
 800a0f2:	e6ca      	b.n	8009e8a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800a0f4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800a0f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0fe:	f7fd fddc 	bl	8007cba <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800a102:	220b      	movs	r2, #11
 800a104:	49bc      	ldr	r1, [pc, #752]	; (800a3f8 <f_mkfs+0x710>)
 800a106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a108:	f7fd fdb6 	bl	8007c78 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10e:	330b      	adds	r3, #11
 800a110:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a112:	4611      	mov	r1, r2
 800a114:	4618      	mov	r0, r3
 800a116:	f7fd fd68 	bl	8007bea <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11c:	330d      	adds	r3, #13
 800a11e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a120:	b2d2      	uxtb	r2, r2
 800a122:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a126:	330e      	adds	r3, #14
 800a128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a12a:	b292      	uxth	r2, r2
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fd fd5b 	bl	8007bea <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800a134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a136:	3310      	adds	r3, #16
 800a138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a13a:	b2d2      	uxtb	r2, r2
 800a13c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800a13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a140:	f103 0211 	add.w	r2, r3, #17
 800a144:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a148:	2b03      	cmp	r3, #3
 800a14a:	d002      	beq.n	800a152 <f_mkfs+0x46a>
 800a14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a14e:	b29b      	uxth	r3, r3
 800a150:	e000      	b.n	800a154 <f_mkfs+0x46c>
 800a152:	2300      	movs	r3, #0
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	f7fd fd47 	bl	8007bea <st_word>
		if (sz_vol < 0x10000) {
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a162:	d208      	bcs.n	800a176 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a166:	3313      	adds	r3, #19
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	b292      	uxth	r2, r2
 800a16c:	4611      	mov	r1, r2
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fd fd3b 	bl	8007bea <st_word>
 800a174:	e006      	b.n	800a184 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800a176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a178:	3320      	adds	r3, #32
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fd fd4e 	bl	8007c20 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	3315      	adds	r3, #21
 800a188:	22f8      	movs	r2, #248	; 0xf8
 800a18a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18e:	3318      	adds	r3, #24
 800a190:	213f      	movs	r1, #63	; 0x3f
 800a192:	4618      	mov	r0, r3
 800a194:	f7fd fd29 	bl	8007bea <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	331a      	adds	r3, #26
 800a19c:	21ff      	movs	r1, #255	; 0xff
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fd fd23 	bl	8007bea <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	331c      	adds	r3, #28
 800a1a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fd fd38 	bl	8007c20 <st_dword>
		if (fmt == FS_FAT32) {
 800a1b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a1b4:	2b03      	cmp	r3, #3
 800a1b6:	d131      	bne.n	800a21c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ba:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800a1be:	f7fc f92f 	bl	8006420 <get_fattime>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f7fd fd2a 	bl	8007c20 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	3324      	adds	r3, #36	; 0x24
 800a1d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fd fd24 	bl	8007c20 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1da:	332c      	adds	r3, #44	; 0x2c
 800a1dc:	2102      	movs	r1, #2
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fd fd1e 	bl	8007c20 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e6:	3330      	adds	r3, #48	; 0x30
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fd fcfd 	bl	8007bea <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f2:	3332      	adds	r3, #50	; 0x32
 800a1f4:	2106      	movs	r1, #6
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fd fcf7 	bl	8007bea <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	3340      	adds	r3, #64	; 0x40
 800a200:	2280      	movs	r2, #128	; 0x80
 800a202:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a206:	3342      	adds	r3, #66	; 0x42
 800a208:	2229      	movs	r2, #41	; 0x29
 800a20a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20e:	3347      	adds	r3, #71	; 0x47
 800a210:	2213      	movs	r2, #19
 800a212:	497a      	ldr	r1, [pc, #488]	; (800a3fc <f_mkfs+0x714>)
 800a214:	4618      	mov	r0, r3
 800a216:	f7fd fd2f 	bl	8007c78 <mem_cpy>
 800a21a:	e020      	b.n	800a25e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800a21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800a222:	f7fc f8fd 	bl	8006420 <get_fattime>
 800a226:	4603      	mov	r3, r0
 800a228:	4619      	mov	r1, r3
 800a22a:	4620      	mov	r0, r4
 800a22c:	f7fd fcf8 	bl	8007c20 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	3316      	adds	r3, #22
 800a234:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a236:	b292      	uxth	r2, r2
 800a238:	4611      	mov	r1, r2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fd fcd5 	bl	8007bea <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a242:	3324      	adds	r3, #36	; 0x24
 800a244:	2280      	movs	r2, #128	; 0x80
 800a246:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24a:	3326      	adds	r3, #38	; 0x26
 800a24c:	2229      	movs	r2, #41	; 0x29
 800a24e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a252:	332b      	adds	r3, #43	; 0x2b
 800a254:	2213      	movs	r2, #19
 800a256:	496a      	ldr	r1, [pc, #424]	; (800a400 <f_mkfs+0x718>)
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fd fd0d 	bl	8007c78 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a260:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a264:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fd fcbe 	bl	8007bea <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800a26e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a272:	2301      	movs	r3, #1
 800a274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a276:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a278:	f7fd fc3e 	bl	8007af8 <disk_write>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <f_mkfs+0x59e>
 800a282:	2301      	movs	r3, #1
 800a284:	e156      	b.n	800a534 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800a286:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d140      	bne.n	800a310 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	1d9a      	adds	r2, r3, #6
 800a292:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a296:	2301      	movs	r3, #1
 800a298:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a29a:	f7fd fc2d 	bl	8007af8 <disk_write>
			mem_set(buf, 0, ss);
 800a29e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2a6:	f7fd fd08 	bl	8007cba <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a2aa:	4956      	ldr	r1, [pc, #344]	; (800a404 <f_mkfs+0x71c>)
 800a2ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ae:	f7fd fcb7 	bl	8007c20 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a2b8:	4953      	ldr	r1, [pc, #332]	; (800a408 <f_mkfs+0x720>)
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fd fcb0 	bl	8007c20 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	f7fd fca7 	bl	8007c20 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a2d8:	2102      	movs	r1, #2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fd fca0 	bl	8007c20 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2e6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fd fc7d 	bl	8007bea <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	1dda      	adds	r2, r3, #7
 800a2f4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2fc:	f7fd fbfc 	bl	8007af8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a308:	2301      	movs	r3, #1
 800a30a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a30c:	f7fd fbf4 	bl	8007af8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800a310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a312:	2100      	movs	r1, #0
 800a314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a316:	f7fd fcd0 	bl	8007cba <mem_set>
		sect = b_fat;		/* FAT start sector */
 800a31a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a31c:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a31e:	2300      	movs	r3, #0
 800a320:	64bb      	str	r3, [r7, #72]	; 0x48
 800a322:	e04b      	b.n	800a3bc <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800a324:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a328:	2b03      	cmp	r3, #3
 800a32a:	d113      	bne.n	800a354 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800a32c:	f06f 0107 	mvn.w	r1, #7
 800a330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a332:	f7fd fc75 	bl	8007c20 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	3304      	adds	r3, #4
 800a33a:	f04f 31ff 	mov.w	r1, #4294967295
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fd fc6e 	bl	8007c20 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	3308      	adds	r3, #8
 800a348:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fd fc67 	bl	8007c20 <st_dword>
 800a352:	e00b      	b.n	800a36c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800a354:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d101      	bne.n	800a360 <f_mkfs+0x678>
 800a35c:	4b2b      	ldr	r3, [pc, #172]	; (800a40c <f_mkfs+0x724>)
 800a35e:	e001      	b.n	800a364 <f_mkfs+0x67c>
 800a360:	f06f 0307 	mvn.w	r3, #7
 800a364:	4619      	mov	r1, r3
 800a366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a368:	f7fd fc5a 	bl	8007c20 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800a36c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a36e:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800a370:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a374:	4293      	cmp	r3, r2
 800a376:	bf28      	it	cs
 800a378:	4613      	movcs	r3, r2
 800a37a:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a37c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a382:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a386:	f7fd fbb7 	bl	8007af8 <disk_write>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <f_mkfs+0x6ac>
 800a390:	2301      	movs	r3, #1
 800a392:	e0cf      	b.n	800a534 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800a394:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a396:	461a      	mov	r2, r3
 800a398:	2100      	movs	r1, #0
 800a39a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a39c:	f7fd fc8d 	bl	8007cba <mem_set>
				sect += n; nsect -= n;
 800a3a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a3a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3a4:	4413      	add	r3, r2
 800a3a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a3aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800a3b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1dc      	bne.n	800a370 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a3b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d3af      	bcc.n	800a324 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800a3c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d101      	bne.n	800a3d0 <f_mkfs+0x6e8>
 800a3cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ce:	e000      	b.n	800a3d2 <f_mkfs+0x6ea>
 800a3d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3d2:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800a3d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	bf28      	it	cs
 800a3dc:	4613      	movcs	r3, r2
 800a3de:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a3e0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a3e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a3e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3ea:	f7fd fb85 	bl	8007af8 <disk_write>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00d      	beq.n	800a410 <f_mkfs+0x728>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e09d      	b.n	800a534 <f_mkfs+0x84c>
 800a3f8:	0800abf4 	.word	0x0800abf4
 800a3fc:	0800ac00 	.word	0x0800ac00
 800a400:	0800ac14 	.word	0x0800ac14
 800a404:	41615252 	.word	0x41615252
 800a408:	61417272 	.word	0x61417272
 800a40c:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800a410:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a414:	4413      	add	r3, r2
 800a416:	66bb      	str	r3, [r7, #104]	; 0x68
 800a418:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a41a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800a420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1d6      	bne.n	800a3d4 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800a426:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a42a:	2b03      	cmp	r3, #3
 800a42c:	d103      	bne.n	800a436 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800a42e:	230c      	movs	r3, #12
 800a430:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800a434:	e010      	b.n	800a458 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a43c:	d303      	bcc.n	800a446 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800a43e:	2306      	movs	r3, #6
 800a440:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800a444:	e008      	b.n	800a458 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800a446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d101      	bne.n	800a452 <f_mkfs+0x76a>
 800a44e:	2304      	movs	r3, #4
 800a450:	e000      	b.n	800a454 <f_mkfs+0x76c>
 800a452:	2301      	movs	r3, #1
 800a454:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800a458:	7afb      	ldrb	r3, [r7, #11]
 800a45a:	f003 0308 	and.w	r3, r3, #8
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d15b      	bne.n	800a51a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800a462:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a464:	461a      	mov	r2, r3
 800a466:	2100      	movs	r1, #0
 800a468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a46a:	f7fd fc26 	bl	8007cba <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a474:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fd fbb6 	bl	8007bea <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a484:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	2200      	movs	r2, #0
 800a48a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	3301      	adds	r3, #1
 800a490:	2201      	movs	r2, #1
 800a492:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	3302      	adds	r3, #2
 800a498:	2201      	movs	r2, #1
 800a49a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	3303      	adds	r3, #3
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800a4ac:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	441a      	add	r2, r3
 800a4b4:	4b21      	ldr	r3, [pc, #132]	; (800a53c <f_mkfs+0x854>)
 800a4b6:	fba3 1302 	umull	r1, r3, r3, r2
 800a4ba:	1ad2      	subs	r2, r2, r3
 800a4bc:	0852      	lsrs	r2, r2, #1
 800a4be:	4413      	add	r3, r2
 800a4c0:	0b5b      	lsrs	r3, r3, #13
 800a4c2:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	3305      	adds	r3, #5
 800a4c8:	22fe      	movs	r2, #254	; 0xfe
 800a4ca:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800a4cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4ce:	089b      	lsrs	r3, r3, #2
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	3306      	adds	r3, #6
 800a4d6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800a4da:	b2d2      	uxtb	r2, r2
 800a4dc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	3307      	adds	r3, #7
 800a4e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a4e4:	b2d2      	uxtb	r2, r2
 800a4e6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fd fb96 	bl	8007c20 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	330c      	adds	r3, #12
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fd fb8f 	bl	8007c20 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a502:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a506:	2301      	movs	r3, #1
 800a508:	2200      	movs	r2, #0
 800a50a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a50c:	f7fd faf4 	bl	8007af8 <disk_write>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <f_mkfs+0x832>
 800a516:	2301      	movs	r3, #1
 800a518:	e00c      	b.n	800a534 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800a51a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a51e:	2200      	movs	r2, #0
 800a520:	2100      	movs	r1, #0
 800a522:	4618      	mov	r0, r3
 800a524:	f7fd fb08 	bl	8007b38 <disk_ioctl>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <f_mkfs+0x84a>
 800a52e:	2301      	movs	r3, #1
 800a530:	e000      	b.n	800a534 <f_mkfs+0x84c>

	return FR_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3774      	adds	r7, #116	; 0x74
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd90      	pop	{r4, r7, pc}
 800a53c:	0515565b 	.word	0x0515565b

0800a540 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	460b      	mov	r3, r1
 800a54a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	2b0a      	cmp	r3, #10
 800a550:	d103      	bne.n	800a55a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a552:	210d      	movs	r1, #13
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff fff3 	bl	800a540 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	db25      	blt.n	800a5b2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	1c5a      	adds	r2, r3, #1
 800a56a:	60fa      	str	r2, [r7, #12]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	4413      	add	r3, r2
 800a570:	78fa      	ldrb	r2, [r7, #3]
 800a572:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b3c      	cmp	r3, #60	; 0x3c
 800a578:	dd12      	ble.n	800a5a0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6818      	ldr	r0, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f103 010c 	add.w	r1, r3, #12
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	f107 0308 	add.w	r3, r7, #8
 800a58a:	f7ff f98f 	bl	80098ac <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	429a      	cmp	r2, r3
 800a594:	d101      	bne.n	800a59a <putc_bfd+0x5a>
 800a596:	2300      	movs	r3, #0
 800a598:	e001      	b.n	800a59e <putc_bfd+0x5e>
 800a59a:	f04f 33ff 	mov.w	r3, #4294967295
 800a59e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	609a      	str	r2, [r3, #8]
 800a5b0:	e000      	b.n	800a5b4 <putc_bfd+0x74>
	if (i < 0) return;
 800a5b2:	bf00      	nop
}
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	db17      	blt.n	800a5fa <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f103 010c 	add.w	r1, r3, #12
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	f107 030c 	add.w	r3, r7, #12
 800a5de:	f7ff f965 	bl	80098ac <f_write>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d108      	bne.n	800a5fa <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d102      	bne.n	800a5fa <putc_flush+0x40>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	e001      	b.n	800a5fe <putc_flush+0x44>
	return EOF;
 800a5fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a606:	b480      	push	{r7}
 800a608:	b083      	sub	sp, #12
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	605a      	str	r2, [r3, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	609a      	str	r2, [r3, #8]
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a630:	b40e      	push	{r1, r2, r3}
 800a632:	b580      	push	{r7, lr}
 800a634:	b0a7      	sub	sp, #156	; 0x9c
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a63a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	4618      	mov	r0, r3
 800a642:	f7ff ffe0 	bl	800a606 <putc_init>

	va_start(arp, fmt);
 800a646:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a64a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800a64c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a650:	1c5a      	adds	r2, r3, #1
 800a652:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800a65c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 81f4 	beq.w	800aa4e <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800a666:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a66a:	2b25      	cmp	r3, #37	; 0x25
 800a66c:	d008      	beq.n	800a680 <f_printf+0x50>
			putc_bfd(&pb, c);
 800a66e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a676:	4611      	mov	r1, r2
 800a678:	4618      	mov	r0, r3
 800a67a:	f7ff ff61 	bl	800a540 <putc_bfd>
			continue;
 800a67e:	e1e5      	b.n	800aa4c <f_printf+0x41c>
		}
		w = f = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a686:	2300      	movs	r3, #0
 800a688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800a68c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a690:	1c5a      	adds	r2, r3, #1
 800a692:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800a69c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a6a0:	2b30      	cmp	r3, #48	; 0x30
 800a6a2:	d10b      	bne.n	800a6bc <f_printf+0x8c>
			f = 1; c = *fmt++;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a6aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6ae:	1c5a      	adds	r2, r3, #1
 800a6b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800a6ba:	e024      	b.n	800a706 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a6bc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a6c0:	2b2d      	cmp	r3, #45	; 0x2d
 800a6c2:	d120      	bne.n	800a706 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a6ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800a6da:	e014      	b.n	800a706 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800a6dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a6ee:	4413      	add	r3, r2
 800a6f0:	3b30      	subs	r3, #48	; 0x30
 800a6f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800a6f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800a706:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a70a:	2b2f      	cmp	r3, #47	; 0x2f
 800a70c:	d903      	bls.n	800a716 <f_printf+0xe6>
 800a70e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a712:	2b39      	cmp	r3, #57	; 0x39
 800a714:	d9e2      	bls.n	800a6dc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a716:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a71a:	2b6c      	cmp	r3, #108	; 0x6c
 800a71c:	d003      	beq.n	800a726 <f_printf+0xf6>
 800a71e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a722:	2b4c      	cmp	r3, #76	; 0x4c
 800a724:	d10d      	bne.n	800a742 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800a726:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a72a:	f043 0304 	orr.w	r3, r3, #4
 800a72e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800a742:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 8183 	beq.w	800aa52 <f_printf+0x422>
		d = c;
 800a74c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a750:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800a754:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a758:	2b60      	cmp	r3, #96	; 0x60
 800a75a:	d908      	bls.n	800a76e <f_printf+0x13e>
 800a75c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a760:	2b7a      	cmp	r3, #122	; 0x7a
 800a762:	d804      	bhi.n	800a76e <f_printf+0x13e>
 800a764:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a768:	3b20      	subs	r3, #32
 800a76a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800a76e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a772:	3b42      	subs	r3, #66	; 0x42
 800a774:	2b16      	cmp	r3, #22
 800a776:	f200 8098 	bhi.w	800a8aa <f_printf+0x27a>
 800a77a:	a201      	add	r2, pc, #4	; (adr r2, 800a780 <f_printf+0x150>)
 800a77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a780:	0800a88b 	.word	0x0800a88b
 800a784:	0800a873 	.word	0x0800a873
 800a788:	0800a89b 	.word	0x0800a89b
 800a78c:	0800a8ab 	.word	0x0800a8ab
 800a790:	0800a8ab 	.word	0x0800a8ab
 800a794:	0800a8ab 	.word	0x0800a8ab
 800a798:	0800a8ab 	.word	0x0800a8ab
 800a79c:	0800a8ab 	.word	0x0800a8ab
 800a7a0:	0800a8ab 	.word	0x0800a8ab
 800a7a4:	0800a8ab 	.word	0x0800a8ab
 800a7a8:	0800a8ab 	.word	0x0800a8ab
 800a7ac:	0800a8ab 	.word	0x0800a8ab
 800a7b0:	0800a8ab 	.word	0x0800a8ab
 800a7b4:	0800a893 	.word	0x0800a893
 800a7b8:	0800a8ab 	.word	0x0800a8ab
 800a7bc:	0800a8ab 	.word	0x0800a8ab
 800a7c0:	0800a8ab 	.word	0x0800a8ab
 800a7c4:	0800a7dd 	.word	0x0800a7dd
 800a7c8:	0800a8ab 	.word	0x0800a8ab
 800a7cc:	0800a89b 	.word	0x0800a89b
 800a7d0:	0800a8ab 	.word	0x0800a8ab
 800a7d4:	0800a8ab 	.word	0x0800a8ab
 800a7d8:	0800a8a3 	.word	0x0800a8a3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800a7dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7de:	1d1a      	adds	r2, r3, #4
 800a7e0:	67ba      	str	r2, [r7, #120]	; 0x78
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a7ec:	e004      	b.n	800a7f8 <f_printf+0x1c8>
 800a7ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a7f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a7fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7fe:	4413      	add	r3, r2
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1f3      	bne.n	800a7ee <f_printf+0x1be>
			if (!(f & 2)) {
 800a806:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d11a      	bne.n	800a848 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800a812:	e005      	b.n	800a820 <f_printf+0x1f0>
 800a814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a818:	2120      	movs	r1, #32
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff fe90 	bl	800a540 <putc_bfd>
 800a820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a82a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a82e:	429a      	cmp	r2, r3
 800a830:	d8f0      	bhi.n	800a814 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800a832:	e009      	b.n	800a848 <f_printf+0x218>
 800a834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a83a:	781a      	ldrb	r2, [r3, #0]
 800a83c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a840:	4611      	mov	r1, r2
 800a842:	4618      	mov	r0, r3
 800a844:	f7ff fe7c 	bl	800a540 <putc_bfd>
 800a848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1f1      	bne.n	800a834 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800a850:	e005      	b.n	800a85e <f_printf+0x22e>
 800a852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a856:	2120      	movs	r1, #32
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff fe71 	bl	800a540 <putc_bfd>
 800a85e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a862:	1c5a      	adds	r2, r3, #1
 800a864:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a868:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d8f0      	bhi.n	800a852 <f_printf+0x222>
			continue;
 800a870:	e0ec      	b.n	800aa4c <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800a872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a874:	1d1a      	adds	r2, r3, #4
 800a876:	67ba      	str	r2, [r7, #120]	; 0x78
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	b2da      	uxtb	r2, r3
 800a87c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a880:	4611      	mov	r1, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff fe5c 	bl	800a540 <putc_bfd>
 800a888:	e0e0      	b.n	800aa4c <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800a88a:	2302      	movs	r3, #2
 800a88c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a890:	e014      	b.n	800a8bc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800a892:	2308      	movs	r3, #8
 800a894:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a898:	e010      	b.n	800a8bc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800a89a:	230a      	movs	r3, #10
 800a89c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a8a0:	e00c      	b.n	800a8bc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800a8a2:	2310      	movs	r3, #16
 800a8a4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a8a8:	e008      	b.n	800a8bc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800a8aa:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a8ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fe43 	bl	800a540 <putc_bfd>
 800a8ba:	e0c7      	b.n	800aa4c <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a8bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a8c0:	f003 0304 	and.w	r3, r3, #4
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d004      	beq.n	800a8d2 <f_printf+0x2a2>
 800a8c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ca:	1d1a      	adds	r2, r3, #4
 800a8cc:	67ba      	str	r2, [r7, #120]	; 0x78
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	e00c      	b.n	800a8ec <f_printf+0x2bc>
 800a8d2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a8d6:	2b44      	cmp	r3, #68	; 0x44
 800a8d8:	d104      	bne.n	800a8e4 <f_printf+0x2b4>
 800a8da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8dc:	1d1a      	adds	r2, r3, #4
 800a8de:	67ba      	str	r2, [r7, #120]	; 0x78
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	e003      	b.n	800a8ec <f_printf+0x2bc>
 800a8e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8e6:	1d1a      	adds	r2, r3, #4
 800a8e8:	67ba      	str	r2, [r7, #120]	; 0x78
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800a8f0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a8f4:	2b44      	cmp	r3, #68	; 0x44
 800a8f6:	d10e      	bne.n	800a916 <f_printf+0x2e6>
 800a8f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	da0a      	bge.n	800a916 <f_printf+0x2e6>
			v = 0 - v;
 800a900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a904:	425b      	negs	r3, r3
 800a906:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800a90a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a90e:	f043 0308 	orr.w	r3, r3, #8
 800a912:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800a91c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800a920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a924:	fbb3 f1f2 	udiv	r1, r3, r2
 800a928:	fb02 f201 	mul.w	r2, r2, r1
 800a92c:	1a9b      	subs	r3, r3, r2
 800a92e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800a932:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800a936:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a93a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a942:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a946:	2b09      	cmp	r3, #9
 800a948:	d90b      	bls.n	800a962 <f_printf+0x332>
 800a94a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a94e:	2b78      	cmp	r3, #120	; 0x78
 800a950:	d101      	bne.n	800a956 <f_printf+0x326>
 800a952:	2227      	movs	r2, #39	; 0x27
 800a954:	e000      	b.n	800a958 <f_printf+0x328>
 800a956:	2207      	movs	r2, #7
 800a958:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a95c:	4413      	add	r3, r2
 800a95e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800a962:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a966:	1c5a      	adds	r2, r3, #1
 800a968:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a96c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a970:	3230      	adds	r2, #48	; 0x30
 800a972:	b2d2      	uxtb	r2, r2
 800a974:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800a978:	440b      	add	r3, r1
 800a97a:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800a97e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <f_printf+0x35e>
 800a986:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a98a:	2b1f      	cmp	r3, #31
 800a98c:	d9c6      	bls.n	800a91c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800a98e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a992:	f003 0308 	and.w	r3, r3, #8
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <f_printf+0x380>
 800a99a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a99e:	1c5a      	adds	r2, r3, #1
 800a9a0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a9a4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800a9a8:	4413      	add	r3, r2
 800a9aa:	222d      	movs	r2, #45	; 0x2d
 800a9ac:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800a9b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a9b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a9b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <f_printf+0x398>
 800a9c4:	2330      	movs	r3, #48	; 0x30
 800a9c6:	e000      	b.n	800a9ca <f_printf+0x39a>
 800a9c8:	2320      	movs	r3, #32
 800a9ca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a9ce:	e007      	b.n	800a9e0 <f_printf+0x3b0>
 800a9d0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a9d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9d8:	4611      	mov	r1, r2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff fdb0 	bl	800a540 <putc_bfd>
 800a9e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d108      	bne.n	800a9fe <f_printf+0x3ce>
 800a9ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9f0:	1c5a      	adds	r2, r3, #1
 800a9f2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a9f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d8e8      	bhi.n	800a9d0 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800a9fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa02:	3b01      	subs	r3, #1
 800aa04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa08:	f107 020c 	add.w	r2, r7, #12
 800aa0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa10:	4413      	add	r3, r2
 800aa12:	781a      	ldrb	r2, [r3, #0]
 800aa14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff fd90 	bl	800a540 <putc_bfd>
		} while (i);
 800aa20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1ea      	bne.n	800a9fe <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800aa28:	e007      	b.n	800aa3a <f_printf+0x40a>
 800aa2a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800aa2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa32:	4611      	mov	r1, r2
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff fd83 	bl	800a540 <putc_bfd>
 800aa3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa3e:	1c5a      	adds	r2, r3, #1
 800aa40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aa44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d8ee      	bhi.n	800aa2a <f_printf+0x3fa>
		c = *fmt++;
 800aa4c:	e5fe      	b.n	800a64c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800aa4e:	bf00      	nop
 800aa50:	e000      	b.n	800aa54 <f_printf+0x424>
		if (!c) break;
 800aa52:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800aa54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff fdae 	bl	800a5ba <putc_flush>
 800aa5e:	4603      	mov	r3, r0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	379c      	adds	r7, #156	; 0x9c
 800aa64:	46bd      	mov	sp, r7
 800aa66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa6a:	b003      	add	sp, #12
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop

0800aa70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aa86:	4b1f      	ldr	r3, [pc, #124]	; (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aa88:	7a5b      	ldrb	r3, [r3, #9]
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d131      	bne.n	800aaf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aa90:	4b1c      	ldr	r3, [pc, #112]	; (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aa92:	7a5b      	ldrb	r3, [r3, #9]
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	461a      	mov	r2, r3
 800aa98:	4b1a      	ldr	r3, [pc, #104]	; (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aa9e:	4b19      	ldr	r3, [pc, #100]	; (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aaa0:	7a5b      	ldrb	r3, [r3, #9]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	4a17      	ldr	r2, [pc, #92]	; (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aaae:	4b15      	ldr	r3, [pc, #84]	; (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aab0:	7a5b      	ldrb	r3, [r3, #9]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	461a      	mov	r2, r3
 800aab6:	4b13      	ldr	r3, [pc, #76]	; (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aab8:	4413      	add	r3, r2
 800aaba:	79fa      	ldrb	r2, [r7, #7]
 800aabc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aabe:	4b11      	ldr	r3, [pc, #68]	; (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aac0:	7a5b      	ldrb	r3, [r3, #9]
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	b2d1      	uxtb	r1, r2
 800aac8:	4a0e      	ldr	r2, [pc, #56]	; (800ab04 <FATFS_LinkDriverEx+0x94>)
 800aaca:	7251      	strb	r1, [r2, #9]
 800aacc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aace:	7dbb      	ldrb	r3, [r7, #22]
 800aad0:	3330      	adds	r3, #48	; 0x30
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	3301      	adds	r3, #1
 800aadc:	223a      	movs	r2, #58	; 0x3a
 800aade:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	3302      	adds	r3, #2
 800aae4:	222f      	movs	r2, #47	; 0x2f
 800aae6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	3303      	adds	r3, #3
 800aaec:	2200      	movs	r2, #0
 800aaee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	371c      	adds	r7, #28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	20000070 	.word	0x20000070

0800ab08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab12:	2200      	movs	r2, #0
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7ff ffaa 	bl	800aa70 <FATFS_LinkDriverEx>
 800ab1c:	4603      	mov	r3, r0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <__libc_init_array>:
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	4e0d      	ldr	r6, [pc, #52]	; (800ab60 <__libc_init_array+0x38>)
 800ab2c:	4c0d      	ldr	r4, [pc, #52]	; (800ab64 <__libc_init_array+0x3c>)
 800ab2e:	1ba4      	subs	r4, r4, r6
 800ab30:	10a4      	asrs	r4, r4, #2
 800ab32:	2500      	movs	r5, #0
 800ab34:	42a5      	cmp	r5, r4
 800ab36:	d109      	bne.n	800ab4c <__libc_init_array+0x24>
 800ab38:	4e0b      	ldr	r6, [pc, #44]	; (800ab68 <__libc_init_array+0x40>)
 800ab3a:	4c0c      	ldr	r4, [pc, #48]	; (800ab6c <__libc_init_array+0x44>)
 800ab3c:	f000 f820 	bl	800ab80 <_init>
 800ab40:	1ba4      	subs	r4, r4, r6
 800ab42:	10a4      	asrs	r4, r4, #2
 800ab44:	2500      	movs	r5, #0
 800ab46:	42a5      	cmp	r5, r4
 800ab48:	d105      	bne.n	800ab56 <__libc_init_array+0x2e>
 800ab4a:	bd70      	pop	{r4, r5, r6, pc}
 800ab4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab50:	4798      	blx	r3
 800ab52:	3501      	adds	r5, #1
 800ab54:	e7ee      	b.n	800ab34 <__libc_init_array+0xc>
 800ab56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab5a:	4798      	blx	r3
 800ab5c:	3501      	adds	r5, #1
 800ab5e:	e7f2      	b.n	800ab46 <__libc_init_array+0x1e>
 800ab60:	0800acf8 	.word	0x0800acf8
 800ab64:	0800acf8 	.word	0x0800acf8
 800ab68:	0800acf8 	.word	0x0800acf8
 800ab6c:	0800acfc 	.word	0x0800acfc

0800ab70 <memset>:
 800ab70:	4402      	add	r2, r0
 800ab72:	4603      	mov	r3, r0
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d100      	bne.n	800ab7a <memset+0xa>
 800ab78:	4770      	bx	lr
 800ab7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab7e:	e7f9      	b.n	800ab74 <memset+0x4>

0800ab80 <_init>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	bf00      	nop
 800ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab86:	bc08      	pop	{r3}
 800ab88:	469e      	mov	lr, r3
 800ab8a:	4770      	bx	lr

0800ab8c <_fini>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	bf00      	nop
 800ab90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab92:	bc08      	pop	{r3}
 800ab94:	469e      	mov	lr, r3
 800ab96:	4770      	bx	lr
