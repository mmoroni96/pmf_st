
NucleoG474-USB-SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b690  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800b868  0800b868  0001b868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bab8  0800bab8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bab8  0800bab8  0001bab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bac0  0800bac0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bac0  0800bac0  0001bac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bac4  0800bac4  0001bac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800bac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac4  200001f4  0800bcbc  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cb8  0800bcbc  00020cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c38  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b83  00000000  00000000  00040e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001930  00000000  00000000  000449e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001760  00000000  00000000  00046310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a5c2  00000000  00000000  00047a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018e19  00000000  00000000  00072032  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108640  00000000  00000000  0008ae4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019348b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b1c  00000000  00000000  00193508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001f4 	.word	0x200001f4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b850 	.word	0x0800b850

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001f8 	.word	0x200001f8
 8000214:	0800b850 	.word	0x0800b850

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_FDCAN1_Init+0x84>)
 800051e:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <MX_FDCAN1_Init+0x88>)
 8000520:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_FDCAN1_Init+0x84>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000536:	2200      	movs	r2, #0
 8000538:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_FDCAN1_Init+0x84>)
 800053c:	2200      	movs	r2, #0
 800053e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000542:	2200      	movs	r2, #0
 8000544:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 40;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000548:	2228      	movs	r2, #40	; 0x28
 800054a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_FDCAN1_Init+0x84>)
 800054e:	2201      	movs	r2, #1
 8000550:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000554:	220d      	movs	r2, #13
 8000556:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_FDCAN1_Init+0x84>)
 800055a:	2202      	movs	r2, #2
 800055c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000560:	2201      	movs	r2, #1
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000566:	2201      	movs	r2, #1
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_FDCAN1_Init+0x84>)
 800056c:	2201      	movs	r2, #1
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000572:	2201      	movs	r2, #1
 8000574:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000578:	2200      	movs	r2, #0
 800057a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_FDCAN1_Init+0x84>)
 800057e:	2200      	movs	r2, #0
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_FDCAN1_Init+0x84>)
 800058a:	f001 f8f9 	bl	8001780 <HAL_FDCAN_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000594:	f000 fc7c 	bl	8000e90 <Error_Handler>
  }

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000260 	.word	0x20000260
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <HAL_FDCAN_MspInit+0x80>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d129      	bne.n	800061a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000608:	2309      	movs	r3, #9
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f001 fe03 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40006400 	.word	0x40006400
 8000628:	40021000 	.word	0x40021000

0800062c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 ff53 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_GPIO_Init+0xc8>)
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_GPIO_Init+0xcc>)
 80006c4:	f001 fdac 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006c8:	2320      	movs	r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f001 fd9d 	bl	8002220 <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	48000800 	.word	0x48000800

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	f5ad 6d0b 	sub.w	sp, sp, #2224	; 0x8b0
 8000702:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 fe99 	bl	800143a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f8e8 	bl	80008dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Initialize the micro SD Card */
  if(MY_SD_Init(0) != BSP_ERROR_NONE){
 800070c:	2000      	movs	r0, #0
 800070e:	f006 f8f7 	bl	8006900 <MY_SD_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <main+0x20>
	  Error_Handler();
 8000718:	f000 fbba 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff86 	bl	800062c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000720:	f000 fdda 	bl	80012d8 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000724:	f000 fc36 	bl	8000f94 <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000728:	f006 f8ca 	bl	80068c0 <MX_FATFS_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <main+0x3a>
    Error_Handler();
 8000732:	f000 fbad 	bl	8000e90 <Error_Handler>
  }
  MX_FDCAN1_Init();
 8000736:	f7ff feef 	bl	8000518 <MX_FDCAN1_Init>
  MX_RTC_Init();
 800073a:	f000 fbad 	bl	8000e98 <MX_RTC_Init>
  MX_TIM16_Init();
 800073e:	f000 fd49 	bl	80011d4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000742:	f000 fd6d 	bl	8001220 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000746:	f000 f945 	bl	80009d4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.Identifier = 0x0;
 800074a:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <main+0x1b8>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000750:	4b58      	ldr	r3, [pc, #352]	; (80008b4 <main+0x1b8>)
 8000752:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000756:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000758:	4b56      	ldr	r3, [pc, #344]	; (80008b4 <main+0x1b8>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <main+0x1b8>)
 8000760:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000764:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000766:	4b53      	ldr	r3, [pc, #332]	; (80008b4 <main+0x1b8>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800076c:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <main+0x1b8>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000772:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <main+0x1b8>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000778:	4b4e      	ldr	r3, [pc, #312]	; (80008b4 <main+0x1b8>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <main+0x1b8>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
    TxData[0] = ubKeyNumber++;
 8000784:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <main+0x1bc>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	b2d1      	uxtb	r1, r2
 800078c:	4a4a      	ldr	r2, [pc, #296]	; (80008b8 <main+0x1bc>)
 800078e:	7011      	strb	r1, [r2, #0]
 8000790:	4a4a      	ldr	r2, [pc, #296]	; (80008bc <main+0x1c0>)
 8000792:	7013      	strb	r3, [r2, #0]
    TxData[1] = 0xAD;
 8000794:	4b49      	ldr	r3, [pc, #292]	; (80008bc <main+0x1c0>)
 8000796:	22ad      	movs	r2, #173	; 0xad
 8000798:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0xDE;
 800079a:	4b48      	ldr	r3, [pc, #288]	; (80008bc <main+0x1c0>)
 800079c:	22de      	movs	r2, #222	; 0xde
 800079e:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0xAD;
 80007a0:	4b46      	ldr	r3, [pc, #280]	; (80008bc <main+0x1c0>)
 80007a2:	22ad      	movs	r2, #173	; 0xad
 80007a4:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0xBE;
 80007a6:	4b45      	ldr	r3, [pc, #276]	; (80008bc <main+0x1c0>)
 80007a8:	22be      	movs	r2, #190	; 0xbe
 80007aa:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0xEF;
 80007ac:	4b43      	ldr	r3, [pc, #268]	; (80008bc <main+0x1c0>)
 80007ae:	22ef      	movs	r2, #239	; 0xef
 80007b0:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0xFA;
 80007b2:	4b42      	ldr	r3, [pc, #264]	; (80008bc <main+0x1c0>)
 80007b4:	22fa      	movs	r2, #250	; 0xfa
 80007b6:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0xCE;
 80007b8:	4b40      	ldr	r3, [pc, #256]	; (80008bc <main+0x1c0>)
 80007ba:	22ce      	movs	r2, #206	; 0xce
 80007bc:	71da      	strb	r2, [r3, #7]
    uint16_t aug=3456;
 80007be:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 80007c2:	f8a7 38a6 	strh.w	r3, [r7, #2214]	; 0x8a6
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80007c6:	483e      	ldr	r0, [pc, #248]	; (80008c0 <main+0x1c4>)
 80007c8:	f001 f934 	bl	8001a34 <HAL_FDCAN_Start>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <main+0xda>
        {
          /* Start Error */
          Error_Handler();
 80007d2:	f000 fb5d 	bl	8000e90 <Error_Handler>
        }

      if ( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80007d6:	2200      	movs	r2, #0
 80007d8:	2101      	movs	r1, #1
 80007da:	4839      	ldr	r0, [pc, #228]	; (80008c0 <main+0x1c4>)
 80007dc:	f001 fa2c 	bl	8001c38 <HAL_FDCAN_ActivateNotification>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <main+0xee>
        {
          /* Notification Error */
          Error_Handler();
 80007e6:	f000 fb53 	bl	8000e90 <Error_Handler>
      uint8_t workBuffer[_MAX_SS];

      FIL USERFile,readFile,writeFile;       /* File  object for USER */
      char USERPath[4];   /* USER logical drive path */
      FRESULT res,res1; /* FatFs function common result code */
      uint8_t path1[] = "STM32.TXT";
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4a35      	ldr	r2, [pc, #212]	; (80008c4 <main+0x1c8>)
 80007ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f0:	c303      	stmia	r3!, {r0, r1}
 80007f2:	801a      	strh	r2, [r3, #0]

      if(MY_SD_GetCardState(0) == BSP_ERROR_NONE){
 80007f4:	2000      	movs	r0, #0
 80007f6:	f006 fa75 	bl	8006ce4 <MY_SD_GetCardState>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d12c      	bne.n	800085a <main+0x15e>

    	  if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin)==GPIO_PIN_SET){
 8000800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000804:	4830      	ldr	r0, [pc, #192]	; (80008c8 <main+0x1cc>)
 8000806:	f001 fe8d 	bl	8002524 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b01      	cmp	r3, #1
 800080e:	d124      	bne.n	800085a <main+0x15e>
    		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2120      	movs	r1, #32
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f001 fe9c 	bl	8002554 <HAL_GPIO_WritePin>
    		  res = f_mkfs(USERPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 800081c:	f207 62a4 	addw	r2, r7, #1700	; 0x6a4
 8000820:	f107 0010 	add.w	r0, r7, #16
 8000824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	4613      	mov	r3, r2
 800082c:	2200      	movs	r2, #0
 800082e:	2107      	movs	r1, #7
 8000830:	f00a f80a 	bl	800a848 <f_mkfs>
 8000834:	4603      	mov	r3, r0
 8000836:	f887 38a5 	strb.w	r3, [r7, #2213]	; 0x8a5
    		  if (res != FR_OK){
 800083a:	f897 38a5 	ldrb.w	r3, [r7, #2213]	; 0x8a5
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <main+0x14a>
    			  Error_Handler();
 8000842:	f000 fb25 	bl	8000e90 <Error_Handler>
    		  }
    		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f001 fe81 	bl	8002554 <HAL_GPIO_WritePin>
    		  HAL_Delay(2000);
 8000852:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000856:	f000 fe61 	bl	800151c <HAL_Delay>
}

      }
      res = f_mount(&USERFatFs, (TCHAR const*)USERPath, 0);
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	481a      	ldr	r0, [pc, #104]	; (80008cc <main+0x1d0>)
 8000864:	f009 f886 	bl	8009974 <f_mount>
 8000868:	4603      	mov	r3, r0
 800086a:	f887 38a5 	strb.w	r3, [r7, #2213]	; 0x8a5
      res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 800086e:	1d39      	adds	r1, r7, #4
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2208      	movs	r2, #8
 8000876:	4618      	mov	r0, r3
 8000878:	f009 f8c2 	bl	8009a00 <f_open>
 800087c:	4603      	mov	r3, r0
 800087e:	f887 38a5 	strb.w	r3, [r7, #2213]	; 0x8a5
      res = f_close(&writeFile);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4618      	mov	r0, r3
 8000888:	f009 fdaa 	bl	800a3e0 <f_close>
 800088c:	4603      	mov	r3, r0
 800088e:	f887 38a5 	strb.w	r3, [r7, #2213]	; 0x8a5
      if(flag == 0){
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <main+0x1d4>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10a      	bne.n	80008b0 <main+0x1b4>
		  flag = 1;
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <main+0x1d4>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
		  MX_NVIC_Init();
 80008a0:	f000 f898 	bl	80009d4 <MX_NVIC_Init>

		  HAL_TIM_Base_Start_IT(&htim17);
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <main+0x1d8>)
 80008a6:	f004 f8b9 	bl	8004a1c <HAL_TIM_Base_Start_IT>
		  HAL_TIM_Base_Start_IT(&htim16);
 80008aa:	480b      	ldr	r0, [pc, #44]	; (80008d8 <main+0x1dc>)
 80008ac:	f004 f8b6 	bl	8004a1c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
 80008b0:	e7fe      	b.n	80008b0 <main+0x1b4>
 80008b2:	bf00      	nop
 80008b4:	200003ec 	.word	0x200003ec
 80008b8:	20000210 	.word	0x20000210
 80008bc:	200003b4 	.word	0x200003b4
 80008c0:	20000260 	.word	0x20000260
 80008c4:	0800b868 	.word	0x0800b868
 80008c8:	48000800 	.word	0x48000800
 80008cc:	20000440 	.word	0x20000440
 80008d0:	2000021c 	.word	0x2000021c
 80008d4:	20000710 	.word	0x20000710
 80008d8:	20000750 	.word	0x20000750

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0a8      	sub	sp, #160	; 0xa0
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008e6:	2238      	movs	r2, #56	; 0x38
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00a fef4 	bl	800b6d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2254      	movs	r2, #84	; 0x54
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f00a fee6 	bl	800b6d8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000910:	f001 fe76 	bl	8002600 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <SystemClock_Config+0xf0>)
 8000916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800091a:	4a2c      	ldr	r2, [pc, #176]	; (80009cc <SystemClock_Config+0xf0>)
 800091c:	f023 0318 	bic.w	r3, r3, #24
 8000920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000924:	2306      	movs	r3, #6
 8000926:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000930:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093c:	2302      	movs	r3, #2
 800093e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000948:	2320      	movs	r3, #32
 800094a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000954:	2306      	movs	r3, #6
 8000956:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095a:	2302      	movs	r3, #2
 800095c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000964:	4618      	mov	r0, r3
 8000966:	f001 feef 	bl	8002748 <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000970:	f000 fa8e 	bl	8000e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	230f      	movs	r3, #15
 8000976:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	2303      	movs	r3, #3
 800097a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000988:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800098c:	2106      	movs	r1, #6
 800098e:	4618      	mov	r0, r3
 8000990:	f002 f9f2 	bl	8002d78 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800099a:	f000 fa79 	bl	8000e90 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <SystemClock_Config+0xf4>)
 80009a0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80009a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fbfb 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80009c0:	f000 fa66 	bl	8000e90 <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	37a0      	adds	r7, #160	; 0xa0
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	00081020 	.word	0x00081020

080009d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2015      	movs	r0, #21
 80009de:	f000 fe9a 	bl	8001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80009e2:	2015      	movs	r0, #21
 80009e4:	f000 feb1 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2028      	movs	r0, #40	; 0x28
 80009ee:	f000 fe92 	bl	8001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f2:	2028      	movs	r0, #40	; 0x28
 80009f4:	f000 fea9 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	201a      	movs	r0, #26
 80009fe:	f000 fe8a 	bl	8001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000a02:	201a      	movs	r0, #26
 8000a04:	f000 fea1 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2019      	movs	r0, #25
 8000a0e:	f000 fe82 	bl	8001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a12:	2019      	movs	r0, #25
 8000a14:	f000 fe99 	bl	800174a <HAL_NVIC_EnableIRQ>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u) != HAL_OK){
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000a28:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4810      	ldr	r0, [pc, #64]	; (8000a70 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8000a2e:	f001 f829 	bl	8001a84 <HAL_FDCAN_GetRxMessage>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_FDCAN_RxFifo0Callback+0x20>
		/* Transmission request Error */
		Error_Handler();
 8000a38:	f000 fa2a 	bl	8000e90 <Error_Handler>
	}
	ID = RxHeader.Identifier;
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000a42:	6013      	str	r3, [r2, #0]
	readSigmaData();
 8000a44:	f000 f840 	bl	8000ac8 <readSigmaData>
    if(flag == 1){
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d101      	bne.n	8000a54 <HAL_FDCAN_RxFifo0Callback+0x38>
    	scrivi();
 8000a50:	f000 f998 	bl	8000d84 <scrivi>
    }

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2120      	movs	r1, #32
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f001 fd7a 	bl	8002554 <HAL_GPIO_WritePin>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200002c4 	.word	0x200002c4
 8000a6c:	20000410 	.word	0x20000410
 8000a70:	20000260 	.word	0x20000260
 8000a74:	20000220 	.word	0x20000220
 8000a78:	2000021c 	.word	0x2000021c

08000a7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17) //check if the interrupt comes from TIM2
        {


        }
    if (htim->Instance==TIM16) //check if the interrupt comes from TIM2
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d114      	bne.n	8000ab8 <HAL_TIM_PeriodElapsedCallback+0x3c>
            {
        	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a8e:	2120      	movs	r1, #32
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f001 fd76 	bl	8002584 <HAL_GPIO_TogglePin>
        	leggi();
 8000a98:	f000 f92e 	bl	8000cf8 <leggi>
        	scrivi();
 8000a9c:	f000 f972 	bl	8000d84 <scrivi>
        	if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin)==GPIO_PIN_SET)
 8000aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000aa6:	f001 fd3d 	bl	8002524 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d103      	bne.n	8000ab8 <HAL_TIM_PeriodElapsedCallback+0x3c>
        	{
        		HAL_Delay(10000);
 8000ab0:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ab4:	f000 fd32 	bl	800151c <HAL_Delay>
        	}
            }
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40014400 	.word	0x40014400
 8000ac4:	48000800 	.word	0x48000800

08000ac8 <readSigmaData>:

void readSigmaData(void){
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
	switch(ID){
 8000acc:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <readSigmaData+0xe0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ad4:	d01d      	beq.n	8000b12 <readSigmaData+0x4a>
 8000ad6:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000ada:	d047      	beq.n	8000b6c <readSigmaData+0xa4>
 8000adc:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000ae0:	d000      	beq.n	8000ae4 <readSigmaData+0x1c>
			cs.MotorTemperature		= rxData.Data8u[1];
			cs.BDI					= rxData.Data8u[2];
			cs.FaultSubCode			= rxData.Data8u[3]<<8 | rxData.Data8u[4];
	break;
	}
}
 8000ae2:	e05c      	b.n	8000b9e <readSigmaData+0xd6>
			ms.MotorSpeed			= rxData.Data16u[0];
 8000ae4:	4b31      	ldr	r3, [pc, #196]	; (8000bac <readSigmaData+0xe4>)
 8000ae6:	881a      	ldrh	r2, [r3, #0]
 8000ae8:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <readSigmaData+0xe8>)
 8000aea:	801a      	strh	r2, [r3, #0]
			ms.MotorCurrent			= rxData.Data16[1];
 8000aec:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <readSigmaData+0xe4>)
 8000aee:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <readSigmaData+0xe8>)
 8000af4:	805a      	strh	r2, [r3, #2]
			ms.MotorVoltage			= rxData.Data8u[4];
 8000af6:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <readSigmaData+0xe4>)
 8000af8:	791a      	ldrb	r2, [r3, #4]
 8000afa:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <readSigmaData+0xe8>)
 8000afc:	711a      	strb	r2, [r3, #4]
			ms.BatteryVoltage		= rxData.Data8u[5];
 8000afe:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <readSigmaData+0xe4>)
 8000b00:	795a      	ldrb	r2, [r3, #5]
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <readSigmaData+0xe8>)
 8000b04:	715a      	strb	r2, [r3, #5]
			ms.BatteryCurrent		= rxData.Data16[4];
 8000b06:	4b29      	ldr	r3, [pc, #164]	; (8000bac <readSigmaData+0xe4>)
 8000b08:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <readSigmaData+0xe8>)
 8000b0e:	80da      	strh	r2, [r3, #6]
	break;
 8000b10:	e045      	b.n	8000b9e <readSigmaData+0xd6>
			ds.ActualTorque			= rxData.Data16[0];
 8000b12:	4b26      	ldr	r3, [pc, #152]	; (8000bac <readSigmaData+0xe4>)
 8000b14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <readSigmaData+0xec>)
 8000b1a:	801a      	strh	r2, [r3, #0]
			ds.ActualSpeed			= rxData.Data16[1];
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <readSigmaData+0xe4>)
 8000b1e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <readSigmaData+0xec>)
 8000b24:	805a      	strh	r2, [r3, #2]
			ds.DriveStatusIndicator	= rxData.Data8u[4] & 0x0F;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <readSigmaData+0xe4>)
 8000b28:	791b      	ldrb	r3, [r3, #4]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <readSigmaData+0xec>)
 8000b32:	711a      	strb	r2, [r3, #4]
			ds.SpeedLimitIndicator	= rxData.Data8u[4] >> 4;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <readSigmaData+0xe4>)
 8000b36:	791b      	ldrb	r3, [r3, #4]
 8000b38:	091b      	lsrs	r3, r3, #4
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <readSigmaData+0xec>)
 8000b3e:	715a      	strb	r2, [r3, #5]
			ds.TorqueLimitIndicator	= rxData.Data8u[5] & 0x0F;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <readSigmaData+0xe4>)
 8000b42:	795b      	ldrb	r3, [r3, #5]
 8000b44:	f003 030f 	and.w	r3, r3, #15
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <readSigmaData+0xec>)
 8000b4c:	719a      	strb	r2, [r3, #6]
			ds.MotorLimitIndicator	= rxData.Data8u[5] >> 4;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <readSigmaData+0xe4>)
 8000b50:	795b      	ldrb	r3, [r3, #5]
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <readSigmaData+0xec>)
 8000b58:	71da      	strb	r2, [r3, #7]
			ds.FaultCode			= rxData.Data8u[6];
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <readSigmaData+0xe4>)
 8000b5c:	799a      	ldrb	r2, [r3, #6]
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <readSigmaData+0xec>)
 8000b60:	721a      	strb	r2, [r3, #8]
			ds.Code					= rxData.Data8u[7];
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <readSigmaData+0xe4>)
 8000b64:	79da      	ldrb	r2, [r3, #7]
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <readSigmaData+0xec>)
 8000b68:	725a      	strb	r2, [r3, #9]
	break;
 8000b6a:	e018      	b.n	8000b9e <readSigmaData+0xd6>
			cs.ControllerTemperature= rxData.Data8u[0];
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <readSigmaData+0xe4>)
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <readSigmaData+0xf0>)
 8000b72:	701a      	strb	r2, [r3, #0]
			cs.MotorTemperature		= rxData.Data8u[1];
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <readSigmaData+0xe4>)
 8000b76:	785a      	ldrb	r2, [r3, #1]
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <readSigmaData+0xf0>)
 8000b7a:	705a      	strb	r2, [r3, #1]
			cs.BDI					= rxData.Data8u[2];
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <readSigmaData+0xe4>)
 8000b7e:	789a      	ldrb	r2, [r3, #2]
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <readSigmaData+0xf0>)
 8000b82:	709a      	strb	r2, [r3, #2]
			cs.FaultSubCode			= rxData.Data8u[3]<<8 | rxData.Data8u[4];
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <readSigmaData+0xe4>)
 8000b86:	78db      	ldrb	r3, [r3, #3]
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <readSigmaData+0xe4>)
 8000b8e:	791b      	ldrb	r3, [r3, #4]
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <readSigmaData+0xf0>)
 8000b9a:	809a      	strh	r2, [r3, #4]
	break;
 8000b9c:	bf00      	nop
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	20000220 	.word	0x20000220
 8000bac:	200002c4 	.word	0x200002c4
 8000bb0:	20000338 	.word	0x20000338
 8000bb4:	200002d4 	.word	0x200002d4
 8000bb8:	200002cc 	.word	0x200002cc

08000bbc <chartotime>:
  //printf("** Success. ** \n\r");
  while(1)
  {
  }
}
uint32_t chartotime(char* buff,uint8_t off, uint8_t leng ){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	70fb      	strb	r3, [r7, #3]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	70bb      	strb	r3, [r7, #2]
	char str[8];
	for(int i=off;i<leng+off;i++){
 8000bcc:	78fb      	ldrb	r3, [r7, #3]
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00c      	b.n	8000bec <chartotime+0x30>
    str[i]=buff[i];
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	7819      	ldrb	r1, [r3, #0]
 8000bda:	f107 020c 	add.w	r2, r7, #12
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	4413      	add	r3, r2
 8000be2:	460a      	mov	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
	for(int i=off;i<leng+off;i++){
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	78ba      	ldrb	r2, [r7, #2]
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbec      	blt.n	8000bd2 <chartotime+0x16>
	}
	return (uint32_t)atoi(str);
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f00a fd42 	bl	800b686 <atoi>
 8000c02:	4603      	mov	r3, r0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <chartocurr>:
int32_t chartocurr(char* buff,uint8_t off, uint8_t leng ){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	70bb      	strb	r3, [r7, #2]
	char str[8];
	for(int i=0;i<leng;i++){
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	e00f      	b.n	8000c42 <chartocurr+0x36>
    str[i]=buff[i+off];
 8000c22:	78fa      	ldrb	r2, [r7, #3]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	4413      	add	r3, r2
 8000c28:	461a      	mov	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	7819      	ldrb	r1, [r3, #0]
 8000c30:	f107 020c 	add.w	r2, r7, #12
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	4413      	add	r3, r2
 8000c38:	460a      	mov	r2, r1
 8000c3a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<leng;i++){
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	78bb      	ldrb	r3, [r7, #2]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	dbeb      	blt.n	8000c22 <chartocurr+0x16>
	}
	return (int32_t)atoi(str);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f00a fd19 	bl	800b686 <atoi>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <PuntaeSepara>:
uint32_t PuntaeSepara(char* buff){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	uint8_t h;
	uint8_t e;
	for(h=0;h<64;h++){
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e011      	b.n	8000c92 <PuntaeSepara+0x32>
		if(readBuff[h]==','){
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <PuntaeSepara+0x8c>)
 8000c72:	5cd3      	ldrb	r3, [r2, r3]
 8000c74:	2b2c      	cmp	r3, #44	; 0x2c
 8000c76:	d109      	bne.n	8000c8c <PuntaeSepara+0x2c>
			time=chartotime(readBuff,0,h);
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	481b      	ldr	r0, [pc, #108]	; (8000cec <PuntaeSepara+0x8c>)
 8000c80:	f7ff ff9c 	bl	8000bbc <chartotime>
 8000c84:	4602      	mov	r2, r0
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <PuntaeSepara+0x90>)
 8000c88:	601a      	str	r2, [r3, #0]
			break;
 8000c8a:	e005      	b.n	8000c98 <PuntaeSepara+0x38>
	for(h=0;h<64;h++){
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	2b3f      	cmp	r3, #63	; 0x3f
 8000c96:	d9ea      	bls.n	8000c6e <PuntaeSepara+0xe>
		}
	}
	for(e=h;e<64;e++){
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	73bb      	strb	r3, [r7, #14]
 8000c9c:	e01c      	b.n	8000cd8 <PuntaeSepara+0x78>
		if(readBuff[e]==0xd&&readBuff[e+1]==0xa){
 8000c9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ca0:	4a12      	ldr	r2, [pc, #72]	; (8000cec <PuntaeSepara+0x8c>)
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	2b0d      	cmp	r3, #13
 8000ca6:	d114      	bne.n	8000cd2 <PuntaeSepara+0x72>
 8000ca8:	7bbb      	ldrb	r3, [r7, #14]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <PuntaeSepara+0x8c>)
 8000cae:	5cd3      	ldrb	r3, [r2, r3]
 8000cb0:	2b0a      	cmp	r3, #10
 8000cb2:	d10e      	bne.n	8000cd2 <PuntaeSepara+0x72>
			curr=chartocurr(readBuff,h+1,e-h);
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b2d9      	uxtb	r1, r3
 8000cba:	7bba      	ldrb	r2, [r7, #14]
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <PuntaeSepara+0x8c>)
 8000cc6:	f7ff ffa1 	bl	8000c0c <chartocurr>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <PuntaeSepara+0x94>)
 8000cce:	601a      	str	r2, [r3, #0]
			break;
 8000cd0:	e005      	b.n	8000cde <PuntaeSepara+0x7e>
	for(e=h;e<64;e++){
 8000cd2:	7bbb      	ldrb	r3, [r7, #14]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	73bb      	strb	r3, [r7, #14]
 8000cd8:	7bbb      	ldrb	r3, [r7, #14]
 8000cda:	2b3f      	cmp	r3, #63	; 0x3f
 8000cdc:	d9df      	bls.n	8000c9e <PuntaeSepara+0x3e>
		}
	}
	return (uint32_t)(e+2);//aggiungo i due caratteri di terminazione
 8000cde:	7bbb      	ldrb	r3, [r7, #14]
 8000ce0:	3302      	adds	r3, #2
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200002e0 	.word	0x200002e0
 8000cf0:	200003bc 	.word	0x200003bc
 8000cf4:	20000340 	.word	0x20000340

08000cf8 <leggi>:
FRESULT leggi(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8000cfe:	af00      	add	r7, sp, #0
	FIL readFile;       /* File  object for USER */
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */
	char USERPath[4];   /* USER logical drive path */
	uint8_t bytesWrote;
	uint8_t path1[] = "current.txt";
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <leggi+0x7c>)
 8000d04:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	res = f_open(&readFile, &path1, FA_READ);
 8000d0a:	1d39      	adds	r1, r7, #4
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2201      	movs	r2, #1
 8000d12:	4618      	mov	r0, r3
 8000d14:	f008 fe74 	bl	8009a00 <f_open>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	f_lseek(&readFile, indice);
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <leggi+0x80>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f009 fb83 	bl	800a434 <f_lseek>
	res = f_read(&readFile,readBuff, 34, &br);
 8000d2e:	f107 0014 	add.w	r0, r7, #20
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <leggi+0x84>)
 8000d34:	2222      	movs	r2, #34	; 0x22
 8000d36:	4912      	ldr	r1, [pc, #72]	; (8000d80 <leggi+0x88>)
 8000d38:	f009 f820 	bl	8009d7c <f_read>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	indice =indice+ PuntaeSepara(readBuff);
 8000d42:	480f      	ldr	r0, [pc, #60]	; (8000d80 <leggi+0x88>)
 8000d44:	f7ff ff8c 	bl	8000c60 <PuntaeSepara>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <leggi+0x80>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <leggi+0x80>)
 8000d52:	6013      	str	r3, [r2, #0]
	res = f_close(&readFile);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f009 fb41 	bl	800a3e0 <f_close>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	return res;
 8000d64:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247

}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	0800b874 	.word	0x0800b874
 8000d78:	20000214 	.word	0x20000214
 8000d7c:	20000334 	.word	0x20000334
 8000d80:	200002e0 	.word	0x200002e0

08000d84 <scrivi>:
FRESULT scrivi(){
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000d8a:	af04      	add	r7, sp, #16
	FIL writeFile;       /* File  object for USER */
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */
	char USERPath[4];   /* USER logical drive path */
	uint8_t bytesWrote;
	uint8_t path1[] = "STM32.TXT";
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	4a37      	ldr	r2, [pc, #220]	; (8000e6c <scrivi+0xe8>)
 8000d90:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d92:	c303      	stmia	r3!, {r0, r1}
 8000d94:	801a      	strh	r2, [r3, #0]
	//res1 = f_mount(&USERFatFs, (TCHAR const*)USERPath, 0);
	res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 8000d96:	1d39      	adds	r1, r7, #4
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2208      	movs	r2, #8
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f008 fe2e 	bl	8009a00 <f_open>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	res = f_close(&writeFile);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4618      	mov	r0, r3
 8000db0:	f009 fb16 	bl	800a3e0 <f_close>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 8000dba:	1d39      	adds	r1, r7, #4
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2212      	movs	r2, #18
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f008 fe1c 	bl	8009a00 <f_open>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	if(res==FR_OK) {
 8000dce:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d13b      	bne.n	8000e4e <scrivi+0xca>
		f_lseek(&writeFile, indox);
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <scrivi+0xec>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f009 fb27 	bl	800a434 <f_lseek>

		//res1 = f_write(&writeFile, readBuf, size, &bytesWrote);}
		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 8000de6:	2200      	movs	r2, #0
 8000de8:	4922      	ldr	r1, [pc, #136]	; (8000e74 <scrivi+0xf0>)
 8000dea:	4823      	ldr	r0, [pc, #140]	; (8000e78 <scrivi+0xf4>)
 8000dec:	f002 fd30 	bl	8003850 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 8000df0:	2200      	movs	r2, #0
 8000df2:	4922      	ldr	r1, [pc, #136]	; (8000e7c <scrivi+0xf8>)
 8000df4:	4820      	ldr	r0, [pc, #128]	; (8000e78 <scrivi+0xf4>)
 8000df6:	f002 fe0d 	bl	8003a14 <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <scrivi+0xf0>)
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <scrivi+0xfc>)
 8000e00:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <scrivi+0xf0>)
 8000e04:	785a      	ldrb	r2, [r3, #1]
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <scrivi+0xfc>)
 8000e08:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <scrivi+0xf0>)
 8000e0c:	789a      	ldrb	r2, [r3, #2]
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <scrivi+0xfc>)
 8000e10:	709a      	strb	r2, [r3, #2]

		indox=indox+f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,cs.MotorTemperature);}
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <scrivi+0xfc>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461c      	mov	r4, r3
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <scrivi+0xfc>)
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	461d      	mov	r5, r3
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <scrivi+0xfc>)
 8000e20:	789b      	ldrb	r3, [r3, #2]
 8000e22:	4619      	mov	r1, r3
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <scrivi+0x100>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <scrivi+0x104>)
 8000e2a:	7852      	ldrb	r2, [r2, #1]
 8000e2c:	f107 0014 	add.w	r0, r7, #20
 8000e30:	9202      	str	r2, [sp, #8]
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	9100      	str	r1, [sp, #0]
 8000e36:	462b      	mov	r3, r5
 8000e38:	4622      	mov	r2, r4
 8000e3a:	4914      	ldr	r1, [pc, #80]	; (8000e8c <scrivi+0x108>)
 8000e3c:	f00a f9a8 	bl	800b190 <f_printf>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <scrivi+0xec>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <scrivi+0xec>)
 8000e4c:	6013      	str	r3, [r2, #0]
		res = f_close(&writeFile);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4618      	mov	r0, r3
 8000e54:	f009 fac4 	bl	800a3e0 <f_close>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247

	return res;
 8000e5e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e6c:	0800b868 	.word	0x0800b868
 8000e70:	20000218 	.word	0x20000218
 8000e74:	20000670 	.word	0x20000670
 8000e78:	20000684 	.word	0x20000684
 8000e7c:	2000034c 	.word	0x2000034c
 8000e80:	200003e8 	.word	0x200003e8
 8000e84:	20000340 	.word	0x20000340
 8000e88:	200002cc 	.word	0x200002cc
 8000e8c:	0800b880 	.word	0x0800b880

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//printf("** Error. ** \n\r");
	while(1)
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x4>
	...

08000e98 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000eac:	2300      	movs	r3, #0
 8000eae:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000eb2:	4a29      	ldr	r2, [pc, #164]	; (8000f58 <MX_RTC_Init+0xc0>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eb6:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ebc:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000ebe:	227f      	movs	r2, #127	; 0x7f
 8000ec0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ec2:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000ec4:	22ff      	movs	r2, #255	; 0xff
 8000ec6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000edc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ee8:	481a      	ldr	r0, [pc, #104]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000eea:	f002 fbad 	bl	8003648 <HAL_RTC_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000ef4:	f7ff ffcc 	bl	8000e90 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	480f      	ldr	r0, [pc, #60]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000f18:	f002 fc04 	bl	8003724 <HAL_RTC_SetTime>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8000f22:	f7ff ffb5 	bl	8000e90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f26:	2301      	movs	r3, #1
 8000f28:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_RTC_Init+0xbc>)
 8000f3e:	f002 fce3 	bl	8003908 <HAL_RTC_SetDate>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000f48:	f7ff ffa2 	bl	8000e90 <Error_Handler>
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000684 	.word	0x20000684
 8000f58:	40002800 	.word	0x40002800

08000f5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_RTC_MspInit+0x30>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d107      	bne.n	8000f7e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_RTC_MspInit+0x34>)
 8000f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_RTC_MspInit+0x34>)
 8000f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40002800 	.word	0x40002800
 8000f90:	40021000 	.word	0x40021000

08000f94 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_SPI2_Init+0x74>)
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <MX_SPI2_Init+0x78>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fb2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fca:	2210      	movs	r2, #16
 8000fcc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_SPI2_Init+0x74>)
 8000ff4:	f002 fe30 	bl	8003c58 <HAL_SPI_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ffe:	f7ff ff47 	bl	8000e90 <Error_Handler>
  }

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200006ac 	.word	0x200006ac
 800100c:	40003800 	.word	0x40003800

08001010 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a17      	ldr	r2, [pc, #92]	; (800108c <HAL_SPI_MspInit+0x7c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d128      	bne.n	8001084 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_SPI_MspInit+0x80>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <HAL_SPI_MspInit+0x80>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_SPI_MspInit+0x80>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_SPI_MspInit+0x80>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_SPI_MspInit+0x80>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_SPI_MspInit+0x80>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001062:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001074:	2305      	movs	r3, #5
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <HAL_SPI_MspInit+0x84>)
 8001080:	f001 f8ce 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40003800 	.word	0x40003800
 8001090:	40021000 	.word	0x40021000
 8001094:	48000400 	.word	0x48000400

08001098 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 80010a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010a6:	6093      	str	r3, [r2, #8]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40007000 	.word	0x40007000

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_MspInit+0x44>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_MspInit+0x44>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_MspInit+0x44>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x44>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x44>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6593      	str	r3, [r2, #88]	; 0x58
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x44>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80010ee:	f7ff ffd3 	bl	8001098 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f9c4 	bl	80014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <FDCAN1_IT0_IRQHandler+0x10>)
 8001162:	f000 fe4f 	bl	8001e04 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000260 	.word	0x20000260

08001170 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001176:	f003 fc7b 	bl	8004a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000750 	.word	0x20000750

08001184 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800118a:	f003 fc71 	bl	8004a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000710 	.word	0x20000710

08001198 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800119c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011a0:	f001 fa0a 	bl	80025b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <SystemInit+0x28>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <SystemInit+0x28>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <SystemInit+0x28>)
 80011be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c2:	609a      	str	r2, [r3, #8]
#endif
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_TIM16_Init+0x44>)
 80011da:	4a10      	ldr	r2, [pc, #64]	; (800121c <MX_TIM16_Init+0x48>)
 80011dc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 127;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_TIM16_Init+0x44>)
 80011e0:	227f      	movs	r2, #127	; 0x7f
 80011e2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_TIM16_Init+0x44>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_TIM16_Init+0x44>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_TIM16_Init+0x44>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_TIM16_Init+0x44>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_TIM16_Init+0x44>)
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_TIM16_Init+0x44>)
 8001204:	f003 fbde 	bl	80049c4 <HAL_TIM_Base_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800120e:	f7ff fe3f 	bl	8000e90 <Error_Handler>
  }

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000750 	.word	0x20000750
 800121c:	40014400 	.word	0x40014400

08001220 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_TIM17_Init+0x48>)
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <MX_TIM17_Init+0x4c>)
 8001228:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_TIM17_Init+0x48>)
 800122c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001230:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <MX_TIM17_Init+0x48>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2000;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_TIM17_Init+0x48>)
 800123a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800123e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_TIM17_Init+0x48>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_TIM17_Init+0x48>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_TIM17_Init+0x48>)
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_TIM17_Init+0x48>)
 8001254:	f003 fbb6 	bl	80049c4 <HAL_TIM_Base_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800125e:	f7ff fe17 	bl	8000e90 <Error_Handler>
  }

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000710 	.word	0x20000710
 800126c:	40014800 	.word	0x40014800

08001270 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <HAL_TIM_Base_MspInit+0x5c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10c      	bne.n	800129c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_TIM_Base_MspInit+0x60>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <HAL_TIM_Base_MspInit+0x60>)
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	6613      	str	r3, [r2, #96]	; 0x60
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_TIM_Base_MspInit+0x60>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800129a:	e010      	b.n	80012be <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_TIM_Base_MspInit+0x64>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d10b      	bne.n	80012be <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_TIM_Base_MspInit+0x60>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012aa:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <HAL_TIM_Base_MspInit+0x60>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b0:	6613      	str	r3, [r2, #96]	; 0x60
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <HAL_TIM_Base_MspInit+0x60>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40014400 	.word	0x40014400
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40014800 	.word	0x40014800

080012d8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 80012de:	4a20      	ldr	r2, [pc, #128]	; (8001360 <MX_LPUART1_UART_Init+0x88>)
 80012e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 8001310:	2200      	movs	r2, #0
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001314:	4811      	ldr	r0, [pc, #68]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 8001316:	f003 fe41 	bl	8004f9c <HAL_UART_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001320:	f7ff fdb6 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001324:	2100      	movs	r1, #0
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 8001328:	f005 f9e5 	bl	80066f6 <HAL_UARTEx_SetTxFifoThreshold>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 8001332:	f7ff fdad 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001336:	2100      	movs	r1, #0
 8001338:	4808      	ldr	r0, [pc, #32]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 800133a:	f005 fa1a 	bl	8006772 <HAL_UARTEx_SetRxFifoThreshold>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8001344:	f7ff fda4 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_LPUART1_UART_Init+0x84>)
 800134a:	f005 f99b 	bl	8006684 <HAL_UARTEx_DisableFifoMode>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8001354:	f7ff fd9c 	bl	8000e90 <Error_Handler>
  }

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000790 	.word	0x20000790
 8001360:	40008000 	.word	0x40008000

08001364 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_UART_MspInit+0x7c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d128      	bne.n	80013d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_UART_MspInit+0x80>)
 8001388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138a:	4a16      	ldr	r2, [pc, #88]	; (80013e4 <HAL_UART_MspInit+0x80>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HAL_UART_MspInit+0x80>)
 8001394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_UART_MspInit+0x80>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <HAL_UART_MspInit+0x80>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_UART_MspInit+0x80>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80013b6:	230c      	movs	r3, #12
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80013c6:	230c      	movs	r3, #12
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f000 ff24 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40008000 	.word	0x40008000
 80013e4:	40021000 	.word	0x40021000

080013e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ee:	490e      	ldr	r1, [pc, #56]	; (8001428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <LoopForever+0xe>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001404:	4c0b      	ldr	r4, [pc, #44]	; (8001434 <LoopForever+0x16>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001412:	f7ff fec9 	bl	80011a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001416:	f00a f93b 	bl	800b690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800141a:	f7ff f96f 	bl	80006fc <main>

0800141e <LoopForever>:

LoopForever:
    b LoopForever
 800141e:	e7fe      	b.n	800141e <LoopForever>
  ldr   r0, =_estack
 8001420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800142c:	0800bac8 	.word	0x0800bac8
  ldr r2, =_sbss
 8001430:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001434:	20000cb8 	.word	0x20000cb8

08001438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC1_2_IRQHandler>

0800143a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 f95b 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800144a:	2000      	movs	r0, #0
 800144c:	f000 f80e 	bl	800146c <HAL_InitTick>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	e001      	b.n	8001460 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800145c:	f7ff fe2c 	bl	80010b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001460:	79fb      	ldrb	r3, [r7, #7]

}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_InitTick+0x68>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d022      	beq.n	80014c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_InitTick+0x6c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <HAL_InitTick+0x68>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800148c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001490:	fbb2 f3f3 	udiv	r3, r2, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f000 f966 	bl	8001766 <HAL_SYSTICK_Config>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10f      	bne.n	80014c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b0f      	cmp	r3, #15
 80014a4:	d809      	bhi.n	80014ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a6:	2200      	movs	r2, #0
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	f04f 30ff 	mov.w	r0, #4294967295
 80014ae:	f000 f932 	bl	8001716 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <HAL_InitTick+0x70>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	e007      	b.n	80014ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	e004      	b.n	80014ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	e001      	b.n	80014ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_IncTick+0x1c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_IncTick+0x20>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a03      	ldr	r2, [pc, #12]	; (80014fc <HAL_IncTick+0x1c>)
 80014f0:	6013      	str	r3, [r2, #0]
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	2000081c 	.word	0x2000081c
 8001500:	20000008 	.word	0x20000008

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	2000081c 	.word	0x2000081c

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff ffee 	bl	8001504 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d004      	beq.n	8001540 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_Delay+0x40>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	4413      	add	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001540:	bf00      	nop
 8001542:	f7ff ffdf 	bl	8001504 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	429a      	cmp	r2, r3
 8001550:	d8f7      	bhi.n	8001542 <HAL_Delay+0x26>
  {
  }
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <__NVIC_EnableIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016cc:	d301      	bcc.n	80016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <SysTick_Config+0x40>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016da:	210f      	movs	r1, #15
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f7ff ff8e 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SysTick_Config+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SysTick_Config+0x40>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff29 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff40 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff90 	bl	8001654 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5f 	bl	8001600 <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff33 	bl	80015c4 <__NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ffa4 	bl	80016bc <SysTick_Config>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e147      	b.n	8001a22 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7fe fefc 	bl	80005a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699a      	ldr	r2, [r3, #24]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0210 	bic.w	r2, r2, #16
 80017ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017bc:	f7ff fea2 	bl	8001504 <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017c2:	e012      	b.n	80017ea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017c4:	f7ff fe9e 	bl	8001504 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b0a      	cmp	r3, #10
 80017d0:	d90b      	bls.n	80017ea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	f043 0201 	orr.w	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e11b      	b.n	8001a22 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d0e5      	beq.n	80017c4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001808:	f7ff fe7c 	bl	8001504 <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800180e:	e012      	b.n	8001836 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001810:	f7ff fe78 	bl	8001504 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b0a      	cmp	r3, #10
 800181c:	d90b      	bls.n	8001836 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001822:	f043 0201 	orr.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0f5      	b.n	8001a22 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0e5      	beq.n	8001810 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0202 	orr.w	r2, r2, #2
 8001852:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a74      	ldr	r2, [pc, #464]	; (8001a2c <HAL_FDCAN_Init+0x2ac>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d103      	bne.n	8001866 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800185e:	4a74      	ldr	r2, [pc, #464]	; (8001a30 <HAL_FDCAN_Init+0x2b0>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7c1b      	ldrb	r3, [r3, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d108      	bne.n	8001880 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699a      	ldr	r2, [r3, #24]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800187c:	619a      	str	r2, [r3, #24]
 800187e:	e007      	b.n	8001890 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800188e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7c5b      	ldrb	r3, [r3, #17]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699a      	ldr	r2, [r3, #24]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018a6:	619a      	str	r2, [r3, #24]
 80018a8:	e007      	b.n	80018ba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699a      	ldr	r2, [r3, #24]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7c9b      	ldrb	r3, [r3, #18]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699a      	ldr	r2, [r3, #24]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018d0:	619a      	str	r2, [r3, #24]
 80018d2:	e007      	b.n	80018e4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80018e2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699a      	ldr	r2, [r3, #24]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001908:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0210 	bic.w	r2, r2, #16
 8001918:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d108      	bne.n	8001934 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699a      	ldr	r2, [r3, #24]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0204 	orr.w	r2, r2, #4
 8001930:	619a      	str	r2, [r3, #24]
 8001932:	e02c      	b.n	800198e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d028      	beq.n	800198e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d01c      	beq.n	800197e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001952:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0210 	orr.w	r2, r2, #16
 8001962:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d110      	bne.n	800198e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0220 	orr.w	r2, r2, #32
 800197a:	619a      	str	r2, [r3, #24]
 800197c:	e007      	b.n	800198e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699a      	ldr	r2, [r3, #24]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0220 	orr.w	r2, r2, #32
 800198c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	3b01      	subs	r3, #1
 8001994:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	3b01      	subs	r3, #1
 800199c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800199e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019a6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019b6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019b8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019c2:	d115      	bne.n	80019f0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	3b01      	subs	r3, #1
 80019d0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019d2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	3b01      	subs	r3, #1
 80019da:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019dc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	3b01      	subs	r3, #1
 80019e6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019ec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019ee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 fb9e 	bl	8002148 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40006400 	.word	0x40006400
 8001a30:	40006500 	.word	0x40006500

08001a34 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d110      	bne.n	8001a6a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e006      	b.n	8001a78 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6e:	f043 0204 	orr.w	r2, r3, #4
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b08b      	sub	sp, #44	; 0x2c
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a98:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001a9a:	7efb      	ldrb	r3, [r7, #27]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	f040 80bc 	bne.w	8001c1a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b40      	cmp	r3, #64	; 0x40
 8001aa6:	d121      	bne.n	8001aec <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d107      	bne.n	8001ac8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001abc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0af      	b.n	8001c28 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aea:	e020      	b.n	8001b2e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d107      	bne.n	8001b0c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e08d      	b.n	8001c28 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	0c9b      	lsrs	r3, r3, #18
 8001b48:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e005      	b.n	8001b5e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	3304      	adds	r3, #4
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	0e1b      	lsrs	r3, r3, #24
 8001bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0fda      	lsrs	r2, r3, #31
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
 8001bd0:	e00a      	b.n	8001be8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	441a      	add	r2, r3
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	440b      	add	r3, r1
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	3301      	adds	r3, #1
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001bf0:	5cd3      	ldrb	r3, [r2, r3]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d3eb      	bcc.n	8001bd2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b40      	cmp	r3, #64	; 0x40
 8001bfe:	d105      	bne.n	8001c0c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001c0a:	e004      	b.n	8001c16 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e006      	b.n	8001c28 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1e:	f043 0208 	orr.w	r2, r3, #8
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
  }
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	372c      	adds	r7, #44	; 0x2c
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	0800b8fc 	.word	0x0800b8fc

08001c38 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c4a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d003      	beq.n	8001c5a <HAL_FDCAN_ActivateNotification+0x22>
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	f040 80c8 	bne.w	8001dea <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d004      	beq.n	8001c76 <HAL_FDCAN_ActivateNotification+0x3e>
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03b      	beq.n	8001cee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d031      	beq.n	8001cee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d027      	beq.n	8001cee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01d      	beq.n	8001cee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d004      	beq.n	8001cc6 <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d013      	beq.n	8001cee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00c      	beq.n	8001cfe <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d107      	bne.n	8001cfe <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <HAL_FDCAN_ActivateNotification+0xda>
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d13b      	bne.n	8001d8a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d131      	bne.n	8001d8a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d127      	bne.n	8001d8a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d11d      	bne.n	8001d8a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d113      	bne.n	8001d8a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00c      	beq.n	8001d9a <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0202 	orr.w	r2, r2, #2
 8001d98:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d009      	beq.n	8001db8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e006      	b.n	8001df8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	f043 0202 	orr.w	r2, r3, #2
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
  }
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e12:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e20:	4013      	ands	r3, r2
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	6a3a      	ldr	r2, [r7, #32]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e46:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001e5e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e76:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4013      	ands	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00d      	beq.n	8001eae <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2240      	movs	r2, #64	; 0x40
 8001ea6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f92e 	bl	800210a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d014      	beq.n	8001ef4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ed2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001eec:	6939      	ldr	r1, [r7, #16]
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8ec 	bl	80020cc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8b6 	bl	8002076 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f18:	6a39      	ldr	r1, [r7, #32]
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fd7e 	bl	8000a1c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f2e:	69f9      	ldr	r1, [r7, #28]
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8ab 	bl	800208c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00e      	beq.n	8001f62 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f8a0 	bl	80020a2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01a      	beq.n	8001fa6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d013      	beq.n	8001fa6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f86:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f888 	bl	80020b6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00e      	beq.n	8001fd2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f888 	bl	80020e2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00e      	beq.n	8001ffe <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ff6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f87c 	bl	80020f6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d011      	beq.n	8002030 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002022:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002028:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800203e:	6979      	ldr	r1, [r7, #20]
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f876 	bl	8002132 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f858 	bl	800211e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800206e:	bf00      	nop
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002152:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2f      	ldr	r2, [pc, #188]	; (8002218 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d103      	bne.n	8002166 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002164:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a2c      	ldr	r2, [pc, #176]	; (800221c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d103      	bne.n	8002178 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8002176:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002186:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218e:	041a      	lsls	r2, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ac:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	061a      	lsls	r2, r3, #24
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e005      	b.n	80021fa <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3304      	adds	r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	429a      	cmp	r2, r3
 8002204:	d3f3      	bcc.n	80021ee <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	4000a400 	.word	0x4000a400
 8002218:	40006800 	.word	0x40006800
 800221c:	40006c00 	.word	0x40006c00

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800222e:	e15a      	b.n	80024e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2101      	movs	r1, #1
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 814c 	beq.w	80024e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x38>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	6939      	ldr	r1, [r7, #16]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d00b      	beq.n	80022f4 <HAL_GPIO_Init+0xd4>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d007      	beq.n	80022f4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e8:	2b11      	cmp	r3, #17
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b12      	cmp	r3, #18
 80022f2:	d130      	bne.n	8002356 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800232a:	2201      	movs	r2, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 0201 	and.w	r2, r3, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80a6 	beq.w	80024e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002394:	4b5b      	ldr	r3, [pc, #364]	; (8002504 <HAL_GPIO_Init+0x2e4>)
 8002396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002398:	4a5a      	ldr	r2, [pc, #360]	; (8002504 <HAL_GPIO_Init+0x2e4>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6613      	str	r3, [r2, #96]	; 0x60
 80023a0:	4b58      	ldr	r3, [pc, #352]	; (8002504 <HAL_GPIO_Init+0x2e4>)
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ac:	4a56      	ldr	r2, [pc, #344]	; (8002508 <HAL_GPIO_Init+0x2e8>)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023d6:	d01f      	beq.n	8002418 <HAL_GPIO_Init+0x1f8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a4c      	ldr	r2, [pc, #304]	; (800250c <HAL_GPIO_Init+0x2ec>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d019      	beq.n	8002414 <HAL_GPIO_Init+0x1f4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4b      	ldr	r2, [pc, #300]	; (8002510 <HAL_GPIO_Init+0x2f0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_GPIO_Init+0x1f0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a4a      	ldr	r2, [pc, #296]	; (8002514 <HAL_GPIO_Init+0x2f4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00d      	beq.n	800240c <HAL_GPIO_Init+0x1ec>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a49      	ldr	r2, [pc, #292]	; (8002518 <HAL_GPIO_Init+0x2f8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <HAL_GPIO_Init+0x1e8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a48      	ldr	r2, [pc, #288]	; (800251c <HAL_GPIO_Init+0x2fc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_GPIO_Init+0x1e4>
 8002400:	2305      	movs	r3, #5
 8002402:	e00a      	b.n	800241a <HAL_GPIO_Init+0x1fa>
 8002404:	2306      	movs	r3, #6
 8002406:	e008      	b.n	800241a <HAL_GPIO_Init+0x1fa>
 8002408:	2304      	movs	r3, #4
 800240a:	e006      	b.n	800241a <HAL_GPIO_Init+0x1fa>
 800240c:	2303      	movs	r3, #3
 800240e:	e004      	b.n	800241a <HAL_GPIO_Init+0x1fa>
 8002410:	2302      	movs	r3, #2
 8002412:	e002      	b.n	800241a <HAL_GPIO_Init+0x1fa>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_GPIO_Init+0x1fa>
 8002418:	2300      	movs	r3, #0
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	f002 0203 	and.w	r2, r2, #3
 8002420:	0092      	lsls	r2, r2, #2
 8002422:	4093      	lsls	r3, r2
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800242a:	4937      	ldr	r1, [pc, #220]	; (8002508 <HAL_GPIO_Init+0x2e8>)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_GPIO_Init+0x300>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800245c:	4a30      	ldr	r2, [pc, #192]	; (8002520 <HAL_GPIO_Init+0x300>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002462:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <HAL_GPIO_Init+0x300>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002486:	4a26      	ldr	r2, [pc, #152]	; (8002520 <HAL_GPIO_Init+0x300>)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_GPIO_Init+0x300>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024b0:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <HAL_GPIO_Init+0x300>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_GPIO_Init+0x300>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024da:	4a11      	ldr	r2, [pc, #68]	; (8002520 <HAL_GPIO_Init+0x300>)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f47f ae9d 	bne.w	8002230 <HAL_GPIO_Init+0x10>
  }
}
 80024f6:	bf00      	nop
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	40010000 	.word	0x40010000
 800250c:	48000400 	.word	0x48000400
 8002510:	48000800 	.word	0x48000800
 8002514:	48000c00 	.word	0x48000c00
 8002518:	48001000 	.word	0x48001000
 800251c:	48001400 	.word	0x48001400
 8002520:	40010400 	.word	0x40010400

08002524 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	e001      	b.n	8002546 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002570:	e002      	b.n	8002578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800259c:	887a      	ldrh	r2, [r7, #2]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80025a2:	e002      	b.n	80025aa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	619a      	str	r2, [r3, #24]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f806 	bl	80025e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40010400 	.word	0x40010400

080025e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d141      	bne.n	8002692 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800260e:	4b4b      	ldr	r3, [pc, #300]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261a:	d131      	bne.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800261c:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002622:	4a46      	ldr	r2, [pc, #280]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002628:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002634:	4a41      	ldr	r2, [pc, #260]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800263c:	4b40      	ldr	r3, [pc, #256]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2232      	movs	r2, #50	; 0x32
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	4a3f      	ldr	r2, [pc, #252]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	0c9b      	lsrs	r3, r3, #18
 800264e:	3301      	adds	r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002652:	e002      	b.n	800265a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3b01      	subs	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002666:	d102      	bne.n	800266e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f2      	bne.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267a:	d158      	bne.n	800272e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e057      	b.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002686:	4a2d      	ldr	r2, [pc, #180]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800268c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002690:	e04d      	b.n	800272e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002698:	d141      	bne.n	800271e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800269a:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a6:	d131      	bne.n	800270c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026a8:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ae:	4a23      	ldr	r2, [pc, #140]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b8:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026c0:	4a1e      	ldr	r2, [pc, #120]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2232      	movs	r2, #50	; 0x32
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	0c9b      	lsrs	r3, r3, #18
 80026da:	3301      	adds	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026de:	e002      	b.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f2:	d102      	bne.n	80026fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f2      	bne.n	80026e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002706:	d112      	bne.n	800272e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e011      	b.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002712:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002718:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800271c:	e007      	b.n	800272e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40007000 	.word	0x40007000
 8002740:	20000000 	.word	0x20000000
 8002744:	431bde83 	.word	0x431bde83

08002748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e308      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d075      	beq.n	8002852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002766:	4ba3      	ldr	r3, [pc, #652]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002770:	4ba0      	ldr	r3, [pc, #640]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d102      	bne.n	8002786 <HAL_RCC_OscConfig+0x3e>
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d002      	beq.n	800278c <HAL_RCC_OscConfig+0x44>
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d10b      	bne.n	80027a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	4b99      	ldr	r3, [pc, #612]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d05b      	beq.n	8002850 <HAL_RCC_OscConfig+0x108>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d157      	bne.n	8002850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e2e3      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ac:	d106      	bne.n	80027bc <HAL_RCC_OscConfig+0x74>
 80027ae:	4b91      	ldr	r3, [pc, #580]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a90      	ldr	r2, [pc, #576]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e01d      	b.n	80027f8 <HAL_RCC_OscConfig+0xb0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x98>
 80027c6:	4b8b      	ldr	r3, [pc, #556]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a8a      	ldr	r2, [pc, #552]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b88      	ldr	r3, [pc, #544]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a87      	ldr	r2, [pc, #540]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0xb0>
 80027e0:	4b84      	ldr	r3, [pc, #528]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a83      	ldr	r2, [pc, #524]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80027e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b81      	ldr	r3, [pc, #516]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a80      	ldr	r2, [pc, #512]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80027f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fe80 	bl	8001504 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7fe fe7c 	bl	8001504 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e2a8      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281a:	4b76      	ldr	r3, [pc, #472]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0xc0>
 8002826:	e014      	b.n	8002852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fe6c 	bl	8001504 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe fe68 	bl	8001504 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e294      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002842:	4b6c      	ldr	r3, [pc, #432]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0xe8>
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d075      	beq.n	800294a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285e:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002868:	4b62      	ldr	r3, [pc, #392]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b0c      	cmp	r3, #12
 8002876:	d102      	bne.n	800287e <HAL_RCC_OscConfig+0x136>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d002      	beq.n	8002884 <HAL_RCC_OscConfig+0x13c>
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d11f      	bne.n	80028c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002884:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_OscConfig+0x154>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e267      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b55      	ldr	r3, [pc, #340]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	4952      	ldr	r1, [pc, #328]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028b0:	4b51      	ldr	r3, [pc, #324]	; (80029f8 <HAL_RCC_OscConfig+0x2b0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fdd9 	bl	800146c <HAL_InitTick>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d043      	beq.n	8002948 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e253      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d023      	beq.n	8002914 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	4b49      	ldr	r3, [pc, #292]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a48      	ldr	r2, [pc, #288]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fe14 	bl	8001504 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe fe10 	bl	8001504 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e23c      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f2:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fe:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	061b      	lsls	r3, r3, #24
 800290c:	4939      	ldr	r1, [pc, #228]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
 8002912:	e01a      	b.n	800294a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002914:	4b37      	ldr	r3, [pc, #220]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a36      	ldr	r2, [pc, #216]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 800291a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fdf0 	bl	8001504 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002928:	f7fe fdec 	bl	8001504 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e218      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800293a:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x1e0>
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002948:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03c      	beq.n	80029d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01c      	beq.n	8002998 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002964:	4a23      	ldr	r2, [pc, #140]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296e:	f7fe fdc9 	bl	8001504 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002976:	f7fe fdc5 	bl	8001504 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1f1      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 800298a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0ef      	beq.n	8002976 <HAL_RCC_OscConfig+0x22e>
 8002996:	e01b      	b.n	80029d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 800299a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800299e:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe fdac 	bl	8001504 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b0:	f7fe fda8 	bl	8001504 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1d4      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ef      	bne.n	80029b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80ab 	beq.w	8002b34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_RCC_OscConfig+0x2b4>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e005      	b.n	80029fe <HAL_RCC_OscConfig+0x2b6>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	20000004 	.word	0x20000004
 80029fc:	2300      	movs	r3, #0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00d      	beq.n	8002a1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	4baf      	ldr	r3, [pc, #700]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	4aae      	ldr	r2, [pc, #696]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a0e:	4bac      	ldr	r3, [pc, #688]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1e:	4ba9      	ldr	r3, [pc, #676]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d118      	bne.n	8002a5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a2a:	4ba6      	ldr	r3, [pc, #664]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4aa5      	ldr	r2, [pc, #660]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a36:	f7fe fd65 	bl	8001504 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3e:	f7fe fd61 	bl	8001504 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e18d      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a50:	4b9c      	ldr	r3, [pc, #624]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d108      	bne.n	8002a76 <HAL_RCC_OscConfig+0x32e>
 8002a64:	4b96      	ldr	r3, [pc, #600]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	4a95      	ldr	r2, [pc, #596]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a74:	e024      	b.n	8002ac0 <HAL_RCC_OscConfig+0x378>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d110      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x358>
 8002a7e:	4b90      	ldr	r3, [pc, #576]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a84:	4a8e      	ldr	r2, [pc, #568]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a86:	f043 0304 	orr.w	r3, r3, #4
 8002a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a8e:	4b8c      	ldr	r3, [pc, #560]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	4a8a      	ldr	r2, [pc, #552]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a9e:	e00f      	b.n	8002ac0 <HAL_RCC_OscConfig+0x378>
 8002aa0:	4b87      	ldr	r3, [pc, #540]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	4a86      	ldr	r2, [pc, #536]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab0:	4b83      	ldr	r3, [pc, #524]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	4a82      	ldr	r2, [pc, #520]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d016      	beq.n	8002af6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fd1c 	bl	8001504 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fd18 	bl	8001504 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e142      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae6:	4b76      	ldr	r3, [pc, #472]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ed      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x388>
 8002af4:	e015      	b.n	8002b22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7fe fd05 	bl	8001504 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe fd01 	bl	8001504 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e12b      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b14:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1ed      	bne.n	8002afe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b28:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	4a64      	ldr	r2, [pc, #400]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d03c      	beq.n	8002bba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b48:	4b5d      	ldr	r3, [pc, #372]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b4e:	4a5c      	ldr	r2, [pc, #368]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7fe fcd4 	bl	8001504 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b60:	f7fe fcd0 	bl	8001504 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0fc      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b72:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ef      	beq.n	8002b60 <HAL_RCC_OscConfig+0x418>
 8002b80:	e01b      	b.n	8002bba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b82:	4b4f      	ldr	r3, [pc, #316]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b88:	4a4d      	ldr	r2, [pc, #308]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7fe fcb7 	bl	8001504 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b9a:	f7fe fcb3 	bl	8001504 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0df      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bac:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ef      	bne.n	8002b9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80d3 	beq.w	8002d6a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bc4:	4b3e      	ldr	r3, [pc, #248]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b0c      	cmp	r3, #12
 8002bce:	f000 808d 	beq.w	8002cec <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d15a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b39      	ldr	r3, [pc, #228]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a38      	ldr	r2, [pc, #224]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe fc8d 	bl	8001504 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe fc89 	bl	8001504 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0b5      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c00:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0c:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCC_OscConfig+0x580>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6a11      	ldr	r1, [r2, #32]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	4311      	orrs	r1, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c26:	0212      	lsls	r2, r2, #8
 8002c28:	4311      	orrs	r1, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c2e:	0852      	lsrs	r2, r2, #1
 8002c30:	3a01      	subs	r2, #1
 8002c32:	0552      	lsls	r2, r2, #21
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c3a:	0852      	lsrs	r2, r2, #1
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	0652      	lsls	r2, r2, #25
 8002c40:	4311      	orrs	r1, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c46:	06d2      	lsls	r2, r2, #27
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	491d      	ldr	r1, [pc, #116]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1a      	ldr	r2, [pc, #104]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fc4c 	bl	8001504 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe fc48 	bl	8001504 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e074      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x528>
 8002c8e:	e06c      	b.n	8002d6a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ca2:	f023 0303 	bic.w	r3, r3, #3
 8002ca6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002cae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fc24 	bl	8001504 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cbe:	e00e      	b.n	8002cde <HAL_RCC_OscConfig+0x596>
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe fc1a 	bl	8001504 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e046      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cde:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_OscConfig+0x62c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x584>
 8002cea:	e03e      	b.n	8002d6a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e039      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <HAL_RCC_OscConfig+0x62c>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d12c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	3b01      	subs	r3, #1
 8002d18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d123      	bne.n	8002d66 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d11b      	bne.n	8002d66 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d113      	bne.n	8002d66 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000

08002d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e11e      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b91      	ldr	r3, [pc, #580]	; (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d910      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b8e      	ldr	r3, [pc, #568]	; (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 020f 	bic.w	r2, r3, #15
 8002da6:	498c      	ldr	r1, [pc, #560]	; (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b8a      	ldr	r3, [pc, #552]	; (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e106      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d073      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d129      	bne.n	8002e28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd4:	4b81      	ldr	r3, [pc, #516]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0f4      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002de4:	f000 f99e 	bl	8003124 <RCC_GetSysClockFreqFromPLLSource>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4a7c      	ldr	r2, [pc, #496]	; (8002fe0 <HAL_RCC_ClockConfig+0x268>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d93f      	bls.n	8002e72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002df2:	4b7a      	ldr	r3, [pc, #488]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d033      	beq.n	8002e72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d12f      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e12:	4b72      	ldr	r3, [pc, #456]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e1a:	4a70      	ldr	r2, [pc, #448]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e024      	b.n	8002e72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e30:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0c6      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e40:	4b66      	ldr	r3, [pc, #408]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0be      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e50:	f000 f8ce 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4a61      	ldr	r2, [pc, #388]	; (8002fe0 <HAL_RCC_ClockConfig+0x268>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d909      	bls.n	8002e72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e5e:	4b5f      	ldr	r3, [pc, #380]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e66:	4a5d      	ldr	r2, [pc, #372]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e72:	4b5a      	ldr	r3, [pc, #360]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f023 0203 	bic.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4957      	ldr	r1, [pc, #348]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e84:	f7fe fb3e 	bl	8001504 <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8c:	f7fe fb3a 	bl	8001504 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e095      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 020c 	and.w	r2, r3, #12
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d1eb      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d023      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ecc:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a42      	ldr	r2, [pc, #264]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002ed2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ed6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ee4:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002eec:	4a3b      	ldr	r2, [pc, #236]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002eee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ef2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef4:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4936      	ldr	r1, [pc, #216]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b80      	cmp	r3, #128	; 0x80
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f0e:	4b33      	ldr	r3, [pc, #204]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	4a32      	ldr	r2, [pc, #200]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d21d      	bcs.n	8002f64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f28:	4b2b      	ldr	r3, [pc, #172]	; (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 020f 	bic.w	r2, r3, #15
 8002f30:	4929      	ldr	r1, [pc, #164]	; (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f38:	f7fe fae4 	bl	8001504 <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7fe fae0 	bl	8001504 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e03b      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d1ed      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f70:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4917      	ldr	r1, [pc, #92]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f8e:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	490f      	ldr	r1, [pc, #60]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa2:	f000 f825 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <HAL_RCC_ClockConfig+0x26c>)
 8002fb4:	5cd3      	ldrb	r3, [r2, r3]
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	fa21 f303 	lsr.w	r3, r1, r3
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <HAL_RCC_ClockConfig+0x270>)
 8002fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_RCC_ClockConfig+0x274>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fa50 	bl	800146c <HAL_InitTick>
 8002fcc:	4603      	mov	r3, r0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40022000 	.word	0x40022000
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	04c4b400 	.word	0x04c4b400
 8002fe4:	0800b8e4 	.word	0x0800b8e4
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	20000004 	.word	0x20000004

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ff6:	4b2c      	ldr	r3, [pc, #176]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d102      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003002:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	e047      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003008:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d102      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003014:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	e03e      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800301a:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d136      	bne.n	8003094 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	3301      	adds	r3, #1
 800303c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d10c      	bne.n	800305e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003044:	4a1a      	ldr	r2, [pc, #104]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	4a16      	ldr	r2, [pc, #88]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800304e:	68d2      	ldr	r2, [r2, #12]
 8003050:	0a12      	lsrs	r2, r2, #8
 8003052:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	617b      	str	r3, [r7, #20]
      break;
 800305c:	e00c      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	4a10      	ldr	r2, [pc, #64]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003068:	68d2      	ldr	r2, [r2, #12]
 800306a:	0a12      	lsrs	r2, r2, #8
 800306c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003070:	fb02 f303 	mul.w	r3, r2, r3
 8003074:	617b      	str	r3, [r7, #20]
      break;
 8003076:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0e5b      	lsrs	r3, r3, #25
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	3301      	adds	r3, #1
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	e001      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003098:	693b      	ldr	r3, [r7, #16]
}
 800309a:	4618      	mov	r0, r3
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	00f42400 	.word	0x00f42400
 80030b0:	016e3600 	.word	0x016e3600

080030b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20000000 	.word	0x20000000

080030cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030d0:	f7ff fff0 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 80030d4:	4601      	mov	r1, r0
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	0800b8f4 	.word	0x0800b8f4

080030f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030fc:	f7ff ffda 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 8003100:	4601      	mov	r1, r0
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	0adb      	lsrs	r3, r3, #11
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4a04      	ldr	r2, [pc, #16]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	0800b8f4 	.word	0x0800b8f4

08003124 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800312a:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	3301      	adds	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d10c      	bne.n	8003162 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003148:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003152:	68d2      	ldr	r2, [r2, #12]
 8003154:	0a12      	lsrs	r2, r2, #8
 8003156:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	617b      	str	r3, [r7, #20]
    break;
 8003160:	e00c      	b.n	800317c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003162:	4a12      	ldr	r2, [pc, #72]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800316c:	68d2      	ldr	r2, [r2, #12]
 800316e:	0a12      	lsrs	r2, r2, #8
 8003170:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003174:	fb02 f303 	mul.w	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
    break;
 800317a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0e5b      	lsrs	r3, r3, #25
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003196:	687b      	ldr	r3, [r7, #4]
}
 8003198:	4618      	mov	r0, r3
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40021000 	.word	0x40021000
 80031a8:	016e3600 	.word	0x016e3600
 80031ac:	00f42400 	.word	0x00f42400

080031b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031b8:	2300      	movs	r3, #0
 80031ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031bc:	2300      	movs	r3, #0
 80031be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8098 	beq.w	80032fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d2:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10d      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	4a3f      	ldr	r2, [pc, #252]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f6:	2301      	movs	r3, #1
 80031f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031fa:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a39      	ldr	r2, [pc, #228]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003206:	f7fe f97d 	bl	8001504 <HAL_GetTick>
 800320a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800320c:	e009      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fe f979 	bl	8001504 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d902      	bls.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	74fb      	strb	r3, [r7, #19]
        break;
 8003220:	e005      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003222:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0ef      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d159      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003234:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d01e      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	429a      	cmp	r2, r3
 800324e:	d019      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800327c:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7fe f939 	bl	8001504 <HAL_GetTick>
 8003292:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003294:	e00b      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe f935 	bl	8001504 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d902      	bls.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	74fb      	strb	r3, [r7, #19]
            break;
 80032ac:	e006      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ae:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ec      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d0:	4903      	ldr	r1, [pc, #12]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032d8:	e008      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	74bb      	strb	r3, [r7, #18]
 80032de:	e005      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ec:	7c7b      	ldrb	r3, [r7, #17]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d105      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f2:	4baf      	ldr	r3, [pc, #700]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	4aae      	ldr	r2, [pc, #696]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800330a:	4ba9      	ldr	r3, [pc, #676]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f023 0203 	bic.w	r2, r3, #3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	49a5      	ldr	r1, [pc, #660]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800332c:	4ba0      	ldr	r3, [pc, #640]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f023 020c 	bic.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	499d      	ldr	r1, [pc, #628]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800334e:	4b98      	ldr	r3, [pc, #608]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4994      	ldr	r1, [pc, #592]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003370:	4b8f      	ldr	r3, [pc, #572]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	498c      	ldr	r1, [pc, #560]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003392:	4b87      	ldr	r3, [pc, #540]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	4983      	ldr	r1, [pc, #524]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033b4:	4b7e      	ldr	r3, [pc, #504]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	497b      	ldr	r1, [pc, #492]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033d6:	4b76      	ldr	r3, [pc, #472]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	4972      	ldr	r1, [pc, #456]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033f8:	4b6d      	ldr	r3, [pc, #436]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	496a      	ldr	r1, [pc, #424]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800341a:	4b65      	ldr	r3, [pc, #404]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	4961      	ldr	r1, [pc, #388]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800343c:	4b5c      	ldr	r3, [pc, #368]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800343e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	4959      	ldr	r1, [pc, #356]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800345e:	4b54      	ldr	r3, [pc, #336]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	4950      	ldr	r1, [pc, #320]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347c:	2b00      	cmp	r3, #0
 800347e:	d015      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003480:	4b4b      	ldr	r3, [pc, #300]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4948      	ldr	r1, [pc, #288]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349e:	d105      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a0:	4b43      	ldr	r3, [pc, #268]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a42      	ldr	r2, [pc, #264]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034b8:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	493a      	ldr	r1, [pc, #232]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d6:	d105      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d8:	4b35      	ldr	r3, [pc, #212]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a34      	ldr	r2, [pc, #208]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d015      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034f0:	4b2f      	ldr	r3, [pc, #188]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	492c      	ldr	r1, [pc, #176]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350e:	d105      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003510:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a26      	ldr	r2, [pc, #152]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800351a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003528:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003536:	491e      	ldr	r1, [pc, #120]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003546:	d105      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a18      	ldr	r2, [pc, #96]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800354e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003552:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d015      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003560:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4910      	ldr	r1, [pc, #64]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357e:	d105      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800358a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d018      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	4902      	ldr	r1, [pc, #8]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ae:	e001      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80035b0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035bc:	d105      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035be:	4b21      	ldr	r3, [pc, #132]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4a20      	ldr	r2, [pc, #128]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d015      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e4:	4917      	ldr	r1, [pc, #92]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f4:	d105      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035f6:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	4a12      	ldr	r2, [pc, #72]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d015      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003610:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361c:	4909      	ldr	r1, [pc, #36]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800362c:	d105      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003638:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800363a:	7cbb      	ldrb	r3, [r7, #18]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000

08003648 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d05c      	beq.n	8003714 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd fc74 	bl	8000f5c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800367c:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_RTC_Init+0xd8>)
 800367e:	22ca      	movs	r2, #202	; 0xca
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
 8003682:	4b27      	ldr	r3, [pc, #156]	; (8003720 <HAL_RTC_Init+0xd8>)
 8003684:	2253      	movs	r2, #83	; 0x53
 8003686:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fa37 	bl	8003afc <RTC_EnterInitMode>
 800368e:	4603      	mov	r3, r0
 8003690:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d133      	bne.n	8003700 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003698:	4b21      	ldr	r3, [pc, #132]	; (8003720 <HAL_RTC_Init+0xd8>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	4a20      	ldr	r2, [pc, #128]	; (8003720 <HAL_RTC_Init+0xd8>)
 800369e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80036a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a6:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RTC_Init+0xd8>)
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	4319      	orrs	r1, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	430b      	orrs	r3, r1
 80036bc:	4918      	ldr	r1, [pc, #96]	; (8003720 <HAL_RTC_Init+0xd8>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	041b      	lsls	r3, r3, #16
 80036cc:	4914      	ldr	r1, [pc, #80]	; (8003720 <HAL_RTC_Init+0xd8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa46 	bl	8003b64 <RTC_ExitInitMode>
 80036d8:	4603      	mov	r3, r0
 80036da:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10e      	bne.n	8003700 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 80036e2:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <HAL_RTC_Init+0xd8>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a19      	ldr	r1, [r3, #32]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4319      	orrs	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	4909      	ldr	r1, [pc, #36]	; (8003720 <HAL_RTC_Init+0xd8>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_RTC_Init+0xd8>)
 8003702:	22ff      	movs	r2, #255	; 0xff
 8003704:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40002800 	.word	0x40002800

08003724 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_RTC_SetTime+0x1a>
 800373a:	2302      	movs	r3, #2
 800373c:	e081      	b.n	8003842 <HAL_RTC_SetTime+0x11e>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800374e:	4b3f      	ldr	r3, [pc, #252]	; (800384c <HAL_RTC_SetTime+0x128>)
 8003750:	22ca      	movs	r2, #202	; 0xca
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
 8003754:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_RTC_SetTime+0x128>)
 8003756:	2253      	movs	r2, #83	; 0x53
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f9ce 	bl	8003afc <RTC_EnterInitMode>
 8003760:	4603      	mov	r3, r0
 8003762:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d15c      	bne.n	8003824 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d125      	bne.n	80037bc <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003770:	4b36      	ldr	r3, [pc, #216]	; (800384c <HAL_RTC_SetTime+0x128>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2200      	movs	r2, #0
 8003780:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fa2a 	bl	8003be0 <RTC_ByteToBcd2>
 800378c:	4603      	mov	r3, r0
 800378e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	785b      	ldrb	r3, [r3, #1]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fa23 	bl	8003be0 <RTC_ByteToBcd2>
 800379a:	4603      	mov	r3, r0
 800379c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800379e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	789b      	ldrb	r3, [r3, #2]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fa1b 	bl	8003be0 <RTC_ByteToBcd2>
 80037aa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037ac:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	78db      	ldrb	r3, [r3, #3]
 80037b4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e017      	b.n	80037ec <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80037bc:	4b23      	ldr	r3, [pc, #140]	; (800384c <HAL_RTC_SetTime+0x128>)
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2200      	movs	r2, #0
 80037cc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	785b      	ldrb	r3, [r3, #1]
 80037d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037da:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037e0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	78db      	ldrb	r3, [r3, #3]
 80037e6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80037ec:	4a17      	ldr	r2, [pc, #92]	; (800384c <HAL_RTC_SetTime+0x128>)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037f8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <HAL_RTC_SetTime+0x128>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	4a13      	ldr	r2, [pc, #76]	; (800384c <HAL_RTC_SetTime+0x128>)
 8003800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003804:	6193      	str	r3, [r2, #24]

    /* Configure the RTC_CR register */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_RTC_SetTime+0x128>)
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	68d9      	ldr	r1, [r3, #12]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	430b      	orrs	r3, r1
 8003814:	490d      	ldr	r1, [pc, #52]	; (800384c <HAL_RTC_SetTime+0x128>)
 8003816:	4313      	orrs	r3, r2
 8003818:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f9a2 	bl	8003b64 <RTC_ExitInitMode>
 8003820:	4603      	mov	r3, r0
 8003822:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RTC_SetTime+0x128>)
 8003826:	22ff      	movs	r2, #255	; 0xff
 8003828:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d103      	bne.n	8003838 <HAL_RTC_SetTime+0x114>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003840:	7cfb      	ldrb	r3, [r7, #19]
}
 8003842:	4618      	mov	r0, r3
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd90      	pop	{r4, r7, pc}
 800384a:	bf00      	nop
 800384c:	40002800 	.word	0x40002800

08003850 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800385c:	4b29      	ldr	r3, [pc, #164]	; (8003904 <HAL_RTC_GetTime+0xb4>)
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8003864:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_RTC_GetTime+0xb4>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003870:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_RTC_GetTime+0xb4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003878:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800387c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003888:	b2da      	uxtb	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	0d9b      	lsrs	r3, r3, #22
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d11a      	bne.n	80038f8 <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f9aa 	bl	8003c20 <RTC_Bcd2ToByte>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	785b      	ldrb	r3, [r3, #1]
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f9a1 	bl	8003c20 <RTC_Bcd2ToByte>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	789b      	ldrb	r3, [r3, #2]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f998 	bl	8003c20 <RTC_Bcd2ToByte>
 80038f0:	4603      	mov	r3, r0
 80038f2:	461a      	mov	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40002800 	.word	0x40002800

08003908 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_RTC_SetDate+0x1a>
 800391e:	2302      	movs	r3, #2
 8003920:	e071      	b.n	8003a06 <HAL_RTC_SetDate+0xfe>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10e      	bne.n	8003956 <HAL_RTC_SetDate+0x4e>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	f023 0310 	bic.w	r3, r3, #16
 800394c:	b2db      	uxtb	r3, r3
 800394e:	330a      	adds	r3, #10
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11c      	bne.n	8003996 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	78db      	ldrb	r3, [r3, #3]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f93d 	bl	8003be0 <RTC_ByteToBcd2>
 8003966:	4603      	mov	r3, r0
 8003968:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	785b      	ldrb	r3, [r3, #1]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f936 	bl	8003be0 <RTC_ByteToBcd2>
 8003974:	4603      	mov	r3, r0
 8003976:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003978:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	789b      	ldrb	r3, [r3, #2]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f92e 	bl	8003be0 <RTC_ByteToBcd2>
 8003984:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003986:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e00e      	b.n	80039b4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	78db      	ldrb	r3, [r3, #3]
 800399a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039a2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039a8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039b4:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <HAL_RTC_SetDate+0x108>)
 80039b6:	22ca      	movs	r2, #202	; 0xca
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <HAL_RTC_SetDate+0x108>)
 80039bc:	2253      	movs	r2, #83	; 0x53
 80039be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f89b 	bl	8003afc <RTC_EnterInitMode>
 80039c6:	4603      	mov	r3, r0
 80039c8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80039d0:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <HAL_RTC_SetDate+0x108>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f8c0 	bl	8003b64 <RTC_ExitInitMode>
 80039e4:	4603      	mov	r3, r0
 80039e6:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <HAL_RTC_SetDate+0x108>)
 80039ea:	22ff      	movs	r2, #255	; 0xff
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d103      	bne.n	80039fc <HAL_RTC_SetDate+0xf4>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd90      	pop	{r4, r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40002800 	.word	0x40002800

08003a14 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003a20:	4b22      	ldr	r3, [pc, #136]	; (8003aac <HAL_RTC_GetDate+0x98>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	0b5b      	lsrs	r3, r3, #13
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d11a      	bne.n	8003aa2 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	78db      	ldrb	r3, [r3, #3]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f8d5 	bl	8003c20 <RTC_Bcd2ToByte>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	785b      	ldrb	r3, [r3, #1]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f8cc 	bl	8003c20 <RTC_Bcd2ToByte>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	789b      	ldrb	r3, [r3, #2]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f8c3 	bl	8003c20 <RTC_Bcd2ToByte>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40002800 	.word	0x40002800

08003ab0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <HAL_RTC_WaitForSynchro+0x48>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a0e      	ldr	r2, [pc, #56]	; (8003af8 <HAL_RTC_WaitForSynchro+0x48>)
 8003abe:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8003ac2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003ac4:	f7fd fd1e 	bl	8001504 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003aca:	e009      	b.n	8003ae0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003acc:	f7fd fd1a 	bl	8001504 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ada:	d901      	bls.n	8003ae0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e006      	b.n	8003aee <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RTC_WaitForSynchro+0x48>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ef      	beq.n	8003acc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40002800 	.word	0x40002800

08003afc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <RTC_EnterInitMode+0x64>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d120      	bne.n	8003b56 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <RTC_EnterInitMode+0x64>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a11      	ldr	r2, [pc, #68]	; (8003b60 <RTC_EnterInitMode+0x64>)
 8003b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003b20:	f7fd fcf0 	bl	8001504 <HAL_GetTick>
 8003b24:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003b26:	e00d      	b.n	8003b44 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003b28:	f7fd fcec 	bl	8001504 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b36:	d905      	bls.n	8003b44 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2203      	movs	r2, #3
 8003b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <RTC_EnterInitMode+0x64>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <RTC_EnterInitMode+0x5a>
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d1e8      	bne.n	8003b28 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40002800 	.word	0x40002800

08003b64 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <RTC_ExitInitMode+0x78>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <RTC_ExitInitMode+0x78>)
 8003b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b7a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <RTC_ExitInitMode+0x78>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10c      	bne.n	8003ba2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ff91 	bl	8003ab0 <HAL_RTC_WaitForSynchro>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01e      	beq.n	8003bd2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2203      	movs	r2, #3
 8003b98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	73fb      	strb	r3, [r7, #15]
 8003ba0:	e017      	b.n	8003bd2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <RTC_ExitInitMode+0x78>)
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	4a0d      	ldr	r2, [pc, #52]	; (8003bdc <RTC_ExitInitMode+0x78>)
 8003ba8:	f023 0320 	bic.w	r3, r3, #32
 8003bac:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ff7e 	bl	8003ab0 <HAL_RTC_WaitForSynchro>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <RTC_ExitInitMode+0x78>)
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <RTC_ExitInitMode+0x78>)
 8003bcc:	f043 0320 	orr.w	r3, r3, #32
 8003bd0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40002800 	.word	0x40002800

08003be0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003bf2:	e005      	b.n	8003c00 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003bfa:	7afb      	ldrb	r3, [r7, #11]
 8003bfc:	3b0a      	subs	r3, #10
 8003bfe:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003c00:	7afb      	ldrb	r3, [r7, #11]
 8003c02:	2b09      	cmp	r3, #9
 8003c04:	d8f6      	bhi.n	8003bf4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	7afb      	ldrb	r3, [r7, #11]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	b2db      	uxtb	r3, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	4413      	add	r3, r2
 8003c4a:	b2db      	uxtb	r3, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e084      	b.n	8003d74 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fd f9c3 	bl	8001010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003caa:	d902      	bls.n	8003cb2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e002      	b.n	8003cb8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cb6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cc0:	d007      	beq.n	8003cd2 <HAL_SPI_Init+0x7a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cca:	d002      	beq.n	8003cd2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10b      	bne.n	8003cf2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ce2:	d903      	bls.n	8003cec <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8003cea:	e002      	b.n	8003cf2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	ea42 0103 	orr.w	r1, r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	f003 0204 	and.w	r2, r3, #4
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	ea42 0103 	orr.w	r1, r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_SPI_Transmit+0x22>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e150      	b.n	8004040 <HAL_SPI_Transmit+0x2c4>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003da6:	f7fd fbad 	bl	8001504 <HAL_GetTick>
 8003daa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d002      	beq.n	8003dc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dc0:	e135      	b.n	800402e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_SPI_Transmit+0x52>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dd2:	e12c      	b.n	800402e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	88fa      	ldrh	r2, [r7, #6]
 8003dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1e:	d107      	bne.n	8003e30 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d007      	beq.n	8003e4e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e56:	d94b      	bls.n	8003ef0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_SPI_Transmit+0xea>
 8003e60:	8afb      	ldrh	r3, [r7, #22]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d13e      	bne.n	8003ee4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	881a      	ldrh	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	1c9a      	adds	r2, r3, #2
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e8a:	e02b      	b.n	8003ee4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d112      	bne.n	8003ec0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	881a      	ldrh	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	1c9a      	adds	r2, r3, #2
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ebe:	e011      	b.n	8003ee4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec0:	f7fd fb20 	bl	8001504 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d803      	bhi.n	8003ed8 <HAL_SPI_Transmit+0x15c>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	d102      	bne.n	8003ede <HAL_SPI_Transmit+0x162>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ee2:	e0a4      	b.n	800402e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ce      	bne.n	8003e8c <HAL_SPI_Transmit+0x110>
 8003eee:	e07c      	b.n	8003fea <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_SPI_Transmit+0x182>
 8003ef8:	8afb      	ldrh	r3, [r7, #22]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d170      	bne.n	8003fe0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d912      	bls.n	8003f2e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	881a      	ldrh	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	1c9a      	adds	r2, r3, #2
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b02      	subs	r3, #2
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f2c:	e058      	b.n	8003fe0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	7812      	ldrb	r2, [r2, #0]
 8003f3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f54:	e044      	b.n	8003fe0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d12b      	bne.n	8003fbc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d912      	bls.n	8003f94 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	881a      	ldrh	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	1c9a      	adds	r2, r3, #2
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b02      	subs	r3, #2
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f92:	e025      	b.n	8003fe0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	7812      	ldrb	r2, [r2, #0]
 8003fa0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fba:	e011      	b.n	8003fe0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fbc:	f7fd faa2 	bl	8001504 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d803      	bhi.n	8003fd4 <HAL_SPI_Transmit+0x258>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d102      	bne.n	8003fda <HAL_SPI_Transmit+0x25e>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fde:	e026      	b.n	800402e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1b5      	bne.n	8003f56 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fca2 	bl	8004938 <SPI_EndRxTxTransaction>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004008:	2300      	movs	r3, #0
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	e000      	b.n	800402e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800402c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800403e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004064:	d112      	bne.n	800408c <HAL_SPI_Receive+0x44>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10e      	bne.n	800408c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2204      	movs	r2, #4
 8004072:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f908 	bl	8004298 <HAL_SPI_TransmitReceive>
 8004088:	4603      	mov	r3, r0
 800408a:	e101      	b.n	8004290 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_SPI_Receive+0x52>
 8004096:	2302      	movs	r3, #2
 8004098:	e0fa      	b.n	8004290 <HAL_SPI_Receive+0x248>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040a2:	f7fd fa2f 	bl	8001504 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d002      	beq.n	80040ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
 80040b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040b8:	e0e1      	b.n	800427e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_SPI_Receive+0x7e>
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040ca:	e0d8      	b.n	800427e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2204      	movs	r2, #4
 80040d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	88fa      	ldrh	r2, [r7, #6]
 80040e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	88fa      	ldrh	r2, [r7, #6]
 80040ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004116:	d908      	bls.n	800412a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	e007      	b.n	800413a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004138:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004142:	d107      	bne.n	8004154 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004152:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b40      	cmp	r3, #64	; 0x40
 8004160:	d007      	beq.n	8004172 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004170:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800417a:	d867      	bhi.n	800424c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800417c:	e030      	b.n	80041e0 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	d117      	bne.n	80041bc <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f103 020c 	add.w	r2, r3, #12
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80041ba:	e011      	b.n	80041e0 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041bc:	f7fd f9a2 	bl	8001504 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d803      	bhi.n	80041d4 <HAL_SPI_Receive+0x18c>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d102      	bne.n	80041da <HAL_SPI_Receive+0x192>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041de:	e04e      	b.n	800427e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1c8      	bne.n	800417e <HAL_SPI_Receive+0x136>
 80041ec:	e034      	b.n	8004258 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d115      	bne.n	8004228 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	b292      	uxth	r2, r2
 8004208:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	1c9a      	adds	r2, r3, #2
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004226:	e011      	b.n	800424c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004228:	f7fd f96c 	bl	8001504 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d803      	bhi.n	8004240 <HAL_SPI_Receive+0x1f8>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d102      	bne.n	8004246 <HAL_SPI_Receive+0x1fe>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	75fb      	strb	r3, [r7, #23]
          goto error;
 800424a:	e018      	b.n	800427e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1ca      	bne.n	80041ee <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	6839      	ldr	r1, [r7, #0]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fb13 	bl	8004888 <SPI_EndRxTransaction>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	75fb      	strb	r3, [r7, #23]
 800427a:	e000      	b.n	800427e <HAL_SPI_Receive+0x236>
  }

error :
 800427c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800428e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	; 0x28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042a6:	2301      	movs	r3, #1
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_SPI_TransmitReceive+0x26>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e1fb      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x41e>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c6:	f7fd f91d 	bl	8001504 <HAL_GetTick>
 80042ca:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042d2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80042de:	887b      	ldrh	r3, [r7, #2]
 80042e0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042e2:	7efb      	ldrb	r3, [r7, #27]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d00e      	beq.n	8004306 <HAL_SPI_TransmitReceive+0x6e>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ee:	d106      	bne.n	80042fe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <HAL_SPI_TransmitReceive+0x66>
 80042f8:	7efb      	ldrb	r3, [r7, #27]
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d003      	beq.n	8004306 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
 8004300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004304:	e1cd      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x80>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x80>
 8004312:	887b      	ldrh	r3, [r7, #2]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d103      	bne.n	8004320 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800431e:	e1c0      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b04      	cmp	r3, #4
 800432a:	d003      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2205      	movs	r2, #5
 8004330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	887a      	ldrh	r2, [r7, #2]
 800435a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	887a      	ldrh	r2, [r7, #2]
 8004360:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004376:	d802      	bhi.n	800437e <HAL_SPI_TransmitReceive+0xe6>
 8004378:	8a3b      	ldrh	r3, [r7, #16]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d908      	bls.n	8004390 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800438c:	605a      	str	r2, [r3, #4]
 800438e:	e007      	b.n	80043a0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800439e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d007      	beq.n	80043be <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043c6:	d97c      	bls.n	80044c2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_SPI_TransmitReceive+0x13e>
 80043d0:	8a7b      	ldrh	r3, [r7, #18]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d169      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	881a      	ldrh	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	1c9a      	adds	r2, r3, #2
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043fa:	e056      	b.n	80044aa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d11b      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x1aa>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d016      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x1aa>
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	2b01      	cmp	r3, #1
 8004418:	d113      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	1c9a      	adds	r2, r3, #2
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d11c      	bne.n	800448a <HAL_SPI_TransmitReceive+0x1f2>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d016      	beq.n	800448a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	b292      	uxth	r2, r2
 8004468:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	1c9a      	adds	r2, r3, #2
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004486:	2301      	movs	r3, #1
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800448a:	f7fd f83b 	bl	8001504 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004496:	429a      	cmp	r2, r3
 8004498:	d807      	bhi.n	80044aa <HAL_SPI_TransmitReceive+0x212>
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d003      	beq.n	80044aa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80044a8:	e0fb      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1a3      	bne.n	80043fc <HAL_SPI_TransmitReceive+0x164>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d19d      	bne.n	80043fc <HAL_SPI_TransmitReceive+0x164>
 80044c0:	e0df      	b.n	8004682 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x23a>
 80044ca:	8a7b      	ldrh	r3, [r7, #18]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f040 80cb 	bne.w	8004668 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d912      	bls.n	8004502 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	881a      	ldrh	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	1c9a      	adds	r2, r3, #2
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b02      	subs	r3, #2
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004500:	e0b2      	b.n	8004668 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	330c      	adds	r3, #12
 800450c:	7812      	ldrb	r2, [r2, #0]
 800450e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004528:	e09e      	b.n	8004668 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b02      	cmp	r3, #2
 8004536:	d134      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x30a>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d02f      	beq.n	80045a2 <HAL_SPI_TransmitReceive+0x30a>
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	2b01      	cmp	r3, #1
 8004546:	d12c      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b01      	cmp	r3, #1
 8004550:	d912      	bls.n	8004578 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	881a      	ldrh	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	1c9a      	adds	r2, r3, #2
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b02      	subs	r3, #2
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004576:	e012      	b.n	800459e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	7812      	ldrb	r2, [r2, #0]
 8004584:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d148      	bne.n	8004642 <HAL_SPI_TransmitReceive+0x3aa>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d042      	beq.n	8004642 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d923      	bls.n	8004610 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	b292      	uxth	r2, r2
 80045d4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	1c9a      	adds	r2, r3, #2
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b02      	subs	r3, #2
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d81f      	bhi.n	800463e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800460c:	605a      	str	r2, [r3, #4]
 800460e:	e016      	b.n	800463e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f103 020c 	add.w	r2, r3, #12
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	7812      	ldrb	r2, [r2, #0]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800463e:	2301      	movs	r3, #1
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004642:	f7fc ff5f 	bl	8001504 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464e:	429a      	cmp	r2, r3
 8004650:	d803      	bhi.n	800465a <HAL_SPI_TransmitReceive+0x3c2>
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004658:	d102      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x3c8>
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	2b00      	cmp	r3, #0
 800465e:	d103      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004666:	e01c      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	f47f af5b 	bne.w	800452a <HAL_SPI_TransmitReceive+0x292>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	f47f af54 	bne.w	800452a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f956 	bl	8004938 <SPI_EndRxTxTransaction>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d006      	beq.n	80046a0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	661a      	str	r2, [r3, #96]	; 0x60
 800469e:	e000      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80046a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3728      	adds	r7, #40	; 0x28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046cc:	b2db      	uxtb	r3, r3
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4613      	mov	r3, r2
 80046e8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ea:	e04c      	b.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d048      	beq.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80046f4:	f7fc ff06 	bl	8001504 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d902      	bls.n	800470a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d13d      	bne.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004718:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004722:	d111      	bne.n	8004748 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800472c:	d004      	beq.n	8004738 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004736:	d107      	bne.n	8004748 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004746:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004750:	d10f      	bne.n	8004772 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004770:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e00f      	b.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4013      	ands	r3, r2
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d1a3      	bne.n	80046ec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80047bc:	e057      	b.n	800486e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047c4:	d106      	bne.n	80047d4 <SPI_WaitFifoStateUntilTimeout+0x26>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047da:	d048      	beq.n	800486e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80047dc:	f7fc fe92 	bl	8001504 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d902      	bls.n	80047f2 <SPI_WaitFifoStateUntilTimeout+0x44>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d13d      	bne.n	800486e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480a:	d111      	bne.n	8004830 <SPI_WaitFifoStateUntilTimeout+0x82>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004814:	d004      	beq.n	8004820 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	d107      	bne.n	8004830 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004838:	d10f      	bne.n	800485a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e008      	b.n	8004880 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4013      	ands	r3, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d19f      	bne.n	80047be <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489c:	d111      	bne.n	80048c2 <SPI_EndRxTransaction+0x3a>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a6:	d004      	beq.n	80048b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b0:	d107      	bne.n	80048c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2200      	movs	r2, #0
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f7ff ff04 	bl	80046da <SPI_WaitFlagStateUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e023      	b.n	8004930 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f0:	d11d      	bne.n	800492e <SPI_EndRxTransaction+0xa6>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fa:	d004      	beq.n	8004906 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004904:	d113      	bne.n	800492e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff ff4b 	bl	80047ae <SPI_WaitFifoStateUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e000      	b.n	8004930 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2200      	movs	r2, #0
 800494c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f7ff ff2c 	bl	80047ae <SPI_WaitFifoStateUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e027      	b.n	80049bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2200      	movs	r2, #0
 8004974:	2180      	movs	r1, #128	; 0x80
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff feaf 	bl	80046da <SPI_WaitFlagStateUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e014      	b.n	80049bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2200      	movs	r2, #0
 800499a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7ff ff05 	bl	80047ae <SPI_WaitFifoStateUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ae:	f043 0220 	orr.w	r2, r3, #32
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e000      	b.n	80049bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e01d      	b.n	8004a12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fc fc40 	bl	8001270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f000 f9dc 	bl	8004dc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <HAL_TIM_Base_Start_IT+0x50>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d00b      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x42>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d007      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	00010007 	.word	0x00010007

08004a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d122      	bne.n	8004acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d11b      	bne.n	8004acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0202 	mvn.w	r2, #2
 8004a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f965 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f957 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f968 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d122      	bne.n	8004b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d11b      	bne.n	8004b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0204 	mvn.w	r2, #4
 8004af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f93b 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f92d 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f93e 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d122      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d11b      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0208 	mvn.w	r2, #8
 8004b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2204      	movs	r2, #4
 8004b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f911 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f903 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f914 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d122      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0210 	mvn.w	r2, #16
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8e7 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8d9 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f8ea 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d107      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0201 	mvn.w	r2, #1
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fb ff44 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	2b80      	cmp	r3, #128	; 0x80
 8004c00:	d10e      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0c:	2b80      	cmp	r3, #128	; 0x80
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f982 	bl	8004f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2e:	d10e      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b80      	cmp	r3, #128	; 0x80
 8004c3c:	d107      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f975 	bl	8004f38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d10e      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d107      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f898 	bl	8004daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d10e      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d107      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f06f 0220 	mvn.w	r2, #32
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f935 	bl	8004f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb4:	d10f      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cc4:	d107      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f93b 	bl	8004f4c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce4:	d10f      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cf4:	d107      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f92d 	bl	8004f60 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d14:	d10f      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d24:	d107      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f91f 	bl	8004f74 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d44:	d10f      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d54:	d107      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f911 	bl	8004f88 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a46      	ldr	r2, [pc, #280]	; (8004eec <TIM_Base_SetConfig+0x12c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d017      	beq.n	8004e08 <TIM_Base_SetConfig+0x48>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d013      	beq.n	8004e08 <TIM_Base_SetConfig+0x48>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a43      	ldr	r2, [pc, #268]	; (8004ef0 <TIM_Base_SetConfig+0x130>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00f      	beq.n	8004e08 <TIM_Base_SetConfig+0x48>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a42      	ldr	r2, [pc, #264]	; (8004ef4 <TIM_Base_SetConfig+0x134>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00b      	beq.n	8004e08 <TIM_Base_SetConfig+0x48>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a41      	ldr	r2, [pc, #260]	; (8004ef8 <TIM_Base_SetConfig+0x138>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d007      	beq.n	8004e08 <TIM_Base_SetConfig+0x48>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a40      	ldr	r2, [pc, #256]	; (8004efc <TIM_Base_SetConfig+0x13c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d003      	beq.n	8004e08 <TIM_Base_SetConfig+0x48>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3f      	ldr	r2, [pc, #252]	; (8004f00 <TIM_Base_SetConfig+0x140>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d108      	bne.n	8004e1a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a33      	ldr	r2, [pc, #204]	; (8004eec <TIM_Base_SetConfig+0x12c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d023      	beq.n	8004e6a <TIM_Base_SetConfig+0xaa>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e28:	d01f      	beq.n	8004e6a <TIM_Base_SetConfig+0xaa>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a30      	ldr	r2, [pc, #192]	; (8004ef0 <TIM_Base_SetConfig+0x130>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01b      	beq.n	8004e6a <TIM_Base_SetConfig+0xaa>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2f      	ldr	r2, [pc, #188]	; (8004ef4 <TIM_Base_SetConfig+0x134>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d017      	beq.n	8004e6a <TIM_Base_SetConfig+0xaa>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2e      	ldr	r2, [pc, #184]	; (8004ef8 <TIM_Base_SetConfig+0x138>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <TIM_Base_SetConfig+0xaa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2d      	ldr	r2, [pc, #180]	; (8004efc <TIM_Base_SetConfig+0x13c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00f      	beq.n	8004e6a <TIM_Base_SetConfig+0xaa>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2d      	ldr	r2, [pc, #180]	; (8004f04 <TIM_Base_SetConfig+0x144>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <TIM_Base_SetConfig+0xaa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2c      	ldr	r2, [pc, #176]	; (8004f08 <TIM_Base_SetConfig+0x148>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d007      	beq.n	8004e6a <TIM_Base_SetConfig+0xaa>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2b      	ldr	r2, [pc, #172]	; (8004f0c <TIM_Base_SetConfig+0x14c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_Base_SetConfig+0xaa>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a26      	ldr	r2, [pc, #152]	; (8004f00 <TIM_Base_SetConfig+0x140>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a12      	ldr	r2, [pc, #72]	; (8004eec <TIM_Base_SetConfig+0x12c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d013      	beq.n	8004ed0 <TIM_Base_SetConfig+0x110>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a14      	ldr	r2, [pc, #80]	; (8004efc <TIM_Base_SetConfig+0x13c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00f      	beq.n	8004ed0 <TIM_Base_SetConfig+0x110>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <TIM_Base_SetConfig+0x144>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00b      	beq.n	8004ed0 <TIM_Base_SetConfig+0x110>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <TIM_Base_SetConfig+0x148>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <TIM_Base_SetConfig+0x110>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <TIM_Base_SetConfig+0x14c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0x110>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a0d      	ldr	r2, [pc, #52]	; (8004f00 <TIM_Base_SetConfig+0x140>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d103      	bne.n	8004ed8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	615a      	str	r2, [r3, #20]
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40013400 	.word	0x40013400
 8004f00:	40015000 	.word	0x40015000
 8004f04:	40014000 	.word	0x40014000
 8004f08:	40014400 	.word	0x40014400
 8004f0c:	40014800 	.word	0x40014800

08004f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e042      	b.n	8005034 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7fc f9cf 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2224      	movs	r2, #36	; 0x24
 8004fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0201 	bic.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f82e 	bl	8005040 <UART_SetConfig>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e022      	b.n	8005034 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 fa10 	bl	800641c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800500a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800501a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f001 fa97 	bl	8006560 <UART_CheckIdleState>
 8005032:	4603      	mov	r3, r0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	0000      	movs	r0, r0
	...

08005040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005040:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005044:	b08a      	sub	sp, #40	; 0x28
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	4313      	orrs	r3, r2
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	4313      	orrs	r3, r2
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4baa      	ldr	r3, [pc, #680]	; (8005328 <UART_SetConfig+0x2e8>)
 8005080:	4013      	ands	r3, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005088:	430b      	orrs	r3, r1
 800508a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a9f      	ldr	r2, [pc, #636]	; (800532c <UART_SetConfig+0x2ec>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b8:	4313      	orrs	r3, r2
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80050c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050d0:	430b      	orrs	r3, r1
 80050d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	f023 010f 	bic.w	r1, r3, #15
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a90      	ldr	r2, [pc, #576]	; (8005330 <UART_SetConfig+0x2f0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d126      	bne.n	8005142 <UART_SetConfig+0x102>
 80050f4:	4b8f      	ldr	r3, [pc, #572]	; (8005334 <UART_SetConfig+0x2f4>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d81a      	bhi.n	8005138 <UART_SetConfig+0xf8>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0xc8>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005119 	.word	0x08005119
 800510c:	08005129 	.word	0x08005129
 8005110:	08005121 	.word	0x08005121
 8005114:	08005131 	.word	0x08005131
 8005118:	2301      	movs	r3, #1
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511e:	e116      	b.n	800534e <UART_SetConfig+0x30e>
 8005120:	2302      	movs	r3, #2
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005126:	e112      	b.n	800534e <UART_SetConfig+0x30e>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512e:	e10e      	b.n	800534e <UART_SetConfig+0x30e>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e10a      	b.n	800534e <UART_SetConfig+0x30e>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513e:	bf00      	nop
 8005140:	e105      	b.n	800534e <UART_SetConfig+0x30e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a7c      	ldr	r2, [pc, #496]	; (8005338 <UART_SetConfig+0x2f8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d138      	bne.n	80051be <UART_SetConfig+0x17e>
 800514c:	4b79      	ldr	r3, [pc, #484]	; (8005334 <UART_SetConfig+0x2f4>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d82c      	bhi.n	80051b4 <UART_SetConfig+0x174>
 800515a:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <UART_SetConfig+0x120>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005195 	.word	0x08005195
 8005164:	080051b5 	.word	0x080051b5
 8005168:	080051b5 	.word	0x080051b5
 800516c:	080051b5 	.word	0x080051b5
 8005170:	080051a5 	.word	0x080051a5
 8005174:	080051b5 	.word	0x080051b5
 8005178:	080051b5 	.word	0x080051b5
 800517c:	080051b5 	.word	0x080051b5
 8005180:	0800519d 	.word	0x0800519d
 8005184:	080051b5 	.word	0x080051b5
 8005188:	080051b5 	.word	0x080051b5
 800518c:	080051b5 	.word	0x080051b5
 8005190:	080051ad 	.word	0x080051ad
 8005194:	2300      	movs	r3, #0
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519a:	e0d8      	b.n	800534e <UART_SetConfig+0x30e>
 800519c:	2302      	movs	r3, #2
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a2:	e0d4      	b.n	800534e <UART_SetConfig+0x30e>
 80051a4:	2304      	movs	r3, #4
 80051a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051aa:	e0d0      	b.n	800534e <UART_SetConfig+0x30e>
 80051ac:	2308      	movs	r3, #8
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b2:	e0cc      	b.n	800534e <UART_SetConfig+0x30e>
 80051b4:	2310      	movs	r3, #16
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ba:	bf00      	nop
 80051bc:	e0c7      	b.n	800534e <UART_SetConfig+0x30e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a5e      	ldr	r2, [pc, #376]	; (800533c <UART_SetConfig+0x2fc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d125      	bne.n	8005214 <UART_SetConfig+0x1d4>
 80051c8:	4b5a      	ldr	r3, [pc, #360]	; (8005334 <UART_SetConfig+0x2f4>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051d2:	2b10      	cmp	r3, #16
 80051d4:	d011      	beq.n	80051fa <UART_SetConfig+0x1ba>
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d802      	bhi.n	80051e0 <UART_SetConfig+0x1a0>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <UART_SetConfig+0x1aa>
 80051de:	e014      	b.n	800520a <UART_SetConfig+0x1ca>
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d006      	beq.n	80051f2 <UART_SetConfig+0x1b2>
 80051e4:	2b30      	cmp	r3, #48	; 0x30
 80051e6:	d00c      	beq.n	8005202 <UART_SetConfig+0x1c2>
 80051e8:	e00f      	b.n	800520a <UART_SetConfig+0x1ca>
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f0:	e0ad      	b.n	800534e <UART_SetConfig+0x30e>
 80051f2:	2302      	movs	r3, #2
 80051f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f8:	e0a9      	b.n	800534e <UART_SetConfig+0x30e>
 80051fa:	2304      	movs	r3, #4
 80051fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005200:	e0a5      	b.n	800534e <UART_SetConfig+0x30e>
 8005202:	2308      	movs	r3, #8
 8005204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005208:	e0a1      	b.n	800534e <UART_SetConfig+0x30e>
 800520a:	2310      	movs	r3, #16
 800520c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005210:	bf00      	nop
 8005212:	e09c      	b.n	800534e <UART_SetConfig+0x30e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a49      	ldr	r2, [pc, #292]	; (8005340 <UART_SetConfig+0x300>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d125      	bne.n	800526a <UART_SetConfig+0x22a>
 800521e:	4b45      	ldr	r3, [pc, #276]	; (8005334 <UART_SetConfig+0x2f4>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d011      	beq.n	8005250 <UART_SetConfig+0x210>
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d802      	bhi.n	8005236 <UART_SetConfig+0x1f6>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <UART_SetConfig+0x200>
 8005234:	e014      	b.n	8005260 <UART_SetConfig+0x220>
 8005236:	2b80      	cmp	r3, #128	; 0x80
 8005238:	d006      	beq.n	8005248 <UART_SetConfig+0x208>
 800523a:	2bc0      	cmp	r3, #192	; 0xc0
 800523c:	d00c      	beq.n	8005258 <UART_SetConfig+0x218>
 800523e:	e00f      	b.n	8005260 <UART_SetConfig+0x220>
 8005240:	2300      	movs	r3, #0
 8005242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005246:	e082      	b.n	800534e <UART_SetConfig+0x30e>
 8005248:	2302      	movs	r3, #2
 800524a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524e:	e07e      	b.n	800534e <UART_SetConfig+0x30e>
 8005250:	2304      	movs	r3, #4
 8005252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005256:	e07a      	b.n	800534e <UART_SetConfig+0x30e>
 8005258:	2308      	movs	r3, #8
 800525a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800525e:	e076      	b.n	800534e <UART_SetConfig+0x30e>
 8005260:	2310      	movs	r3, #16
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005266:	bf00      	nop
 8005268:	e071      	b.n	800534e <UART_SetConfig+0x30e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a35      	ldr	r2, [pc, #212]	; (8005344 <UART_SetConfig+0x304>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d129      	bne.n	80052c8 <UART_SetConfig+0x288>
 8005274:	4b2f      	ldr	r3, [pc, #188]	; (8005334 <UART_SetConfig+0x2f4>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005282:	d014      	beq.n	80052ae <UART_SetConfig+0x26e>
 8005284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005288:	d802      	bhi.n	8005290 <UART_SetConfig+0x250>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <UART_SetConfig+0x25e>
 800528e:	e016      	b.n	80052be <UART_SetConfig+0x27e>
 8005290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005294:	d007      	beq.n	80052a6 <UART_SetConfig+0x266>
 8005296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800529a:	d00c      	beq.n	80052b6 <UART_SetConfig+0x276>
 800529c:	e00f      	b.n	80052be <UART_SetConfig+0x27e>
 800529e:	2300      	movs	r3, #0
 80052a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a4:	e053      	b.n	800534e <UART_SetConfig+0x30e>
 80052a6:	2302      	movs	r3, #2
 80052a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ac:	e04f      	b.n	800534e <UART_SetConfig+0x30e>
 80052ae:	2304      	movs	r3, #4
 80052b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052b4:	e04b      	b.n	800534e <UART_SetConfig+0x30e>
 80052b6:	2308      	movs	r3, #8
 80052b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052bc:	e047      	b.n	800534e <UART_SetConfig+0x30e>
 80052be:	2310      	movs	r3, #16
 80052c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c4:	bf00      	nop
 80052c6:	e042      	b.n	800534e <UART_SetConfig+0x30e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a17      	ldr	r2, [pc, #92]	; (800532c <UART_SetConfig+0x2ec>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d13a      	bne.n	8005348 <UART_SetConfig+0x308>
 80052d2:	4b18      	ldr	r3, [pc, #96]	; (8005334 <UART_SetConfig+0x2f4>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e0:	d014      	beq.n	800530c <UART_SetConfig+0x2cc>
 80052e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e6:	d802      	bhi.n	80052ee <UART_SetConfig+0x2ae>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d007      	beq.n	80052fc <UART_SetConfig+0x2bc>
 80052ec:	e016      	b.n	800531c <UART_SetConfig+0x2dc>
 80052ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f2:	d007      	beq.n	8005304 <UART_SetConfig+0x2c4>
 80052f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f8:	d00c      	beq.n	8005314 <UART_SetConfig+0x2d4>
 80052fa:	e00f      	b.n	800531c <UART_SetConfig+0x2dc>
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005302:	e024      	b.n	800534e <UART_SetConfig+0x30e>
 8005304:	2302      	movs	r3, #2
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530a:	e020      	b.n	800534e <UART_SetConfig+0x30e>
 800530c:	2304      	movs	r3, #4
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005312:	e01c      	b.n	800534e <UART_SetConfig+0x30e>
 8005314:	2308      	movs	r3, #8
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531a:	e018      	b.n	800534e <UART_SetConfig+0x30e>
 800531c:	2310      	movs	r3, #16
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005322:	bf00      	nop
 8005324:	e013      	b.n	800534e <UART_SetConfig+0x30e>
 8005326:	bf00      	nop
 8005328:	cfff69f3 	.word	0xcfff69f3
 800532c:	40008000 	.word	0x40008000
 8005330:	40013800 	.word	0x40013800
 8005334:	40021000 	.word	0x40021000
 8005338:	40004400 	.word	0x40004400
 800533c:	40004800 	.word	0x40004800
 8005340:	40004c00 	.word	0x40004c00
 8005344:	40005000 	.word	0x40005000
 8005348:	2310      	movs	r3, #16
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a86      	ldr	r2, [pc, #536]	; (800556c <UART_SetConfig+0x52c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	f040 8422 	bne.w	8005b9e <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800535a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800535e:	2b08      	cmp	r3, #8
 8005360:	f200 8173 	bhi.w	800564a <UART_SetConfig+0x60a>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <UART_SetConfig+0x32c>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	08005391 	.word	0x08005391
 8005370:	0800564b 	.word	0x0800564b
 8005374:	08005433 	.word	0x08005433
 8005378:	0800564b 	.word	0x0800564b
 800537c:	080054cb 	.word	0x080054cb
 8005380:	0800564b 	.word	0x0800564b
 8005384:	0800564b 	.word	0x0800564b
 8005388:	0800564b 	.word	0x0800564b
 800538c:	0800559d 	.word	0x0800559d
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005390:	f7fd fe9c 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8005394:	4602      	mov	r2, r0
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b00      	cmp	r3, #0
 800539c:	d044      	beq.n	8005428 <UART_SetConfig+0x3e8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d03e      	beq.n	8005424 <UART_SetConfig+0x3e4>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d038      	beq.n	8005420 <UART_SetConfig+0x3e0>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d032      	beq.n	800541c <UART_SetConfig+0x3dc>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d02c      	beq.n	8005418 <UART_SetConfig+0x3d8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d026      	beq.n	8005414 <UART_SetConfig+0x3d4>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b06      	cmp	r3, #6
 80053cc:	d020      	beq.n	8005410 <UART_SetConfig+0x3d0>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b07      	cmp	r3, #7
 80053d4:	d01a      	beq.n	800540c <UART_SetConfig+0x3cc>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d014      	beq.n	8005408 <UART_SetConfig+0x3c8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b09      	cmp	r3, #9
 80053e4:	d00e      	beq.n	8005404 <UART_SetConfig+0x3c4>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	2b0a      	cmp	r3, #10
 80053ec:	d008      	beq.n	8005400 <UART_SetConfig+0x3c0>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	2b0b      	cmp	r3, #11
 80053f4:	d102      	bne.n	80053fc <UART_SetConfig+0x3bc>
 80053f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053fa:	e016      	b.n	800542a <UART_SetConfig+0x3ea>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e014      	b.n	800542a <UART_SetConfig+0x3ea>
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	e012      	b.n	800542a <UART_SetConfig+0x3ea>
 8005404:	2340      	movs	r3, #64	; 0x40
 8005406:	e010      	b.n	800542a <UART_SetConfig+0x3ea>
 8005408:	2320      	movs	r3, #32
 800540a:	e00e      	b.n	800542a <UART_SetConfig+0x3ea>
 800540c:	2310      	movs	r3, #16
 800540e:	e00c      	b.n	800542a <UART_SetConfig+0x3ea>
 8005410:	230c      	movs	r3, #12
 8005412:	e00a      	b.n	800542a <UART_SetConfig+0x3ea>
 8005414:	230a      	movs	r3, #10
 8005416:	e008      	b.n	800542a <UART_SetConfig+0x3ea>
 8005418:	2308      	movs	r3, #8
 800541a:	e006      	b.n	800542a <UART_SetConfig+0x3ea>
 800541c:	2306      	movs	r3, #6
 800541e:	e004      	b.n	800542a <UART_SetConfig+0x3ea>
 8005420:	2304      	movs	r3, #4
 8005422:	e002      	b.n	800542a <UART_SetConfig+0x3ea>
 8005424:	2302      	movs	r3, #2
 8005426:	e000      	b.n	800542a <UART_SetConfig+0x3ea>
 8005428:	2301      	movs	r3, #1
 800542a:	fbb2 f3f3 	udiv	r3, r2, r3
 800542e:	617b      	str	r3, [r7, #20]
        break;
 8005430:	e10e      	b.n	8005650 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d044      	beq.n	80054c4 <UART_SetConfig+0x484>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b01      	cmp	r3, #1
 8005440:	d03e      	beq.n	80054c0 <UART_SetConfig+0x480>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b02      	cmp	r3, #2
 8005448:	d038      	beq.n	80054bc <UART_SetConfig+0x47c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b03      	cmp	r3, #3
 8005450:	d032      	beq.n	80054b8 <UART_SetConfig+0x478>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b04      	cmp	r3, #4
 8005458:	d02c      	beq.n	80054b4 <UART_SetConfig+0x474>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b05      	cmp	r3, #5
 8005460:	d026      	beq.n	80054b0 <UART_SetConfig+0x470>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b06      	cmp	r3, #6
 8005468:	d020      	beq.n	80054ac <UART_SetConfig+0x46c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b07      	cmp	r3, #7
 8005470:	d01a      	beq.n	80054a8 <UART_SetConfig+0x468>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b08      	cmp	r3, #8
 8005478:	d014      	beq.n	80054a4 <UART_SetConfig+0x464>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b09      	cmp	r3, #9
 8005480:	d00e      	beq.n	80054a0 <UART_SetConfig+0x460>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b0a      	cmp	r3, #10
 8005488:	d008      	beq.n	800549c <UART_SetConfig+0x45c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b0b      	cmp	r3, #11
 8005490:	d102      	bne.n	8005498 <UART_SetConfig+0x458>
 8005492:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005496:	e016      	b.n	80054c6 <UART_SetConfig+0x486>
 8005498:	4b35      	ldr	r3, [pc, #212]	; (8005570 <UART_SetConfig+0x530>)
 800549a:	e014      	b.n	80054c6 <UART_SetConfig+0x486>
 800549c:	4b35      	ldr	r3, [pc, #212]	; (8005574 <UART_SetConfig+0x534>)
 800549e:	e012      	b.n	80054c6 <UART_SetConfig+0x486>
 80054a0:	4b35      	ldr	r3, [pc, #212]	; (8005578 <UART_SetConfig+0x538>)
 80054a2:	e010      	b.n	80054c6 <UART_SetConfig+0x486>
 80054a4:	4b35      	ldr	r3, [pc, #212]	; (800557c <UART_SetConfig+0x53c>)
 80054a6:	e00e      	b.n	80054c6 <UART_SetConfig+0x486>
 80054a8:	4b35      	ldr	r3, [pc, #212]	; (8005580 <UART_SetConfig+0x540>)
 80054aa:	e00c      	b.n	80054c6 <UART_SetConfig+0x486>
 80054ac:	4b35      	ldr	r3, [pc, #212]	; (8005584 <UART_SetConfig+0x544>)
 80054ae:	e00a      	b.n	80054c6 <UART_SetConfig+0x486>
 80054b0:	4b35      	ldr	r3, [pc, #212]	; (8005588 <UART_SetConfig+0x548>)
 80054b2:	e008      	b.n	80054c6 <UART_SetConfig+0x486>
 80054b4:	4b35      	ldr	r3, [pc, #212]	; (800558c <UART_SetConfig+0x54c>)
 80054b6:	e006      	b.n	80054c6 <UART_SetConfig+0x486>
 80054b8:	4b35      	ldr	r3, [pc, #212]	; (8005590 <UART_SetConfig+0x550>)
 80054ba:	e004      	b.n	80054c6 <UART_SetConfig+0x486>
 80054bc:	4b35      	ldr	r3, [pc, #212]	; (8005594 <UART_SetConfig+0x554>)
 80054be:	e002      	b.n	80054c6 <UART_SetConfig+0x486>
 80054c0:	4b35      	ldr	r3, [pc, #212]	; (8005598 <UART_SetConfig+0x558>)
 80054c2:	e000      	b.n	80054c6 <UART_SetConfig+0x486>
 80054c4:	4b2a      	ldr	r3, [pc, #168]	; (8005570 <UART_SetConfig+0x530>)
 80054c6:	617b      	str	r3, [r7, #20]
        break;
 80054c8:	e0c2      	b.n	8005650 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80054ca:	f7fd fd91 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 80054ce:	4602      	mov	r2, r0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d044      	beq.n	8005562 <UART_SetConfig+0x522>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d03e      	beq.n	800555e <UART_SetConfig+0x51e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d038      	beq.n	800555a <UART_SetConfig+0x51a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d032      	beq.n	8005556 <UART_SetConfig+0x516>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d02c      	beq.n	8005552 <UART_SetConfig+0x512>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	2b05      	cmp	r3, #5
 80054fe:	d026      	beq.n	800554e <UART_SetConfig+0x50e>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	2b06      	cmp	r3, #6
 8005506:	d020      	beq.n	800554a <UART_SetConfig+0x50a>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2b07      	cmp	r3, #7
 800550e:	d01a      	beq.n	8005546 <UART_SetConfig+0x506>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	2b08      	cmp	r3, #8
 8005516:	d014      	beq.n	8005542 <UART_SetConfig+0x502>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	2b09      	cmp	r3, #9
 800551e:	d00e      	beq.n	800553e <UART_SetConfig+0x4fe>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	2b0a      	cmp	r3, #10
 8005526:	d008      	beq.n	800553a <UART_SetConfig+0x4fa>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	2b0b      	cmp	r3, #11
 800552e:	d102      	bne.n	8005536 <UART_SetConfig+0x4f6>
 8005530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005534:	e016      	b.n	8005564 <UART_SetConfig+0x524>
 8005536:	2301      	movs	r3, #1
 8005538:	e014      	b.n	8005564 <UART_SetConfig+0x524>
 800553a:	2380      	movs	r3, #128	; 0x80
 800553c:	e012      	b.n	8005564 <UART_SetConfig+0x524>
 800553e:	2340      	movs	r3, #64	; 0x40
 8005540:	e010      	b.n	8005564 <UART_SetConfig+0x524>
 8005542:	2320      	movs	r3, #32
 8005544:	e00e      	b.n	8005564 <UART_SetConfig+0x524>
 8005546:	2310      	movs	r3, #16
 8005548:	e00c      	b.n	8005564 <UART_SetConfig+0x524>
 800554a:	230c      	movs	r3, #12
 800554c:	e00a      	b.n	8005564 <UART_SetConfig+0x524>
 800554e:	230a      	movs	r3, #10
 8005550:	e008      	b.n	8005564 <UART_SetConfig+0x524>
 8005552:	2308      	movs	r3, #8
 8005554:	e006      	b.n	8005564 <UART_SetConfig+0x524>
 8005556:	2306      	movs	r3, #6
 8005558:	e004      	b.n	8005564 <UART_SetConfig+0x524>
 800555a:	2304      	movs	r3, #4
 800555c:	e002      	b.n	8005564 <UART_SetConfig+0x524>
 800555e:	2302      	movs	r3, #2
 8005560:	e000      	b.n	8005564 <UART_SetConfig+0x524>
 8005562:	2301      	movs	r3, #1
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]
        break;
 800556a:	e071      	b.n	8005650 <UART_SetConfig+0x610>
 800556c:	40008000 	.word	0x40008000
 8005570:	00f42400 	.word	0x00f42400
 8005574:	0001e848 	.word	0x0001e848
 8005578:	0003d090 	.word	0x0003d090
 800557c:	0007a120 	.word	0x0007a120
 8005580:	000f4240 	.word	0x000f4240
 8005584:	00145855 	.word	0x00145855
 8005588:	00186a00 	.word	0x00186a00
 800558c:	001e8480 	.word	0x001e8480
 8005590:	0028b0aa 	.word	0x0028b0aa
 8005594:	003d0900 	.word	0x003d0900
 8005598:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d04e      	beq.n	8005642 <UART_SetConfig+0x602>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d047      	beq.n	800563c <UART_SetConfig+0x5fc>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d040      	beq.n	8005636 <UART_SetConfig+0x5f6>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d039      	beq.n	8005630 <UART_SetConfig+0x5f0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d032      	beq.n	800562a <UART_SetConfig+0x5ea>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	2b05      	cmp	r3, #5
 80055ca:	d02b      	beq.n	8005624 <UART_SetConfig+0x5e4>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	2b06      	cmp	r3, #6
 80055d2:	d024      	beq.n	800561e <UART_SetConfig+0x5de>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	2b07      	cmp	r3, #7
 80055da:	d01d      	beq.n	8005618 <UART_SetConfig+0x5d8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d016      	beq.n	8005612 <UART_SetConfig+0x5d2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	2b09      	cmp	r3, #9
 80055ea:	d00f      	beq.n	800560c <UART_SetConfig+0x5cc>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	2b0a      	cmp	r3, #10
 80055f2:	d008      	beq.n	8005606 <UART_SetConfig+0x5c6>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	2b0b      	cmp	r3, #11
 80055fa:	d101      	bne.n	8005600 <UART_SetConfig+0x5c0>
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	e022      	b.n	8005646 <UART_SetConfig+0x606>
 8005600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005604:	e01f      	b.n	8005646 <UART_SetConfig+0x606>
 8005606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800560a:	e01c      	b.n	8005646 <UART_SetConfig+0x606>
 800560c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005610:	e019      	b.n	8005646 <UART_SetConfig+0x606>
 8005612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005616:	e016      	b.n	8005646 <UART_SetConfig+0x606>
 8005618:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800561c:	e013      	b.n	8005646 <UART_SetConfig+0x606>
 800561e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005622:	e010      	b.n	8005646 <UART_SetConfig+0x606>
 8005624:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005628:	e00d      	b.n	8005646 <UART_SetConfig+0x606>
 800562a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800562e:	e00a      	b.n	8005646 <UART_SetConfig+0x606>
 8005630:	f241 5355 	movw	r3, #5461	; 0x1555
 8005634:	e007      	b.n	8005646 <UART_SetConfig+0x606>
 8005636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800563a:	e004      	b.n	8005646 <UART_SetConfig+0x606>
 800563c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005640:	e001      	b.n	8005646 <UART_SetConfig+0x606>
 8005642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005646:	617b      	str	r3, [r7, #20]
        break;
 8005648:	e002      	b.n	8005650 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	76fb      	strb	r3, [r7, #27]
        break;
 800564e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 86b7 	beq.w	80063c6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	4413      	add	r3, r2
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	429a      	cmp	r2, r3
 8005666:	d305      	bcc.n	8005674 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	429a      	cmp	r2, r3
 8005672:	d903      	bls.n	800567c <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	76fb      	strb	r3, [r7, #27]
 8005678:	f000 bea5 	b.w	80063c6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 800567c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005680:	2b08      	cmp	r3, #8
 8005682:	f200 8277 	bhi.w	8005b74 <UART_SetConfig+0xb34>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <UART_SetConfig+0x64c>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	080056b1 	.word	0x080056b1
 8005690:	08005b75 	.word	0x08005b75
 8005694:	080057ef 	.word	0x080057ef
 8005698:	08005b75 	.word	0x08005b75
 800569c:	080058e5 	.word	0x080058e5
 80056a0:	08005b75 	.word	0x08005b75
 80056a4:	08005b75 	.word	0x08005b75
 80056a8:	08005b75 	.word	0x08005b75
 80056ac:	08005a23 	.word	0x08005a23
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80056b0:	f7fd fd0c 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 80056b4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f04f 0100 	mov.w	r1, #0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d067      	beq.n	8005796 <UART_SetConfig+0x756>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d05e      	beq.n	800578c <UART_SetConfig+0x74c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d055      	beq.n	8005782 <UART_SetConfig+0x742>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d04c      	beq.n	8005778 <UART_SetConfig+0x738>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d043      	beq.n	800576e <UART_SetConfig+0x72e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b05      	cmp	r3, #5
 80056ec:	d03a      	beq.n	8005764 <UART_SetConfig+0x724>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d031      	beq.n	800575a <UART_SetConfig+0x71a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	2b07      	cmp	r3, #7
 80056fc:	d028      	beq.n	8005750 <UART_SetConfig+0x710>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	2b08      	cmp	r3, #8
 8005704:	d01f      	beq.n	8005746 <UART_SetConfig+0x706>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	2b09      	cmp	r3, #9
 800570c:	d016      	beq.n	800573c <UART_SetConfig+0x6fc>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b0a      	cmp	r3, #10
 8005714:	d00d      	beq.n	8005732 <UART_SetConfig+0x6f2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	2b0b      	cmp	r3, #11
 800571c:	d104      	bne.n	8005728 <UART_SetConfig+0x6e8>
 800571e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005722:	f04f 0400 	mov.w	r4, #0
 8005726:	e03a      	b.n	800579e <UART_SetConfig+0x75e>
 8005728:	f04f 0301 	mov.w	r3, #1
 800572c:	f04f 0400 	mov.w	r4, #0
 8005730:	e035      	b.n	800579e <UART_SetConfig+0x75e>
 8005732:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005736:	f04f 0400 	mov.w	r4, #0
 800573a:	e030      	b.n	800579e <UART_SetConfig+0x75e>
 800573c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005740:	f04f 0400 	mov.w	r4, #0
 8005744:	e02b      	b.n	800579e <UART_SetConfig+0x75e>
 8005746:	f04f 0320 	mov.w	r3, #32
 800574a:	f04f 0400 	mov.w	r4, #0
 800574e:	e026      	b.n	800579e <UART_SetConfig+0x75e>
 8005750:	f04f 0310 	mov.w	r3, #16
 8005754:	f04f 0400 	mov.w	r4, #0
 8005758:	e021      	b.n	800579e <UART_SetConfig+0x75e>
 800575a:	f04f 030c 	mov.w	r3, #12
 800575e:	f04f 0400 	mov.w	r4, #0
 8005762:	e01c      	b.n	800579e <UART_SetConfig+0x75e>
 8005764:	f04f 030a 	mov.w	r3, #10
 8005768:	f04f 0400 	mov.w	r4, #0
 800576c:	e017      	b.n	800579e <UART_SetConfig+0x75e>
 800576e:	f04f 0308 	mov.w	r3, #8
 8005772:	f04f 0400 	mov.w	r4, #0
 8005776:	e012      	b.n	800579e <UART_SetConfig+0x75e>
 8005778:	f04f 0306 	mov.w	r3, #6
 800577c:	f04f 0400 	mov.w	r4, #0
 8005780:	e00d      	b.n	800579e <UART_SetConfig+0x75e>
 8005782:	f04f 0304 	mov.w	r3, #4
 8005786:	f04f 0400 	mov.w	r4, #0
 800578a:	e008      	b.n	800579e <UART_SetConfig+0x75e>
 800578c:	f04f 0302 	mov.w	r3, #2
 8005790:	f04f 0400 	mov.w	r4, #0
 8005794:	e003      	b.n	800579e <UART_SetConfig+0x75e>
 8005796:	f04f 0301 	mov.w	r3, #1
 800579a:	f04f 0400 	mov.w	r4, #0
 800579e:	461a      	mov	r2, r3
 80057a0:	4623      	mov	r3, r4
 80057a2:	f7fa fd39 	bl	8000218 <__aeabi_uldivmod>
 80057a6:	4603      	mov	r3, r0
 80057a8:	460c      	mov	r4, r1
 80057aa:	4619      	mov	r1, r3
 80057ac:	4622      	mov	r2, r4
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	f04f 0400 	mov.w	r4, #0
 80057b6:	0214      	lsls	r4, r2, #8
 80057b8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80057bc:	020b      	lsls	r3, r1, #8
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6852      	ldr	r2, [r2, #4]
 80057c2:	0852      	lsrs	r2, r2, #1
 80057c4:	4611      	mov	r1, r2
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	eb13 0b01 	adds.w	fp, r3, r1
 80057ce:	eb44 0c02 	adc.w	ip, r4, r2
 80057d2:	4658      	mov	r0, fp
 80057d4:	4661      	mov	r1, ip
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f04f 0400 	mov.w	r4, #0
 80057de:	461a      	mov	r2, r3
 80057e0:	4623      	mov	r3, r4
 80057e2:	f7fa fd19 	bl	8000218 <__aeabi_uldivmod>
 80057e6:	4603      	mov	r3, r0
 80057e8:	460c      	mov	r4, r1
 80057ea:	61fb      	str	r3, [r7, #28]
            break;
 80057ec:	e1c5      	b.n	8005b7a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d05b      	beq.n	80058ae <UART_SetConfig+0x86e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d053      	beq.n	80058a6 <UART_SetConfig+0x866>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	2b02      	cmp	r3, #2
 8005804:	d04b      	beq.n	800589e <UART_SetConfig+0x85e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b03      	cmp	r3, #3
 800580c:	d043      	beq.n	8005896 <UART_SetConfig+0x856>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	2b04      	cmp	r3, #4
 8005814:	d03b      	beq.n	800588e <UART_SetConfig+0x84e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b05      	cmp	r3, #5
 800581c:	d033      	beq.n	8005886 <UART_SetConfig+0x846>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b06      	cmp	r3, #6
 8005824:	d02b      	beq.n	800587e <UART_SetConfig+0x83e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b07      	cmp	r3, #7
 800582c:	d023      	beq.n	8005876 <UART_SetConfig+0x836>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b08      	cmp	r3, #8
 8005834:	d01b      	beq.n	800586e <UART_SetConfig+0x82e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b09      	cmp	r3, #9
 800583c:	d013      	beq.n	8005866 <UART_SetConfig+0x826>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b0a      	cmp	r3, #10
 8005844:	d00b      	beq.n	800585e <UART_SetConfig+0x81e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b0b      	cmp	r3, #11
 800584c:	d103      	bne.n	8005856 <UART_SetConfig+0x816>
 800584e:	4bae      	ldr	r3, [pc, #696]	; (8005b08 <UART_SetConfig+0xac8>)
 8005850:	f04f 0400 	mov.w	r4, #0
 8005854:	e02e      	b.n	80058b4 <UART_SetConfig+0x874>
 8005856:	4bad      	ldr	r3, [pc, #692]	; (8005b0c <UART_SetConfig+0xacc>)
 8005858:	f04f 0400 	mov.w	r4, #0
 800585c:	e02a      	b.n	80058b4 <UART_SetConfig+0x874>
 800585e:	4bac      	ldr	r3, [pc, #688]	; (8005b10 <UART_SetConfig+0xad0>)
 8005860:	f04f 0400 	mov.w	r4, #0
 8005864:	e026      	b.n	80058b4 <UART_SetConfig+0x874>
 8005866:	4bab      	ldr	r3, [pc, #684]	; (8005b14 <UART_SetConfig+0xad4>)
 8005868:	f04f 0400 	mov.w	r4, #0
 800586c:	e022      	b.n	80058b4 <UART_SetConfig+0x874>
 800586e:	4baa      	ldr	r3, [pc, #680]	; (8005b18 <UART_SetConfig+0xad8>)
 8005870:	f04f 0400 	mov.w	r4, #0
 8005874:	e01e      	b.n	80058b4 <UART_SetConfig+0x874>
 8005876:	4ba9      	ldr	r3, [pc, #676]	; (8005b1c <UART_SetConfig+0xadc>)
 8005878:	f04f 0400 	mov.w	r4, #0
 800587c:	e01a      	b.n	80058b4 <UART_SetConfig+0x874>
 800587e:	a49e      	add	r4, pc, #632	; (adr r4, 8005af8 <UART_SetConfig+0xab8>)
 8005880:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005884:	e016      	b.n	80058b4 <UART_SetConfig+0x874>
 8005886:	4ba6      	ldr	r3, [pc, #664]	; (8005b20 <UART_SetConfig+0xae0>)
 8005888:	f04f 0400 	mov.w	r4, #0
 800588c:	e012      	b.n	80058b4 <UART_SetConfig+0x874>
 800588e:	4ba5      	ldr	r3, [pc, #660]	; (8005b24 <UART_SetConfig+0xae4>)
 8005890:	f04f 0400 	mov.w	r4, #0
 8005894:	e00e      	b.n	80058b4 <UART_SetConfig+0x874>
 8005896:	a49a      	add	r4, pc, #616	; (adr r4, 8005b00 <UART_SetConfig+0xac0>)
 8005898:	e9d4 3400 	ldrd	r3, r4, [r4]
 800589c:	e00a      	b.n	80058b4 <UART_SetConfig+0x874>
 800589e:	4ba2      	ldr	r3, [pc, #648]	; (8005b28 <UART_SetConfig+0xae8>)
 80058a0:	f04f 0400 	mov.w	r4, #0
 80058a4:	e006      	b.n	80058b4 <UART_SetConfig+0x874>
 80058a6:	4ba1      	ldr	r3, [pc, #644]	; (8005b2c <UART_SetConfig+0xaec>)
 80058a8:	f04f 0400 	mov.w	r4, #0
 80058ac:	e002      	b.n	80058b4 <UART_SetConfig+0x874>
 80058ae:	4b97      	ldr	r3, [pc, #604]	; (8005b0c <UART_SetConfig+0xacc>)
 80058b0:	f04f 0400 	mov.w	r4, #0
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6852      	ldr	r2, [r2, #4]
 80058b8:	0852      	lsrs	r2, r2, #1
 80058ba:	4611      	mov	r1, r2
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	eb13 0b01 	adds.w	fp, r3, r1
 80058c4:	eb44 0c02 	adc.w	ip, r4, r2
 80058c8:	4658      	mov	r0, fp
 80058ca:	4661      	mov	r1, ip
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f04f 0400 	mov.w	r4, #0
 80058d4:	461a      	mov	r2, r3
 80058d6:	4623      	mov	r3, r4
 80058d8:	f7fa fc9e 	bl	8000218 <__aeabi_uldivmod>
 80058dc:	4603      	mov	r3, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	61fb      	str	r3, [r7, #28]
            break;
 80058e2:	e14a      	b.n	8005b7a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80058e4:	f7fd fb84 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 80058e8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f04f 0100 	mov.w	r1, #0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d067      	beq.n	80059ca <UART_SetConfig+0x98a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d05e      	beq.n	80059c0 <UART_SetConfig+0x980>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b02      	cmp	r3, #2
 8005908:	d055      	beq.n	80059b6 <UART_SetConfig+0x976>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	2b03      	cmp	r3, #3
 8005910:	d04c      	beq.n	80059ac <UART_SetConfig+0x96c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2b04      	cmp	r3, #4
 8005918:	d043      	beq.n	80059a2 <UART_SetConfig+0x962>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b05      	cmp	r3, #5
 8005920:	d03a      	beq.n	8005998 <UART_SetConfig+0x958>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b06      	cmp	r3, #6
 8005928:	d031      	beq.n	800598e <UART_SetConfig+0x94e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b07      	cmp	r3, #7
 8005930:	d028      	beq.n	8005984 <UART_SetConfig+0x944>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	2b08      	cmp	r3, #8
 8005938:	d01f      	beq.n	800597a <UART_SetConfig+0x93a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	2b09      	cmp	r3, #9
 8005940:	d016      	beq.n	8005970 <UART_SetConfig+0x930>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	2b0a      	cmp	r3, #10
 8005948:	d00d      	beq.n	8005966 <UART_SetConfig+0x926>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	2b0b      	cmp	r3, #11
 8005950:	d104      	bne.n	800595c <UART_SetConfig+0x91c>
 8005952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005956:	f04f 0400 	mov.w	r4, #0
 800595a:	e03a      	b.n	80059d2 <UART_SetConfig+0x992>
 800595c:	f04f 0301 	mov.w	r3, #1
 8005960:	f04f 0400 	mov.w	r4, #0
 8005964:	e035      	b.n	80059d2 <UART_SetConfig+0x992>
 8005966:	f04f 0380 	mov.w	r3, #128	; 0x80
 800596a:	f04f 0400 	mov.w	r4, #0
 800596e:	e030      	b.n	80059d2 <UART_SetConfig+0x992>
 8005970:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005974:	f04f 0400 	mov.w	r4, #0
 8005978:	e02b      	b.n	80059d2 <UART_SetConfig+0x992>
 800597a:	f04f 0320 	mov.w	r3, #32
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	e026      	b.n	80059d2 <UART_SetConfig+0x992>
 8005984:	f04f 0310 	mov.w	r3, #16
 8005988:	f04f 0400 	mov.w	r4, #0
 800598c:	e021      	b.n	80059d2 <UART_SetConfig+0x992>
 800598e:	f04f 030c 	mov.w	r3, #12
 8005992:	f04f 0400 	mov.w	r4, #0
 8005996:	e01c      	b.n	80059d2 <UART_SetConfig+0x992>
 8005998:	f04f 030a 	mov.w	r3, #10
 800599c:	f04f 0400 	mov.w	r4, #0
 80059a0:	e017      	b.n	80059d2 <UART_SetConfig+0x992>
 80059a2:	f04f 0308 	mov.w	r3, #8
 80059a6:	f04f 0400 	mov.w	r4, #0
 80059aa:	e012      	b.n	80059d2 <UART_SetConfig+0x992>
 80059ac:	f04f 0306 	mov.w	r3, #6
 80059b0:	f04f 0400 	mov.w	r4, #0
 80059b4:	e00d      	b.n	80059d2 <UART_SetConfig+0x992>
 80059b6:	f04f 0304 	mov.w	r3, #4
 80059ba:	f04f 0400 	mov.w	r4, #0
 80059be:	e008      	b.n	80059d2 <UART_SetConfig+0x992>
 80059c0:	f04f 0302 	mov.w	r3, #2
 80059c4:	f04f 0400 	mov.w	r4, #0
 80059c8:	e003      	b.n	80059d2 <UART_SetConfig+0x992>
 80059ca:	f04f 0301 	mov.w	r3, #1
 80059ce:	f04f 0400 	mov.w	r4, #0
 80059d2:	461a      	mov	r2, r3
 80059d4:	4623      	mov	r3, r4
 80059d6:	f7fa fc1f 	bl	8000218 <__aeabi_uldivmod>
 80059da:	4603      	mov	r3, r0
 80059dc:	460c      	mov	r4, r1
 80059de:	4619      	mov	r1, r3
 80059e0:	4622      	mov	r2, r4
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	f04f 0400 	mov.w	r4, #0
 80059ea:	0214      	lsls	r4, r2, #8
 80059ec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80059f0:	020b      	lsls	r3, r1, #8
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6852      	ldr	r2, [r2, #4]
 80059f6:	0852      	lsrs	r2, r2, #1
 80059f8:	4611      	mov	r1, r2
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	eb13 0b01 	adds.w	fp, r3, r1
 8005a02:	eb44 0c02 	adc.w	ip, r4, r2
 8005a06:	4658      	mov	r0, fp
 8005a08:	4661      	mov	r1, ip
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f04f 0400 	mov.w	r4, #0
 8005a12:	461a      	mov	r2, r3
 8005a14:	4623      	mov	r3, r4
 8005a16:	f7fa fbff 	bl	8000218 <__aeabi_uldivmod>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	61fb      	str	r3, [r7, #28]
            break;
 8005a20:	e0ab      	b.n	8005b7a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8088 	beq.w	8005b3c <UART_SetConfig+0xafc>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d05b      	beq.n	8005aec <UART_SetConfig+0xaac>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d052      	beq.n	8005ae2 <UART_SetConfig+0xaa2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d04a      	beq.n	8005ada <UART_SetConfig+0xa9a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d041      	beq.n	8005ad0 <UART_SetConfig+0xa90>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	d039      	beq.n	8005ac8 <UART_SetConfig+0xa88>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	2b06      	cmp	r3, #6
 8005a5a:	d031      	beq.n	8005ac0 <UART_SetConfig+0xa80>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	2b07      	cmp	r3, #7
 8005a62:	d028      	beq.n	8005ab6 <UART_SetConfig+0xa76>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d01f      	beq.n	8005aac <UART_SetConfig+0xa6c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	2b09      	cmp	r3, #9
 8005a72:	d016      	beq.n	8005aa2 <UART_SetConfig+0xa62>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	2b0a      	cmp	r3, #10
 8005a7a:	d00d      	beq.n	8005a98 <UART_SetConfig+0xa58>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	2b0b      	cmp	r3, #11
 8005a82:	d104      	bne.n	8005a8e <UART_SetConfig+0xa4e>
 8005a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a88:	f04f 0400 	mov.w	r4, #0
 8005a8c:	e05a      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005a8e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005a92:	f04f 0400 	mov.w	r4, #0
 8005a96:	e055      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a9c:	f04f 0400 	mov.w	r4, #0
 8005aa0:	e050      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005aa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aa6:	f04f 0400 	mov.w	r4, #0
 8005aaa:	e04b      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005aac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ab0:	f04f 0400 	mov.w	r4, #0
 8005ab4:	e046      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005ab6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005aba:	f04f 0400 	mov.w	r4, #0
 8005abe:	e041      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005ac0:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <UART_SetConfig+0xaf0>)
 8005ac2:	f04f 0400 	mov.w	r4, #0
 8005ac6:	e03d      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005ac8:	4b1a      	ldr	r3, [pc, #104]	; (8005b34 <UART_SetConfig+0xaf4>)
 8005aca:	f04f 0400 	mov.w	r4, #0
 8005ace:	e039      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005ad0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ad4:	f04f 0400 	mov.w	r4, #0
 8005ad8:	e034      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005ada:	4b17      	ldr	r3, [pc, #92]	; (8005b38 <UART_SetConfig+0xaf8>)
 8005adc:	f04f 0400 	mov.w	r4, #0
 8005ae0:	e030      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005ae2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ae6:	f04f 0400 	mov.w	r4, #0
 8005aea:	e02b      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005aec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005af0:	f04f 0400 	mov.w	r4, #0
 8005af4:	e026      	b.n	8005b44 <UART_SetConfig+0xb04>
 8005af6:	bf00      	nop
 8005af8:	14585500 	.word	0x14585500
 8005afc:	00000000 	.word	0x00000000
 8005b00:	28b0aa00 	.word	0x28b0aa00
 8005b04:	00000000 	.word	0x00000000
 8005b08:	00f42400 	.word	0x00f42400
 8005b0c:	f4240000 	.word	0xf4240000
 8005b10:	01e84800 	.word	0x01e84800
 8005b14:	03d09000 	.word	0x03d09000
 8005b18:	07a12000 	.word	0x07a12000
 8005b1c:	0f424000 	.word	0x0f424000
 8005b20:	186a0000 	.word	0x186a0000
 8005b24:	1e848000 	.word	0x1e848000
 8005b28:	3d090000 	.word	0x3d090000
 8005b2c:	7a120000 	.word	0x7a120000
 8005b30:	000aaa00 	.word	0x000aaa00
 8005b34:	000ccc00 	.word	0x000ccc00
 8005b38:	00155500 	.word	0x00155500
 8005b3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b40:	f04f 0400 	mov.w	r4, #0
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6852      	ldr	r2, [r2, #4]
 8005b48:	0852      	lsrs	r2, r2, #1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	eb13 0b01 	adds.w	fp, r3, r1
 8005b54:	eb44 0c02 	adc.w	ip, r4, r2
 8005b58:	4658      	mov	r0, fp
 8005b5a:	4661      	mov	r1, ip
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f04f 0400 	mov.w	r4, #0
 8005b64:	461a      	mov	r2, r3
 8005b66:	4623      	mov	r3, r4
 8005b68:	f7fa fb56 	bl	8000218 <__aeabi_uldivmod>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	61fb      	str	r3, [r7, #28]
            break;
 8005b72:	e002      	b.n	8005b7a <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	76fb      	strb	r3, [r7, #27]
            break;
 8005b78:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b80:	d309      	bcc.n	8005b96 <UART_SetConfig+0xb56>
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b88:	d205      	bcs.n	8005b96 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	f000 bc18 	b.w	80063c6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	76fb      	strb	r3, [r7, #27]
 8005b9a:	f000 bc14 	b.w	80063c6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba6:	f040 8204 	bne.w	8005fb2 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8005baa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	f200 81df 	bhi.w	8005f72 <UART_SetConfig+0xf32>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <UART_SetConfig+0xb7c>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005be1 	.word	0x08005be1
 8005bc0:	08005c99 	.word	0x08005c99
 8005bc4:	08005d51 	.word	0x08005d51
 8005bc8:	08005f73 	.word	0x08005f73
 8005bcc:	08005df9 	.word	0x08005df9
 8005bd0:	08005f73 	.word	0x08005f73
 8005bd4:	08005f73 	.word	0x08005f73
 8005bd8:	08005f73 	.word	0x08005f73
 8005bdc:	08005eb1 	.word	0x08005eb1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7fd fa74 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8005be4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d044      	beq.n	8005c78 <UART_SetConfig+0xc38>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d03e      	beq.n	8005c74 <UART_SetConfig+0xc34>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d038      	beq.n	8005c70 <UART_SetConfig+0xc30>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d032      	beq.n	8005c6c <UART_SetConfig+0xc2c>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d02c      	beq.n	8005c68 <UART_SetConfig+0xc28>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2b05      	cmp	r3, #5
 8005c14:	d026      	beq.n	8005c64 <UART_SetConfig+0xc24>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d020      	beq.n	8005c60 <UART_SetConfig+0xc20>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	2b07      	cmp	r3, #7
 8005c24:	d01a      	beq.n	8005c5c <UART_SetConfig+0xc1c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d014      	beq.n	8005c58 <UART_SetConfig+0xc18>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2b09      	cmp	r3, #9
 8005c34:	d00e      	beq.n	8005c54 <UART_SetConfig+0xc14>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b0a      	cmp	r3, #10
 8005c3c:	d008      	beq.n	8005c50 <UART_SetConfig+0xc10>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b0b      	cmp	r3, #11
 8005c44:	d102      	bne.n	8005c4c <UART_SetConfig+0xc0c>
 8005c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c4a:	e016      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e014      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	e012      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c54:	2340      	movs	r3, #64	; 0x40
 8005c56:	e010      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c58:	2320      	movs	r3, #32
 8005c5a:	e00e      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	e00c      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c60:	230c      	movs	r3, #12
 8005c62:	e00a      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c64:	230a      	movs	r3, #10
 8005c66:	e008      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c68:	2308      	movs	r3, #8
 8005c6a:	e006      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c6c:	2306      	movs	r3, #6
 8005c6e:	e004      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c70:	2304      	movs	r3, #4
 8005c72:	e002      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e000      	b.n	8005c7a <UART_SetConfig+0xc3a>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	005a      	lsls	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	085b      	lsrs	r3, r3, #1
 8005c88:	441a      	add	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	61fb      	str	r3, [r7, #28]
        break;
 8005c96:	e16f      	b.n	8005f78 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c98:	f7fd fa2e 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 8005c9c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d044      	beq.n	8005d30 <UART_SetConfig+0xcf0>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d03e      	beq.n	8005d2c <UART_SetConfig+0xcec>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d038      	beq.n	8005d28 <UART_SetConfig+0xce8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d032      	beq.n	8005d24 <UART_SetConfig+0xce4>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d02c      	beq.n	8005d20 <UART_SetConfig+0xce0>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	d026      	beq.n	8005d1c <UART_SetConfig+0xcdc>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d020      	beq.n	8005d18 <UART_SetConfig+0xcd8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b07      	cmp	r3, #7
 8005cdc:	d01a      	beq.n	8005d14 <UART_SetConfig+0xcd4>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d014      	beq.n	8005d10 <UART_SetConfig+0xcd0>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b09      	cmp	r3, #9
 8005cec:	d00e      	beq.n	8005d0c <UART_SetConfig+0xccc>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b0a      	cmp	r3, #10
 8005cf4:	d008      	beq.n	8005d08 <UART_SetConfig+0xcc8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b0b      	cmp	r3, #11
 8005cfc:	d102      	bne.n	8005d04 <UART_SetConfig+0xcc4>
 8005cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d02:	e016      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e014      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d08:	2380      	movs	r3, #128	; 0x80
 8005d0a:	e012      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d0c:	2340      	movs	r3, #64	; 0x40
 8005d0e:	e010      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d10:	2320      	movs	r3, #32
 8005d12:	e00e      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d14:	2310      	movs	r3, #16
 8005d16:	e00c      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d18:	230c      	movs	r3, #12
 8005d1a:	e00a      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d1c:	230a      	movs	r3, #10
 8005d1e:	e008      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d20:	2308      	movs	r3, #8
 8005d22:	e006      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d24:	2306      	movs	r3, #6
 8005d26:	e004      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	e002      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e000      	b.n	8005d32 <UART_SetConfig+0xcf2>
 8005d30:	2301      	movs	r3, #1
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	005a      	lsls	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	441a      	add	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	61fb      	str	r3, [r7, #28]
        break;
 8005d4e:	e113      	b.n	8005f78 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d043      	beq.n	8005de0 <UART_SetConfig+0xda0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d03d      	beq.n	8005ddc <UART_SetConfig+0xd9c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d037      	beq.n	8005dd8 <UART_SetConfig+0xd98>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d031      	beq.n	8005dd4 <UART_SetConfig+0xd94>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d02b      	beq.n	8005dd0 <UART_SetConfig+0xd90>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	2b05      	cmp	r3, #5
 8005d7e:	d025      	beq.n	8005dcc <UART_SetConfig+0xd8c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b06      	cmp	r3, #6
 8005d86:	d01f      	beq.n	8005dc8 <UART_SetConfig+0xd88>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2b07      	cmp	r3, #7
 8005d8e:	d019      	beq.n	8005dc4 <UART_SetConfig+0xd84>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d013      	beq.n	8005dc0 <UART_SetConfig+0xd80>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	2b09      	cmp	r3, #9
 8005d9e:	d00d      	beq.n	8005dbc <UART_SetConfig+0xd7c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	2b0a      	cmp	r3, #10
 8005da6:	d007      	beq.n	8005db8 <UART_SetConfig+0xd78>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	2b0b      	cmp	r3, #11
 8005dae:	d101      	bne.n	8005db4 <UART_SetConfig+0xd74>
 8005db0:	4b8d      	ldr	r3, [pc, #564]	; (8005fe8 <UART_SetConfig+0xfa8>)
 8005db2:	e016      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005db4:	4b8d      	ldr	r3, [pc, #564]	; (8005fec <UART_SetConfig+0xfac>)
 8005db6:	e014      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005db8:	4b8d      	ldr	r3, [pc, #564]	; (8005ff0 <UART_SetConfig+0xfb0>)
 8005dba:	e012      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005dbc:	4b8d      	ldr	r3, [pc, #564]	; (8005ff4 <UART_SetConfig+0xfb4>)
 8005dbe:	e010      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005dc0:	4b8d      	ldr	r3, [pc, #564]	; (8005ff8 <UART_SetConfig+0xfb8>)
 8005dc2:	e00e      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005dc4:	4b8d      	ldr	r3, [pc, #564]	; (8005ffc <UART_SetConfig+0xfbc>)
 8005dc6:	e00c      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005dc8:	4b8d      	ldr	r3, [pc, #564]	; (8006000 <UART_SetConfig+0xfc0>)
 8005dca:	e00a      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005dcc:	4b8d      	ldr	r3, [pc, #564]	; (8006004 <UART_SetConfig+0xfc4>)
 8005dce:	e008      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005dd0:	4b8d      	ldr	r3, [pc, #564]	; (8006008 <UART_SetConfig+0xfc8>)
 8005dd2:	e006      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005dd4:	4b8d      	ldr	r3, [pc, #564]	; (800600c <UART_SetConfig+0xfcc>)
 8005dd6:	e004      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005dd8:	4b8d      	ldr	r3, [pc, #564]	; (8006010 <UART_SetConfig+0xfd0>)
 8005dda:	e002      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005ddc:	4b8d      	ldr	r3, [pc, #564]	; (8006014 <UART_SetConfig+0xfd4>)
 8005dde:	e000      	b.n	8005de2 <UART_SetConfig+0xda2>
 8005de0:	4b82      	ldr	r3, [pc, #520]	; (8005fec <UART_SetConfig+0xfac>)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6852      	ldr	r2, [r2, #4]
 8005de6:	0852      	lsrs	r2, r2, #1
 8005de8:	441a      	add	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	61fb      	str	r3, [r7, #28]
        break;
 8005df6:	e0bf      	b.n	8005f78 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df8:	f7fd f8fa 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8005dfc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d044      	beq.n	8005e90 <UART_SetConfig+0xe50>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d03e      	beq.n	8005e8c <UART_SetConfig+0xe4c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d038      	beq.n	8005e88 <UART_SetConfig+0xe48>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d032      	beq.n	8005e84 <UART_SetConfig+0xe44>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d02c      	beq.n	8005e80 <UART_SetConfig+0xe40>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	d026      	beq.n	8005e7c <UART_SetConfig+0xe3c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	2b06      	cmp	r3, #6
 8005e34:	d020      	beq.n	8005e78 <UART_SetConfig+0xe38>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	2b07      	cmp	r3, #7
 8005e3c:	d01a      	beq.n	8005e74 <UART_SetConfig+0xe34>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d014      	beq.n	8005e70 <UART_SetConfig+0xe30>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2b09      	cmp	r3, #9
 8005e4c:	d00e      	beq.n	8005e6c <UART_SetConfig+0xe2c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b0a      	cmp	r3, #10
 8005e54:	d008      	beq.n	8005e68 <UART_SetConfig+0xe28>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	2b0b      	cmp	r3, #11
 8005e5c:	d102      	bne.n	8005e64 <UART_SetConfig+0xe24>
 8005e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e62:	e016      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e014      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	e012      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e6c:	2340      	movs	r3, #64	; 0x40
 8005e6e:	e010      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e70:	2320      	movs	r3, #32
 8005e72:	e00e      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e74:	2310      	movs	r3, #16
 8005e76:	e00c      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e78:	230c      	movs	r3, #12
 8005e7a:	e00a      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e7c:	230a      	movs	r3, #10
 8005e7e:	e008      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e80:	2308      	movs	r3, #8
 8005e82:	e006      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e84:	2306      	movs	r3, #6
 8005e86:	e004      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	e002      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e000      	b.n	8005e92 <UART_SetConfig+0xe52>
 8005e90:	2301      	movs	r3, #1
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	005a      	lsls	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	441a      	add	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	61fb      	str	r3, [r7, #28]
        break;
 8005eae:	e063      	b.n	8005f78 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d04f      	beq.n	8005f58 <UART_SetConfig+0xf18>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d048      	beq.n	8005f52 <UART_SetConfig+0xf12>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d041      	beq.n	8005f4c <UART_SetConfig+0xf0c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d03a      	beq.n	8005f46 <UART_SetConfig+0xf06>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d033      	beq.n	8005f40 <UART_SetConfig+0xf00>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2b05      	cmp	r3, #5
 8005ede:	d02c      	beq.n	8005f3a <UART_SetConfig+0xefa>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	2b06      	cmp	r3, #6
 8005ee6:	d025      	beq.n	8005f34 <UART_SetConfig+0xef4>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	2b07      	cmp	r3, #7
 8005eee:	d01e      	beq.n	8005f2e <UART_SetConfig+0xeee>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d017      	beq.n	8005f28 <UART_SetConfig+0xee8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	2b09      	cmp	r3, #9
 8005efe:	d010      	beq.n	8005f22 <UART_SetConfig+0xee2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	2b0a      	cmp	r3, #10
 8005f06:	d009      	beq.n	8005f1c <UART_SetConfig+0xedc>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	2b0b      	cmp	r3, #11
 8005f0e:	d102      	bne.n	8005f16 <UART_SetConfig+0xed6>
 8005f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f14:	e022      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f1a:	e01f      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f20:	e01c      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f26:	e019      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f2c:	e016      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f32:	e013      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f34:	f241 5354 	movw	r3, #5460	; 0x1554
 8005f38:	e010      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f3a:	f641 1398 	movw	r3, #6552	; 0x1998
 8005f3e:	e00d      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f44:	e00a      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f46:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005f4a:	e007      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f50:	e004      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f56:	e001      	b.n	8005f5c <UART_SetConfig+0xf1c>
 8005f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6852      	ldr	r2, [r2, #4]
 8005f60:	0852      	lsrs	r2, r2, #1
 8005f62:	441a      	add	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	61fb      	str	r3, [r7, #28]
        break;
 8005f70:	e002      	b.n	8005f78 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	76fb      	strb	r3, [r7, #27]
        break;
 8005f76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b0f      	cmp	r3, #15
 8005f7c:	d916      	bls.n	8005fac <UART_SetConfig+0xf6c>
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f84:	d212      	bcs.n	8005fac <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f023 030f 	bic.w	r3, r3, #15
 8005f8e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	085b      	lsrs	r3, r3, #1
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	89fb      	ldrh	r3, [r7, #14]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	89fa      	ldrh	r2, [r7, #14]
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	e20c      	b.n	80063c6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	76fb      	strb	r3, [r7, #27]
 8005fb0:	e209      	b.n	80063c6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8005fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	f200 81f4 	bhi.w	80063a4 <UART_SetConfig+0x1364>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0xf84>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	080060cf 	.word	0x080060cf
 8005fcc:	08006185 	.word	0x08006185
 8005fd0:	080063a5 	.word	0x080063a5
 8005fd4:	0800622f 	.word	0x0800622f
 8005fd8:	080063a5 	.word	0x080063a5
 8005fdc:	080063a5 	.word	0x080063a5
 8005fe0:	080063a5 	.word	0x080063a5
 8005fe4:	080062e5 	.word	0x080062e5
 8005fe8:	0001e848 	.word	0x0001e848
 8005fec:	01e84800 	.word	0x01e84800
 8005ff0:	0003d090 	.word	0x0003d090
 8005ff4:	0007a120 	.word	0x0007a120
 8005ff8:	000f4240 	.word	0x000f4240
 8005ffc:	001e8480 	.word	0x001e8480
 8006000:	0028b0aa 	.word	0x0028b0aa
 8006004:	0030d400 	.word	0x0030d400
 8006008:	003d0900 	.word	0x003d0900
 800600c:	00516154 	.word	0x00516154
 8006010:	007a1200 	.word	0x007a1200
 8006014:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006018:	f7fd f858 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 800601c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	d044      	beq.n	80060b0 <UART_SetConfig+0x1070>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	2b01      	cmp	r3, #1
 800602c:	d03e      	beq.n	80060ac <UART_SetConfig+0x106c>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	2b02      	cmp	r3, #2
 8006034:	d038      	beq.n	80060a8 <UART_SetConfig+0x1068>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	2b03      	cmp	r3, #3
 800603c:	d032      	beq.n	80060a4 <UART_SetConfig+0x1064>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	2b04      	cmp	r3, #4
 8006044:	d02c      	beq.n	80060a0 <UART_SetConfig+0x1060>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	2b05      	cmp	r3, #5
 800604c:	d026      	beq.n	800609c <UART_SetConfig+0x105c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	2b06      	cmp	r3, #6
 8006054:	d020      	beq.n	8006098 <UART_SetConfig+0x1058>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	2b07      	cmp	r3, #7
 800605c:	d01a      	beq.n	8006094 <UART_SetConfig+0x1054>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b08      	cmp	r3, #8
 8006064:	d014      	beq.n	8006090 <UART_SetConfig+0x1050>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	2b09      	cmp	r3, #9
 800606c:	d00e      	beq.n	800608c <UART_SetConfig+0x104c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2b0a      	cmp	r3, #10
 8006074:	d008      	beq.n	8006088 <UART_SetConfig+0x1048>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b0b      	cmp	r3, #11
 800607c:	d102      	bne.n	8006084 <UART_SetConfig+0x1044>
 800607e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006082:	e016      	b.n	80060b2 <UART_SetConfig+0x1072>
 8006084:	2301      	movs	r3, #1
 8006086:	e014      	b.n	80060b2 <UART_SetConfig+0x1072>
 8006088:	2380      	movs	r3, #128	; 0x80
 800608a:	e012      	b.n	80060b2 <UART_SetConfig+0x1072>
 800608c:	2340      	movs	r3, #64	; 0x40
 800608e:	e010      	b.n	80060b2 <UART_SetConfig+0x1072>
 8006090:	2320      	movs	r3, #32
 8006092:	e00e      	b.n	80060b2 <UART_SetConfig+0x1072>
 8006094:	2310      	movs	r3, #16
 8006096:	e00c      	b.n	80060b2 <UART_SetConfig+0x1072>
 8006098:	230c      	movs	r3, #12
 800609a:	e00a      	b.n	80060b2 <UART_SetConfig+0x1072>
 800609c:	230a      	movs	r3, #10
 800609e:	e008      	b.n	80060b2 <UART_SetConfig+0x1072>
 80060a0:	2308      	movs	r3, #8
 80060a2:	e006      	b.n	80060b2 <UART_SetConfig+0x1072>
 80060a4:	2306      	movs	r3, #6
 80060a6:	e004      	b.n	80060b2 <UART_SetConfig+0x1072>
 80060a8:	2304      	movs	r3, #4
 80060aa:	e002      	b.n	80060b2 <UART_SetConfig+0x1072>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e000      	b.n	80060b2 <UART_SetConfig+0x1072>
 80060b0:	2301      	movs	r3, #1
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	441a      	add	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	61fb      	str	r3, [r7, #28]
        break;
 80060cc:	e16d      	b.n	80063aa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ce:	f7fd f813 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 80060d2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d044      	beq.n	8006166 <UART_SetConfig+0x1126>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d03e      	beq.n	8006162 <UART_SetConfig+0x1122>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d038      	beq.n	800615e <UART_SetConfig+0x111e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d032      	beq.n	800615a <UART_SetConfig+0x111a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d02c      	beq.n	8006156 <UART_SetConfig+0x1116>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b05      	cmp	r3, #5
 8006102:	d026      	beq.n	8006152 <UART_SetConfig+0x1112>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	2b06      	cmp	r3, #6
 800610a:	d020      	beq.n	800614e <UART_SetConfig+0x110e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	2b07      	cmp	r3, #7
 8006112:	d01a      	beq.n	800614a <UART_SetConfig+0x110a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b08      	cmp	r3, #8
 800611a:	d014      	beq.n	8006146 <UART_SetConfig+0x1106>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2b09      	cmp	r3, #9
 8006122:	d00e      	beq.n	8006142 <UART_SetConfig+0x1102>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	2b0a      	cmp	r3, #10
 800612a:	d008      	beq.n	800613e <UART_SetConfig+0x10fe>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	2b0b      	cmp	r3, #11
 8006132:	d102      	bne.n	800613a <UART_SetConfig+0x10fa>
 8006134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006138:	e016      	b.n	8006168 <UART_SetConfig+0x1128>
 800613a:	2301      	movs	r3, #1
 800613c:	e014      	b.n	8006168 <UART_SetConfig+0x1128>
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	e012      	b.n	8006168 <UART_SetConfig+0x1128>
 8006142:	2340      	movs	r3, #64	; 0x40
 8006144:	e010      	b.n	8006168 <UART_SetConfig+0x1128>
 8006146:	2320      	movs	r3, #32
 8006148:	e00e      	b.n	8006168 <UART_SetConfig+0x1128>
 800614a:	2310      	movs	r3, #16
 800614c:	e00c      	b.n	8006168 <UART_SetConfig+0x1128>
 800614e:	230c      	movs	r3, #12
 8006150:	e00a      	b.n	8006168 <UART_SetConfig+0x1128>
 8006152:	230a      	movs	r3, #10
 8006154:	e008      	b.n	8006168 <UART_SetConfig+0x1128>
 8006156:	2308      	movs	r3, #8
 8006158:	e006      	b.n	8006168 <UART_SetConfig+0x1128>
 800615a:	2306      	movs	r3, #6
 800615c:	e004      	b.n	8006168 <UART_SetConfig+0x1128>
 800615e:	2304      	movs	r3, #4
 8006160:	e002      	b.n	8006168 <UART_SetConfig+0x1128>
 8006162:	2302      	movs	r3, #2
 8006164:	e000      	b.n	8006168 <UART_SetConfig+0x1128>
 8006166:	2301      	movs	r3, #1
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	fbb2 f2f3 	udiv	r2, r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	085b      	lsrs	r3, r3, #1
 8006174:	441a      	add	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	fbb2 f3f3 	udiv	r3, r2, r3
 800617e:	b29b      	uxth	r3, r3
 8006180:	61fb      	str	r3, [r7, #28]
        break;
 8006182:	e112      	b.n	80063aa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	d044      	beq.n	8006216 <UART_SetConfig+0x11d6>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	2b01      	cmp	r3, #1
 8006192:	d03e      	beq.n	8006212 <UART_SetConfig+0x11d2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b02      	cmp	r3, #2
 800619a:	d038      	beq.n	800620e <UART_SetConfig+0x11ce>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d032      	beq.n	800620a <UART_SetConfig+0x11ca>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d02c      	beq.n	8006206 <UART_SetConfig+0x11c6>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	d026      	beq.n	8006202 <UART_SetConfig+0x11c2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b06      	cmp	r3, #6
 80061ba:	d020      	beq.n	80061fe <UART_SetConfig+0x11be>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	2b07      	cmp	r3, #7
 80061c2:	d01a      	beq.n	80061fa <UART_SetConfig+0x11ba>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d014      	beq.n	80061f6 <UART_SetConfig+0x11b6>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b09      	cmp	r3, #9
 80061d2:	d00e      	beq.n	80061f2 <UART_SetConfig+0x11b2>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	2b0a      	cmp	r3, #10
 80061da:	d008      	beq.n	80061ee <UART_SetConfig+0x11ae>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	2b0b      	cmp	r3, #11
 80061e2:	d102      	bne.n	80061ea <UART_SetConfig+0x11aa>
 80061e4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80061e8:	e016      	b.n	8006218 <UART_SetConfig+0x11d8>
 80061ea:	4b81      	ldr	r3, [pc, #516]	; (80063f0 <UART_SetConfig+0x13b0>)
 80061ec:	e014      	b.n	8006218 <UART_SetConfig+0x11d8>
 80061ee:	4b81      	ldr	r3, [pc, #516]	; (80063f4 <UART_SetConfig+0x13b4>)
 80061f0:	e012      	b.n	8006218 <UART_SetConfig+0x11d8>
 80061f2:	4b81      	ldr	r3, [pc, #516]	; (80063f8 <UART_SetConfig+0x13b8>)
 80061f4:	e010      	b.n	8006218 <UART_SetConfig+0x11d8>
 80061f6:	4b81      	ldr	r3, [pc, #516]	; (80063fc <UART_SetConfig+0x13bc>)
 80061f8:	e00e      	b.n	8006218 <UART_SetConfig+0x11d8>
 80061fa:	4b81      	ldr	r3, [pc, #516]	; (8006400 <UART_SetConfig+0x13c0>)
 80061fc:	e00c      	b.n	8006218 <UART_SetConfig+0x11d8>
 80061fe:	4b81      	ldr	r3, [pc, #516]	; (8006404 <UART_SetConfig+0x13c4>)
 8006200:	e00a      	b.n	8006218 <UART_SetConfig+0x11d8>
 8006202:	4b81      	ldr	r3, [pc, #516]	; (8006408 <UART_SetConfig+0x13c8>)
 8006204:	e008      	b.n	8006218 <UART_SetConfig+0x11d8>
 8006206:	4b81      	ldr	r3, [pc, #516]	; (800640c <UART_SetConfig+0x13cc>)
 8006208:	e006      	b.n	8006218 <UART_SetConfig+0x11d8>
 800620a:	4b81      	ldr	r3, [pc, #516]	; (8006410 <UART_SetConfig+0x13d0>)
 800620c:	e004      	b.n	8006218 <UART_SetConfig+0x11d8>
 800620e:	4b81      	ldr	r3, [pc, #516]	; (8006414 <UART_SetConfig+0x13d4>)
 8006210:	e002      	b.n	8006218 <UART_SetConfig+0x11d8>
 8006212:	4b81      	ldr	r3, [pc, #516]	; (8006418 <UART_SetConfig+0x13d8>)
 8006214:	e000      	b.n	8006218 <UART_SetConfig+0x11d8>
 8006216:	4b76      	ldr	r3, [pc, #472]	; (80063f0 <UART_SetConfig+0x13b0>)
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6852      	ldr	r2, [r2, #4]
 800621c:	0852      	lsrs	r2, r2, #1
 800621e:	441a      	add	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	b29b      	uxth	r3, r3
 800622a:	61fb      	str	r3, [r7, #28]
        break;
 800622c:	e0bd      	b.n	80063aa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800622e:	f7fc fedf 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8006232:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	2b00      	cmp	r3, #0
 800623a:	d044      	beq.n	80062c6 <UART_SetConfig+0x1286>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2b01      	cmp	r3, #1
 8006242:	d03e      	beq.n	80062c2 <UART_SetConfig+0x1282>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b02      	cmp	r3, #2
 800624a:	d038      	beq.n	80062be <UART_SetConfig+0x127e>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	2b03      	cmp	r3, #3
 8006252:	d032      	beq.n	80062ba <UART_SetConfig+0x127a>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	2b04      	cmp	r3, #4
 800625a:	d02c      	beq.n	80062b6 <UART_SetConfig+0x1276>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b05      	cmp	r3, #5
 8006262:	d026      	beq.n	80062b2 <UART_SetConfig+0x1272>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	2b06      	cmp	r3, #6
 800626a:	d020      	beq.n	80062ae <UART_SetConfig+0x126e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	2b07      	cmp	r3, #7
 8006272:	d01a      	beq.n	80062aa <UART_SetConfig+0x126a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	2b08      	cmp	r3, #8
 800627a:	d014      	beq.n	80062a6 <UART_SetConfig+0x1266>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2b09      	cmp	r3, #9
 8006282:	d00e      	beq.n	80062a2 <UART_SetConfig+0x1262>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	2b0a      	cmp	r3, #10
 800628a:	d008      	beq.n	800629e <UART_SetConfig+0x125e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b0b      	cmp	r3, #11
 8006292:	d102      	bne.n	800629a <UART_SetConfig+0x125a>
 8006294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006298:	e016      	b.n	80062c8 <UART_SetConfig+0x1288>
 800629a:	2301      	movs	r3, #1
 800629c:	e014      	b.n	80062c8 <UART_SetConfig+0x1288>
 800629e:	2380      	movs	r3, #128	; 0x80
 80062a0:	e012      	b.n	80062c8 <UART_SetConfig+0x1288>
 80062a2:	2340      	movs	r3, #64	; 0x40
 80062a4:	e010      	b.n	80062c8 <UART_SetConfig+0x1288>
 80062a6:	2320      	movs	r3, #32
 80062a8:	e00e      	b.n	80062c8 <UART_SetConfig+0x1288>
 80062aa:	2310      	movs	r3, #16
 80062ac:	e00c      	b.n	80062c8 <UART_SetConfig+0x1288>
 80062ae:	230c      	movs	r3, #12
 80062b0:	e00a      	b.n	80062c8 <UART_SetConfig+0x1288>
 80062b2:	230a      	movs	r3, #10
 80062b4:	e008      	b.n	80062c8 <UART_SetConfig+0x1288>
 80062b6:	2308      	movs	r3, #8
 80062b8:	e006      	b.n	80062c8 <UART_SetConfig+0x1288>
 80062ba:	2306      	movs	r3, #6
 80062bc:	e004      	b.n	80062c8 <UART_SetConfig+0x1288>
 80062be:	2304      	movs	r3, #4
 80062c0:	e002      	b.n	80062c8 <UART_SetConfig+0x1288>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e000      	b.n	80062c8 <UART_SetConfig+0x1288>
 80062c6:	2301      	movs	r3, #1
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	441a      	add	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	fbb2 f3f3 	udiv	r3, r2, r3
 80062de:	b29b      	uxth	r3, r3
 80062e0:	61fb      	str	r3, [r7, #28]
        break;
 80062e2:	e062      	b.n	80063aa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d04e      	beq.n	800638a <UART_SetConfig+0x134a>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d047      	beq.n	8006384 <UART_SetConfig+0x1344>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d040      	beq.n	800637e <UART_SetConfig+0x133e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	2b03      	cmp	r3, #3
 8006302:	d039      	beq.n	8006378 <UART_SetConfig+0x1338>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	2b04      	cmp	r3, #4
 800630a:	d032      	beq.n	8006372 <UART_SetConfig+0x1332>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	2b05      	cmp	r3, #5
 8006312:	d02b      	beq.n	800636c <UART_SetConfig+0x132c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	2b06      	cmp	r3, #6
 800631a:	d024      	beq.n	8006366 <UART_SetConfig+0x1326>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b07      	cmp	r3, #7
 8006322:	d01d      	beq.n	8006360 <UART_SetConfig+0x1320>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	2b08      	cmp	r3, #8
 800632a:	d016      	beq.n	800635a <UART_SetConfig+0x131a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	2b09      	cmp	r3, #9
 8006332:	d00f      	beq.n	8006354 <UART_SetConfig+0x1314>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	2b0a      	cmp	r3, #10
 800633a:	d008      	beq.n	800634e <UART_SetConfig+0x130e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	2b0b      	cmp	r3, #11
 8006342:	d101      	bne.n	8006348 <UART_SetConfig+0x1308>
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	e022      	b.n	800638e <UART_SetConfig+0x134e>
 8006348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634c:	e01f      	b.n	800638e <UART_SetConfig+0x134e>
 800634e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006352:	e01c      	b.n	800638e <UART_SetConfig+0x134e>
 8006354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006358:	e019      	b.n	800638e <UART_SetConfig+0x134e>
 800635a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800635e:	e016      	b.n	800638e <UART_SetConfig+0x134e>
 8006360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006364:	e013      	b.n	800638e <UART_SetConfig+0x134e>
 8006366:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800636a:	e010      	b.n	800638e <UART_SetConfig+0x134e>
 800636c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006370:	e00d      	b.n	800638e <UART_SetConfig+0x134e>
 8006372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006376:	e00a      	b.n	800638e <UART_SetConfig+0x134e>
 8006378:	f241 5355 	movw	r3, #5461	; 0x1555
 800637c:	e007      	b.n	800638e <UART_SetConfig+0x134e>
 800637e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006382:	e004      	b.n	800638e <UART_SetConfig+0x134e>
 8006384:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006388:	e001      	b.n	800638e <UART_SetConfig+0x134e>
 800638a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6852      	ldr	r2, [r2, #4]
 8006392:	0852      	lsrs	r2, r2, #1
 8006394:	441a      	add	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	fbb2 f3f3 	udiv	r3, r2, r3
 800639e:	b29b      	uxth	r3, r3
 80063a0:	61fb      	str	r3, [r7, #28]
        break;
 80063a2:	e002      	b.n	80063aa <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	76fb      	strb	r3, [r7, #27]
        break;
 80063a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	2b0f      	cmp	r3, #15
 80063ae:	d908      	bls.n	80063c2 <UART_SetConfig+0x1382>
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b6:	d204      	bcs.n	80063c2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	60da      	str	r2, [r3, #12]
 80063c0:	e001      	b.n	80063c6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80063e2:	7efb      	ldrb	r3, [r7, #27]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3728      	adds	r7, #40	; 0x28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80063ee:	bf00      	nop
 80063f0:	00f42400 	.word	0x00f42400
 80063f4:	0001e848 	.word	0x0001e848
 80063f8:	0003d090 	.word	0x0003d090
 80063fc:	0007a120 	.word	0x0007a120
 8006400:	000f4240 	.word	0x000f4240
 8006404:	00145855 	.word	0x00145855
 8006408:	00186a00 	.word	0x00186a00
 800640c:	001e8480 	.word	0x001e8480
 8006410:	0028b0aa 	.word	0x0028b0aa
 8006414:	003d0900 	.word	0x003d0900
 8006418:	007a1200 	.word	0x007a1200

0800641c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01a      	beq.n	8006532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800651a:	d10a      	bne.n	8006532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	605a      	str	r2, [r3, #4]
  }
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af02      	add	r7, sp, #8
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006570:	f7fa ffc8 	bl	8001504 <HAL_GetTick>
 8006574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b08      	cmp	r3, #8
 8006582:	d10e      	bne.n	80065a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f82c 	bl	80065f0 <UART_WaitOnFlagUntilTimeout>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e022      	b.n	80065e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	d10e      	bne.n	80065ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f816 	bl	80065f0 <UART_WaitOnFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e00c      	b.n	80065e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	4613      	mov	r3, r2
 80065fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006600:	e02c      	b.n	800665c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006608:	d028      	beq.n	800665c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800660a:	f7fa ff7b 	bl	8001504 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <UART_WaitOnFlagUntilTimeout+0x30>
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d11d      	bne.n	800665c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800662e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0201 	bic.w	r2, r2, #1
 800663e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e00f      	b.n	800667c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4013      	ands	r3, r2
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	bf0c      	ite	eq
 800666c:	2301      	moveq	r3, #1
 800666e:	2300      	movne	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	429a      	cmp	r2, r3
 8006678:	d0c3      	beq.n	8006602 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_UARTEx_DisableFifoMode+0x16>
 8006696:	2302      	movs	r3, #2
 8006698:	e027      	b.n	80066ea <HAL_UARTEx_DisableFifoMode+0x66>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2224      	movs	r2, #36	; 0x24
 80066a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0201 	bic.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006706:	2b01      	cmp	r3, #1
 8006708:	d101      	bne.n	800670e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800670a:	2302      	movs	r3, #2
 800670c:	e02d      	b.n	800676a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2224      	movs	r2, #36	; 0x24
 800671a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f850 	bl	80067f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006786:	2302      	movs	r3, #2
 8006788:	e02d      	b.n	80067e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2224      	movs	r2, #36	; 0x24
 8006796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0201 	bic.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f812 	bl	80067f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b089      	sub	sp, #36	; 0x24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80067f8:	4a2f      	ldr	r2, [pc, #188]	; (80068b8 <UARTEx_SetNbDataToProcess+0xc8>)
 80067fa:	f107 0314 	add.w	r3, r7, #20
 80067fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006802:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006806:	4a2d      	ldr	r2, [pc, #180]	; (80068bc <UARTEx_SetNbDataToProcess+0xcc>)
 8006808:	f107 030c 	add.w	r3, r7, #12
 800680c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006810:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006818:	2b00      	cmp	r3, #0
 800681a:	d108      	bne.n	800682e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800682c:	e03d      	b.n	80068aa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800682e:	2308      	movs	r3, #8
 8006830:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006832:	2308      	movs	r3, #8
 8006834:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	0e5b      	lsrs	r3, r3, #25
 800683e:	b2db      	uxtb	r3, r3
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	0f5b      	lsrs	r3, r3, #29
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006856:	7fbb      	ldrb	r3, [r7, #30]
 8006858:	7f3a      	ldrb	r2, [r7, #28]
 800685a:	f107 0120 	add.w	r1, r7, #32
 800685e:	440a      	add	r2, r1
 8006860:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006864:	fb02 f303 	mul.w	r3, r2, r3
 8006868:	7f3a      	ldrb	r2, [r7, #28]
 800686a:	f107 0120 	add.w	r1, r7, #32
 800686e:	440a      	add	r2, r1
 8006870:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006874:	fb93 f3f2 	sdiv	r3, r3, r2
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006880:	7ffb      	ldrb	r3, [r7, #31]
 8006882:	7f7a      	ldrb	r2, [r7, #29]
 8006884:	f107 0120 	add.w	r1, r7, #32
 8006888:	440a      	add	r2, r1
 800688a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	7f7a      	ldrb	r2, [r7, #29]
 8006894:	f107 0120 	add.w	r1, r7, #32
 8006898:	440a      	add	r2, r1
 800689a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800689e:	fb93 f3f2 	sdiv	r3, r3, r2
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80068aa:	bf00      	nop
 80068ac:	3724      	adds	r7, #36	; 0x24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	0800b890 	.word	0x0800b890
 80068bc:	0800b898 	.word	0x0800b898

080068c0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
 
if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80068c4:	4907      	ldr	r1, [pc, #28]	; (80068e4 <MX_FATFS_Init+0x24>)
 80068c6:	4808      	ldr	r0, [pc, #32]	; (80068e8 <MX_FATFS_Init+0x28>)
 80068c8:	f004 fece 	bl	800b668 <FATFS_LinkDriver>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80068d2:	f04f 33ff 	mov.w	r3, #4294967295
 80068d6:	e003      	b.n	80068e0 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <MX_FATFS_Init+0x2c>)
 80068da:	2201      	movs	r2, #1
 80068dc:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80068de:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000820 	.word	0x20000820
 80068e8:	20000010 	.word	0x20000010
 80068ec:	20000224 	.word	0x20000224

080068f0 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80068f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <MY_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t MY_SD_Init(uint32_t Instance)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <MY_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006912:	f06f 0301 	mvn.w	r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e010      	b.n	800693c <MY_SD_Init+0x3c>
  } /* Configure IO functionalities for SD pin */
  else if(SD_IO_Init() != BSP_ERROR_NONE)
 800691a:	f000 fa9b 	bl	8006e54 <SD_IO_Init>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <MY_SD_Init+0x2c>
  {
    ret = BSP_ERROR_NO_INIT;
 8006924:	f04f 33ff 	mov.w	r3, #4294967295
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	e007      	b.n	800693c <MY_SD_Init+0x3c>
  }
  else
  {
    /* SD initialized and set to SPI mode properly */
    if(SD_GoIdleState() != BSP_ERROR_NONE)
 800692c:	f000 ff74 	bl	8007818 <SD_GoIdleState>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <MY_SD_Init+0x3c>
    {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006936:	f06f 0305 	mvn.w	r3, #5
 800693a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800693c:	68fb      	ldr	r3, [r7, #12]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <MY_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t MY_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006956:	2300      	movs	r3, #0
 8006958:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <MY_SD_ReadBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006964:	f06f 0301 	mvn.w	r3, #1
 8006968:	61fb      	str	r3, [r7, #28]
 800696a:	e0b2      	b.n	8006ad2 <MY_SD_ReadBlocks+0x18a>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800696c:	2300      	movs	r3, #0
 800696e:	22ff      	movs	r2, #255	; 0xff
 8006970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006974:	2010      	movs	r0, #16
 8006976:	f000 fdd1 	bl	800751c <SD_SendCmd>
 800697a:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 800697c:	2001      	movs	r0, #1
 800697e:	f000 fab5 	bl	8006eec <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006982:	f107 0313 	add.w	r3, r7, #19
 8006986:	2101      	movs	r1, #1
 8006988:	4618      	mov	r0, r3
 800698a:	f001 f915 	bl	8007bb8 <BSP_SPI2_Send>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <MY_SD_ReadBlocks+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006994:	f06f 0303 	mvn.w	r3, #3
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e09a      	b.n	8006ad2 <MY_SD_ReadBlocks+0x18a>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00e      	beq.n	80069c2 <MY_SD_ReadBlocks+0x7a>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 80069a4:	2001      	movs	r0, #1
 80069a6:	f000 faa1 	bl	8006eec <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80069aa:	f107 0313 	add.w	r3, r7, #19
 80069ae:	2101      	movs	r1, #1
 80069b0:	4618      	mov	r0, r3
 80069b2:	f001 f901 	bl	8007bb8 <BSP_SPI2_Send>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <MY_SD_ReadBlocks+0x7a>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80069bc:	f06f 0303 	mvn.w	r3, #3
 80069c0:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f040 8084 	bne.w	8006ad2 <MY_SD_ReadBlocks+0x18a>
        /* Data transfer */
        do
        {
          /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
          /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U: MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	441a      	add	r2, r3
 80069d0:	4b42      	ldr	r3, [pc, #264]	; (8006adc <MY_SD_ReadBlocks+0x194>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <MY_SD_ReadBlocks+0x94>
 80069d8:	2301      	movs	r3, #1
 80069da:	e001      	b.n	80069e0 <MY_SD_ReadBlocks+0x98>
 80069dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e0:	fb02 f103 	mul.w	r1, r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	22ff      	movs	r2, #255	; 0xff
 80069e8:	2011      	movs	r0, #17
 80069ea:	f000 fd97 	bl	800751c <SD_SendCmd>
 80069ee:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00f      	beq.n	8006a18 <MY_SD_ReadBlocks+0xd0>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 80069f8:	2001      	movs	r0, #1
 80069fa:	f000 fa77 	bl	8006eec <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80069fe:	f107 0313 	add.w	r3, r7, #19
 8006a02:	2101      	movs	r1, #1
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 f8d7 	bl	8007bb8 <BSP_SPI2_Send>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <MY_SD_ReadBlocks+0xd0>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006a10:	f06f 0303 	mvn.w	r3, #3
 8006a14:	61fb      	str	r3, [r7, #28]
              break;
 8006a16:	e05c      	b.n	8006ad2 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* Now look for the data token to signify the start of the data */
          if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006a18:	20fe      	movs	r0, #254	; 0xfe
 8006a1a:	f001 f83b 	bl	8007a94 <SD_WaitData>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d12f      	bne.n	8006a84 <MY_SD_ReadBlocks+0x13c>
          {
            /* Read the SD block data : read NumByteToRead data */
            if(BUS_SPIx_Recv((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f8de 	bl	8007bf0 <BSP_SPI2_Recv>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <MY_SD_ReadBlocks+0xfa>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006a3a:	f06f 0303 	mvn.w	r3, #3
 8006a3e:	61fb      	str	r3, [r7, #28]
              break;
 8006a40:	e047      	b.n	8006ad2 <MY_SD_ReadBlocks+0x18a>
            }

            /* Set next read address*/
            offset += MY_SD_BLOCK_SIZE;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006a48:	61bb      	str	r3, [r7, #24]
            BlocksNbr--;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	603b      	str	r3, [r7, #0]

            /* get CRC bytes (not really needed by us, but required by SD) */
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006a50:	f107 0313 	add.w	r3, r7, #19
 8006a54:	2101      	movs	r1, #1
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 f8ae 	bl	8007bb8 <BSP_SPI2_Send>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <MY_SD_ReadBlocks+0x122>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006a62:	f06f 0303 	mvn.w	r3, #3
 8006a66:	61fb      	str	r3, [r7, #28]
              break;
 8006a68:	e033      	b.n	8006ad2 <MY_SD_ReadBlocks+0x18a>
            }
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006a6a:	f107 0313 	add.w	r3, r7, #19
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 f8a1 	bl	8007bb8 <BSP_SPI2_Send>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d013      	beq.n	8006aa4 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006a7c:	f06f 0303 	mvn.w	r3, #3
 8006a80:	61fb      	str	r3, [r7, #28]
              break;
 8006a82:	e026      	b.n	8006ad2 <MY_SD_ReadBlocks+0x18a>
            }
          }
          else
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006a84:	2001      	movs	r0, #1
 8006a86:	f000 fa31 	bl	8006eec <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006a8a:	f107 0313 	add.w	r3, r7, #19
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 f891 	bl	8007bb8 <BSP_SPI2_Send>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006a9c:	f06f 0303 	mvn.w	r3, #3
 8006aa0:	61fb      	str	r3, [r7, #28]
              break;
 8006aa2:	e016      	b.n	8006ad2 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* End the command data read cycle */
          SD_IO_CSState(1);
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	f000 fa21 	bl	8006eec <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006aaa:	f107 0313 	add.w	r3, r7, #19
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 f881 	bl	8007bb8 <BSP_SPI2_Send>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <MY_SD_ReadBlocks+0x17c>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006abc:	f06f 0303 	mvn.w	r3, #3
 8006ac0:	61fb      	str	r3, [r7, #28]
            break;
 8006ac2:	e006      	b.n	8006ad2 <MY_SD_ReadBlocks+0x18a>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <MY_SD_ReadBlocks+0x18a>
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f43f af7c 	beq.w	80069ca <MY_SD_ReadBlocks+0x82>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3720      	adds	r7, #32
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000228 	.word	0x20000228

08006ae0 <MY_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t MY_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61bb      	str	r3, [r7, #24]
  uint8_t tmp, data_response;

  if(Instance >= SD_INSTANCES_NBR)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <MY_SD_WriteBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006afc:	f06f 0301 	mvn.w	r3, #1
 8006b00:	61fb      	str	r3, [r7, #28]
 8006b02:	e0e8      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006b04:	2300      	movs	r3, #0
 8006b06:	22ff      	movs	r2, #255	; 0xff
 8006b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b0c:	2010      	movs	r0, #16
 8006b0e:	f000 fd05 	bl	800751c <SD_SendCmd>
 8006b12:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 8006b14:	2001      	movs	r0, #1
 8006b16:	f000 f9e9 	bl	8006eec <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 8006b1a:	23ff      	movs	r3, #255	; 0xff
 8006b1c:	74fb      	strb	r3, [r7, #19]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b1e:	f107 0313 	add.w	r3, r7, #19
 8006b22:	2101      	movs	r1, #1
 8006b24:	4618      	mov	r0, r3
 8006b26:	f001 f847 	bl	8007bb8 <BSP_SPI2_Send>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <MY_SD_WriteBlocks+0x58>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006b30:	f06f 0303 	mvn.w	r3, #3
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	e0ce      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00e      	beq.n	8006b5e <MY_SD_WriteBlocks+0x7e>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 8006b40:	2001      	movs	r0, #1
 8006b42:	f000 f9d3 	bl	8006eec <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b46:	f107 0313 	add.w	r3, r7, #19
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f001 f833 	bl	8007bb8 <BSP_SPI2_Send>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <MY_SD_WriteBlocks+0x7e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006b58:	f06f 0303 	mvn.w	r3, #3
 8006b5c:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f040 80b8 	bne.w	8006cd6 <MY_SD_WriteBlocks+0x1f6>
        /* Data transfer */
        do
        {
          /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
          Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U : MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	441a      	add	r2, r3
 8006b6c:	4b5c      	ldr	r3, [pc, #368]	; (8006ce0 <MY_SD_WriteBlocks+0x200>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d101      	bne.n	8006b78 <MY_SD_WriteBlocks+0x98>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e001      	b.n	8006b7c <MY_SD_WriteBlocks+0x9c>
 8006b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b7c:	fb02 f103 	mul.w	r1, r2, r3
 8006b80:	2300      	movs	r3, #0
 8006b82:	22ff      	movs	r2, #255	; 0xff
 8006b84:	2018      	movs	r0, #24
 8006b86:	f000 fcc9 	bl	800751c <SD_SendCmd>
 8006b8a:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00f      	beq.n	8006bb4 <MY_SD_WriteBlocks+0xd4>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006b94:	2001      	movs	r0, #1
 8006b96:	f000 f9a9 	bl	8006eec <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b9a:	f107 0313 	add.w	r3, r7, #19
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 f809 	bl	8007bb8 <BSP_SPI2_Send>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <MY_SD_WriteBlocks+0xd4>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006bac:	f06f 0303 	mvn.w	r3, #3
 8006bb0:	61fb      	str	r3, [r7, #28]
              break;
 8006bb2:	e090      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          /* Send dummy byte for NWR timing : one byte between CMDWRITE and TOKEN */
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006bb4:	f107 0313 	add.w	r3, r7, #19
 8006bb8:	2101      	movs	r1, #1
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fffc 	bl	8007bb8 <BSP_SPI2_Send>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <MY_SD_WriteBlocks+0xee>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006bc6:	f06f 0303 	mvn.w	r3, #3
 8006bca:	61fb      	str	r3, [r7, #28]
            break;
 8006bcc:	e083      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006bce:	f107 0313 	add.w	r3, r7, #19
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 ffef 	bl	8007bb8 <BSP_SPI2_Send>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <MY_SD_WriteBlocks+0x108>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006be0:	f06f 0303 	mvn.w	r3, #3
 8006be4:	61fb      	str	r3, [r7, #28]
            break;
 8006be6:	e076      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Send the data token to signify the start of the data */
          tmp = SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE;
 8006be8:	23fe      	movs	r3, #254	; 0xfe
 8006bea:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006bec:	f107 0313 	add.w	r3, r7, #19
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 ffe0 	bl	8007bb8 <BSP_SPI2_Send>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <MY_SD_WriteBlocks+0x126>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006bfe:	f06f 0303 	mvn.w	r3, #3
 8006c02:	61fb      	str	r3, [r7, #28]
            break;
 8006c04:	e067      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Write the block data to SD */
          if(BUS_SPIx_Send((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 ffd1 	bl	8007bb8 <BSP_SPI2_Send>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <MY_SD_WriteBlocks+0x144>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006c1c:	f06f 0303 	mvn.w	r3, #3
 8006c20:	61fb      	str	r3, [r7, #28]
            break;
 8006c22:	e058      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Set next write address */
          offset += MY_SD_BLOCK_SIZE;
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006c2a:	61bb      	str	r3, [r7, #24]
          BlocksNbr--;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	603b      	str	r3, [r7, #0]

          /* get CRC bytes (not really needed by us, but required by SD) */
          tmp = SD_DUMMY_BYTE;
 8006c32:	23ff      	movs	r3, #255	; 0xff
 8006c34:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006c36:	f107 0313 	add.w	r3, r7, #19
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 ffbb 	bl	8007bb8 <BSP_SPI2_Send>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <MY_SD_WriteBlocks+0x170>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006c48:	f06f 0303 	mvn.w	r3, #3
 8006c4c:	61fb      	str	r3, [r7, #28]
            break;
 8006c4e:	e042      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006c50:	f107 0313 	add.w	r3, r7, #19
 8006c54:	2101      	movs	r1, #1
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 ffae 	bl	8007bb8 <BSP_SPI2_Send>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <MY_SD_WriteBlocks+0x18a>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006c62:	f06f 0303 	mvn.w	r3, #3
 8006c66:	61fb      	str	r3, [r7, #28]
            break;
 8006c68:	e035      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Read data response */
          if(SD_GetDataResponse(&data_response) != BSP_ERROR_NONE)
 8006c6a:	f107 0312 	add.w	r3, r7, #18
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fd6c 	bl	800774c <SD_GetDataResponse>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <MY_SD_WriteBlocks+0x1a2>
          {
            ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006c7a:	f06f 0305 	mvn.w	r3, #5
 8006c7e:	61fb      	str	r3, [r7, #28]
            break;
 8006c80:	e029      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
          }

          if (data_response != (uint8_t)SD_DATA_OK)
 8006c82:	7cbb      	ldrb	r3, [r7, #18]
 8006c84:	2b05      	cmp	r3, #5
 8006c86:	d00f      	beq.n	8006ca8 <MY_SD_WriteBlocks+0x1c8>
          {
            /* Set response value to failure */
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006c88:	2001      	movs	r0, #1
 8006c8a:	f000 f92f 	bl	8006eec <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006c8e:	f107 0313 	add.w	r3, r7, #19
 8006c92:	2101      	movs	r1, #1
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 ff8f 	bl	8007bb8 <BSP_SPI2_Send>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <MY_SD_WriteBlocks+0x1c8>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006ca0:	f06f 0303 	mvn.w	r3, #3
 8006ca4:	61fb      	str	r3, [r7, #28]
              break;
 8006ca6:	e016      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          SD_IO_CSState(1);
 8006ca8:	2001      	movs	r0, #1
 8006caa:	f000 f91f 	bl	8006eec <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006cae:	f107 0313 	add.w	r3, r7, #19
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 ff7f 	bl	8007bb8 <BSP_SPI2_Send>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <MY_SD_WriteBlocks+0x1e8>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006cc0:	f06f 0303 	mvn.w	r3, #3
 8006cc4:	61fb      	str	r3, [r7, #28]
            break;
 8006cc6:	e006      	b.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <MY_SD_WriteBlocks+0x1f6>
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f43f af48 	beq.w	8006b66 <MY_SD_WriteBlocks+0x86>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3720      	adds	r7, #32
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	20000228 	.word	0x20000228

08006ce4 <MY_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t MY_SD_GetCardState(uint32_t Instance)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint32_t response;
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <MY_SD_GetCardState+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006cf2:	f06f 0301 	mvn.w	r3, #1
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	e026      	b.n	8006d48 <MY_SD_GetCardState+0x64>
  }
  else
  {
    /* Send CMD13 (SD_SEND_STATUS) to get SD status */
    response = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, (uint8_t)SD_ANSWER_R2_EXPECTED);
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	2100      	movs	r1, #0
 8006d00:	200d      	movs	r0, #13
 8006d02:	f000 fc0b 	bl	800751c <SD_SendCmd>
 8006d06:	6138      	str	r0, [r7, #16]
    SD_IO_CSState(1);
 8006d08:	2001      	movs	r0, #1
 8006d0a:	f000 f8ef 	bl	8006eec <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 8006d0e:	23ff      	movs	r3, #255	; 0xff
 8006d10:	73fb      	strb	r3, [r7, #15]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006d12:	f107 030f 	add.w	r3, r7, #15
 8006d16:	2101      	movs	r1, #1
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 ff4d 	bl	8007bb8 <BSP_SPI2_Send>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <MY_SD_GetCardState+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006d24:	f06f 0303 	mvn.w	r3, #3
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	e00d      	b.n	8006d48 <MY_SD_GetCardState+0x64>
    }/* Find SD status according to card state */
    else if(((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR) && ((uint8_t)((response & 0xFF00UL) >> 8) == (uint8_t)SD_R2_NO_ERROR))
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d107      	bne.n	8006d44 <MY_SD_GetCardState+0x60>
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d102      	bne.n	8006d44 <MY_SD_GetCardState+0x60>
    {
      ret = (int32_t)SD_TRANSFER_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	e001      	b.n	8006d48 <MY_SD_GetCardState+0x64>
    }
    else
    {
      //ret = (int32_t)SD_TRANSFER_BUSY;
      ret = (int32_t)SD_TRANSFER_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return Status */
  return ret;
 8006d48:	697b      	ldr	r3, [r7, #20]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <MY_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
int32_t MY_SD_GetCardInfo(uint32_t Instance, MY_SD_CardInfo_t *CardInfo)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <MY_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006d68:	f06f 0301 	mvn.w	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	e069      	b.n	8006e44 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCSDRegister(&(CardInfo->Csd)) != BSP_ERROR_NONE)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 f8d2 	bl	8006f1c <SD_GetCSDRegister>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <MY_SD_GetCardInfo+0x32>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006d7e:	f06f 0305 	mvn.w	r3, #5
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e05e      	b.n	8006e44 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCIDRegister(&(CardInfo->Cid)) != BSP_ERROR_NONE)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	3314      	adds	r3, #20
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 faf4 	bl	8007378 <SD_GetCIDRegister>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <MY_SD_GetCardInfo+0x4a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006d96:	f06f 0305 	mvn.w	r3, #5
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	e052      	b.n	8006e44 <MY_SD_GetCardInfo+0xf0>
  }
  else if(CardType == MY_CARD_SDHC)
 8006d9e:	4b2c      	ldr	r3, [pc, #176]	; (8006e50 <MY_SD_GetCardInfo+0xfc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d11c      	bne.n	8006de0 <MY_SD_GetCardInfo+0x8c>
  {
    CardInfo->LogBlockSize = 512U;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dac:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = 512U;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity = (CardInfo->Csd.version.v2.DeviceSize + 1U) * 1024U * CardInfo->LogBlockSize;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f3c3 1395 	ubfx	r3, r3, #6, #22
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006dc4:	fb02 f303 	mul.w	r3, r2, r3
 8006dc8:	029a      	lsls	r2, r3, #10
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	645a      	str	r2, [r3, #68]	; 0x44
 8006dde:	e031      	b.n	8006e44 <MY_SD_GetCardInfo+0xf0>
  }
  else
  {
    CardInfo->CardCapacity = ((uint32_t)CardInfo->Csd.version.v1.DeviceSize + 1U) ;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	891b      	ldrh	r3, [r3, #8]
 8006de4:	f3c3 038b 	ubfx	r3, r3, #2, #12
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->CardCapacity *= (1UL << (CardInfo->Csd.version.v1.DeviceSizeMul + 2U));
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	7adb      	ldrb	r3, [r3, #11]
 8006df8:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	3302      	adds	r3, #2
 8006e00:	409a      	lsls	r2, r3
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockSize = 512U;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e0c:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = (1UL << (uint32_t)CardInfo->Csd.RdBlockLen);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	795b      	ldrb	r3, [r3, #5]
 8006e12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	fa03 f202 	lsl.w	r2, r3, r2
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity *= CardInfo->CardBlockSize;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e2c:	fb02 f203 	mul.w	r2, r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return ret;
 8006e44:	68fb      	ldr	r3, [r7, #12]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000228 	.word	0x20000228

08006e54 <SD_IO_Init>:
  * @brief  Initializes the SD Card and put it into StandBy State (Ready for
  *         data transfer).
  * @retval BSP status
  */
static int32_t SD_IO_Init(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61fb      	str	r3, [r7, #28]
  uint8_t counter = 0, tmp;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* SD_CS_GPIO Periph clock enable */
  MY_SD_CS_GPIO_CLK_ENABLE();
 8006e62:	4b20      	ldr	r3, [pc, #128]	; (8006ee4 <SD_IO_Init+0x90>)
 8006e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e66:	4a1f      	ldr	r2, [pc, #124]	; (8006ee4 <SD_IO_Init+0x90>)
 8006e68:	f043 0302 	orr.w	r3, r3, #2
 8006e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e6e:	4b1d      	ldr	r3, [pc, #116]	; (8006ee4 <SD_IO_Init+0x90>)
 8006e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	683b      	ldr	r3, [r7, #0]

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  GPIO_InitStruct.Pin   = MY_SD_CS_PIN;
 8006e7a:	2304      	movs	r3, #4
 8006e7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8006e82:	2301      	movs	r3, #1
 8006e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e86:	2302      	movs	r3, #2
 8006e88:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MY_SD_CS_GPIO_PORT, &GPIO_InitStruct);
 8006e8a:	1d3b      	adds	r3, r7, #4
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4816      	ldr	r0, [pc, #88]	; (8006ee8 <SD_IO_Init+0x94>)
 8006e90:	f7fb f9c6 	bl	8002220 <HAL_GPIO_Init>

  /*------------Put SD in SPI mode--------------*/
  /* SD SPI Config */
  if(BUS_SPIx_Init() != BSP_ERROR_NONE)
 8006e94:	f000 fe40 	bl	8007b18 <BSP_SPI2_Init>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <SD_IO_Init+0x52>
  {
    ret = BSP_ERROR_NO_INIT;
 8006e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	e019      	b.n	8006eda <SD_IO_Init+0x86>
  }
  else
  {
    /* SD chip select high */
    MY_SD_CS_HIGH();
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	2104      	movs	r1, #4
 8006eaa:	480f      	ldr	r0, [pc, #60]	; (8006ee8 <SD_IO_Init+0x94>)
 8006eac:	f7fb fb52 	bl	8002554 <HAL_GPIO_WritePin>

    /* Send dummy byte 0xFF, 10 times with CS high */
    /* Rise CS and MOSI for 80 clocks cycles */
    tmp = SD_DUMMY_BYTE;
 8006eb0:	23ff      	movs	r3, #255	; 0xff
 8006eb2:	76bb      	strb	r3, [r7, #26]

    do
    {
      /* Send dummy byte 0xFF */
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006eb4:	f107 031a 	add.w	r3, r7, #26
 8006eb8:	2101      	movs	r1, #1
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fe7c 	bl	8007bb8 <BSP_SPI2_Send>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <SD_IO_Init+0x7a>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006ec6:	f06f 0303 	mvn.w	r3, #3
 8006eca:	61fb      	str	r3, [r7, #28]
        break;
 8006ecc:	e005      	b.n	8006eda <SD_IO_Init+0x86>
      }
      counter++;
 8006ece:	7efb      	ldrb	r3, [r7, #27]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	76fb      	strb	r3, [r7, #27]
    }while(counter <= 9U);
 8006ed4:	7efb      	ldrb	r3, [r7, #27]
 8006ed6:	2b09      	cmp	r3, #9
 8006ed8:	d9ec      	bls.n	8006eb4 <SD_IO_Init+0x60>
  }

  return ret;
 8006eda:	69fb      	ldr	r3, [r7, #28]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3720      	adds	r7, #32
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	48000400 	.word	0x48000400

08006eec <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  Value pin's value.
  * @retval None
  */
static void SD_IO_CSState(uint32_t Value)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  if(Value == 1U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d105      	bne.n	8006f06 <SD_IO_CSState+0x1a>
  {
    MY_SD_CS_HIGH();
 8006efa:	2201      	movs	r2, #1
 8006efc:	2104      	movs	r1, #4
 8006efe:	4806      	ldr	r0, [pc, #24]	; (8006f18 <SD_IO_CSState+0x2c>)
 8006f00:	f7fb fb28 	bl	8002554 <HAL_GPIO_WritePin>
  }
  else
  {
    MY_SD_CS_LOW();
  }
}
 8006f04:	e004      	b.n	8006f10 <SD_IO_CSState+0x24>
    MY_SD_CS_LOW();
 8006f06:	2200      	movs	r2, #0
 8006f08:	2104      	movs	r1, #4
 8006f0a:	4803      	ldr	r0, [pc, #12]	; (8006f18 <SD_IO_CSState+0x2c>)
 8006f0c:	f7fb fb22 	bl	8002554 <HAL_GPIO_WritePin>
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	48000400 	.word	0x48000400

08006f1c <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd pointer on an SCD register structure
  * @retval SD status
  */
static int32_t SD_GetCSDRegister(SD_CardSpecificData_t* Csd)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b096      	sub	sp, #88	; 0x58
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006f24:	2300      	movs	r3, #0
 8006f26:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t CSD_Tab[16];
  uint32_t response;
  uint8_t tmp;

  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006f28:	2300      	movs	r3, #0
 8006f2a:	22ff      	movs	r2, #255	; 0xff
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	2009      	movs	r0, #9
 8006f30:	f000 faf4 	bl	800751c <SD_SendCmd>
 8006f34:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8006f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 8202 	bne.w	8007344 <SD_GetCSDRegister+0x428>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006f40:	20fe      	movs	r0, #254	; 0xfe
 8006f42:	f000 fda7 	bl	8007a94 <SD_WaitData>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f040 81fe 	bne.w	800734a <SD_GetCSDRegister+0x42e>
    {
      tmp = SD_DUMMY_BYTE;
 8006f4e:	23ff      	movs	r3, #255	; 0xff
 8006f50:	72fb      	strb	r3, [r7, #11]
      for (counter = 0U; counter < 16U; counter++)
 8006f52:	2300      	movs	r3, #0
 8006f54:	653b      	str	r3, [r7, #80]	; 0x50
 8006f56:	e014      	b.n	8006f82 <SD_GetCSDRegister+0x66>
      {
        /* Store CSD register value on CSD_Tab */
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CSD_Tab[counter], 1U) != BSP_ERROR_NONE)
 8006f58:	f107 020c 	add.w	r2, r7, #12
 8006f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	18d1      	adds	r1, r2, r3
 8006f62:	f107 030b 	add.w	r3, r7, #11
 8006f66:	2201      	movs	r2, #1
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fe5d 	bl	8007c28 <BSP_SPI2_SendRecv>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <SD_GetCSDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006f74:	f06f 0303 	mvn.w	r3, #3
 8006f78:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8006f7a:	e005      	b.n	8006f88 <SD_GetCSDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8006f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7e:	3301      	adds	r3, #1
 8006f80:	653b      	str	r3, [r7, #80]	; 0x50
 8006f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f84:	2b0f      	cmp	r3, #15
 8006f86:	d9e7      	bls.n	8006f58 <SD_GetCSDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f040 81dd 	bne.w	800734a <SD_GetCSDRegister+0x42e>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006f90:	f107 030b 	add.w	r3, r7, #11
 8006f94:	2101      	movs	r1, #1
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fe0e 	bl	8007bb8 <BSP_SPI2_Send>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <SD_GetCSDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006fa2:	f06f 0303 	mvn.w	r3, #3
 8006fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8006fa8:	e1cf      	b.n	800734a <SD_GetCSDRegister+0x42e>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006faa:	f107 030b 	add.w	r3, r7, #11
 8006fae:	2101      	movs	r1, #1
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fe01 	bl	8007bb8 <BSP_SPI2_Send>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <SD_GetCSDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006fbc:	f06f 0303 	mvn.w	r3, #3
 8006fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8006fc2:	e1c2      	b.n	800734a <SD_GetCSDRegister+0x42e>
          /*************************************************************************
          CSD header decoding
          *************************************************************************/

          /* Byte 0 */
          Csd->CSDStruct = (CSD_Tab[0] & 0xC0U) >> 6U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	099b      	lsrs	r3, r3, #6
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	b2d9      	uxtb	r1, r3
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	7813      	ldrb	r3, [r2, #0]
 8006fd2:	f361 0301 	bfi	r3, r1, #0, #2
 8006fd6:	7013      	strb	r3, [r2, #0]
          Csd->Reserved1 =  CSD_Tab[0] & 0x3FU;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fde:	b2d9      	uxtb	r1, r3
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	7813      	ldrb	r3, [r2, #0]
 8006fe4:	f361 0387 	bfi	r3, r1, #2, #6
 8006fe8:	7013      	strb	r3, [r2, #0]

          /* Byte 1 */
          Csd->TAAC = CSD_Tab[1];
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	705a      	strb	r2, [r3, #1]

          /* Byte 2 */
          Csd->NSAC = CSD_Tab[2];
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	709a      	strb	r2, [r3, #2]

          /* Byte 3 */
          Csd->MaxBusClkFrec = CSD_Tab[3];
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	70da      	strb	r2, [r3, #3]

          /* Byte 4/5 */
          Csd->CardComdClasses = (uint16_t)(((uint16_t)CSD_Tab[4] << 4U) | ((uint16_t)(CSD_Tab[5] & 0xF0U) >> 4U));
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	b29b      	uxth	r3, r3
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	b21a      	sxth	r2, r3
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	b29b      	uxth	r3, r3
 800700e:	111b      	asrs	r3, r3, #4
 8007010:	b21b      	sxth	r3, r3
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	b21b      	sxth	r3, r3
 8007018:	4313      	orrs	r3, r2
 800701a:	b21b      	sxth	r3, r3
 800701c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007020:	b299      	uxth	r1, r3
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	8893      	ldrh	r3, [r2, #4]
 8007026:	f361 030b 	bfi	r3, r1, #0, #12
 800702a:	8093      	strh	r3, [r2, #4]
          Csd->RdBlockLen = CSD_Tab[5] & 0x0FU;
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	b2d9      	uxtb	r1, r3
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	7953      	ldrb	r3, [r2, #5]
 8007038:	f361 1307 	bfi	r3, r1, #4, #4
 800703c:	7153      	strb	r3, [r2, #5]

          /* Byte 6 */
          Csd->PartBlockRead   = (CSD_Tab[6] & 0x80U) >> 7U;
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	09db      	lsrs	r3, r3, #7
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	b2d9      	uxtb	r1, r3
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	7993      	ldrb	r3, [r2, #6]
 800704c:	f361 0300 	bfi	r3, r1, #0, #1
 8007050:	7193      	strb	r3, [r2, #6]
          Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40U) >> 6U;
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	099b      	lsrs	r3, r3, #6
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	b2d9      	uxtb	r1, r3
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	7993      	ldrb	r3, [r2, #6]
 8007060:	f361 0341 	bfi	r3, r1, #1, #1
 8007064:	7193      	strb	r3, [r2, #6]
          Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20U) >> 5U;
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	b2d9      	uxtb	r1, r3
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	7993      	ldrb	r3, [r2, #6]
 8007074:	f361 0382 	bfi	r3, r1, #2, #1
 8007078:	7193      	strb	r3, [r2, #6]
          Csd->DSRImpl         = (CSD_Tab[6] & 0x10U) >> 4U;
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	b2d9      	uxtb	r1, r3
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7993      	ldrb	r3, [r2, #6]
 8007088:	f361 03c3 	bfi	r3, r1, #3, #1
 800708c:	7193      	strb	r3, [r2, #6]

          /*************************************************************************
          CSD v1/v2 decoding
          *************************************************************************/

          if(CardType == MY_CARD_SDSC)
 800708e:	4bac      	ldr	r3, [pc, #688]	; (8007340 <SD_GetCSDRegister+0x424>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d165      	bne.n	8007162 <SD_GetCSDRegister+0x246>
          {
            Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0CU) >> 2U);
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	089b      	lsrs	r3, r3, #2
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	b2d9      	uxtb	r1, r3
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	7a13      	ldrb	r3, [r2, #8]
 80070a4:	f361 0301 	bfi	r3, r1, #0, #2
 80070a8:	7213      	strb	r3, [r2, #8]

            Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03U) << 10U) | (CSD_Tab[7] << 2U) | ((CSD_Tab[8] & 0xC0U) >> 6U);
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	029b      	lsls	r3, r3, #10
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	b29b      	uxth	r3, r3
 80070c0:	4313      	orrs	r3, r2
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	099b      	lsrs	r3, r3, #6
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	4313      	orrs	r3, r2
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d8:	b299      	uxth	r1, r3
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	8913      	ldrh	r3, [r2, #8]
 80070de:	f361 038d 	bfi	r3, r1, #2, #12
 80070e2:	8113      	strh	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38U) >> 3U;
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	08db      	lsrs	r3, r3, #3
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	b2d9      	uxtb	r1, r3
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6893      	ldr	r3, [r2, #8]
 80070f2:	f361 3390 	bfi	r3, r1, #14, #3
 80070f6:	6093      	str	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07U);
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	b2d9      	uxtb	r1, r3
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	7a93      	ldrb	r3, [r2, #10]
 8007104:	f361 0343 	bfi	r3, r1, #1, #3
 8007108:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0U) >> 5U;
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	095b      	lsrs	r3, r3, #5
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	b2d9      	uxtb	r1, r3
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	7a93      	ldrb	r3, [r2, #10]
 8007118:	f361 1306 	bfi	r3, r1, #4, #3
 800711c:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1CU) >> 2U;
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	089b      	lsrs	r3, r3, #2
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	b2d9      	uxtb	r1, r3
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	8953      	ldrh	r3, [r2, #10]
 800712c:	f361 13c9 	bfi	r3, r1, #7, #3
 8007130:	8153      	strh	r3, [r2, #10]
            Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03U) << 1U) | ((CSD_Tab[10] & 0x80U) >> 7U);
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	b2db      	uxtb	r3, r3
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	b2db      	uxtb	r3, r3
 800713a:	f003 0306 	and.w	r3, r3, #6
 800713e:	b2da      	uxtb	r2, r3
 8007140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007142:	09db      	lsrs	r3, r3, #7
 8007144:	b2db      	uxtb	r3, r3
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	b2db      	uxtb	r3, r3
 800714c:	4313      	orrs	r3, r2
 800714e:	b2db      	uxtb	r3, r3
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	b2d9      	uxtb	r1, r3
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	7ad3      	ldrb	r3, [r2, #11]
 800715a:	f361 0384 	bfi	r3, r1, #2, #3
 800715e:	72d3      	strb	r3, [r2, #11]
 8007160:	e02b      	b.n	80071ba <SD_GetCSDRegister+0x29e>
          }
          else
          {
            Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0FU) << 2U) | ((CSD_Tab[7] & 0xC0U) >> 6U);
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	b2db      	uxtb	r3, r3
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	b2db      	uxtb	r3, r3
 800716a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800716e:	b2da      	uxtb	r2, r3
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	099b      	lsrs	r3, r3, #6
 8007174:	b2db      	uxtb	r3, r3
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	b2db      	uxtb	r3, r3
 800717c:	4313      	orrs	r3, r2
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007184:	b2d9      	uxtb	r1, r3
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	7a13      	ldrb	r3, [r2, #8]
 800718a:	f361 0305 	bfi	r3, r1, #0, #6
 800718e:	7213      	strb	r3, [r2, #8]
            Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3FU) << 16U) | (CSD_Tab[8] << 8U) | CSD_Tab[9];
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	041b      	lsls	r3, r3, #16
 8007194:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	431a      	orrs	r2, r3
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f3c3 0115 	ubfx	r1, r3, #0, #22
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6893      	ldr	r3, [r2, #8]
 80071aa:	f361 139b 	bfi	r3, r1, #6, #22
 80071ae:	6093      	str	r3, [r2, #8]
            Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80U) >> 8U);
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	7ad3      	ldrb	r3, [r2, #11]
 80071b4:	f36f 1304 	bfc	r3, #4, #1
 80071b8:	72d3      	strb	r3, [r2, #11]
          }

          Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40U) >> 6U;
 80071ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071bc:	099b      	lsrs	r3, r3, #6
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	b2d9      	uxtb	r1, r3
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7b13      	ldrb	r3, [r2, #12]
 80071c8:	f361 0300 	bfi	r3, r1, #0, #1
 80071cc:	7313      	strb	r3, [r2, #12]
          Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3FU) << 1U) | ((CSD_Tab[11] & 0x80U) >> 7U);
 80071ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	09db      	lsrs	r3, r3, #7
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	4313      	orrs	r3, r2
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f0:	b2d9      	uxtb	r1, r3
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	7b13      	ldrb	r3, [r2, #12]
 80071f6:	f361 0347 	bfi	r3, r1, #1, #7
 80071fa:	7313      	strb	r3, [r2, #12]
          Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7FU);
 80071fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007202:	b2d9      	uxtb	r1, r3
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	7b53      	ldrb	r3, [r2, #13]
 8007208:	f361 0306 	bfi	r3, r1, #0, #7
 800720c:	7353      	strb	r3, [r2, #13]
          Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80U) >> 7U;
 800720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007210:	09db      	lsrs	r3, r3, #7
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	b2d9      	uxtb	r1, r3
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	7b53      	ldrb	r3, [r2, #13]
 800721c:	f361 13c7 	bfi	r3, r1, #7, #1
 8007220:	7353      	strb	r3, [r2, #13]
          Csd->Reserved2         = (CSD_Tab[12] & 0x60U) >> 5U;
 8007222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007224:	095b      	lsrs	r3, r3, #5
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	b2d9      	uxtb	r1, r3
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	7b93      	ldrb	r3, [r2, #14]
 8007230:	f361 0301 	bfi	r3, r1, #0, #2
 8007234:	7393      	strb	r3, [r2, #14]
          Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1CU) >> 2U;
 8007236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007238:	089b      	lsrs	r3, r3, #2
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	b2d9      	uxtb	r1, r3
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	7b93      	ldrb	r3, [r2, #14]
 8007244:	f361 0384 	bfi	r3, r1, #2, #3
 8007248:	7393      	strb	r3, [r2, #14]
          Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03U) << 2U) | ((CSD_Tab[13] & 0xC0U) >> 6U);
 800724a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724c:	b2db      	uxtb	r3, r3
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	b2db      	uxtb	r3, r3
 8007252:	f003 030c 	and.w	r3, r3, #12
 8007256:	b2da      	uxtb	r2, r3
 8007258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800725a:	099b      	lsrs	r3, r3, #6
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f003 0303 	and.w	r3, r3, #3
 8007262:	b2db      	uxtb	r3, r3
 8007264:	4313      	orrs	r3, r2
 8007266:	b2db      	uxtb	r3, r3
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	b2d9      	uxtb	r1, r3
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	89d3      	ldrh	r3, [r2, #14]
 8007272:	f361 1348 	bfi	r3, r1, #5, #4
 8007276:	81d3      	strh	r3, [r2, #14]
          Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20U) >> 5U;
 8007278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	b2d9      	uxtb	r1, r3
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	7bd3      	ldrb	r3, [r2, #15]
 8007286:	f361 0341 	bfi	r3, r1, #1, #1
 800728a:	73d3      	strb	r3, [r2, #15]
          Csd->Reserved3         = (CSD_Tab[13] & 0x1FU);
 800728c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800728e:	f003 031f 	and.w	r3, r3, #31
 8007292:	b2d9      	uxtb	r1, r3
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	7bd3      	ldrb	r3, [r2, #15]
 8007298:	f361 0386 	bfi	r3, r1, #2, #5
 800729c:	73d3      	strb	r3, [r2, #15]
          Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80U) >> 7U;
 800729e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072a0:	09db      	lsrs	r3, r3, #7
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	b2d9      	uxtb	r1, r3
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	7bd3      	ldrb	r3, [r2, #15]
 80072ac:	f361 13c7 	bfi	r3, r1, #7, #1
 80072b0:	73d3      	strb	r3, [r2, #15]
          Csd->CopyFlag          = (CSD_Tab[14] & 0x40U) >> 6U;
 80072b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072b4:	099b      	lsrs	r3, r3, #6
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	b2d9      	uxtb	r1, r3
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	7c13      	ldrb	r3, [r2, #16]
 80072c0:	f361 0300 	bfi	r3, r1, #0, #1
 80072c4:	7413      	strb	r3, [r2, #16]
          Csd->PermWrProtect     = (CSD_Tab[14] & 0x20U) >> 5U;
 80072c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072c8:	095b      	lsrs	r3, r3, #5
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	b2d9      	uxtb	r1, r3
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	7c13      	ldrb	r3, [r2, #16]
 80072d4:	f361 0341 	bfi	r3, r1, #1, #1
 80072d8:	7413      	strb	r3, [r2, #16]
          Csd->TempWrProtect     = (CSD_Tab[14] & 0x10U) >> 4U;
 80072da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072dc:	091b      	lsrs	r3, r3, #4
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	b2d9      	uxtb	r1, r3
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7c13      	ldrb	r3, [r2, #16]
 80072e8:	f361 0382 	bfi	r3, r1, #2, #1
 80072ec:	7413      	strb	r3, [r2, #16]
          Csd->FileFormat        = (CSD_Tab[14] & 0x0CU) >> 2U;
 80072ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f0:	089b      	lsrs	r3, r3, #2
 80072f2:	f003 0303 	and.w	r3, r3, #3
 80072f6:	b2d9      	uxtb	r1, r3
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	7c13      	ldrb	r3, [r2, #16]
 80072fc:	f361 03c4 	bfi	r3, r1, #3, #2
 8007300:	7413      	strb	r3, [r2, #16]
          Csd->Reserved4         = (CSD_Tab[14] & 0x03U);
 8007302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007304:	f003 0303 	and.w	r3, r3, #3
 8007308:	b2d9      	uxtb	r1, r3
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	7c13      	ldrb	r3, [r2, #16]
 800730e:	f361 1346 	bfi	r3, r1, #5, #2
 8007312:	7413      	strb	r3, [r2, #16]
          Csd->crc               = (CSD_Tab[15] & 0xFEU) >> 1U;
 8007314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731c:	b2d9      	uxtb	r1, r3
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	8a13      	ldrh	r3, [r2, #16]
 8007322:	f361 13cd 	bfi	r3, r1, #7, #7
 8007326:	8213      	strh	r3, [r2, #16]
          Csd->Reserved5         = (CSD_Tab[15] & 0x01U);
 8007328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	b2d9      	uxtb	r1, r3
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	7c53      	ldrb	r3, [r2, #17]
 8007334:	f361 1386 	bfi	r3, r1, #6, #1
 8007338:	7453      	strb	r3, [r2, #17]

          ret = BSP_ERROR_NONE;
 800733a:	2300      	movs	r3, #0
 800733c:	657b      	str	r3, [r7, #84]	; 0x54
 800733e:	e004      	b.n	800734a <SD_GetCSDRegister+0x42e>
 8007340:	20000228 	.word	0x20000228
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8007344:	f06f 0305 	mvn.w	r3, #5
 8007348:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 800734a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10e      	bne.n	800736e <SD_GetCSDRegister+0x452>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 8007350:	2001      	movs	r0, #1
 8007352:	f7ff fdcb 	bl	8006eec <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007356:	f107 030b 	add.w	r3, r7, #11
 800735a:	2101      	movs	r1, #1
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fc2b 	bl	8007bb8 <BSP_SPI2_Send>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <SD_GetCSDRegister+0x452>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007368:	f06f 0303 	mvn.w	r3, #3
 800736c:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 800736e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8007370:	4618      	mov	r0, r3
 8007372:	3758      	adds	r7, #88	; 0x58
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
static int32_t SD_GetCIDRegister(SD_CardIdData_t* Cid)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b096      	sub	sp, #88	; 0x58
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007380:	2300      	movs	r3, #0
 8007382:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t response;
  uint32_t counter;
  uint8_t tmp;

  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CID, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007384:	2300      	movs	r3, #0
 8007386:	22ff      	movs	r2, #255	; 0xff
 8007388:	2100      	movs	r1, #0
 800738a:	200a      	movs	r0, #10
 800738c:	f000 f8c6 	bl	800751c <SD_SendCmd>
 8007390:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8007392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	f040 80a6 	bne.w	80074e8 <SD_GetCIDRegister+0x170>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 800739c:	20fe      	movs	r0, #254	; 0xfe
 800739e:	f000 fb79 	bl	8007a94 <SD_WaitData>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 80a2 	bne.w	80074ee <SD_GetCIDRegister+0x176>
    {
      tmp = SD_DUMMY_BYTE;
 80073aa:	23ff      	movs	r3, #255	; 0xff
 80073ac:	72fb      	strb	r3, [r7, #11]

      /* Store CID register value on CID_Tab */
      for (counter = 0U; counter < 16U; counter++)
 80073ae:	2300      	movs	r3, #0
 80073b0:	653b      	str	r3, [r7, #80]	; 0x50
 80073b2:	e014      	b.n	80073de <SD_GetCIDRegister+0x66>
      {
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CID_Tab[counter], 1U) != BSP_ERROR_NONE)
 80073b4:	f107 020c 	add.w	r2, r7, #12
 80073b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	18d1      	adds	r1, r2, r3
 80073be:	f107 030b 	add.w	r3, r7, #11
 80073c2:	2201      	movs	r2, #1
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 fc2f 	bl	8007c28 <BSP_SPI2_SendRecv>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <SD_GetCIDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80073d0:	f06f 0303 	mvn.w	r3, #3
 80073d4:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 80073d6:	e005      	b.n	80073e4 <SD_GetCIDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 80073d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073da:	3301      	adds	r3, #1
 80073dc:	653b      	str	r3, [r7, #80]	; 0x50
 80073de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e0:	2b0f      	cmp	r3, #15
 80073e2:	d9e7      	bls.n	80073b4 <SD_GetCIDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 80073e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f040 8081 	bne.w	80074ee <SD_GetCIDRegister+0x176>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80073ec:	f107 030b 	add.w	r3, r7, #11
 80073f0:	2101      	movs	r1, #1
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fbe0 	bl	8007bb8 <BSP_SPI2_Send>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <SD_GetCIDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80073fe:	f06f 0303 	mvn.w	r3, #3
 8007402:	657b      	str	r3, [r7, #84]	; 0x54
 8007404:	e073      	b.n	80074ee <SD_GetCIDRegister+0x176>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007406:	f107 030b 	add.w	r3, r7, #11
 800740a:	2101      	movs	r1, #1
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fbd3 	bl	8007bb8 <BSP_SPI2_Send>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <SD_GetCIDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007418:	f06f 0303 	mvn.w	r3, #3
 800741c:	657b      	str	r3, [r7, #84]	; 0x54
 800741e:	e066      	b.n	80074ee <SD_GetCIDRegister+0x176>
        }
        else
        {
          /* Byte 0 */
          Cid->ManufacturerID = CID_Tab[0];
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	601a      	str	r2, [r3, #0]

          /* Byte 1 */
          Cid->OEM_AppliID = CID_Tab[1] << 8U;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	021a      	lsls	r2, r3, #8
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	605a      	str	r2, [r3, #4]

          /* Byte 2 */
          Cid->OEM_AppliID |= CID_Tab[2];
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	605a      	str	r2, [r3, #4]

          /* Byte 3 */
          Cid->ProdName1 = CID_Tab[3] << 24U;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	061a      	lsls	r2, r3, #24
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	609a      	str	r2, [r3, #8]

          /* Byte 4 */
          Cid->ProdName1 |= CID_Tab[4] << 16U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	041b      	lsls	r3, r3, #16
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	609a      	str	r2, [r3, #8]

          /* Byte 5 */
          Cid->ProdName1 |= CID_Tab[5] << 8U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	609a      	str	r2, [r3, #8]

          /* Byte 6 */
          Cid->ProdName1 |= CID_Tab[6];
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	609a      	str	r2, [r3, #8]

          /* Byte 7 */
          Cid->ProdName2 = CID_Tab[7];
 800746a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	60da      	str	r2, [r3, #12]

          /* Byte 8 */
          Cid->ProdRev = CID_Tab[8];
 8007470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	611a      	str	r2, [r3, #16]

          /* Byte 9 */
          Cid->ProdSN = CID_Tab[9] << 24U;
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	061a      	lsls	r2, r3, #24
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	615a      	str	r2, [r3, #20]

          /* Byte 10 */
          Cid->ProdSN |= CID_Tab[10] << 16U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695a      	ldr	r2, [r3, #20]
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	041b      	lsls	r3, r3, #16
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	615a      	str	r2, [r3, #20]

          /* Byte 11 */
          Cid->ProdSN |= CID_Tab[11] << 8U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	021b      	lsls	r3, r3, #8
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	615a      	str	r2, [r3, #20]

          /* Byte 12 */
          Cid->ProdSN |= CID_Tab[12];
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695a      	ldr	r2, [r3, #20]
 800749e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	615a      	str	r2, [r3, #20]

          /* Byte 13 */
          Cid->Reserved1 |= (CID_Tab[13] & 0xF0U) >> 4U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ac:	091b      	lsrs	r3, r3, #4
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	619a      	str	r2, [r3, #24]
          Cid->ManufactDate = (CID_Tab[13] & 0x0FU) << 8U;
 80074b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ba:	021b      	lsls	r3, r3, #8
 80074bc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	61da      	str	r2, [r3, #28]

          /* Byte 14 */
          Cid->ManufactDate |= CID_Tab[14];
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	69da      	ldr	r2, [r3, #28]
 80074c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	61da      	str	r2, [r3, #28]

          /* Byte 15 */
          Cid->CID_CRC = (CID_Tab[15] & 0xFEU) >> 1U;
 80074d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	621a      	str	r2, [r3, #32]
          Cid->Reserved2 = 1U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	625a      	str	r2, [r3, #36]	; 0x24

          ret = BSP_ERROR_NONE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	657b      	str	r3, [r7, #84]	; 0x54
 80074e6:	e002      	b.n	80074ee <SD_GetCIDRegister+0x176>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80074e8:	f06f 0305 	mvn.w	r3, #5
 80074ec:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 80074ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10e      	bne.n	8007512 <SD_GetCIDRegister+0x19a>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 80074f4:	2001      	movs	r0, #1
 80074f6:	f7ff fcf9 	bl	8006eec <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80074fa:	f107 030b 	add.w	r3, r7, #11
 80074fe:	2101      	movs	r1, #1
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fb59 	bl	8007bb8 <BSP_SPI2_Send>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <SD_GetCIDRegister+0x19a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800750c:	f06f 0303 	mvn.w	r3, #3
 8007510:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 8007512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8007514:	4618      	mov	r0, r3
 8007516:	3758      	adds	r7, #88	; 0x58
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <SD_SendCmd>:
  * @param  Crc The CRC.
  * @param  Answer SD_ANSWER_NOT_EXPECTED or SD_ANSWER_EXPECTED
  * @retval SD response or 0xFFFF in case of error
  */
static uint32_t SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Answer)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	6039      	str	r1, [r7, #0]
 8007524:	4611      	mov	r1, r2
 8007526:	461a      	mov	r2, r3
 8007528:	4603      	mov	r3, r0
 800752a:	71fb      	strb	r3, [r7, #7]
 800752c:	460b      	mov	r3, r1
 800752e:	71bb      	strb	r3, [r7, #6]
 8007530:	4613      	mov	r3, r2
 8007532:	717b      	strb	r3, [r7, #5]
  uint8_t frame[SD_CMD_LENGTH], frameout[SD_CMD_LENGTH];
  uint32_t response = 0xFFFF;
 8007534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007538:	61fb      	str	r3, [r7, #28]
  /* R1 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 1 Bytes answer + NEC(0) = 15bytes */
  /* R1b identical to R1 + Busy information                                                   */
  /* R2 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 2 Bytes answer + NEC(0) = 16bytes */

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40U);         /* Construct byte 1 */
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007540:	b2db      	uxtb	r3, r3
 8007542:	753b      	strb	r3, [r7, #20]
  frame[1] = (uint8_t)(Arg >> 24U); /* Construct byte 2 */
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	0e1b      	lsrs	r3, r3, #24
 8007548:	b2db      	uxtb	r3, r3
 800754a:	757b      	strb	r3, [r7, #21]
  frame[2] = (uint8_t)(Arg >> 16U); /* Construct byte 3 */
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	0c1b      	lsrs	r3, r3, #16
 8007550:	b2db      	uxtb	r3, r3
 8007552:	75bb      	strb	r3, [r7, #22]
  frame[3] = (uint8_t)(Arg >> 8U);  /* Construct byte 4 */
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	0a1b      	lsrs	r3, r3, #8
 8007558:	b2db      	uxtb	r3, r3
 800755a:	75fb      	strb	r3, [r7, #23]
  frame[4] = (uint8_t)(Arg);        /* Construct byte 5 */
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	763b      	strb	r3, [r7, #24]
  frame[5] = (Crc | 0x01U);         /* Construct byte 6 */
 8007562:	79bb      	ldrb	r3, [r7, #6]
 8007564:	f043 0301 	orr.w	r3, r3, #1
 8007568:	b2db      	uxtb	r3, r3
 800756a:	767b      	strb	r3, [r7, #25]

  /* Send the command */
  SD_IO_CSState(0);
 800756c:	2000      	movs	r0, #0
 800756e:	f7ff fcbd 	bl	8006eec <SD_IO_CSState>
  /* Send the Cmd bytes */
  if(BUS_SPIx_SendRecv(frame, frameout, SD_CMD_LENGTH) != BSP_ERROR_NONE)
 8007572:	f107 010c 	add.w	r1, r7, #12
 8007576:	f107 0314 	add.w	r3, r7, #20
 800757a:	2206      	movs	r2, #6
 800757c:	4618      	mov	r0, r3
 800757e:	f000 fb53 	bl	8007c28 <BSP_SPI2_SendRecv>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <SD_SendCmd+0x72>
  {
    return 0xFFFF;
 8007588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800758c:	e0da      	b.n	8007744 <SD_SendCmd+0x228>
  }
  tmp = SD_DUMMY_BYTE;
 800758e:	23ff      	movs	r3, #255	; 0xff
 8007590:	72fb      	strb	r3, [r7, #11]
  switch(Answer)
 8007592:	797b      	ldrb	r3, [r7, #5]
 8007594:	2b05      	cmp	r3, #5
 8007596:	f200 80d1 	bhi.w	800773c <SD_SendCmd+0x220>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <SD_SendCmd+0x84>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075b9 	.word	0x080075b9
 80075a4:	080075d5 	.word	0x080075d5
 80075a8:	08007667 	.word	0x08007667
 80075ac:	080076a9 	.word	0x080076a9
 80075b0:	0800773d 	.word	0x0800773d
 80075b4:	080076a9 	.word	0x080076a9
  {
  case SD_ANSWER_R1_EXPECTED :
    /* Sends one byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80075b8:	f107 030a 	add.w	r3, r7, #10
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fa3f 	bl	8007a40 <SD_ReadData>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <SD_SendCmd+0xb2>
    {
      return 0xFFFF;
 80075c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075cc:	e0ba      	b.n	8007744 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80075ce:	7abb      	ldrb	r3, [r7, #10]
 80075d0:	61fb      	str	r3, [r7, #28]
    break;
 80075d2:	e0b6      	b.n	8007742 <SD_SendCmd+0x226>
  case SD_ANSWER_R1B_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80075d4:	f107 030a 	add.w	r3, r7, #10
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fa31 	bl	8007a40 <SD_ReadData>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <SD_SendCmd+0xce>
    {
      return 0xFFFF;
 80075e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075e8:	e0ac      	b.n	8007744 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80075ea:	7abb      	ldrb	r3, [r7, #10]
 80075ec:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80075ee:	f107 010a 	add.w	r1, r7, #10
 80075f2:	f107 030b 	add.w	r3, r7, #11
 80075f6:	2201      	movs	r2, #1
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fb15 	bl	8007c28 <BSP_SPI2_SendRecv>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <SD_SendCmd+0xee>
    {
      return 0xFFFF;
 8007604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007608:	e09c      	b.n	8007744 <SD_SendCmd+0x228>
    }
    response |= response_tmp;
 800760a:	7abb      	ldrb	r3, [r7, #10]
 800760c:	461a      	mov	r2, r3
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	4313      	orrs	r3, r2
 8007612:	61fb      	str	r3, [r7, #28]
    /* Set CS High */
    SD_IO_CSState(1);
 8007614:	2001      	movs	r0, #1
 8007616:	f7ff fc69 	bl	8006eec <SD_IO_CSState>
    SPI_IO_Delay(1);
 800761a:	2001      	movs	r0, #1
 800761c:	f000 fa67 	bl	8007aee <SPI_IO_Delay>
    /* Set CS Low */
    SD_IO_CSState(0);
 8007620:	2000      	movs	r0, #0
 8007622:	f7ff fc63 	bl	8006eec <SD_IO_CSState>

    /* Wait IO line return 0xFF */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007626:	f107 010a 	add.w	r1, r7, #10
 800762a:	f107 030b 	add.w	r3, r7, #11
 800762e:	2201      	movs	r2, #1
 8007630:	4618      	mov	r0, r3
 8007632:	f000 faf9 	bl	8007c28 <BSP_SPI2_SendRecv>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d010      	beq.n	800765e <SD_SendCmd+0x142>
    {
      return 0xFFFF;
 800763c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007640:	e080      	b.n	8007744 <SD_SendCmd+0x228>
    }
    while(response_tmp != 0xFFU)
    {
      if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007642:	f107 010a 	add.w	r1, r7, #10
 8007646:	f107 030b 	add.w	r3, r7, #11
 800764a:	2201      	movs	r2, #1
 800764c:	4618      	mov	r0, r3
 800764e:	f000 faeb 	bl	8007c28 <BSP_SPI2_SendRecv>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <SD_SendCmd+0x142>
      {
        return 0xFFFF;
 8007658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800765c:	e072      	b.n	8007744 <SD_SendCmd+0x228>
    while(response_tmp != 0xFFU)
 800765e:	7abb      	ldrb	r3, [r7, #10]
 8007660:	2bff      	cmp	r3, #255	; 0xff
 8007662:	d1ee      	bne.n	8007642 <SD_SendCmd+0x126>
      }
    }
    break;
 8007664:	e06d      	b.n	8007742 <SD_SendCmd+0x226>
  case SD_ANSWER_R2_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8007666:	f107 030a 	add.w	r3, r7, #10
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f9e8 	bl	8007a40 <SD_ReadData>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <SD_SendCmd+0x160>
    {
      return 0xFFFF;
 8007676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800767a:	e063      	b.n	8007744 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 800767c:	7abb      	ldrb	r3, [r7, #10]
 800767e:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007680:	f107 010a 	add.w	r1, r7, #10
 8007684:	f107 030b 	add.w	r3, r7, #11
 8007688:	2201      	movs	r2, #1
 800768a:	4618      	mov	r0, r3
 800768c:	f000 facc 	bl	8007c28 <BSP_SPI2_SendRecv>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <SD_SendCmd+0x180>
    {
      return 0xFFFF;
 8007696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800769a:	e053      	b.n	8007744 <SD_SendCmd+0x228>
    }
    response |= ((uint32_t)response_tmp << 8);
 800769c:	7abb      	ldrb	r3, [r7, #10]
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	61fb      	str	r3, [r7, #28]
    break;
 80076a6:	e04c      	b.n	8007742 <SD_SendCmd+0x226>
  case SD_ANSWER_R3_EXPECTED :
  case SD_ANSWER_R7_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80076a8:	f107 030a 	add.w	r3, r7, #10
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 f9c7 	bl	8007a40 <SD_ReadData>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <SD_SendCmd+0x1a2>
    {
      return 0xFFFF;
 80076b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076bc:	e042      	b.n	8007744 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80076be:	7abb      	ldrb	r3, [r7, #10]
 80076c0:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80076c2:	f107 010a 	add.w	r1, r7, #10
 80076c6:	f107 030b 	add.w	r3, r7, #11
 80076ca:	2201      	movs	r2, #1
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 faab 	bl	8007c28 <BSP_SPI2_SendRecv>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <SD_SendCmd+0x1c2>
    {
      return 0xFFFF;
 80076d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076dc:	e032      	b.n	8007744 <SD_SendCmd+0x228>
    }
    /* Only first and second responses are required */
    response |= ((uint32_t)response_tmp << 8U);
 80076de:	7abb      	ldrb	r3, [r7, #10]
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	61fb      	str	r3, [r7, #28]
    /* Sends third byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80076e8:	f107 010a 	add.w	r1, r7, #10
 80076ec:	f107 030b 	add.w	r3, r7, #11
 80076f0:	2201      	movs	r2, #1
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fa98 	bl	8007c28 <BSP_SPI2_SendRecv>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <SD_SendCmd+0x1e8>
    {
      return 0xFFFF;
 80076fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007702:	e01f      	b.n	8007744 <SD_SendCmd+0x228>
    }
    /* Sends fourth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007704:	f107 010a 	add.w	r1, r7, #10
 8007708:	f107 030b 	add.w	r3, r7, #11
 800770c:	2201      	movs	r2, #1
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fa8a 	bl	8007c28 <BSP_SPI2_SendRecv>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <SD_SendCmd+0x204>
    {
      return 0xFFFF;
 800771a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800771e:	e011      	b.n	8007744 <SD_SendCmd+0x228>
    }
    /* Sends fifth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007720:	f107 010a 	add.w	r1, r7, #10
 8007724:	f107 030b 	add.w	r3, r7, #11
 8007728:	2201      	movs	r2, #1
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fa7c 	bl	8007c28 <BSP_SPI2_SendRecv>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d004      	beq.n	8007740 <SD_SendCmd+0x224>
    {
      return 0xFFFF;
 8007736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800773a:	e003      	b.n	8007744 <SD_SendCmd+0x228>
    }

    break;
  default :
    break;
 800773c:	bf00      	nop
 800773e:	e000      	b.n	8007742 <SD_SendCmd+0x226>
    break;
 8007740:	bf00      	nop
  }
  return response;
 8007742:	69fb      	ldr	r3, [r7, #28]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3720      	adds	r7, #32
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
static int32_t SD_GetDataResponse(uint8_t *DataResponse)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint8_t dataresponse, tmp, tmp1;
  *DataResponse = (uint8_t)SD_DATA_OTHER_ERROR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	22ff      	movs	r2, #255	; 0xff
 8007758:	701a      	strb	r2, [r3, #0]

  tmp = SD_DUMMY_BYTE;
 800775a:	23ff      	movs	r3, #255	; 0xff
 800775c:	73bb      	strb	r3, [r7, #14]
  if(BUS_SPIx_SendRecv(&tmp, &dataresponse, 1U) != BSP_ERROR_NONE)
 800775e:	f107 010f 	add.w	r1, r7, #15
 8007762:	f107 030e 	add.w	r3, r7, #14
 8007766:	2201      	movs	r2, #1
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fa5d 	bl	8007c28 <BSP_SPI2_SendRecv>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <SD_GetDataResponse+0x2e>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8007774:	f06f 0303 	mvn.w	r3, #3
 8007778:	e049      	b.n	800780e <SD_GetDataResponse+0xc2>
  }
  /* read the busy response byte*/
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800777a:	f107 030e 	add.w	r3, r7, #14
 800777e:	2101      	movs	r1, #1
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fa19 	bl	8007bb8 <BSP_SPI2_Send>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <SD_GetDataResponse+0x46>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800778c:	f06f 0303 	mvn.w	r3, #3
 8007790:	e03d      	b.n	800780e <SD_GetDataResponse+0xc2>
  }
  else
  {
    /* Mask unused bits */
    switch (dataresponse & 0x1FU)
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	f003 031f 	and.w	r3, r3, #31
 8007798:	2b0b      	cmp	r3, #11
 800779a:	d02f      	beq.n	80077fc <SD_GetDataResponse+0xb0>
 800779c:	2b0d      	cmp	r3, #13
 800779e:	d031      	beq.n	8007804 <SD_GetDataResponse+0xb8>
 80077a0:	2b05      	cmp	r3, #5
 80077a2:	d000      	beq.n	80077a6 <SD_GetDataResponse+0x5a>
      break;
    case SD_DATA_WRITE_ERROR:
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
      break;
    default:
      break;
 80077a4:	e032      	b.n	800780c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_OK;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2205      	movs	r2, #5
 80077aa:	701a      	strb	r2, [r3, #0]
      SD_IO_CSState(1);
 80077ac:	2001      	movs	r0, #1
 80077ae:	f7ff fb9d 	bl	8006eec <SD_IO_CSState>
      SD_IO_CSState(0);
 80077b2:	2000      	movs	r0, #0
 80077b4:	f7ff fb9a 	bl	8006eec <SD_IO_CSState>
      tmp = SD_DUMMY_BYTE;
 80077b8:	23ff      	movs	r3, #255	; 0xff
 80077ba:	73bb      	strb	r3, [r7, #14]
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 80077bc:	f107 010d 	add.w	r1, r7, #13
 80077c0:	f107 030e 	add.w	r3, r7, #14
 80077c4:	2201      	movs	r2, #1
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fa2e 	bl	8007c28 <BSP_SPI2_SendRecv>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d010      	beq.n	80077f4 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 80077d2:	f06f 0303 	mvn.w	r3, #3
 80077d6:	e01a      	b.n	800780e <SD_GetDataResponse+0xc2>
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 80077d8:	f107 010d 	add.w	r1, r7, #13
 80077dc:	f107 030e 	add.w	r3, r7, #14
 80077e0:	2201      	movs	r2, #1
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fa20 	bl	8007c28 <BSP_SPI2_SendRecv>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 80077ee:	f06f 0303 	mvn.w	r3, #3
 80077f2:	e00c      	b.n	800780e <SD_GetDataResponse+0xc2>
      while(tmp1 != 0xFFU)
 80077f4:	7b7b      	ldrb	r3, [r7, #13]
 80077f6:	2bff      	cmp	r3, #255	; 0xff
 80077f8:	d1ee      	bne.n	80077d8 <SD_GetDataResponse+0x8c>
      break;
 80077fa:	e007      	b.n	800780c <SD_GetDataResponse+0xc0>
      *DataResponse =  (uint8_t)SD_DATA_CRC_ERROR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	220b      	movs	r2, #11
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e003      	b.n	800780c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	220d      	movs	r2, #13
 8007808:	701a      	strb	r2, [r3, #0]
      break;
 800780a:	bf00      	nop
    }
  }

  /* Return response */
  return BSP_ERROR_NONE;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <SD_GoIdleState>:
  * @brief  Put the SD in Idle state.
  * @param  None
  * @retval SD status
  */
static int32_t SD_GoIdleState(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
  uint32_t response;
  __IO uint8_t counter = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	70fb      	strb	r3, [r7, #3]
  uint8_t tmp = SD_DUMMY_BYTE;
 8007822:	23ff      	movs	r3, #255	; 0xff
 8007824:	70bb      	strb	r3, [r7, #2]

  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and
  wait for In Idle State Response (R1 Format) equal to 0x01 */
  do
  {
    counter++;
 8007826:	78fb      	ldrb	r3, [r7, #3]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	3301      	adds	r3, #1
 800782c:	b2db      	uxtb	r3, r3
 800782e:	70fb      	strb	r3, [r7, #3]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0U, 0x95U, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007830:	2300      	movs	r3, #0
 8007832:	2295      	movs	r2, #149	; 0x95
 8007834:	2100      	movs	r1, #0
 8007836:	2000      	movs	r0, #0
 8007838:	f7ff fe70 	bl	800751c <SD_SendCmd>
 800783c:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 800783e:	2001      	movs	r0, #1
 8007840:	f7ff fb54 	bl	8006eec <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007844:	1cbb      	adds	r3, r7, #2
 8007846:	2101      	movs	r1, #1
 8007848:	4618      	mov	r0, r3
 800784a:	f000 f9b5 	bl	8007bb8 <BSP_SPI2_Send>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <SD_GoIdleState+0x42>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007854:	f06f 0303 	mvn.w	r3, #3
 8007858:	e0ec      	b.n	8007a34 <SD_GoIdleState+0x21c>
    }
    else
    {
      if(counter >= SD_MAX_TRY)
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b63      	cmp	r3, #99	; 0x63
 8007860:	d902      	bls.n	8007868 <SD_GoIdleState+0x50>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 8007862:	f06f 0305 	mvn.w	r3, #5
 8007866:	e0e5      	b.n	8007a34 <SD_GoIdleState+0x21c>
      }
    }
  }while((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b01      	cmp	r3, #1
 800786e:	d1da      	bne.n	8007826 <SD_GoIdleState+0xe>

  /* Send CMD8 (SD_CMD_SEND_IF_COND) to check the power supply status
  and wait until response (R7 Format) equal to 0xAA and */
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AAU, 0x87U, (uint8_t)SD_ANSWER_R7_EXPECTED);
 8007870:	2305      	movs	r3, #5
 8007872:	2287      	movs	r2, #135	; 0x87
 8007874:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007878:	2008      	movs	r0, #8
 800787a:	f7ff fe4f 	bl	800751c <SD_SendCmd>
 800787e:	6078      	str	r0, [r7, #4]
  SD_IO_CSState(1);
 8007880:	2001      	movs	r0, #1
 8007882:	f7ff fb33 	bl	8006eec <SD_IO_CSState>
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007886:	1cbb      	adds	r3, r7, #2
 8007888:	2101      	movs	r1, #1
 800788a:	4618      	mov	r0, r3
 800788c:	f000 f994 	bl	8007bb8 <BSP_SPI2_Send>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <SD_GoIdleState+0x84>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8007896:	f06f 0303 	mvn.w	r3, #3
 800789a:	e0cb      	b.n	8007a34 <SD_GoIdleState+0x21c>
  }
  else if(((uint8_t)(response & 0xFFU)  & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d030      	beq.n	800790a <SD_GoIdleState+0xf2>
    /* initialise card V1 */
    do
    {
      /* initialise card V1 */
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80078a8:	2300      	movs	r3, #0
 80078aa:	22ff      	movs	r2, #255	; 0xff
 80078ac:	2100      	movs	r1, #0
 80078ae:	2037      	movs	r0, #55	; 0x37
 80078b0:	f7ff fe34 	bl	800751c <SD_SendCmd>
      SD_IO_CSState(1);
 80078b4:	2001      	movs	r0, #1
 80078b6:	f7ff fb19 	bl	8006eec <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80078ba:	1cbb      	adds	r3, r7, #2
 80078bc:	2101      	movs	r1, #1
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f97a 	bl	8007bb8 <BSP_SPI2_Send>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <SD_GoIdleState+0xb8>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 80078ca:	f06f 0303 	mvn.w	r3, #3
 80078ce:	e0b1      	b.n	8007a34 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80078d0:	2300      	movs	r3, #0
 80078d2:	22ff      	movs	r2, #255	; 0xff
 80078d4:	2100      	movs	r1, #0
 80078d6:	2029      	movs	r0, #41	; 0x29
 80078d8:	f7ff fe20 	bl	800751c <SD_SendCmd>
 80078dc:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 80078de:	2001      	movs	r0, #1
 80078e0:	f7ff fb04 	bl	8006eec <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80078e4:	1cbb      	adds	r3, r7, #2
 80078e6:	2101      	movs	r1, #1
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 f965 	bl	8007bb8 <BSP_SPI2_Send>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <SD_GoIdleState+0xe2>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 80078f4:	f06f 0303 	mvn.w	r3, #3
 80078f8:	e09c      	b.n	8007a34 <SD_GoIdleState+0x21c>
        }
      }
    }
    while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d0d2      	beq.n	80078a8 <SD_GoIdleState+0x90>
    CardType = MY_CARD_SDSC;
 8007902:	4b4e      	ldr	r3, [pc, #312]	; (8007a3c <SD_GoIdleState+0x224>)
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	e093      	b.n	8007a32 <SD_GoIdleState+0x21a>
  }
  else if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b01      	cmp	r3, #1
 8007910:	f040 808c 	bne.w	8007a2c <SD_GoIdleState+0x214>
  {
    /* initialise card V2 */
    do {
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007914:	2300      	movs	r3, #0
 8007916:	22ff      	movs	r2, #255	; 0xff
 8007918:	2100      	movs	r1, #0
 800791a:	2037      	movs	r0, #55	; 0x37
 800791c:	f7ff fdfe 	bl	800751c <SD_SendCmd>
      SD_IO_CSState(1);
 8007920:	2001      	movs	r0, #1
 8007922:	f7ff fae3 	bl	8006eec <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007926:	1cbb      	adds	r3, r7, #2
 8007928:	2101      	movs	r1, #1
 800792a:	4618      	mov	r0, r3
 800792c:	f000 f944 	bl	8007bb8 <BSP_SPI2_Send>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <SD_GoIdleState+0x124>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8007936:	f06f 0303 	mvn.w	r3, #3
 800793a:	e07b      	b.n	8007a34 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800793c:	2300      	movs	r3, #0
 800793e:	22ff      	movs	r2, #255	; 0xff
 8007940:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007944:	2029      	movs	r0, #41	; 0x29
 8007946:	f7ff fde9 	bl	800751c <SD_SendCmd>
 800794a:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 800794c:	2001      	movs	r0, #1
 800794e:	f7ff facd 	bl	8006eec <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007952:	1cbb      	adds	r3, r7, #2
 8007954:	2101      	movs	r1, #1
 8007956:	4618      	mov	r0, r3
 8007958:	f000 f92e 	bl	8007bb8 <BSP_SPI2_Send>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <SD_GoIdleState+0x150>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8007962:	f06f 0303 	mvn.w	r3, #3
 8007966:	e065      	b.n	8007a34 <SD_GoIdleState+0x21c>
        }
      }
    }
    while(((uint8_t)response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b01      	cmp	r3, #1
 800796e:	d0d1      	beq.n	8007914 <SD_GoIdleState+0xfc>

    if(((uint8_t)(response & 0xFFU) & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b00      	cmp	r3, #0
 800797a:	d033      	beq.n	80079e4 <SD_GoIdleState+0x1cc>
    {
      do {
        /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
        (void)SD_SendCmd(SD_CMD_APP_CMD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800797c:	2300      	movs	r3, #0
 800797e:	22ff      	movs	r2, #255	; 0xff
 8007980:	2100      	movs	r1, #0
 8007982:	2037      	movs	r0, #55	; 0x37
 8007984:	f7ff fdca 	bl	800751c <SD_SendCmd>
        SD_IO_CSState(1);
 8007988:	2001      	movs	r0, #1
 800798a:	f7ff faaf 	bl	8006eec <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800798e:	1cbb      	adds	r3, r7, #2
 8007990:	2101      	movs	r1, #1
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f910 	bl	8007bb8 <BSP_SPI2_Send>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <SD_GoIdleState+0x18c>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 800799e:	f06f 0303 	mvn.w	r3, #3
 80079a2:	e047      	b.n	8007a34 <SD_GoIdleState+0x21c>
        }
        else
        {
          if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d002      	beq.n	80079b2 <SD_GoIdleState+0x19a>
          {
            return BSP_ERROR_UNKNOWN_FAILURE;
 80079ac:	f06f 0305 	mvn.w	r3, #5
 80079b0:	e040      	b.n	8007a34 <SD_GoIdleState+0x21c>
          }
          /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80079b2:	2300      	movs	r3, #0
 80079b4:	22ff      	movs	r2, #255	; 0xff
 80079b6:	2100      	movs	r1, #0
 80079b8:	2029      	movs	r0, #41	; 0x29
 80079ba:	f7ff fdaf 	bl	800751c <SD_SendCmd>
 80079be:	6078      	str	r0, [r7, #4]
          SD_IO_CSState(1);
 80079c0:	2001      	movs	r0, #1
 80079c2:	f7ff fa93 	bl	8006eec <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80079c6:	1cbb      	adds	r3, r7, #2
 80079c8:	2101      	movs	r1, #1
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f8f4 	bl	8007bb8 <BSP_SPI2_Send>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <SD_GoIdleState+0x1c4>
          {
            return BSP_ERROR_PERIPH_FAILURE;
 80079d6:	f06f 0303 	mvn.w	r3, #3
 80079da:	e02b      	b.n	8007a34 <SD_GoIdleState+0x21c>
          }
        }
      }
      while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d0cb      	beq.n	800797c <SD_GoIdleState+0x164>
    }

    /* Send CMD58 (SD_CMD_READ_OCR) to initialize SDHC or SDXC cards: R3 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R3_EXPECTED);
 80079e4:	2303      	movs	r3, #3
 80079e6:	22ff      	movs	r2, #255	; 0xff
 80079e8:	2100      	movs	r1, #0
 80079ea:	203a      	movs	r0, #58	; 0x3a
 80079ec:	f7ff fd96 	bl	800751c <SD_SendCmd>
 80079f0:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 80079f2:	2001      	movs	r0, #1
 80079f4:	f7ff fa7a 	bl	8006eec <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80079f8:	1cbb      	adds	r3, r7, #2
 80079fa:	2101      	movs	r1, #1
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 f8db 	bl	8007bb8 <BSP_SPI2_Send>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <SD_GoIdleState+0x1f6>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007a08:	f06f 0303 	mvn.w	r3, #3
 8007a0c:	e012      	b.n	8007a34 <SD_GoIdleState+0x21c>
    }
    else
    {
      if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <SD_GoIdleState+0x204>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 8007a16:	f06f 0305 	mvn.w	r3, #5
 8007a1a:	e00b      	b.n	8007a34 <SD_GoIdleState+0x21c>
      }
      CardType = (uint32_t)(((response >> 8U) & 0x40U) >> 6U);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	0a1b      	lsrs	r3, r3, #8
 8007a20:	099b      	lsrs	r3, r3, #6
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	4a05      	ldr	r2, [pc, #20]	; (8007a3c <SD_GoIdleState+0x224>)
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	e002      	b.n	8007a32 <SD_GoIdleState+0x21a>
    }
  }
  else
  {
    return BSP_ERROR_BUSY;
 8007a2c:	f06f 0302 	mvn.w	r3, #2
 8007a30:	e000      	b.n	8007a34 <SD_GoIdleState+0x21c>
  }

  return BSP_ERROR_NONE;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20000228 	.word	0x20000228

08007a40 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  Data data to be read
  * @retval BSP status
  */
static int32_t SD_ReadData(uint8_t *Data)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint8_t timeout = 0x08U;
 8007a48:	2308      	movs	r3, #8
 8007a4a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  tmp = SD_DUMMY_BYTE;
 8007a4c:	23ff      	movs	r3, #255	; 0xff
 8007a4e:	73bb      	strb	r3, [r7, #14]
  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, Data, 1) != BSP_ERROR_NONE)
 8007a50:	f107 030e 	add.w	r3, r7, #14
 8007a54:	2201      	movs	r2, #1
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 f8e5 	bl	8007c28 <BSP_SPI2_SendRecv>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <SD_ReadData+0x2a>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007a64:	f06f 0303 	mvn.w	r3, #3
 8007a68:	e010      	b.n	8007a8c <SD_ReadData+0x4c>
    }
    timeout--;
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]

  }while ((*Data == SD_DUMMY_BYTE) && (timeout != 0U));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2bff      	cmp	r3, #255	; 0xff
 8007a76:	d102      	bne.n	8007a7e <SD_ReadData+0x3e>
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1e8      	bne.n	8007a50 <SD_ReadData+0x10>

  if (timeout == 0U)
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <SD_ReadData+0x4a>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 8007a84:	f06f 0302 	mvn.w	r3, #2
 8007a88:	e000      	b.n	8007a8c <SD_ReadData+0x4c>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <SD_WaitData>:
  * @brief  Waits a data from the SD card
  * @param  data  Expected data from the SD card
  * @retval BSP status
  */
static int32_t SD_WaitData(uint8_t Data)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	71fb      	strb	r3, [r7, #7]
  uint16_t timeout = 0xFFFF;
 8007a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007aa2:	81fb      	strh	r3, [r7, #14]
  uint8_t readvalue, tmp;

  tmp = SD_DUMMY_BYTE;
 8007aa4:	23ff      	movs	r3, #255	; 0xff
 8007aa6:	733b      	strb	r3, [r7, #12]

  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, &readvalue, 1) != BSP_ERROR_NONE)
 8007aa8:	f107 010d 	add.w	r1, r7, #13
 8007aac:	f107 030c 	add.w	r3, r7, #12
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 f8b8 	bl	8007c28 <BSP_SPI2_SendRecv>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <SD_WaitData+0x30>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007abe:	f06f 0303 	mvn.w	r3, #3
 8007ac2:	e010      	b.n	8007ae6 <SD_WaitData+0x52>
    }
    timeout--;
 8007ac4:	89fb      	ldrh	r3, [r7, #14]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	81fb      	strh	r3, [r7, #14]
  }while ((readvalue != Data) && (timeout != 0U));
 8007aca:	7b7b      	ldrb	r3, [r7, #13]
 8007acc:	79fa      	ldrb	r2, [r7, #7]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d002      	beq.n	8007ad8 <SD_WaitData+0x44>
 8007ad2:	89fb      	ldrh	r3, [r7, #14]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e7      	bne.n	8007aa8 <SD_WaitData+0x14>

  if (timeout == 0U)
 8007ad8:	89fb      	ldrh	r3, [r7, #14]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d102      	bne.n	8007ae4 <SD_WaitData+0x50>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 8007ade:	f06f 0302 	mvn.w	r3, #2
 8007ae2:	e000      	b.n	8007ae6 <SD_WaitData+0x52>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <SPI_IO_Delay>:
  * @brief  SPI IO delay
  * @param  Delay  Delay in ms
  * @retval None
  */
static void SPI_IO_Delay(uint32_t Delay)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  int32_t tickstart;
  tickstart = BSP_GetTick();
 8007af6:	f000 f8b7 	bl	8007c68 <BSP_GetTick>
 8007afa:	60f8      	str	r0, [r7, #12]
  while((BSP_GetTick() - tickstart) < (int32_t)Delay)
 8007afc:	bf00      	nop
 8007afe:	f000 f8b3 	bl	8007c68 <BSP_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	1ad2      	subs	r2, r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	dbf7      	blt.n	8007afe <SPI_IO_Delay+0x10>
  {
  }
}
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <BSP_SPI2_Init>:

static void SPI_MspInit(SPI_HandleTypeDef *hspi);
static void SPI_MspDeInit(SPI_HandleTypeDef *hspi);

int32_t BSP_SPI2_Init(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hSpiHandle) == HAL_SPI_STATE_RESET)
 8007b1c:	480a      	ldr	r0, [pc, #40]	; (8007b48 <BSP_SPI2_Init+0x30>)
 8007b1e:	f7fc fdce 	bl	80046be <HAL_SPI_GetState>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10b      	bne.n	8007b40 <BSP_SPI2_Init+0x28>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI_MspInit(&hSpiHandle);
 8007b28:	4807      	ldr	r0, [pc, #28]	; (8007b48 <BSP_SPI2_Init+0x30>)
 8007b2a:	f000 f8a5 	bl	8007c78 <SPI_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_BSP_SPI2_Init(&hSpiHandle) != HAL_OK)
 8007b2e:	4806      	ldr	r0, [pc, #24]	; (8007b48 <BSP_SPI2_Init+0x30>)
 8007b30:	f000 f80c 	bl	8007b4c <MX_BSP_SPI2_Init>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <BSP_SPI2_Init+0x28>
    {
      return BSP_ERROR_BUS_FAILURE;
 8007b3a:	f06f 0307 	mvn.w	r3, #7
 8007b3e:	e000      	b.n	8007b42 <BSP_SPI2_Init+0x2a>
    }
  }
  return BSP_ERROR_NONE;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000c54 	.word	0x20000c54

08007b4c <MX_BSP_SPI2_Init>:
  * @brief  MX SPI initialization.
  * @param  hspi SPI handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_BSP_SPI2_Init(SPI_HandleTypeDef *hspi)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* SPI Config */
  hspi->Instance               = NUCLEO_SPI;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a17      	ldr	r2, [pc, #92]	; (8007bb4 <MX_BSP_SPI2_Init+0x68>)
 8007b58:	601a      	str	r2, [r3, #0]
  hspi->Init.BaudRatePrescaler = NUCLEO_SPI_BAUDRATEPRESCALER;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2210      	movs	r2, #16
 8007b5e:	61da      	str	r2, [r3, #28]
  hspi->Init.Direction         = SPI_DIRECTION_2LINES;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	609a      	str	r2, [r3, #8]
  hspi->Init.CLKPhase          = SPI_PHASE_2EDGE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	615a      	str	r2, [r3, #20]
  hspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	611a      	str	r2, [r3, #16]
  hspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial     = 7;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2207      	movs	r2, #7
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007b84:	60da      	str	r2, [r3, #12]
  hspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	621a      	str	r2, [r3, #32]
  hspi->Init.NSS               = SPI_NSS_SOFT;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b92:	619a      	str	r2, [r3, #24]
  hspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.Mode              = SPI_MODE_MASTER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007ba0:	605a      	str	r2, [r3, #4]

  return HAL_SPI_Init(hspi);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7fc f858 	bl	8003c58 <HAL_SPI_Init>
 8007ba8:	4603      	mov	r3, r0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40003800 	.word	0x40003800

08007bb8 <BSP_SPI2_Send>:
  * @param  pTxData pointer to TX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pTxData, uint32_t Length)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hSpiHandle, pTxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4806      	ldr	r0, [pc, #24]	; (8007bec <BSP_SPI2_Send+0x34>)
 8007bd2:	f7fc f8d3 	bl	8003d7c <HAL_SPI_Transmit>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <BSP_SPI2_Send+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007bdc:	f06f 0307 	mvn.w	r3, #7
 8007be0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007be2:	68fb      	ldr	r3, [r7, #12]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000c54 	.word	0x20000c54

08007bf0 <BSP_SPI2_Recv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Recv(uint8_t *pRxData, uint32_t Length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hSpiHandle, pRxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	4806      	ldr	r0, [pc, #24]	; (8007c24 <BSP_SPI2_Recv+0x34>)
 8007c0a:	f7fc fa1d 	bl	8004048 <HAL_SPI_Receive>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <BSP_SPI2_Recv+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007c14:	f06f 0307 	mvn.w	r3, #7
 8007c18:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20000c54 	.word	0x20000c54

08007c28 <BSP_SPI2_SendRecv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint32_t Legnth)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hSpiHandle, pTxData, pRxData, (uint16_t)Legnth, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	4613      	mov	r3, r2
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	68f9      	ldr	r1, [r7, #12]
 8007c48:	4806      	ldr	r0, [pc, #24]	; (8007c64 <BSP_SPI2_SendRecv+0x3c>)
 8007c4a:	f7fc fb25 	bl	8004298 <HAL_SPI_TransmitReceive>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <BSP_SPI2_SendRecv+0x32>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007c54:	f06f 0307 	mvn.w	r3, #7
 8007c58:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007c5a:	697b      	ldr	r3, [r7, #20]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	20000c54 	.word	0x20000c54

08007c68 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8007c6c:	f7f9 fc4a 	bl	8001504 <HAL_GetTick>
 8007c70:	4603      	mov	r3, r0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <SPI_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi SPI handler
  * @retval None
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08c      	sub	sp, #48	; 0x30
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*** Configure the SPI peripheral ***/
  /* Enable SPI clock */
  NUCLEO_SPI_CLK_ENABLE();
 8007c80:	4b2e      	ldr	r3, [pc, #184]	; (8007d3c <SPI_MspInit+0xc4>)
 8007c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c84:	4a2d      	ldr	r2, [pc, #180]	; (8007d3c <SPI_MspInit+0xc4>)
 8007c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8007c8c:	4b2b      	ldr	r3, [pc, #172]	; (8007d3c <SPI_MspInit+0xc4>)
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c94:	61bb      	str	r3, [r7, #24]
 8007c96:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  NUCLEO_SPI_SCK_GPIO_CLK_ENABLE();
 8007c98:	4b28      	ldr	r3, [pc, #160]	; (8007d3c <SPI_MspInit+0xc4>)
 8007c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9c:	4a27      	ldr	r2, [pc, #156]	; (8007d3c <SPI_MspInit+0xc4>)
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ca4:	4b25      	ldr	r3, [pc, #148]	; (8007d3c <SPI_MspInit+0xc4>)
 8007ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	697b      	ldr	r3, [r7, #20]
  NUCLEO_SPI_MOSI_GPIO_CLK_ENABLE();
 8007cb0:	4b22      	ldr	r3, [pc, #136]	; (8007d3c <SPI_MspInit+0xc4>)
 8007cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb4:	4a21      	ldr	r2, [pc, #132]	; (8007d3c <SPI_MspInit+0xc4>)
 8007cb6:	f043 0301 	orr.w	r3, r3, #1
 8007cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cbc:	4b1f      	ldr	r3, [pc, #124]	; (8007d3c <SPI_MspInit+0xc4>)
 8007cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	613b      	str	r3, [r7, #16]
 8007cc6:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPI_MISO_GPIO_CLK_ENABLE();
 8007cc8:	4b1c      	ldr	r3, [pc, #112]	; (8007d3c <SPI_MspInit+0xc4>)
 8007cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ccc:	4a1b      	ldr	r2, [pc, #108]	; (8007d3c <SPI_MspInit+0xc4>)
 8007cce:	f043 0301 	orr.w	r3, r3, #1
 8007cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cd4:	4b19      	ldr	r3, [pc, #100]	; (8007d3c <SPI_MspInit+0xc4>)
 8007cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	68fb      	ldr	r3, [r7, #12]

  /* Configure SPI SCK */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_SCK_PIN;
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cec:	2303      	movs	r3, #3
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = NUCLEO_SPI_SCK_AF;
 8007cf0:	2305      	movs	r3, #5
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007cf4:	f107 031c 	add.w	r3, r7, #28
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cfe:	f7fa fa8f 	bl	8002220 <HAL_GPIO_Init>

  /* Configure SPI MOSI */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_MOSI_PIN;
 8007d02:	2380      	movs	r3, #128	; 0x80
 8007d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MOSI_AF;
 8007d06:	2305      	movs	r3, #5
 8007d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8007d0e:	f107 031c 	add.w	r3, r7, #28
 8007d12:	4619      	mov	r1, r3
 8007d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d18:	f7fa fa82 	bl	8002220 <HAL_GPIO_Init>

  /* Configure SPI MISO */
  GPIO_InitStruct.Pin = NUCLEO_SPI_MISO_PIN;
 8007d1c:	2340      	movs	r3, #64	; 0x40
 8007d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MISO_AF;
 8007d20:	2305      	movs	r3, #5
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8007d24:	f107 031c 	add.w	r3, r7, #28
 8007d28:	4619      	mov	r1, r3
 8007d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d2e:	f7fa fa77 	bl	8002220 <HAL_GPIO_Init>
}
 8007d32:	bf00      	nop
 8007d34:	3730      	adds	r7, #48	; 0x30
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	40021000 	.word	0x40021000

08007d40 <USER_CheckStatus>:
#define DISABLE_SD_INIT
/* Private variables ---------------------------------------------------------*/
/* Disk status */
static volatile DSTATUS Stat = STA_NOINIT;
static DSTATUS USER_CheckStatus(BYTE lun)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007d4a:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <USER_CheckStatus+0x3c>)
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	701a      	strb	r2, [r3, #0]
  // TO DO:
  if(MY_SD_GetCardState(0) == BSP_ERROR_NONE)
 8007d50:	2000      	movs	r0, #0
 8007d52:	f7fe ffc7 	bl	8006ce4 <MY_SD_GetCardState>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d107      	bne.n	8007d6c <USER_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 8007d5c:	4b07      	ldr	r3, [pc, #28]	; (8007d7c <USER_CheckStatus+0x3c>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	f023 0301 	bic.w	r3, r3, #1
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <USER_CheckStatus+0x3c>)
 8007d6a:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <USER_CheckStatus+0x3c>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	b2db      	uxtb	r3, r3
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	2000000c 	.word	0x2000000c

08007d80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <USER_initialize+0x30>)
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	701a      	strb	r2, [r3, #0]
	  if(MY_SD_Init(0) == BSP_ERROR_NONE)
	  {
		Stat = USER_CheckStatus(pdrv);
	  }
	#else
	  Stat = USER_CheckStatus(pdrv);
 8007d90:	79fb      	ldrb	r3, [r7, #7]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff ffd4 	bl	8007d40 <USER_CheckStatus>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <USER_initialize+0x30>)
 8007d9e:	701a      	strb	r2, [r3, #0]
	#endif
    return Stat;
 8007da0:	4b03      	ldr	r3, [pc, #12]	; (8007db0 <USER_initialize+0x30>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	2000000c 	.word	0x2000000c

08007db4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_CheckStatus(pdrv);
 8007dbe:	79fb      	ldrb	r3, [r7, #7]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff ffbd 	bl	8007d40 <USER_CheckStatus>
 8007dc6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	607a      	str	r2, [r7, #4]
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	DRESULT res = RES_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_ReadBlocks(0, (uint32_t*)buff,
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	2000      	movs	r0, #0
 8007dec:	f7fe fdac 	bl	8006948 <MY_SD_ReadBlocks>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d108      	bne.n	8007e08 <USER_read+0x38>
						   (uint32_t) (sector),
						   count) == BSP_ERROR_NONE)
	  {
		/* wait until the read operation is finished */
		while( MY_SD_GetCardState(0)!= BSP_ERROR_NONE)
 8007df6:	bf00      	nop
 8007df8:	2000      	movs	r0, #0
 8007dfa:	f7fe ff73 	bl	8006ce4 <MY_SD_GetCardState>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f9      	bne.n	8007df8 <USER_read+0x28>
		{
		}
		res = RES_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	75fb      	strb	r3, [r7, #23]
	  }
	  return res;
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END READ */
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b086      	sub	sp, #24
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	603b      	str	r3, [r7, #0]
 8007e1e:	4603      	mov	r3, r0
 8007e20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	DRESULT res = RES_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_WriteBlocks(0, (uint32_t*)buff,
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	68b9      	ldr	r1, [r7, #8]
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	f7fe fe57 	bl	8006ae0 <MY_SD_WriteBlocks>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d108      	bne.n	8007e4a <USER_write+0x38>
	                        (uint32_t)(sector),
	                        count) == BSP_ERROR_NONE)
	  {
	  /* wait until the Write operation is finished */
	    while(MY_SD_GetCardState(0) != BSP_ERROR_NONE)
 8007e38:	bf00      	nop
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	f7fe ff52 	bl	8006ce4 <MY_SD_GetCardState>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1f9      	bne.n	8007e3a <USER_write+0x28>
	    {
	    }
	    res = RES_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	75fb      	strb	r3, [r7, #23]
	  }

	  return res;
 8007e4a:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END WRITE */
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b096      	sub	sp, #88	; 0x58
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	603a      	str	r2, [r7, #0]
 8007e5e:	71fb      	strb	r3, [r7, #7]
 8007e60:	460b      	mov	r3, r1
 8007e62:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  SD_CardInfo_t CardInfo;

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007e6a:	4b26      	ldr	r3, [pc, #152]	; (8007f04 <USER_ioctl+0xb0>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <USER_ioctl+0x28>
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e03f      	b.n	8007efc <USER_ioctl+0xa8>

	  switch (cmd)
 8007e7c:	79bb      	ldrb	r3, [r7, #6]
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d837      	bhi.n	8007ef2 <USER_ioctl+0x9e>
 8007e82:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <USER_ioctl+0x34>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007e99 	.word	0x08007e99
 8007e8c:	08007ea1 	.word	0x08007ea1
 8007e90:	08007ebb 	.word	0x08007ebb
 8007e94:	08007ed7 	.word	0x08007ed7
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007e9e:	e02b      	b.n	8007ef8 <USER_ioctl+0xa4>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007ea0:	f107 0308 	add.w	r3, r7, #8
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	f7fe ff54 	bl	8006d54 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007eb8:	e01e      	b.n	8007ef8 <USER_ioctl+0xa4>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007eba:	f107 0308 	add.w	r3, r7, #8
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	f7fe ff47 	bl	8006d54 <MY_SD_GetCardInfo>
	    *(WORD*)buff = CardInfo.LogBlockSize;
 8007ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007ed4:	e010      	b.n	8007ef8 <USER_ioctl+0xa4>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007ed6:	f107 0308 	add.w	r3, r7, #8
 8007eda:	4619      	mov	r1, r3
 8007edc:	2000      	movs	r0, #0
 8007ede:	f7fe ff39 	bl	8006d54 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee4:	0a5a      	lsrs	r2, r3, #9
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007ef0:	e002      	b.n	8007ef8 <USER_ioctl+0xa4>

	  default:
	    res = RES_PARERR;
 8007ef2:	2304      	movs	r3, #4
 8007ef4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  }

	  return res;
 8007ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END IOCTL */
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3758      	adds	r7, #88	; 0x58
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	2000000c 	.word	0x2000000c

08007f08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	4a08      	ldr	r2, [pc, #32]	; (8007f38 <disk_status+0x30>)
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	79fa      	ldrb	r2, [r7, #7]
 8007f20:	4905      	ldr	r1, [pc, #20]	; (8007f38 <disk_status+0x30>)
 8007f22:	440a      	add	r2, r1
 8007f24:	7a12      	ldrb	r2, [r2, #8]
 8007f26:	4610      	mov	r0, r2
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	20000254 	.word	0x20000254

08007f3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	4a0d      	ldr	r2, [pc, #52]	; (8007f84 <disk_initialize+0x48>)
 8007f4e:	5cd3      	ldrb	r3, [r2, r3]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d111      	bne.n	8007f78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	4a0b      	ldr	r2, [pc, #44]	; (8007f84 <disk_initialize+0x48>)
 8007f58:	2101      	movs	r1, #1
 8007f5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	4a09      	ldr	r2, [pc, #36]	; (8007f84 <disk_initialize+0x48>)
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	79fa      	ldrb	r2, [r7, #7]
 8007f6a:	4906      	ldr	r1, [pc, #24]	; (8007f84 <disk_initialize+0x48>)
 8007f6c:	440a      	add	r2, r1
 8007f6e:	7a12      	ldrb	r2, [r2, #8]
 8007f70:	4610      	mov	r0, r2
 8007f72:	4798      	blx	r3
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000254 	.word	0x20000254

08007f88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007f88:	b590      	push	{r4, r7, lr}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	607a      	str	r2, [r7, #4]
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	4603      	mov	r3, r0
 8007f96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
 8007f9a:	4a0a      	ldr	r2, [pc, #40]	; (8007fc4 <disk_read+0x3c>)
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	689c      	ldr	r4, [r3, #8]
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	4a07      	ldr	r2, [pc, #28]	; (8007fc4 <disk_read+0x3c>)
 8007fa8:	4413      	add	r3, r2
 8007faa:	7a18      	ldrb	r0, [r3, #8]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	47a0      	blx	r4
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd90      	pop	{r4, r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000254 	.word	0x20000254

08007fc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007fc8:	b590      	push	{r4, r7, lr}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	4a0a      	ldr	r2, [pc, #40]	; (8008004 <disk_write+0x3c>)
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	68dc      	ldr	r4, [r3, #12]
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	4a07      	ldr	r2, [pc, #28]	; (8008004 <disk_write+0x3c>)
 8007fe8:	4413      	add	r3, r2
 8007fea:	7a18      	ldrb	r0, [r3, #8]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	68b9      	ldr	r1, [r7, #8]
 8007ff2:	47a0      	blx	r4
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd90      	pop	{r4, r7, pc}
 8008002:	bf00      	nop
 8008004:	20000254 	.word	0x20000254

08008008 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	603a      	str	r2, [r7, #0]
 8008012:	71fb      	strb	r3, [r7, #7]
 8008014:	460b      	mov	r3, r1
 8008016:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	4a09      	ldr	r2, [pc, #36]	; (8008040 <disk_ioctl+0x38>)
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	79fa      	ldrb	r2, [r7, #7]
 8008026:	4906      	ldr	r1, [pc, #24]	; (8008040 <disk_ioctl+0x38>)
 8008028:	440a      	add	r2, r1
 800802a:	7a10      	ldrb	r0, [r2, #8]
 800802c:	79b9      	ldrb	r1, [r7, #6]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	4798      	blx	r3
 8008032:	4603      	mov	r3, r0
 8008034:	73fb      	strb	r3, [r7, #15]
  return res;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	20000254 	.word	0x20000254

08008044 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3301      	adds	r3, #1
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008054:	89fb      	ldrh	r3, [r7, #14]
 8008056:	021b      	lsls	r3, r3, #8
 8008058:	b21a      	sxth	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	b21b      	sxth	r3, r3
 8008060:	4313      	orrs	r3, r2
 8008062:	b21b      	sxth	r3, r3
 8008064:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008066:	89fb      	ldrh	r3, [r7, #14]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3303      	adds	r3, #3
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	3202      	adds	r2, #2
 800808c:	7812      	ldrb	r2, [r2, #0]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	021b      	lsls	r3, r3, #8
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	3201      	adds	r2, #1
 800809a:	7812      	ldrb	r2, [r2, #0]
 800809c:	4313      	orrs	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	7812      	ldrb	r2, [r2, #0]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80080ac:	68fb      	ldr	r3, [r7, #12]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	460b      	mov	r3, r1
 80080c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	887a      	ldrh	r2, [r7, #2]
 80080ce:	b2d2      	uxtb	r2, r2
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	887b      	ldrh	r3, [r7, #2]
 80080d4:	0a1b      	lsrs	r3, r3, #8
 80080d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	607a      	str	r2, [r7, #4]
 80080de:	887a      	ldrh	r2, [r7, #2]
 80080e0:	b2d2      	uxtb	r2, r2
 80080e2:	701a      	strb	r2, [r3, #0]
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	0a1b      	lsrs	r3, r3, #8
 800810a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	607a      	str	r2, [r7, #4]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	b2d2      	uxtb	r2, r2
 8008116:	701a      	strb	r2, [r3, #0]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	0a1b      	lsrs	r3, r3, #8
 800811c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	0a1b      	lsrs	r3, r3, #8
 800812e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	607a      	str	r2, [r7, #4]
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	b2d2      	uxtb	r2, r2
 800813a:	701a      	strb	r2, [r3, #0]
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00d      	beq.n	800817e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	1c53      	adds	r3, r2, #1
 8008166:	613b      	str	r3, [r7, #16]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	1c59      	adds	r1, r3, #1
 800816c:	6179      	str	r1, [r7, #20]
 800816e:	7812      	ldrb	r2, [r2, #0]
 8008170:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3b01      	subs	r3, #1
 8008176:	607b      	str	r3, [r7, #4]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1f1      	bne.n	8008162 <mem_cpy+0x1a>
	}
}
 800817e:	bf00      	nop
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800818a:	b480      	push	{r7}
 800818c:	b087      	sub	sp, #28
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	617a      	str	r2, [r7, #20]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	607b      	str	r3, [r7, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1f3      	bne.n	800819a <mem_set+0x10>
}
 80081b2:	bf00      	nop
 80081b4:	371c      	adds	r7, #28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80081be:	b480      	push	{r7}
 80081c0:	b089      	sub	sp, #36	; 0x24
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	61fb      	str	r3, [r7, #28]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	61fa      	str	r2, [r7, #28]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	4619      	mov	r1, r3
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	61ba      	str	r2, [r7, #24]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	1acb      	subs	r3, r1, r3
 80081ea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	607b      	str	r3, [r7, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <mem_cmp+0x40>
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0eb      	beq.n	80081d6 <mem_cmp+0x18>

	return r;
 80081fe:	697b      	ldr	r3, [r7, #20]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3724      	adds	r7, #36	; 0x24
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008216:	e002      	b.n	800821e <chk_chr+0x12>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3301      	adds	r3, #1
 800821c:	607b      	str	r3, [r7, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <chk_chr+0x26>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	4293      	cmp	r3, r2
 8008230:	d1f2      	bne.n	8008218 <chk_chr+0xc>
	return *str;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	781b      	ldrb	r3, [r3, #0]
}
 8008236:	4618      	mov	r0, r3
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
	...

08008244 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800824e:	2300      	movs	r3, #0
 8008250:	60bb      	str	r3, [r7, #8]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	e029      	b.n	80082ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008258:	4a27      	ldr	r2, [pc, #156]	; (80082f8 <chk_lock+0xb4>)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	011b      	lsls	r3, r3, #4
 800825e:	4413      	add	r3, r2
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d01d      	beq.n	80082a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008266:	4a24      	ldr	r2, [pc, #144]	; (80082f8 <chk_lock+0xb4>)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	4413      	add	r3, r2
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	429a      	cmp	r2, r3
 8008276:	d116      	bne.n	80082a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008278:	4a1f      	ldr	r2, [pc, #124]	; (80082f8 <chk_lock+0xb4>)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	4413      	add	r3, r2
 8008280:	3304      	adds	r3, #4
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008288:	429a      	cmp	r2, r3
 800828a:	d10c      	bne.n	80082a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800828c:	4a1a      	ldr	r2, [pc, #104]	; (80082f8 <chk_lock+0xb4>)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	011b      	lsls	r3, r3, #4
 8008292:	4413      	add	r3, r2
 8008294:	3308      	adds	r3, #8
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800829c:	429a      	cmp	r2, r3
 800829e:	d102      	bne.n	80082a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80082a0:	e007      	b.n	80082b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80082a2:	2301      	movs	r3, #1
 80082a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3301      	adds	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d9d2      	bls.n	8008258 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d109      	bne.n	80082cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d102      	bne.n	80082c4 <chk_lock+0x80>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d101      	bne.n	80082c8 <chk_lock+0x84>
 80082c4:	2300      	movs	r3, #0
 80082c6:	e010      	b.n	80082ea <chk_lock+0xa6>
 80082c8:	2312      	movs	r3, #18
 80082ca:	e00e      	b.n	80082ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d108      	bne.n	80082e4 <chk_lock+0xa0>
 80082d2:	4a09      	ldr	r2, [pc, #36]	; (80082f8 <chk_lock+0xb4>)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	4413      	add	r3, r2
 80082da:	330c      	adds	r3, #12
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e2:	d101      	bne.n	80082e8 <chk_lock+0xa4>
 80082e4:	2310      	movs	r3, #16
 80082e6:	e000      	b.n	80082ea <chk_lock+0xa6>
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20000234 	.word	0x20000234

080082fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008302:	2300      	movs	r3, #0
 8008304:	607b      	str	r3, [r7, #4]
 8008306:	e002      	b.n	800830e <enq_lock+0x12>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3301      	adds	r3, #1
 800830c:	607b      	str	r3, [r7, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d806      	bhi.n	8008322 <enq_lock+0x26>
 8008314:	4a09      	ldr	r2, [pc, #36]	; (800833c <enq_lock+0x40>)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	011b      	lsls	r3, r3, #4
 800831a:	4413      	add	r3, r2
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f2      	bne.n	8008308 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b02      	cmp	r3, #2
 8008326:	bf14      	ite	ne
 8008328:	2301      	movne	r3, #1
 800832a:	2300      	moveq	r3, #0
 800832c:	b2db      	uxtb	r3, r3
}
 800832e:	4618      	mov	r0, r3
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	20000234 	.word	0x20000234

08008340 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800834a:	2300      	movs	r3, #0
 800834c:	60fb      	str	r3, [r7, #12]
 800834e:	e01f      	b.n	8008390 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008350:	4a41      	ldr	r2, [pc, #260]	; (8008458 <inc_lock+0x118>)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	011b      	lsls	r3, r3, #4
 8008356:	4413      	add	r3, r2
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	429a      	cmp	r2, r3
 8008360:	d113      	bne.n	800838a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008362:	4a3d      	ldr	r2, [pc, #244]	; (8008458 <inc_lock+0x118>)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	4413      	add	r3, r2
 800836a:	3304      	adds	r3, #4
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008372:	429a      	cmp	r2, r3
 8008374:	d109      	bne.n	800838a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008376:	4a38      	ldr	r2, [pc, #224]	; (8008458 <inc_lock+0x118>)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	011b      	lsls	r3, r3, #4
 800837c:	4413      	add	r3, r2
 800837e:	3308      	adds	r3, #8
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008386:	429a      	cmp	r2, r3
 8008388:	d006      	beq.n	8008398 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d9dc      	bls.n	8008350 <inc_lock+0x10>
 8008396:	e000      	b.n	800839a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008398:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d132      	bne.n	8008406 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80083a0:	2300      	movs	r3, #0
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	e002      	b.n	80083ac <inc_lock+0x6c>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d806      	bhi.n	80083c0 <inc_lock+0x80>
 80083b2:	4a29      	ldr	r2, [pc, #164]	; (8008458 <inc_lock+0x118>)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	011b      	lsls	r3, r3, #4
 80083b8:	4413      	add	r3, r2
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1f2      	bne.n	80083a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d101      	bne.n	80083ca <inc_lock+0x8a>
 80083c6:	2300      	movs	r3, #0
 80083c8:	e040      	b.n	800844c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4922      	ldr	r1, [pc, #136]	; (8008458 <inc_lock+0x118>)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	440b      	add	r3, r1
 80083d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	491e      	ldr	r1, [pc, #120]	; (8008458 <inc_lock+0x118>)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	440b      	add	r3, r1
 80083e4:	3304      	adds	r3, #4
 80083e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	695a      	ldr	r2, [r3, #20]
 80083ec:	491a      	ldr	r1, [pc, #104]	; (8008458 <inc_lock+0x118>)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	440b      	add	r3, r1
 80083f4:	3308      	adds	r3, #8
 80083f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80083f8:	4a17      	ldr	r2, [pc, #92]	; (8008458 <inc_lock+0x118>)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	011b      	lsls	r3, r3, #4
 80083fe:	4413      	add	r3, r2
 8008400:	330c      	adds	r3, #12
 8008402:	2200      	movs	r2, #0
 8008404:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <inc_lock+0xe0>
 800840c:	4a12      	ldr	r2, [pc, #72]	; (8008458 <inc_lock+0x118>)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	011b      	lsls	r3, r3, #4
 8008412:	4413      	add	r3, r2
 8008414:	330c      	adds	r3, #12
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <inc_lock+0xe0>
 800841c:	2300      	movs	r3, #0
 800841e:	e015      	b.n	800844c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d108      	bne.n	8008438 <inc_lock+0xf8>
 8008426:	4a0c      	ldr	r2, [pc, #48]	; (8008458 <inc_lock+0x118>)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	011b      	lsls	r3, r3, #4
 800842c:	4413      	add	r3, r2
 800842e:	330c      	adds	r3, #12
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	3301      	adds	r3, #1
 8008434:	b29a      	uxth	r2, r3
 8008436:	e001      	b.n	800843c <inc_lock+0xfc>
 8008438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800843c:	4906      	ldr	r1, [pc, #24]	; (8008458 <inc_lock+0x118>)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	440b      	add	r3, r1
 8008444:	330c      	adds	r3, #12
 8008446:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	20000234 	.word	0x20000234

0800845c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3b01      	subs	r3, #1
 8008468:	607b      	str	r3, [r7, #4]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d825      	bhi.n	80084bc <dec_lock+0x60>
		n = Files[i].ctr;
 8008470:	4a17      	ldr	r2, [pc, #92]	; (80084d0 <dec_lock+0x74>)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	011b      	lsls	r3, r3, #4
 8008476:	4413      	add	r3, r2
 8008478:	330c      	adds	r3, #12
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800847e:	89fb      	ldrh	r3, [r7, #14]
 8008480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008484:	d101      	bne.n	800848a <dec_lock+0x2e>
 8008486:	2300      	movs	r3, #0
 8008488:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800848a:	89fb      	ldrh	r3, [r7, #14]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <dec_lock+0x3a>
 8008490:	89fb      	ldrh	r3, [r7, #14]
 8008492:	3b01      	subs	r3, #1
 8008494:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008496:	4a0e      	ldr	r2, [pc, #56]	; (80084d0 <dec_lock+0x74>)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	4413      	add	r3, r2
 800849e:	330c      	adds	r3, #12
 80084a0:	89fa      	ldrh	r2, [r7, #14]
 80084a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80084a4:	89fb      	ldrh	r3, [r7, #14]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d105      	bne.n	80084b6 <dec_lock+0x5a>
 80084aa:	4a09      	ldr	r2, [pc, #36]	; (80084d0 <dec_lock+0x74>)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	4413      	add	r3, r2
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	737b      	strb	r3, [r7, #13]
 80084ba:	e001      	b.n	80084c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80084bc:	2302      	movs	r3, #2
 80084be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80084c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	20000234 	.word	0x20000234

080084d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80084dc:	2300      	movs	r3, #0
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	e010      	b.n	8008504 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80084e2:	4a0d      	ldr	r2, [pc, #52]	; (8008518 <clear_lock+0x44>)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	4413      	add	r3, r2
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d105      	bne.n	80084fe <clear_lock+0x2a>
 80084f2:	4a09      	ldr	r2, [pc, #36]	; (8008518 <clear_lock+0x44>)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	4413      	add	r3, r2
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d9eb      	bls.n	80084e2 <clear_lock+0xe>
	}
}
 800850a:	bf00      	nop
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	20000234 	.word	0x20000234

0800851c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	78db      	ldrb	r3, [r3, #3]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d034      	beq.n	800859a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	7858      	ldrb	r0, [r3, #1]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008540:	2301      	movs	r3, #1
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	f7ff fd40 	bl	8007fc8 <disk_write>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <sync_window+0x38>
			res = FR_DISK_ERR;
 800854e:	2301      	movs	r3, #1
 8008550:	73fb      	strb	r3, [r7, #15]
 8008552:	e022      	b.n	800859a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	1ad2      	subs	r2, r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	429a      	cmp	r2, r3
 8008568:	d217      	bcs.n	800859a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	789b      	ldrb	r3, [r3, #2]
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	e010      	b.n	8008594 <sync_window+0x78>
					wsect += fs->fsize;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4413      	add	r3, r2
 800857a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	7858      	ldrb	r0, [r3, #1]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008586:	2301      	movs	r3, #1
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	f7ff fd1d 	bl	8007fc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	3b01      	subs	r3, #1
 8008592:	613b      	str	r3, [r7, #16]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d8eb      	bhi.n	8008572 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d01b      	beq.n	80085f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7ff ffad 	bl	800851c <sync_window>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d113      	bne.n	80085f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7858      	ldrb	r0, [r3, #1]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085d6:	2301      	movs	r3, #1
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	f7ff fcd5 	bl	8007f88 <disk_read>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d004      	beq.n	80085ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80085e4:	f04f 33ff 	mov.w	r3, #4294967295
 80085e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7ff ff87 	bl	800851c <sync_window>
 800860e:	4603      	mov	r3, r0
 8008610:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d158      	bne.n	80086ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b03      	cmp	r3, #3
 800861e:	d148      	bne.n	80086b2 <sync_fs+0xb2>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	791b      	ldrb	r3, [r3, #4]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d144      	bne.n	80086b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3330      	adds	r3, #48	; 0x30
 800862c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff fda9 	bl	800818a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3330      	adds	r3, #48	; 0x30
 800863c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008640:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff fd38 	bl	80080ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3330      	adds	r3, #48	; 0x30
 800864e:	4921      	ldr	r1, [pc, #132]	; (80086d4 <sync_fs+0xd4>)
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff fd4d 	bl	80080f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3330      	adds	r3, #48	; 0x30
 800865a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800865e:	491e      	ldr	r1, [pc, #120]	; (80086d8 <sync_fs+0xd8>)
 8008660:	4618      	mov	r0, r3
 8008662:	f7ff fd45 	bl	80080f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3330      	adds	r3, #48	; 0x30
 800866a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	4619      	mov	r1, r3
 8008674:	4610      	mov	r0, r2
 8008676:	f7ff fd3b 	bl	80080f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	3330      	adds	r3, #48	; 0x30
 800867e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f7ff fd31 	bl	80080f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	7858      	ldrb	r0, [r3, #1]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a6:	2301      	movs	r3, #1
 80086a8:	f7ff fc8e 	bl	8007fc8 <disk_write>
			fs->fsi_flag = 0;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	785b      	ldrb	r3, [r3, #1]
 80086b6:	2200      	movs	r2, #0
 80086b8:	2100      	movs	r1, #0
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7ff fca4 	bl	8008008 <disk_ioctl>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <sync_fs+0xca>
 80086c6:	2301      	movs	r3, #1
 80086c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	41615252 	.word	0x41615252
 80086d8:	61417272 	.word	0x61417272

080086dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	3b02      	subs	r3, #2
 80086ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	3b02      	subs	r3, #2
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d301      	bcc.n	80086fc <clust2sect+0x20>
 80086f8:	2300      	movs	r3, #0
 80086fa:	e008      	b.n	800870e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	895b      	ldrh	r3, [r3, #10]
 8008700:	461a      	mov	r2, r3
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	fb03 f202 	mul.w	r2, r3, r2
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870c:	4413      	add	r3, r2
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b086      	sub	sp, #24
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d904      	bls.n	800873a <get_fat+0x20>
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	d302      	bcc.n	8008740 <get_fat+0x26>
		val = 1;	/* Internal error */
 800873a:	2301      	movs	r3, #1
 800873c:	617b      	str	r3, [r7, #20]
 800873e:	e08c      	b.n	800885a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008740:	f04f 33ff 	mov.w	r3, #4294967295
 8008744:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d045      	beq.n	80087da <get_fat+0xc0>
 800874e:	2b03      	cmp	r3, #3
 8008750:	d05d      	beq.n	800880e <get_fat+0xf4>
 8008752:	2b01      	cmp	r3, #1
 8008754:	d177      	bne.n	8008846 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	4413      	add	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	6a1a      	ldr	r2, [r3, #32]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	0a5b      	lsrs	r3, r3, #9
 800876c:	4413      	add	r3, r2
 800876e:	4619      	mov	r1, r3
 8008770:	6938      	ldr	r0, [r7, #16]
 8008772:	f7ff ff17 	bl	80085a4 <move_window>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d167      	bne.n	800884c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	1c5a      	adds	r2, r3, #1
 8008780:	60fa      	str	r2, [r7, #12]
 8008782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4413      	add	r3, r2
 800878a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800878e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	6a1a      	ldr	r2, [r3, #32]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	0a5b      	lsrs	r3, r3, #9
 8008798:	4413      	add	r3, r2
 800879a:	4619      	mov	r1, r3
 800879c:	6938      	ldr	r0, [r7, #16]
 800879e:	f7ff ff01 	bl	80085a4 <move_window>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d153      	bne.n	8008850 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	4413      	add	r3, r2
 80087b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087b6:	021b      	lsls	r3, r3, #8
 80087b8:	461a      	mov	r2, r3
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d002      	beq.n	80087d0 <get_fat+0xb6>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	091b      	lsrs	r3, r3, #4
 80087ce:	e002      	b.n	80087d6 <get_fat+0xbc>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087d6:	617b      	str	r3, [r7, #20]
			break;
 80087d8:	e03f      	b.n	800885a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6a1a      	ldr	r2, [r3, #32]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	0a1b      	lsrs	r3, r3, #8
 80087e2:	4413      	add	r3, r2
 80087e4:	4619      	mov	r1, r3
 80087e6:	6938      	ldr	r0, [r7, #16]
 80087e8:	f7ff fedc 	bl	80085a4 <move_window>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d130      	bne.n	8008854 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008800:	4413      	add	r3, r2
 8008802:	4618      	mov	r0, r3
 8008804:	f7ff fc1e 	bl	8008044 <ld_word>
 8008808:	4603      	mov	r3, r0
 800880a:	617b      	str	r3, [r7, #20]
			break;
 800880c:	e025      	b.n	800885a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	6a1a      	ldr	r2, [r3, #32]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	09db      	lsrs	r3, r3, #7
 8008816:	4413      	add	r3, r2
 8008818:	4619      	mov	r1, r3
 800881a:	6938      	ldr	r0, [r7, #16]
 800881c:	f7ff fec2 	bl	80085a4 <move_window>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d118      	bne.n	8008858 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008834:	4413      	add	r3, r2
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff fc1c 	bl	8008074 <ld_dword>
 800883c:	4603      	mov	r3, r0
 800883e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008842:	617b      	str	r3, [r7, #20]
			break;
 8008844:	e009      	b.n	800885a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008846:	2301      	movs	r3, #1
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	e006      	b.n	800885a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800884c:	bf00      	nop
 800884e:	e004      	b.n	800885a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008850:	bf00      	nop
 8008852:	e002      	b.n	800885a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008854:	bf00      	nop
 8008856:	e000      	b.n	800885a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008858:	bf00      	nop
		}
	}

	return val;
 800885a:	697b      	ldr	r3, [r7, #20]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3718      	adds	r7, #24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008864:	b590      	push	{r4, r7, lr}
 8008866:	b089      	sub	sp, #36	; 0x24
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008870:	2302      	movs	r3, #2
 8008872:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b01      	cmp	r3, #1
 8008878:	f240 80d6 	bls.w	8008a28 <put_fat+0x1c4>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	429a      	cmp	r2, r3
 8008884:	f080 80d0 	bcs.w	8008a28 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b02      	cmp	r3, #2
 800888e:	d073      	beq.n	8008978 <put_fat+0x114>
 8008890:	2b03      	cmp	r3, #3
 8008892:	f000 8091 	beq.w	80089b8 <put_fat+0x154>
 8008896:	2b01      	cmp	r3, #1
 8008898:	f040 80c6 	bne.w	8008a28 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	61bb      	str	r3, [r7, #24]
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	4413      	add	r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a1a      	ldr	r2, [r3, #32]
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	0a5b      	lsrs	r3, r3, #9
 80088b2:	4413      	add	r3, r2
 80088b4:	4619      	mov	r1, r3
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f7ff fe74 	bl	80085a4 <move_window>
 80088bc:	4603      	mov	r3, r0
 80088be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80088c0:	7ffb      	ldrb	r3, [r7, #31]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f040 80a9 	bne.w	8008a1a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	1c59      	adds	r1, r3, #1
 80088d2:	61b9      	str	r1, [r7, #24]
 80088d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d8:	4413      	add	r3, r2
 80088da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00d      	beq.n	8008902 <put_fat+0x9e>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	b25b      	sxtb	r3, r3
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	b25a      	sxtb	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	011b      	lsls	r3, r3, #4
 80088f8:	b25b      	sxtb	r3, r3
 80088fa:	4313      	orrs	r3, r2
 80088fc:	b25b      	sxtb	r3, r3
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	e001      	b.n	8008906 <put_fat+0xa2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2201      	movs	r2, #1
 800890e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a1a      	ldr	r2, [r3, #32]
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	0a5b      	lsrs	r3, r3, #9
 8008918:	4413      	add	r3, r2
 800891a:	4619      	mov	r1, r3
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f7ff fe41 	bl	80085a4 <move_window>
 8008922:	4603      	mov	r3, r0
 8008924:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008926:	7ffb      	ldrb	r3, [r7, #31]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d178      	bne.n	8008a1e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008938:	4413      	add	r3, r2
 800893a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <put_fat+0xea>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	091b      	lsrs	r3, r3, #4
 800894a:	b2db      	uxtb	r3, r3
 800894c:	e00e      	b.n	800896c <put_fat+0x108>
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	b25b      	sxtb	r3, r3
 8008954:	f023 030f 	bic.w	r3, r3, #15
 8008958:	b25a      	sxtb	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	0a1b      	lsrs	r3, r3, #8
 800895e:	b25b      	sxtb	r3, r3
 8008960:	f003 030f 	and.w	r3, r3, #15
 8008964:	b25b      	sxtb	r3, r3
 8008966:	4313      	orrs	r3, r2
 8008968:	b25b      	sxtb	r3, r3
 800896a:	b2db      	uxtb	r3, r3
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2201      	movs	r2, #1
 8008974:	70da      	strb	r2, [r3, #3]
			break;
 8008976:	e057      	b.n	8008a28 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6a1a      	ldr	r2, [r3, #32]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	0a1b      	lsrs	r3, r3, #8
 8008980:	4413      	add	r3, r2
 8008982:	4619      	mov	r1, r3
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f7ff fe0d 	bl	80085a4 <move_window>
 800898a:	4603      	mov	r3, r0
 800898c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800898e:	7ffb      	ldrb	r3, [r7, #31]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d146      	bne.n	8008a22 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80089a2:	4413      	add	r3, r2
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	b292      	uxth	r2, r2
 80089a8:	4611      	mov	r1, r2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7ff fb85 	bl	80080ba <st_word>
			fs->wflag = 1;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2201      	movs	r2, #1
 80089b4:	70da      	strb	r2, [r3, #3]
			break;
 80089b6:	e037      	b.n	8008a28 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6a1a      	ldr	r2, [r3, #32]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	09db      	lsrs	r3, r3, #7
 80089c0:	4413      	add	r3, r2
 80089c2:	4619      	mov	r1, r3
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f7ff fded 	bl	80085a4 <move_window>
 80089ca:	4603      	mov	r3, r0
 80089cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089ce:	7ffb      	ldrb	r3, [r7, #31]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d128      	bne.n	8008a26 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80089e8:	4413      	add	r3, r2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fb42 	bl	8008074 <ld_dword>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80089f6:	4323      	orrs	r3, r4
 80089f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008a08:	4413      	add	r3, r2
 8008a0a:	6879      	ldr	r1, [r7, #4]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff fb6f 	bl	80080f0 <st_dword>
			fs->wflag = 1;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	70da      	strb	r2, [r3, #3]
			break;
 8008a18:	e006      	b.n	8008a28 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008a1a:	bf00      	nop
 8008a1c:	e004      	b.n	8008a28 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008a1e:	bf00      	nop
 8008a20:	e002      	b.n	8008a28 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008a22:	bf00      	nop
 8008a24:	e000      	b.n	8008a28 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008a26:	bf00      	nop
		}
	}
	return res;
 8008a28:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3724      	adds	r7, #36	; 0x24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd90      	pop	{r4, r7, pc}

08008a32 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b088      	sub	sp, #32
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d904      	bls.n	8008a58 <remove_chain+0x26>
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d301      	bcc.n	8008a5c <remove_chain+0x2a>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e04b      	b.n	8008af4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00c      	beq.n	8008a7c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008a62:	f04f 32ff 	mov.w	r2, #4294967295
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	69b8      	ldr	r0, [r7, #24]
 8008a6a:	f7ff fefb 	bl	8008864 <put_fat>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008a72:	7ffb      	ldrb	r3, [r7, #31]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <remove_chain+0x4a>
 8008a78:	7ffb      	ldrb	r3, [r7, #31]
 8008a7a:	e03b      	b.n	8008af4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008a7c:	68b9      	ldr	r1, [r7, #8]
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f7ff fe4b 	bl	800871a <get_fat>
 8008a84:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d031      	beq.n	8008af0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d101      	bne.n	8008a96 <remove_chain+0x64>
 8008a92:	2302      	movs	r3, #2
 8008a94:	e02e      	b.n	8008af4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9c:	d101      	bne.n	8008aa2 <remove_chain+0x70>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e028      	b.n	8008af4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	69b8      	ldr	r0, [r7, #24]
 8008aa8:	f7ff fedc 	bl	8008864 <put_fat>
 8008aac:	4603      	mov	r3, r0
 8008aae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008ab0:	7ffb      	ldrb	r3, [r7, #31]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <remove_chain+0x88>
 8008ab6:	7ffb      	ldrb	r3, [r7, #31]
 8008ab8:	e01c      	b.n	8008af4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	691a      	ldr	r2, [r3, #16]
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	3b02      	subs	r3, #2
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d20b      	bcs.n	8008ae0 <remove_chain+0xae>
			fs->free_clst++;
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	791b      	ldrb	r3, [r3, #4]
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d3c6      	bcc.n	8008a7c <remove_chain+0x4a>
 8008aee:	e000      	b.n	8008af2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008af0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3720      	adds	r7, #32
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b088      	sub	sp, #32
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10d      	bne.n	8008b2e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d004      	beq.n	8008b28 <create_chain+0x2c>
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d31b      	bcc.n	8008b60 <create_chain+0x64>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	61bb      	str	r3, [r7, #24]
 8008b2c:	e018      	b.n	8008b60 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff fdf2 	bl	800871a <get_fat>
 8008b36:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d801      	bhi.n	8008b42 <create_chain+0x46>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e070      	b.n	8008c24 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b48:	d101      	bne.n	8008b4e <create_chain+0x52>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	e06a      	b.n	8008c24 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d201      	bcs.n	8008b5c <create_chain+0x60>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	e063      	b.n	8008c24 <create_chain+0x128>
		scl = clst;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	3301      	adds	r3, #1
 8008b68:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	69fa      	ldr	r2, [r7, #28]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d307      	bcc.n	8008b84 <create_chain+0x88>
				ncl = 2;
 8008b74:	2302      	movs	r3, #2
 8008b76:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d901      	bls.n	8008b84 <create_chain+0x88>
 8008b80:	2300      	movs	r3, #0
 8008b82:	e04f      	b.n	8008c24 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008b84:	69f9      	ldr	r1, [r7, #28]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff fdc7 	bl	800871a <get_fat>
 8008b8c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00e      	beq.n	8008bb2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d003      	beq.n	8008ba2 <create_chain+0xa6>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba0:	d101      	bne.n	8008ba6 <create_chain+0xaa>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	e03e      	b.n	8008c24 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d1da      	bne.n	8008b64 <create_chain+0x68>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e038      	b.n	8008c24 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008bb2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb8:	69f9      	ldr	r1, [r7, #28]
 8008bba:	6938      	ldr	r0, [r7, #16]
 8008bbc:	f7ff fe52 	bl	8008864 <put_fat>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d109      	bne.n	8008bde <create_chain+0xe2>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d006      	beq.n	8008bde <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008bd0:	69fa      	ldr	r2, [r7, #28]
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6938      	ldr	r0, [r7, #16]
 8008bd6:	f7ff fe45 	bl	8008864 <put_fat>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d116      	bne.n	8008c12 <create_chain+0x116>
		fs->last_clst = ncl;
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	691a      	ldr	r2, [r3, #16]
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	3b02      	subs	r3, #2
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d804      	bhi.n	8008c02 <create_chain+0x106>
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	1e5a      	subs	r2, r3, #1
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	791b      	ldrb	r3, [r3, #4]
 8008c06:	f043 0301 	orr.w	r3, r3, #1
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	711a      	strb	r2, [r3, #4]
 8008c10:	e007      	b.n	8008c22 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d102      	bne.n	8008c1e <create_chain+0x122>
 8008c18:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1c:	e000      	b.n	8008c20 <create_chain+0x124>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008c22:	69fb      	ldr	r3, [r7, #28]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3720      	adds	r7, #32
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	3304      	adds	r3, #4
 8008c42:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	0a5b      	lsrs	r3, r3, #9
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	8952      	ldrh	r2, [r2, #10]
 8008c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c50:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1d1a      	adds	r2, r3, #4
 8008c56:	613a      	str	r2, [r7, #16]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <clmt_clust+0x3a>
 8008c62:	2300      	movs	r3, #0
 8008c64:	e010      	b.n	8008c88 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d307      	bcc.n	8008c7e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	617b      	str	r3, [r7, #20]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c7c:	e7e9      	b.n	8008c52 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008c7e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	4413      	add	r3, r2
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	371c      	adds	r7, #28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008caa:	d204      	bcs.n	8008cb6 <dir_sdi+0x22>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	f003 031f 	and.w	r3, r3, #31
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <dir_sdi+0x26>
		return FR_INT_ERR;
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e063      	b.n	8008d82 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d106      	bne.n	8008cda <dir_sdi+0x46>
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d902      	bls.n	8008cda <dir_sdi+0x46>
		clst = fs->dirbase;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10c      	bne.n	8008cfa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	095b      	lsrs	r3, r3, #5
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	8912      	ldrh	r2, [r2, #8]
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d301      	bcc.n	8008cf0 <dir_sdi+0x5c>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e048      	b.n	8008d82 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	61da      	str	r2, [r3, #28]
 8008cf8:	e029      	b.n	8008d4e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	895b      	ldrh	r3, [r3, #10]
 8008cfe:	025b      	lsls	r3, r3, #9
 8008d00:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d02:	e019      	b.n	8008d38 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6979      	ldr	r1, [r7, #20]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff fd06 	bl	800871a <get_fat>
 8008d0e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d101      	bne.n	8008d1c <dir_sdi+0x88>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e032      	b.n	8008d82 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d904      	bls.n	8008d2c <dir_sdi+0x98>
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d301      	bcc.n	8008d30 <dir_sdi+0x9c>
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	e028      	b.n	8008d82 <dir_sdi+0xee>
			ofs -= csz;
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d2e1      	bcs.n	8008d04 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008d40:	6979      	ldr	r1, [r7, #20]
 8008d42:	6938      	ldr	r0, [r7, #16]
 8008d44:	f7ff fcca 	bl	80086dc <clust2sect>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d101      	bne.n	8008d60 <dir_sdi+0xcc>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e010      	b.n	8008d82 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	69da      	ldr	r2, [r3, #28]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	0a5b      	lsrs	r3, r3, #9
 8008d68:	441a      	add	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	441a      	add	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b086      	sub	sp, #24
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	3320      	adds	r3, #32
 8008da0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <dir_next+0x28>
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008db0:	d301      	bcc.n	8008db6 <dir_next+0x2c>
 8008db2:	2304      	movs	r3, #4
 8008db4:	e0aa      	b.n	8008f0c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f040 8098 	bne.w	8008ef2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10b      	bne.n	8008dec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	095b      	lsrs	r3, r3, #5
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	8912      	ldrh	r2, [r2, #8]
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	f0c0 8088 	bcc.w	8008ef2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	61da      	str	r2, [r3, #28]
 8008de8:	2304      	movs	r3, #4
 8008dea:	e08f      	b.n	8008f0c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	0a5b      	lsrs	r3, r3, #9
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	8952      	ldrh	r2, [r2, #10]
 8008df4:	3a01      	subs	r2, #1
 8008df6:	4013      	ands	r3, r2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d17a      	bne.n	8008ef2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	4619      	mov	r1, r3
 8008e04:	4610      	mov	r0, r2
 8008e06:	f7ff fc88 	bl	800871a <get_fat>
 8008e0a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d801      	bhi.n	8008e16 <dir_next+0x8c>
 8008e12:	2302      	movs	r3, #2
 8008e14:	e07a      	b.n	8008f0c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1c:	d101      	bne.n	8008e22 <dir_next+0x98>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e074      	b.n	8008f0c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d358      	bcc.n	8008ede <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d104      	bne.n	8008e3c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	61da      	str	r2, [r3, #28]
 8008e38:	2304      	movs	r3, #4
 8008e3a:	e067      	b.n	8008f0c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f7ff fe59 	bl	8008afc <create_chain>
 8008e4a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <dir_next+0xcc>
 8008e52:	2307      	movs	r3, #7
 8008e54:	e05a      	b.n	8008f0c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d101      	bne.n	8008e60 <dir_next+0xd6>
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	e055      	b.n	8008f0c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e66:	d101      	bne.n	8008e6c <dir_next+0xe2>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e04f      	b.n	8008f0c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7ff fb55 	bl	800851c <sync_window>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <dir_next+0xf2>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e047      	b.n	8008f0c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3330      	adds	r3, #48	; 0x30
 8008e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e84:	2100      	movs	r1, #0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7ff f97f 	bl	800818a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	613b      	str	r3, [r7, #16]
 8008e90:	6979      	ldr	r1, [r7, #20]
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f7ff fc22 	bl	80086dc <clust2sect>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e9e:	e012      	b.n	8008ec6 <dir_next+0x13c>
						fs->wflag = 1;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f7ff fb38 	bl	800851c <sync_window>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <dir_next+0x12c>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e02a      	b.n	8008f0c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	613b      	str	r3, [r7, #16]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	895b      	ldrh	r3, [r3, #10]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d3e6      	bcc.n	8008ea0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1ad2      	subs	r2, r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008ee4:	6979      	ldr	r1, [r7, #20]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f7ff fbf8 	bl	80086dc <clust2sect>
 8008eec:	4602      	mov	r2, r0
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f04:	441a      	add	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008f24:	2100      	movs	r1, #0
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff feb4 	bl	8008c94 <dir_sdi>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d12b      	bne.n	8008f8e <dir_alloc+0x7a>
		n = 0;
 8008f36:	2300      	movs	r3, #0
 8008f38:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f7ff fb2f 	bl	80085a4 <move_window>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d11d      	bne.n	8008f8c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a1b      	ldr	r3, [r3, #32]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2be5      	cmp	r3, #229	; 0xe5
 8008f58:	d004      	beq.n	8008f64 <dir_alloc+0x50>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d107      	bne.n	8008f74 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	3301      	adds	r3, #1
 8008f68:	613b      	str	r3, [r7, #16]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d102      	bne.n	8008f78 <dir_alloc+0x64>
 8008f72:	e00c      	b.n	8008f8e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008f78:	2101      	movs	r1, #1
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff ff05 	bl	8008d8a <dir_next>
 8008f80:	4603      	mov	r3, r0
 8008f82:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d0d7      	beq.n	8008f3a <dir_alloc+0x26>
 8008f8a:	e000      	b.n	8008f8e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008f8c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d101      	bne.n	8008f98 <dir_alloc+0x84>
 8008f94:	2307      	movs	r3, #7
 8008f96:	75fb      	strb	r3, [r7, #23]
	return res;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	331a      	adds	r3, #26
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff f847 	bl	8008044 <ld_word>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d109      	bne.n	8008fd6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	3314      	adds	r3, #20
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff f83c 	bl	8008044 <ld_word>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	041b      	lsls	r3, r3, #16
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	331a      	adds	r3, #26
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	b292      	uxth	r2, r2
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff f85f 	bl	80080ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2b03      	cmp	r3, #3
 8009002:	d109      	bne.n	8009018 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f103 0214 	add.w	r2, r3, #20
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	0c1b      	lsrs	r3, r3, #16
 800900e:	b29b      	uxth	r3, r3
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f7ff f851 	bl	80080ba <st_word>
	}
}
 8009018:	bf00      	nop
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800902e:	2100      	movs	r1, #0
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff fe2f 	bl	8008c94 <dir_sdi>
 8009036:	4603      	mov	r3, r0
 8009038:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <dir_find+0x24>
 8009040:	7dfb      	ldrb	r3, [r7, #23]
 8009042:	e03e      	b.n	80090c2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	4619      	mov	r1, r3
 800904a:	6938      	ldr	r0, [r7, #16]
 800904c:	f7ff faaa 	bl	80085a4 <move_window>
 8009050:	4603      	mov	r3, r0
 8009052:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009054:	7dfb      	ldrb	r3, [r7, #23]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d12f      	bne.n	80090ba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <dir_find+0x4e>
 8009068:	2304      	movs	r3, #4
 800906a:	75fb      	strb	r3, [r7, #23]
 800906c:	e028      	b.n	80090c0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	330b      	adds	r3, #11
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800907a:	b2da      	uxtb	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	330b      	adds	r3, #11
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	f003 0308 	and.w	r3, r3, #8
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <dir_find+0x86>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a18      	ldr	r0, [r3, #32]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3324      	adds	r3, #36	; 0x24
 8009098:	220b      	movs	r2, #11
 800909a:	4619      	mov	r1, r3
 800909c:	f7ff f88f 	bl	80081be <mem_cmp>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80090a6:	2100      	movs	r1, #0
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff fe6e 	bl	8008d8a <dir_next>
 80090ae:	4603      	mov	r3, r0
 80090b0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0c5      	beq.n	8009044 <dir_find+0x24>
 80090b8:	e002      	b.n	80090c0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80090ba:	bf00      	nop
 80090bc:	e000      	b.n	80090c0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80090be:	bf00      	nop

	return res;
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3718      	adds	r7, #24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b084      	sub	sp, #16
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80090d8:	2101      	movs	r1, #1
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7ff ff1a 	bl	8008f14 <dir_alloc>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d11c      	bne.n	8009124 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	4619      	mov	r1, r3
 80090f0:	68b8      	ldr	r0, [r7, #8]
 80090f2:	f7ff fa57 	bl	80085a4 <move_window>
 80090f6:	4603      	mov	r3, r0
 80090f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d111      	bne.n	8009124 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	2220      	movs	r2, #32
 8009106:	2100      	movs	r1, #0
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff f83e 	bl	800818a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a18      	ldr	r0, [r3, #32]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3324      	adds	r3, #36	; 0x24
 8009116:	220b      	movs	r2, #11
 8009118:	4619      	mov	r1, r3
 800911a:	f7ff f815 	bl	8008148 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2201      	movs	r2, #1
 8009122:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009124:	7bfb      	ldrb	r3, [r7, #15]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
	...

08009130 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3324      	adds	r3, #36	; 0x24
 8009144:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009146:	220b      	movs	r2, #11
 8009148:	2120      	movs	r1, #32
 800914a:	68b8      	ldr	r0, [r7, #8]
 800914c:	f7ff f81d 	bl	800818a <mem_set>
	si = i = 0; ni = 8;
 8009150:	2300      	movs	r3, #0
 8009152:	613b      	str	r3, [r7, #16]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	2308      	movs	r3, #8
 800915a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	617a      	str	r2, [r7, #20]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	4413      	add	r3, r2
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800916a:	7ffb      	ldrb	r3, [r7, #31]
 800916c:	2b20      	cmp	r3, #32
 800916e:	d94e      	bls.n	800920e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009170:	7ffb      	ldrb	r3, [r7, #31]
 8009172:	2b2f      	cmp	r3, #47	; 0x2f
 8009174:	d006      	beq.n	8009184 <create_name+0x54>
 8009176:	7ffb      	ldrb	r3, [r7, #31]
 8009178:	2b5c      	cmp	r3, #92	; 0x5c
 800917a:	d110      	bne.n	800919e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800917c:	e002      	b.n	8009184 <create_name+0x54>
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	3301      	adds	r3, #1
 8009182:	617b      	str	r3, [r7, #20]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	4413      	add	r3, r2
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2b2f      	cmp	r3, #47	; 0x2f
 800918e:	d0f6      	beq.n	800917e <create_name+0x4e>
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	4413      	add	r3, r2
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b5c      	cmp	r3, #92	; 0x5c
 800919a:	d0f0      	beq.n	800917e <create_name+0x4e>
			break;
 800919c:	e038      	b.n	8009210 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800919e:	7ffb      	ldrb	r3, [r7, #31]
 80091a0:	2b2e      	cmp	r3, #46	; 0x2e
 80091a2:	d003      	beq.n	80091ac <create_name+0x7c>
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d30c      	bcc.n	80091c6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	2b0b      	cmp	r3, #11
 80091b0:	d002      	beq.n	80091b8 <create_name+0x88>
 80091b2:	7ffb      	ldrb	r3, [r7, #31]
 80091b4:	2b2e      	cmp	r3, #46	; 0x2e
 80091b6:	d001      	beq.n	80091bc <create_name+0x8c>
 80091b8:	2306      	movs	r3, #6
 80091ba:	e044      	b.n	8009246 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80091bc:	2308      	movs	r3, #8
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	230b      	movs	r3, #11
 80091c2:	61bb      	str	r3, [r7, #24]
			continue;
 80091c4:	e022      	b.n	800920c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80091c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	da04      	bge.n	80091d8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80091ce:	7ffb      	ldrb	r3, [r7, #31]
 80091d0:	3b80      	subs	r3, #128	; 0x80
 80091d2:	4a1f      	ldr	r2, [pc, #124]	; (8009250 <create_name+0x120>)
 80091d4:	5cd3      	ldrb	r3, [r2, r3]
 80091d6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80091d8:	7ffb      	ldrb	r3, [r7, #31]
 80091da:	4619      	mov	r1, r3
 80091dc:	481d      	ldr	r0, [pc, #116]	; (8009254 <create_name+0x124>)
 80091de:	f7ff f815 	bl	800820c <chk_chr>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <create_name+0xbc>
 80091e8:	2306      	movs	r3, #6
 80091ea:	e02c      	b.n	8009246 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80091ec:	7ffb      	ldrb	r3, [r7, #31]
 80091ee:	2b60      	cmp	r3, #96	; 0x60
 80091f0:	d905      	bls.n	80091fe <create_name+0xce>
 80091f2:	7ffb      	ldrb	r3, [r7, #31]
 80091f4:	2b7a      	cmp	r3, #122	; 0x7a
 80091f6:	d802      	bhi.n	80091fe <create_name+0xce>
 80091f8:	7ffb      	ldrb	r3, [r7, #31]
 80091fa:	3b20      	subs	r3, #32
 80091fc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	1c5a      	adds	r2, r3, #1
 8009202:	613a      	str	r2, [r7, #16]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	4413      	add	r3, r2
 8009208:	7ffa      	ldrb	r2, [r7, #31]
 800920a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800920c:	e7a6      	b.n	800915c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800920e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	441a      	add	r2, r3
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <create_name+0xf4>
 8009220:	2306      	movs	r3, #6
 8009222:	e010      	b.n	8009246 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2be5      	cmp	r3, #229	; 0xe5
 800922a:	d102      	bne.n	8009232 <create_name+0x102>
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2205      	movs	r2, #5
 8009230:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009232:	7ffb      	ldrb	r3, [r7, #31]
 8009234:	2b20      	cmp	r3, #32
 8009236:	d801      	bhi.n	800923c <create_name+0x10c>
 8009238:	2204      	movs	r2, #4
 800923a:	e000      	b.n	800923e <create_name+0x10e>
 800923c:	2200      	movs	r2, #0
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	330b      	adds	r3, #11
 8009242:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009244:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009246:	4618      	mov	r0, r3
 8009248:	3720      	adds	r7, #32
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	0800b90c 	.word	0x0800b90c
 8009254:	0800b8a0 	.word	0x0800b8a0

08009258 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800926c:	e002      	b.n	8009274 <follow_path+0x1c>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	3301      	adds	r3, #1
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b2f      	cmp	r3, #47	; 0x2f
 800927a:	d0f8      	beq.n	800926e <follow_path+0x16>
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b5c      	cmp	r3, #92	; 0x5c
 8009282:	d0f4      	beq.n	800926e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	2200      	movs	r2, #0
 8009288:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	2b1f      	cmp	r3, #31
 8009290:	d80a      	bhi.n	80092a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2280      	movs	r2, #128	; 0x80
 8009296:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800929a:	2100      	movs	r1, #0
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7ff fcf9 	bl	8008c94 <dir_sdi>
 80092a2:	4603      	mov	r3, r0
 80092a4:	75fb      	strb	r3, [r7, #23]
 80092a6:	e043      	b.n	8009330 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80092a8:	463b      	mov	r3, r7
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f7ff ff3f 	bl	8009130 <create_name>
 80092b2:	4603      	mov	r3, r0
 80092b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d134      	bne.n	8009326 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7ff feaf 	bl	8009020 <dir_find>
 80092c2:	4603      	mov	r3, r0
 80092c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80092cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00a      	beq.n	80092ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	d127      	bne.n	800932a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80092da:	7afb      	ldrb	r3, [r7, #11]
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d122      	bne.n	800932a <follow_path+0xd2>
 80092e4:	2305      	movs	r3, #5
 80092e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80092e8:	e01f      	b.n	800932a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80092ea:	7afb      	ldrb	r3, [r7, #11]
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d11c      	bne.n	800932e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	799b      	ldrb	r3, [r3, #6]
 80092f8:	f003 0310 	and.w	r3, r3, #16
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d102      	bne.n	8009306 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009300:	2305      	movs	r3, #5
 8009302:	75fb      	strb	r3, [r7, #23]
 8009304:	e014      	b.n	8009330 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009314:	4413      	add	r3, r2
 8009316:	4619      	mov	r1, r3
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7ff fe42 	bl	8008fa2 <ld_clust>
 800931e:	4602      	mov	r2, r0
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009324:	e7c0      	b.n	80092a8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009326:	bf00      	nop
 8009328:	e002      	b.n	8009330 <follow_path+0xd8>
				break;
 800932a:	bf00      	nop
 800932c:	e000      	b.n	8009330 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800932e:	bf00      	nop
			}
		}
	}

	return res;
 8009330:	7dfb      	ldrb	r3, [r7, #23]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800933a:	b480      	push	{r7}
 800933c:	b087      	sub	sp, #28
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009342:	f04f 33ff 	mov.w	r3, #4294967295
 8009346:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d031      	beq.n	80093b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	e002      	b.n	800935e <get_ldnumber+0x24>
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	3301      	adds	r3, #1
 800935c:	617b      	str	r3, [r7, #20]
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	2b20      	cmp	r3, #32
 8009364:	d903      	bls.n	800936e <get_ldnumber+0x34>
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b3a      	cmp	r3, #58	; 0x3a
 800936c:	d1f4      	bne.n	8009358 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	2b3a      	cmp	r3, #58	; 0x3a
 8009374:	d11c      	bne.n	80093b0 <get_ldnumber+0x76>
			tp = *path;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	60fa      	str	r2, [r7, #12]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	3b30      	subs	r3, #48	; 0x30
 8009386:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	2b09      	cmp	r3, #9
 800938c:	d80e      	bhi.n	80093ac <get_ldnumber+0x72>
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	429a      	cmp	r2, r3
 8009394:	d10a      	bne.n	80093ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d107      	bne.n	80093ac <get_ldnumber+0x72>
					vol = (int)i;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	3301      	adds	r3, #1
 80093a4:	617b      	str	r3, [r7, #20]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	e002      	b.n	80093b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80093b0:	2300      	movs	r3, #0
 80093b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80093b4:	693b      	ldr	r3, [r7, #16]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	371c      	adds	r7, #28
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
	...

080093c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	70da      	strb	r2, [r3, #3]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f04f 32ff 	mov.w	r2, #4294967295
 80093da:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff f8e0 	bl	80085a4 <move_window>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <check_fs+0x2a>
 80093ea:	2304      	movs	r3, #4
 80093ec:	e038      	b.n	8009460 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3330      	adds	r3, #48	; 0x30
 80093f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe fe24 	bl	8008044 <ld_word>
 80093fc:	4603      	mov	r3, r0
 80093fe:	461a      	mov	r2, r3
 8009400:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009404:	429a      	cmp	r2, r3
 8009406:	d001      	beq.n	800940c <check_fs+0x48>
 8009408:	2303      	movs	r3, #3
 800940a:	e029      	b.n	8009460 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009412:	2be9      	cmp	r3, #233	; 0xe9
 8009414:	d009      	beq.n	800942a <check_fs+0x66>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800941c:	2beb      	cmp	r3, #235	; 0xeb
 800941e:	d11e      	bne.n	800945e <check_fs+0x9a>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009426:	2b90      	cmp	r3, #144	; 0x90
 8009428:	d119      	bne.n	800945e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	3330      	adds	r3, #48	; 0x30
 800942e:	3336      	adds	r3, #54	; 0x36
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe fe1f 	bl	8008074 <ld_dword>
 8009436:	4603      	mov	r3, r0
 8009438:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800943c:	4a0a      	ldr	r2, [pc, #40]	; (8009468 <check_fs+0xa4>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d101      	bne.n	8009446 <check_fs+0x82>
 8009442:	2300      	movs	r3, #0
 8009444:	e00c      	b.n	8009460 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3330      	adds	r3, #48	; 0x30
 800944a:	3352      	adds	r3, #82	; 0x52
 800944c:	4618      	mov	r0, r3
 800944e:	f7fe fe11 	bl	8008074 <ld_dword>
 8009452:	4602      	mov	r2, r0
 8009454:	4b05      	ldr	r3, [pc, #20]	; (800946c <check_fs+0xa8>)
 8009456:	429a      	cmp	r2, r3
 8009458:	d101      	bne.n	800945e <check_fs+0x9a>
 800945a:	2300      	movs	r3, #0
 800945c:	e000      	b.n	8009460 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800945e:	2302      	movs	r3, #2
}
 8009460:	4618      	mov	r0, r3
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	00544146 	.word	0x00544146
 800946c:	33544146 	.word	0x33544146

08009470 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b096      	sub	sp, #88	; 0x58
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	4613      	mov	r3, r2
 800947c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2200      	movs	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f7ff ff58 	bl	800933a <get_ldnumber>
 800948a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800948c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948e:	2b00      	cmp	r3, #0
 8009490:	da01      	bge.n	8009496 <find_volume+0x26>
 8009492:	230b      	movs	r3, #11
 8009494:	e22e      	b.n	80098f4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009496:	4aa8      	ldr	r2, [pc, #672]	; (8009738 <find_volume+0x2c8>)
 8009498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800949e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <find_volume+0x3a>
 80094a6:	230c      	movs	r3, #12
 80094a8:	e224      	b.n	80098f4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	f023 0301 	bic.w	r3, r3, #1
 80094b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80094b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01a      	beq.n	80094f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80094c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe fd1f 	bl	8007f08 <disk_status>
 80094ca:	4603      	mov	r3, r0
 80094cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80094d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10c      	bne.n	80094f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80094dc:	79fb      	ldrb	r3, [r7, #7]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d007      	beq.n	80094f2 <find_volume+0x82>
 80094e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094e6:	f003 0304 	and.w	r3, r3, #4
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80094ee:	230a      	movs	r3, #10
 80094f0:	e200      	b.n	80098f4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80094f2:	2300      	movs	r3, #0
 80094f4:	e1fe      	b.n	80098f4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	2200      	movs	r2, #0
 80094fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80094fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009502:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	4618      	mov	r0, r3
 800950a:	f7fe fd17 	bl	8007f3c <disk_initialize>
 800950e:	4603      	mov	r3, r0
 8009510:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009514:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009520:	2303      	movs	r3, #3
 8009522:	e1e7      	b.n	80098f4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009524:	79fb      	ldrb	r3, [r7, #7]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d007      	beq.n	800953a <find_volume+0xca>
 800952a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800952e:	f003 0304 	and.w	r3, r3, #4
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009536:	230a      	movs	r3, #10
 8009538:	e1dc      	b.n	80098f4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800953e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009542:	f7ff ff3f 	bl	80093c4 <check_fs>
 8009546:	4603      	mov	r3, r0
 8009548:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800954c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009550:	2b02      	cmp	r3, #2
 8009552:	d14b      	bne.n	80095ec <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009554:	2300      	movs	r3, #0
 8009556:	643b      	str	r3, [r7, #64]	; 0x40
 8009558:	e01f      	b.n	800959a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009562:	011b      	lsls	r3, r3, #4
 8009564:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009568:	4413      	add	r3, r2
 800956a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	3304      	adds	r3, #4
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d006      	beq.n	8009584 <find_volume+0x114>
 8009576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009578:	3308      	adds	r3, #8
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe fd7a 	bl	8008074 <ld_dword>
 8009580:	4602      	mov	r2, r0
 8009582:	e000      	b.n	8009586 <find_volume+0x116>
 8009584:	2200      	movs	r2, #0
 8009586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800958e:	440b      	add	r3, r1
 8009590:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009596:	3301      	adds	r3, #1
 8009598:	643b      	str	r3, [r7, #64]	; 0x40
 800959a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800959c:	2b03      	cmp	r3, #3
 800959e:	d9dc      	bls.n	800955a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80095a0:	2300      	movs	r3, #0
 80095a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80095a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <find_volume+0x140>
 80095aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ac:	3b01      	subs	r3, #1
 80095ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80095b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80095b8:	4413      	add	r3, r2
 80095ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80095be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80095c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d005      	beq.n	80095d2 <find_volume+0x162>
 80095c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095ca:	f7ff fefb 	bl	80093c4 <check_fs>
 80095ce:	4603      	mov	r3, r0
 80095d0:	e000      	b.n	80095d4 <find_volume+0x164>
 80095d2:	2303      	movs	r3, #3
 80095d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80095d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d905      	bls.n	80095ec <find_volume+0x17c>
 80095e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095e2:	3301      	adds	r3, #1
 80095e4:	643b      	str	r3, [r7, #64]	; 0x40
 80095e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d9e1      	bls.n	80095b0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80095ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d101      	bne.n	80095f8 <find_volume+0x188>
 80095f4:	2301      	movs	r3, #1
 80095f6:	e17d      	b.n	80098f4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80095f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d901      	bls.n	8009604 <find_volume+0x194>
 8009600:	230d      	movs	r3, #13
 8009602:	e177      	b.n	80098f4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	3330      	adds	r3, #48	; 0x30
 8009608:	330b      	adds	r3, #11
 800960a:	4618      	mov	r0, r3
 800960c:	f7fe fd1a 	bl	8008044 <ld_word>
 8009610:	4603      	mov	r3, r0
 8009612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009616:	d001      	beq.n	800961c <find_volume+0x1ac>
 8009618:	230d      	movs	r3, #13
 800961a:	e16b      	b.n	80098f4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961e:	3330      	adds	r3, #48	; 0x30
 8009620:	3316      	adds	r3, #22
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fd0e 	bl	8008044 <ld_word>
 8009628:	4603      	mov	r3, r0
 800962a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800962c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800962e:	2b00      	cmp	r3, #0
 8009630:	d106      	bne.n	8009640 <find_volume+0x1d0>
 8009632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009634:	3330      	adds	r3, #48	; 0x30
 8009636:	3324      	adds	r3, #36	; 0x24
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fd1b 	bl	8008074 <ld_dword>
 800963e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009644:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	789b      	ldrb	r3, [r3, #2]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d005      	beq.n	8009664 <find_volume+0x1f4>
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	789b      	ldrb	r3, [r3, #2]
 800965c:	2b02      	cmp	r3, #2
 800965e:	d001      	beq.n	8009664 <find_volume+0x1f4>
 8009660:	230d      	movs	r3, #13
 8009662:	e147      	b.n	80098f4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009666:	789b      	ldrb	r3, [r3, #2]
 8009668:	461a      	mov	r2, r3
 800966a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800966c:	fb02 f303 	mul.w	r3, r2, r3
 8009670:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009678:	b29a      	uxth	r2, r3
 800967a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009680:	895b      	ldrh	r3, [r3, #10]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d008      	beq.n	8009698 <find_volume+0x228>
 8009686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009688:	895b      	ldrh	r3, [r3, #10]
 800968a:	461a      	mov	r2, r3
 800968c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968e:	895b      	ldrh	r3, [r3, #10]
 8009690:	3b01      	subs	r3, #1
 8009692:	4013      	ands	r3, r2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <find_volume+0x22c>
 8009698:	230d      	movs	r3, #13
 800969a:	e12b      	b.n	80098f4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969e:	3330      	adds	r3, #48	; 0x30
 80096a0:	3311      	adds	r3, #17
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe fcce 	bl	8008044 <ld_word>
 80096a8:	4603      	mov	r3, r0
 80096aa:	461a      	mov	r2, r3
 80096ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80096b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b2:	891b      	ldrh	r3, [r3, #8]
 80096b4:	f003 030f 	and.w	r3, r3, #15
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <find_volume+0x252>
 80096be:	230d      	movs	r3, #13
 80096c0:	e118      	b.n	80098f4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	3330      	adds	r3, #48	; 0x30
 80096c6:	3313      	adds	r3, #19
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fe fcbb 	bl	8008044 <ld_word>
 80096ce:	4603      	mov	r3, r0
 80096d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80096d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <find_volume+0x276>
 80096d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096da:	3330      	adds	r3, #48	; 0x30
 80096dc:	3320      	adds	r3, #32
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fcc8 	bl	8008074 <ld_dword>
 80096e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	3330      	adds	r3, #48	; 0x30
 80096ea:	330e      	adds	r3, #14
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe fca9 	bl	8008044 <ld_word>
 80096f2:	4603      	mov	r3, r0
 80096f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80096f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d101      	bne.n	8009700 <find_volume+0x290>
 80096fc:	230d      	movs	r3, #13
 80096fe:	e0f9      	b.n	80098f4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009700:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009704:	4413      	add	r3, r2
 8009706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009708:	8912      	ldrh	r2, [r2, #8]
 800970a:	0912      	lsrs	r2, r2, #4
 800970c:	b292      	uxth	r2, r2
 800970e:	4413      	add	r3, r2
 8009710:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	429a      	cmp	r2, r3
 8009718:	d201      	bcs.n	800971e <find_volume+0x2ae>
 800971a:	230d      	movs	r3, #13
 800971c:	e0ea      	b.n	80098f4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800971e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009726:	8952      	ldrh	r2, [r2, #10]
 8009728:	fbb3 f3f2 	udiv	r3, r3, r2
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	2b00      	cmp	r3, #0
 8009732:	d103      	bne.n	800973c <find_volume+0x2cc>
 8009734:	230d      	movs	r3, #13
 8009736:	e0dd      	b.n	80098f4 <find_volume+0x484>
 8009738:	2000022c 	.word	0x2000022c
		fmt = FS_FAT32;
 800973c:	2303      	movs	r3, #3
 800973e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009748:	4293      	cmp	r3, r2
 800974a:	d802      	bhi.n	8009752 <find_volume+0x2e2>
 800974c:	2302      	movs	r3, #2
 800974e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009758:	4293      	cmp	r3, r2
 800975a:	d802      	bhi.n	8009762 <find_volume+0x2f2>
 800975c:	2301      	movs	r3, #1
 800975e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009764:	1c9a      	adds	r2, r3, #2
 8009766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009768:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800976e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009770:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009774:	441a      	add	r2, r3
 8009776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009778:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800977a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	441a      	add	r2, r3
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009788:	2b03      	cmp	r3, #3
 800978a:	d11e      	bne.n	80097ca <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	3330      	adds	r3, #48	; 0x30
 8009790:	332a      	adds	r3, #42	; 0x2a
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fc56 	bl	8008044 <ld_word>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <find_volume+0x332>
 800979e:	230d      	movs	r3, #13
 80097a0:	e0a8      	b.n	80098f4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	891b      	ldrh	r3, [r3, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <find_volume+0x33e>
 80097aa:	230d      	movs	r3, #13
 80097ac:	e0a2      	b.n	80098f4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	3330      	adds	r3, #48	; 0x30
 80097b2:	332c      	adds	r3, #44	; 0x2c
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7fe fc5d 	bl	8008074 <ld_dword>
 80097ba:	4602      	mov	r2, r0
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80097c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	647b      	str	r3, [r7, #68]	; 0x44
 80097c8:	e01f      	b.n	800980a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	891b      	ldrh	r3, [r3, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <find_volume+0x366>
 80097d2:	230d      	movs	r3, #13
 80097d4:	e08e      	b.n	80098f4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	6a1a      	ldr	r2, [r3, #32]
 80097da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097dc:	441a      	add	r2, r3
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80097e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d103      	bne.n	80097f2 <find_volume+0x382>
 80097ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	e00a      	b.n	8009808 <find_volume+0x398>
 80097f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f4:	695a      	ldr	r2, [r3, #20]
 80097f6:	4613      	mov	r3, r2
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	4413      	add	r3, r2
 80097fc:	085a      	lsrs	r2, r3, #1
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009808:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800980a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980c:	699a      	ldr	r2, [r3, #24]
 800980e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009810:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009814:	0a5b      	lsrs	r3, r3, #9
 8009816:	429a      	cmp	r2, r3
 8009818:	d201      	bcs.n	800981e <find_volume+0x3ae>
 800981a:	230d      	movs	r3, #13
 800981c:	e06a      	b.n	80098f4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	f04f 32ff 	mov.w	r2, #4294967295
 8009824:	611a      	str	r2, [r3, #16]
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	691a      	ldr	r2, [r3, #16]
 800982a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	2280      	movs	r2, #128	; 0x80
 8009832:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009834:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009838:	2b03      	cmp	r3, #3
 800983a:	d149      	bne.n	80098d0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800983c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983e:	3330      	adds	r3, #48	; 0x30
 8009840:	3330      	adds	r3, #48	; 0x30
 8009842:	4618      	mov	r0, r3
 8009844:	f7fe fbfe 	bl	8008044 <ld_word>
 8009848:	4603      	mov	r3, r0
 800984a:	2b01      	cmp	r3, #1
 800984c:	d140      	bne.n	80098d0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800984e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009850:	3301      	adds	r3, #1
 8009852:	4619      	mov	r1, r3
 8009854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009856:	f7fe fea5 	bl	80085a4 <move_window>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d137      	bne.n	80098d0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009862:	2200      	movs	r2, #0
 8009864:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	3330      	adds	r3, #48	; 0x30
 800986a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800986e:	4618      	mov	r0, r3
 8009870:	f7fe fbe8 	bl	8008044 <ld_word>
 8009874:	4603      	mov	r3, r0
 8009876:	461a      	mov	r2, r3
 8009878:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800987c:	429a      	cmp	r2, r3
 800987e:	d127      	bne.n	80098d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009882:	3330      	adds	r3, #48	; 0x30
 8009884:	4618      	mov	r0, r3
 8009886:	f7fe fbf5 	bl	8008074 <ld_dword>
 800988a:	4602      	mov	r2, r0
 800988c:	4b1b      	ldr	r3, [pc, #108]	; (80098fc <find_volume+0x48c>)
 800988e:	429a      	cmp	r2, r3
 8009890:	d11e      	bne.n	80098d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009894:	3330      	adds	r3, #48	; 0x30
 8009896:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800989a:	4618      	mov	r0, r3
 800989c:	f7fe fbea 	bl	8008074 <ld_dword>
 80098a0:	4602      	mov	r2, r0
 80098a2:	4b17      	ldr	r3, [pc, #92]	; (8009900 <find_volume+0x490>)
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d113      	bne.n	80098d0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	3330      	adds	r3, #48	; 0x30
 80098ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fe fbdf 	bl	8008074 <ld_dword>
 80098b6:	4602      	mov	r2, r0
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	3330      	adds	r3, #48	; 0x30
 80098c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fe fbd5 	bl	8008074 <ld_dword>
 80098ca:	4602      	mov	r2, r0
 80098cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ce:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80098d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80098d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80098d8:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <find_volume+0x494>)
 80098da:	881b      	ldrh	r3, [r3, #0]
 80098dc:	3301      	adds	r3, #1
 80098de:	b29a      	uxth	r2, r3
 80098e0:	4b08      	ldr	r3, [pc, #32]	; (8009904 <find_volume+0x494>)
 80098e2:	801a      	strh	r2, [r3, #0]
 80098e4:	4b07      	ldr	r3, [pc, #28]	; (8009904 <find_volume+0x494>)
 80098e6:	881a      	ldrh	r2, [r3, #0]
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80098ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098ee:	f7fe fdf1 	bl	80084d4 <clear_lock>
#endif
	return FR_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3758      	adds	r7, #88	; 0x58
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	41615252 	.word	0x41615252
 8009900:	61417272 	.word	0x61417272
 8009904:	20000230 	.word	0x20000230

08009908 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009912:	2309      	movs	r3, #9
 8009914:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01c      	beq.n	8009956 <validate+0x4e>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d018      	beq.n	8009956 <validate+0x4e>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d013      	beq.n	8009956 <validate+0x4e>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	889a      	ldrh	r2, [r3, #4]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	88db      	ldrh	r3, [r3, #6]
 8009938:	429a      	cmp	r2, r3
 800993a:	d10c      	bne.n	8009956 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe fae0 	bl	8007f08 <disk_status>
 8009948:	4603      	mov	r3, r0
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <validate+0x4e>
			res = FR_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d102      	bne.n	8009962 <validate+0x5a>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	e000      	b.n	8009964 <validate+0x5c>
 8009962:	2300      	movs	r3, #0
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	6013      	str	r3, [r2, #0]
	return res;
 8009968:	7bfb      	ldrb	r3, [r7, #15]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
	...

08009974 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b088      	sub	sp, #32
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	4613      	mov	r3, r2
 8009980:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009986:	f107 0310 	add.w	r3, r7, #16
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff fcd5 	bl	800933a <get_ldnumber>
 8009990:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	2b00      	cmp	r3, #0
 8009996:	da01      	bge.n	800999c <f_mount+0x28>
 8009998:	230b      	movs	r3, #11
 800999a:	e02b      	b.n	80099f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800999c:	4a17      	ldr	r2, [pc, #92]	; (80099fc <f_mount+0x88>)
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d005      	beq.n	80099b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80099ac:	69b8      	ldr	r0, [r7, #24]
 80099ae:	f7fe fd91 	bl	80084d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	2200      	movs	r2, #0
 80099b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	490d      	ldr	r1, [pc, #52]	; (80099fc <f_mount+0x88>)
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <f_mount+0x66>
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d001      	beq.n	80099de <f_mount+0x6a>
 80099da:	2300      	movs	r3, #0
 80099dc:	e00a      	b.n	80099f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80099de:	f107 010c 	add.w	r1, r7, #12
 80099e2:	f107 0308 	add.w	r3, r7, #8
 80099e6:	2200      	movs	r2, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff fd41 	bl	8009470 <find_volume>
 80099ee:	4603      	mov	r3, r0
 80099f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3720      	adds	r7, #32
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	2000022c 	.word	0x2000022c

08009a00 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b098      	sub	sp, #96	; 0x60
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <f_open+0x18>
 8009a14:	2309      	movs	r3, #9
 8009a16:	e1ad      	b.n	8009d74 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a1e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009a20:	79fa      	ldrb	r2, [r7, #7]
 8009a22:	f107 0110 	add.w	r1, r7, #16
 8009a26:	f107 0308 	add.w	r3, r7, #8
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff fd20 	bl	8009470 <find_volume>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f040 8191 	bne.w	8009d62 <f_open+0x362>
		dj.obj.fs = fs;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	f107 0314 	add.w	r3, r7, #20
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7ff fc03 	bl	8009258 <follow_path>
 8009a52:	4603      	mov	r3, r0
 8009a54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009a58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d11a      	bne.n	8009a96 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009a60:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009a64:	b25b      	sxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	da03      	bge.n	8009a72 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009a6a:	2306      	movs	r3, #6
 8009a6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a70:	e011      	b.n	8009a96 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	f023 0301 	bic.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	bf14      	ite	ne
 8009a7c:	2301      	movne	r3, #1
 8009a7e:	2300      	moveq	r3, #0
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	461a      	mov	r2, r3
 8009a84:	f107 0314 	add.w	r3, r7, #20
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe fbda 	bl	8008244 <chk_lock>
 8009a90:	4603      	mov	r3, r0
 8009a92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009a96:	79fb      	ldrb	r3, [r7, #7]
 8009a98:	f003 031c 	and.w	r3, r3, #28
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d07f      	beq.n	8009ba0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009aa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d017      	beq.n	8009ad8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009aa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	d10e      	bne.n	8009ace <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009ab0:	f7fe fc24 	bl	80082fc <enq_lock>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d006      	beq.n	8009ac8 <f_open+0xc8>
 8009aba:	f107 0314 	add.w	r3, r7, #20
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff fb03 	bl	80090ca <dir_register>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	e000      	b.n	8009aca <f_open+0xca>
 8009ac8:	2312      	movs	r3, #18
 8009aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	f043 0308 	orr.w	r3, r3, #8
 8009ad4:	71fb      	strb	r3, [r7, #7]
 8009ad6:	e010      	b.n	8009afa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009ad8:	7ebb      	ldrb	r3, [r7, #26]
 8009ada:	f003 0311 	and.w	r3, r3, #17
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <f_open+0xea>
					res = FR_DENIED;
 8009ae2:	2307      	movs	r3, #7
 8009ae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ae8:	e007      	b.n	8009afa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009aea:	79fb      	ldrb	r3, [r7, #7]
 8009aec:	f003 0304 	and.w	r3, r3, #4
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <f_open+0xfa>
 8009af4:	2308      	movs	r3, #8
 8009af6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009afa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d168      	bne.n	8009bd4 <f_open+0x1d4>
 8009b02:	79fb      	ldrb	r3, [r7, #7]
 8009b04:	f003 0308 	and.w	r3, r3, #8
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d063      	beq.n	8009bd4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009b0c:	f7fc fef0 	bl	80068f0 <get_fattime>
 8009b10:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b14:	330e      	adds	r3, #14
 8009b16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fe fae9 	bl	80080f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b20:	3316      	adds	r3, #22
 8009b22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe fae3 	bl	80080f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b2c:	330b      	adds	r3, #11
 8009b2e:	2220      	movs	r2, #32
 8009b30:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b36:	4611      	mov	r1, r2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7ff fa32 	bl	8008fa2 <ld_clust>
 8009b3e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b44:	2200      	movs	r2, #0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fa4a 	bl	8008fe0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	331c      	adds	r3, #28
 8009b50:	2100      	movs	r1, #0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe facc 	bl	80080f0 <st_dword>
					fs->wflag = 1;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d037      	beq.n	8009bd4 <f_open+0x1d4>
						dw = fs->winsect;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b68:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009b6a:	f107 0314 	add.w	r3, r7, #20
 8009b6e:	2200      	movs	r2, #0
 8009b70:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe ff5d 	bl	8008a32 <remove_chain>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d126      	bne.n	8009bd4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe fd0a 	bl	80085a4 <move_window>
 8009b90:	4603      	mov	r3, r0
 8009b92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b9a:	3a01      	subs	r2, #1
 8009b9c:	60da      	str	r2, [r3, #12]
 8009b9e:	e019      	b.n	8009bd4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d115      	bne.n	8009bd4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009ba8:	7ebb      	ldrb	r3, [r7, #26]
 8009baa:	f003 0310 	and.w	r3, r3, #16
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <f_open+0x1ba>
					res = FR_NO_FILE;
 8009bb2:	2304      	movs	r3, #4
 8009bb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009bb8:	e00c      	b.n	8009bd4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	f003 0302 	and.w	r3, r3, #2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d007      	beq.n	8009bd4 <f_open+0x1d4>
 8009bc4:	7ebb      	ldrb	r3, [r7, #26]
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <f_open+0x1d4>
						res = FR_DENIED;
 8009bce:	2307      	movs	r3, #7
 8009bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d128      	bne.n	8009c2e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009bdc:	79fb      	ldrb	r3, [r7, #7]
 8009bde:	f003 0308 	and.w	r3, r3, #8
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009be6:	79fb      	ldrb	r3, [r7, #7]
 8009be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	f023 0301 	bic.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	bf14      	ite	ne
 8009c06:	2301      	movne	r3, #1
 8009c08:	2300      	moveq	r3, #0
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	f107 0314 	add.w	r3, r7, #20
 8009c12:	4611      	mov	r1, r2
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fe fb93 	bl	8008340 <inc_lock>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d102      	bne.n	8009c2e <f_open+0x22e>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f040 8095 	bne.w	8009d62 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c3c:	4611      	mov	r1, r2
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7ff f9af 	bl	8008fa2 <ld_clust>
 8009c44:	4602      	mov	r2, r0
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4c:	331c      	adds	r3, #28
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fa10 	bl	8008074 <ld_dword>
 8009c54:	4602      	mov	r2, r0
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	88da      	ldrh	r2, [r3, #6]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	79fa      	ldrb	r2, [r7, #7]
 8009c72:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3330      	adds	r3, #48	; 0x30
 8009c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c8e:	2100      	movs	r1, #0
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe fa7a 	bl	800818a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009c96:	79fb      	ldrb	r3, [r7, #7]
 8009c98:	f003 0320 	and.w	r3, r3, #32
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d060      	beq.n	8009d62 <f_open+0x362>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d05c      	beq.n	8009d62 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	68da      	ldr	r2, [r3, #12]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	895b      	ldrh	r3, [r3, #10]
 8009cb4:	025b      	lsls	r3, r3, #9
 8009cb6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	657b      	str	r3, [r7, #84]	; 0x54
 8009cc4:	e016      	b.n	8009cf4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fe fd25 	bl	800871a <get_fat>
 8009cd0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d802      	bhi.n	8009cde <f_open+0x2de>
 8009cd8:	2302      	movs	r3, #2
 8009cda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce4:	d102      	bne.n	8009cec <f_open+0x2ec>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009cec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8009cf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d103      	bne.n	8009d04 <f_open+0x304>
 8009cfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d8e0      	bhi.n	8009cc6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d08:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009d0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d127      	bne.n	8009d62 <f_open+0x362>
 8009d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d022      	beq.n	8009d62 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fe fcdb 	bl	80086dc <clust2sect>
 8009d26:	6478      	str	r0, [r7, #68]	; 0x44
 8009d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d103      	bne.n	8009d36 <f_open+0x336>
						res = FR_INT_ERR;
 8009d2e:	2302      	movs	r3, #2
 8009d30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009d34:	e015      	b.n	8009d62 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d38:	0a5a      	lsrs	r2, r3, #9
 8009d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d3c:	441a      	add	r2, r3
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	7858      	ldrb	r0, [r3, #1]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6a1a      	ldr	r2, [r3, #32]
 8009d50:	2301      	movs	r3, #1
 8009d52:	f7fe f919 	bl	8007f88 <disk_read>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <f_open+0x362>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <f_open+0x370>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009d70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3760      	adds	r7, #96	; 0x60
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08e      	sub	sp, #56	; 0x38
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f107 0214 	add.w	r2, r7, #20
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7ff fdb3 	bl	8009908 <validate>
 8009da2:	4603      	mov	r3, r0
 8009da4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009da8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d107      	bne.n	8009dc0 <f_read+0x44>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	7d5b      	ldrb	r3, [r3, #21]
 8009db4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009db8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <f_read+0x4a>
 8009dc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dc4:	e115      	b.n	8009ff2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	7d1b      	ldrb	r3, [r3, #20]
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <f_read+0x5a>
 8009dd2:	2307      	movs	r3, #7
 8009dd4:	e10d      	b.n	8009ff2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	68da      	ldr	r2, [r3, #12]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	f240 80fe 	bls.w	8009fe8 <f_read+0x26c>
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009df0:	e0fa      	b.n	8009fe8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f040 80c6 	bne.w	8009f8c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	0a5b      	lsrs	r3, r3, #9
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	8952      	ldrh	r2, [r2, #10]
 8009e0a:	3a01      	subs	r2, #1
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d12f      	bne.n	8009e76 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d103      	bne.n	8009e26 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	633b      	str	r3, [r7, #48]	; 0x30
 8009e24:	e013      	b.n	8009e4e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d007      	beq.n	8009e3e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	4619      	mov	r1, r3
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f7fe fef9 	bl	8008c2c <clmt_clust>
 8009e3a:	6338      	str	r0, [r7, #48]	; 0x30
 8009e3c:	e007      	b.n	8009e4e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	4619      	mov	r1, r3
 8009e46:	4610      	mov	r0, r2
 8009e48:	f7fe fc67 	bl	800871a <get_fat>
 8009e4c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d804      	bhi.n	8009e5e <f_read+0xe2>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2202      	movs	r2, #2
 8009e58:	755a      	strb	r2, [r3, #21]
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	e0c9      	b.n	8009ff2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e64:	d104      	bne.n	8009e70 <f_read+0xf4>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	755a      	strb	r2, [r3, #21]
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e0c0      	b.n	8009ff2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e74:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	69db      	ldr	r3, [r3, #28]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f7fe fc2c 	bl	80086dc <clust2sect>
 8009e84:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d104      	bne.n	8009e96 <f_read+0x11a>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	755a      	strb	r2, [r3, #21]
 8009e92:	2302      	movs	r3, #2
 8009e94:	e0ad      	b.n	8009ff2 <f_read+0x276>
			sect += csect;
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	0a5b      	lsrs	r3, r3, #9
 8009ea2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d039      	beq.n	8009f1e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009eaa:	69fa      	ldr	r2, [r7, #28]
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	4413      	add	r3, r2
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	8952      	ldrh	r2, [r2, #10]
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d905      	bls.n	8009ec4 <f_read+0x148>
					cc = fs->csize - csect;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	895b      	ldrh	r3, [r3, #10]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	7858      	ldrb	r0, [r3, #1]
 8009ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eca:	69ba      	ldr	r2, [r7, #24]
 8009ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ece:	f7fe f85b 	bl	8007f88 <disk_read>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d004      	beq.n	8009ee2 <f_read+0x166>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2201      	movs	r2, #1
 8009edc:	755a      	strb	r2, [r3, #21]
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e087      	b.n	8009ff2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	7d1b      	ldrb	r3, [r3, #20]
 8009ee6:	b25b      	sxtb	r3, r3
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	da14      	bge.n	8009f16 <f_read+0x19a>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a1a      	ldr	r2, [r3, #32]
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d90d      	bls.n	8009f16 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6a1a      	ldr	r2, [r3, #32]
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	025b      	lsls	r3, r3, #9
 8009f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f06:	18d0      	adds	r0, r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3330      	adds	r3, #48	; 0x30
 8009f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f10:	4619      	mov	r1, r3
 8009f12:	f7fe f919 	bl	8008148 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f18:	025b      	lsls	r3, r3, #9
 8009f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009f1c:	e050      	b.n	8009fc0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	69ba      	ldr	r2, [r7, #24]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d02e      	beq.n	8009f86 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	7d1b      	ldrb	r3, [r3, #20]
 8009f2c:	b25b      	sxtb	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	da18      	bge.n	8009f64 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	7858      	ldrb	r0, [r3, #1]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6a1a      	ldr	r2, [r3, #32]
 8009f40:	2301      	movs	r3, #1
 8009f42:	f7fe f841 	bl	8007fc8 <disk_write>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d004      	beq.n	8009f56 <f_read+0x1da>
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	755a      	strb	r2, [r3, #21]
 8009f52:	2301      	movs	r3, #1
 8009f54:	e04d      	b.n	8009ff2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	7d1b      	ldrb	r3, [r3, #20]
 8009f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	7858      	ldrb	r0, [r3, #1]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f6e:	2301      	movs	r3, #1
 8009f70:	69ba      	ldr	r2, [r7, #24]
 8009f72:	f7fe f809 	bl	8007f88 <disk_read>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d004      	beq.n	8009f86 <f_read+0x20a>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	755a      	strb	r2, [r3, #21]
 8009f82:	2301      	movs	r3, #1
 8009f84:	e035      	b.n	8009ff2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f94:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009f98:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d901      	bls.n	8009fa6 <f_read+0x22a>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb4:	4413      	add	r3, r2
 8009fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fbc:	f7fe f8c4 	bl	8008148 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	4413      	add	r3, r2
 8009fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	699a      	ldr	r2, [r3, #24]
 8009fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fce:	441a      	add	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	619a      	str	r2, [r3, #24]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fda:	441a      	add	r2, r3
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f47f af01 	bne.w	8009df2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3738      	adds	r7, #56	; 0x38
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b08c      	sub	sp, #48	; 0x30
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	60f8      	str	r0, [r7, #12]
 800a002:	60b9      	str	r1, [r7, #8]
 800a004:	607a      	str	r2, [r7, #4]
 800a006:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f107 0210 	add.w	r2, r7, #16
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7ff fc74 	bl	8009908 <validate>
 800a020:	4603      	mov	r3, r0
 800a022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d107      	bne.n	800a03e <f_write+0x44>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	7d5b      	ldrb	r3, [r3, #21]
 800a032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d002      	beq.n	800a044 <f_write+0x4a>
 800a03e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a042:	e14b      	b.n	800a2dc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	7d1b      	ldrb	r3, [r3, #20]
 800a048:	f003 0302 	and.w	r3, r3, #2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <f_write+0x5a>
 800a050:	2307      	movs	r3, #7
 800a052:	e143      	b.n	800a2dc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	699a      	ldr	r2, [r3, #24]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	441a      	add	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	429a      	cmp	r2, r3
 800a062:	f080 812d 	bcs.w	800a2c0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	43db      	mvns	r3, r3
 800a06c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a06e:	e127      	b.n	800a2c0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f040 80e3 	bne.w	800a244 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	0a5b      	lsrs	r3, r3, #9
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	8952      	ldrh	r2, [r2, #10]
 800a088:	3a01      	subs	r2, #1
 800a08a:	4013      	ands	r3, r2
 800a08c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d143      	bne.n	800a11c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10c      	bne.n	800a0b6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d11a      	bne.n	800a0de <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe fd25 	bl	8008afc <create_chain>
 800a0b2:	62b8      	str	r0, [r7, #40]	; 0x28
 800a0b4:	e013      	b.n	800a0de <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d007      	beq.n	800a0ce <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7fe fdb1 	bl	8008c2c <clmt_clust>
 800a0ca:	62b8      	str	r0, [r7, #40]	; 0x28
 800a0cc:	e007      	b.n	800a0de <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	f7fe fd10 	bl	8008afc <create_chain>
 800a0dc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 80f2 	beq.w	800a2ca <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d104      	bne.n	800a0f6 <f_write+0xfc>
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	755a      	strb	r2, [r3, #21]
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	e0f2      	b.n	800a2dc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fc:	d104      	bne.n	800a108 <f_write+0x10e>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2201      	movs	r2, #1
 800a102:	755a      	strb	r2, [r3, #21]
 800a104:	2301      	movs	r3, #1
 800a106:	e0e9      	b.n	800a2dc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a10c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d102      	bne.n	800a11c <f_write+0x122>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a11a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	7d1b      	ldrb	r3, [r3, #20]
 800a120:	b25b      	sxtb	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	da18      	bge.n	800a158 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	7858      	ldrb	r0, [r3, #1]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6a1a      	ldr	r2, [r3, #32]
 800a134:	2301      	movs	r3, #1
 800a136:	f7fd ff47 	bl	8007fc8 <disk_write>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d004      	beq.n	800a14a <f_write+0x150>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2201      	movs	r2, #1
 800a144:	755a      	strb	r2, [r3, #21]
 800a146:	2301      	movs	r3, #1
 800a148:	e0c8      	b.n	800a2dc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	7d1b      	ldrb	r3, [r3, #20]
 800a14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a152:	b2da      	uxtb	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f7fe fabb 	bl	80086dc <clust2sect>
 800a166:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d104      	bne.n	800a178 <f_write+0x17e>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2202      	movs	r2, #2
 800a172:	755a      	strb	r2, [r3, #21]
 800a174:	2302      	movs	r3, #2
 800a176:	e0b1      	b.n	800a2dc <f_write+0x2e2>
			sect += csect;
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	4413      	add	r3, r2
 800a17e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	0a5b      	lsrs	r3, r3, #9
 800a184:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d03c      	beq.n	800a206 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a18c:	69ba      	ldr	r2, [r7, #24]
 800a18e:	6a3b      	ldr	r3, [r7, #32]
 800a190:	4413      	add	r3, r2
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	8952      	ldrh	r2, [r2, #10]
 800a196:	4293      	cmp	r3, r2
 800a198:	d905      	bls.n	800a1a6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	895b      	ldrh	r3, [r3, #10]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	7858      	ldrb	r0, [r3, #1]
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	69f9      	ldr	r1, [r7, #28]
 800a1b0:	f7fd ff0a 	bl	8007fc8 <disk_write>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d004      	beq.n	800a1c4 <f_write+0x1ca>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	755a      	strb	r2, [r3, #21]
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e08b      	b.n	800a2dc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6a1a      	ldr	r2, [r3, #32]
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	6a3a      	ldr	r2, [r7, #32]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d915      	bls.n	800a1fe <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6a1a      	ldr	r2, [r3, #32]
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	025b      	lsls	r3, r3, #9
 800a1e2:	69fa      	ldr	r2, [r7, #28]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	f7fd ffac 	bl	8008148 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	7d1b      	ldrb	r3, [r3, #20]
 800a1f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	025b      	lsls	r3, r3, #9
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a204:	e03f      	b.n	800a286 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d016      	beq.n	800a23e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	699a      	ldr	r2, [r3, #24]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a218:	429a      	cmp	r2, r3
 800a21a:	d210      	bcs.n	800a23e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	7858      	ldrb	r0, [r3, #1]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a226:	2301      	movs	r3, #1
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	f7fd fead 	bl	8007f88 <disk_read>
 800a22e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2201      	movs	r2, #1
 800a238:	755a      	strb	r2, [r3, #21]
 800a23a:	2301      	movs	r3, #1
 800a23c:	e04e      	b.n	800a2dc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a24c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	429a      	cmp	r2, r3
 800a258:	d901      	bls.n	800a25e <f_write+0x264>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a26c:	4413      	add	r3, r2
 800a26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a270:	69f9      	ldr	r1, [r7, #28]
 800a272:	4618      	mov	r0, r3
 800a274:	f7fd ff68 	bl	8008148 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	7d1b      	ldrb	r3, [r3, #20]
 800a27c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a280:	b2da      	uxtb	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a286:	69fa      	ldr	r2, [r7, #28]
 800a288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28a:	4413      	add	r3, r2
 800a28c:	61fb      	str	r3, [r7, #28]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	699a      	ldr	r2, [r3, #24]
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	441a      	add	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	619a      	str	r2, [r3, #24]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	68da      	ldr	r2, [r3, #12]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	bf38      	it	cc
 800a2a6:	461a      	movcc	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	60da      	str	r2, [r3, #12]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	441a      	add	r2, r3
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f47f aed4 	bne.w	800a070 <f_write+0x76>
 800a2c8:	e000      	b.n	800a2cc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a2ca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	7d1b      	ldrb	r3, [r3, #20]
 800a2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3730      	adds	r7, #48	; 0x30
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f107 0208 	add.w	r2, r7, #8
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7ff fb07 	bl	8009908 <validate>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a2fe:	7dfb      	ldrb	r3, [r7, #23]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d168      	bne.n	800a3d6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	7d1b      	ldrb	r3, [r3, #20]
 800a308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d062      	beq.n	800a3d6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	7d1b      	ldrb	r3, [r3, #20]
 800a314:	b25b      	sxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	da15      	bge.n	800a346 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	7858      	ldrb	r0, [r3, #1]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a1a      	ldr	r2, [r3, #32]
 800a328:	2301      	movs	r3, #1
 800a32a:	f7fd fe4d 	bl	8007fc8 <disk_write>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <f_sync+0x54>
 800a334:	2301      	movs	r3, #1
 800a336:	e04f      	b.n	800a3d8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	7d1b      	ldrb	r3, [r3, #20]
 800a33c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a340:	b2da      	uxtb	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a346:	f7fc fad3 	bl	80068f0 <get_fattime>
 800a34a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a352:	4619      	mov	r1, r3
 800a354:	4610      	mov	r0, r2
 800a356:	f7fe f925 	bl	80085a4 <move_window>
 800a35a:	4603      	mov	r3, r0
 800a35c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a35e:	7dfb      	ldrb	r3, [r7, #23]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d138      	bne.n	800a3d6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a368:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	330b      	adds	r3, #11
 800a36e:	781a      	ldrb	r2, [r3, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	330b      	adds	r3, #11
 800a374:	f042 0220 	orr.w	r2, r2, #32
 800a378:	b2d2      	uxtb	r2, r2
 800a37a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6818      	ldr	r0, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	461a      	mov	r2, r3
 800a386:	68f9      	ldr	r1, [r7, #12]
 800a388:	f7fe fe2a 	bl	8008fe0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f103 021c 	add.w	r2, r3, #28
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	4619      	mov	r1, r3
 800a398:	4610      	mov	r0, r2
 800a39a:	f7fd fea9 	bl	80080f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3316      	adds	r3, #22
 800a3a2:	6939      	ldr	r1, [r7, #16]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fd fea3 	bl	80080f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3312      	adds	r3, #18
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fd fe82 	bl	80080ba <st_word>
					fs->wflag = 1;
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe f91e 	bl	8008600 <sync_fs>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	7d1b      	ldrb	r3, [r3, #20]
 800a3cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff ff7b 	bl	800a2e4 <f_sync>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a3f2:	7bfb      	ldrb	r3, [r7, #15]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d118      	bne.n	800a42a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f107 0208 	add.w	r2, r7, #8
 800a3fe:	4611      	mov	r1, r2
 800a400:	4618      	mov	r0, r3
 800a402:	f7ff fa81 	bl	8009908 <validate>
 800a406:	4603      	mov	r3, r0
 800a408:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10c      	bne.n	800a42a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	4618      	mov	r0, r3
 800a416:	f7fe f821 	bl	800845c <dec_lock>
 800a41a:	4603      	mov	r3, r0
 800a41c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d102      	bne.n	800a42a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b090      	sub	sp, #64	; 0x40
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f107 0208 	add.w	r2, r7, #8
 800a444:	4611      	mov	r1, r2
 800a446:	4618      	mov	r0, r3
 800a448:	f7ff fa5e 	bl	8009908 <validate>
 800a44c:	4603      	mov	r3, r0
 800a44e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a452:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a456:	2b00      	cmp	r3, #0
 800a458:	d103      	bne.n	800a462 <f_lseek+0x2e>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	7d5b      	ldrb	r3, [r3, #21]
 800a45e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a462:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a466:	2b00      	cmp	r3, #0
 800a468:	d002      	beq.n	800a470 <f_lseek+0x3c>
 800a46a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a46e:	e1e6      	b.n	800a83e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 80d1 	beq.w	800a61c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a480:	d15a      	bne.n	800a538 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	1d1a      	adds	r2, r3, #4
 800a48c:	627a      	str	r2, [r7, #36]	; 0x24
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	617b      	str	r3, [r7, #20]
 800a492:	2302      	movs	r3, #2
 800a494:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d03a      	beq.n	800a518 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	613b      	str	r3, [r7, #16]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	3302      	adds	r3, #2
 800a4ae:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe f92b 	bl	800871a <get_fat>
 800a4c4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d804      	bhi.n	800a4d6 <f_lseek+0xa2>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	755a      	strb	r2, [r3, #21]
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	e1b3      	b.n	800a83e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4dc:	d104      	bne.n	800a4e8 <f_lseek+0xb4>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	755a      	strb	r2, [r3, #21]
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e1aa      	b.n	800a83e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d0de      	beq.n	800a4b0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a4f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d809      	bhi.n	800a50e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	1d1a      	adds	r2, r3, #4
 800a4fe:	627a      	str	r2, [r7, #36]	; 0x24
 800a500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	1d1a      	adds	r2, r3, #4
 800a508:	627a      	str	r2, [r7, #36]	; 0x24
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a514:	429a      	cmp	r2, r3
 800a516:	d3c4      	bcc.n	800a4a2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a51e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	429a      	cmp	r2, r3
 800a526:	d803      	bhi.n	800a530 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	2200      	movs	r2, #0
 800a52c:	601a      	str	r2, [r3, #0]
 800a52e:	e184      	b.n	800a83a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a530:	2311      	movs	r3, #17
 800a532:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a536:	e180      	b.n	800a83a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d902      	bls.n	800a548 <f_lseek+0x114>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	f000 8172 	beq.w	800a83a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	3b01      	subs	r3, #1
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7fe fb65 	bl	8008c2c <clmt_clust>
 800a562:	4602      	mov	r2, r0
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	4619      	mov	r1, r3
 800a570:	4610      	mov	r0, r2
 800a572:	f7fe f8b3 	bl	80086dc <clust2sect>
 800a576:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d104      	bne.n	800a588 <f_lseek+0x154>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2202      	movs	r2, #2
 800a582:	755a      	strb	r2, [r3, #21]
 800a584:	2302      	movs	r3, #2
 800a586:	e15a      	b.n	800a83e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	0a5b      	lsrs	r3, r3, #9
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	8952      	ldrh	r2, [r2, #10]
 800a592:	3a01      	subs	r2, #1
 800a594:	4013      	ands	r3, r2
 800a596:	69ba      	ldr	r2, [r7, #24]
 800a598:	4413      	add	r3, r2
 800a59a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 8148 	beq.w	800a83a <f_lseek+0x406>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	f000 8142 	beq.w	800a83a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	7d1b      	ldrb	r3, [r3, #20]
 800a5ba:	b25b      	sxtb	r3, r3
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	da18      	bge.n	800a5f2 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	7858      	ldrb	r0, [r3, #1]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a1a      	ldr	r2, [r3, #32]
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	f7fd fcfa 	bl	8007fc8 <disk_write>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d004      	beq.n	800a5e4 <f_lseek+0x1b0>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	755a      	strb	r2, [r3, #21]
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e12c      	b.n	800a83e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7d1b      	ldrb	r3, [r3, #20]
 800a5e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	7858      	ldrb	r0, [r3, #1]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	f7fd fcc2 	bl	8007f88 <disk_read>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d004      	beq.n	800a614 <f_lseek+0x1e0>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	755a      	strb	r2, [r3, #21]
 800a610:	2301      	movs	r3, #1
 800a612:	e114      	b.n	800a83e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	69ba      	ldr	r2, [r7, #24]
 800a618:	621a      	str	r2, [r3, #32]
 800a61a:	e10e      	b.n	800a83a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	429a      	cmp	r2, r3
 800a624:	d908      	bls.n	800a638 <f_lseek+0x204>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	7d1b      	ldrb	r3, [r3, #20]
 800a62a:	f003 0302 	and.w	r3, r3, #2
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d102      	bne.n	800a638 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	637b      	str	r3, [r7, #52]	; 0x34
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a646:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 80a7 	beq.w	800a79e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	895b      	ldrh	r3, [r3, #10]
 800a654:	025b      	lsls	r3, r3, #9
 800a656:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d01b      	beq.n	800a696 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	1e5a      	subs	r2, r3, #1
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	fbb2 f2f3 	udiv	r2, r2, r3
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	1e59      	subs	r1, r3, #1
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a672:	429a      	cmp	r2, r3
 800a674:	d30f      	bcc.n	800a696 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	1e5a      	subs	r2, r3, #1
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	425b      	negs	r3, r3
 800a67e:	401a      	ands	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	683a      	ldr	r2, [r7, #0]
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	63bb      	str	r3, [r7, #56]	; 0x38
 800a694:	e022      	b.n	800a6dc <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d119      	bne.n	800a6d6 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fa28 	bl	8008afc <create_chain>
 800a6ac:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d104      	bne.n	800a6be <f_lseek+0x28a>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	755a      	strb	r2, [r3, #21]
 800a6ba:	2302      	movs	r3, #2
 800a6bc:	e0bf      	b.n	800a83e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c4:	d104      	bne.n	800a6d0 <f_lseek+0x29c>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	755a      	strb	r2, [r3, #21]
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e0b6      	b.n	800a83e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6d4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6da:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d05d      	beq.n	800a79e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a6e2:	e03a      	b.n	800a75a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	603b      	str	r3, [r7, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	699a      	ldr	r2, [r3, #24]
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	441a      	add	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	7d1b      	ldrb	r3, [r3, #20]
 800a6fc:	f003 0302 	and.w	r3, r3, #2
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00b      	beq.n	800a71c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fe f9f7 	bl	8008afc <create_chain>
 800a70e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	2b00      	cmp	r3, #0
 800a714:	d108      	bne.n	800a728 <f_lseek+0x2f4>
							ofs = 0; break;
 800a716:	2300      	movs	r3, #0
 800a718:	603b      	str	r3, [r7, #0]
 800a71a:	e022      	b.n	800a762 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a720:	4618      	mov	r0, r3
 800a722:	f7fd fffa 	bl	800871a <get_fat>
 800a726:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	d104      	bne.n	800a73a <f_lseek+0x306>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	755a      	strb	r2, [r3, #21]
 800a736:	2301      	movs	r3, #1
 800a738:	e081      	b.n	800a83e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d904      	bls.n	800a74a <f_lseek+0x316>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a746:	429a      	cmp	r2, r3
 800a748:	d304      	bcc.n	800a754 <f_lseek+0x320>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2202      	movs	r2, #2
 800a74e:	755a      	strb	r2, [r3, #21]
 800a750:	2302      	movs	r3, #2
 800a752:	e074      	b.n	800a83e <f_lseek+0x40a>
					fp->clust = clst;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a758:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d8c0      	bhi.n	800a6e4 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	699a      	ldr	r2, [r3, #24]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	441a      	add	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a774:	2b00      	cmp	r3, #0
 800a776:	d012      	beq.n	800a79e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fd ffad 	bl	80086dc <clust2sect>
 800a782:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a786:	2b00      	cmp	r3, #0
 800a788:	d104      	bne.n	800a794 <f_lseek+0x360>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2202      	movs	r2, #2
 800a78e:	755a      	strb	r2, [r3, #21]
 800a790:	2302      	movs	r3, #2
 800a792:	e054      	b.n	800a83e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	0a5b      	lsrs	r3, r3, #9
 800a798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a79a:	4413      	add	r3, r2
 800a79c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	699a      	ldr	r2, [r3, #24]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d90a      	bls.n	800a7c0 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	7d1b      	ldrb	r3, [r3, #20]
 800a7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d036      	beq.n	800a83a <f_lseek+0x406>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
 800a7d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d031      	beq.n	800a83a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	7d1b      	ldrb	r3, [r3, #20]
 800a7da:	b25b      	sxtb	r3, r3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	da18      	bge.n	800a812 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	7858      	ldrb	r0, [r3, #1]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1a      	ldr	r2, [r3, #32]
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	f7fd fbea 	bl	8007fc8 <disk_write>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d004      	beq.n	800a804 <f_lseek+0x3d0>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	755a      	strb	r2, [r3, #21]
 800a800:	2301      	movs	r3, #1
 800a802:	e01c      	b.n	800a83e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7d1b      	ldrb	r3, [r3, #20]
 800a808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	7858      	ldrb	r0, [r3, #1]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a81c:	2301      	movs	r3, #1
 800a81e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a820:	f7fd fbb2 	bl	8007f88 <disk_read>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d004      	beq.n	800a834 <f_lseek+0x400>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	755a      	strb	r2, [r3, #21]
 800a830:	2301      	movs	r3, #1
 800a832:	e004      	b.n	800a83e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a838:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a83a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3740      	adds	r7, #64	; 0x40
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
	...

0800a848 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800a848:	b590      	push	{r4, r7, lr}
 800a84a:	b09d      	sub	sp, #116	; 0x74
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	607a      	str	r2, [r7, #4]
 800a852:	603b      	str	r3, [r7, #0]
 800a854:	460b      	mov	r3, r1
 800a856:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800a858:	2301      	movs	r3, #1
 800a85a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800a85c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a860:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a862:	f107 030c 	add.w	r3, r7, #12
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe fd67 	bl	800933a <get_ldnumber>
 800a86c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a870:	2b00      	cmp	r3, #0
 800a872:	da02      	bge.n	800a87a <f_mkfs+0x32>
 800a874:	230b      	movs	r3, #11
 800a876:	f000 bc0d 	b.w	800b094 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800a87a:	4a94      	ldr	r2, [pc, #592]	; (800aacc <f_mkfs+0x284>)
 800a87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a87e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <f_mkfs+0x4a>
 800a886:	4a91      	ldr	r2, [pc, #580]	; (800aacc <f_mkfs+0x284>)
 800a888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a88a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800a892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a894:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800a898:	2300      	movs	r3, #0
 800a89a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800a89e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fd fb4a 	bl	8007f3c <disk_initialize>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a8ae:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <f_mkfs+0x76>
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e3ea      	b.n	800b094 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a8be:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a8c2:	f003 0304 	and.w	r3, r3, #4
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <f_mkfs+0x86>
 800a8ca:	230a      	movs	r3, #10
 800a8cc:	e3e2      	b.n	800b094 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800a8ce:	f107 0214 	add.w	r2, r7, #20
 800a8d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a8d6:	2103      	movs	r1, #3
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fd fb95 	bl	8008008 <disk_ioctl>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10c      	bne.n	800a8fe <f_mkfs+0xb6>
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d009      	beq.n	800a8fe <f_mkfs+0xb6>
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8f0:	d805      	bhi.n	800a8fe <f_mkfs+0xb6>
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	1e5a      	subs	r2, r3, #1
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <f_mkfs+0xba>
 800a8fe:	2301      	movs	r3, #1
 800a900:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800a902:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a906:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d003      	beq.n	800a916 <f_mkfs+0xce>
 800a90e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	429a      	cmp	r2, r3
 800a914:	d309      	bcc.n	800a92a <f_mkfs+0xe2>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a91c:	d805      	bhi.n	800a92a <f_mkfs+0xe2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	1e5a      	subs	r2, r3, #1
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4013      	ands	r3, r2
 800a926:	2b00      	cmp	r3, #0
 800a928:	d001      	beq.n	800a92e <f_mkfs+0xe6>
 800a92a:	2313      	movs	r3, #19
 800a92c:	e3b2      	b.n	800b094 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800a92e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	fbb2 f3f3 	udiv	r3, r2, r3
 800a936:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800a93c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a93e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a942:	fbb2 f3f3 	udiv	r3, r2, r3
 800a946:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800a948:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94c:	fb02 f303 	mul.w	r3, r2, r3
 800a950:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800a952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a954:	2b00      	cmp	r3, #0
 800a956:	d101      	bne.n	800a95c <f_mkfs+0x114>
 800a958:	230e      	movs	r3, #14
 800a95a:	e39b      	b.n	800b094 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800a95c:	f107 0210 	add.w	r2, r7, #16
 800a960:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a964:	2101      	movs	r1, #1
 800a966:	4618      	mov	r0, r3
 800a968:	f7fd fb4e 	bl	8008008 <disk_ioctl>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <f_mkfs+0x12e>
 800a972:	2301      	movs	r3, #1
 800a974:	e38e      	b.n	800b094 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800a976:	7afb      	ldrb	r3, [r7, #11]
 800a978:	f003 0308 	and.w	r3, r3, #8
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <f_mkfs+0x13c>
 800a980:	2300      	movs	r3, #0
 800a982:	e000      	b.n	800a986 <f_mkfs+0x13e>
 800a984:	233f      	movs	r3, #63	; 0x3f
 800a986:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d901      	bls.n	800a994 <f_mkfs+0x14c>
 800a990:	230e      	movs	r3, #14
 800a992:	e37f      	b.n	800b094 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2b7f      	cmp	r3, #127	; 0x7f
 800a9a0:	d801      	bhi.n	800a9a6 <f_mkfs+0x15e>
 800a9a2:	230e      	movs	r3, #14
 800a9a4:	e376      	b.n	800b094 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b80      	cmp	r3, #128	; 0x80
 800a9aa:	d901      	bls.n	800a9b0 <f_mkfs+0x168>
 800a9ac:	2313      	movs	r3, #19
 800a9ae:	e371      	b.n	800b094 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800a9b0:	7afb      	ldrb	r3, [r7, #11]
 800a9b2:	f003 0302 	and.w	r3, r3, #2
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00d      	beq.n	800a9d6 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800a9ba:	7afb      	ldrb	r3, [r7, #11]
 800a9bc:	f003 0307 	and.w	r3, r3, #7
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d004      	beq.n	800a9ce <f_mkfs+0x186>
 800a9c4:	7afb      	ldrb	r3, [r7, #11]
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d103      	bne.n	800a9d6 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a9d4:	e009      	b.n	800a9ea <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800a9d6:	7afb      	ldrb	r3, [r7, #11]
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <f_mkfs+0x19c>
 800a9e0:	2313      	movs	r3, #19
 800a9e2:	e357      	b.n	800b094 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800a9ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d13c      	bne.n	800aa70 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800a9f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d11b      	bne.n	800aa34 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	0c5b      	lsrs	r3, r3, #17
 800aa00:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800aa02:	2300      	movs	r3, #0
 800aa04:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa06:	2301      	movs	r3, #1
 800aa08:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa0a:	e005      	b.n	800aa18 <f_mkfs+0x1d0>
 800aa0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa0e:	3301      	adds	r3, #1
 800aa10:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa18:	4a2d      	ldr	r2, [pc, #180]	; (800aad0 <f_mkfs+0x288>)
 800aa1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d007      	beq.n	800aa34 <f_mkfs+0x1ec>
 800aa24:	4a2a      	ldr	r2, [pc, #168]	; (800aad0 <f_mkfs+0x288>)
 800aa26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d2eb      	bcs.n	800aa0c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa38:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa3c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	3302      	adds	r3, #2
 800aa42:	009a      	lsls	r2, r3, #2
 800aa44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa46:	4413      	add	r3, r2
 800aa48:	1e5a      	subs	r2, r3, #1
 800aa4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa50:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800aa52:	2320      	movs	r3, #32
 800aa54:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 800aa56:	2300      	movs	r3, #0
 800aa58:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800aa5a:	6a3b      	ldr	r3, [r7, #32]
 800aa5c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d903      	bls.n	800aa6c <f_mkfs+0x224>
 800aa64:	6a3b      	ldr	r3, [r7, #32]
 800aa66:	4a1b      	ldr	r2, [pc, #108]	; (800aad4 <f_mkfs+0x28c>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d952      	bls.n	800ab12 <f_mkfs+0x2ca>
 800aa6c:	230e      	movs	r3, #14
 800aa6e:	e311      	b.n	800b094 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800aa70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d11b      	bne.n	800aaae <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	0b1b      	lsrs	r3, r3, #12
 800aa7a:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa80:	2301      	movs	r3, #1
 800aa82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa84:	e005      	b.n	800aa92 <f_mkfs+0x24a>
 800aa86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa88:	3301      	adds	r3, #1
 800aa8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa92:	4a11      	ldr	r2, [pc, #68]	; (800aad8 <f_mkfs+0x290>)
 800aa94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d007      	beq.n	800aaae <f_mkfs+0x266>
 800aa9e:	4a0e      	ldr	r2, [pc, #56]	; (800aad8 <f_mkfs+0x290>)
 800aaa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d2eb      	bcs.n	800aa86 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aab2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	f640 72f5 	movw	r2, #4085	; 0xff5
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d90c      	bls.n	800aadc <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	3302      	adds	r3, #2
 800aac6:	005b      	lsls	r3, r3, #1
 800aac8:	663b      	str	r3, [r7, #96]	; 0x60
 800aaca:	e012      	b.n	800aaf2 <f_mkfs+0x2aa>
 800aacc:	2000022c 	.word	0x2000022c
 800aad0:	0800b98c 	.word	0x0800b98c
 800aad4:	0ffffff5 	.word	0x0ffffff5
 800aad8:	0800b99c 	.word	0x0800b99c
				} else {
					fmt = FS_FAT12;
 800aadc:	2301      	movs	r3, #1
 800aade:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800aae2:	6a3a      	ldr	r2, [r7, #32]
 800aae4:	4613      	mov	r3, r2
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	4413      	add	r3, r2
 800aaea:	3301      	adds	r3, #1
 800aaec:	085b      	lsrs	r3, r3, #1
 800aaee:	3303      	adds	r3, #3
 800aaf0:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800aaf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aaf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aaf6:	4413      	add	r3, r2
 800aaf8:	1e5a      	subs	r2, r3, #1
 800aafa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab00:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800ab02:	2301      	movs	r3, #1
 800ab04:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800ab06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab10:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ab12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab16:	4413      	add	r3, r2
 800ab18:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800ab1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab1e:	fb02 f203 	mul.w	r2, r2, r3
 800ab22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab24:	4413      	add	r3, r2
 800ab26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab28:	4413      	add	r3, r2
 800ab2a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	4413      	add	r3, r2
 800ab32:	1e5a      	subs	r2, r3, #1
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	425b      	negs	r3, r3
 800ab38:	401a      	ands	r2, r3
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800ab40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d108      	bne.n	800ab5a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800ab48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab4c:	4413      	add	r3, r2
 800ab4e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab54:	4413      	add	r3, r2
 800ab56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab58:	e006      	b.n	800ab68 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800ab5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab64:	4413      	add	r3, r2
 800ab66:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800ab68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab6a:	011a      	lsls	r2, r3, #4
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	441a      	add	r2, r3
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	1ad2      	subs	r2, r2, r3
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d901      	bls.n	800ab7e <f_mkfs+0x336>
 800ab7a:	230e      	movs	r3, #14
 800ab7c:	e28a      	b.n	800b094 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab82:	1ad2      	subs	r2, r2, r3
 800ab84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab88:	fb01 f303 	mul.w	r3, r1, r3
 800ab8c:	1ad2      	subs	r2, r2, r3
 800ab8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab90:	1ad2      	subs	r2, r2, r3
 800ab92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab98:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800ab9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d10f      	bne.n	800abc2 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d80a      	bhi.n	800abc2 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d105      	bne.n	800abbe <f_mkfs+0x376>
 800abb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb4:	085b      	lsrs	r3, r3, #1
 800abb6:	607b      	str	r3, [r7, #4]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d144      	bne.n	800ac48 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800abbe:	230e      	movs	r3, #14
 800abc0:	e268      	b.n	800b094 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800abc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d133      	bne.n	800ac32 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d91e      	bls.n	800ac12 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d107      	bne.n	800abea <f_mkfs+0x3a2>
 800abda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abdc:	005b      	lsls	r3, r3, #1
 800abde:	2b40      	cmp	r3, #64	; 0x40
 800abe0:	d803      	bhi.n	800abea <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800abe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe4:	005b      	lsls	r3, r3, #1
 800abe6:	607b      	str	r3, [r7, #4]
 800abe8:	e033      	b.n	800ac52 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800abea:	7afb      	ldrb	r3, [r7, #11]
 800abec:	f003 0302 	and.w	r3, r3, #2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800abf4:	2303      	movs	r3, #3
 800abf6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800abfa:	e02a      	b.n	800ac52 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d105      	bne.n	800ac0e <f_mkfs+0x3c6>
 800ac02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	607b      	str	r3, [r7, #4]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b80      	cmp	r3, #128	; 0x80
 800ac0c:	d91e      	bls.n	800ac4c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800ac0e:	230e      	movs	r3, #14
 800ac10:	e240      	b.n	800b094 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d80a      	bhi.n	800ac32 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <f_mkfs+0x3e6>
 800ac22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	607b      	str	r3, [r7, #4]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b80      	cmp	r3, #128	; 0x80
 800ac2c:	d910      	bls.n	800ac50 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800ac2e:	230e      	movs	r3, #14
 800ac30:	e230      	b.n	800b094 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800ac32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d10c      	bne.n	800ac54 <f_mkfs+0x40c>
 800ac3a:	6a3b      	ldr	r3, [r7, #32]
 800ac3c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d907      	bls.n	800ac54 <f_mkfs+0x40c>
 800ac44:	230e      	movs	r3, #14
 800ac46:	e225      	b.n	800b094 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ac48:	bf00      	nop
 800ac4a:	e6ce      	b.n	800a9ea <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ac4c:	bf00      	nop
 800ac4e:	e6cc      	b.n	800a9ea <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ac50:	bf00      	nop
			pau = au;
 800ac52:	e6ca      	b.n	800a9ea <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800ac54:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800ac56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac58:	461a      	mov	r2, r3
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac5e:	f7fd fa94 	bl	800818a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800ac62:	220b      	movs	r2, #11
 800ac64:	49bc      	ldr	r1, [pc, #752]	; (800af58 <f_mkfs+0x710>)
 800ac66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac68:	f7fd fa6e 	bl	8008148 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6e:	330b      	adds	r3, #11
 800ac70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ac72:	4611      	mov	r1, r2
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7fd fa20 	bl	80080ba <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	330d      	adds	r3, #13
 800ac7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac80:	b2d2      	uxtb	r2, r2
 800ac82:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800ac84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac86:	330e      	adds	r3, #14
 800ac88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac8a:	b292      	uxth	r2, r2
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fd fa13 	bl	80080ba <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800ac94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac96:	3310      	adds	r3, #16
 800ac98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac9a:	b2d2      	uxtb	r2, r2
 800ac9c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	f103 0211 	add.w	r2, r3, #17
 800aca4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d002      	beq.n	800acb2 <f_mkfs+0x46a>
 800acac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acae:	b29b      	uxth	r3, r3
 800acb0:	e000      	b.n	800acb4 <f_mkfs+0x46c>
 800acb2:	2300      	movs	r3, #0
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f7fd f9ff 	bl	80080ba <st_word>
		if (sz_vol < 0x10000) {
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acc2:	d208      	bcs.n	800acd6 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800acc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc6:	3313      	adds	r3, #19
 800acc8:	693a      	ldr	r2, [r7, #16]
 800acca:	b292      	uxth	r2, r2
 800accc:	4611      	mov	r1, r2
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fd f9f3 	bl	80080ba <st_word>
 800acd4:	e006      	b.n	800ace4 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800acd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd8:	3320      	adds	r3, #32
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	4611      	mov	r1, r2
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fd fa06 	bl	80080f0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800ace4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace6:	3315      	adds	r3, #21
 800ace8:	22f8      	movs	r2, #248	; 0xf8
 800acea:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	3318      	adds	r3, #24
 800acf0:	213f      	movs	r1, #63	; 0x3f
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fd f9e1 	bl	80080ba <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfa:	331a      	adds	r3, #26
 800acfc:	21ff      	movs	r1, #255	; 0xff
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fd f9db 	bl	80080ba <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad06:	331c      	adds	r3, #28
 800ad08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fd f9f0 	bl	80080f0 <st_dword>
		if (fmt == FS_FAT32) {
 800ad10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ad14:	2b03      	cmp	r3, #3
 800ad16:	d131      	bne.n	800ad7c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800ad1e:	f7fb fde7 	bl	80068f0 <get_fattime>
 800ad22:	4603      	mov	r3, r0
 800ad24:	4619      	mov	r1, r3
 800ad26:	4620      	mov	r0, r4
 800ad28:	f7fd f9e2 	bl	80080f0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	3324      	adds	r3, #36	; 0x24
 800ad30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fd f9dc 	bl	80080f0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	332c      	adds	r3, #44	; 0x2c
 800ad3c:	2102      	movs	r1, #2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fd f9d6 	bl	80080f0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	3330      	adds	r3, #48	; 0x30
 800ad48:	2101      	movs	r1, #1
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fd f9b5 	bl	80080ba <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800ad50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad52:	3332      	adds	r3, #50	; 0x32
 800ad54:	2106      	movs	r1, #6
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fd f9af 	bl	80080ba <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800ad5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5e:	3340      	adds	r3, #64	; 0x40
 800ad60:	2280      	movs	r2, #128	; 0x80
 800ad62:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	3342      	adds	r3, #66	; 0x42
 800ad68:	2229      	movs	r2, #41	; 0x29
 800ad6a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800ad6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6e:	3347      	adds	r3, #71	; 0x47
 800ad70:	2213      	movs	r2, #19
 800ad72:	497a      	ldr	r1, [pc, #488]	; (800af5c <f_mkfs+0x714>)
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fd f9e7 	bl	8008148 <mem_cpy>
 800ad7a:	e020      	b.n	800adbe <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800ad82:	f7fb fdb5 	bl	80068f0 <get_fattime>
 800ad86:	4603      	mov	r3, r0
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f7fd f9b0 	bl	80080f0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	3316      	adds	r3, #22
 800ad94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad96:	b292      	uxth	r2, r2
 800ad98:	4611      	mov	r1, r2
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fd f98d 	bl	80080ba <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800ada0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada2:	3324      	adds	r3, #36	; 0x24
 800ada4:	2280      	movs	r2, #128	; 0x80
 800ada6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800ada8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adaa:	3326      	adds	r3, #38	; 0x26
 800adac:	2229      	movs	r2, #41	; 0x29
 800adae:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb2:	332b      	adds	r3, #43	; 0x2b
 800adb4:	2213      	movs	r2, #19
 800adb6:	496a      	ldr	r1, [pc, #424]	; (800af60 <f_mkfs+0x718>)
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fd f9c5 	bl	8008148 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800adc4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fd f976 	bl	80080ba <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800adce:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800add2:	2301      	movs	r3, #1
 800add4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800add6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800add8:	f7fd f8f6 	bl	8007fc8 <disk_write>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <f_mkfs+0x59e>
 800ade2:	2301      	movs	r3, #1
 800ade4:	e156      	b.n	800b094 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800ade6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800adea:	2b03      	cmp	r3, #3
 800adec:	d140      	bne.n	800ae70 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	1d9a      	adds	r2, r3, #6
 800adf2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800adf6:	2301      	movs	r3, #1
 800adf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800adfa:	f7fd f8e5 	bl	8007fc8 <disk_write>
			mem_set(buf, 0, ss);
 800adfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae00:	461a      	mov	r2, r3
 800ae02:	2100      	movs	r1, #0
 800ae04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae06:	f7fd f9c0 	bl	800818a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800ae0a:	4956      	ldr	r1, [pc, #344]	; (800af64 <f_mkfs+0x71c>)
 800ae0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae0e:	f7fd f96f 	bl	80080f0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ae18:	4953      	ldr	r1, [pc, #332]	; (800af68 <f_mkfs+0x720>)
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fd f968 	bl	80080f0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	f7fd f95f 	bl	80080f0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ae38:	2102      	movs	r1, #2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fd f958 	bl	80080f0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae46:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fd f935 	bl	80080ba <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	1dda      	adds	r2, r3, #7
 800ae54:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ae58:	2301      	movs	r3, #1
 800ae5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae5c:	f7fd f8b4 	bl	8007fc8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	1c5a      	adds	r2, r3, #1
 800ae64:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ae68:	2301      	movs	r3, #1
 800ae6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae6c:	f7fd f8ac 	bl	8007fc8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800ae70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae72:	2100      	movs	r1, #0
 800ae74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae76:	f7fd f988 	bl	800818a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800ae7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae7c:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ae7e:	2300      	movs	r3, #0
 800ae80:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae82:	e04b      	b.n	800af1c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800ae84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	d113      	bne.n	800aeb4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800ae8c:	f06f 0107 	mvn.w	r1, #7
 800ae90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae92:	f7fd f92d 	bl	80080f0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	3304      	adds	r3, #4
 800ae9a:	f04f 31ff 	mov.w	r1, #4294967295
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fd f926 	bl	80080f0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	3308      	adds	r3, #8
 800aea8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fd f91f 	bl	80080f0 <st_dword>
 800aeb2:	e00b      	b.n	800aecc <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800aeb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d101      	bne.n	800aec0 <f_mkfs+0x678>
 800aebc:	4b2b      	ldr	r3, [pc, #172]	; (800af6c <f_mkfs+0x724>)
 800aebe:	e001      	b.n	800aec4 <f_mkfs+0x67c>
 800aec0:	f06f 0307 	mvn.w	r3, #7
 800aec4:	4619      	mov	r1, r3
 800aec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aec8:	f7fd f912 	bl	80080f0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800aecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aece:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800aed0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed4:	4293      	cmp	r3, r2
 800aed6:	bf28      	it	cs
 800aed8:	4613      	movcs	r3, r2
 800aeda:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800aedc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800aee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aee2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aee4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aee6:	f7fd f86f 	bl	8007fc8 <disk_write>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d001      	beq.n	800aef4 <f_mkfs+0x6ac>
 800aef0:	2301      	movs	r3, #1
 800aef2:	e0cf      	b.n	800b094 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800aef4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aef6:	461a      	mov	r2, r3
 800aef8:	2100      	movs	r1, #0
 800aefa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aefc:	f7fd f945 	bl	800818a <mem_set>
				sect += n; nsect -= n;
 800af00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af04:	4413      	add	r3, r2
 800af06:	66bb      	str	r3, [r7, #104]	; 0x68
 800af08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800af10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1dc      	bne.n	800aed0 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800af16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af18:	3301      	adds	r3, #1
 800af1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af20:	429a      	cmp	r2, r3
 800af22:	d3af      	bcc.n	800ae84 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800af24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d101      	bne.n	800af30 <f_mkfs+0x6e8>
 800af2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af2e:	e000      	b.n	800af32 <f_mkfs+0x6ea>
 800af30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af32:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800af34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af38:	4293      	cmp	r3, r2
 800af3a:	bf28      	it	cs
 800af3c:	4613      	movcs	r3, r2
 800af3e:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800af40:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800af44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af4a:	f7fd f83d 	bl	8007fc8 <disk_write>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00d      	beq.n	800af70 <f_mkfs+0x728>
 800af54:	2301      	movs	r3, #1
 800af56:	e09d      	b.n	800b094 <f_mkfs+0x84c>
 800af58:	0800b8b0 	.word	0x0800b8b0
 800af5c:	0800b8bc 	.word	0x0800b8bc
 800af60:	0800b8d0 	.word	0x0800b8d0
 800af64:	41615252 	.word	0x41615252
 800af68:	61417272 	.word	0x61417272
 800af6c:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800af70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af74:	4413      	add	r3, r2
 800af76:	66bb      	str	r3, [r7, #104]	; 0x68
 800af78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800af80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1d6      	bne.n	800af34 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800af86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800af8a:	2b03      	cmp	r3, #3
 800af8c:	d103      	bne.n	800af96 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800af8e:	230c      	movs	r3, #12
 800af90:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800af94:	e010      	b.n	800afb8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af9c:	d303      	bcc.n	800afa6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800af9e:	2306      	movs	r3, #6
 800afa0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800afa4:	e008      	b.n	800afb8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800afa6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d101      	bne.n	800afb2 <f_mkfs+0x76a>
 800afae:	2304      	movs	r3, #4
 800afb0:	e000      	b.n	800afb4 <f_mkfs+0x76c>
 800afb2:	2301      	movs	r3, #1
 800afb4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	f003 0308 	and.w	r3, r3, #8
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d15b      	bne.n	800b07a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800afc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800afc4:	461a      	mov	r2, r3
 800afc6:	2100      	movs	r1, #0
 800afc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afca:	f7fd f8de 	bl	800818a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800afd4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800afd8:	4618      	mov	r0, r3
 800afda:	f7fd f86e 	bl	80080ba <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800afe4:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	2200      	movs	r2, #0
 800afea:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	3301      	adds	r3, #1
 800aff0:	2201      	movs	r2, #1
 800aff2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	3302      	adds	r3, #2
 800aff8:	2201      	movs	r2, #1
 800affa:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	3303      	adds	r3, #3
 800b000:	2200      	movs	r2, #0
 800b002:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	3304      	adds	r3, #4
 800b008:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800b00c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b012:	441a      	add	r2, r3
 800b014:	4b21      	ldr	r3, [pc, #132]	; (800b09c <f_mkfs+0x854>)
 800b016:	fba3 1302 	umull	r1, r3, r3, r2
 800b01a:	1ad2      	subs	r2, r2, r3
 800b01c:	0852      	lsrs	r2, r2, #1
 800b01e:	4413      	add	r3, r2
 800b020:	0b5b      	lsrs	r3, r3, #13
 800b022:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	3305      	adds	r3, #5
 800b028:	22fe      	movs	r2, #254	; 0xfe
 800b02a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800b02c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b02e:	089b      	lsrs	r3, r3, #2
 800b030:	b2da      	uxtb	r2, r3
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	3306      	adds	r3, #6
 800b036:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800b03a:	b2d2      	uxtb	r2, r2
 800b03c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	3307      	adds	r3, #7
 800b042:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b044:	b2d2      	uxtb	r2, r2
 800b046:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	3308      	adds	r3, #8
 800b04c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fd f84e 	bl	80080f0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	330c      	adds	r3, #12
 800b058:	693a      	ldr	r2, [r7, #16]
 800b05a:	4611      	mov	r1, r2
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fd f847 	bl	80080f0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800b062:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b066:	2301      	movs	r3, #1
 800b068:	2200      	movs	r2, #0
 800b06a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b06c:	f7fc ffac 	bl	8007fc8 <disk_write>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <f_mkfs+0x832>
 800b076:	2301      	movs	r3, #1
 800b078:	e00c      	b.n	800b094 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800b07a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b07e:	2200      	movs	r2, #0
 800b080:	2100      	movs	r1, #0
 800b082:	4618      	mov	r0, r3
 800b084:	f7fc ffc0 	bl	8008008 <disk_ioctl>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <f_mkfs+0x84a>
 800b08e:	2301      	movs	r3, #1
 800b090:	e000      	b.n	800b094 <f_mkfs+0x84c>

	return FR_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3774      	adds	r7, #116	; 0x74
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd90      	pop	{r4, r7, pc}
 800b09c:	0515565b 	.word	0x0515565b

0800b0a0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b0ac:	78fb      	ldrb	r3, [r7, #3]
 800b0ae:	2b0a      	cmp	r3, #10
 800b0b0:	d103      	bne.n	800b0ba <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b0b2:	210d      	movs	r1, #13
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7ff fff3 	bl	800b0a0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	db25      	blt.n	800b112 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	60fa      	str	r2, [r7, #12]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	78fa      	ldrb	r2, [r7, #3]
 800b0d2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b3c      	cmp	r3, #60	; 0x3c
 800b0d8:	dd12      	ble.n	800b100 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f103 010c 	add.w	r1, r3, #12
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	f107 0308 	add.w	r3, r7, #8
 800b0ea:	f7fe ff86 	bl	8009ffa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d101      	bne.n	800b0fa <putc_bfd+0x5a>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e001      	b.n	800b0fe <putc_bfd+0x5e>
 800b0fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0fe:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	1c5a      	adds	r2, r3, #1
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	609a      	str	r2, [r3, #8]
 800b110:	e000      	b.n	800b114 <putc_bfd+0x74>
	if (i < 0) return;
 800b112:	bf00      	nop
}
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b084      	sub	sp, #16
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	db17      	blt.n	800b15a <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6818      	ldr	r0, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f103 010c 	add.w	r1, r3, #12
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	461a      	mov	r2, r3
 800b13a:	f107 030c 	add.w	r3, r7, #12
 800b13e:	f7fe ff5c 	bl	8009ffa <f_write>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d108      	bne.n	800b15a <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	461a      	mov	r2, r3
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	429a      	cmp	r2, r3
 800b152:	d102      	bne.n	800b15a <putc_flush+0x40>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	e001      	b.n	800b15e <putc_flush+0x44>
	return EOF;
 800b15a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	605a      	str	r2, [r3, #4]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	685a      	ldr	r2, [r3, #4]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	609a      	str	r2, [r3, #8]
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b190:	b40e      	push	{r1, r2, r3}
 800b192:	b580      	push	{r7, lr}
 800b194:	b0a7      	sub	sp, #156	; 0x9c
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b19a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b19e:	6879      	ldr	r1, [r7, #4]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7ff ffe0 	bl	800b166 <putc_init>

	va_start(arp, fmt);
 800b1a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b1aa:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b1ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1b0:	1c5a      	adds	r2, r3, #1
 800b1b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b1bc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 81f4 	beq.w	800b5ae <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800b1c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b1ca:	2b25      	cmp	r3, #37	; 0x25
 800b1cc:	d008      	beq.n	800b1e0 <f_printf+0x50>
			putc_bfd(&pb, c);
 800b1ce:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b1d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff ff61 	bl	800b0a0 <putc_bfd>
			continue;
 800b1de:	e1e5      	b.n	800b5ac <f_printf+0x41c>
		}
		w = f = 0;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b1ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1f0:	1c5a      	adds	r2, r3, #1
 800b1f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b1fc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b200:	2b30      	cmp	r3, #48	; 0x30
 800b202:	d10b      	bne.n	800b21c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b204:	2301      	movs	r3, #1
 800b206:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b20a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b20e:	1c5a      	adds	r2, r3, #1
 800b210:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b21a:	e024      	b.n	800b266 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b21c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b220:	2b2d      	cmp	r3, #45	; 0x2d
 800b222:	d120      	bne.n	800b266 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b224:	2302      	movs	r3, #2
 800b226:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b22a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b23a:	e014      	b.n	800b266 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b23c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b240:	4613      	mov	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	005b      	lsls	r3, r3, #1
 800b248:	461a      	mov	r2, r3
 800b24a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b24e:	4413      	add	r3, r2
 800b250:	3b30      	subs	r3, #48	; 0x30
 800b252:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b266:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b26a:	2b2f      	cmp	r3, #47	; 0x2f
 800b26c:	d903      	bls.n	800b276 <f_printf+0xe6>
 800b26e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b272:	2b39      	cmp	r3, #57	; 0x39
 800b274:	d9e2      	bls.n	800b23c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b276:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b27a:	2b6c      	cmp	r3, #108	; 0x6c
 800b27c:	d003      	beq.n	800b286 <f_printf+0xf6>
 800b27e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b282:	2b4c      	cmp	r3, #76	; 0x4c
 800b284:	d10d      	bne.n	800b2a2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b286:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b28a:	f043 0304 	orr.w	r3, r3, #4
 800b28e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b296:	1c5a      	adds	r2, r3, #1
 800b298:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b2a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f000 8183 	beq.w	800b5b2 <f_printf+0x422>
		d = c;
 800b2ac:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b2b0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b2b4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b2b8:	2b60      	cmp	r3, #96	; 0x60
 800b2ba:	d908      	bls.n	800b2ce <f_printf+0x13e>
 800b2bc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b2c0:	2b7a      	cmp	r3, #122	; 0x7a
 800b2c2:	d804      	bhi.n	800b2ce <f_printf+0x13e>
 800b2c4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b2c8:	3b20      	subs	r3, #32
 800b2ca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b2ce:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b2d2:	3b42      	subs	r3, #66	; 0x42
 800b2d4:	2b16      	cmp	r3, #22
 800b2d6:	f200 8098 	bhi.w	800b40a <f_printf+0x27a>
 800b2da:	a201      	add	r2, pc, #4	; (adr r2, 800b2e0 <f_printf+0x150>)
 800b2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e0:	0800b3eb 	.word	0x0800b3eb
 800b2e4:	0800b3d3 	.word	0x0800b3d3
 800b2e8:	0800b3fb 	.word	0x0800b3fb
 800b2ec:	0800b40b 	.word	0x0800b40b
 800b2f0:	0800b40b 	.word	0x0800b40b
 800b2f4:	0800b40b 	.word	0x0800b40b
 800b2f8:	0800b40b 	.word	0x0800b40b
 800b2fc:	0800b40b 	.word	0x0800b40b
 800b300:	0800b40b 	.word	0x0800b40b
 800b304:	0800b40b 	.word	0x0800b40b
 800b308:	0800b40b 	.word	0x0800b40b
 800b30c:	0800b40b 	.word	0x0800b40b
 800b310:	0800b40b 	.word	0x0800b40b
 800b314:	0800b3f3 	.word	0x0800b3f3
 800b318:	0800b40b 	.word	0x0800b40b
 800b31c:	0800b40b 	.word	0x0800b40b
 800b320:	0800b40b 	.word	0x0800b40b
 800b324:	0800b33d 	.word	0x0800b33d
 800b328:	0800b40b 	.word	0x0800b40b
 800b32c:	0800b3fb 	.word	0x0800b3fb
 800b330:	0800b40b 	.word	0x0800b40b
 800b334:	0800b40b 	.word	0x0800b40b
 800b338:	0800b403 	.word	0x0800b403
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b33c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b33e:	1d1a      	adds	r2, r3, #4
 800b340:	67ba      	str	r2, [r7, #120]	; 0x78
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b346:	2300      	movs	r3, #0
 800b348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b34c:	e004      	b.n	800b358 <f_printf+0x1c8>
 800b34e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b352:	3301      	adds	r3, #1
 800b354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b358:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b35a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b35e:	4413      	add	r3, r2
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1f3      	bne.n	800b34e <f_printf+0x1be>
			if (!(f & 2)) {
 800b366:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b36a:	f003 0302 	and.w	r3, r3, #2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d11a      	bne.n	800b3a8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b372:	e005      	b.n	800b380 <f_printf+0x1f0>
 800b374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b378:	2120      	movs	r1, #32
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7ff fe90 	bl	800b0a0 <putc_bfd>
 800b380:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b384:	1c5a      	adds	r2, r3, #1
 800b386:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b38a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b38e:	429a      	cmp	r2, r3
 800b390:	d8f0      	bhi.n	800b374 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b392:	e009      	b.n	800b3a8 <f_printf+0x218>
 800b394:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b39a:	781a      	ldrb	r2, [r3, #0]
 800b39c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff fe7c 	bl	800b0a0 <putc_bfd>
 800b3a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1f1      	bne.n	800b394 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b3b0:	e005      	b.n	800b3be <f_printf+0x22e>
 800b3b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3b6:	2120      	movs	r1, #32
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7ff fe71 	bl	800b0a0 <putc_bfd>
 800b3be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b3c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d8f0      	bhi.n	800b3b2 <f_printf+0x222>
			continue;
 800b3d0:	e0ec      	b.n	800b5ac <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b3d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3d4:	1d1a      	adds	r2, r3, #4
 800b3d6:	67ba      	str	r2, [r7, #120]	; 0x78
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff fe5c 	bl	800b0a0 <putc_bfd>
 800b3e8:	e0e0      	b.n	800b5ac <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800b3ea:	2302      	movs	r3, #2
 800b3ec:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b3f0:	e014      	b.n	800b41c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b3f2:	2308      	movs	r3, #8
 800b3f4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b3f8:	e010      	b.n	800b41c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b3fa:	230a      	movs	r3, #10
 800b3fc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b400:	e00c      	b.n	800b41c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b402:	2310      	movs	r3, #16
 800b404:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b408:	e008      	b.n	800b41c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b40a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b40e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b412:	4611      	mov	r1, r2
 800b414:	4618      	mov	r0, r3
 800b416:	f7ff fe43 	bl	800b0a0 <putc_bfd>
 800b41a:	e0c7      	b.n	800b5ac <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b41c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b420:	f003 0304 	and.w	r3, r3, #4
 800b424:	2b00      	cmp	r3, #0
 800b426:	d004      	beq.n	800b432 <f_printf+0x2a2>
 800b428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b42a:	1d1a      	adds	r2, r3, #4
 800b42c:	67ba      	str	r2, [r7, #120]	; 0x78
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	e00c      	b.n	800b44c <f_printf+0x2bc>
 800b432:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b436:	2b44      	cmp	r3, #68	; 0x44
 800b438:	d104      	bne.n	800b444 <f_printf+0x2b4>
 800b43a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b43c:	1d1a      	adds	r2, r3, #4
 800b43e:	67ba      	str	r2, [r7, #120]	; 0x78
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	e003      	b.n	800b44c <f_printf+0x2bc>
 800b444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b446:	1d1a      	adds	r2, r3, #4
 800b448:	67ba      	str	r2, [r7, #120]	; 0x78
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b450:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b454:	2b44      	cmp	r3, #68	; 0x44
 800b456:	d10e      	bne.n	800b476 <f_printf+0x2e6>
 800b458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	da0a      	bge.n	800b476 <f_printf+0x2e6>
			v = 0 - v;
 800b460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b464:	425b      	negs	r3, r3
 800b466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b46a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b46e:	f043 0308 	orr.w	r3, r3, #8
 800b472:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b47c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b484:	fbb3 f1f2 	udiv	r1, r3, r2
 800b488:	fb02 f201 	mul.w	r2, r2, r1
 800b48c:	1a9b      	subs	r3, r3, r2
 800b48e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b492:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b496:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b49e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b4a2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b4a6:	2b09      	cmp	r3, #9
 800b4a8:	d90b      	bls.n	800b4c2 <f_printf+0x332>
 800b4aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b4ae:	2b78      	cmp	r3, #120	; 0x78
 800b4b0:	d101      	bne.n	800b4b6 <f_printf+0x326>
 800b4b2:	2227      	movs	r2, #39	; 0x27
 800b4b4:	e000      	b.n	800b4b8 <f_printf+0x328>
 800b4b6:	2207      	movs	r2, #7
 800b4b8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b4bc:	4413      	add	r3, r2
 800b4be:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b4c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4c6:	1c5a      	adds	r2, r3, #1
 800b4c8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b4cc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b4d0:	3230      	adds	r2, #48	; 0x30
 800b4d2:	b2d2      	uxtb	r2, r2
 800b4d4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800b4d8:	440b      	add	r3, r1
 800b4da:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b4de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d003      	beq.n	800b4ee <f_printf+0x35e>
 800b4e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4ea:	2b1f      	cmp	r3, #31
 800b4ec:	d9c6      	bls.n	800b47c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b4ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b4f2:	f003 0308 	and.w	r3, r3, #8
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00a      	beq.n	800b510 <f_printf+0x380>
 800b4fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4fe:	1c5a      	adds	r2, r3, #1
 800b500:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b504:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b508:	4413      	add	r3, r2
 800b50a:	222d      	movs	r2, #45	; 0x2d
 800b50c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b514:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b518:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <f_printf+0x398>
 800b524:	2330      	movs	r3, #48	; 0x30
 800b526:	e000      	b.n	800b52a <f_printf+0x39a>
 800b528:	2320      	movs	r3, #32
 800b52a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b52e:	e007      	b.n	800b540 <f_printf+0x3b0>
 800b530:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b538:	4611      	mov	r1, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff fdb0 	bl	800b0a0 <putc_bfd>
 800b540:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b544:	f003 0302 	and.w	r3, r3, #2
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d108      	bne.n	800b55e <f_printf+0x3ce>
 800b54c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b556:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d8e8      	bhi.n	800b530 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800b55e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b562:	3b01      	subs	r3, #1
 800b564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b568:	f107 020c 	add.w	r2, r7, #12
 800b56c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b570:	4413      	add	r3, r2
 800b572:	781a      	ldrb	r2, [r3, #0]
 800b574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b578:	4611      	mov	r1, r2
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff fd90 	bl	800b0a0 <putc_bfd>
		} while (i);
 800b580:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1ea      	bne.n	800b55e <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800b588:	e007      	b.n	800b59a <f_printf+0x40a>
 800b58a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b58e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b592:	4611      	mov	r1, r2
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff fd83 	bl	800b0a0 <putc_bfd>
 800b59a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b5a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d8ee      	bhi.n	800b58a <f_printf+0x3fa>
		c = *fmt++;
 800b5ac:	e5fe      	b.n	800b1ac <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b5ae:	bf00      	nop
 800b5b0:	e000      	b.n	800b5b4 <f_printf+0x424>
		if (!c) break;
 800b5b2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b5b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7ff fdae 	bl	800b11a <putc_flush>
 800b5be:	4603      	mov	r3, r0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	379c      	adds	r7, #156	; 0x9c
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5ca:	b003      	add	sp, #12
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop

0800b5d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b087      	sub	sp, #28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b5e6:	4b1f      	ldr	r3, [pc, #124]	; (800b664 <FATFS_LinkDriverEx+0x94>)
 800b5e8:	7a5b      	ldrb	r3, [r3, #9]
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d131      	bne.n	800b654 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b5f0:	4b1c      	ldr	r3, [pc, #112]	; (800b664 <FATFS_LinkDriverEx+0x94>)
 800b5f2:	7a5b      	ldrb	r3, [r3, #9]
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	4b1a      	ldr	r3, [pc, #104]	; (800b664 <FATFS_LinkDriverEx+0x94>)
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b5fe:	4b19      	ldr	r3, [pc, #100]	; (800b664 <FATFS_LinkDriverEx+0x94>)
 800b600:	7a5b      	ldrb	r3, [r3, #9]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	4a17      	ldr	r2, [pc, #92]	; (800b664 <FATFS_LinkDriverEx+0x94>)
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	4413      	add	r3, r2
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b60e:	4b15      	ldr	r3, [pc, #84]	; (800b664 <FATFS_LinkDriverEx+0x94>)
 800b610:	7a5b      	ldrb	r3, [r3, #9]
 800b612:	b2db      	uxtb	r3, r3
 800b614:	461a      	mov	r2, r3
 800b616:	4b13      	ldr	r3, [pc, #76]	; (800b664 <FATFS_LinkDriverEx+0x94>)
 800b618:	4413      	add	r3, r2
 800b61a:	79fa      	ldrb	r2, [r7, #7]
 800b61c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b61e:	4b11      	ldr	r3, [pc, #68]	; (800b664 <FATFS_LinkDriverEx+0x94>)
 800b620:	7a5b      	ldrb	r3, [r3, #9]
 800b622:	b2db      	uxtb	r3, r3
 800b624:	1c5a      	adds	r2, r3, #1
 800b626:	b2d1      	uxtb	r1, r2
 800b628:	4a0e      	ldr	r2, [pc, #56]	; (800b664 <FATFS_LinkDriverEx+0x94>)
 800b62a:	7251      	strb	r1, [r2, #9]
 800b62c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b62e:	7dbb      	ldrb	r3, [r7, #22]
 800b630:	3330      	adds	r3, #48	; 0x30
 800b632:	b2da      	uxtb	r2, r3
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	3301      	adds	r3, #1
 800b63c:	223a      	movs	r2, #58	; 0x3a
 800b63e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	3302      	adds	r3, #2
 800b644:	222f      	movs	r2, #47	; 0x2f
 800b646:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	3303      	adds	r3, #3
 800b64c:	2200      	movs	r2, #0
 800b64e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b650:	2300      	movs	r3, #0
 800b652:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b654:	7dfb      	ldrb	r3, [r7, #23]
}
 800b656:	4618      	mov	r0, r3
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	20000254 	.word	0x20000254

0800b668 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b672:	2200      	movs	r2, #0
 800b674:	6839      	ldr	r1, [r7, #0]
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7ff ffaa 	bl	800b5d0 <FATFS_LinkDriverEx>
 800b67c:	4603      	mov	r3, r0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <atoi>:
 800b686:	220a      	movs	r2, #10
 800b688:	2100      	movs	r1, #0
 800b68a:	f000 b8a9 	b.w	800b7e0 <strtol>
	...

0800b690 <__libc_init_array>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	4e0d      	ldr	r6, [pc, #52]	; (800b6c8 <__libc_init_array+0x38>)
 800b694:	4c0d      	ldr	r4, [pc, #52]	; (800b6cc <__libc_init_array+0x3c>)
 800b696:	1ba4      	subs	r4, r4, r6
 800b698:	10a4      	asrs	r4, r4, #2
 800b69a:	2500      	movs	r5, #0
 800b69c:	42a5      	cmp	r5, r4
 800b69e:	d109      	bne.n	800b6b4 <__libc_init_array+0x24>
 800b6a0:	4e0b      	ldr	r6, [pc, #44]	; (800b6d0 <__libc_init_array+0x40>)
 800b6a2:	4c0c      	ldr	r4, [pc, #48]	; (800b6d4 <__libc_init_array+0x44>)
 800b6a4:	f000 f8d4 	bl	800b850 <_init>
 800b6a8:	1ba4      	subs	r4, r4, r6
 800b6aa:	10a4      	asrs	r4, r4, #2
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	42a5      	cmp	r5, r4
 800b6b0:	d105      	bne.n	800b6be <__libc_init_array+0x2e>
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6b8:	4798      	blx	r3
 800b6ba:	3501      	adds	r5, #1
 800b6bc:	e7ee      	b.n	800b69c <__libc_init_array+0xc>
 800b6be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6c2:	4798      	blx	r3
 800b6c4:	3501      	adds	r5, #1
 800b6c6:	e7f2      	b.n	800b6ae <__libc_init_array+0x1e>
 800b6c8:	0800bac0 	.word	0x0800bac0
 800b6cc:	0800bac0 	.word	0x0800bac0
 800b6d0:	0800bac0 	.word	0x0800bac0
 800b6d4:	0800bac4 	.word	0x0800bac4

0800b6d8 <memset>:
 800b6d8:	4402      	add	r2, r0
 800b6da:	4603      	mov	r3, r0
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d100      	bne.n	800b6e2 <memset+0xa>
 800b6e0:	4770      	bx	lr
 800b6e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6e6:	e7f9      	b.n	800b6dc <memset+0x4>

0800b6e8 <_strtol_l.isra.0>:
 800b6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ec:	4680      	mov	r8, r0
 800b6ee:	4689      	mov	r9, r1
 800b6f0:	4692      	mov	sl, r2
 800b6f2:	461e      	mov	r6, r3
 800b6f4:	460f      	mov	r7, r1
 800b6f6:	463d      	mov	r5, r7
 800b6f8:	9808      	ldr	r0, [sp, #32]
 800b6fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6fe:	f000 f885 	bl	800b80c <__locale_ctype_ptr_l>
 800b702:	4420      	add	r0, r4
 800b704:	7843      	ldrb	r3, [r0, #1]
 800b706:	f013 0308 	ands.w	r3, r3, #8
 800b70a:	d132      	bne.n	800b772 <_strtol_l.isra.0+0x8a>
 800b70c:	2c2d      	cmp	r4, #45	; 0x2d
 800b70e:	d132      	bne.n	800b776 <_strtol_l.isra.0+0x8e>
 800b710:	787c      	ldrb	r4, [r7, #1]
 800b712:	1cbd      	adds	r5, r7, #2
 800b714:	2201      	movs	r2, #1
 800b716:	2e00      	cmp	r6, #0
 800b718:	d05d      	beq.n	800b7d6 <_strtol_l.isra.0+0xee>
 800b71a:	2e10      	cmp	r6, #16
 800b71c:	d109      	bne.n	800b732 <_strtol_l.isra.0+0x4a>
 800b71e:	2c30      	cmp	r4, #48	; 0x30
 800b720:	d107      	bne.n	800b732 <_strtol_l.isra.0+0x4a>
 800b722:	782b      	ldrb	r3, [r5, #0]
 800b724:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b728:	2b58      	cmp	r3, #88	; 0x58
 800b72a:	d14f      	bne.n	800b7cc <_strtol_l.isra.0+0xe4>
 800b72c:	786c      	ldrb	r4, [r5, #1]
 800b72e:	2610      	movs	r6, #16
 800b730:	3502      	adds	r5, #2
 800b732:	2a00      	cmp	r2, #0
 800b734:	bf14      	ite	ne
 800b736:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b73a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b73e:	2700      	movs	r7, #0
 800b740:	fbb1 fcf6 	udiv	ip, r1, r6
 800b744:	4638      	mov	r0, r7
 800b746:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b74a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b74e:	2b09      	cmp	r3, #9
 800b750:	d817      	bhi.n	800b782 <_strtol_l.isra.0+0x9a>
 800b752:	461c      	mov	r4, r3
 800b754:	42a6      	cmp	r6, r4
 800b756:	dd23      	ble.n	800b7a0 <_strtol_l.isra.0+0xb8>
 800b758:	1c7b      	adds	r3, r7, #1
 800b75a:	d007      	beq.n	800b76c <_strtol_l.isra.0+0x84>
 800b75c:	4584      	cmp	ip, r0
 800b75e:	d31c      	bcc.n	800b79a <_strtol_l.isra.0+0xb2>
 800b760:	d101      	bne.n	800b766 <_strtol_l.isra.0+0x7e>
 800b762:	45a6      	cmp	lr, r4
 800b764:	db19      	blt.n	800b79a <_strtol_l.isra.0+0xb2>
 800b766:	fb00 4006 	mla	r0, r0, r6, r4
 800b76a:	2701      	movs	r7, #1
 800b76c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b770:	e7eb      	b.n	800b74a <_strtol_l.isra.0+0x62>
 800b772:	462f      	mov	r7, r5
 800b774:	e7bf      	b.n	800b6f6 <_strtol_l.isra.0+0xe>
 800b776:	2c2b      	cmp	r4, #43	; 0x2b
 800b778:	bf04      	itt	eq
 800b77a:	1cbd      	addeq	r5, r7, #2
 800b77c:	787c      	ldrbeq	r4, [r7, #1]
 800b77e:	461a      	mov	r2, r3
 800b780:	e7c9      	b.n	800b716 <_strtol_l.isra.0+0x2e>
 800b782:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b786:	2b19      	cmp	r3, #25
 800b788:	d801      	bhi.n	800b78e <_strtol_l.isra.0+0xa6>
 800b78a:	3c37      	subs	r4, #55	; 0x37
 800b78c:	e7e2      	b.n	800b754 <_strtol_l.isra.0+0x6c>
 800b78e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b792:	2b19      	cmp	r3, #25
 800b794:	d804      	bhi.n	800b7a0 <_strtol_l.isra.0+0xb8>
 800b796:	3c57      	subs	r4, #87	; 0x57
 800b798:	e7dc      	b.n	800b754 <_strtol_l.isra.0+0x6c>
 800b79a:	f04f 37ff 	mov.w	r7, #4294967295
 800b79e:	e7e5      	b.n	800b76c <_strtol_l.isra.0+0x84>
 800b7a0:	1c7b      	adds	r3, r7, #1
 800b7a2:	d108      	bne.n	800b7b6 <_strtol_l.isra.0+0xce>
 800b7a4:	2322      	movs	r3, #34	; 0x22
 800b7a6:	f8c8 3000 	str.w	r3, [r8]
 800b7aa:	4608      	mov	r0, r1
 800b7ac:	f1ba 0f00 	cmp.w	sl, #0
 800b7b0:	d107      	bne.n	800b7c2 <_strtol_l.isra.0+0xda>
 800b7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b6:	b102      	cbz	r2, 800b7ba <_strtol_l.isra.0+0xd2>
 800b7b8:	4240      	negs	r0, r0
 800b7ba:	f1ba 0f00 	cmp.w	sl, #0
 800b7be:	d0f8      	beq.n	800b7b2 <_strtol_l.isra.0+0xca>
 800b7c0:	b10f      	cbz	r7, 800b7c6 <_strtol_l.isra.0+0xde>
 800b7c2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b7c6:	f8ca 9000 	str.w	r9, [sl]
 800b7ca:	e7f2      	b.n	800b7b2 <_strtol_l.isra.0+0xca>
 800b7cc:	2430      	movs	r4, #48	; 0x30
 800b7ce:	2e00      	cmp	r6, #0
 800b7d0:	d1af      	bne.n	800b732 <_strtol_l.isra.0+0x4a>
 800b7d2:	2608      	movs	r6, #8
 800b7d4:	e7ad      	b.n	800b732 <_strtol_l.isra.0+0x4a>
 800b7d6:	2c30      	cmp	r4, #48	; 0x30
 800b7d8:	d0a3      	beq.n	800b722 <_strtol_l.isra.0+0x3a>
 800b7da:	260a      	movs	r6, #10
 800b7dc:	e7a9      	b.n	800b732 <_strtol_l.isra.0+0x4a>
	...

0800b7e0 <strtol>:
 800b7e0:	4b08      	ldr	r3, [pc, #32]	; (800b804 <strtol+0x24>)
 800b7e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7e4:	681c      	ldr	r4, [r3, #0]
 800b7e6:	4d08      	ldr	r5, [pc, #32]	; (800b808 <strtol+0x28>)
 800b7e8:	6a23      	ldr	r3, [r4, #32]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	bf08      	it	eq
 800b7ee:	462b      	moveq	r3, r5
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	460a      	mov	r2, r1
 800b7f6:	4601      	mov	r1, r0
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f7ff ff75 	bl	800b6e8 <_strtol_l.isra.0>
 800b7fe:	b003      	add	sp, #12
 800b800:	bd30      	pop	{r4, r5, pc}
 800b802:	bf00      	nop
 800b804:	20000024 	.word	0x20000024
 800b808:	20000088 	.word	0x20000088

0800b80c <__locale_ctype_ptr_l>:
 800b80c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b810:	4770      	bx	lr

0800b812 <__ascii_mbtowc>:
 800b812:	b082      	sub	sp, #8
 800b814:	b901      	cbnz	r1, 800b818 <__ascii_mbtowc+0x6>
 800b816:	a901      	add	r1, sp, #4
 800b818:	b142      	cbz	r2, 800b82c <__ascii_mbtowc+0x1a>
 800b81a:	b14b      	cbz	r3, 800b830 <__ascii_mbtowc+0x1e>
 800b81c:	7813      	ldrb	r3, [r2, #0]
 800b81e:	600b      	str	r3, [r1, #0]
 800b820:	7812      	ldrb	r2, [r2, #0]
 800b822:	1c10      	adds	r0, r2, #0
 800b824:	bf18      	it	ne
 800b826:	2001      	movne	r0, #1
 800b828:	b002      	add	sp, #8
 800b82a:	4770      	bx	lr
 800b82c:	4610      	mov	r0, r2
 800b82e:	e7fb      	b.n	800b828 <__ascii_mbtowc+0x16>
 800b830:	f06f 0001 	mvn.w	r0, #1
 800b834:	e7f8      	b.n	800b828 <__ascii_mbtowc+0x16>

0800b836 <__ascii_wctomb>:
 800b836:	b149      	cbz	r1, 800b84c <__ascii_wctomb+0x16>
 800b838:	2aff      	cmp	r2, #255	; 0xff
 800b83a:	bf85      	ittet	hi
 800b83c:	238a      	movhi	r3, #138	; 0x8a
 800b83e:	6003      	strhi	r3, [r0, #0]
 800b840:	700a      	strbls	r2, [r1, #0]
 800b842:	f04f 30ff 	movhi.w	r0, #4294967295
 800b846:	bf98      	it	ls
 800b848:	2001      	movls	r0, #1
 800b84a:	4770      	bx	lr
 800b84c:	4608      	mov	r0, r1
 800b84e:	4770      	bx	lr

0800b850 <_init>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	bf00      	nop
 800b854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b856:	bc08      	pop	{r3}
 800b858:	469e      	mov	lr, r3
 800b85a:	4770      	bx	lr

0800b85c <_fini>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	bf00      	nop
 800b860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b862:	bc08      	pop	{r3}
 800b864:	469e      	mov	lr, r3
 800b866:	4770      	bx	lr
