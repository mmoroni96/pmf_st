
NucleoG474-USB-SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bc0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08009d98  08009d98  00019d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ec0  08009ec0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08009ec0  08009ec0  00019ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ec8  08009ec8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ecc  08009ecc  00019ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08009ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  20000024  08009ef4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a08  08009ef4  00020a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019463  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003112  00000000  00000000  000394b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  0003c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001078  00000000  00000000  0003d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027a2e  00000000  00000000  0003e840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134a5  00000000  00000000  0006626e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0d1e  00000000  00000000  00079713  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a431  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004934  00000000  00000000  0016a4ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009d80 	.word	0x08009d80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	08009d80 	.word	0x08009d80

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_FDCAN1_Init+0x84>)
 800051e:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <MX_FDCAN1_Init+0x88>)
 8000520:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_FDCAN1_Init+0x84>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000536:	2200      	movs	r2, #0
 8000538:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_FDCAN1_Init+0x84>)
 800053c:	2200      	movs	r2, #0
 800053e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000542:	2200      	movs	r2, #0
 8000544:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 40;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000548:	2228      	movs	r2, #40	; 0x28
 800054a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_FDCAN1_Init+0x84>)
 800054e:	2201      	movs	r2, #1
 8000550:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000554:	220d      	movs	r2, #13
 8000556:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_FDCAN1_Init+0x84>)
 800055a:	2202      	movs	r2, #2
 800055c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000560:	2201      	movs	r2, #1
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000566:	2201      	movs	r2, #1
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_FDCAN1_Init+0x84>)
 800056c:	2201      	movs	r2, #1
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000572:	2201      	movs	r2, #1
 8000574:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000578:	2200      	movs	r2, #0
 800057a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_FDCAN1_Init+0x84>)
 800057e:	2200      	movs	r2, #0
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_FDCAN1_Init+0x84>)
 800058a:	f000 fe49 	bl	8001220 <HAL_FDCAN_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000594:	f000 fb02 	bl	8000b9c <Error_Handler>
  }

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <HAL_FDCAN_MspInit+0x80>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d129      	bne.n	800061a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000608:	2309      	movs	r3, #9
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f001 fb53 	bl	8001cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40006400 	.word	0x40006400
 8000628:	40021000 	.word	0x40021000

0800062c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 fc8b 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_GPIO_Init+0xc8>)
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_GPIO_Init+0xcc>)
 80006c4:	f001 fafc 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006c8:	2320      	movs	r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f001 faed 	bl	8001cc0 <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	48000800 	.word	0x48000800

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	f5ad 6d2e 	sub.w	sp, sp, #2784	; 0xae0
 8000702:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 fc0b 	bl	8000f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f8ba 	bl	8000880 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Initialize the micro SD Card */
  if(MY_SD_Init(0) != BSP_ERROR_NONE){
 800070c:	2000      	movs	r0, #0
 800070e:	f005 f81f 	bl	8005750 <MY_SD_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <main+0x20>
	  Error_Handler();
 8000718:	f000 fa40 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff86 	bl	800062c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000720:	f000 fb4c 	bl	8000dbc <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000724:	f000 fa3e 	bl	8000ba4 <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000728:	f004 fff2 	bl	8005710 <MX_FATFS_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <main+0x3a>
    Error_Handler();
 8000732:	f000 fa33 	bl	8000b9c <Error_Handler>
  }
  MX_FDCAN1_Init();
 8000736:	f7ff feef 	bl	8000518 <MX_FDCAN1_Init>

  /* Initialize interrupts */
  //MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
  TxHeader.Identifier = 0x0;
 800073a:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <main+0x16c>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000740:	4b49      	ldr	r3, [pc, #292]	; (8000868 <main+0x16c>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000748:	4b47      	ldr	r3, [pc, #284]	; (8000868 <main+0x16c>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800074e:	4b46      	ldr	r3, [pc, #280]	; (8000868 <main+0x16c>)
 8000750:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000754:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000756:	4b44      	ldr	r3, [pc, #272]	; (8000868 <main+0x16c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800075c:	4b42      	ldr	r3, [pc, #264]	; (8000868 <main+0x16c>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000762:	4b41      	ldr	r3, [pc, #260]	; (8000868 <main+0x16c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000768:	4b3f      	ldr	r3, [pc, #252]	; (8000868 <main+0x16c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 800076e:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <main+0x16c>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
    TxData[0] = ubKeyNumber++;
 8000774:	4b3d      	ldr	r3, [pc, #244]	; (800086c <main+0x170>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	b2d1      	uxtb	r1, r2
 800077c:	4a3b      	ldr	r2, [pc, #236]	; (800086c <main+0x170>)
 800077e:	7011      	strb	r1, [r2, #0]
 8000780:	4a3b      	ldr	r2, [pc, #236]	; (8000870 <main+0x174>)
 8000782:	7013      	strb	r3, [r2, #0]
    TxData[1] = 0xAD;
 8000784:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <main+0x174>)
 8000786:	22ad      	movs	r2, #173	; 0xad
 8000788:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0xDE;
 800078a:	4b39      	ldr	r3, [pc, #228]	; (8000870 <main+0x174>)
 800078c:	22de      	movs	r2, #222	; 0xde
 800078e:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0xAD;
 8000790:	4b37      	ldr	r3, [pc, #220]	; (8000870 <main+0x174>)
 8000792:	22ad      	movs	r2, #173	; 0xad
 8000794:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0xBE;
 8000796:	4b36      	ldr	r3, [pc, #216]	; (8000870 <main+0x174>)
 8000798:	22be      	movs	r2, #190	; 0xbe
 800079a:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0xEF;
 800079c:	4b34      	ldr	r3, [pc, #208]	; (8000870 <main+0x174>)
 800079e:	22ef      	movs	r2, #239	; 0xef
 80007a0:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0xFA;
 80007a2:	4b33      	ldr	r3, [pc, #204]	; (8000870 <main+0x174>)
 80007a4:	22fa      	movs	r2, #250	; 0xfa
 80007a6:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0xCE;
 80007a8:	4b31      	ldr	r3, [pc, #196]	; (8000870 <main+0x174>)
 80007aa:	22ce      	movs	r2, #206	; 0xce
 80007ac:	71da      	strb	r2, [r3, #7]
    uint16_t aug=3456;
 80007ae:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 80007b2:	f8a7 3ad6 	strh.w	r3, [r7, #2774]	; 0xad6
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80007b6:	482f      	ldr	r0, [pc, #188]	; (8000874 <main+0x178>)
 80007b8:	f000 fe8c 	bl	80014d4 <HAL_FDCAN_Start>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <main+0xca>
        {
          /* Start Error */
          Error_Handler();
 80007c2:	f000 f9eb 	bl	8000b9c <Error_Handler>
        }

      if ( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80007c6:	2200      	movs	r2, #0
 80007c8:	2101      	movs	r1, #1
 80007ca:	482a      	ldr	r0, [pc, #168]	; (8000874 <main+0x178>)
 80007cc:	f000 ff84 	bl	80016d8 <HAL_FDCAN_ActivateNotification>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <main+0xde>
        {
          /* Notification Error */
          Error_Handler();
 80007d6:	f000 f9e1 	bl	8000b9c <Error_Handler>
      uint8_t workBuffer[_MAX_SS];
      FATFS USERFatFs;    /* File system object for USER logical drive */
      FIL USERFile,readFile,writeFile;       /* File  object for USER */
      char USERPath[4];   /* USER logical drive path */
      FRESULT res,res1; /* FatFs function common result code */
      uint8_t path1[] = "STM32.TXT";
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4a26      	ldr	r2, [pc, #152]	; (8000878 <main+0x17c>)
 80007de:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e0:	c303      	stmia	r3!, {r0, r1}
 80007e2:	801a      	strh	r2, [r3, #0]

      if(MY_SD_GetCardState(0) == BSP_ERROR_NONE){
 80007e4:	2000      	movs	r0, #0
 80007e6:	f005 f9a5 	bl	8005b34 <MY_SD_GetCardState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d114      	bne.n	800081a <main+0x11e>
    	  res = f_mkfs(USERPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 80007f0:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 80007f4:	f107 0010 	add.w	r0, r7, #16
 80007f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	4613      	mov	r3, r2
 8000800:	2200      	movs	r2, #0
 8000802:	2107      	movs	r1, #7
 8000804:	f008 fe08 	bl	8009418 <f_mkfs>
 8000808:	4603      	mov	r3, r0
 800080a:	f887 3ad5 	strb.w	r3, [r7, #2773]	; 0xad5
    	  if (res != FR_OK){
 800080e:	f897 3ad5 	ldrb.w	r3, [r7, #2773]	; 0xad5
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <main+0x11e>
			Error_Handler();
 8000816:	f000 f9c1 	bl	8000b9c <Error_Handler>
    	  }

      }
      res = f_mount(&USERFatFs, (TCHAR const*)USERPath, 0);
 800081a:	f107 0110 	add.w	r1, r7, #16
 800081e:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8000822:	2200      	movs	r2, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f007 ffcd 	bl	80087c4 <f_mount>
 800082a:	4603      	mov	r3, r0
 800082c:	f887 3ad5 	strb.w	r3, [r7, #2773]	; 0xad5
      res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 8000830:	1d39      	adds	r1, r7, #4
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2208      	movs	r2, #8
 8000838:	4618      	mov	r0, r3
 800083a:	f008 f809 	bl	8008850 <f_open>
 800083e:	4603      	mov	r3, r0
 8000840:	f887 3ad5 	strb.w	r3, [r7, #2773]	; 0xad5
      res = f_close(&writeFile);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4618      	mov	r0, r3
 800084a:	f008 fbb2 	bl	8008fb2 <f_close>
 800084e:	4603      	mov	r3, r0
 8000850:	f887 3ad5 	strb.w	r3, [r7, #2773]	; 0xad5
      if(flag == 0){
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <main+0x180>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d104      	bne.n	8000866 <main+0x16a>
		  flag = 1;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <main+0x180>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
		  MX_NVIC_Init();
 8000862:	f000 f879 	bl	8000958 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000866:	e7fe      	b.n	8000866 <main+0x16a>
 8000868:	200001f8 	.word	0x200001f8
 800086c:	20000040 	.word	0x20000040
 8000870:	200001e4 	.word	0x200001e4
 8000874:	2000008c 	.word	0x2000008c
 8000878:	08009d98 	.word	0x08009d98
 800087c:	20000048 	.word	0x20000048

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0a8      	sub	sp, #160	; 0xa0
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800088a:	2238      	movs	r2, #56	; 0x38
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f009 fa6e 	bl	8009d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a4:	463b      	mov	r3, r7
 80008a6:	2254      	movs	r2, #84	; 0x54
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f009 fa60 	bl	8009d70 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008b4:	f001 fbc2 	bl	800203c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b8:	2302      	movs	r3, #2
 80008ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008cc:	2302      	movs	r3, #2
 80008ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 32;
 80008d8:	2320      	movs	r3, #32
 80008da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008de:	2302      	movs	r3, #2
 80008e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80008e4:	2306      	movs	r3, #6
 80008e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fc45 	bl	8002184 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000900:	f000 f94c 	bl	8000b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2303      	movs	r3, #3
 800090a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000918:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800091c:	2106      	movs	r1, #6
 800091e:	4618      	mov	r0, r3
 8000920:	f001 ff48 	bl	80027b4 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800092a:	f000 f937 	bl	8000b9c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_FDCAN;
 800092e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000932:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000938:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	4618      	mov	r0, r3
 8000942:	f002 f953 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800094c:	f000 f926 	bl	8000b9c <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	37a0      	adds	r7, #160	; 0xa0
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2015      	movs	r0, #21
 8000962:	f000 fc28 	bl	80011b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000966:	2015      	movs	r0, #21
 8000968:	f000 fc3f 	bl	80011ea <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	2028      	movs	r0, #40	; 0x28
 8000972:	f000 fc20 	bl	80011b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000976:	2028      	movs	r0, #40	; 0x28
 8000978:	f000 fc37 	bl	80011ea <HAL_NVIC_EnableIRQ>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u) != HAL_OK){
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_FDCAN_RxFifo0Callback+0x6c>)
 800098c:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <HAL_FDCAN_RxFifo0Callback+0x70>)
 800098e:	2140      	movs	r1, #64	; 0x40
 8000990:	4818      	ldr	r0, [pc, #96]	; (80009f4 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000992:	f000 fdc7 	bl	8001524 <HAL_FDCAN_GetRxMessage>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <HAL_FDCAN_RxFifo0Callback+0x20>
		/* Transmission request Error */
		Error_Handler();
 800099c:	f000 f8fe 	bl	8000b9c <Error_Handler>
	}
	ID = RxHeader.Identifier;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <HAL_FDCAN_RxFifo0Callback+0x70>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <HAL_FDCAN_RxFifo0Callback+0x78>)
 80009a6:	6013      	str	r3, [r2, #0]
	readSigmaData();
 80009a8:	f000 f82c 	bl	8000a04 <readSigmaData>
    char datoGrezzo[5];
    datoGrezzo[0] = cs.ControllerTemperature;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_FDCAN_RxFifo0Callback+0x7c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	723b      	strb	r3, [r7, #8]
    datoGrezzo[1] = ',';
 80009b2:	232c      	movs	r3, #44	; 0x2c
 80009b4:	727b      	strb	r3, [r7, #9]
    datoGrezzo[2] = cs.MotorTemperature;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_FDCAN_RxFifo0Callback+0x7c>)
 80009b8:	785b      	ldrb	r3, [r3, #1]
 80009ba:	72bb      	strb	r3, [r7, #10]
    /*datoGrezzo[0] = 'A';
	datoGrezzo[1] = ',';
	datoGrezzo[2] = 'B';*/
	datoGrezzo[3] = 0x0d;
 80009bc:	230d      	movs	r3, #13
 80009be:	72fb      	strb	r3, [r7, #11]
	datoGrezzo[4] = 0x0a;
 80009c0:	230a      	movs	r3, #10
 80009c2:	733b      	strb	r3, [r7, #12]
    if(flag == 1){
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_FDCAN_RxFifo0Callback+0x80>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d105      	bne.n	80009d8 <HAL_FDCAN_RxFifo0Callback+0x58>
    	scrivi(&datoGrezzo[0], sizeof(datoGrezzo));
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	2105      	movs	r1, #5
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f890 	bl	8000af8 <scrivi>
    }

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2120      	movs	r1, #32
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f001 faf0 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200000f0 	.word	0x200000f0
 80009f0:	2000021c 	.word	0x2000021c
 80009f4:	2000008c 	.word	0x2000008c
 80009f8:	2000004c 	.word	0x2000004c
 80009fc:	200000f8 	.word	0x200000f8
 8000a00:	20000048 	.word	0x20000048

08000a04 <readSigmaData>:

void readSigmaData(void){
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	switch(ID){
 8000a08:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <readSigmaData+0xe0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000a10:	d01d      	beq.n	8000a4e <readSigmaData+0x4a>
 8000a12:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000a16:	d047      	beq.n	8000aa8 <readSigmaData+0xa4>
 8000a18:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000a1c:	d000      	beq.n	8000a20 <readSigmaData+0x1c>
			cs.MotorTemperature		= rxData.Data8u[1];
			cs.BDI					= rxData.Data8u[2];
			cs.FaultSubCode			= rxData.Data8u[3]<<8 | rxData.Data8u[4];
	break;
	}
}
 8000a1e:	e05c      	b.n	8000ada <readSigmaData+0xd6>
			ms.MotorSpeed			= rxData.Data16u[0];
 8000a20:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <readSigmaData+0xe4>)
 8000a22:	881a      	ldrh	r2, [r3, #0]
 8000a24:	4b31      	ldr	r3, [pc, #196]	; (8000aec <readSigmaData+0xe8>)
 8000a26:	801a      	strh	r2, [r3, #0]
			ms.MotorCurrent			= rxData.Data16[1];
 8000a28:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <readSigmaData+0xe4>)
 8000a2a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <readSigmaData+0xe8>)
 8000a30:	805a      	strh	r2, [r3, #2]
			ms.MotorVoltage			= rxData.Data8u[4];
 8000a32:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <readSigmaData+0xe4>)
 8000a34:	791a      	ldrb	r2, [r3, #4]
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <readSigmaData+0xe8>)
 8000a38:	711a      	strb	r2, [r3, #4]
			ms.BatteryVoltage		= rxData.Data8u[5];
 8000a3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <readSigmaData+0xe4>)
 8000a3c:	795a      	ldrb	r2, [r3, #5]
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <readSigmaData+0xe8>)
 8000a40:	715a      	strb	r2, [r3, #5]
			ms.BatteryCurrent		= rxData.Data16[4];
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <readSigmaData+0xe4>)
 8000a44:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <readSigmaData+0xe8>)
 8000a4a:	80da      	strh	r2, [r3, #6]
	break;
 8000a4c:	e045      	b.n	8000ada <readSigmaData+0xd6>
			ds.ActualTorque			= rxData.Data16[0];
 8000a4e:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <readSigmaData+0xe4>)
 8000a50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <readSigmaData+0xec>)
 8000a56:	801a      	strh	r2, [r3, #0]
			ds.ActualSpeed			= rxData.Data16[1];
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <readSigmaData+0xe4>)
 8000a5a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000a5e:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <readSigmaData+0xec>)
 8000a60:	805a      	strh	r2, [r3, #2]
			ds.DriveStatusIndicator	= rxData.Data8u[4] & 0x0F;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <readSigmaData+0xe4>)
 8000a64:	791b      	ldrb	r3, [r3, #4]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <readSigmaData+0xec>)
 8000a6e:	711a      	strb	r2, [r3, #4]
			ds.SpeedLimitIndicator	= rxData.Data8u[4] >> 4;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <readSigmaData+0xe4>)
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	091b      	lsrs	r3, r3, #4
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <readSigmaData+0xec>)
 8000a7a:	715a      	strb	r2, [r3, #5]
			ds.TorqueLimitIndicator	= rxData.Data8u[5] & 0x0F;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <readSigmaData+0xe4>)
 8000a7e:	795b      	ldrb	r3, [r3, #5]
 8000a80:	f003 030f 	and.w	r3, r3, #15
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <readSigmaData+0xec>)
 8000a88:	719a      	strb	r2, [r3, #6]
			ds.MotorLimitIndicator	= rxData.Data8u[5] >> 4;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <readSigmaData+0xe4>)
 8000a8c:	795b      	ldrb	r3, [r3, #5]
 8000a8e:	091b      	lsrs	r3, r3, #4
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <readSigmaData+0xec>)
 8000a94:	71da      	strb	r2, [r3, #7]
			ds.FaultCode			= rxData.Data8u[6];
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <readSigmaData+0xe4>)
 8000a98:	799a      	ldrb	r2, [r3, #6]
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <readSigmaData+0xec>)
 8000a9c:	721a      	strb	r2, [r3, #8]
			ds.Code					= rxData.Data8u[7];
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <readSigmaData+0xe4>)
 8000aa0:	79da      	ldrb	r2, [r3, #7]
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <readSigmaData+0xec>)
 8000aa4:	725a      	strb	r2, [r3, #9]
	break;
 8000aa6:	e018      	b.n	8000ada <readSigmaData+0xd6>
			cs.ControllerTemperature= rxData.Data8u[0];
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <readSigmaData+0xe4>)
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <readSigmaData+0xf0>)
 8000aae:	701a      	strb	r2, [r3, #0]
			cs.MotorTemperature		= rxData.Data8u[1];
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <readSigmaData+0xe4>)
 8000ab2:	785a      	ldrb	r2, [r3, #1]
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <readSigmaData+0xf0>)
 8000ab6:	705a      	strb	r2, [r3, #1]
			cs.BDI					= rxData.Data8u[2];
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <readSigmaData+0xe4>)
 8000aba:	789a      	ldrb	r2, [r3, #2]
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <readSigmaData+0xf0>)
 8000abe:	709a      	strb	r2, [r3, #2]
			cs.FaultSubCode			= rxData.Data8u[3]<<8 | rxData.Data8u[4];
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <readSigmaData+0xe4>)
 8000ac2:	78db      	ldrb	r3, [r3, #3]
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b21a      	sxth	r2, r3
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <readSigmaData+0xe4>)
 8000aca:	791b      	ldrb	r3, [r3, #4]
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b21b      	sxth	r3, r3
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <readSigmaData+0xf0>)
 8000ad6:	809a      	strh	r2, [r3, #4]
	break;
 8000ad8:	bf00      	nop
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	2000004c 	.word	0x2000004c
 8000ae8:	200000f0 	.word	0x200000f0
 8000aec:	20000150 	.word	0x20000150
 8000af0:	20000100 	.word	0x20000100
 8000af4:	200000f8 	.word	0x200000f8

08000af8 <scrivi>:
			break;
		}
	}
	return (uint32_t)(e+2);//aggiungo i due caratteri di terminazione
}
FRESULT scrivi(BYTE* readBuf, uint8_t size){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	f5ad 6dd6 	sub.w	sp, sp, #1712	; 0x6b0
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	6018      	str	r0, [r3, #0]
 8000b04:	460a      	mov	r2, r1
 8000b06:	1cfb      	adds	r3, r7, #3
 8000b08:	701a      	strb	r2, [r3, #0]
	FIL writeFile;       /* File  object for USER */
	FATFS USERFatFs;    /* File system object for USER logical drive */
	FIL USERFile;     /* File  object for USER */
	char USERPath[4];   /* USER logical drive path */
	uint8_t bytesWrote;
	uint8_t path1[] = "STM32.TXT";
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <scrivi+0x9c>)
 8000b10:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b12:	c303      	stmia	r3!, {r0, r1}
 8000b14:	801a      	strh	r2, [r3, #0]
	res1 = f_mount(&USERFatFs, (TCHAR const*)USERPath, 0);
 8000b16:	f107 0118 	add.w	r1, r7, #24
 8000b1a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f007 fe4f 	bl	80087c4 <f_mount>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 36af 	strb.w	r3, [r7, #1711]	; 0x6af
	//res1 = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
	//res1 = f_close(&writeFile);
	res1 = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 8000b2c:	f107 010c 	add.w	r1, r7, #12
 8000b30:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8000b34:	2212      	movs	r2, #18
 8000b36:	4618      	mov	r0, r3
 8000b38:	f007 fe8a 	bl	8008850 <f_open>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f887 36af 	strb.w	r3, [r7, #1711]	; 0x6af
	f_lseek(&writeFile, indox);
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <scrivi+0xa0>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 fa5a 	bl	8009006 <f_lseek>
	indox=indox+5;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <scrivi+0xa0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3305      	adds	r3, #5
 8000b58:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <scrivi+0xa0>)
 8000b5a:	6013      	str	r3, [r2, #0]
	res1 = f_write(&writeFile, readBuf, size, &bytesWrote);
 8000b5c:	1cfb      	adds	r3, r7, #3
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	f107 0317 	add.w	r3, r7, #23
 8000b64:	1d39      	adds	r1, r7, #4
 8000b66:	f207 407c 	addw	r0, r7, #1148	; 0x47c
 8000b6a:	6809      	ldr	r1, [r1, #0]
 8000b6c:	f008 f82e 	bl	8008bcc <f_write>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f887 36af 	strb.w	r3, [r7, #1711]	; 0x6af
	res1 = f_close(&writeFile);
 8000b76:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f008 fa19 	bl	8008fb2 <f_close>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f887 36af 	strb.w	r3, [r7, #1711]	; 0x6af
	return res1;
 8000b86:	f897 36af 	ldrb.w	r3, [r7, #1711]	; 0x6af
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f507 67d6 	add.w	r7, r7, #1712	; 0x6b0
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	08009d98 	.word	0x08009d98
 8000b98:	20000044 	.word	0x20000044

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//printf("** Error. ** \n\r");
	while(1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x4>
	...

08000ba4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000baa:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <MX_SPI2_Init+0x78>)
 8000bac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bc2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bda:	2210      	movs	r2, #16
 8000bdc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bf2:	2207      	movs	r2, #7
 8000bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000c04:	f002 fa3e 	bl	8003084 <HAL_SPI_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c0e:	f7ff ffc5 	bl	8000b9c <Error_Handler>
  }

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000024c 	.word	0x2000024c
 8000c1c:	40003800 	.word	0x40003800

08000c20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_SPI_MspInit+0x7c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d128      	bne.n	8000c94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c72:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c84:	2305      	movs	r3, #5
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_SPI_MspInit+0x84>)
 8000c90:	f001 f816 	bl	8001cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40003800 	.word	0x40003800
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cb6:	6093      	str	r3, [r2, #8]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40007000 	.word	0x40007000

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x44>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000cfe:	f7ff ffd3 	bl	8000ca8 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f92e 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <FDCAN1_IT0_IRQHandler+0x10>)
 8000d72:	f000 fd97 	bl	80018a4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000008c 	.word	0x2000008c

08000d80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d88:	f001 f934 	bl	8001ff4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <SystemInit+0x28>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <SystemInit+0x28>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <SystemInit+0x28>)
 8000da6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000daa:	609a      	str	r2, [r3, #8]
#endif
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000dc2:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <MX_LPUART1_UART_Init+0x88>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000df8:	4811      	ldr	r0, [pc, #68]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000dfa:	f002 fff9 	bl	8003df0 <HAL_UART_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e04:	f7ff feca 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000e0c:	f004 fb9b 	bl	8005546 <HAL_UARTEx_SetTxFifoThreshold>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000e16:	f7ff fec1 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4808      	ldr	r0, [pc, #32]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000e1e:	f004 fbd0 	bl	80055c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8000e28:	f7ff feb8 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_LPUART1_UART_Init+0x84>)
 8000e2e:	f004 fb51 	bl	80054d4 <HAL_UARTEx_DisableFifoMode>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8000e38:	f7ff feb0 	bl	8000b9c <Error_Handler>
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200002b0 	.word	0x200002b0
 8000e44:	40008000 	.word	0x40008000

08000e48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_UART_MspInit+0x7c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d128      	bne.n	8000ebc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_UART_MspInit+0x80>)
 8000e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e6e:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <HAL_UART_MspInit+0x80>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0x80>)
 8000e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_UART_MspInit+0x80>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_UART_MspInit+0x80>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_UART_MspInit+0x80>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000eaa:	230c      	movs	r3, #12
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f000 ff02 	bl	8001cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40008000 	.word	0x40008000
 8000ec8:	40021000 	.word	0x40021000

08000ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ece:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed2:	490e      	ldr	r1, [pc, #56]	; (8000f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <LoopForever+0xe>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee8:	4c0b      	ldr	r4, [pc, #44]	; (8000f18 <LoopForever+0x16>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ef6:	f7ff ff4b 	bl	8000d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efa:	f008 ff15 	bl	8009d28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efe:	f7ff fbfd 	bl	80006fc <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   r0, =_estack
 8000f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000f10:	08009ed0 	.word	0x08009ed0
  ldr r2, =_sbss
 8000f14:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000f18:	20000a08 	.word	0x20000a08

08000f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_2_IRQHandler>

08000f1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f939 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f80e 	bl	8000f50 <HAL_InitTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	e001      	b.n	8000f44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f40:	f7ff fec2 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f44:	79fb      	ldrb	r3, [r7, #7]

}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_InitTick+0x68>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d022      	beq.n	8000faa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_InitTick+0x68>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f944 	bl	8001206 <HAL_SYSTICK_Config>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10f      	bne.n	8000fa4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b0f      	cmp	r3, #15
 8000f88:	d809      	bhi.n	8000f9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f92:	f000 f910 	bl	80011b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_InitTick+0x70>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e007      	b.n	8000fae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e004      	b.n	8000fae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e001      	b.n	8000fae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a03      	ldr	r2, [pc, #12]	; (8000fe0 <HAL_IncTick+0x1c>)
 8000fd4:	6013      	str	r3, [r2, #0]
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	2000033c 	.word	0x2000033c
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000033c 	.word	0x2000033c

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	; (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	; (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f7ff ff8e 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff29 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff40 	bl	8001048 <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff90 	bl	80010f4 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5f 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff33 	bl	8001064 <__NVIC_EnableIRQ>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffa4 	bl	800115c <SysTick_Config>
 8001214:	4603      	mov	r3, r0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e147      	b.n	80014c2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d106      	bne.n	800124c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff f9ac 	bl	80005a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0210 	bic.w	r2, r2, #16
 800125a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800125c:	f7ff fec4 	bl	8000fe8 <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001262:	e012      	b.n	800128a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001264:	f7ff fec0 	bl	8000fe8 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b0a      	cmp	r3, #10
 8001270:	d90b      	bls.n	800128a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001276:	f043 0201 	orr.w	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2203      	movs	r2, #3
 8001282:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e11b      	b.n	80014c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b08      	cmp	r3, #8
 8001296:	d0e5      	beq.n	8001264 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0201 	orr.w	r2, r2, #1
 80012a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a8:	f7ff fe9e 	bl	8000fe8 <HAL_GetTick>
 80012ac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80012ae:	e012      	b.n	80012d6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80012b0:	f7ff fe9a 	bl	8000fe8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b0a      	cmp	r3, #10
 80012bc:	d90b      	bls.n	80012d6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	f043 0201 	orr.w	r2, r3, #1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2203      	movs	r2, #3
 80012ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0f5      	b.n	80014c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0e5      	beq.n	80012b0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0202 	orr.w	r2, r2, #2
 80012f2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a74      	ldr	r2, [pc, #464]	; (80014cc <HAL_FDCAN_Init+0x2ac>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d103      	bne.n	8001306 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80012fe:	4a74      	ldr	r2, [pc, #464]	; (80014d0 <HAL_FDCAN_Init+0x2b0>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7c1b      	ldrb	r3, [r3, #16]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d108      	bne.n	8001320 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800131c:	619a      	str	r2, [r3, #24]
 800131e:	e007      	b.n	8001330 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	699a      	ldr	r2, [r3, #24]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800132e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7c5b      	ldrb	r3, [r3, #17]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d108      	bne.n	800134a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	699a      	ldr	r2, [r3, #24]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001346:	619a      	str	r2, [r3, #24]
 8001348:	e007      	b.n	800135a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001358:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7c9b      	ldrb	r3, [r3, #18]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d108      	bne.n	8001374 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001370:	619a      	str	r2, [r3, #24]
 8001372:	e007      	b.n	8001384 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001382:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80013a8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0210 	bic.w	r2, r2, #16
 80013b8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0204 	orr.w	r2, r2, #4
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	e02c      	b.n	800142e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d028      	beq.n	800142e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d01c      	beq.n	800141e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699a      	ldr	r2, [r3, #24]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013f2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0210 	orr.w	r2, r2, #16
 8001402:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d110      	bne.n	800142e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0220 	orr.w	r2, r2, #32
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	e007      	b.n	800142e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0220 	orr.w	r2, r2, #32
 800142c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	3b01      	subs	r3, #1
 8001434:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	3b01      	subs	r3, #1
 800143c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800143e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001446:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	3b01      	subs	r3, #1
 8001450:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001456:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001458:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001462:	d115      	bne.n	8001490 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	3b01      	subs	r3, #1
 8001470:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001472:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	3b01      	subs	r3, #1
 800147a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800147c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	3b01      	subs	r3, #1
 8001486:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800148c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800148e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fb9e 	bl	8001be8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40006400 	.word	0x40006400
 80014d0:	40006500 	.word	0x40006500

080014d4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d110      	bne.n	800150a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e006      	b.n	8001518 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150e:	f043 0204 	orr.w	r2, r3, #4
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
  }
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001524:	b480      	push	{r7}
 8001526:	b08b      	sub	sp, #44	; 0x2c
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001538:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800153a:	7efb      	ldrb	r3, [r7, #27]
 800153c:	2b02      	cmp	r3, #2
 800153e:	f040 80bc 	bne.w	80016ba <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b40      	cmp	r3, #64	; 0x40
 8001546:	d121      	bne.n	800158c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	2b00      	cmp	r3, #0
 8001556:	d107      	bne.n	8001568 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0af      	b.n	80016c8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
 800158a:	e020      	b.n	80015ce <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001594:	f003 030f 	and.w	r3, r3, #15
 8001598:	2b00      	cmp	r3, #0
 800159a:	d107      	bne.n	80015ac <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e08d      	b.n	80016c8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d107      	bne.n	80015f2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0c9b      	lsrs	r3, r3, #18
 80015e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e005      	b.n	80015fe <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	3304      	adds	r3, #4
 800161a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29a      	uxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	0e1b      	lsrs	r3, r3, #24
 8001650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0fda      	lsrs	r2, r3, #31
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	3304      	adds	r3, #4
 8001666:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
 8001670:	e00a      	b.n	8001688 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	441a      	add	r2, r3
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	440b      	add	r3, r1
 800167e:	7812      	ldrb	r2, [r2, #0]
 8001680:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	3301      	adds	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0c1b      	lsrs	r3, r3, #16
 800168e:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001690:	5cd3      	ldrb	r3, [r2, r3]
 8001692:	461a      	mov	r2, r3
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	4293      	cmp	r3, r2
 8001698:	d3eb      	bcc.n	8001672 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2b40      	cmp	r3, #64	; 0x40
 800169e:	d105      	bne.n	80016ac <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80016aa:	e004      	b.n	80016b6 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e006      	b.n	80016c8 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016be:	f043 0208 	orr.w	r2, r3, #8
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
  }
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	372c      	adds	r7, #44	; 0x2c
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	08009e10 	.word	0x08009e10

080016d8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80016ea:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d003      	beq.n	80016fa <HAL_FDCAN_ActivateNotification+0x22>
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	f040 80c8 	bne.w	800188a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_FDCAN_ActivateNotification+0x3e>
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d03b      	beq.n	800178e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d031      	beq.n	800178e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	d027      	beq.n	800178e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d01d      	beq.n	800178e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001758:	2b00      	cmp	r3, #0
 800175a:	d004      	beq.n	8001766 <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	d013      	beq.n	800178e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00c      	beq.n	800179e <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178a:	2b00      	cmp	r3, #0
 800178c:	d107      	bne.n	800179e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0201 	orr.w	r2, r2, #1
 800179c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <HAL_FDCAN_ActivateNotification+0xda>
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d13b      	bne.n	800182a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d131      	bne.n	800182a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d127      	bne.n	800182a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d11d      	bne.n	800182a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d113      	bne.n	800182a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00c      	beq.n	800183a <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0202 	orr.w	r2, r2, #2
 8001838:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001840:	2b00      	cmp	r3, #0
 8001842:	d009      	beq.n	8001858 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	430a      	orrs	r2, r1
 8001854:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	430a      	orrs	r2, r1
 8001872:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	430a      	orrs	r2, r1
 8001884:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e006      	b.n	8001898 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
  }
}
 8001898:	4618      	mov	r0, r3
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018b2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c0:	4013      	ands	r3, r2
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d6:	6a3a      	ldr	r2, [r7, #32]
 80018d8:	4013      	ands	r3, r2
 80018da:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fa:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80018fe:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001912:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001916:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4013      	ands	r3, r2
 8001922:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00d      	beq.n	800194e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2240      	movs	r2, #64	; 0x40
 8001946:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f92e 	bl	8001baa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01b      	beq.n	8001994 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	2b00      	cmp	r3, #0
 8001968:	d014      	beq.n	8001994 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001972:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800198c:	6939      	ldr	r1, [r7, #16]
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f8ec 	bl	8001b6c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80019a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f8b6 	bl	8001b16 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d007      	beq.n	80019c0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6a3a      	ldr	r2, [r7, #32]
 80019b6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80019b8:	6a39      	ldr	r1, [r7, #32]
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7fe ffe0 	bl	8000980 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80019ce:	69f9      	ldr	r1, [r7, #28]
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f8ab 	bl	8001b2c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00e      	beq.n	8001a02 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f8a0 	bl	8001b42 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01a      	beq.n	8001a46 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d013      	beq.n	8001a46 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a26:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a3e:	68f9      	ldr	r1, [r7, #12]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f888 	bl	8001b56 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f888 	bl	8001b82 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00e      	beq.n	8001a9e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a96:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f87c 	bl	8001b96 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d011      	beq.n	8001ad0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00a      	beq.n	8001ad0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ac2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001ade:	6979      	ldr	r1, [r7, #20]
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f876 	bl	8001bd2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f858 	bl	8001bbe <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001bf2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d103      	bne.n	8001c06 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001c04:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a2c      	ldr	r2, [pc, #176]	; (8001cbc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d103      	bne.n	8001c18 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001c16:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c26:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	041a      	lsls	r2, r3, #16
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c4c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c54:	061a      	lsls	r2, r3, #24
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	e005      	b.n	8001c9a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3304      	adds	r3, #4
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d3f3      	bcc.n	8001c8e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	4000a400 	.word	0x4000a400
 8001cb8:	40006800 	.word	0x40006800
 8001cbc:	40006c00 	.word	0x40006c00

08001cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cce:	e15a      	b.n	8001f86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 814c 	beq.w	8001f80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x38>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b12      	cmp	r3, #18
 8001cf6:	d123      	bne.n	8001d40 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	08da      	lsrs	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3208      	adds	r2, #8
 8001d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	6939      	ldr	r1, [r7, #16]
 8001d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d00b      	beq.n	8001d94 <HAL_GPIO_Init+0xd4>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d007      	beq.n	8001d94 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d88:	2b11      	cmp	r3, #17
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b12      	cmp	r3, #18
 8001d92:	d130      	bne.n	8001df6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dca:	2201      	movs	r2, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 0201 	and.w	r2, r3, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80a6 	beq.w	8001f80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e34:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <HAL_GPIO_Init+0x2e4>)
 8001e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e38:	4a5a      	ldr	r2, [pc, #360]	; (8001fa4 <HAL_GPIO_Init+0x2e4>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e40:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <HAL_GPIO_Init+0x2e4>)
 8001e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4c:	4a56      	ldr	r2, [pc, #344]	; (8001fa8 <HAL_GPIO_Init+0x2e8>)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	220f      	movs	r2, #15
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e76:	d01f      	beq.n	8001eb8 <HAL_GPIO_Init+0x1f8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a4c      	ldr	r2, [pc, #304]	; (8001fac <HAL_GPIO_Init+0x2ec>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d019      	beq.n	8001eb4 <HAL_GPIO_Init+0x1f4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a4b      	ldr	r2, [pc, #300]	; (8001fb0 <HAL_GPIO_Init+0x2f0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d013      	beq.n	8001eb0 <HAL_GPIO_Init+0x1f0>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a4a      	ldr	r2, [pc, #296]	; (8001fb4 <HAL_GPIO_Init+0x2f4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00d      	beq.n	8001eac <HAL_GPIO_Init+0x1ec>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a49      	ldr	r2, [pc, #292]	; (8001fb8 <HAL_GPIO_Init+0x2f8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <HAL_GPIO_Init+0x1e8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a48      	ldr	r2, [pc, #288]	; (8001fbc <HAL_GPIO_Init+0x2fc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d101      	bne.n	8001ea4 <HAL_GPIO_Init+0x1e4>
 8001ea0:	2305      	movs	r3, #5
 8001ea2:	e00a      	b.n	8001eba <HAL_GPIO_Init+0x1fa>
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	e008      	b.n	8001eba <HAL_GPIO_Init+0x1fa>
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	e006      	b.n	8001eba <HAL_GPIO_Init+0x1fa>
 8001eac:	2303      	movs	r3, #3
 8001eae:	e004      	b.n	8001eba <HAL_GPIO_Init+0x1fa>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x1fa>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_GPIO_Init+0x1fa>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	f002 0203 	and.w	r2, r2, #3
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	4093      	lsls	r3, r2
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eca:	4937      	ldr	r1, [pc, #220]	; (8001fa8 <HAL_GPIO_Init+0x2e8>)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_GPIO_Init+0x300>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001efc:	4a30      	ldr	r2, [pc, #192]	; (8001fc0 <HAL_GPIO_Init+0x300>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f02:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <HAL_GPIO_Init+0x300>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f26:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <HAL_GPIO_Init+0x300>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_GPIO_Init+0x300>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f50:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_GPIO_Init+0x300>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <HAL_GPIO_Init+0x300>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f7a:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <HAL_GPIO_Init+0x300>)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f47f ae9d 	bne.w	8001cd0 <HAL_GPIO_Init+0x10>
  }
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	48000400 	.word	0x48000400
 8001fb0:	48000800 	.word	0x48000800
 8001fb4:	48000c00 	.word	0x48000c00
 8001fb8:	48001000 	.word	0x48001000
 8001fbc:	48001400 	.word	0x48001400
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f806 	bl	8002024 <HAL_GPIO_EXTI_Callback>
  }
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d141      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800204a:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002056:	d131      	bne.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205e:	4a46      	ldr	r2, [pc, #280]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002070:	4a41      	ldr	r2, [pc, #260]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002078:	4b40      	ldr	r3, [pc, #256]	; (800217c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2232      	movs	r2, #50	; 0x32
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	4a3f      	ldr	r2, [pc, #252]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	3301      	adds	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208e:	e002      	b.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3b01      	subs	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002096:	4b38      	ldr	r3, [pc, #224]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a2:	d102      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f2      	bne.n	8002090 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020aa:	4b33      	ldr	r3, [pc, #204]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b6:	d158      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e057      	b.n	800216c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020bc:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c2:	4a2d      	ldr	r2, [pc, #180]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020cc:	e04d      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d4:	d141      	bne.n	800215a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e2:	d131      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ea:	4a23      	ldr	r2, [pc, #140]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020fc:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002102:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2232      	movs	r2, #50	; 0x32
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	0c9b      	lsrs	r3, r3, #18
 8002116:	3301      	adds	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800211a:	e002      	b.n	8002122 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3b01      	subs	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212e:	d102      	bne.n	8002136 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f2      	bne.n	800211c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002142:	d112      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e011      	b.n	800216c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002158:	e007      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002168:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40007000 	.word	0x40007000
 800217c:	20000000 	.word	0x20000000
 8002180:	431bde83 	.word	0x431bde83

08002184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e308      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d075      	beq.n	800228e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a2:	4ba3      	ldr	r3, [pc, #652]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ac:	4ba0      	ldr	r3, [pc, #640]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d102      	bne.n	80021c2 <HAL_RCC_OscConfig+0x3e>
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d002      	beq.n	80021c8 <HAL_RCC_OscConfig+0x44>
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d10b      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	4b99      	ldr	r3, [pc, #612]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d05b      	beq.n	800228c <HAL_RCC_OscConfig+0x108>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d157      	bne.n	800228c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e2e3      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x74>
 80021ea:	4b91      	ldr	r3, [pc, #580]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a90      	ldr	r2, [pc, #576]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b8b      	ldr	r3, [pc, #556]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a8a      	ldr	r2, [pc, #552]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a87      	ldr	r2, [pc, #540]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 800221c:	4b84      	ldr	r3, [pc, #528]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a83      	ldr	r2, [pc, #524]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b81      	ldr	r3, [pc, #516]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a80      	ldr	r2, [pc, #512]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fed4 	bl	8000fe8 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe fed0 	bl	8000fe8 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e2a8      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002256:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xc0>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fec0 	bl	8000fe8 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe febc 	bl	8000fe8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e294      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800227e:	4b6c      	ldr	r3, [pc, #432]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0xe8>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d075      	beq.n	8002386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229a:	4b65      	ldr	r3, [pc, #404]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a4:	4b62      	ldr	r3, [pc, #392]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d102      	bne.n	80022ba <HAL_RCC_OscConfig+0x136>
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_OscConfig+0x13c>
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d11f      	bne.n	8002300 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c0:	4b5b      	ldr	r3, [pc, #364]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_OscConfig+0x154>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e267      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4b55      	ldr	r3, [pc, #340]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	4952      	ldr	r1, [pc, #328]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022ec:	4b51      	ldr	r3, [pc, #324]	; (8002434 <HAL_RCC_OscConfig+0x2b0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fe2d 	bl	8000f50 <HAL_InitTick>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d043      	beq.n	8002384 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e253      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d023      	beq.n	8002350 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002308:	4b49      	ldr	r3, [pc, #292]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a48      	ldr	r2, [pc, #288]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe fe68 	bl	8000fe8 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231c:	f7fe fe64 	bl	8000fe8 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e23c      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800232e:	4b40      	ldr	r3, [pc, #256]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	061b      	lsls	r3, r3, #24
 8002348:	4939      	ldr	r1, [pc, #228]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
 800234e:	e01a      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002350:	4b37      	ldr	r3, [pc, #220]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a36      	ldr	r2, [pc, #216]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe fe44 	bl	8000fe8 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002364:	f7fe fe40 	bl	8000fe8 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e218      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002376:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x1e0>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002384:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03c      	beq.n	800240c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01c      	beq.n	80023d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b25      	ldr	r3, [pc, #148]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a0:	4a23      	ldr	r2, [pc, #140]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023aa:	f7fe fe1d 	bl	8000fe8 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b2:	f7fe fe19 	bl	8000fe8 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1f1      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0ef      	beq.n	80023b2 <HAL_RCC_OscConfig+0x22e>
 80023d2:	e01b      	b.n	800240c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7fe fe00 	bl	8000fe8 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ec:	f7fe fdfc 	bl	8000fe8 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1d4      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ef      	bne.n	80023ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80ab 	beq.w	8002570 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <HAL_RCC_OscConfig+0x2b4>
 800242a:	2301      	movs	r3, #1
 800242c:	e005      	b.n	800243a <HAL_RCC_OscConfig+0x2b6>
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	20000004 	.word	0x20000004
 8002438:	2300      	movs	r3, #0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00d      	beq.n	800245a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4baf      	ldr	r3, [pc, #700]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	4aae      	ldr	r2, [pc, #696]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	6593      	str	r3, [r2, #88]	; 0x58
 800244a:	4bac      	ldr	r3, [pc, #688]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002456:	2301      	movs	r3, #1
 8002458:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245a:	4ba9      	ldr	r3, [pc, #676]	; (8002700 <HAL_RCC_OscConfig+0x57c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d118      	bne.n	8002498 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002466:	4ba6      	ldr	r3, [pc, #664]	; (8002700 <HAL_RCC_OscConfig+0x57c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4aa5      	ldr	r2, [pc, #660]	; (8002700 <HAL_RCC_OscConfig+0x57c>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002472:	f7fe fdb9 	bl	8000fe8 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247a:	f7fe fdb5 	bl	8000fe8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e18d      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248c:	4b9c      	ldr	r3, [pc, #624]	; (8002700 <HAL_RCC_OscConfig+0x57c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d108      	bne.n	80024b2 <HAL_RCC_OscConfig+0x32e>
 80024a0:	4b96      	ldr	r3, [pc, #600]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	4a95      	ldr	r2, [pc, #596]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b0:	e024      	b.n	80024fc <HAL_RCC_OscConfig+0x378>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b05      	cmp	r3, #5
 80024b8:	d110      	bne.n	80024dc <HAL_RCC_OscConfig+0x358>
 80024ba:	4b90      	ldr	r3, [pc, #576]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	4a8e      	ldr	r2, [pc, #568]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ca:	4b8c      	ldr	r3, [pc, #560]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	4a8a      	ldr	r2, [pc, #552]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024da:	e00f      	b.n	80024fc <HAL_RCC_OscConfig+0x378>
 80024dc:	4b87      	ldr	r3, [pc, #540]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	4a86      	ldr	r2, [pc, #536]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ec:	4b83      	ldr	r3, [pc, #524]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	4a82      	ldr	r2, [pc, #520]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d016      	beq.n	8002532 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fd70 	bl	8000fe8 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7fe fd6c 	bl	8000fe8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e142      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ed      	beq.n	800250c <HAL_RCC_OscConfig+0x388>
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7fe fd59 	bl	8000fe8 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe fd55 	bl	8000fe8 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e12b      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002550:	4b6a      	ldr	r3, [pc, #424]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ed      	bne.n	800253a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800255e:	7ffb      	ldrb	r3, [r7, #31]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	4a64      	ldr	r2, [pc, #400]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800256a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d03c      	beq.n	80025f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01c      	beq.n	80025be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002584:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800258a:	4a5c      	ldr	r2, [pc, #368]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe fd28 	bl	8000fe8 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800259c:	f7fe fd24 	bl	8000fe8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0fc      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ae:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80025b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ef      	beq.n	800259c <HAL_RCC_OscConfig+0x418>
 80025bc:	e01b      	b.n	80025f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025be:	4b4f      	ldr	r3, [pc, #316]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80025c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025c4:	4a4d      	ldr	r2, [pc, #308]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7fe fd0b 	bl	8000fe8 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d6:	f7fe fd07 	bl	8000fe8 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0df      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025e8:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80025ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ef      	bne.n	80025d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80d3 	beq.w	80027a6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002600:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b0c      	cmp	r3, #12
 800260a:	f000 808d 	beq.w	8002728 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d15a      	bne.n	80026cc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a38      	ldr	r2, [pc, #224]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800261c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe fce1 	bl	8000fe8 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7fe fcdd 	bl	8000fe8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0b5      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263c:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002648:	4b2c      	ldr	r3, [pc, #176]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <HAL_RCC_OscConfig+0x580>)
 800264e:	4013      	ands	r3, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6a11      	ldr	r1, [r2, #32]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002658:	3a01      	subs	r2, #1
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	4311      	orrs	r1, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002662:	0212      	lsls	r2, r2, #8
 8002664:	4311      	orrs	r1, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800266a:	0852      	lsrs	r2, r2, #1
 800266c:	3a01      	subs	r2, #1
 800266e:	0552      	lsls	r2, r2, #21
 8002670:	4311      	orrs	r1, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002676:	0852      	lsrs	r2, r2, #1
 8002678:	3a01      	subs	r2, #1
 800267a:	0652      	lsls	r2, r2, #25
 800267c:	4311      	orrs	r1, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002682:	06d2      	lsls	r2, r2, #27
 8002684:	430a      	orrs	r2, r1
 8002686:	491d      	ldr	r1, [pc, #116]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002688:	4313      	orrs	r3, r2
 800268a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002696:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002698:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800269e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fca0 	bl	8000fe8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fc9c 	bl	8000fe8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e074      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x528>
 80026ca:	e06c      	b.n	80027a6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80026d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80026ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc78 	bl	8000fe8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026fa:	e00e      	b.n	800271a <HAL_RCC_OscConfig+0x596>
 80026fc:	40021000 	.word	0x40021000
 8002700:	40007000 	.word	0x40007000
 8002704:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe fc6e 	bl	8000fe8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e046      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x584>
 8002726:	e03e      	b.n	80027a6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e039      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0203 	and.w	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	429a      	cmp	r2, r3
 8002746:	d12c      	bne.n	80027a2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	3b01      	subs	r3, #1
 8002754:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d123      	bne.n	80027a2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d11b      	bne.n	80027a2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d113      	bne.n	80027a2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	3b01      	subs	r3, #1
 8002788:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d109      	bne.n	80027a2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	3b01      	subs	r3, #1
 800279c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d001      	beq.n	80027a6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000

080027b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e11e      	b.n	8002a0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027cc:	4b91      	ldr	r3, [pc, #580]	; (8002a14 <HAL_RCC_ClockConfig+0x260>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d910      	bls.n	80027fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b8e      	ldr	r3, [pc, #568]	; (8002a14 <HAL_RCC_ClockConfig+0x260>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 020f 	bic.w	r2, r3, #15
 80027e2:	498c      	ldr	r1, [pc, #560]	; (8002a14 <HAL_RCC_ClockConfig+0x260>)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ea:	4b8a      	ldr	r3, [pc, #552]	; (8002a14 <HAL_RCC_ClockConfig+0x260>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e106      	b.n	8002a0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d073      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d129      	bne.n	8002864 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002810:	4b81      	ldr	r3, [pc, #516]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0f4      	b.n	8002a0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002820:	f000 f99e 	bl	8002b60 <RCC_GetSysClockFreqFromPLLSource>
 8002824:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4a7c      	ldr	r2, [pc, #496]	; (8002a1c <HAL_RCC_ClockConfig+0x268>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d93f      	bls.n	80028ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800282e:	4b7a      	ldr	r3, [pc, #488]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002842:	2b00      	cmp	r3, #0
 8002844:	d033      	beq.n	80028ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800284a:	2b00      	cmp	r3, #0
 800284c:	d12f      	bne.n	80028ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800284e:	4b72      	ldr	r3, [pc, #456]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002856:	4a70      	ldr	r2, [pc, #448]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 8002858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e024      	b.n	80028ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d107      	bne.n	800287c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800286c:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0c6      	b.n	8002a0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287c:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0be      	b.n	8002a0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800288c:	f000 f8ce 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 8002890:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4a61      	ldr	r2, [pc, #388]	; (8002a1c <HAL_RCC_ClockConfig+0x268>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d909      	bls.n	80028ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800289a:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a2:	4a5d      	ldr	r2, [pc, #372]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 80028a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ae:	4b5a      	ldr	r3, [pc, #360]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4957      	ldr	r1, [pc, #348]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c0:	f7fe fb92 	bl	8000fe8 <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7fe fb8e 	bl	8000fe8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e095      	b.n	8002a0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	4b4e      	ldr	r3, [pc, #312]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 020c 	and.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1eb      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d023      	beq.n	8002944 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002908:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a42      	ldr	r2, [pc, #264]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 800290e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002912:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002920:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002928:	4a3b      	ldr	r2, [pc, #236]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 800292a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800292e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4936      	ldr	r1, [pc, #216]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
 8002942:	e008      	b.n	8002956 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b80      	cmp	r3, #128	; 0x80
 8002948:	d105      	bne.n	8002956 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	4a32      	ldr	r2, [pc, #200]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 8002950:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002954:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002956:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <HAL_RCC_ClockConfig+0x260>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d21d      	bcs.n	80029a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_ClockConfig+0x260>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 020f 	bic.w	r2, r3, #15
 800296c:	4929      	ldr	r1, [pc, #164]	; (8002a14 <HAL_RCC_ClockConfig+0x260>)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002974:	f7fe fb38 	bl	8000fe8 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7fe fb34 	bl	8000fe8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e03b      	b.n	8002a0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCC_ClockConfig+0x260>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d1ed      	bne.n	800297c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4917      	ldr	r1, [pc, #92]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ca:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	490f      	ldr	r1, [pc, #60]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029de:	f000 f825 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80029e2:	4601      	mov	r1, r0
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_RCC_ClockConfig+0x264>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <HAL_RCC_ClockConfig+0x26c>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	fa21 f303 	lsr.w	r3, r1, r3
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <HAL_RCC_ClockConfig+0x270>)
 80029fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_RCC_ClockConfig+0x274>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe faa4 	bl	8000f50 <HAL_InitTick>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40022000 	.word	0x40022000
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	04c4b400 	.word	0x04c4b400
 8002a20:	08009df8 	.word	0x08009df8
 8002a24:	20000000 	.word	0x20000000
 8002a28:	20000004 	.word	0x20000004

08002a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a32:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d102      	bne.n	8002a44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	e047      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d102      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a50:	4b26      	ldr	r3, [pc, #152]	; (8002aec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	e03e      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a56:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d136      	bne.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a62:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	3301      	adds	r3, #1
 8002a78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d10c      	bne.n	8002a9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a80:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	4a16      	ldr	r2, [pc, #88]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8a:	68d2      	ldr	r2, [r2, #12]
 8002a8c:	0a12      	lsrs	r2, r2, #8
 8002a8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	617b      	str	r3, [r7, #20]
      break;
 8002a98:	e00c      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a9a:	4a13      	ldr	r2, [pc, #76]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa4:	68d2      	ldr	r2, [r2, #12]
 8002aa6:	0a12      	lsrs	r2, r2, #8
 8002aa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002aac:	fb02 f303 	mul.w	r3, r2, r3
 8002ab0:	617b      	str	r3, [r7, #20]
      break;
 8002ab2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	0e5b      	lsrs	r3, r3, #25
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	e001      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ad4:	693b      	ldr	r3, [r7, #16]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	00f42400 	.word	0x00f42400
 8002aec:	016e3600 	.word	0x016e3600

08002af0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000000 	.word	0x20000000

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b0c:	f7ff fff0 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b10:	4601      	mov	r1, r0
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	08009e08 	.word	0x08009e08

08002b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b38:	f7ff ffda 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4601      	mov	r1, r0
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	0adb      	lsrs	r3, r3, #11
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	08009e08 	.word	0x08009e08

08002b60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b66:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d10c      	bne.n	8002b9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b84:	4a17      	ldr	r2, [pc, #92]	; (8002be4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	4a14      	ldr	r2, [pc, #80]	; (8002be0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b8e:	68d2      	ldr	r2, [r2, #12]
 8002b90:	0a12      	lsrs	r2, r2, #8
 8002b92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	617b      	str	r3, [r7, #20]
    break;
 8002b9c:	e00c      	b.n	8002bb8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ba8:	68d2      	ldr	r2, [r2, #12]
 8002baa:	0a12      	lsrs	r2, r2, #8
 8002bac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bb0:	fb02 f303 	mul.w	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
    break;
 8002bb6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0e5b      	lsrs	r3, r3, #25
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bd2:	687b      	ldr	r3, [r7, #4]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40021000 	.word	0x40021000
 8002be4:	016e3600 	.word	0x016e3600
 8002be8:	00f42400 	.word	0x00f42400

08002bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8098 	beq.w	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0e:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10d      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	4a3f      	ldr	r2, [pc, #252]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c24:	6593      	str	r3, [r2, #88]	; 0x58
 8002c26:	4b3d      	ldr	r3, [pc, #244]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c32:	2301      	movs	r3, #1
 8002c34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c36:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a39      	ldr	r2, [pc, #228]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c42:	f7fe f9d1 	bl	8000fe8 <HAL_GetTick>
 8002c46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c48:	e009      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4a:	f7fe f9cd 	bl	8000fe8 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d902      	bls.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	74fb      	strb	r3, [r7, #19]
        break;
 8002c5c:	e005      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c5e:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ef      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d159      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c70:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01e      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d019      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c98:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	4a1b      	ldr	r2, [pc, #108]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cb8:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fe f98d 	bl	8000fe8 <HAL_GetTick>
 8002cce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd0:	e00b      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe f989 	bl	8000fe8 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d902      	bls.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ce8:	e006      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0ec      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10b      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0c:	4903      	ldr	r1, [pc, #12]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d14:	e008      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	74bb      	strb	r3, [r7, #18]
 8002d1a:	e005      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d28:	7c7b      	ldrb	r3, [r7, #17]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2e:	4baf      	ldr	r3, [pc, #700]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	4aae      	ldr	r2, [pc, #696]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d46:	4ba9      	ldr	r3, [pc, #676]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	f023 0203 	bic.w	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	49a5      	ldr	r1, [pc, #660]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d68:	4ba0      	ldr	r3, [pc, #640]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f023 020c 	bic.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	499d      	ldr	r1, [pc, #628]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d8a:	4b98      	ldr	r3, [pc, #608]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4994      	ldr	r1, [pc, #592]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dac:	4b8f      	ldr	r3, [pc, #572]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	498c      	ldr	r1, [pc, #560]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dce:	4b87      	ldr	r3, [pc, #540]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	4983      	ldr	r1, [pc, #524]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002df0:	4b7e      	ldr	r3, [pc, #504]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	497b      	ldr	r1, [pc, #492]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e12:	4b76      	ldr	r3, [pc, #472]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	4972      	ldr	r1, [pc, #456]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e34:	4b6d      	ldr	r3, [pc, #436]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	496a      	ldr	r1, [pc, #424]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e56:	4b65      	ldr	r3, [pc, #404]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	4961      	ldr	r1, [pc, #388]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e78:	4b5c      	ldr	r3, [pc, #368]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e7e:	f023 0203 	bic.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	4959      	ldr	r1, [pc, #356]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9a:	4b54      	ldr	r3, [pc, #336]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	4950      	ldr	r1, [pc, #320]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d015      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ebc:	4b4b      	ldr	r3, [pc, #300]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4948      	ldr	r1, [pc, #288]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002edc:	4b43      	ldr	r3, [pc, #268]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a42      	ldr	r2, [pc, #264]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ee6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d015      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ef4:	4b3d      	ldr	r3, [pc, #244]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	493a      	ldr	r1, [pc, #232]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f12:	d105      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f14:	4b35      	ldr	r3, [pc, #212]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4a34      	ldr	r2, [pc, #208]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f1e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d015      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f2c:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	492c      	ldr	r1, [pc, #176]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a26      	ldr	r2, [pc, #152]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d015      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	491e      	ldr	r1, [pc, #120]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f82:	d105      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d015      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4910      	ldr	r1, [pc, #64]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d018      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	4902      	ldr	r1, [pc, #8]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fea:	e001      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002fec:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ff8:	d105      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4a20      	ldr	r2, [pc, #128]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d015      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003012:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	4917      	ldr	r1, [pc, #92]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003030:	d105      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003032:	4b13      	ldr	r3, [pc, #76]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4a12      	ldr	r2, [pc, #72]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d015      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800304c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003058:	4909      	ldr	r1, [pc, #36]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003068:	d105      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	4a04      	ldr	r2, [pc, #16]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003074:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003076:	7cbb      	ldrb	r3, [r7, #18]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000

08003084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e084      	b.n	80031a0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fd fdb5 	bl	8000c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030cc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030d6:	d902      	bls.n	80030de <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e002      	b.n	80030e4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030ec:	d007      	beq.n	80030fe <HAL_SPI_Init+0x7a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f6:	d002      	beq.n	80030fe <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800310e:	d903      	bls.n	8003118 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
 8003116:	e002      	b.n	800311e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	ea42 0103 	orr.w	r1, r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	f003 0204 	and.w	r2, r3, #4
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	ea42 0103 	orr.w	r1, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800318e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_SPI_Transmit+0x22>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e150      	b.n	800346c <HAL_SPI_Transmit+0x2c4>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031d2:	f7fd ff09 	bl	8000fe8 <HAL_GetTick>
 80031d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d002      	beq.n	80031ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
 80031ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031ec:	e135      	b.n	800345a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_SPI_Transmit+0x52>
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031fe:	e12c      	b.n	800345a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2203      	movs	r2, #3
 8003204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	88fa      	ldrh	r2, [r7, #6]
 800321e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324a:	d107      	bne.n	800325c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800325a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	d007      	beq.n	800327a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003278:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003282:	d94b      	bls.n	800331c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_SPI_Transmit+0xea>
 800328c:	8afb      	ldrh	r3, [r7, #22]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d13e      	bne.n	8003310 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	1c9a      	adds	r2, r3, #2
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032b6:	e02b      	b.n	8003310 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d112      	bne.n	80032ec <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	881a      	ldrh	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	1c9a      	adds	r2, r3, #2
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032ea:	e011      	b.n	8003310 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ec:	f7fd fe7c 	bl	8000fe8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d803      	bhi.n	8003304 <HAL_SPI_Transmit+0x15c>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d102      	bne.n	800330a <HAL_SPI_Transmit+0x162>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800330e:	e0a4      	b.n	800345a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ce      	bne.n	80032b8 <HAL_SPI_Transmit+0x110>
 800331a:	e07c      	b.n	8003416 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_SPI_Transmit+0x182>
 8003324:	8afb      	ldrh	r3, [r7, #22]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d170      	bne.n	800340c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d912      	bls.n	800335a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	881a      	ldrh	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	1c9a      	adds	r2, r3, #2
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b02      	subs	r3, #2
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003358:	e058      	b.n	800340c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	330c      	adds	r3, #12
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003380:	e044      	b.n	800340c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d12b      	bne.n	80033e8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d912      	bls.n	80033c0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b02      	subs	r3, #2
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033be:	e025      	b.n	800340c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033e6:	e011      	b.n	800340c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033e8:	f7fd fdfe 	bl	8000fe8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d803      	bhi.n	8003400 <HAL_SPI_Transmit+0x258>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d102      	bne.n	8003406 <HAL_SPI_Transmit+0x25e>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	77fb      	strb	r3, [r7, #31]
          goto error;
 800340a:	e026      	b.n	800345a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1b5      	bne.n	8003382 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fca2 	bl	8003d64 <SPI_EndRxTxTransaction>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e000      	b.n	800345a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003458:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800346a:	7ffb      	ldrb	r3, [r7, #31]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003490:	d112      	bne.n	80034b8 <HAL_SPI_Receive+0x44>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10e      	bne.n	80034b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2204      	movs	r2, #4
 800349e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f908 	bl	80036c4 <HAL_SPI_TransmitReceive>
 80034b4:	4603      	mov	r3, r0
 80034b6:	e101      	b.n	80036bc <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_SPI_Receive+0x52>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e0fa      	b.n	80036bc <HAL_SPI_Receive+0x248>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ce:	f7fd fd8b 	bl	8000fe8 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d002      	beq.n	80034e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
 80034e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034e4:	e0e1      	b.n	80036aa <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_SPI_Receive+0x7e>
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d102      	bne.n	80034f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034f6:	e0d8      	b.n	80036aa <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2204      	movs	r2, #4
 80034fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003542:	d908      	bls.n	8003556 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	e007      	b.n	8003566 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003564:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356e:	d107      	bne.n	8003580 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d007      	beq.n	800359e <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035a6:	d867      	bhi.n	8003678 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035a8:	e030      	b.n	800360c <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d117      	bne.n	80035e8 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f103 020c 	add.w	r2, r3, #12
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80035e6:	e011      	b.n	800360c <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035e8:	f7fd fcfe 	bl	8000fe8 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d803      	bhi.n	8003600 <HAL_SPI_Receive+0x18c>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fe:	d102      	bne.n	8003606 <HAL_SPI_Receive+0x192>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	75fb      	strb	r3, [r7, #23]
          goto error;
 800360a:	e04e      	b.n	80036aa <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1c8      	bne.n	80035aa <HAL_SPI_Receive+0x136>
 8003618:	e034      	b.n	8003684 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	d115      	bne.n	8003654 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	b292      	uxth	r2, r2
 8003634:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	1c9a      	adds	r2, r3, #2
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003652:	e011      	b.n	8003678 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003654:	f7fd fcc8 	bl	8000fe8 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d803      	bhi.n	800366c <HAL_SPI_Receive+0x1f8>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366a:	d102      	bne.n	8003672 <HAL_SPI_Receive+0x1fe>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003676:	e018      	b.n	80036aa <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ca      	bne.n	800361a <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	6839      	ldr	r1, [r7, #0]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fb13 	bl	8003cb4 <SPI_EndRxTransaction>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
 80036a6:	e000      	b.n	80036aa <HAL_SPI_Receive+0x236>
  }

error :
 80036a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036d2:	2301      	movs	r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x26>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e1fb      	b.n	8003ae2 <HAL_SPI_TransmitReceive+0x41e>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036f2:	f7fd fc79 	bl	8000fe8 <HAL_GetTick>
 80036f6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036fe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800370a:	887b      	ldrh	r3, [r7, #2]
 800370c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800370e:	7efb      	ldrb	r3, [r7, #27]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d00e      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x6e>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800371a:	d106      	bne.n	800372a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <HAL_SPI_TransmitReceive+0x66>
 8003724:	7efb      	ldrb	r3, [r7, #27]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d003      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800372a:	2302      	movs	r3, #2
 800372c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003730:	e1cd      	b.n	8003ace <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x80>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x80>
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800374a:	e1c0      	b.n	8003ace <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b04      	cmp	r3, #4
 8003756:	d003      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2205      	movs	r2, #5
 800375c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	887a      	ldrh	r2, [r7, #2]
 8003786:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	887a      	ldrh	r2, [r7, #2]
 800378c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037a2:	d802      	bhi.n	80037aa <HAL_SPI_TransmitReceive+0xe6>
 80037a4:	8a3b      	ldrh	r3, [r7, #16]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d908      	bls.n	80037bc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	e007      	b.n	80037cc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d007      	beq.n	80037ea <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037f2:	d97c      	bls.n	80038ee <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x13e>
 80037fc:	8a7b      	ldrh	r3, [r7, #18]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d169      	bne.n	80038d6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	881a      	ldrh	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	1c9a      	adds	r2, r3, #2
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003826:	e056      	b.n	80038d6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d11b      	bne.n	800386e <HAL_SPI_TransmitReceive+0x1aa>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d016      	beq.n	800386e <HAL_SPI_TransmitReceive+0x1aa>
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	2b01      	cmp	r3, #1
 8003844:	d113      	bne.n	800386e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	881a      	ldrh	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	1c9a      	adds	r2, r3, #2
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d11c      	bne.n	80038b6 <HAL_SPI_TransmitReceive+0x1f2>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d016      	beq.n	80038b6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	b292      	uxth	r2, r2
 8003894:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	1c9a      	adds	r2, r3, #2
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038b2:	2301      	movs	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038b6:	f7fd fb97 	bl	8000fe8 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d807      	bhi.n	80038d6 <HAL_SPI_TransmitReceive+0x212>
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d003      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80038d4:	e0fb      	b.n	8003ace <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1a3      	bne.n	8003828 <HAL_SPI_TransmitReceive+0x164>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d19d      	bne.n	8003828 <HAL_SPI_TransmitReceive+0x164>
 80038ec:	e0df      	b.n	8003aae <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_SPI_TransmitReceive+0x23a>
 80038f6:	8a7b      	ldrh	r3, [r7, #18]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	f040 80cb 	bne.w	8003a94 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d912      	bls.n	800392e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	881a      	ldrh	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	1c9a      	adds	r2, r3, #2
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b02      	subs	r3, #2
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800392c:	e0b2      	b.n	8003a94 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	7812      	ldrb	r2, [r2, #0]
 800393a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003954:	e09e      	b.n	8003a94 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b02      	cmp	r3, #2
 8003962:	d134      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x30a>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02f      	beq.n	80039ce <HAL_SPI_TransmitReceive+0x30a>
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	2b01      	cmp	r3, #1
 8003972:	d12c      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d912      	bls.n	80039a4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	1c9a      	adds	r2, r3, #2
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b02      	subs	r3, #2
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039a2:	e012      	b.n	80039ca <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	7812      	ldrb	r2, [r2, #0]
 80039b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d148      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x3aa>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d042      	beq.n	8003a6e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d923      	bls.n	8003a3c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	b292      	uxth	r2, r2
 8003a00:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	1c9a      	adds	r2, r3, #2
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b02      	subs	r3, #2
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d81f      	bhi.n	8003a6a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	e016      	b.n	8003a6a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f103 020c 	add.w	r2, r3, #12
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	7812      	ldrb	r2, [r2, #0]
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a6e:	f7fd fabb 	bl	8000fe8 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d803      	bhi.n	8003a86 <HAL_SPI_TransmitReceive+0x3c2>
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d102      	bne.n	8003a8c <HAL_SPI_TransmitReceive+0x3c8>
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d103      	bne.n	8003a94 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a92:	e01c      	b.n	8003ace <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f47f af5b 	bne.w	8003956 <HAL_SPI_TransmitReceive+0x292>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f47f af54 	bne.w	8003956 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f956 	bl	8003d64 <SPI_EndRxTxTransaction>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	661a      	str	r2, [r3, #96]	; 0x60
 8003aca:	e000      	b.n	8003ace <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003acc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3728      	adds	r7, #40	; 0x28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003af8:	b2db      	uxtb	r3, r3
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b16:	e04c      	b.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d048      	beq.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003b20:	f7fd fa62 	bl	8000fe8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d902      	bls.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d13d      	bne.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4e:	d111      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	d004      	beq.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b62:	d107      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7c:	d10f      	bne.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e00f      	b.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d1a3      	bne.n	8003b18 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003be8:	e057      	b.n	8003c9a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bf0:	d106      	bne.n	8003c00 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d048      	beq.n	8003c9a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c08:	f7fd f9ee 	bl	8000fe8 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d902      	bls.n	8003c1e <SPI_WaitFifoStateUntilTimeout+0x44>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d13d      	bne.n	8003c9a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c36:	d111      	bne.n	8003c5c <SPI_WaitFifoStateUntilTimeout+0x82>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c40:	d004      	beq.n	8003c4c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4a:	d107      	bne.n	8003c5c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c64:	d10f      	bne.n	8003c86 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e008      	b.n	8003cac <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d19f      	bne.n	8003bea <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cc8:	d111      	bne.n	8003cee <SPI_EndRxTransaction+0x3a>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd2:	d004      	beq.n	8003cde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cdc:	d107      	bne.n	8003cee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2180      	movs	r1, #128	; 0x80
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff ff04 	bl	8003b06 <SPI_WaitFlagStateUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e023      	b.n	8003d5c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1c:	d11d      	bne.n	8003d5a <SPI_EndRxTransaction+0xa6>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d26:	d004      	beq.n	8003d32 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d30:	d113      	bne.n	8003d5a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff ff4b 	bl	8003bda <SPI_WaitFifoStateUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e000      	b.n	8003d5c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7ff ff2c 	bl	8003bda <SPI_WaitFifoStateUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e027      	b.n	8003de8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2180      	movs	r1, #128	; 0x80
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f7ff feaf 	bl	8003b06 <SPI_WaitFlagStateUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d007      	beq.n	8003dbe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db2:	f043 0220 	orr.w	r2, r3, #32
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e014      	b.n	8003de8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f7ff ff05 	bl	8003bda <SPI_WaitFifoStateUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e000      	b.n	8003de8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e042      	b.n	8003e88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fd f817 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2224      	movs	r2, #36	; 0x24
 8003e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f82c 	bl	8003e90 <UART_SetConfig>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e022      	b.n	8003e88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f001 fa0e 	bl	800526c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f001 fa95 	bl	80053b0 <UART_CheckIdleState>
 8003e86:	4603      	mov	r3, r0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e94:	b08a      	sub	sp, #40	; 0x28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4baa      	ldr	r3, [pc, #680]	; (8004178 <UART_SetConfig+0x2e8>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a9f      	ldr	r2, [pc, #636]	; (800417c <UART_SetConfig+0x2ec>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d004      	beq.n	8003f0c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	f023 010f 	bic.w	r1, r3, #15
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a90      	ldr	r2, [pc, #576]	; (8004180 <UART_SetConfig+0x2f0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d126      	bne.n	8003f92 <UART_SetConfig+0x102>
 8003f44:	4b8f      	ldr	r3, [pc, #572]	; (8004184 <UART_SetConfig+0x2f4>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d81a      	bhi.n	8003f88 <UART_SetConfig+0xf8>
 8003f52:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <UART_SetConfig+0xc8>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f69 	.word	0x08003f69
 8003f5c:	08003f79 	.word	0x08003f79
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f81 	.word	0x08003f81
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6e:	e116      	b.n	800419e <UART_SetConfig+0x30e>
 8003f70:	2302      	movs	r3, #2
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f76:	e112      	b.n	800419e <UART_SetConfig+0x30e>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7e:	e10e      	b.n	800419e <UART_SetConfig+0x30e>
 8003f80:	2308      	movs	r3, #8
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f86:	e10a      	b.n	800419e <UART_SetConfig+0x30e>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8e:	bf00      	nop
 8003f90:	e105      	b.n	800419e <UART_SetConfig+0x30e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7c      	ldr	r2, [pc, #496]	; (8004188 <UART_SetConfig+0x2f8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d138      	bne.n	800400e <UART_SetConfig+0x17e>
 8003f9c:	4b79      	ldr	r3, [pc, #484]	; (8004184 <UART_SetConfig+0x2f4>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b0c      	cmp	r3, #12
 8003fa8:	d82c      	bhi.n	8004004 <UART_SetConfig+0x174>
 8003faa:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <UART_SetConfig+0x120>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fe5 	.word	0x08003fe5
 8003fb4:	08004005 	.word	0x08004005
 8003fb8:	08004005 	.word	0x08004005
 8003fbc:	08004005 	.word	0x08004005
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	08004005 	.word	0x08004005
 8003fc8:	08004005 	.word	0x08004005
 8003fcc:	08004005 	.word	0x08004005
 8003fd0:	08003fed 	.word	0x08003fed
 8003fd4:	08004005 	.word	0x08004005
 8003fd8:	08004005 	.word	0x08004005
 8003fdc:	08004005 	.word	0x08004005
 8003fe0:	08003ffd 	.word	0x08003ffd
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fea:	e0d8      	b.n	800419e <UART_SetConfig+0x30e>
 8003fec:	2302      	movs	r3, #2
 8003fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff2:	e0d4      	b.n	800419e <UART_SetConfig+0x30e>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffa:	e0d0      	b.n	800419e <UART_SetConfig+0x30e>
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004002:	e0cc      	b.n	800419e <UART_SetConfig+0x30e>
 8004004:	2310      	movs	r3, #16
 8004006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400a:	bf00      	nop
 800400c:	e0c7      	b.n	800419e <UART_SetConfig+0x30e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a5e      	ldr	r2, [pc, #376]	; (800418c <UART_SetConfig+0x2fc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d125      	bne.n	8004064 <UART_SetConfig+0x1d4>
 8004018:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <UART_SetConfig+0x2f4>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004022:	2b10      	cmp	r3, #16
 8004024:	d011      	beq.n	800404a <UART_SetConfig+0x1ba>
 8004026:	2b10      	cmp	r3, #16
 8004028:	d802      	bhi.n	8004030 <UART_SetConfig+0x1a0>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <UART_SetConfig+0x1aa>
 800402e:	e014      	b.n	800405a <UART_SetConfig+0x1ca>
 8004030:	2b20      	cmp	r3, #32
 8004032:	d006      	beq.n	8004042 <UART_SetConfig+0x1b2>
 8004034:	2b30      	cmp	r3, #48	; 0x30
 8004036:	d00c      	beq.n	8004052 <UART_SetConfig+0x1c2>
 8004038:	e00f      	b.n	800405a <UART_SetConfig+0x1ca>
 800403a:	2300      	movs	r3, #0
 800403c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004040:	e0ad      	b.n	800419e <UART_SetConfig+0x30e>
 8004042:	2302      	movs	r3, #2
 8004044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004048:	e0a9      	b.n	800419e <UART_SetConfig+0x30e>
 800404a:	2304      	movs	r3, #4
 800404c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004050:	e0a5      	b.n	800419e <UART_SetConfig+0x30e>
 8004052:	2308      	movs	r3, #8
 8004054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004058:	e0a1      	b.n	800419e <UART_SetConfig+0x30e>
 800405a:	2310      	movs	r3, #16
 800405c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004060:	bf00      	nop
 8004062:	e09c      	b.n	800419e <UART_SetConfig+0x30e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a49      	ldr	r2, [pc, #292]	; (8004190 <UART_SetConfig+0x300>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d125      	bne.n	80040ba <UART_SetConfig+0x22a>
 800406e:	4b45      	ldr	r3, [pc, #276]	; (8004184 <UART_SetConfig+0x2f4>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	d011      	beq.n	80040a0 <UART_SetConfig+0x210>
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d802      	bhi.n	8004086 <UART_SetConfig+0x1f6>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <UART_SetConfig+0x200>
 8004084:	e014      	b.n	80040b0 <UART_SetConfig+0x220>
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d006      	beq.n	8004098 <UART_SetConfig+0x208>
 800408a:	2bc0      	cmp	r3, #192	; 0xc0
 800408c:	d00c      	beq.n	80040a8 <UART_SetConfig+0x218>
 800408e:	e00f      	b.n	80040b0 <UART_SetConfig+0x220>
 8004090:	2300      	movs	r3, #0
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004096:	e082      	b.n	800419e <UART_SetConfig+0x30e>
 8004098:	2302      	movs	r3, #2
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409e:	e07e      	b.n	800419e <UART_SetConfig+0x30e>
 80040a0:	2304      	movs	r3, #4
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a6:	e07a      	b.n	800419e <UART_SetConfig+0x30e>
 80040a8:	2308      	movs	r3, #8
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ae:	e076      	b.n	800419e <UART_SetConfig+0x30e>
 80040b0:	2310      	movs	r3, #16
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b6:	bf00      	nop
 80040b8:	e071      	b.n	800419e <UART_SetConfig+0x30e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a35      	ldr	r2, [pc, #212]	; (8004194 <UART_SetConfig+0x304>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d129      	bne.n	8004118 <UART_SetConfig+0x288>
 80040c4:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <UART_SetConfig+0x2f4>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d2:	d014      	beq.n	80040fe <UART_SetConfig+0x26e>
 80040d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d8:	d802      	bhi.n	80040e0 <UART_SetConfig+0x250>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <UART_SetConfig+0x25e>
 80040de:	e016      	b.n	800410e <UART_SetConfig+0x27e>
 80040e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e4:	d007      	beq.n	80040f6 <UART_SetConfig+0x266>
 80040e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ea:	d00c      	beq.n	8004106 <UART_SetConfig+0x276>
 80040ec:	e00f      	b.n	800410e <UART_SetConfig+0x27e>
 80040ee:	2300      	movs	r3, #0
 80040f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f4:	e053      	b.n	800419e <UART_SetConfig+0x30e>
 80040f6:	2302      	movs	r3, #2
 80040f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fc:	e04f      	b.n	800419e <UART_SetConfig+0x30e>
 80040fe:	2304      	movs	r3, #4
 8004100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004104:	e04b      	b.n	800419e <UART_SetConfig+0x30e>
 8004106:	2308      	movs	r3, #8
 8004108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410c:	e047      	b.n	800419e <UART_SetConfig+0x30e>
 800410e:	2310      	movs	r3, #16
 8004110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004114:	bf00      	nop
 8004116:	e042      	b.n	800419e <UART_SetConfig+0x30e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a17      	ldr	r2, [pc, #92]	; (800417c <UART_SetConfig+0x2ec>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d13a      	bne.n	8004198 <UART_SetConfig+0x308>
 8004122:	4b18      	ldr	r3, [pc, #96]	; (8004184 <UART_SetConfig+0x2f4>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800412c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004130:	d014      	beq.n	800415c <UART_SetConfig+0x2cc>
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004136:	d802      	bhi.n	800413e <UART_SetConfig+0x2ae>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <UART_SetConfig+0x2bc>
 800413c:	e016      	b.n	800416c <UART_SetConfig+0x2dc>
 800413e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004142:	d007      	beq.n	8004154 <UART_SetConfig+0x2c4>
 8004144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004148:	d00c      	beq.n	8004164 <UART_SetConfig+0x2d4>
 800414a:	e00f      	b.n	800416c <UART_SetConfig+0x2dc>
 800414c:	2300      	movs	r3, #0
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004152:	e024      	b.n	800419e <UART_SetConfig+0x30e>
 8004154:	2302      	movs	r3, #2
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415a:	e020      	b.n	800419e <UART_SetConfig+0x30e>
 800415c:	2304      	movs	r3, #4
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004162:	e01c      	b.n	800419e <UART_SetConfig+0x30e>
 8004164:	2308      	movs	r3, #8
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416a:	e018      	b.n	800419e <UART_SetConfig+0x30e>
 800416c:	2310      	movs	r3, #16
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004172:	bf00      	nop
 8004174:	e013      	b.n	800419e <UART_SetConfig+0x30e>
 8004176:	bf00      	nop
 8004178:	cfff69f3 	.word	0xcfff69f3
 800417c:	40008000 	.word	0x40008000
 8004180:	40013800 	.word	0x40013800
 8004184:	40021000 	.word	0x40021000
 8004188:	40004400 	.word	0x40004400
 800418c:	40004800 	.word	0x40004800
 8004190:	40004c00 	.word	0x40004c00
 8004194:	40005000 	.word	0x40005000
 8004198:	2310      	movs	r3, #16
 800419a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a86      	ldr	r2, [pc, #536]	; (80043bc <UART_SetConfig+0x52c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	f040 8422 	bne.w	80049ee <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	f200 8173 	bhi.w	800449a <UART_SetConfig+0x60a>
 80041b4:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <UART_SetConfig+0x32c>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	0800449b 	.word	0x0800449b
 80041c4:	08004283 	.word	0x08004283
 80041c8:	0800449b 	.word	0x0800449b
 80041cc:	0800431b 	.word	0x0800431b
 80041d0:	0800449b 	.word	0x0800449b
 80041d4:	0800449b 	.word	0x0800449b
 80041d8:	0800449b 	.word	0x0800449b
 80041dc:	080043ed 	.word	0x080043ed
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80041e0:	f7fe fc92 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d044      	beq.n	8004278 <UART_SetConfig+0x3e8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d03e      	beq.n	8004274 <UART_SetConfig+0x3e4>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d038      	beq.n	8004270 <UART_SetConfig+0x3e0>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	2b03      	cmp	r3, #3
 8004204:	d032      	beq.n	800426c <UART_SetConfig+0x3dc>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	2b04      	cmp	r3, #4
 800420c:	d02c      	beq.n	8004268 <UART_SetConfig+0x3d8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	2b05      	cmp	r3, #5
 8004214:	d026      	beq.n	8004264 <UART_SetConfig+0x3d4>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b06      	cmp	r3, #6
 800421c:	d020      	beq.n	8004260 <UART_SetConfig+0x3d0>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b07      	cmp	r3, #7
 8004224:	d01a      	beq.n	800425c <UART_SetConfig+0x3cc>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	2b08      	cmp	r3, #8
 800422c:	d014      	beq.n	8004258 <UART_SetConfig+0x3c8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2b09      	cmp	r3, #9
 8004234:	d00e      	beq.n	8004254 <UART_SetConfig+0x3c4>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2b0a      	cmp	r3, #10
 800423c:	d008      	beq.n	8004250 <UART_SetConfig+0x3c0>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	2b0b      	cmp	r3, #11
 8004244:	d102      	bne.n	800424c <UART_SetConfig+0x3bc>
 8004246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800424a:	e016      	b.n	800427a <UART_SetConfig+0x3ea>
 800424c:	2301      	movs	r3, #1
 800424e:	e014      	b.n	800427a <UART_SetConfig+0x3ea>
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	e012      	b.n	800427a <UART_SetConfig+0x3ea>
 8004254:	2340      	movs	r3, #64	; 0x40
 8004256:	e010      	b.n	800427a <UART_SetConfig+0x3ea>
 8004258:	2320      	movs	r3, #32
 800425a:	e00e      	b.n	800427a <UART_SetConfig+0x3ea>
 800425c:	2310      	movs	r3, #16
 800425e:	e00c      	b.n	800427a <UART_SetConfig+0x3ea>
 8004260:	230c      	movs	r3, #12
 8004262:	e00a      	b.n	800427a <UART_SetConfig+0x3ea>
 8004264:	230a      	movs	r3, #10
 8004266:	e008      	b.n	800427a <UART_SetConfig+0x3ea>
 8004268:	2308      	movs	r3, #8
 800426a:	e006      	b.n	800427a <UART_SetConfig+0x3ea>
 800426c:	2306      	movs	r3, #6
 800426e:	e004      	b.n	800427a <UART_SetConfig+0x3ea>
 8004270:	2304      	movs	r3, #4
 8004272:	e002      	b.n	800427a <UART_SetConfig+0x3ea>
 8004274:	2302      	movs	r3, #2
 8004276:	e000      	b.n	800427a <UART_SetConfig+0x3ea>
 8004278:	2301      	movs	r3, #1
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	617b      	str	r3, [r7, #20]
        break;
 8004280:	e10e      	b.n	80044a0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	d044      	beq.n	8004314 <UART_SetConfig+0x484>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	2b01      	cmp	r3, #1
 8004290:	d03e      	beq.n	8004310 <UART_SetConfig+0x480>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	2b02      	cmp	r3, #2
 8004298:	d038      	beq.n	800430c <UART_SetConfig+0x47c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d032      	beq.n	8004308 <UART_SetConfig+0x478>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d02c      	beq.n	8004304 <UART_SetConfig+0x474>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d026      	beq.n	8004300 <UART_SetConfig+0x470>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	2b06      	cmp	r3, #6
 80042b8:	d020      	beq.n	80042fc <UART_SetConfig+0x46c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	2b07      	cmp	r3, #7
 80042c0:	d01a      	beq.n	80042f8 <UART_SetConfig+0x468>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d014      	beq.n	80042f4 <UART_SetConfig+0x464>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2b09      	cmp	r3, #9
 80042d0:	d00e      	beq.n	80042f0 <UART_SetConfig+0x460>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	2b0a      	cmp	r3, #10
 80042d8:	d008      	beq.n	80042ec <UART_SetConfig+0x45c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b0b      	cmp	r3, #11
 80042e0:	d102      	bne.n	80042e8 <UART_SetConfig+0x458>
 80042e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80042e6:	e016      	b.n	8004316 <UART_SetConfig+0x486>
 80042e8:	4b35      	ldr	r3, [pc, #212]	; (80043c0 <UART_SetConfig+0x530>)
 80042ea:	e014      	b.n	8004316 <UART_SetConfig+0x486>
 80042ec:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <UART_SetConfig+0x534>)
 80042ee:	e012      	b.n	8004316 <UART_SetConfig+0x486>
 80042f0:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <UART_SetConfig+0x538>)
 80042f2:	e010      	b.n	8004316 <UART_SetConfig+0x486>
 80042f4:	4b35      	ldr	r3, [pc, #212]	; (80043cc <UART_SetConfig+0x53c>)
 80042f6:	e00e      	b.n	8004316 <UART_SetConfig+0x486>
 80042f8:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <UART_SetConfig+0x540>)
 80042fa:	e00c      	b.n	8004316 <UART_SetConfig+0x486>
 80042fc:	4b35      	ldr	r3, [pc, #212]	; (80043d4 <UART_SetConfig+0x544>)
 80042fe:	e00a      	b.n	8004316 <UART_SetConfig+0x486>
 8004300:	4b35      	ldr	r3, [pc, #212]	; (80043d8 <UART_SetConfig+0x548>)
 8004302:	e008      	b.n	8004316 <UART_SetConfig+0x486>
 8004304:	4b35      	ldr	r3, [pc, #212]	; (80043dc <UART_SetConfig+0x54c>)
 8004306:	e006      	b.n	8004316 <UART_SetConfig+0x486>
 8004308:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <UART_SetConfig+0x550>)
 800430a:	e004      	b.n	8004316 <UART_SetConfig+0x486>
 800430c:	4b35      	ldr	r3, [pc, #212]	; (80043e4 <UART_SetConfig+0x554>)
 800430e:	e002      	b.n	8004316 <UART_SetConfig+0x486>
 8004310:	4b35      	ldr	r3, [pc, #212]	; (80043e8 <UART_SetConfig+0x558>)
 8004312:	e000      	b.n	8004316 <UART_SetConfig+0x486>
 8004314:	4b2a      	ldr	r3, [pc, #168]	; (80043c0 <UART_SetConfig+0x530>)
 8004316:	617b      	str	r3, [r7, #20]
        break;
 8004318:	e0c2      	b.n	80044a0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800431a:	f7fe fb87 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 800431e:	4602      	mov	r2, r0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d044      	beq.n	80043b2 <UART_SetConfig+0x522>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	2b01      	cmp	r3, #1
 800432e:	d03e      	beq.n	80043ae <UART_SetConfig+0x51e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	2b02      	cmp	r3, #2
 8004336:	d038      	beq.n	80043aa <UART_SetConfig+0x51a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	2b03      	cmp	r3, #3
 800433e:	d032      	beq.n	80043a6 <UART_SetConfig+0x516>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b04      	cmp	r3, #4
 8004346:	d02c      	beq.n	80043a2 <UART_SetConfig+0x512>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	2b05      	cmp	r3, #5
 800434e:	d026      	beq.n	800439e <UART_SetConfig+0x50e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	2b06      	cmp	r3, #6
 8004356:	d020      	beq.n	800439a <UART_SetConfig+0x50a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	2b07      	cmp	r3, #7
 800435e:	d01a      	beq.n	8004396 <UART_SetConfig+0x506>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	2b08      	cmp	r3, #8
 8004366:	d014      	beq.n	8004392 <UART_SetConfig+0x502>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	2b09      	cmp	r3, #9
 800436e:	d00e      	beq.n	800438e <UART_SetConfig+0x4fe>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	2b0a      	cmp	r3, #10
 8004376:	d008      	beq.n	800438a <UART_SetConfig+0x4fa>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	2b0b      	cmp	r3, #11
 800437e:	d102      	bne.n	8004386 <UART_SetConfig+0x4f6>
 8004380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004384:	e016      	b.n	80043b4 <UART_SetConfig+0x524>
 8004386:	2301      	movs	r3, #1
 8004388:	e014      	b.n	80043b4 <UART_SetConfig+0x524>
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	e012      	b.n	80043b4 <UART_SetConfig+0x524>
 800438e:	2340      	movs	r3, #64	; 0x40
 8004390:	e010      	b.n	80043b4 <UART_SetConfig+0x524>
 8004392:	2320      	movs	r3, #32
 8004394:	e00e      	b.n	80043b4 <UART_SetConfig+0x524>
 8004396:	2310      	movs	r3, #16
 8004398:	e00c      	b.n	80043b4 <UART_SetConfig+0x524>
 800439a:	230c      	movs	r3, #12
 800439c:	e00a      	b.n	80043b4 <UART_SetConfig+0x524>
 800439e:	230a      	movs	r3, #10
 80043a0:	e008      	b.n	80043b4 <UART_SetConfig+0x524>
 80043a2:	2308      	movs	r3, #8
 80043a4:	e006      	b.n	80043b4 <UART_SetConfig+0x524>
 80043a6:	2306      	movs	r3, #6
 80043a8:	e004      	b.n	80043b4 <UART_SetConfig+0x524>
 80043aa:	2304      	movs	r3, #4
 80043ac:	e002      	b.n	80043b4 <UART_SetConfig+0x524>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e000      	b.n	80043b4 <UART_SetConfig+0x524>
 80043b2:	2301      	movs	r3, #1
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]
        break;
 80043ba:	e071      	b.n	80044a0 <UART_SetConfig+0x610>
 80043bc:	40008000 	.word	0x40008000
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	0001e848 	.word	0x0001e848
 80043c8:	0003d090 	.word	0x0003d090
 80043cc:	0007a120 	.word	0x0007a120
 80043d0:	000f4240 	.word	0x000f4240
 80043d4:	00145855 	.word	0x00145855
 80043d8:	00186a00 	.word	0x00186a00
 80043dc:	001e8480 	.word	0x001e8480
 80043e0:	0028b0aa 	.word	0x0028b0aa
 80043e4:	003d0900 	.word	0x003d0900
 80043e8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d04e      	beq.n	8004492 <UART_SetConfig+0x602>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d047      	beq.n	800448c <UART_SetConfig+0x5fc>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b02      	cmp	r3, #2
 8004402:	d040      	beq.n	8004486 <UART_SetConfig+0x5f6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2b03      	cmp	r3, #3
 800440a:	d039      	beq.n	8004480 <UART_SetConfig+0x5f0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2b04      	cmp	r3, #4
 8004412:	d032      	beq.n	800447a <UART_SetConfig+0x5ea>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2b05      	cmp	r3, #5
 800441a:	d02b      	beq.n	8004474 <UART_SetConfig+0x5e4>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2b06      	cmp	r3, #6
 8004422:	d024      	beq.n	800446e <UART_SetConfig+0x5de>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	2b07      	cmp	r3, #7
 800442a:	d01d      	beq.n	8004468 <UART_SetConfig+0x5d8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2b08      	cmp	r3, #8
 8004432:	d016      	beq.n	8004462 <UART_SetConfig+0x5d2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	2b09      	cmp	r3, #9
 800443a:	d00f      	beq.n	800445c <UART_SetConfig+0x5cc>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b0a      	cmp	r3, #10
 8004442:	d008      	beq.n	8004456 <UART_SetConfig+0x5c6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	2b0b      	cmp	r3, #11
 800444a:	d101      	bne.n	8004450 <UART_SetConfig+0x5c0>
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	e022      	b.n	8004496 <UART_SetConfig+0x606>
 8004450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004454:	e01f      	b.n	8004496 <UART_SetConfig+0x606>
 8004456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800445a:	e01c      	b.n	8004496 <UART_SetConfig+0x606>
 800445c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004460:	e019      	b.n	8004496 <UART_SetConfig+0x606>
 8004462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004466:	e016      	b.n	8004496 <UART_SetConfig+0x606>
 8004468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800446c:	e013      	b.n	8004496 <UART_SetConfig+0x606>
 800446e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004472:	e010      	b.n	8004496 <UART_SetConfig+0x606>
 8004474:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004478:	e00d      	b.n	8004496 <UART_SetConfig+0x606>
 800447a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800447e:	e00a      	b.n	8004496 <UART_SetConfig+0x606>
 8004480:	f241 5355 	movw	r3, #5461	; 0x1555
 8004484:	e007      	b.n	8004496 <UART_SetConfig+0x606>
 8004486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800448a:	e004      	b.n	8004496 <UART_SetConfig+0x606>
 800448c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004490:	e001      	b.n	8004496 <UART_SetConfig+0x606>
 8004492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004496:	617b      	str	r3, [r7, #20]
        break;
 8004498:	e002      	b.n	80044a0 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	76fb      	strb	r3, [r7, #27]
        break;
 800449e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 86b7 	beq.w	8005216 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4413      	add	r3, r2
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d305      	bcc.n	80044c4 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d903      	bls.n	80044cc <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	76fb      	strb	r3, [r7, #27]
 80044c8:	f000 bea5 	b.w	8005216 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80044cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	f200 8277 	bhi.w	80049c4 <UART_SetConfig+0xb34>
 80044d6:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <UART_SetConfig+0x64c>)
 80044d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044dc:	08004501 	.word	0x08004501
 80044e0:	080049c5 	.word	0x080049c5
 80044e4:	0800463f 	.word	0x0800463f
 80044e8:	080049c5 	.word	0x080049c5
 80044ec:	08004735 	.word	0x08004735
 80044f0:	080049c5 	.word	0x080049c5
 80044f4:	080049c5 	.word	0x080049c5
 80044f8:	080049c5 	.word	0x080049c5
 80044fc:	08004873 	.word	0x08004873
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004500:	f7fe fb02 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8004504:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4618      	mov	r0, r3
 800450a:	f04f 0100 	mov.w	r1, #0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	d067      	beq.n	80045e6 <UART_SetConfig+0x756>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	2b01      	cmp	r3, #1
 800451c:	d05e      	beq.n	80045dc <UART_SetConfig+0x74c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	2b02      	cmp	r3, #2
 8004524:	d055      	beq.n	80045d2 <UART_SetConfig+0x742>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	2b03      	cmp	r3, #3
 800452c:	d04c      	beq.n	80045c8 <UART_SetConfig+0x738>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	2b04      	cmp	r3, #4
 8004534:	d043      	beq.n	80045be <UART_SetConfig+0x72e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	2b05      	cmp	r3, #5
 800453c:	d03a      	beq.n	80045b4 <UART_SetConfig+0x724>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b06      	cmp	r3, #6
 8004544:	d031      	beq.n	80045aa <UART_SetConfig+0x71a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b07      	cmp	r3, #7
 800454c:	d028      	beq.n	80045a0 <UART_SetConfig+0x710>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b08      	cmp	r3, #8
 8004554:	d01f      	beq.n	8004596 <UART_SetConfig+0x706>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	2b09      	cmp	r3, #9
 800455c:	d016      	beq.n	800458c <UART_SetConfig+0x6fc>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	2b0a      	cmp	r3, #10
 8004564:	d00d      	beq.n	8004582 <UART_SetConfig+0x6f2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	2b0b      	cmp	r3, #11
 800456c:	d104      	bne.n	8004578 <UART_SetConfig+0x6e8>
 800456e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004572:	f04f 0400 	mov.w	r4, #0
 8004576:	e03a      	b.n	80045ee <UART_SetConfig+0x75e>
 8004578:	f04f 0301 	mov.w	r3, #1
 800457c:	f04f 0400 	mov.w	r4, #0
 8004580:	e035      	b.n	80045ee <UART_SetConfig+0x75e>
 8004582:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004586:	f04f 0400 	mov.w	r4, #0
 800458a:	e030      	b.n	80045ee <UART_SetConfig+0x75e>
 800458c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004590:	f04f 0400 	mov.w	r4, #0
 8004594:	e02b      	b.n	80045ee <UART_SetConfig+0x75e>
 8004596:	f04f 0320 	mov.w	r3, #32
 800459a:	f04f 0400 	mov.w	r4, #0
 800459e:	e026      	b.n	80045ee <UART_SetConfig+0x75e>
 80045a0:	f04f 0310 	mov.w	r3, #16
 80045a4:	f04f 0400 	mov.w	r4, #0
 80045a8:	e021      	b.n	80045ee <UART_SetConfig+0x75e>
 80045aa:	f04f 030c 	mov.w	r3, #12
 80045ae:	f04f 0400 	mov.w	r4, #0
 80045b2:	e01c      	b.n	80045ee <UART_SetConfig+0x75e>
 80045b4:	f04f 030a 	mov.w	r3, #10
 80045b8:	f04f 0400 	mov.w	r4, #0
 80045bc:	e017      	b.n	80045ee <UART_SetConfig+0x75e>
 80045be:	f04f 0308 	mov.w	r3, #8
 80045c2:	f04f 0400 	mov.w	r4, #0
 80045c6:	e012      	b.n	80045ee <UART_SetConfig+0x75e>
 80045c8:	f04f 0306 	mov.w	r3, #6
 80045cc:	f04f 0400 	mov.w	r4, #0
 80045d0:	e00d      	b.n	80045ee <UART_SetConfig+0x75e>
 80045d2:	f04f 0304 	mov.w	r3, #4
 80045d6:	f04f 0400 	mov.w	r4, #0
 80045da:	e008      	b.n	80045ee <UART_SetConfig+0x75e>
 80045dc:	f04f 0302 	mov.w	r3, #2
 80045e0:	f04f 0400 	mov.w	r4, #0
 80045e4:	e003      	b.n	80045ee <UART_SetConfig+0x75e>
 80045e6:	f04f 0301 	mov.w	r3, #1
 80045ea:	f04f 0400 	mov.w	r4, #0
 80045ee:	461a      	mov	r2, r3
 80045f0:	4623      	mov	r3, r4
 80045f2:	f7fb fe11 	bl	8000218 <__aeabi_uldivmod>
 80045f6:	4603      	mov	r3, r0
 80045f8:	460c      	mov	r4, r1
 80045fa:	4619      	mov	r1, r3
 80045fc:	4622      	mov	r2, r4
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	f04f 0400 	mov.w	r4, #0
 8004606:	0214      	lsls	r4, r2, #8
 8004608:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800460c:	020b      	lsls	r3, r1, #8
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6852      	ldr	r2, [r2, #4]
 8004612:	0852      	lsrs	r2, r2, #1
 8004614:	4611      	mov	r1, r2
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	eb13 0b01 	adds.w	fp, r3, r1
 800461e:	eb44 0c02 	adc.w	ip, r4, r2
 8004622:	4658      	mov	r0, fp
 8004624:	4661      	mov	r1, ip
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f04f 0400 	mov.w	r4, #0
 800462e:	461a      	mov	r2, r3
 8004630:	4623      	mov	r3, r4
 8004632:	f7fb fdf1 	bl	8000218 <__aeabi_uldivmod>
 8004636:	4603      	mov	r3, r0
 8004638:	460c      	mov	r4, r1
 800463a:	61fb      	str	r3, [r7, #28]
            break;
 800463c:	e1c5      	b.n	80049ca <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d05b      	beq.n	80046fe <UART_SetConfig+0x86e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	2b01      	cmp	r3, #1
 800464c:	d053      	beq.n	80046f6 <UART_SetConfig+0x866>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	2b02      	cmp	r3, #2
 8004654:	d04b      	beq.n	80046ee <UART_SetConfig+0x85e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	2b03      	cmp	r3, #3
 800465c:	d043      	beq.n	80046e6 <UART_SetConfig+0x856>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	2b04      	cmp	r3, #4
 8004664:	d03b      	beq.n	80046de <UART_SetConfig+0x84e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	2b05      	cmp	r3, #5
 800466c:	d033      	beq.n	80046d6 <UART_SetConfig+0x846>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	2b06      	cmp	r3, #6
 8004674:	d02b      	beq.n	80046ce <UART_SetConfig+0x83e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	2b07      	cmp	r3, #7
 800467c:	d023      	beq.n	80046c6 <UART_SetConfig+0x836>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	2b08      	cmp	r3, #8
 8004684:	d01b      	beq.n	80046be <UART_SetConfig+0x82e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2b09      	cmp	r3, #9
 800468c:	d013      	beq.n	80046b6 <UART_SetConfig+0x826>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	2b0a      	cmp	r3, #10
 8004694:	d00b      	beq.n	80046ae <UART_SetConfig+0x81e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	2b0b      	cmp	r3, #11
 800469c:	d103      	bne.n	80046a6 <UART_SetConfig+0x816>
 800469e:	4bae      	ldr	r3, [pc, #696]	; (8004958 <UART_SetConfig+0xac8>)
 80046a0:	f04f 0400 	mov.w	r4, #0
 80046a4:	e02e      	b.n	8004704 <UART_SetConfig+0x874>
 80046a6:	4bad      	ldr	r3, [pc, #692]	; (800495c <UART_SetConfig+0xacc>)
 80046a8:	f04f 0400 	mov.w	r4, #0
 80046ac:	e02a      	b.n	8004704 <UART_SetConfig+0x874>
 80046ae:	4bac      	ldr	r3, [pc, #688]	; (8004960 <UART_SetConfig+0xad0>)
 80046b0:	f04f 0400 	mov.w	r4, #0
 80046b4:	e026      	b.n	8004704 <UART_SetConfig+0x874>
 80046b6:	4bab      	ldr	r3, [pc, #684]	; (8004964 <UART_SetConfig+0xad4>)
 80046b8:	f04f 0400 	mov.w	r4, #0
 80046bc:	e022      	b.n	8004704 <UART_SetConfig+0x874>
 80046be:	4baa      	ldr	r3, [pc, #680]	; (8004968 <UART_SetConfig+0xad8>)
 80046c0:	f04f 0400 	mov.w	r4, #0
 80046c4:	e01e      	b.n	8004704 <UART_SetConfig+0x874>
 80046c6:	4ba9      	ldr	r3, [pc, #676]	; (800496c <UART_SetConfig+0xadc>)
 80046c8:	f04f 0400 	mov.w	r4, #0
 80046cc:	e01a      	b.n	8004704 <UART_SetConfig+0x874>
 80046ce:	a49e      	add	r4, pc, #632	; (adr r4, 8004948 <UART_SetConfig+0xab8>)
 80046d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80046d4:	e016      	b.n	8004704 <UART_SetConfig+0x874>
 80046d6:	4ba6      	ldr	r3, [pc, #664]	; (8004970 <UART_SetConfig+0xae0>)
 80046d8:	f04f 0400 	mov.w	r4, #0
 80046dc:	e012      	b.n	8004704 <UART_SetConfig+0x874>
 80046de:	4ba5      	ldr	r3, [pc, #660]	; (8004974 <UART_SetConfig+0xae4>)
 80046e0:	f04f 0400 	mov.w	r4, #0
 80046e4:	e00e      	b.n	8004704 <UART_SetConfig+0x874>
 80046e6:	a49a      	add	r4, pc, #616	; (adr r4, 8004950 <UART_SetConfig+0xac0>)
 80046e8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80046ec:	e00a      	b.n	8004704 <UART_SetConfig+0x874>
 80046ee:	4ba2      	ldr	r3, [pc, #648]	; (8004978 <UART_SetConfig+0xae8>)
 80046f0:	f04f 0400 	mov.w	r4, #0
 80046f4:	e006      	b.n	8004704 <UART_SetConfig+0x874>
 80046f6:	4ba1      	ldr	r3, [pc, #644]	; (800497c <UART_SetConfig+0xaec>)
 80046f8:	f04f 0400 	mov.w	r4, #0
 80046fc:	e002      	b.n	8004704 <UART_SetConfig+0x874>
 80046fe:	4b97      	ldr	r3, [pc, #604]	; (800495c <UART_SetConfig+0xacc>)
 8004700:	f04f 0400 	mov.w	r4, #0
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6852      	ldr	r2, [r2, #4]
 8004708:	0852      	lsrs	r2, r2, #1
 800470a:	4611      	mov	r1, r2
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	eb13 0b01 	adds.w	fp, r3, r1
 8004714:	eb44 0c02 	adc.w	ip, r4, r2
 8004718:	4658      	mov	r0, fp
 800471a:	4661      	mov	r1, ip
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f04f 0400 	mov.w	r4, #0
 8004724:	461a      	mov	r2, r3
 8004726:	4623      	mov	r3, r4
 8004728:	f7fb fd76 	bl	8000218 <__aeabi_uldivmod>
 800472c:	4603      	mov	r3, r0
 800472e:	460c      	mov	r4, r1
 8004730:	61fb      	str	r3, [r7, #28]
            break;
 8004732:	e14a      	b.n	80049ca <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004734:	f7fe f97a 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 8004738:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4618      	mov	r0, r3
 800473e:	f04f 0100 	mov.w	r1, #0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d067      	beq.n	800481a <UART_SetConfig+0x98a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	2b01      	cmp	r3, #1
 8004750:	d05e      	beq.n	8004810 <UART_SetConfig+0x980>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	2b02      	cmp	r3, #2
 8004758:	d055      	beq.n	8004806 <UART_SetConfig+0x976>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	2b03      	cmp	r3, #3
 8004760:	d04c      	beq.n	80047fc <UART_SetConfig+0x96c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	2b04      	cmp	r3, #4
 8004768:	d043      	beq.n	80047f2 <UART_SetConfig+0x962>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	2b05      	cmp	r3, #5
 8004770:	d03a      	beq.n	80047e8 <UART_SetConfig+0x958>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2b06      	cmp	r3, #6
 8004778:	d031      	beq.n	80047de <UART_SetConfig+0x94e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b07      	cmp	r3, #7
 8004780:	d028      	beq.n	80047d4 <UART_SetConfig+0x944>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	2b08      	cmp	r3, #8
 8004788:	d01f      	beq.n	80047ca <UART_SetConfig+0x93a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	2b09      	cmp	r3, #9
 8004790:	d016      	beq.n	80047c0 <UART_SetConfig+0x930>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	2b0a      	cmp	r3, #10
 8004798:	d00d      	beq.n	80047b6 <UART_SetConfig+0x926>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	2b0b      	cmp	r3, #11
 80047a0:	d104      	bne.n	80047ac <UART_SetConfig+0x91c>
 80047a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047a6:	f04f 0400 	mov.w	r4, #0
 80047aa:	e03a      	b.n	8004822 <UART_SetConfig+0x992>
 80047ac:	f04f 0301 	mov.w	r3, #1
 80047b0:	f04f 0400 	mov.w	r4, #0
 80047b4:	e035      	b.n	8004822 <UART_SetConfig+0x992>
 80047b6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80047ba:	f04f 0400 	mov.w	r4, #0
 80047be:	e030      	b.n	8004822 <UART_SetConfig+0x992>
 80047c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80047c4:	f04f 0400 	mov.w	r4, #0
 80047c8:	e02b      	b.n	8004822 <UART_SetConfig+0x992>
 80047ca:	f04f 0320 	mov.w	r3, #32
 80047ce:	f04f 0400 	mov.w	r4, #0
 80047d2:	e026      	b.n	8004822 <UART_SetConfig+0x992>
 80047d4:	f04f 0310 	mov.w	r3, #16
 80047d8:	f04f 0400 	mov.w	r4, #0
 80047dc:	e021      	b.n	8004822 <UART_SetConfig+0x992>
 80047de:	f04f 030c 	mov.w	r3, #12
 80047e2:	f04f 0400 	mov.w	r4, #0
 80047e6:	e01c      	b.n	8004822 <UART_SetConfig+0x992>
 80047e8:	f04f 030a 	mov.w	r3, #10
 80047ec:	f04f 0400 	mov.w	r4, #0
 80047f0:	e017      	b.n	8004822 <UART_SetConfig+0x992>
 80047f2:	f04f 0308 	mov.w	r3, #8
 80047f6:	f04f 0400 	mov.w	r4, #0
 80047fa:	e012      	b.n	8004822 <UART_SetConfig+0x992>
 80047fc:	f04f 0306 	mov.w	r3, #6
 8004800:	f04f 0400 	mov.w	r4, #0
 8004804:	e00d      	b.n	8004822 <UART_SetConfig+0x992>
 8004806:	f04f 0304 	mov.w	r3, #4
 800480a:	f04f 0400 	mov.w	r4, #0
 800480e:	e008      	b.n	8004822 <UART_SetConfig+0x992>
 8004810:	f04f 0302 	mov.w	r3, #2
 8004814:	f04f 0400 	mov.w	r4, #0
 8004818:	e003      	b.n	8004822 <UART_SetConfig+0x992>
 800481a:	f04f 0301 	mov.w	r3, #1
 800481e:	f04f 0400 	mov.w	r4, #0
 8004822:	461a      	mov	r2, r3
 8004824:	4623      	mov	r3, r4
 8004826:	f7fb fcf7 	bl	8000218 <__aeabi_uldivmod>
 800482a:	4603      	mov	r3, r0
 800482c:	460c      	mov	r4, r1
 800482e:	4619      	mov	r1, r3
 8004830:	4622      	mov	r2, r4
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	f04f 0400 	mov.w	r4, #0
 800483a:	0214      	lsls	r4, r2, #8
 800483c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004840:	020b      	lsls	r3, r1, #8
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6852      	ldr	r2, [r2, #4]
 8004846:	0852      	lsrs	r2, r2, #1
 8004848:	4611      	mov	r1, r2
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	eb13 0b01 	adds.w	fp, r3, r1
 8004852:	eb44 0c02 	adc.w	ip, r4, r2
 8004856:	4658      	mov	r0, fp
 8004858:	4661      	mov	r1, ip
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f04f 0400 	mov.w	r4, #0
 8004862:	461a      	mov	r2, r3
 8004864:	4623      	mov	r3, r4
 8004866:	f7fb fcd7 	bl	8000218 <__aeabi_uldivmod>
 800486a:	4603      	mov	r3, r0
 800486c:	460c      	mov	r4, r1
 800486e:	61fb      	str	r3, [r7, #28]
            break;
 8004870:	e0ab      	b.n	80049ca <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8088 	beq.w	800498c <UART_SetConfig+0xafc>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	2b01      	cmp	r3, #1
 8004882:	d05b      	beq.n	800493c <UART_SetConfig+0xaac>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	2b02      	cmp	r3, #2
 800488a:	d052      	beq.n	8004932 <UART_SetConfig+0xaa2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	2b03      	cmp	r3, #3
 8004892:	d04a      	beq.n	800492a <UART_SetConfig+0xa9a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	2b04      	cmp	r3, #4
 800489a:	d041      	beq.n	8004920 <UART_SetConfig+0xa90>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d039      	beq.n	8004918 <UART_SetConfig+0xa88>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	2b06      	cmp	r3, #6
 80048aa:	d031      	beq.n	8004910 <UART_SetConfig+0xa80>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	2b07      	cmp	r3, #7
 80048b2:	d028      	beq.n	8004906 <UART_SetConfig+0xa76>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d01f      	beq.n	80048fc <UART_SetConfig+0xa6c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	2b09      	cmp	r3, #9
 80048c2:	d016      	beq.n	80048f2 <UART_SetConfig+0xa62>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	2b0a      	cmp	r3, #10
 80048ca:	d00d      	beq.n	80048e8 <UART_SetConfig+0xa58>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	2b0b      	cmp	r3, #11
 80048d2:	d104      	bne.n	80048de <UART_SetConfig+0xa4e>
 80048d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d8:	f04f 0400 	mov.w	r4, #0
 80048dc:	e05a      	b.n	8004994 <UART_SetConfig+0xb04>
 80048de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80048e2:	f04f 0400 	mov.w	r4, #0
 80048e6:	e055      	b.n	8004994 <UART_SetConfig+0xb04>
 80048e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048ec:	f04f 0400 	mov.w	r4, #0
 80048f0:	e050      	b.n	8004994 <UART_SetConfig+0xb04>
 80048f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048f6:	f04f 0400 	mov.w	r4, #0
 80048fa:	e04b      	b.n	8004994 <UART_SetConfig+0xb04>
 80048fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004900:	f04f 0400 	mov.w	r4, #0
 8004904:	e046      	b.n	8004994 <UART_SetConfig+0xb04>
 8004906:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800490a:	f04f 0400 	mov.w	r4, #0
 800490e:	e041      	b.n	8004994 <UART_SetConfig+0xb04>
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <UART_SetConfig+0xaf0>)
 8004912:	f04f 0400 	mov.w	r4, #0
 8004916:	e03d      	b.n	8004994 <UART_SetConfig+0xb04>
 8004918:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <UART_SetConfig+0xaf4>)
 800491a:	f04f 0400 	mov.w	r4, #0
 800491e:	e039      	b.n	8004994 <UART_SetConfig+0xb04>
 8004920:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004924:	f04f 0400 	mov.w	r4, #0
 8004928:	e034      	b.n	8004994 <UART_SetConfig+0xb04>
 800492a:	4b17      	ldr	r3, [pc, #92]	; (8004988 <UART_SetConfig+0xaf8>)
 800492c:	f04f 0400 	mov.w	r4, #0
 8004930:	e030      	b.n	8004994 <UART_SetConfig+0xb04>
 8004932:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004936:	f04f 0400 	mov.w	r4, #0
 800493a:	e02b      	b.n	8004994 <UART_SetConfig+0xb04>
 800493c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004940:	f04f 0400 	mov.w	r4, #0
 8004944:	e026      	b.n	8004994 <UART_SetConfig+0xb04>
 8004946:	bf00      	nop
 8004948:	14585500 	.word	0x14585500
 800494c:	00000000 	.word	0x00000000
 8004950:	28b0aa00 	.word	0x28b0aa00
 8004954:	00000000 	.word	0x00000000
 8004958:	00f42400 	.word	0x00f42400
 800495c:	f4240000 	.word	0xf4240000
 8004960:	01e84800 	.word	0x01e84800
 8004964:	03d09000 	.word	0x03d09000
 8004968:	07a12000 	.word	0x07a12000
 800496c:	0f424000 	.word	0x0f424000
 8004970:	186a0000 	.word	0x186a0000
 8004974:	1e848000 	.word	0x1e848000
 8004978:	3d090000 	.word	0x3d090000
 800497c:	7a120000 	.word	0x7a120000
 8004980:	000aaa00 	.word	0x000aaa00
 8004984:	000ccc00 	.word	0x000ccc00
 8004988:	00155500 	.word	0x00155500
 800498c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004990:	f04f 0400 	mov.w	r4, #0
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6852      	ldr	r2, [r2, #4]
 8004998:	0852      	lsrs	r2, r2, #1
 800499a:	4611      	mov	r1, r2
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	eb13 0b01 	adds.w	fp, r3, r1
 80049a4:	eb44 0c02 	adc.w	ip, r4, r2
 80049a8:	4658      	mov	r0, fp
 80049aa:	4661      	mov	r1, ip
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f04f 0400 	mov.w	r4, #0
 80049b4:	461a      	mov	r2, r3
 80049b6:	4623      	mov	r3, r4
 80049b8:	f7fb fc2e 	bl	8000218 <__aeabi_uldivmod>
 80049bc:	4603      	mov	r3, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	61fb      	str	r3, [r7, #28]
            break;
 80049c2:	e002      	b.n	80049ca <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	76fb      	strb	r3, [r7, #27]
            break;
 80049c8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d0:	d309      	bcc.n	80049e6 <UART_SetConfig+0xb56>
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049d8:	d205      	bcs.n	80049e6 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	60da      	str	r2, [r3, #12]
 80049e2:	f000 bc18 	b.w	8005216 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	76fb      	strb	r3, [r7, #27]
 80049ea:	f000 bc14 	b.w	8005216 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f6:	f040 8204 	bne.w	8004e02 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 80049fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	f200 81df 	bhi.w	8004dc2 <UART_SetConfig+0xf32>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <UART_SetConfig+0xb7c>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004ae9 	.word	0x08004ae9
 8004a14:	08004ba1 	.word	0x08004ba1
 8004a18:	08004dc3 	.word	0x08004dc3
 8004a1c:	08004c49 	.word	0x08004c49
 8004a20:	08004dc3 	.word	0x08004dc3
 8004a24:	08004dc3 	.word	0x08004dc3
 8004a28:	08004dc3 	.word	0x08004dc3
 8004a2c:	08004d01 	.word	0x08004d01
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a30:	f7fe f86a 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8004a34:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d044      	beq.n	8004ac8 <UART_SetConfig+0xc38>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d03e      	beq.n	8004ac4 <UART_SetConfig+0xc34>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d038      	beq.n	8004ac0 <UART_SetConfig+0xc30>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d032      	beq.n	8004abc <UART_SetConfig+0xc2c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d02c      	beq.n	8004ab8 <UART_SetConfig+0xc28>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	d026      	beq.n	8004ab4 <UART_SetConfig+0xc24>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2b06      	cmp	r3, #6
 8004a6c:	d020      	beq.n	8004ab0 <UART_SetConfig+0xc20>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	2b07      	cmp	r3, #7
 8004a74:	d01a      	beq.n	8004aac <UART_SetConfig+0xc1c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d014      	beq.n	8004aa8 <UART_SetConfig+0xc18>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b09      	cmp	r3, #9
 8004a84:	d00e      	beq.n	8004aa4 <UART_SetConfig+0xc14>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b0a      	cmp	r3, #10
 8004a8c:	d008      	beq.n	8004aa0 <UART_SetConfig+0xc10>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2b0b      	cmp	r3, #11
 8004a94:	d102      	bne.n	8004a9c <UART_SetConfig+0xc0c>
 8004a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a9a:	e016      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e014      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	e012      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004aa4:	2340      	movs	r3, #64	; 0x40
 8004aa6:	e010      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	e00e      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004aac:	2310      	movs	r3, #16
 8004aae:	e00c      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004ab0:	230c      	movs	r3, #12
 8004ab2:	e00a      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004ab4:	230a      	movs	r3, #10
 8004ab6:	e008      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004ab8:	2308      	movs	r3, #8
 8004aba:	e006      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004abc:	2306      	movs	r3, #6
 8004abe:	e004      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	e002      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e000      	b.n	8004aca <UART_SetConfig+0xc3a>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	005a      	lsls	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	61fb      	str	r3, [r7, #28]
        break;
 8004ae6:	e16f      	b.n	8004dc8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae8:	f7fe f824 	bl	8002b34 <HAL_RCC_GetPCLK2Freq>
 8004aec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d044      	beq.n	8004b80 <UART_SetConfig+0xcf0>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d03e      	beq.n	8004b7c <UART_SetConfig+0xcec>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d038      	beq.n	8004b78 <UART_SetConfig+0xce8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d032      	beq.n	8004b74 <UART_SetConfig+0xce4>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d02c      	beq.n	8004b70 <UART_SetConfig+0xce0>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d026      	beq.n	8004b6c <UART_SetConfig+0xcdc>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d020      	beq.n	8004b68 <UART_SetConfig+0xcd8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	2b07      	cmp	r3, #7
 8004b2c:	d01a      	beq.n	8004b64 <UART_SetConfig+0xcd4>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d014      	beq.n	8004b60 <UART_SetConfig+0xcd0>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2b09      	cmp	r3, #9
 8004b3c:	d00e      	beq.n	8004b5c <UART_SetConfig+0xccc>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	2b0a      	cmp	r3, #10
 8004b44:	d008      	beq.n	8004b58 <UART_SetConfig+0xcc8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	2b0b      	cmp	r3, #11
 8004b4c:	d102      	bne.n	8004b54 <UART_SetConfig+0xcc4>
 8004b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b52:	e016      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e014      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	e012      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b5c:	2340      	movs	r3, #64	; 0x40
 8004b5e:	e010      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b60:	2320      	movs	r3, #32
 8004b62:	e00e      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b64:	2310      	movs	r3, #16
 8004b66:	e00c      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	e00a      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b6c:	230a      	movs	r3, #10
 8004b6e:	e008      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b70:	2308      	movs	r3, #8
 8004b72:	e006      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b74:	2306      	movs	r3, #6
 8004b76:	e004      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	e002      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e000      	b.n	8004b82 <UART_SetConfig+0xcf2>
 8004b80:	2301      	movs	r3, #1
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	005a      	lsls	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	441a      	add	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	61fb      	str	r3, [r7, #28]
        break;
 8004b9e:	e113      	b.n	8004dc8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d043      	beq.n	8004c30 <UART_SetConfig+0xda0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d03d      	beq.n	8004c2c <UART_SetConfig+0xd9c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d037      	beq.n	8004c28 <UART_SetConfig+0xd98>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d031      	beq.n	8004c24 <UART_SetConfig+0xd94>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d02b      	beq.n	8004c20 <UART_SetConfig+0xd90>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	2b05      	cmp	r3, #5
 8004bce:	d025      	beq.n	8004c1c <UART_SetConfig+0xd8c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	2b06      	cmp	r3, #6
 8004bd6:	d01f      	beq.n	8004c18 <UART_SetConfig+0xd88>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2b07      	cmp	r3, #7
 8004bde:	d019      	beq.n	8004c14 <UART_SetConfig+0xd84>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d013      	beq.n	8004c10 <UART_SetConfig+0xd80>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	2b09      	cmp	r3, #9
 8004bee:	d00d      	beq.n	8004c0c <UART_SetConfig+0xd7c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	2b0a      	cmp	r3, #10
 8004bf6:	d007      	beq.n	8004c08 <UART_SetConfig+0xd78>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2b0b      	cmp	r3, #11
 8004bfe:	d101      	bne.n	8004c04 <UART_SetConfig+0xd74>
 8004c00:	4b8d      	ldr	r3, [pc, #564]	; (8004e38 <UART_SetConfig+0xfa8>)
 8004c02:	e016      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c04:	4b8d      	ldr	r3, [pc, #564]	; (8004e3c <UART_SetConfig+0xfac>)
 8004c06:	e014      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c08:	4b8d      	ldr	r3, [pc, #564]	; (8004e40 <UART_SetConfig+0xfb0>)
 8004c0a:	e012      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c0c:	4b8d      	ldr	r3, [pc, #564]	; (8004e44 <UART_SetConfig+0xfb4>)
 8004c0e:	e010      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c10:	4b8d      	ldr	r3, [pc, #564]	; (8004e48 <UART_SetConfig+0xfb8>)
 8004c12:	e00e      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c14:	4b8d      	ldr	r3, [pc, #564]	; (8004e4c <UART_SetConfig+0xfbc>)
 8004c16:	e00c      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c18:	4b8d      	ldr	r3, [pc, #564]	; (8004e50 <UART_SetConfig+0xfc0>)
 8004c1a:	e00a      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c1c:	4b8d      	ldr	r3, [pc, #564]	; (8004e54 <UART_SetConfig+0xfc4>)
 8004c1e:	e008      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c20:	4b8d      	ldr	r3, [pc, #564]	; (8004e58 <UART_SetConfig+0xfc8>)
 8004c22:	e006      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c24:	4b8d      	ldr	r3, [pc, #564]	; (8004e5c <UART_SetConfig+0xfcc>)
 8004c26:	e004      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c28:	4b8d      	ldr	r3, [pc, #564]	; (8004e60 <UART_SetConfig+0xfd0>)
 8004c2a:	e002      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c2c:	4b8d      	ldr	r3, [pc, #564]	; (8004e64 <UART_SetConfig+0xfd4>)
 8004c2e:	e000      	b.n	8004c32 <UART_SetConfig+0xda2>
 8004c30:	4b82      	ldr	r3, [pc, #520]	; (8004e3c <UART_SetConfig+0xfac>)
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6852      	ldr	r2, [r2, #4]
 8004c36:	0852      	lsrs	r2, r2, #1
 8004c38:	441a      	add	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	61fb      	str	r3, [r7, #28]
        break;
 8004c46:	e0bf      	b.n	8004dc8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c48:	f7fd fef0 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 8004c4c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d044      	beq.n	8004ce0 <UART_SetConfig+0xe50>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d03e      	beq.n	8004cdc <UART_SetConfig+0xe4c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d038      	beq.n	8004cd8 <UART_SetConfig+0xe48>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d032      	beq.n	8004cd4 <UART_SetConfig+0xe44>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d02c      	beq.n	8004cd0 <UART_SetConfig+0xe40>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	2b05      	cmp	r3, #5
 8004c7c:	d026      	beq.n	8004ccc <UART_SetConfig+0xe3c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d020      	beq.n	8004cc8 <UART_SetConfig+0xe38>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	2b07      	cmp	r3, #7
 8004c8c:	d01a      	beq.n	8004cc4 <UART_SetConfig+0xe34>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d014      	beq.n	8004cc0 <UART_SetConfig+0xe30>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	2b09      	cmp	r3, #9
 8004c9c:	d00e      	beq.n	8004cbc <UART_SetConfig+0xe2c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2b0a      	cmp	r3, #10
 8004ca4:	d008      	beq.n	8004cb8 <UART_SetConfig+0xe28>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	2b0b      	cmp	r3, #11
 8004cac:	d102      	bne.n	8004cb4 <UART_SetConfig+0xe24>
 8004cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cb2:	e016      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e014      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004cb8:	2380      	movs	r3, #128	; 0x80
 8004cba:	e012      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004cbc:	2340      	movs	r3, #64	; 0x40
 8004cbe:	e010      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004cc0:	2320      	movs	r3, #32
 8004cc2:	e00e      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	e00c      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004cc8:	230c      	movs	r3, #12
 8004cca:	e00a      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004ccc:	230a      	movs	r3, #10
 8004cce:	e008      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	e006      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004cd4:	2306      	movs	r3, #6
 8004cd6:	e004      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	e002      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e000      	b.n	8004ce2 <UART_SetConfig+0xe52>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	005a      	lsls	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	085b      	lsrs	r3, r3, #1
 8004cf0:	441a      	add	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	61fb      	str	r3, [r7, #28]
        break;
 8004cfe:	e063      	b.n	8004dc8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d04f      	beq.n	8004da8 <UART_SetConfig+0xf18>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d048      	beq.n	8004da2 <UART_SetConfig+0xf12>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d041      	beq.n	8004d9c <UART_SetConfig+0xf0c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d03a      	beq.n	8004d96 <UART_SetConfig+0xf06>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d033      	beq.n	8004d90 <UART_SetConfig+0xf00>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2b05      	cmp	r3, #5
 8004d2e:	d02c      	beq.n	8004d8a <UART_SetConfig+0xefa>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b06      	cmp	r3, #6
 8004d36:	d025      	beq.n	8004d84 <UART_SetConfig+0xef4>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	2b07      	cmp	r3, #7
 8004d3e:	d01e      	beq.n	8004d7e <UART_SetConfig+0xeee>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d017      	beq.n	8004d78 <UART_SetConfig+0xee8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2b09      	cmp	r3, #9
 8004d4e:	d010      	beq.n	8004d72 <UART_SetConfig+0xee2>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b0a      	cmp	r3, #10
 8004d56:	d009      	beq.n	8004d6c <UART_SetConfig+0xedc>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2b0b      	cmp	r3, #11
 8004d5e:	d102      	bne.n	8004d66 <UART_SetConfig+0xed6>
 8004d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d64:	e022      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d6a:	e01f      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d70:	e01c      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d76:	e019      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d7c:	e016      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d82:	e013      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004d84:	f241 5354 	movw	r3, #5460	; 0x1554
 8004d88:	e010      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004d8a:	f641 1398 	movw	r3, #6552	; 0x1998
 8004d8e:	e00d      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d94:	e00a      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004d96:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004d9a:	e007      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004d9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004da0:	e004      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da6:	e001      	b.n	8004dac <UART_SetConfig+0xf1c>
 8004da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6852      	ldr	r2, [r2, #4]
 8004db0:	0852      	lsrs	r2, r2, #1
 8004db2:	441a      	add	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	61fb      	str	r3, [r7, #28]
        break;
 8004dc0:	e002      	b.n	8004dc8 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	76fb      	strb	r3, [r7, #27]
        break;
 8004dc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b0f      	cmp	r3, #15
 8004dcc:	d916      	bls.n	8004dfc <UART_SetConfig+0xf6c>
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d212      	bcs.n	8004dfc <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f023 030f 	bic.w	r3, r3, #15
 8004dde:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	89fb      	ldrh	r3, [r7, #14]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	89fa      	ldrh	r2, [r7, #14]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	e20c      	b.n	8005216 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	76fb      	strb	r3, [r7, #27]
 8004e00:	e209      	b.n	8005216 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8004e02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	f200 81f4 	bhi.w	80051f4 <UART_SetConfig+0x1364>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0xf84>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e69 	.word	0x08004e69
 8004e18:	08004f1f 	.word	0x08004f1f
 8004e1c:	08004fd5 	.word	0x08004fd5
 8004e20:	080051f5 	.word	0x080051f5
 8004e24:	0800507f 	.word	0x0800507f
 8004e28:	080051f5 	.word	0x080051f5
 8004e2c:	080051f5 	.word	0x080051f5
 8004e30:	080051f5 	.word	0x080051f5
 8004e34:	08005135 	.word	0x08005135
 8004e38:	0001e848 	.word	0x0001e848
 8004e3c:	01e84800 	.word	0x01e84800
 8004e40:	0003d090 	.word	0x0003d090
 8004e44:	0007a120 	.word	0x0007a120
 8004e48:	000f4240 	.word	0x000f4240
 8004e4c:	001e8480 	.word	0x001e8480
 8004e50:	0028b0aa 	.word	0x0028b0aa
 8004e54:	0030d400 	.word	0x0030d400
 8004e58:	003d0900 	.word	0x003d0900
 8004e5c:	00516154 	.word	0x00516154
 8004e60:	007a1200 	.word	0x007a1200
 8004e64:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e68:	f7fd fe4e 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8004e6c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d044      	beq.n	8004f00 <UART_SetConfig+0x1070>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d03e      	beq.n	8004efc <UART_SetConfig+0x106c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d038      	beq.n	8004ef8 <UART_SetConfig+0x1068>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d032      	beq.n	8004ef4 <UART_SetConfig+0x1064>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d02c      	beq.n	8004ef0 <UART_SetConfig+0x1060>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	2b05      	cmp	r3, #5
 8004e9c:	d026      	beq.n	8004eec <UART_SetConfig+0x105c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d020      	beq.n	8004ee8 <UART_SetConfig+0x1058>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b07      	cmp	r3, #7
 8004eac:	d01a      	beq.n	8004ee4 <UART_SetConfig+0x1054>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d014      	beq.n	8004ee0 <UART_SetConfig+0x1050>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	2b09      	cmp	r3, #9
 8004ebc:	d00e      	beq.n	8004edc <UART_SetConfig+0x104c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	2b0a      	cmp	r3, #10
 8004ec4:	d008      	beq.n	8004ed8 <UART_SetConfig+0x1048>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	2b0b      	cmp	r3, #11
 8004ecc:	d102      	bne.n	8004ed4 <UART_SetConfig+0x1044>
 8004ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ed2:	e016      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e014      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	e012      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004edc:	2340      	movs	r3, #64	; 0x40
 8004ede:	e010      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004ee0:	2320      	movs	r3, #32
 8004ee2:	e00e      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	e00c      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	e00a      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004eec:	230a      	movs	r3, #10
 8004eee:	e008      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	e006      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004ef4:	2306      	movs	r3, #6
 8004ef6:	e004      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	e002      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e000      	b.n	8004f02 <UART_SetConfig+0x1072>
 8004f00:	2301      	movs	r3, #1
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	441a      	add	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	61fb      	str	r3, [r7, #28]
        break;
 8004f1c:	e16d      	b.n	80051fa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f1e:	f7fd fe09 	bl	8002b34 <HAL_RCC_GetPCLK2Freq>
 8004f22:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d044      	beq.n	8004fb6 <UART_SetConfig+0x1126>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d03e      	beq.n	8004fb2 <UART_SetConfig+0x1122>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d038      	beq.n	8004fae <UART_SetConfig+0x111e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d032      	beq.n	8004faa <UART_SetConfig+0x111a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d02c      	beq.n	8004fa6 <UART_SetConfig+0x1116>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d026      	beq.n	8004fa2 <UART_SetConfig+0x1112>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2b06      	cmp	r3, #6
 8004f5a:	d020      	beq.n	8004f9e <UART_SetConfig+0x110e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	2b07      	cmp	r3, #7
 8004f62:	d01a      	beq.n	8004f9a <UART_SetConfig+0x110a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d014      	beq.n	8004f96 <UART_SetConfig+0x1106>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b09      	cmp	r3, #9
 8004f72:	d00e      	beq.n	8004f92 <UART_SetConfig+0x1102>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b0a      	cmp	r3, #10
 8004f7a:	d008      	beq.n	8004f8e <UART_SetConfig+0x10fe>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b0b      	cmp	r3, #11
 8004f82:	d102      	bne.n	8004f8a <UART_SetConfig+0x10fa>
 8004f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f88:	e016      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e014      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	e012      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004f92:	2340      	movs	r3, #64	; 0x40
 8004f94:	e010      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004f96:	2320      	movs	r3, #32
 8004f98:	e00e      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	e00c      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	e00a      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004fa2:	230a      	movs	r3, #10
 8004fa4:	e008      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	e006      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004faa:	2306      	movs	r3, #6
 8004fac:	e004      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004fae:	2304      	movs	r3, #4
 8004fb0:	e002      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e000      	b.n	8004fb8 <UART_SetConfig+0x1128>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	441a      	add	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	61fb      	str	r3, [r7, #28]
        break;
 8004fd2:	e112      	b.n	80051fa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d044      	beq.n	8005066 <UART_SetConfig+0x11d6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d03e      	beq.n	8005062 <UART_SetConfig+0x11d2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d038      	beq.n	800505e <UART_SetConfig+0x11ce>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d032      	beq.n	800505a <UART_SetConfig+0x11ca>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d02c      	beq.n	8005056 <UART_SetConfig+0x11c6>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2b05      	cmp	r3, #5
 8005002:	d026      	beq.n	8005052 <UART_SetConfig+0x11c2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	2b06      	cmp	r3, #6
 800500a:	d020      	beq.n	800504e <UART_SetConfig+0x11be>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2b07      	cmp	r3, #7
 8005012:	d01a      	beq.n	800504a <UART_SetConfig+0x11ba>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2b08      	cmp	r3, #8
 800501a:	d014      	beq.n	8005046 <UART_SetConfig+0x11b6>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2b09      	cmp	r3, #9
 8005022:	d00e      	beq.n	8005042 <UART_SetConfig+0x11b2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b0a      	cmp	r3, #10
 800502a:	d008      	beq.n	800503e <UART_SetConfig+0x11ae>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b0b      	cmp	r3, #11
 8005032:	d102      	bne.n	800503a <UART_SetConfig+0x11aa>
 8005034:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005038:	e016      	b.n	8005068 <UART_SetConfig+0x11d8>
 800503a:	4b81      	ldr	r3, [pc, #516]	; (8005240 <UART_SetConfig+0x13b0>)
 800503c:	e014      	b.n	8005068 <UART_SetConfig+0x11d8>
 800503e:	4b81      	ldr	r3, [pc, #516]	; (8005244 <UART_SetConfig+0x13b4>)
 8005040:	e012      	b.n	8005068 <UART_SetConfig+0x11d8>
 8005042:	4b81      	ldr	r3, [pc, #516]	; (8005248 <UART_SetConfig+0x13b8>)
 8005044:	e010      	b.n	8005068 <UART_SetConfig+0x11d8>
 8005046:	4b81      	ldr	r3, [pc, #516]	; (800524c <UART_SetConfig+0x13bc>)
 8005048:	e00e      	b.n	8005068 <UART_SetConfig+0x11d8>
 800504a:	4b81      	ldr	r3, [pc, #516]	; (8005250 <UART_SetConfig+0x13c0>)
 800504c:	e00c      	b.n	8005068 <UART_SetConfig+0x11d8>
 800504e:	4b81      	ldr	r3, [pc, #516]	; (8005254 <UART_SetConfig+0x13c4>)
 8005050:	e00a      	b.n	8005068 <UART_SetConfig+0x11d8>
 8005052:	4b81      	ldr	r3, [pc, #516]	; (8005258 <UART_SetConfig+0x13c8>)
 8005054:	e008      	b.n	8005068 <UART_SetConfig+0x11d8>
 8005056:	4b81      	ldr	r3, [pc, #516]	; (800525c <UART_SetConfig+0x13cc>)
 8005058:	e006      	b.n	8005068 <UART_SetConfig+0x11d8>
 800505a:	4b81      	ldr	r3, [pc, #516]	; (8005260 <UART_SetConfig+0x13d0>)
 800505c:	e004      	b.n	8005068 <UART_SetConfig+0x11d8>
 800505e:	4b81      	ldr	r3, [pc, #516]	; (8005264 <UART_SetConfig+0x13d4>)
 8005060:	e002      	b.n	8005068 <UART_SetConfig+0x11d8>
 8005062:	4b81      	ldr	r3, [pc, #516]	; (8005268 <UART_SetConfig+0x13d8>)
 8005064:	e000      	b.n	8005068 <UART_SetConfig+0x11d8>
 8005066:	4b76      	ldr	r3, [pc, #472]	; (8005240 <UART_SetConfig+0x13b0>)
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6852      	ldr	r2, [r2, #4]
 800506c:	0852      	lsrs	r2, r2, #1
 800506e:	441a      	add	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	b29b      	uxth	r3, r3
 800507a:	61fb      	str	r3, [r7, #28]
        break;
 800507c:	e0bd      	b.n	80051fa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507e:	f7fd fcd5 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 8005082:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b00      	cmp	r3, #0
 800508a:	d044      	beq.n	8005116 <UART_SetConfig+0x1286>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2b01      	cmp	r3, #1
 8005092:	d03e      	beq.n	8005112 <UART_SetConfig+0x1282>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	2b02      	cmp	r3, #2
 800509a:	d038      	beq.n	800510e <UART_SetConfig+0x127e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d032      	beq.n	800510a <UART_SetConfig+0x127a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d02c      	beq.n	8005106 <UART_SetConfig+0x1276>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	2b05      	cmp	r3, #5
 80050b2:	d026      	beq.n	8005102 <UART_SetConfig+0x1272>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	2b06      	cmp	r3, #6
 80050ba:	d020      	beq.n	80050fe <UART_SetConfig+0x126e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2b07      	cmp	r3, #7
 80050c2:	d01a      	beq.n	80050fa <UART_SetConfig+0x126a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d014      	beq.n	80050f6 <UART_SetConfig+0x1266>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	2b09      	cmp	r3, #9
 80050d2:	d00e      	beq.n	80050f2 <UART_SetConfig+0x1262>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	2b0a      	cmp	r3, #10
 80050da:	d008      	beq.n	80050ee <UART_SetConfig+0x125e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	2b0b      	cmp	r3, #11
 80050e2:	d102      	bne.n	80050ea <UART_SetConfig+0x125a>
 80050e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050e8:	e016      	b.n	8005118 <UART_SetConfig+0x1288>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e014      	b.n	8005118 <UART_SetConfig+0x1288>
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	e012      	b.n	8005118 <UART_SetConfig+0x1288>
 80050f2:	2340      	movs	r3, #64	; 0x40
 80050f4:	e010      	b.n	8005118 <UART_SetConfig+0x1288>
 80050f6:	2320      	movs	r3, #32
 80050f8:	e00e      	b.n	8005118 <UART_SetConfig+0x1288>
 80050fa:	2310      	movs	r3, #16
 80050fc:	e00c      	b.n	8005118 <UART_SetConfig+0x1288>
 80050fe:	230c      	movs	r3, #12
 8005100:	e00a      	b.n	8005118 <UART_SetConfig+0x1288>
 8005102:	230a      	movs	r3, #10
 8005104:	e008      	b.n	8005118 <UART_SetConfig+0x1288>
 8005106:	2308      	movs	r3, #8
 8005108:	e006      	b.n	8005118 <UART_SetConfig+0x1288>
 800510a:	2306      	movs	r3, #6
 800510c:	e004      	b.n	8005118 <UART_SetConfig+0x1288>
 800510e:	2304      	movs	r3, #4
 8005110:	e002      	b.n	8005118 <UART_SetConfig+0x1288>
 8005112:	2302      	movs	r3, #2
 8005114:	e000      	b.n	8005118 <UART_SetConfig+0x1288>
 8005116:	2301      	movs	r3, #1
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	fbb2 f2f3 	udiv	r2, r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	441a      	add	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	fbb2 f3f3 	udiv	r3, r2, r3
 800512e:	b29b      	uxth	r3, r3
 8005130:	61fb      	str	r3, [r7, #28]
        break;
 8005132:	e062      	b.n	80051fa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2b00      	cmp	r3, #0
 800513a:	d04e      	beq.n	80051da <UART_SetConfig+0x134a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b01      	cmp	r3, #1
 8005142:	d047      	beq.n	80051d4 <UART_SetConfig+0x1344>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b02      	cmp	r3, #2
 800514a:	d040      	beq.n	80051ce <UART_SetConfig+0x133e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	2b03      	cmp	r3, #3
 8005152:	d039      	beq.n	80051c8 <UART_SetConfig+0x1338>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	2b04      	cmp	r3, #4
 800515a:	d032      	beq.n	80051c2 <UART_SetConfig+0x1332>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	2b05      	cmp	r3, #5
 8005162:	d02b      	beq.n	80051bc <UART_SetConfig+0x132c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	2b06      	cmp	r3, #6
 800516a:	d024      	beq.n	80051b6 <UART_SetConfig+0x1326>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	2b07      	cmp	r3, #7
 8005172:	d01d      	beq.n	80051b0 <UART_SetConfig+0x1320>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	2b08      	cmp	r3, #8
 800517a:	d016      	beq.n	80051aa <UART_SetConfig+0x131a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b09      	cmp	r3, #9
 8005182:	d00f      	beq.n	80051a4 <UART_SetConfig+0x1314>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b0a      	cmp	r3, #10
 800518a:	d008      	beq.n	800519e <UART_SetConfig+0x130e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b0b      	cmp	r3, #11
 8005192:	d101      	bne.n	8005198 <UART_SetConfig+0x1308>
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	e022      	b.n	80051de <UART_SetConfig+0x134e>
 8005198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519c:	e01f      	b.n	80051de <UART_SetConfig+0x134e>
 800519e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051a2:	e01c      	b.n	80051de <UART_SetConfig+0x134e>
 80051a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a8:	e019      	b.n	80051de <UART_SetConfig+0x134e>
 80051aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ae:	e016      	b.n	80051de <UART_SetConfig+0x134e>
 80051b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051b4:	e013      	b.n	80051de <UART_SetConfig+0x134e>
 80051b6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80051ba:	e010      	b.n	80051de <UART_SetConfig+0x134e>
 80051bc:	f640 43cc 	movw	r3, #3276	; 0xccc
 80051c0:	e00d      	b.n	80051de <UART_SetConfig+0x134e>
 80051c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051c6:	e00a      	b.n	80051de <UART_SetConfig+0x134e>
 80051c8:	f241 5355 	movw	r3, #5461	; 0x1555
 80051cc:	e007      	b.n	80051de <UART_SetConfig+0x134e>
 80051ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051d2:	e004      	b.n	80051de <UART_SetConfig+0x134e>
 80051d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051d8:	e001      	b.n	80051de <UART_SetConfig+0x134e>
 80051da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6852      	ldr	r2, [r2, #4]
 80051e2:	0852      	lsrs	r2, r2, #1
 80051e4:	441a      	add	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	61fb      	str	r3, [r7, #28]
        break;
 80051f2:	e002      	b.n	80051fa <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	76fb      	strb	r3, [r7, #27]
        break;
 80051f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	2b0f      	cmp	r3, #15
 80051fe:	d908      	bls.n	8005212 <UART_SetConfig+0x1382>
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005206:	d204      	bcs.n	8005212 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	60da      	str	r2, [r3, #12]
 8005210:	e001      	b.n	8005216 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005232:	7efb      	ldrb	r3, [r7, #27]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3728      	adds	r7, #40	; 0x28
 8005238:	46bd      	mov	sp, r7
 800523a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800523e:	bf00      	nop
 8005240:	00f42400 	.word	0x00f42400
 8005244:	0001e848 	.word	0x0001e848
 8005248:	0003d090 	.word	0x0003d090
 800524c:	0007a120 	.word	0x0007a120
 8005250:	000f4240 	.word	0x000f4240
 8005254:	00145855 	.word	0x00145855
 8005258:	00186a00 	.word	0x00186a00
 800525c:	001e8480 	.word	0x001e8480
 8005260:	0028b0aa 	.word	0x0028b0aa
 8005264:	003d0900 	.word	0x003d0900
 8005268:	007a1200 	.word	0x007a1200

0800526c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01a      	beq.n	8005382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800536a:	d10a      	bne.n	8005382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	605a      	str	r2, [r3, #4]
  }
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80053c0:	f7fb fe12 	bl	8000fe8 <HAL_GetTick>
 80053c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d10e      	bne.n	80053f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f82c 	bl	8005440 <UART_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e022      	b.n	8005438 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d10e      	bne.n	800541e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f816 	bl	8005440 <UART_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e00c      	b.n	8005438 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005450:	e02c      	b.n	80054ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d028      	beq.n	80054ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545a:	f7fb fdc5 	bl	8000fe8 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	429a      	cmp	r2, r3
 8005468:	d302      	bcc.n	8005470 <UART_WaitOnFlagUntilTimeout+0x30>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d11d      	bne.n	80054ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800547e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e00f      	b.n	80054cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4013      	ands	r3, r2
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d0c3      	beq.n	8005452 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_UARTEx_DisableFifoMode+0x16>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e027      	b.n	800553a <HAL_UARTEx_DisableFifoMode+0x66>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2224      	movs	r2, #36	; 0x24
 80054f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005518:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800555a:	2302      	movs	r3, #2
 800555c:	e02d      	b.n	80055ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2224      	movs	r2, #36	; 0x24
 800556a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f850 	bl	8005640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e02d      	b.n	8005636 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2224      	movs	r2, #36	; 0x24
 80055e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0201 	bic.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f812 	bl	8005640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	; 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005648:	4a2f      	ldr	r2, [pc, #188]	; (8005708 <UARTEx_SetNbDataToProcess+0xc8>)
 800564a:	f107 0314 	add.w	r3, r7, #20
 800564e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005652:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005656:	4a2d      	ldr	r2, [pc, #180]	; (800570c <UARTEx_SetNbDataToProcess+0xcc>)
 8005658:	f107 030c 	add.w	r3, r7, #12
 800565c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005660:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005668:	2b00      	cmp	r3, #0
 800566a:	d108      	bne.n	800567e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800567c:	e03d      	b.n	80056fa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800567e:	2308      	movs	r3, #8
 8005680:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005682:	2308      	movs	r3, #8
 8005684:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	0e5b      	lsrs	r3, r3, #25
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	0f5b      	lsrs	r3, r3, #29
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80056a6:	7fbb      	ldrb	r3, [r7, #30]
 80056a8:	7f3a      	ldrb	r2, [r7, #28]
 80056aa:	f107 0120 	add.w	r1, r7, #32
 80056ae:	440a      	add	r2, r1
 80056b0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	7f3a      	ldrb	r2, [r7, #28]
 80056ba:	f107 0120 	add.w	r1, r7, #32
 80056be:	440a      	add	r2, r1
 80056c0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80056c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80056d0:	7ffb      	ldrb	r3, [r7, #31]
 80056d2:	7f7a      	ldrb	r2, [r7, #29]
 80056d4:	f107 0120 	add.w	r1, r7, #32
 80056d8:	440a      	add	r2, r1
 80056da:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	7f7a      	ldrb	r2, [r7, #29]
 80056e4:	f107 0120 	add.w	r1, r7, #32
 80056e8:	440a      	add	r2, r1
 80056ea:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80056ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056fa:	bf00      	nop
 80056fc:	3724      	adds	r7, #36	; 0x24
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	08009da4 	.word	0x08009da4
 800570c:	08009dac 	.word	0x08009dac

08005710 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
 
if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8005714:	4907      	ldr	r1, [pc, #28]	; (8005734 <MX_FATFS_Init+0x24>)
 8005716:	4808      	ldr	r0, [pc, #32]	; (8005738 <MX_FATFS_Init+0x28>)
 8005718:	f004 faf6 	bl	8009d08 <FATFS_LinkDriver>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8005722:	f04f 33ff 	mov.w	r3, #4294967295
 8005726:	e003      	b.n	8005730 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8005728:	4b04      	ldr	r3, [pc, #16]	; (800573c <MX_FATFS_Init+0x2c>)
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800572e:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000340 	.word	0x20000340
 8005738:	20000010 	.word	0x20000010
 800573c:	20000050 	.word	0x20000050

08005740 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005744:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8005746:	4618      	mov	r0, r3
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <MY_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t MY_SD_Init(uint32_t Instance)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <MY_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005762:	f06f 0301 	mvn.w	r3, #1
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	e010      	b.n	800578c <MY_SD_Init+0x3c>
  } /* Configure IO functionalities for SD pin */
  else if(SD_IO_Init() != BSP_ERROR_NONE)
 800576a:	f000 fa9b 	bl	8005ca4 <SD_IO_Init>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <MY_SD_Init+0x2c>
  {
    ret = BSP_ERROR_NO_INIT;
 8005774:	f04f 33ff 	mov.w	r3, #4294967295
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	e007      	b.n	800578c <MY_SD_Init+0x3c>
  }
  else
  {
    /* SD initialized and set to SPI mode properly */
    if(SD_GoIdleState() != BSP_ERROR_NONE)
 800577c:	f000 ff74 	bl	8006668 <SD_GoIdleState>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <MY_SD_Init+0x3c>
    {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005786:	f06f 0305 	mvn.w	r3, #5
 800578a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800578c:	68fb      	ldr	r3, [r7, #12]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <MY_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t MY_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <MY_SD_ReadBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80057b4:	f06f 0301 	mvn.w	r3, #1
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	e0b2      	b.n	8005922 <MY_SD_ReadBlocks+0x18a>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80057bc:	2300      	movs	r3, #0
 80057be:	22ff      	movs	r2, #255	; 0xff
 80057c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057c4:	2010      	movs	r0, #16
 80057c6:	f000 fdd1 	bl	800636c <SD_SendCmd>
 80057ca:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 80057cc:	2001      	movs	r0, #1
 80057ce:	f000 fab5 	bl	8005d3c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80057d2:	f107 0313 	add.w	r3, r7, #19
 80057d6:	2101      	movs	r1, #1
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 f915 	bl	8006a08 <BSP_SPI2_Send>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <MY_SD_ReadBlocks+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80057e4:	f06f 0303 	mvn.w	r3, #3
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	e09a      	b.n	8005922 <MY_SD_ReadBlocks+0x18a>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00e      	beq.n	8005812 <MY_SD_ReadBlocks+0x7a>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 80057f4:	2001      	movs	r0, #1
 80057f6:	f000 faa1 	bl	8005d3c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80057fa:	f107 0313 	add.w	r3, r7, #19
 80057fe:	2101      	movs	r1, #1
 8005800:	4618      	mov	r0, r3
 8005802:	f001 f901 	bl	8006a08 <BSP_SPI2_Send>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <MY_SD_ReadBlocks+0x7a>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800580c:	f06f 0303 	mvn.w	r3, #3
 8005810:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f040 8084 	bne.w	8005922 <MY_SD_ReadBlocks+0x18a>
        /* Data transfer */
        do
        {
          /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
          /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U: MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	441a      	add	r2, r3
 8005820:	4b42      	ldr	r3, [pc, #264]	; (800592c <MY_SD_ReadBlocks+0x194>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <MY_SD_ReadBlocks+0x94>
 8005828:	2301      	movs	r3, #1
 800582a:	e001      	b.n	8005830 <MY_SD_ReadBlocks+0x98>
 800582c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005830:	fb02 f103 	mul.w	r1, r2, r3
 8005834:	2300      	movs	r3, #0
 8005836:	22ff      	movs	r2, #255	; 0xff
 8005838:	2011      	movs	r0, #17
 800583a:	f000 fd97 	bl	800636c <SD_SendCmd>
 800583e:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00f      	beq.n	8005868 <MY_SD_ReadBlocks+0xd0>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8005848:	2001      	movs	r0, #1
 800584a:	f000 fa77 	bl	8005d3c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800584e:	f107 0313 	add.w	r3, r7, #19
 8005852:	2101      	movs	r1, #1
 8005854:	4618      	mov	r0, r3
 8005856:	f001 f8d7 	bl	8006a08 <BSP_SPI2_Send>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <MY_SD_ReadBlocks+0xd0>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8005860:	f06f 0303 	mvn.w	r3, #3
 8005864:	61fb      	str	r3, [r7, #28]
              break;
 8005866:	e05c      	b.n	8005922 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* Now look for the data token to signify the start of the data */
          if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8005868:	20fe      	movs	r0, #254	; 0xfe
 800586a:	f001 f83b 	bl	80068e4 <SD_WaitData>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d12f      	bne.n	80058d4 <MY_SD_ReadBlocks+0x13c>
          {
            /* Read the SD block data : read NumByteToRead data */
            if(BUS_SPIx_Recv((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	4413      	add	r3, r2
 800587a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800587e:	4618      	mov	r0, r3
 8005880:	f001 f8de 	bl	8006a40 <BSP_SPI2_Recv>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <MY_SD_ReadBlocks+0xfa>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 800588a:	f06f 0303 	mvn.w	r3, #3
 800588e:	61fb      	str	r3, [r7, #28]
              break;
 8005890:	e047      	b.n	8005922 <MY_SD_ReadBlocks+0x18a>
            }

            /* Set next read address*/
            offset += MY_SD_BLOCK_SIZE;
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005898:	61bb      	str	r3, [r7, #24]
            BlocksNbr--;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	3b01      	subs	r3, #1
 800589e:	603b      	str	r3, [r7, #0]

            /* get CRC bytes (not really needed by us, but required by SD) */
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80058a0:	f107 0313 	add.w	r3, r7, #19
 80058a4:	2101      	movs	r1, #1
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 f8ae 	bl	8006a08 <BSP_SPI2_Send>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <MY_SD_ReadBlocks+0x122>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80058b2:	f06f 0303 	mvn.w	r3, #3
 80058b6:	61fb      	str	r3, [r7, #28]
              break;
 80058b8:	e033      	b.n	8005922 <MY_SD_ReadBlocks+0x18a>
            }
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80058ba:	f107 0313 	add.w	r3, r7, #19
 80058be:	2101      	movs	r1, #1
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 f8a1 	bl	8006a08 <BSP_SPI2_Send>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d013      	beq.n	80058f4 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80058cc:	f06f 0303 	mvn.w	r3, #3
 80058d0:	61fb      	str	r3, [r7, #28]
              break;
 80058d2:	e026      	b.n	8005922 <MY_SD_ReadBlocks+0x18a>
            }
          }
          else
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 80058d4:	2001      	movs	r0, #1
 80058d6:	f000 fa31 	bl	8005d3c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80058da:	f107 0313 	add.w	r3, r7, #19
 80058de:	2101      	movs	r1, #1
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 f891 	bl	8006a08 <BSP_SPI2_Send>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80058ec:	f06f 0303 	mvn.w	r3, #3
 80058f0:	61fb      	str	r3, [r7, #28]
              break;
 80058f2:	e016      	b.n	8005922 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* End the command data read cycle */
          SD_IO_CSState(1);
 80058f4:	2001      	movs	r0, #1
 80058f6:	f000 fa21 	bl	8005d3c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80058fa:	f107 0313 	add.w	r3, r7, #19
 80058fe:	2101      	movs	r1, #1
 8005900:	4618      	mov	r0, r3
 8005902:	f001 f881 	bl	8006a08 <BSP_SPI2_Send>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <MY_SD_ReadBlocks+0x17c>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 800590c:	f06f 0303 	mvn.w	r3, #3
 8005910:	61fb      	str	r3, [r7, #28]
            break;
 8005912:	e006      	b.n	8005922 <MY_SD_ReadBlocks+0x18a>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <MY_SD_ReadBlocks+0x18a>
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f43f af7c 	beq.w	800581a <MY_SD_ReadBlocks+0x82>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8005922:	69fb      	ldr	r3, [r7, #28]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3720      	adds	r7, #32
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000054 	.word	0x20000054

08005930 <MY_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t MY_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 8005942:	2300      	movs	r3, #0
 8005944:	61bb      	str	r3, [r7, #24]
  uint8_t tmp, data_response;

  if(Instance >= SD_INSTANCES_NBR)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <MY_SD_WriteBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800594c:	f06f 0301 	mvn.w	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	e0e8      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8005954:	2300      	movs	r3, #0
 8005956:	22ff      	movs	r2, #255	; 0xff
 8005958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800595c:	2010      	movs	r0, #16
 800595e:	f000 fd05 	bl	800636c <SD_SendCmd>
 8005962:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 8005964:	2001      	movs	r0, #1
 8005966:	f000 f9e9 	bl	8005d3c <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 800596a:	23ff      	movs	r3, #255	; 0xff
 800596c:	74fb      	strb	r3, [r7, #19]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800596e:	f107 0313 	add.w	r3, r7, #19
 8005972:	2101      	movs	r1, #1
 8005974:	4618      	mov	r0, r3
 8005976:	f001 f847 	bl	8006a08 <BSP_SPI2_Send>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <MY_SD_WriteBlocks+0x58>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005980:	f06f 0303 	mvn.w	r3, #3
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	e0ce      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00e      	beq.n	80059ae <MY_SD_WriteBlocks+0x7e>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 8005990:	2001      	movs	r0, #1
 8005992:	f000 f9d3 	bl	8005d3c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005996:	f107 0313 	add.w	r3, r7, #19
 800599a:	2101      	movs	r1, #1
 800599c:	4618      	mov	r0, r3
 800599e:	f001 f833 	bl	8006a08 <BSP_SPI2_Send>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <MY_SD_WriteBlocks+0x7e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80059a8:	f06f 0303 	mvn.w	r3, #3
 80059ac:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f040 80b8 	bne.w	8005b26 <MY_SD_WriteBlocks+0x1f6>
        /* Data transfer */
        do
        {
          /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
          Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U : MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	441a      	add	r2, r3
 80059bc:	4b5c      	ldr	r3, [pc, #368]	; (8005b30 <MY_SD_WriteBlocks+0x200>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <MY_SD_WriteBlocks+0x98>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e001      	b.n	80059cc <MY_SD_WriteBlocks+0x9c>
 80059c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059cc:	fb02 f103 	mul.w	r1, r2, r3
 80059d0:	2300      	movs	r3, #0
 80059d2:	22ff      	movs	r2, #255	; 0xff
 80059d4:	2018      	movs	r0, #24
 80059d6:	f000 fcc9 	bl	800636c <SD_SendCmd>
 80059da:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00f      	beq.n	8005a04 <MY_SD_WriteBlocks+0xd4>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 80059e4:	2001      	movs	r0, #1
 80059e6:	f000 f9a9 	bl	8005d3c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80059ea:	f107 0313 	add.w	r3, r7, #19
 80059ee:	2101      	movs	r1, #1
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 f809 	bl	8006a08 <BSP_SPI2_Send>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <MY_SD_WriteBlocks+0xd4>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80059fc:	f06f 0303 	mvn.w	r3, #3
 8005a00:	61fb      	str	r3, [r7, #28]
              break;
 8005a02:	e090      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          /* Send dummy byte for NWR timing : one byte between CMDWRITE and TOKEN */
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005a04:	f107 0313 	add.w	r3, r7, #19
 8005a08:	2101      	movs	r1, #1
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fffc 	bl	8006a08 <BSP_SPI2_Send>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <MY_SD_WriteBlocks+0xee>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005a16:	f06f 0303 	mvn.w	r3, #3
 8005a1a:	61fb      	str	r3, [r7, #28]
            break;
 8005a1c:	e083      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005a1e:	f107 0313 	add.w	r3, r7, #19
 8005a22:	2101      	movs	r1, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 ffef 	bl	8006a08 <BSP_SPI2_Send>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <MY_SD_WriteBlocks+0x108>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005a30:	f06f 0303 	mvn.w	r3, #3
 8005a34:	61fb      	str	r3, [r7, #28]
            break;
 8005a36:	e076      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Send the data token to signify the start of the data */
          tmp = SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE;
 8005a38:	23fe      	movs	r3, #254	; 0xfe
 8005a3a:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005a3c:	f107 0313 	add.w	r3, r7, #19
 8005a40:	2101      	movs	r1, #1
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 ffe0 	bl	8006a08 <BSP_SPI2_Send>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <MY_SD_WriteBlocks+0x126>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005a4e:	f06f 0303 	mvn.w	r3, #3
 8005a52:	61fb      	str	r3, [r7, #28]
            break;
 8005a54:	e067      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Write the block data to SD */
          if(BUS_SPIx_Send((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 ffd1 	bl	8006a08 <BSP_SPI2_Send>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <MY_SD_WriteBlocks+0x144>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005a6c:	f06f 0303 	mvn.w	r3, #3
 8005a70:	61fb      	str	r3, [r7, #28]
            break;
 8005a72:	e058      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Set next write address */
          offset += MY_SD_BLOCK_SIZE;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005a7a:	61bb      	str	r3, [r7, #24]
          BlocksNbr--;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	603b      	str	r3, [r7, #0]

          /* get CRC bytes (not really needed by us, but required by SD) */
          tmp = SD_DUMMY_BYTE;
 8005a82:	23ff      	movs	r3, #255	; 0xff
 8005a84:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005a86:	f107 0313 	add.w	r3, r7, #19
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 ffbb 	bl	8006a08 <BSP_SPI2_Send>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <MY_SD_WriteBlocks+0x170>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005a98:	f06f 0303 	mvn.w	r3, #3
 8005a9c:	61fb      	str	r3, [r7, #28]
            break;
 8005a9e:	e042      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005aa0:	f107 0313 	add.w	r3, r7, #19
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 ffae 	bl	8006a08 <BSP_SPI2_Send>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <MY_SD_WriteBlocks+0x18a>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005ab2:	f06f 0303 	mvn.w	r3, #3
 8005ab6:	61fb      	str	r3, [r7, #28]
            break;
 8005ab8:	e035      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Read data response */
          if(SD_GetDataResponse(&data_response) != BSP_ERROR_NONE)
 8005aba:	f107 0312 	add.w	r3, r7, #18
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fd6c 	bl	800659c <SD_GetDataResponse>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <MY_SD_WriteBlocks+0x1a2>
          {
            ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005aca:	f06f 0305 	mvn.w	r3, #5
 8005ace:	61fb      	str	r3, [r7, #28]
            break;
 8005ad0:	e029      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
          }

          if (data_response != (uint8_t)SD_DATA_OK)
 8005ad2:	7cbb      	ldrb	r3, [r7, #18]
 8005ad4:	2b05      	cmp	r3, #5
 8005ad6:	d00f      	beq.n	8005af8 <MY_SD_WriteBlocks+0x1c8>
          {
            /* Set response value to failure */
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8005ad8:	2001      	movs	r0, #1
 8005ada:	f000 f92f 	bl	8005d3c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005ade:	f107 0313 	add.w	r3, r7, #19
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 ff8f 	bl	8006a08 <BSP_SPI2_Send>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <MY_SD_WriteBlocks+0x1c8>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8005af0:	f06f 0303 	mvn.w	r3, #3
 8005af4:	61fb      	str	r3, [r7, #28]
              break;
 8005af6:	e016      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          SD_IO_CSState(1);
 8005af8:	2001      	movs	r0, #1
 8005afa:	f000 f91f 	bl	8005d3c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005afe:	f107 0313 	add.w	r3, r7, #19
 8005b02:	2101      	movs	r1, #1
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 ff7f 	bl	8006a08 <BSP_SPI2_Send>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <MY_SD_WriteBlocks+0x1e8>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005b10:	f06f 0303 	mvn.w	r3, #3
 8005b14:	61fb      	str	r3, [r7, #28]
            break;
 8005b16:	e006      	b.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <MY_SD_WriteBlocks+0x1f6>
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f43f af48 	beq.w	80059b6 <MY_SD_WriteBlocks+0x86>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8005b26:	69fb      	ldr	r3, [r7, #28]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	20000054 	.word	0x20000054

08005b34 <MY_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t MY_SD_GetCardState(uint32_t Instance)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint32_t response;
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <MY_SD_GetCardState+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005b42:	f06f 0301 	mvn.w	r3, #1
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	e026      	b.n	8005b98 <MY_SD_GetCardState+0x64>
  }
  else
  {
    /* Send CMD13 (SD_SEND_STATUS) to get SD status */
    response = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, (uint8_t)SD_ANSWER_R2_EXPECTED);
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	2100      	movs	r1, #0
 8005b50:	200d      	movs	r0, #13
 8005b52:	f000 fc0b 	bl	800636c <SD_SendCmd>
 8005b56:	6138      	str	r0, [r7, #16]
    SD_IO_CSState(1);
 8005b58:	2001      	movs	r0, #1
 8005b5a:	f000 f8ef 	bl	8005d3c <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 8005b5e:	23ff      	movs	r3, #255	; 0xff
 8005b60:	73fb      	strb	r3, [r7, #15]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005b62:	f107 030f 	add.w	r3, r7, #15
 8005b66:	2101      	movs	r1, #1
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 ff4d 	bl	8006a08 <BSP_SPI2_Send>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <MY_SD_GetCardState+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005b74:	f06f 0303 	mvn.w	r3, #3
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	e00d      	b.n	8005b98 <MY_SD_GetCardState+0x64>
    }/* Find SD status according to card state */
    else if(((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR) && ((uint8_t)((response & 0xFF00UL) >> 8) == (uint8_t)SD_R2_NO_ERROR))
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <MY_SD_GetCardState+0x60>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d102      	bne.n	8005b94 <MY_SD_GetCardState+0x60>
    {
      ret = (int32_t)SD_TRANSFER_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e001      	b.n	8005b98 <MY_SD_GetCardState+0x64>
    }
    else
    {
      //ret = (int32_t)SD_TRANSFER_BUSY;
      ret = (int32_t)SD_TRANSFER_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return Status */
  return ret;
 8005b98:	697b      	ldr	r3, [r7, #20]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <MY_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
int32_t MY_SD_GetCardInfo(uint32_t Instance, MY_SD_CardInfo_t *CardInfo)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <MY_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005bb8:	f06f 0301 	mvn.w	r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	e069      	b.n	8005c94 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCSDRegister(&(CardInfo->Csd)) != BSP_ERROR_NONE)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f8d2 	bl	8005d6c <SD_GetCSDRegister>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <MY_SD_GetCardInfo+0x32>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005bce:	f06f 0305 	mvn.w	r3, #5
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	e05e      	b.n	8005c94 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCIDRegister(&(CardInfo->Cid)) != BSP_ERROR_NONE)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 faf4 	bl	80061c8 <SD_GetCIDRegister>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <MY_SD_GetCardInfo+0x4a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005be6:	f06f 0305 	mvn.w	r3, #5
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e052      	b.n	8005c94 <MY_SD_GetCardInfo+0xf0>
  }
  else if(CardType == MY_CARD_SDHC)
 8005bee:	4b2c      	ldr	r3, [pc, #176]	; (8005ca0 <MY_SD_GetCardInfo+0xfc>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d11c      	bne.n	8005c30 <MY_SD_GetCardInfo+0x8c>
  {
    CardInfo->LogBlockSize = 512U;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bfc:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = 512U;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity = (CardInfo->Csd.version.v2.DeviceSize + 1U) * 1024U * CardInfo->LogBlockSize;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f3c3 1395 	ubfx	r3, r3, #6, #22
 8005c0e:	3301      	adds	r3, #1
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c14:	fb02 f303 	mul.w	r3, r2, r3
 8005c18:	029a      	lsls	r2, r3, #10
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44
 8005c2e:	e031      	b.n	8005c94 <MY_SD_GetCardInfo+0xf0>
  }
  else
  {
    CardInfo->CardCapacity = ((uint32_t)CardInfo->Csd.version.v1.DeviceSize + 1U) ;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	891b      	ldrh	r3, [r3, #8]
 8005c34:	f3c3 038b 	ubfx	r3, r3, #2, #12
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->CardCapacity *= (1UL << (CardInfo->Csd.version.v1.DeviceSizeMul + 2U));
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	7adb      	ldrb	r3, [r3, #11]
 8005c48:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	3302      	adds	r3, #2
 8005c50:	409a      	lsls	r2, r3
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockSize = 512U;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c5c:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = (1UL << (uint32_t)CardInfo->Csd.RdBlockLen);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	795b      	ldrb	r3, [r3, #5]
 8005c62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	fa03 f202 	lsl.w	r2, r3, r2
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity *= CardInfo->CardBlockSize;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c7c:	fb02 f203 	mul.w	r2, r2, r3
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return ret;
 8005c94:	68fb      	ldr	r3, [r7, #12]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000054 	.word	0x20000054

08005ca4 <SD_IO_Init>:
  * @brief  Initializes the SD Card and put it into StandBy State (Ready for
  *         data transfer).
  * @retval BSP status
  */
static int32_t SD_IO_Init(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61fb      	str	r3, [r7, #28]
  uint8_t counter = 0, tmp;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* SD_CS_GPIO Periph clock enable */
  MY_SD_CS_GPIO_CLK_ENABLE();
 8005cb2:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <SD_IO_Init+0x90>)
 8005cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb6:	4a1f      	ldr	r2, [pc, #124]	; (8005d34 <SD_IO_Init+0x90>)
 8005cb8:	f043 0302 	orr.w	r3, r3, #2
 8005cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <SD_IO_Init+0x90>)
 8005cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  GPIO_InitStruct.Pin   = MY_SD_CS_PIN;
 8005cca:	2304      	movs	r3, #4
 8005ccc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MY_SD_CS_GPIO_PORT, &GPIO_InitStruct);
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4816      	ldr	r0, [pc, #88]	; (8005d38 <SD_IO_Init+0x94>)
 8005ce0:	f7fb ffee 	bl	8001cc0 <HAL_GPIO_Init>

  /*------------Put SD in SPI mode--------------*/
  /* SD SPI Config */
  if(BUS_SPIx_Init() != BSP_ERROR_NONE)
 8005ce4:	f000 fe40 	bl	8006968 <BSP_SPI2_Init>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <SD_IO_Init+0x52>
  {
    ret = BSP_ERROR_NO_INIT;
 8005cee:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	e019      	b.n	8005d2a <SD_IO_Init+0x86>
  }
  else
  {
    /* SD chip select high */
    MY_SD_CS_HIGH();
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	2104      	movs	r1, #4
 8005cfa:	480f      	ldr	r0, [pc, #60]	; (8005d38 <SD_IO_Init+0x94>)
 8005cfc:	f7fc f962 	bl	8001fc4 <HAL_GPIO_WritePin>

    /* Send dummy byte 0xFF, 10 times with CS high */
    /* Rise CS and MOSI for 80 clocks cycles */
    tmp = SD_DUMMY_BYTE;
 8005d00:	23ff      	movs	r3, #255	; 0xff
 8005d02:	76bb      	strb	r3, [r7, #26]

    do
    {
      /* Send dummy byte 0xFF */
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005d04:	f107 031a 	add.w	r3, r7, #26
 8005d08:	2101      	movs	r1, #1
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fe7c 	bl	8006a08 <BSP_SPI2_Send>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <SD_IO_Init+0x7a>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005d16:	f06f 0303 	mvn.w	r3, #3
 8005d1a:	61fb      	str	r3, [r7, #28]
        break;
 8005d1c:	e005      	b.n	8005d2a <SD_IO_Init+0x86>
      }
      counter++;
 8005d1e:	7efb      	ldrb	r3, [r7, #27]
 8005d20:	3301      	adds	r3, #1
 8005d22:	76fb      	strb	r3, [r7, #27]
    }while(counter <= 9U);
 8005d24:	7efb      	ldrb	r3, [r7, #27]
 8005d26:	2b09      	cmp	r3, #9
 8005d28:	d9ec      	bls.n	8005d04 <SD_IO_Init+0x60>
  }

  return ret;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3720      	adds	r7, #32
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40021000 	.word	0x40021000
 8005d38:	48000400 	.word	0x48000400

08005d3c <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  Value pin's value.
  * @retval None
  */
static void SD_IO_CSState(uint32_t Value)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  if(Value == 1U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d105      	bne.n	8005d56 <SD_IO_CSState+0x1a>
  {
    MY_SD_CS_HIGH();
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	2104      	movs	r1, #4
 8005d4e:	4806      	ldr	r0, [pc, #24]	; (8005d68 <SD_IO_CSState+0x2c>)
 8005d50:	f7fc f938 	bl	8001fc4 <HAL_GPIO_WritePin>
  }
  else
  {
    MY_SD_CS_LOW();
  }
}
 8005d54:	e004      	b.n	8005d60 <SD_IO_CSState+0x24>
    MY_SD_CS_LOW();
 8005d56:	2200      	movs	r2, #0
 8005d58:	2104      	movs	r1, #4
 8005d5a:	4803      	ldr	r0, [pc, #12]	; (8005d68 <SD_IO_CSState+0x2c>)
 8005d5c:	f7fc f932 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	48000400 	.word	0x48000400

08005d6c <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd pointer on an SCD register structure
  * @retval SD status
  */
static int32_t SD_GetCSDRegister(SD_CardSpecificData_t* Csd)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b096      	sub	sp, #88	; 0x58
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t CSD_Tab[16];
  uint32_t response;
  uint8_t tmp;

  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	22ff      	movs	r2, #255	; 0xff
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	2009      	movs	r0, #9
 8005d80:	f000 faf4 	bl	800636c <SD_SendCmd>
 8005d84:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8005d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f040 8202 	bne.w	8006194 <SD_GetCSDRegister+0x428>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8005d90:	20fe      	movs	r0, #254	; 0xfe
 8005d92:	f000 fda7 	bl	80068e4 <SD_WaitData>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f040 81fe 	bne.w	800619a <SD_GetCSDRegister+0x42e>
    {
      tmp = SD_DUMMY_BYTE;
 8005d9e:	23ff      	movs	r3, #255	; 0xff
 8005da0:	72fb      	strb	r3, [r7, #11]
      for (counter = 0U; counter < 16U; counter++)
 8005da2:	2300      	movs	r3, #0
 8005da4:	653b      	str	r3, [r7, #80]	; 0x50
 8005da6:	e014      	b.n	8005dd2 <SD_GetCSDRegister+0x66>
      {
        /* Store CSD register value on CSD_Tab */
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CSD_Tab[counter], 1U) != BSP_ERROR_NONE)
 8005da8:	f107 020c 	add.w	r2, r7, #12
 8005dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	18d1      	adds	r1, r2, r3
 8005db2:	f107 030b 	add.w	r3, r7, #11
 8005db6:	2201      	movs	r2, #1
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fe5d 	bl	8006a78 <BSP_SPI2_SendRecv>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <SD_GetCSDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005dc4:	f06f 0303 	mvn.w	r3, #3
 8005dc8:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8005dca:	e005      	b.n	8005dd8 <SD_GetCSDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8005dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dce:	3301      	adds	r3, #1
 8005dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd4:	2b0f      	cmp	r3, #15
 8005dd6:	d9e7      	bls.n	8005da8 <SD_GetCSDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 8005dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f040 81dd 	bne.w	800619a <SD_GetCSDRegister+0x42e>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005de0:	f107 030b 	add.w	r3, r7, #11
 8005de4:	2101      	movs	r1, #1
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fe0e 	bl	8006a08 <BSP_SPI2_Send>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <SD_GetCSDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005df2:	f06f 0303 	mvn.w	r3, #3
 8005df6:	657b      	str	r3, [r7, #84]	; 0x54
 8005df8:	e1cf      	b.n	800619a <SD_GetCSDRegister+0x42e>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005dfa:	f107 030b 	add.w	r3, r7, #11
 8005dfe:	2101      	movs	r1, #1
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fe01 	bl	8006a08 <BSP_SPI2_Send>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <SD_GetCSDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005e0c:	f06f 0303 	mvn.w	r3, #3
 8005e10:	657b      	str	r3, [r7, #84]	; 0x54
 8005e12:	e1c2      	b.n	800619a <SD_GetCSDRegister+0x42e>
          /*************************************************************************
          CSD header decoding
          *************************************************************************/

          /* Byte 0 */
          Csd->CSDStruct = (CSD_Tab[0] & 0xC0U) >> 6U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	b2d9      	uxtb	r1, r3
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	7813      	ldrb	r3, [r2, #0]
 8005e22:	f361 0301 	bfi	r3, r1, #0, #2
 8005e26:	7013      	strb	r3, [r2, #0]
          Csd->Reserved1 =  CSD_Tab[0] & 0x3FU;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e2e:	b2d9      	uxtb	r1, r3
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	7813      	ldrb	r3, [r2, #0]
 8005e34:	f361 0387 	bfi	r3, r1, #2, #6
 8005e38:	7013      	strb	r3, [r2, #0]

          /* Byte 1 */
          Csd->TAAC = CSD_Tab[1];
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	705a      	strb	r2, [r3, #1]

          /* Byte 2 */
          Csd->NSAC = CSD_Tab[2];
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	709a      	strb	r2, [r3, #2]

          /* Byte 3 */
          Csd->MaxBusClkFrec = CSD_Tab[3];
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	70da      	strb	r2, [r3, #3]

          /* Byte 4/5 */
          Csd->CardComdClasses = (uint16_t)(((uint16_t)CSD_Tab[4] << 4U) | ((uint16_t)(CSD_Tab[5] & 0xF0U) >> 4U));
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	b21a      	sxth	r2, r3
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	111b      	asrs	r3, r3, #4
 8005e60:	b21b      	sxth	r3, r3
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	b21b      	sxth	r3, r3
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	b21b      	sxth	r3, r3
 8005e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e70:	b299      	uxth	r1, r3
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	8893      	ldrh	r3, [r2, #4]
 8005e76:	f361 030b 	bfi	r3, r1, #0, #12
 8005e7a:	8093      	strh	r3, [r2, #4]
          Csd->RdBlockLen = CSD_Tab[5] & 0x0FU;
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	b2d9      	uxtb	r1, r3
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	7953      	ldrb	r3, [r2, #5]
 8005e88:	f361 1307 	bfi	r3, r1, #4, #4
 8005e8c:	7153      	strb	r3, [r2, #5]

          /* Byte 6 */
          Csd->PartBlockRead   = (CSD_Tab[6] & 0x80U) >> 7U;
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	09db      	lsrs	r3, r3, #7
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	b2d9      	uxtb	r1, r3
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	7993      	ldrb	r3, [r2, #6]
 8005e9c:	f361 0300 	bfi	r3, r1, #0, #1
 8005ea0:	7193      	strb	r3, [r2, #6]
          Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40U) >> 6U;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	099b      	lsrs	r3, r3, #6
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	b2d9      	uxtb	r1, r3
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	7993      	ldrb	r3, [r2, #6]
 8005eb0:	f361 0341 	bfi	r3, r1, #1, #1
 8005eb4:	7193      	strb	r3, [r2, #6]
          Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20U) >> 5U;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	b2d9      	uxtb	r1, r3
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	7993      	ldrb	r3, [r2, #6]
 8005ec4:	f361 0382 	bfi	r3, r1, #2, #1
 8005ec8:	7193      	strb	r3, [r2, #6]
          Csd->DSRImpl         = (CSD_Tab[6] & 0x10U) >> 4U;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	b2d9      	uxtb	r1, r3
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	7993      	ldrb	r3, [r2, #6]
 8005ed8:	f361 03c3 	bfi	r3, r1, #3, #1
 8005edc:	7193      	strb	r3, [r2, #6]

          /*************************************************************************
          CSD v1/v2 decoding
          *************************************************************************/

          if(CardType == MY_CARD_SDSC)
 8005ede:	4bac      	ldr	r3, [pc, #688]	; (8006190 <SD_GetCSDRegister+0x424>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d165      	bne.n	8005fb2 <SD_GetCSDRegister+0x246>
          {
            Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0CU) >> 2U);
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	089b      	lsrs	r3, r3, #2
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	b2d9      	uxtb	r1, r3
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	7a13      	ldrb	r3, [r2, #8]
 8005ef4:	f361 0301 	bfi	r3, r1, #0, #2
 8005ef8:	7213      	strb	r3, [r2, #8]

            Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03U) << 10U) | (CSD_Tab[7] << 2U) | ((CSD_Tab[8] & 0xC0U) >> 6U);
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	029b      	lsls	r3, r3, #10
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	4313      	orrs	r3, r2
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	099b      	lsrs	r3, r3, #6
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	4313      	orrs	r3, r2
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f28:	b299      	uxth	r1, r3
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	8913      	ldrh	r3, [r2, #8]
 8005f2e:	f361 038d 	bfi	r3, r1, #2, #12
 8005f32:	8113      	strh	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38U) >> 3U;
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	08db      	lsrs	r3, r3, #3
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	b2d9      	uxtb	r1, r3
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6893      	ldr	r3, [r2, #8]
 8005f42:	f361 3390 	bfi	r3, r1, #14, #3
 8005f46:	6093      	str	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07U);
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	b2d9      	uxtb	r1, r3
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	7a93      	ldrb	r3, [r2, #10]
 8005f54:	f361 0343 	bfi	r3, r1, #1, #3
 8005f58:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0U) >> 5U;
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	b2d9      	uxtb	r1, r3
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	7a93      	ldrb	r3, [r2, #10]
 8005f68:	f361 1306 	bfi	r3, r1, #4, #3
 8005f6c:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1CU) >> 2U;
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	089b      	lsrs	r3, r3, #2
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	b2d9      	uxtb	r1, r3
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	8953      	ldrh	r3, [r2, #10]
 8005f7c:	f361 13c9 	bfi	r3, r1, #7, #3
 8005f80:	8153      	strh	r3, [r2, #10]
            Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03U) << 1U) | ((CSD_Tab[10] & 0x80U) >> 7U);
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	f003 0306 	and.w	r3, r3, #6
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f92:	09db      	lsrs	r3, r3, #7
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	b2d9      	uxtb	r1, r3
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	7ad3      	ldrb	r3, [r2, #11]
 8005faa:	f361 0384 	bfi	r3, r1, #2, #3
 8005fae:	72d3      	strb	r3, [r2, #11]
 8005fb0:	e02b      	b.n	800600a <SD_GetCSDRegister+0x29e>
          }
          else
          {
            Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0FU) << 2U) | ((CSD_Tab[7] & 0xC0U) >> 6U);
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	099b      	lsrs	r3, r3, #6
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd4:	b2d9      	uxtb	r1, r3
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	7a13      	ldrb	r3, [r2, #8]
 8005fda:	f361 0305 	bfi	r3, r1, #0, #6
 8005fde:	7213      	strb	r3, [r2, #8]
            Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3FU) << 16U) | (CSD_Tab[8] << 8U) | CSD_Tab[9];
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	431a      	orrs	r2, r3
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f3c3 0115 	ubfx	r1, r3, #0, #22
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6893      	ldr	r3, [r2, #8]
 8005ffa:	f361 139b 	bfi	r3, r1, #6, #22
 8005ffe:	6093      	str	r3, [r2, #8]
            Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80U) >> 8U);
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	7ad3      	ldrb	r3, [r2, #11]
 8006004:	f36f 1304 	bfc	r3, #4, #1
 8006008:	72d3      	strb	r3, [r2, #11]
          }

          Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40U) >> 6U;
 800600a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600c:	099b      	lsrs	r3, r3, #6
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	b2d9      	uxtb	r1, r3
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	7b13      	ldrb	r3, [r2, #12]
 8006018:	f361 0300 	bfi	r3, r1, #0, #1
 800601c:	7313      	strb	r3, [r2, #12]
          Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3FU) << 1U) | ((CSD_Tab[11] & 0x80U) >> 7U);
 800601e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006020:	b2db      	uxtb	r3, r3
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	b2db      	uxtb	r3, r3
 8006026:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800602a:	b2da      	uxtb	r2, r3
 800602c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602e:	09db      	lsrs	r3, r3, #7
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	b2db      	uxtb	r3, r3
 8006038:	4313      	orrs	r3, r2
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006040:	b2d9      	uxtb	r1, r3
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	7b13      	ldrb	r3, [r2, #12]
 8006046:	f361 0347 	bfi	r3, r1, #1, #7
 800604a:	7313      	strb	r3, [r2, #12]
          Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7FU);
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006052:	b2d9      	uxtb	r1, r3
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	7b53      	ldrb	r3, [r2, #13]
 8006058:	f361 0306 	bfi	r3, r1, #0, #7
 800605c:	7353      	strb	r3, [r2, #13]
          Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80U) >> 7U;
 800605e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006060:	09db      	lsrs	r3, r3, #7
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	b2d9      	uxtb	r1, r3
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	7b53      	ldrb	r3, [r2, #13]
 800606c:	f361 13c7 	bfi	r3, r1, #7, #1
 8006070:	7353      	strb	r3, [r2, #13]
          Csd->Reserved2         = (CSD_Tab[12] & 0x60U) >> 5U;
 8006072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	b2d9      	uxtb	r1, r3
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	7b93      	ldrb	r3, [r2, #14]
 8006080:	f361 0301 	bfi	r3, r1, #0, #2
 8006084:	7393      	strb	r3, [r2, #14]
          Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1CU) >> 2U;
 8006086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006088:	089b      	lsrs	r3, r3, #2
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	b2d9      	uxtb	r1, r3
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	7b93      	ldrb	r3, [r2, #14]
 8006094:	f361 0384 	bfi	r3, r1, #2, #3
 8006098:	7393      	strb	r3, [r2, #14]
          Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03U) << 2U) | ((CSD_Tab[13] & 0xC0U) >> 6U);
 800609a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609c:	b2db      	uxtb	r3, r3
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060aa:	099b      	lsrs	r3, r3, #6
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	4313      	orrs	r3, r2
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	f003 030f 	and.w	r3, r3, #15
 80060bc:	b2d9      	uxtb	r1, r3
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	89d3      	ldrh	r3, [r2, #14]
 80060c2:	f361 1348 	bfi	r3, r1, #5, #4
 80060c6:	81d3      	strh	r3, [r2, #14]
          Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20U) >> 5U;
 80060c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	b2d9      	uxtb	r1, r3
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	7bd3      	ldrb	r3, [r2, #15]
 80060d6:	f361 0341 	bfi	r3, r1, #1, #1
 80060da:	73d3      	strb	r3, [r2, #15]
          Csd->Reserved3         = (CSD_Tab[13] & 0x1FU);
 80060dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	b2d9      	uxtb	r1, r3
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	7bd3      	ldrb	r3, [r2, #15]
 80060e8:	f361 0386 	bfi	r3, r1, #2, #5
 80060ec:	73d3      	strb	r3, [r2, #15]
          Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80U) >> 7U;
 80060ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f0:	09db      	lsrs	r3, r3, #7
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	b2d9      	uxtb	r1, r3
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	7bd3      	ldrb	r3, [r2, #15]
 80060fc:	f361 13c7 	bfi	r3, r1, #7, #1
 8006100:	73d3      	strb	r3, [r2, #15]
          Csd->CopyFlag          = (CSD_Tab[14] & 0x40U) >> 6U;
 8006102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006104:	099b      	lsrs	r3, r3, #6
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	b2d9      	uxtb	r1, r3
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	7c13      	ldrb	r3, [r2, #16]
 8006110:	f361 0300 	bfi	r3, r1, #0, #1
 8006114:	7413      	strb	r3, [r2, #16]
          Csd->PermWrProtect     = (CSD_Tab[14] & 0x20U) >> 5U;
 8006116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006118:	095b      	lsrs	r3, r3, #5
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	b2d9      	uxtb	r1, r3
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	7c13      	ldrb	r3, [r2, #16]
 8006124:	f361 0341 	bfi	r3, r1, #1, #1
 8006128:	7413      	strb	r3, [r2, #16]
          Csd->TempWrProtect     = (CSD_Tab[14] & 0x10U) >> 4U;
 800612a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	b2d9      	uxtb	r1, r3
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	7c13      	ldrb	r3, [r2, #16]
 8006138:	f361 0382 	bfi	r3, r1, #2, #1
 800613c:	7413      	strb	r3, [r2, #16]
          Csd->FileFormat        = (CSD_Tab[14] & 0x0CU) >> 2U;
 800613e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006140:	089b      	lsrs	r3, r3, #2
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	b2d9      	uxtb	r1, r3
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	7c13      	ldrb	r3, [r2, #16]
 800614c:	f361 03c4 	bfi	r3, r1, #3, #2
 8006150:	7413      	strb	r3, [r2, #16]
          Csd->Reserved4         = (CSD_Tab[14] & 0x03U);
 8006152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006154:	f003 0303 	and.w	r3, r3, #3
 8006158:	b2d9      	uxtb	r1, r3
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	7c13      	ldrb	r3, [r2, #16]
 800615e:	f361 1346 	bfi	r3, r1, #5, #2
 8006162:	7413      	strb	r3, [r2, #16]
          Csd->crc               = (CSD_Tab[15] & 0xFEU) >> 1U;
 8006164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006166:	085b      	lsrs	r3, r3, #1
 8006168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800616c:	b2d9      	uxtb	r1, r3
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	8a13      	ldrh	r3, [r2, #16]
 8006172:	f361 13cd 	bfi	r3, r1, #7, #7
 8006176:	8213      	strh	r3, [r2, #16]
          Csd->Reserved5         = (CSD_Tab[15] & 0x01U);
 8006178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	b2d9      	uxtb	r1, r3
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	7c53      	ldrb	r3, [r2, #17]
 8006184:	f361 1386 	bfi	r3, r1, #6, #1
 8006188:	7453      	strb	r3, [r2, #17]

          ret = BSP_ERROR_NONE;
 800618a:	2300      	movs	r3, #0
 800618c:	657b      	str	r3, [r7, #84]	; 0x54
 800618e:	e004      	b.n	800619a <SD_GetCSDRegister+0x42e>
 8006190:	20000054 	.word	0x20000054
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006194:	f06f 0305 	mvn.w	r3, #5
 8006198:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 800619a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10e      	bne.n	80061be <SD_GetCSDRegister+0x452>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 80061a0:	2001      	movs	r0, #1
 80061a2:	f7ff fdcb 	bl	8005d3c <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80061a6:	f107 030b 	add.w	r3, r7, #11
 80061aa:	2101      	movs	r1, #1
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fc2b 	bl	8006a08 <BSP_SPI2_Send>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <SD_GetCSDRegister+0x452>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80061b8:	f06f 0303 	mvn.w	r3, #3
 80061bc:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 80061be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3758      	adds	r7, #88	; 0x58
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
static int32_t SD_GetCIDRegister(SD_CardIdData_t* Cid)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b096      	sub	sp, #88	; 0x58
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t response;
  uint32_t counter;
  uint8_t tmp;

  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CID, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80061d4:	2300      	movs	r3, #0
 80061d6:	22ff      	movs	r2, #255	; 0xff
 80061d8:	2100      	movs	r1, #0
 80061da:	200a      	movs	r0, #10
 80061dc:	f000 f8c6 	bl	800636c <SD_SendCmd>
 80061e0:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 80061e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f040 80a6 	bne.w	8006338 <SD_GetCIDRegister+0x170>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 80061ec:	20fe      	movs	r0, #254	; 0xfe
 80061ee:	f000 fb79 	bl	80068e4 <SD_WaitData>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 80a2 	bne.w	800633e <SD_GetCIDRegister+0x176>
    {
      tmp = SD_DUMMY_BYTE;
 80061fa:	23ff      	movs	r3, #255	; 0xff
 80061fc:	72fb      	strb	r3, [r7, #11]

      /* Store CID register value on CID_Tab */
      for (counter = 0U; counter < 16U; counter++)
 80061fe:	2300      	movs	r3, #0
 8006200:	653b      	str	r3, [r7, #80]	; 0x50
 8006202:	e014      	b.n	800622e <SD_GetCIDRegister+0x66>
      {
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CID_Tab[counter], 1U) != BSP_ERROR_NONE)
 8006204:	f107 020c 	add.w	r2, r7, #12
 8006208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	18d1      	adds	r1, r2, r3
 800620e:	f107 030b 	add.w	r3, r7, #11
 8006212:	2201      	movs	r2, #1
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fc2f 	bl	8006a78 <BSP_SPI2_SendRecv>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <SD_GetCIDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006220:	f06f 0303 	mvn.w	r3, #3
 8006224:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8006226:	e005      	b.n	8006234 <SD_GetCIDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8006228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622a:	3301      	adds	r3, #1
 800622c:	653b      	str	r3, [r7, #80]	; 0x50
 800622e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006230:	2b0f      	cmp	r3, #15
 8006232:	d9e7      	bls.n	8006204 <SD_GetCIDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006236:	2b00      	cmp	r3, #0
 8006238:	f040 8081 	bne.w	800633e <SD_GetCIDRegister+0x176>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800623c:	f107 030b 	add.w	r3, r7, #11
 8006240:	2101      	movs	r1, #1
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fbe0 	bl	8006a08 <BSP_SPI2_Send>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <SD_GetCIDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800624e:	f06f 0303 	mvn.w	r3, #3
 8006252:	657b      	str	r3, [r7, #84]	; 0x54
 8006254:	e073      	b.n	800633e <SD_GetCIDRegister+0x176>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006256:	f107 030b 	add.w	r3, r7, #11
 800625a:	2101      	movs	r1, #1
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fbd3 	bl	8006a08 <BSP_SPI2_Send>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <SD_GetCIDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006268:	f06f 0303 	mvn.w	r3, #3
 800626c:	657b      	str	r3, [r7, #84]	; 0x54
 800626e:	e066      	b.n	800633e <SD_GetCIDRegister+0x176>
        }
        else
        {
          /* Byte 0 */
          Cid->ManufacturerID = CID_Tab[0];
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	601a      	str	r2, [r3, #0]

          /* Byte 1 */
          Cid->OEM_AppliID = CID_Tab[1] << 8U;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	021a      	lsls	r2, r3, #8
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	605a      	str	r2, [r3, #4]

          /* Byte 2 */
          Cid->OEM_AppliID |= CID_Tab[2];
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	605a      	str	r2, [r3, #4]

          /* Byte 3 */
          Cid->ProdName1 = CID_Tab[3] << 24U;
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	061a      	lsls	r2, r3, #24
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	609a      	str	r2, [r3, #8]

          /* Byte 4 */
          Cid->ProdName1 |= CID_Tab[4] << 16U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	041b      	lsls	r3, r3, #16
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	609a      	str	r2, [r3, #8]

          /* Byte 5 */
          Cid->ProdName1 |= CID_Tab[5] << 8U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	609a      	str	r2, [r3, #8]

          /* Byte 6 */
          Cid->ProdName1 |= CID_Tab[6];
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	609a      	str	r2, [r3, #8]

          /* Byte 7 */
          Cid->ProdName2 = CID_Tab[7];
 80062ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60da      	str	r2, [r3, #12]

          /* Byte 8 */
          Cid->ProdRev = CID_Tab[8];
 80062c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	611a      	str	r2, [r3, #16]

          /* Byte 9 */
          Cid->ProdSN = CID_Tab[9] << 24U;
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	061a      	lsls	r2, r3, #24
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	615a      	str	r2, [r3, #20]

          /* Byte 10 */
          Cid->ProdSN |= CID_Tab[10] << 16U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695a      	ldr	r2, [r3, #20]
 80062d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d4:	041b      	lsls	r3, r3, #16
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	615a      	str	r2, [r3, #20]

          /* Byte 11 */
          Cid->ProdSN |= CID_Tab[11] << 8U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	615a      	str	r2, [r3, #20]

          /* Byte 12 */
          Cid->ProdSN |= CID_Tab[12];
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	615a      	str	r2, [r3, #20]

          /* Byte 13 */
          Cid->Reserved1 |= (CID_Tab[13] & 0xF0U) >> 4U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	619a      	str	r2, [r3, #24]
          Cid->ManufactDate = (CID_Tab[13] & 0x0FU) << 8U;
 8006308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630a:	021b      	lsls	r3, r3, #8
 800630c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	61da      	str	r2, [r3, #28]

          /* Byte 14 */
          Cid->ManufactDate |= CID_Tab[14];
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	61da      	str	r2, [r3, #28]

          /* Byte 15 */
          Cid->CID_CRC = (CID_Tab[15] & 0xFEU) >> 1U;
 8006320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	621a      	str	r2, [r3, #32]
          Cid->Reserved2 = 1U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	625a      	str	r2, [r3, #36]	; 0x24

          ret = BSP_ERROR_NONE;
 8006332:	2300      	movs	r3, #0
 8006334:	657b      	str	r3, [r7, #84]	; 0x54
 8006336:	e002      	b.n	800633e <SD_GetCIDRegister+0x176>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006338:	f06f 0305 	mvn.w	r3, #5
 800633c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 800633e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10e      	bne.n	8006362 <SD_GetCIDRegister+0x19a>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 8006344:	2001      	movs	r0, #1
 8006346:	f7ff fcf9 	bl	8005d3c <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800634a:	f107 030b 	add.w	r3, r7, #11
 800634e:	2101      	movs	r1, #1
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fb59 	bl	8006a08 <BSP_SPI2_Send>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <SD_GetCIDRegister+0x19a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800635c:	f06f 0303 	mvn.w	r3, #3
 8006360:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 8006362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8006364:	4618      	mov	r0, r3
 8006366:	3758      	adds	r7, #88	; 0x58
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <SD_SendCmd>:
  * @param  Crc The CRC.
  * @param  Answer SD_ANSWER_NOT_EXPECTED or SD_ANSWER_EXPECTED
  * @retval SD response or 0xFFFF in case of error
  */
static uint32_t SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Answer)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af00      	add	r7, sp, #0
 8006372:	6039      	str	r1, [r7, #0]
 8006374:	4611      	mov	r1, r2
 8006376:	461a      	mov	r2, r3
 8006378:	4603      	mov	r3, r0
 800637a:	71fb      	strb	r3, [r7, #7]
 800637c:	460b      	mov	r3, r1
 800637e:	71bb      	strb	r3, [r7, #6]
 8006380:	4613      	mov	r3, r2
 8006382:	717b      	strb	r3, [r7, #5]
  uint8_t frame[SD_CMD_LENGTH], frameout[SD_CMD_LENGTH];
  uint32_t response = 0xFFFF;
 8006384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006388:	61fb      	str	r3, [r7, #28]
  /* R1 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 1 Bytes answer + NEC(0) = 15bytes */
  /* R1b identical to R1 + Busy information                                                   */
  /* R2 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 2 Bytes answer + NEC(0) = 16bytes */

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40U);         /* Construct byte 1 */
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006390:	b2db      	uxtb	r3, r3
 8006392:	753b      	strb	r3, [r7, #20]
  frame[1] = (uint8_t)(Arg >> 24U); /* Construct byte 2 */
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	0e1b      	lsrs	r3, r3, #24
 8006398:	b2db      	uxtb	r3, r3
 800639a:	757b      	strb	r3, [r7, #21]
  frame[2] = (uint8_t)(Arg >> 16U); /* Construct byte 3 */
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	0c1b      	lsrs	r3, r3, #16
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	75bb      	strb	r3, [r7, #22]
  frame[3] = (uint8_t)(Arg >> 8U);  /* Construct byte 4 */
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	0a1b      	lsrs	r3, r3, #8
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	75fb      	strb	r3, [r7, #23]
  frame[4] = (uint8_t)(Arg);        /* Construct byte 5 */
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	763b      	strb	r3, [r7, #24]
  frame[5] = (Crc | 0x01U);         /* Construct byte 6 */
 80063b2:	79bb      	ldrb	r3, [r7, #6]
 80063b4:	f043 0301 	orr.w	r3, r3, #1
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	767b      	strb	r3, [r7, #25]

  /* Send the command */
  SD_IO_CSState(0);
 80063bc:	2000      	movs	r0, #0
 80063be:	f7ff fcbd 	bl	8005d3c <SD_IO_CSState>
  /* Send the Cmd bytes */
  if(BUS_SPIx_SendRecv(frame, frameout, SD_CMD_LENGTH) != BSP_ERROR_NONE)
 80063c2:	f107 010c 	add.w	r1, r7, #12
 80063c6:	f107 0314 	add.w	r3, r7, #20
 80063ca:	2206      	movs	r2, #6
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fb53 	bl	8006a78 <BSP_SPI2_SendRecv>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <SD_SendCmd+0x72>
  {
    return 0xFFFF;
 80063d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063dc:	e0da      	b.n	8006594 <SD_SendCmd+0x228>
  }
  tmp = SD_DUMMY_BYTE;
 80063de:	23ff      	movs	r3, #255	; 0xff
 80063e0:	72fb      	strb	r3, [r7, #11]
  switch(Answer)
 80063e2:	797b      	ldrb	r3, [r7, #5]
 80063e4:	2b05      	cmp	r3, #5
 80063e6:	f200 80d1 	bhi.w	800658c <SD_SendCmd+0x220>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <SD_SendCmd+0x84>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006409 	.word	0x08006409
 80063f4:	08006425 	.word	0x08006425
 80063f8:	080064b7 	.word	0x080064b7
 80063fc:	080064f9 	.word	0x080064f9
 8006400:	0800658d 	.word	0x0800658d
 8006404:	080064f9 	.word	0x080064f9
  {
  case SD_ANSWER_R1_EXPECTED :
    /* Sends one byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8006408:	f107 030a 	add.w	r3, r7, #10
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fa3f 	bl	8006890 <SD_ReadData>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <SD_SendCmd+0xb2>
    {
      return 0xFFFF;
 8006418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800641c:	e0ba      	b.n	8006594 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 800641e:	7abb      	ldrb	r3, [r7, #10]
 8006420:	61fb      	str	r3, [r7, #28]
    break;
 8006422:	e0b6      	b.n	8006592 <SD_SendCmd+0x226>
  case SD_ANSWER_R1B_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8006424:	f107 030a 	add.w	r3, r7, #10
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fa31 	bl	8006890 <SD_ReadData>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <SD_SendCmd+0xce>
    {
      return 0xFFFF;
 8006434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006438:	e0ac      	b.n	8006594 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 800643a:	7abb      	ldrb	r3, [r7, #10]
 800643c:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 800643e:	f107 010a 	add.w	r1, r7, #10
 8006442:	f107 030b 	add.w	r3, r7, #11
 8006446:	2201      	movs	r2, #1
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fb15 	bl	8006a78 <BSP_SPI2_SendRecv>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <SD_SendCmd+0xee>
    {
      return 0xFFFF;
 8006454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006458:	e09c      	b.n	8006594 <SD_SendCmd+0x228>
    }
    response |= response_tmp;
 800645a:	7abb      	ldrb	r3, [r7, #10]
 800645c:	461a      	mov	r2, r3
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4313      	orrs	r3, r2
 8006462:	61fb      	str	r3, [r7, #28]
    /* Set CS High */
    SD_IO_CSState(1);
 8006464:	2001      	movs	r0, #1
 8006466:	f7ff fc69 	bl	8005d3c <SD_IO_CSState>
    SPI_IO_Delay(1);
 800646a:	2001      	movs	r0, #1
 800646c:	f000 fa67 	bl	800693e <SPI_IO_Delay>
    /* Set CS Low */
    SD_IO_CSState(0);
 8006470:	2000      	movs	r0, #0
 8006472:	f7ff fc63 	bl	8005d3c <SD_IO_CSState>

    /* Wait IO line return 0xFF */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8006476:	f107 010a 	add.w	r1, r7, #10
 800647a:	f107 030b 	add.w	r3, r7, #11
 800647e:	2201      	movs	r2, #1
 8006480:	4618      	mov	r0, r3
 8006482:	f000 faf9 	bl	8006a78 <BSP_SPI2_SendRecv>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d010      	beq.n	80064ae <SD_SendCmd+0x142>
    {
      return 0xFFFF;
 800648c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006490:	e080      	b.n	8006594 <SD_SendCmd+0x228>
    }
    while(response_tmp != 0xFFU)
    {
      if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8006492:	f107 010a 	add.w	r1, r7, #10
 8006496:	f107 030b 	add.w	r3, r7, #11
 800649a:	2201      	movs	r2, #1
 800649c:	4618      	mov	r0, r3
 800649e:	f000 faeb 	bl	8006a78 <BSP_SPI2_SendRecv>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <SD_SendCmd+0x142>
      {
        return 0xFFFF;
 80064a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064ac:	e072      	b.n	8006594 <SD_SendCmd+0x228>
    while(response_tmp != 0xFFU)
 80064ae:	7abb      	ldrb	r3, [r7, #10]
 80064b0:	2bff      	cmp	r3, #255	; 0xff
 80064b2:	d1ee      	bne.n	8006492 <SD_SendCmd+0x126>
      }
    }
    break;
 80064b4:	e06d      	b.n	8006592 <SD_SendCmd+0x226>
  case SD_ANSWER_R2_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80064b6:	f107 030a 	add.w	r3, r7, #10
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 f9e8 	bl	8006890 <SD_ReadData>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <SD_SendCmd+0x160>
    {
      return 0xFFFF;
 80064c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064ca:	e063      	b.n	8006594 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80064cc:	7abb      	ldrb	r3, [r7, #10]
 80064ce:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80064d0:	f107 010a 	add.w	r1, r7, #10
 80064d4:	f107 030b 	add.w	r3, r7, #11
 80064d8:	2201      	movs	r2, #1
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 facc 	bl	8006a78 <BSP_SPI2_SendRecv>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <SD_SendCmd+0x180>
    {
      return 0xFFFF;
 80064e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064ea:	e053      	b.n	8006594 <SD_SendCmd+0x228>
    }
    response |= ((uint32_t)response_tmp << 8);
 80064ec:	7abb      	ldrb	r3, [r7, #10]
 80064ee:	021b      	lsls	r3, r3, #8
 80064f0:	69fa      	ldr	r2, [r7, #28]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	61fb      	str	r3, [r7, #28]
    break;
 80064f6:	e04c      	b.n	8006592 <SD_SendCmd+0x226>
  case SD_ANSWER_R3_EXPECTED :
  case SD_ANSWER_R7_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80064f8:	f107 030a 	add.w	r3, r7, #10
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 f9c7 	bl	8006890 <SD_ReadData>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <SD_SendCmd+0x1a2>
    {
      return 0xFFFF;
 8006508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800650c:	e042      	b.n	8006594 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 800650e:	7abb      	ldrb	r3, [r7, #10]
 8006510:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8006512:	f107 010a 	add.w	r1, r7, #10
 8006516:	f107 030b 	add.w	r3, r7, #11
 800651a:	2201      	movs	r2, #1
 800651c:	4618      	mov	r0, r3
 800651e:	f000 faab 	bl	8006a78 <BSP_SPI2_SendRecv>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <SD_SendCmd+0x1c2>
    {
      return 0xFFFF;
 8006528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800652c:	e032      	b.n	8006594 <SD_SendCmd+0x228>
    }
    /* Only first and second responses are required */
    response |= ((uint32_t)response_tmp << 8U);
 800652e:	7abb      	ldrb	r3, [r7, #10]
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	4313      	orrs	r3, r2
 8006536:	61fb      	str	r3, [r7, #28]
    /* Sends third byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8006538:	f107 010a 	add.w	r1, r7, #10
 800653c:	f107 030b 	add.w	r3, r7, #11
 8006540:	2201      	movs	r2, #1
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fa98 	bl	8006a78 <BSP_SPI2_SendRecv>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <SD_SendCmd+0x1e8>
    {
      return 0xFFFF;
 800654e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006552:	e01f      	b.n	8006594 <SD_SendCmd+0x228>
    }
    /* Sends fourth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8006554:	f107 010a 	add.w	r1, r7, #10
 8006558:	f107 030b 	add.w	r3, r7, #11
 800655c:	2201      	movs	r2, #1
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fa8a 	bl	8006a78 <BSP_SPI2_SendRecv>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <SD_SendCmd+0x204>
    {
      return 0xFFFF;
 800656a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800656e:	e011      	b.n	8006594 <SD_SendCmd+0x228>
    }
    /* Sends fifth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8006570:	f107 010a 	add.w	r1, r7, #10
 8006574:	f107 030b 	add.w	r3, r7, #11
 8006578:	2201      	movs	r2, #1
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fa7c 	bl	8006a78 <BSP_SPI2_SendRecv>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <SD_SendCmd+0x224>
    {
      return 0xFFFF;
 8006586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800658a:	e003      	b.n	8006594 <SD_SendCmd+0x228>
    }

    break;
  default :
    break;
 800658c:	bf00      	nop
 800658e:	e000      	b.n	8006592 <SD_SendCmd+0x226>
    break;
 8006590:	bf00      	nop
  }
  return response;
 8006592:	69fb      	ldr	r3, [r7, #28]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3720      	adds	r7, #32
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
static int32_t SD_GetDataResponse(uint8_t *DataResponse)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint8_t dataresponse, tmp, tmp1;
  *DataResponse = (uint8_t)SD_DATA_OTHER_ERROR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	22ff      	movs	r2, #255	; 0xff
 80065a8:	701a      	strb	r2, [r3, #0]

  tmp = SD_DUMMY_BYTE;
 80065aa:	23ff      	movs	r3, #255	; 0xff
 80065ac:	73bb      	strb	r3, [r7, #14]
  if(BUS_SPIx_SendRecv(&tmp, &dataresponse, 1U) != BSP_ERROR_NONE)
 80065ae:	f107 010f 	add.w	r1, r7, #15
 80065b2:	f107 030e 	add.w	r3, r7, #14
 80065b6:	2201      	movs	r2, #1
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fa5d 	bl	8006a78 <BSP_SPI2_SendRecv>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <SD_GetDataResponse+0x2e>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80065c4:	f06f 0303 	mvn.w	r3, #3
 80065c8:	e049      	b.n	800665e <SD_GetDataResponse+0xc2>
  }
  /* read the busy response byte*/
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80065ca:	f107 030e 	add.w	r3, r7, #14
 80065ce:	2101      	movs	r1, #1
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fa19 	bl	8006a08 <BSP_SPI2_Send>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <SD_GetDataResponse+0x46>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80065dc:	f06f 0303 	mvn.w	r3, #3
 80065e0:	e03d      	b.n	800665e <SD_GetDataResponse+0xc2>
  }
  else
  {
    /* Mask unused bits */
    switch (dataresponse & 0x1FU)
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2b0b      	cmp	r3, #11
 80065ea:	d02f      	beq.n	800664c <SD_GetDataResponse+0xb0>
 80065ec:	2b0d      	cmp	r3, #13
 80065ee:	d031      	beq.n	8006654 <SD_GetDataResponse+0xb8>
 80065f0:	2b05      	cmp	r3, #5
 80065f2:	d000      	beq.n	80065f6 <SD_GetDataResponse+0x5a>
      break;
    case SD_DATA_WRITE_ERROR:
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
      break;
    default:
      break;
 80065f4:	e032      	b.n	800665c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_OK;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2205      	movs	r2, #5
 80065fa:	701a      	strb	r2, [r3, #0]
      SD_IO_CSState(1);
 80065fc:	2001      	movs	r0, #1
 80065fe:	f7ff fb9d 	bl	8005d3c <SD_IO_CSState>
      SD_IO_CSState(0);
 8006602:	2000      	movs	r0, #0
 8006604:	f7ff fb9a 	bl	8005d3c <SD_IO_CSState>
      tmp = SD_DUMMY_BYTE;
 8006608:	23ff      	movs	r3, #255	; 0xff
 800660a:	73bb      	strb	r3, [r7, #14]
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 800660c:	f107 010d 	add.w	r1, r7, #13
 8006610:	f107 030e 	add.w	r3, r7, #14
 8006614:	2201      	movs	r2, #1
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fa2e 	bl	8006a78 <BSP_SPI2_SendRecv>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d010      	beq.n	8006644 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 8006622:	f06f 0303 	mvn.w	r3, #3
 8006626:	e01a      	b.n	800665e <SD_GetDataResponse+0xc2>
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 8006628:	f107 010d 	add.w	r1, r7, #13
 800662c:	f107 030e 	add.w	r3, r7, #14
 8006630:	2201      	movs	r2, #1
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fa20 	bl	8006a78 <BSP_SPI2_SendRecv>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 800663e:	f06f 0303 	mvn.w	r3, #3
 8006642:	e00c      	b.n	800665e <SD_GetDataResponse+0xc2>
      while(tmp1 != 0xFFU)
 8006644:	7b7b      	ldrb	r3, [r7, #13]
 8006646:	2bff      	cmp	r3, #255	; 0xff
 8006648:	d1ee      	bne.n	8006628 <SD_GetDataResponse+0x8c>
      break;
 800664a:	e007      	b.n	800665c <SD_GetDataResponse+0xc0>
      *DataResponse =  (uint8_t)SD_DATA_CRC_ERROR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	220b      	movs	r2, #11
 8006650:	701a      	strb	r2, [r3, #0]
      break;
 8006652:	e003      	b.n	800665c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	220d      	movs	r2, #13
 8006658:	701a      	strb	r2, [r3, #0]
      break;
 800665a:	bf00      	nop
    }
  }

  /* Return response */
  return BSP_ERROR_NONE;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <SD_GoIdleState>:
  * @brief  Put the SD in Idle state.
  * @param  None
  * @retval SD status
  */
static int32_t SD_GoIdleState(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
  uint32_t response;
  __IO uint8_t counter = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	70fb      	strb	r3, [r7, #3]
  uint8_t tmp = SD_DUMMY_BYTE;
 8006672:	23ff      	movs	r3, #255	; 0xff
 8006674:	70bb      	strb	r3, [r7, #2]

  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and
  wait for In Idle State Response (R1 Format) equal to 0x01 */
  do
  {
    counter++;
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	3301      	adds	r3, #1
 800667c:	b2db      	uxtb	r3, r3
 800667e:	70fb      	strb	r3, [r7, #3]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0U, 0x95U, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006680:	2300      	movs	r3, #0
 8006682:	2295      	movs	r2, #149	; 0x95
 8006684:	2100      	movs	r1, #0
 8006686:	2000      	movs	r0, #0
 8006688:	f7ff fe70 	bl	800636c <SD_SendCmd>
 800668c:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 800668e:	2001      	movs	r0, #1
 8006690:	f7ff fb54 	bl	8005d3c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006694:	1cbb      	adds	r3, r7, #2
 8006696:	2101      	movs	r1, #1
 8006698:	4618      	mov	r0, r3
 800669a:	f000 f9b5 	bl	8006a08 <BSP_SPI2_Send>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <SD_GoIdleState+0x42>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80066a4:	f06f 0303 	mvn.w	r3, #3
 80066a8:	e0ec      	b.n	8006884 <SD_GoIdleState+0x21c>
    }
    else
    {
      if(counter >= SD_MAX_TRY)
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b63      	cmp	r3, #99	; 0x63
 80066b0:	d902      	bls.n	80066b8 <SD_GoIdleState+0x50>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 80066b2:	f06f 0305 	mvn.w	r3, #5
 80066b6:	e0e5      	b.n	8006884 <SD_GoIdleState+0x21c>
      }
    }
  }while((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d1da      	bne.n	8006676 <SD_GoIdleState+0xe>

  /* Send CMD8 (SD_CMD_SEND_IF_COND) to check the power supply status
  and wait until response (R7 Format) equal to 0xAA and */
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AAU, 0x87U, (uint8_t)SD_ANSWER_R7_EXPECTED);
 80066c0:	2305      	movs	r3, #5
 80066c2:	2287      	movs	r2, #135	; 0x87
 80066c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066c8:	2008      	movs	r0, #8
 80066ca:	f7ff fe4f 	bl	800636c <SD_SendCmd>
 80066ce:	6078      	str	r0, [r7, #4]
  SD_IO_CSState(1);
 80066d0:	2001      	movs	r0, #1
 80066d2:	f7ff fb33 	bl	8005d3c <SD_IO_CSState>
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80066d6:	1cbb      	adds	r3, r7, #2
 80066d8:	2101      	movs	r1, #1
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 f994 	bl	8006a08 <BSP_SPI2_Send>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <SD_GoIdleState+0x84>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80066e6:	f06f 0303 	mvn.w	r3, #3
 80066ea:	e0cb      	b.n	8006884 <SD_GoIdleState+0x21c>
  }
  else if(((uint8_t)(response & 0xFFU)  & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d030      	beq.n	800675a <SD_GoIdleState+0xf2>
    /* initialise card V1 */
    do
    {
      /* initialise card V1 */
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80066f8:	2300      	movs	r3, #0
 80066fa:	22ff      	movs	r2, #255	; 0xff
 80066fc:	2100      	movs	r1, #0
 80066fe:	2037      	movs	r0, #55	; 0x37
 8006700:	f7ff fe34 	bl	800636c <SD_SendCmd>
      SD_IO_CSState(1);
 8006704:	2001      	movs	r0, #1
 8006706:	f7ff fb19 	bl	8005d3c <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800670a:	1cbb      	adds	r3, r7, #2
 800670c:	2101      	movs	r1, #1
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f97a 	bl	8006a08 <BSP_SPI2_Send>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <SD_GoIdleState+0xb8>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 800671a:	f06f 0303 	mvn.w	r3, #3
 800671e:	e0b1      	b.n	8006884 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006720:	2300      	movs	r3, #0
 8006722:	22ff      	movs	r2, #255	; 0xff
 8006724:	2100      	movs	r1, #0
 8006726:	2029      	movs	r0, #41	; 0x29
 8006728:	f7ff fe20 	bl	800636c <SD_SendCmd>
 800672c:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 800672e:	2001      	movs	r0, #1
 8006730:	f7ff fb04 	bl	8005d3c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006734:	1cbb      	adds	r3, r7, #2
 8006736:	2101      	movs	r1, #1
 8006738:	4618      	mov	r0, r3
 800673a:	f000 f965 	bl	8006a08 <BSP_SPI2_Send>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <SD_GoIdleState+0xe2>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8006744:	f06f 0303 	mvn.w	r3, #3
 8006748:	e09c      	b.n	8006884 <SD_GoIdleState+0x21c>
        }
      }
    }
    while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b01      	cmp	r3, #1
 8006750:	d0d2      	beq.n	80066f8 <SD_GoIdleState+0x90>
    CardType = MY_CARD_SDSC;
 8006752:	4b4e      	ldr	r3, [pc, #312]	; (800688c <SD_GoIdleState+0x224>)
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	e093      	b.n	8006882 <SD_GoIdleState+0x21a>
  }
  else if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b01      	cmp	r3, #1
 8006760:	f040 808c 	bne.w	800687c <SD_GoIdleState+0x214>
  {
    /* initialise card V2 */
    do {
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006764:	2300      	movs	r3, #0
 8006766:	22ff      	movs	r2, #255	; 0xff
 8006768:	2100      	movs	r1, #0
 800676a:	2037      	movs	r0, #55	; 0x37
 800676c:	f7ff fdfe 	bl	800636c <SD_SendCmd>
      SD_IO_CSState(1);
 8006770:	2001      	movs	r0, #1
 8006772:	f7ff fae3 	bl	8005d3c <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006776:	1cbb      	adds	r3, r7, #2
 8006778:	2101      	movs	r1, #1
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f944 	bl	8006a08 <BSP_SPI2_Send>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <SD_GoIdleState+0x124>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8006786:	f06f 0303 	mvn.w	r3, #3
 800678a:	e07b      	b.n	8006884 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800678c:	2300      	movs	r3, #0
 800678e:	22ff      	movs	r2, #255	; 0xff
 8006790:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006794:	2029      	movs	r0, #41	; 0x29
 8006796:	f7ff fde9 	bl	800636c <SD_SendCmd>
 800679a:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 800679c:	2001      	movs	r0, #1
 800679e:	f7ff facd 	bl	8005d3c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80067a2:	1cbb      	adds	r3, r7, #2
 80067a4:	2101      	movs	r1, #1
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 f92e 	bl	8006a08 <BSP_SPI2_Send>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <SD_GoIdleState+0x150>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 80067b2:	f06f 0303 	mvn.w	r3, #3
 80067b6:	e065      	b.n	8006884 <SD_GoIdleState+0x21c>
        }
      }
    }
    while(((uint8_t)response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d0d1      	beq.n	8006764 <SD_GoIdleState+0xfc>

    if(((uint8_t)(response & 0xFFU) & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d033      	beq.n	8006834 <SD_GoIdleState+0x1cc>
    {
      do {
        /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
        (void)SD_SendCmd(SD_CMD_APP_CMD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80067cc:	2300      	movs	r3, #0
 80067ce:	22ff      	movs	r2, #255	; 0xff
 80067d0:	2100      	movs	r1, #0
 80067d2:	2037      	movs	r0, #55	; 0x37
 80067d4:	f7ff fdca 	bl	800636c <SD_SendCmd>
        SD_IO_CSState(1);
 80067d8:	2001      	movs	r0, #1
 80067da:	f7ff faaf 	bl	8005d3c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80067de:	1cbb      	adds	r3, r7, #2
 80067e0:	2101      	movs	r1, #1
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f910 	bl	8006a08 <BSP_SPI2_Send>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <SD_GoIdleState+0x18c>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 80067ee:	f06f 0303 	mvn.w	r3, #3
 80067f2:	e047      	b.n	8006884 <SD_GoIdleState+0x21c>
        }
        else
        {
          if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d002      	beq.n	8006802 <SD_GoIdleState+0x19a>
          {
            return BSP_ERROR_UNKNOWN_FAILURE;
 80067fc:	f06f 0305 	mvn.w	r3, #5
 8006800:	e040      	b.n	8006884 <SD_GoIdleState+0x21c>
          }
          /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006802:	2300      	movs	r3, #0
 8006804:	22ff      	movs	r2, #255	; 0xff
 8006806:	2100      	movs	r1, #0
 8006808:	2029      	movs	r0, #41	; 0x29
 800680a:	f7ff fdaf 	bl	800636c <SD_SendCmd>
 800680e:	6078      	str	r0, [r7, #4]
          SD_IO_CSState(1);
 8006810:	2001      	movs	r0, #1
 8006812:	f7ff fa93 	bl	8005d3c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006816:	1cbb      	adds	r3, r7, #2
 8006818:	2101      	movs	r1, #1
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f8f4 	bl	8006a08 <BSP_SPI2_Send>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <SD_GoIdleState+0x1c4>
          {
            return BSP_ERROR_PERIPH_FAILURE;
 8006826:	f06f 0303 	mvn.w	r3, #3
 800682a:	e02b      	b.n	8006884 <SD_GoIdleState+0x21c>
          }
        }
      }
      while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	d0cb      	beq.n	80067cc <SD_GoIdleState+0x164>
    }

    /* Send CMD58 (SD_CMD_READ_OCR) to initialize SDHC or SDXC cards: R3 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R3_EXPECTED);
 8006834:	2303      	movs	r3, #3
 8006836:	22ff      	movs	r2, #255	; 0xff
 8006838:	2100      	movs	r1, #0
 800683a:	203a      	movs	r0, #58	; 0x3a
 800683c:	f7ff fd96 	bl	800636c <SD_SendCmd>
 8006840:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 8006842:	2001      	movs	r0, #1
 8006844:	f7ff fa7a 	bl	8005d3c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006848:	1cbb      	adds	r3, r7, #2
 800684a:	2101      	movs	r1, #1
 800684c:	4618      	mov	r0, r3
 800684e:	f000 f8db 	bl	8006a08 <BSP_SPI2_Send>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <SD_GoIdleState+0x1f6>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8006858:	f06f 0303 	mvn.w	r3, #3
 800685c:	e012      	b.n	8006884 <SD_GoIdleState+0x21c>
    }
    else
    {
      if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <SD_GoIdleState+0x204>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 8006866:	f06f 0305 	mvn.w	r3, #5
 800686a:	e00b      	b.n	8006884 <SD_GoIdleState+0x21c>
      }
      CardType = (uint32_t)(((response >> 8U) & 0x40U) >> 6U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	0a1b      	lsrs	r3, r3, #8
 8006870:	099b      	lsrs	r3, r3, #6
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	4a05      	ldr	r2, [pc, #20]	; (800688c <SD_GoIdleState+0x224>)
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e002      	b.n	8006882 <SD_GoIdleState+0x21a>
    }
  }
  else
  {
    return BSP_ERROR_BUSY;
 800687c:	f06f 0302 	mvn.w	r3, #2
 8006880:	e000      	b.n	8006884 <SD_GoIdleState+0x21c>
  }

  return BSP_ERROR_NONE;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000054 	.word	0x20000054

08006890 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  Data data to be read
  * @retval BSP status
  */
static int32_t SD_ReadData(uint8_t *Data)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint8_t timeout = 0x08U;
 8006898:	2308      	movs	r3, #8
 800689a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  tmp = SD_DUMMY_BYTE;
 800689c:	23ff      	movs	r3, #255	; 0xff
 800689e:	73bb      	strb	r3, [r7, #14]
  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, Data, 1) != BSP_ERROR_NONE)
 80068a0:	f107 030e 	add.w	r3, r7, #14
 80068a4:	2201      	movs	r2, #1
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f8e5 	bl	8006a78 <BSP_SPI2_SendRecv>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <SD_ReadData+0x2a>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80068b4:	f06f 0303 	mvn.w	r3, #3
 80068b8:	e010      	b.n	80068dc <SD_ReadData+0x4c>
    }
    timeout--;
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	3b01      	subs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]

  }while ((*Data == SD_DUMMY_BYTE) && (timeout != 0U));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2bff      	cmp	r3, #255	; 0xff
 80068c6:	d102      	bne.n	80068ce <SD_ReadData+0x3e>
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e8      	bne.n	80068a0 <SD_ReadData+0x10>

  if (timeout == 0U)
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <SD_ReadData+0x4a>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 80068d4:	f06f 0302 	mvn.w	r3, #2
 80068d8:	e000      	b.n	80068dc <SD_ReadData+0x4c>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <SD_WaitData>:
  * @brief  Waits a data from the SD card
  * @param  data  Expected data from the SD card
  * @retval BSP status
  */
static int32_t SD_WaitData(uint8_t Data)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	4603      	mov	r3, r0
 80068ec:	71fb      	strb	r3, [r7, #7]
  uint16_t timeout = 0xFFFF;
 80068ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068f2:	81fb      	strh	r3, [r7, #14]
  uint8_t readvalue, tmp;

  tmp = SD_DUMMY_BYTE;
 80068f4:	23ff      	movs	r3, #255	; 0xff
 80068f6:	733b      	strb	r3, [r7, #12]

  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, &readvalue, 1) != BSP_ERROR_NONE)
 80068f8:	f107 010d 	add.w	r1, r7, #13
 80068fc:	f107 030c 	add.w	r3, r7, #12
 8006900:	2201      	movs	r2, #1
 8006902:	4618      	mov	r0, r3
 8006904:	f000 f8b8 	bl	8006a78 <BSP_SPI2_SendRecv>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <SD_WaitData+0x30>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800690e:	f06f 0303 	mvn.w	r3, #3
 8006912:	e010      	b.n	8006936 <SD_WaitData+0x52>
    }
    timeout--;
 8006914:	89fb      	ldrh	r3, [r7, #14]
 8006916:	3b01      	subs	r3, #1
 8006918:	81fb      	strh	r3, [r7, #14]
  }while ((readvalue != Data) && (timeout != 0U));
 800691a:	7b7b      	ldrb	r3, [r7, #13]
 800691c:	79fa      	ldrb	r2, [r7, #7]
 800691e:	429a      	cmp	r2, r3
 8006920:	d002      	beq.n	8006928 <SD_WaitData+0x44>
 8006922:	89fb      	ldrh	r3, [r7, #14]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e7      	bne.n	80068f8 <SD_WaitData+0x14>

  if (timeout == 0U)
 8006928:	89fb      	ldrh	r3, [r7, #14]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <SD_WaitData+0x50>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 800692e:	f06f 0302 	mvn.w	r3, #2
 8006932:	e000      	b.n	8006936 <SD_WaitData+0x52>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <SPI_IO_Delay>:
  * @brief  SPI IO delay
  * @param  Delay  Delay in ms
  * @retval None
  */
static void SPI_IO_Delay(uint32_t Delay)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  int32_t tickstart;
  tickstart = BSP_GetTick();
 8006946:	f000 f8b7 	bl	8006ab8 <BSP_GetTick>
 800694a:	60f8      	str	r0, [r7, #12]
  while((BSP_GetTick() - tickstart) < (int32_t)Delay)
 800694c:	bf00      	nop
 800694e:	f000 f8b3 	bl	8006ab8 <BSP_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	1ad2      	subs	r2, r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	429a      	cmp	r2, r3
 800695c:	dbf7      	blt.n	800694e <SPI_IO_Delay+0x10>
  {
  }
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <BSP_SPI2_Init>:

static void SPI_MspInit(SPI_HandleTypeDef *hspi);
static void SPI_MspDeInit(SPI_HandleTypeDef *hspi);

int32_t BSP_SPI2_Init(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hSpiHandle) == HAL_SPI_STATE_RESET)
 800696c:	480a      	ldr	r0, [pc, #40]	; (8006998 <BSP_SPI2_Init+0x30>)
 800696e:	f7fd f8bc 	bl	8003aea <HAL_SPI_GetState>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10b      	bne.n	8006990 <BSP_SPI2_Init+0x28>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI_MspInit(&hSpiHandle);
 8006978:	4807      	ldr	r0, [pc, #28]	; (8006998 <BSP_SPI2_Init+0x30>)
 800697a:	f000 f8a5 	bl	8006ac8 <SPI_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_BSP_SPI2_Init(&hSpiHandle) != HAL_OK)
 800697e:	4806      	ldr	r0, [pc, #24]	; (8006998 <BSP_SPI2_Init+0x30>)
 8006980:	f000 f80c 	bl	800699c <MX_BSP_SPI2_Init>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <BSP_SPI2_Init+0x28>
    {
      return BSP_ERROR_BUS_FAILURE;
 800698a:	f06f 0307 	mvn.w	r3, #7
 800698e:	e000      	b.n	8006992 <BSP_SPI2_Init+0x2a>
    }
  }
  return BSP_ERROR_NONE;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	200009a4 	.word	0x200009a4

0800699c <MX_BSP_SPI2_Init>:
  * @brief  MX SPI initialization.
  * @param  hspi SPI handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_BSP_SPI2_Init(SPI_HandleTypeDef *hspi)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* SPI Config */
  hspi->Instance               = NUCLEO_SPI;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <MX_BSP_SPI2_Init+0x68>)
 80069a8:	601a      	str	r2, [r3, #0]
  hspi->Init.BaudRatePrescaler = NUCLEO_SPI_BAUDRATEPRESCALER;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2210      	movs	r2, #16
 80069ae:	61da      	str	r2, [r3, #28]
  hspi->Init.Direction         = SPI_DIRECTION_2LINES;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]
  hspi->Init.CLKPhase          = SPI_PHASE_2EDGE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	615a      	str	r2, [r3, #20]
  hspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	611a      	str	r2, [r3, #16]
  hspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial     = 7;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2207      	movs	r2, #7
 80069cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80069d4:	60da      	str	r2, [r3, #12]
  hspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	621a      	str	r2, [r3, #32]
  hspi->Init.NSS               = SPI_NSS_SOFT;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e2:	619a      	str	r2, [r3, #24]
  hspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.Mode              = SPI_MODE_MASTER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80069f0:	605a      	str	r2, [r3, #4]

  return HAL_SPI_Init(hspi);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fc fb46 	bl	8003084 <HAL_SPI_Init>
 80069f8:	4603      	mov	r3, r0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	40003800 	.word	0x40003800

08006a08 <BSP_SPI2_Send>:
  * @param  pTxData pointer to TX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pTxData, uint32_t Length)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hSpiHandle, pTxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4806      	ldr	r0, [pc, #24]	; (8006a3c <BSP_SPI2_Send+0x34>)
 8006a22:	f7fc fbc1 	bl	80031a8 <HAL_SPI_Transmit>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <BSP_SPI2_Send+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8006a2c:	f06f 0307 	mvn.w	r3, #7
 8006a30:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006a32:	68fb      	ldr	r3, [r7, #12]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	200009a4 	.word	0x200009a4

08006a40 <BSP_SPI2_Recv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Recv(uint8_t *pRxData, uint32_t Length)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hSpiHandle, pRxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	4806      	ldr	r0, [pc, #24]	; (8006a74 <BSP_SPI2_Recv+0x34>)
 8006a5a:	f7fc fd0b 	bl	8003474 <HAL_SPI_Receive>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <BSP_SPI2_Recv+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8006a64:	f06f 0307 	mvn.w	r3, #7
 8006a68:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	200009a4 	.word	0x200009a4

08006a78 <BSP_SPI2_SendRecv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint32_t Legnth)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hSpiHandle, pTxData, pRxData, (uint16_t)Legnth, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	4613      	mov	r3, r2
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	4806      	ldr	r0, [pc, #24]	; (8006ab4 <BSP_SPI2_SendRecv+0x3c>)
 8006a9a:	f7fc fe13 	bl	80036c4 <HAL_SPI_TransmitReceive>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <BSP_SPI2_SendRecv+0x32>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8006aa4:	f06f 0307 	mvn.w	r3, #7
 8006aa8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8006aaa:	697b      	ldr	r3, [r7, #20]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	200009a4 	.word	0x200009a4

08006ab8 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8006abc:	f7fa fa94 	bl	8000fe8 <HAL_GetTick>
 8006ac0:	4603      	mov	r3, r0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <SPI_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi SPI handler
  * @retval None
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08c      	sub	sp, #48	; 0x30
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*** Configure the SPI peripheral ***/
  /* Enable SPI clock */
  NUCLEO_SPI_CLK_ENABLE();
 8006ad0:	4b2e      	ldr	r3, [pc, #184]	; (8006b8c <SPI_MspInit+0xc4>)
 8006ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad4:	4a2d      	ldr	r2, [pc, #180]	; (8006b8c <SPI_MspInit+0xc4>)
 8006ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ada:	6593      	str	r3, [r2, #88]	; 0x58
 8006adc:	4b2b      	ldr	r3, [pc, #172]	; (8006b8c <SPI_MspInit+0xc4>)
 8006ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  NUCLEO_SPI_SCK_GPIO_CLK_ENABLE();
 8006ae8:	4b28      	ldr	r3, [pc, #160]	; (8006b8c <SPI_MspInit+0xc4>)
 8006aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aec:	4a27      	ldr	r2, [pc, #156]	; (8006b8c <SPI_MspInit+0xc4>)
 8006aee:	f043 0301 	orr.w	r3, r3, #1
 8006af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006af4:	4b25      	ldr	r3, [pc, #148]	; (8006b8c <SPI_MspInit+0xc4>)
 8006af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	697b      	ldr	r3, [r7, #20]
  NUCLEO_SPI_MOSI_GPIO_CLK_ENABLE();
 8006b00:	4b22      	ldr	r3, [pc, #136]	; (8006b8c <SPI_MspInit+0xc4>)
 8006b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b04:	4a21      	ldr	r2, [pc, #132]	; (8006b8c <SPI_MspInit+0xc4>)
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b0c:	4b1f      	ldr	r3, [pc, #124]	; (8006b8c <SPI_MspInit+0xc4>)
 8006b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPI_MISO_GPIO_CLK_ENABLE();
 8006b18:	4b1c      	ldr	r3, [pc, #112]	; (8006b8c <SPI_MspInit+0xc4>)
 8006b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1c:	4a1b      	ldr	r2, [pc, #108]	; (8006b8c <SPI_MspInit+0xc4>)
 8006b1e:	f043 0301 	orr.w	r3, r3, #1
 8006b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b24:	4b19      	ldr	r3, [pc, #100]	; (8006b8c <SPI_MspInit+0xc4>)
 8006b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]

  /* Configure SPI SCK */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_SCK_PIN;
 8006b30:	2320      	movs	r3, #32
 8006b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006b34:	2302      	movs	r3, #2
 8006b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = NUCLEO_SPI_SCK_AF;
 8006b40:	2305      	movs	r3, #5
 8006b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006b44:	f107 031c 	add.w	r3, r7, #28
 8006b48:	4619      	mov	r1, r3
 8006b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b4e:	f7fb f8b7 	bl	8001cc0 <HAL_GPIO_Init>

  /* Configure SPI MOSI */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_MOSI_PIN;
 8006b52:	2380      	movs	r3, #128	; 0x80
 8006b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MOSI_AF;
 8006b56:	2305      	movs	r3, #5
 8006b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006b5e:	f107 031c 	add.w	r3, r7, #28
 8006b62:	4619      	mov	r1, r3
 8006b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b68:	f7fb f8aa 	bl	8001cc0 <HAL_GPIO_Init>

  /* Configure SPI MISO */
  GPIO_InitStruct.Pin = NUCLEO_SPI_MISO_PIN;
 8006b6c:	2340      	movs	r3, #64	; 0x40
 8006b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MISO_AF;
 8006b70:	2305      	movs	r3, #5
 8006b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006b74:	f107 031c 	add.w	r3, r7, #28
 8006b78:	4619      	mov	r1, r3
 8006b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b7e:	f7fb f89f 	bl	8001cc0 <HAL_GPIO_Init>
}
 8006b82:	bf00      	nop
 8006b84:	3730      	adds	r7, #48	; 0x30
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40021000 	.word	0x40021000

08006b90 <USER_CheckStatus>:
#define DISABLE_SD_INIT
/* Private variables ---------------------------------------------------------*/
/* Disk status */
static volatile DSTATUS Stat = STA_NOINIT;
static DSTATUS USER_CheckStatus(BYTE lun)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <USER_CheckStatus+0x3c>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]
  // TO DO:
  if(MY_SD_GetCardState(0) == BSP_ERROR_NONE)
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	f7fe ffc7 	bl	8005b34 <MY_SD_GetCardState>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d107      	bne.n	8006bbc <USER_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 8006bac:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <USER_CheckStatus+0x3c>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	f023 0301 	bic.w	r3, r3, #1
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <USER_CheckStatus+0x3c>)
 8006bba:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006bbc:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <USER_CheckStatus+0x3c>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	b2db      	uxtb	r3, r3
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	2000000c 	.word	0x2000000c

08006bd0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <USER_initialize+0x30>)
 8006bdc:	2201      	movs	r2, #1
 8006bde:	701a      	strb	r2, [r3, #0]
	  if(MY_SD_Init(0) == BSP_ERROR_NONE)
	  {
		Stat = USER_CheckStatus(pdrv);
	  }
	#else
	  Stat = USER_CheckStatus(pdrv);
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff ffd4 	bl	8006b90 <USER_CheckStatus>
 8006be8:	4603      	mov	r3, r0
 8006bea:	461a      	mov	r2, r3
 8006bec:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <USER_initialize+0x30>)
 8006bee:	701a      	strb	r2, [r3, #0]
	#endif
    return Stat;
 8006bf0:	4b03      	ldr	r3, [pc, #12]	; (8006c00 <USER_initialize+0x30>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	2000000c 	.word	0x2000000c

08006c04 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_CheckStatus(pdrv);
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff ffbd 	bl	8006b90 <USER_CheckStatus>
 8006c16:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	DRESULT res = RES_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_ReadBlocks(0, (uint32_t*)buff,
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	f7fe fdac 	bl	8005798 <MY_SD_ReadBlocks>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d108      	bne.n	8006c58 <USER_read+0x38>
						   (uint32_t) (sector),
						   count) == BSP_ERROR_NONE)
	  {
		/* wait until the read operation is finished */
		while( MY_SD_GetCardState(0)!= BSP_ERROR_NONE)
 8006c46:	bf00      	nop
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f7fe ff73 	bl	8005b34 <MY_SD_GetCardState>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f9      	bne.n	8006c48 <USER_read+0x28>
		{
		}
		res = RES_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	75fb      	strb	r3, [r7, #23]
	  }
	  return res;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END READ */
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b086      	sub	sp, #24
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	603b      	str	r3, [r7, #0]
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	DRESULT res = RES_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_WriteBlocks(0, (uint32_t*)buff,
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	f7fe fe57 	bl	8005930 <MY_SD_WriteBlocks>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d108      	bne.n	8006c9a <USER_write+0x38>
	                        (uint32_t)(sector),
	                        count) == BSP_ERROR_NONE)
	  {
	  /* wait until the Write operation is finished */
	    while(MY_SD_GetCardState(0) != BSP_ERROR_NONE)
 8006c88:	bf00      	nop
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	f7fe ff52 	bl	8005b34 <MY_SD_GetCardState>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f9      	bne.n	8006c8a <USER_write+0x28>
	    {
	    }
	    res = RES_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]
	  }

	  return res;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END WRITE */
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b096      	sub	sp, #88	; 0x58
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	603a      	str	r2, [r7, #0]
 8006cae:	71fb      	strb	r3, [r7, #7]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  SD_CardInfo_t CardInfo;

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006cba:	4b26      	ldr	r3, [pc, #152]	; (8006d54 <USER_ioctl+0xb0>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <USER_ioctl+0x28>
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e03f      	b.n	8006d4c <USER_ioctl+0xa8>

	  switch (cmd)
 8006ccc:	79bb      	ldrb	r3, [r7, #6]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d837      	bhi.n	8006d42 <USER_ioctl+0x9e>
 8006cd2:	a201      	add	r2, pc, #4	; (adr r2, 8006cd8 <USER_ioctl+0x34>)
 8006cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd8:	08006ce9 	.word	0x08006ce9
 8006cdc:	08006cf1 	.word	0x08006cf1
 8006ce0:	08006d0b 	.word	0x08006d0b
 8006ce4:	08006d27 	.word	0x08006d27
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8006cee:	e02b      	b.n	8006d48 <USER_ioctl+0xa4>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	f7fe ff54 	bl	8005ba4 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8006d08:	e01e      	b.n	8006d48 <USER_ioctl+0xa4>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8006d0a:	f107 0308 	add.w	r3, r7, #8
 8006d0e:	4619      	mov	r1, r3
 8006d10:	2000      	movs	r0, #0
 8006d12:	f7fe ff47 	bl	8005ba4 <MY_SD_GetCardInfo>
	    *(WORD*)buff = CardInfo.LogBlockSize;
 8006d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8006d24:	e010      	b.n	8006d48 <USER_ioctl+0xa4>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8006d26:	f107 0308 	add.w	r3, r7, #8
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	f7fe ff39 	bl	8005ba4 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d34:	0a5a      	lsrs	r2, r3, #9
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8006d40:	e002      	b.n	8006d48 <USER_ioctl+0xa4>

	  default:
	    res = RES_PARERR;
 8006d42:	2304      	movs	r3, #4
 8006d44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  }

	  return res;
 8006d48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END IOCTL */
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3758      	adds	r7, #88	; 0x58
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	2000000c 	.word	0x2000000c

08006d58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	4a08      	ldr	r2, [pc, #32]	; (8006d88 <disk_status+0x30>)
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	79fa      	ldrb	r2, [r7, #7]
 8006d70:	4905      	ldr	r1, [pc, #20]	; (8006d88 <disk_status+0x30>)
 8006d72:	440a      	add	r2, r1
 8006d74:	7a12      	ldrb	r2, [r2, #8]
 8006d76:	4610      	mov	r0, r2
 8006d78:	4798      	blx	r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20000080 	.word	0x20000080

08006d8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <disk_initialize+0x48>)
 8006d9e:	5cd3      	ldrb	r3, [r2, r3]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d111      	bne.n	8006dc8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	4a0b      	ldr	r2, [pc, #44]	; (8006dd4 <disk_initialize+0x48>)
 8006da8:	2101      	movs	r1, #1
 8006daa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <disk_initialize+0x48>)
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	79fa      	ldrb	r2, [r7, #7]
 8006dba:	4906      	ldr	r1, [pc, #24]	; (8006dd4 <disk_initialize+0x48>)
 8006dbc:	440a      	add	r2, r1
 8006dbe:	7a12      	ldrb	r2, [r2, #8]
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000080 	.word	0x20000080

08006dd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006dd8:	b590      	push	{r4, r7, lr}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	4603      	mov	r3, r0
 8006de6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	4a0a      	ldr	r2, [pc, #40]	; (8006e14 <disk_read+0x3c>)
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	689c      	ldr	r4, [r3, #8]
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	4a07      	ldr	r2, [pc, #28]	; (8006e14 <disk_read+0x3c>)
 8006df8:	4413      	add	r3, r2
 8006dfa:	7a18      	ldrb	r0, [r3, #8]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	47a0      	blx	r4
 8006e04:	4603      	mov	r3, r0
 8006e06:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd90      	pop	{r4, r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000080 	.word	0x20000080

08006e18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006e18:	b590      	push	{r4, r7, lr}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	4603      	mov	r3, r0
 8006e26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	4a0a      	ldr	r2, [pc, #40]	; (8006e54 <disk_write+0x3c>)
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	68dc      	ldr	r4, [r3, #12]
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	4a07      	ldr	r2, [pc, #28]	; (8006e54 <disk_write+0x3c>)
 8006e38:	4413      	add	r3, r2
 8006e3a:	7a18      	ldrb	r0, [r3, #8]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	47a0      	blx	r4
 8006e44:	4603      	mov	r3, r0
 8006e46:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd90      	pop	{r4, r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000080 	.word	0x20000080

08006e58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4603      	mov	r3, r0
 8006e60:	603a      	str	r2, [r7, #0]
 8006e62:	71fb      	strb	r3, [r7, #7]
 8006e64:	460b      	mov	r3, r1
 8006e66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	4a09      	ldr	r2, [pc, #36]	; (8006e90 <disk_ioctl+0x38>)
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	79fa      	ldrb	r2, [r7, #7]
 8006e76:	4906      	ldr	r1, [pc, #24]	; (8006e90 <disk_ioctl+0x38>)
 8006e78:	440a      	add	r2, r1
 8006e7a:	7a10      	ldrb	r0, [r2, #8]
 8006e7c:	79b9      	ldrb	r1, [r7, #6]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	4798      	blx	r3
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
  return res;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20000080 	.word	0x20000080

08006e94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006ea4:	89fb      	ldrh	r3, [r7, #14]
 8006ea6:	021b      	lsls	r3, r3, #8
 8006ea8:	b21a      	sxth	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	b21b      	sxth	r3, r3
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	b21b      	sxth	r3, r3
 8006eb4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006eb6:	89fb      	ldrh	r3, [r7, #14]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3303      	adds	r3, #3
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	3202      	adds	r2, #2
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	3201      	adds	r2, #1
 8006eea:	7812      	ldrb	r2, [r2, #0]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	021b      	lsls	r3, r3, #8
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7812      	ldrb	r2, [r2, #0]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
	return rv;
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	887a      	ldrh	r2, [r7, #2]
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	887b      	ldrh	r3, [r7, #2]
 8006f24:	0a1b      	lsrs	r3, r3, #8
 8006f26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	607a      	str	r2, [r7, #4]
 8006f2e:	887a      	ldrh	r2, [r7, #2]
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	701a      	strb	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	b2d2      	uxtb	r2, r2
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	0a1b      	lsrs	r3, r3, #8
 8006f5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	b2d2      	uxtb	r2, r2
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	0a1b      	lsrs	r3, r3, #8
 8006f6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	0a1b      	lsrs	r3, r3, #8
 8006f7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	701a      	strb	r2, [r3, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00d      	beq.n	8006fce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	1c53      	adds	r3, r2, #1
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	1c59      	adds	r1, r3, #1
 8006fbc:	6179      	str	r1, [r7, #20]
 8006fbe:	7812      	ldrb	r2, [r2, #0]
 8006fc0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	607b      	str	r3, [r7, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f1      	bne.n	8006fb2 <mem_cpy+0x1a>
	}
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006fda:	b480      	push	{r7}
 8006fdc:	b087      	sub	sp, #28
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	617a      	str	r2, [r7, #20]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1f3      	bne.n	8006fea <mem_set+0x10>
}
 8007002:	bf00      	nop
 8007004:	371c      	adds	r7, #28
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800700e:	b480      	push	{r7}
 8007010:	b089      	sub	sp, #36	; 0x24
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	61fb      	str	r3, [r7, #28]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	61fa      	str	r2, [r7, #28]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	4619      	mov	r1, r3
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	61ba      	str	r2, [r7, #24]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	1acb      	subs	r3, r1, r3
 800703a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3b01      	subs	r3, #1
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <mem_cmp+0x40>
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0eb      	beq.n	8007026 <mem_cmp+0x18>

	return r;
 800704e:	697b      	ldr	r3, [r7, #20]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3724      	adds	r7, #36	; 0x24
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007066:	e002      	b.n	800706e <chk_chr+0x12>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3301      	adds	r3, #1
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d005      	beq.n	8007082 <chk_chr+0x26>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	4293      	cmp	r3, r2
 8007080:	d1f2      	bne.n	8007068 <chk_chr+0xc>
	return *str;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	781b      	ldrb	r3, [r3, #0]
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
	...

08007094 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800709e:	2300      	movs	r3, #0
 80070a0:	60bb      	str	r3, [r7, #8]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	e029      	b.n	80070fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80070a8:	4a27      	ldr	r2, [pc, #156]	; (8007148 <chk_lock+0xb4>)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	4413      	add	r3, r2
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01d      	beq.n	80070f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80070b6:	4a24      	ldr	r2, [pc, #144]	; (8007148 <chk_lock+0xb4>)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	4413      	add	r3, r2
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d116      	bne.n	80070f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80070c8:	4a1f      	ldr	r2, [pc, #124]	; (8007148 <chk_lock+0xb4>)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	4413      	add	r3, r2
 80070d0:	3304      	adds	r3, #4
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80070d8:	429a      	cmp	r2, r3
 80070da:	d10c      	bne.n	80070f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80070dc:	4a1a      	ldr	r2, [pc, #104]	; (8007148 <chk_lock+0xb4>)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	4413      	add	r3, r2
 80070e4:	3308      	adds	r3, #8
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d102      	bne.n	80070f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80070f0:	e007      	b.n	8007102 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80070f2:	2301      	movs	r3, #1
 80070f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d9d2      	bls.n	80070a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d109      	bne.n	800711c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <chk_lock+0x80>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d101      	bne.n	8007118 <chk_lock+0x84>
 8007114:	2300      	movs	r3, #0
 8007116:	e010      	b.n	800713a <chk_lock+0xa6>
 8007118:	2312      	movs	r3, #18
 800711a:	e00e      	b.n	800713a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d108      	bne.n	8007134 <chk_lock+0xa0>
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <chk_lock+0xb4>)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	4413      	add	r3, r2
 800712a:	330c      	adds	r3, #12
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007132:	d101      	bne.n	8007138 <chk_lock+0xa4>
 8007134:	2310      	movs	r3, #16
 8007136:	e000      	b.n	800713a <chk_lock+0xa6>
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20000060 	.word	0x20000060

0800714c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007152:	2300      	movs	r3, #0
 8007154:	607b      	str	r3, [r7, #4]
 8007156:	e002      	b.n	800715e <enq_lock+0x12>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3301      	adds	r3, #1
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d806      	bhi.n	8007172 <enq_lock+0x26>
 8007164:	4a09      	ldr	r2, [pc, #36]	; (800718c <enq_lock+0x40>)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	4413      	add	r3, r2
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f2      	bne.n	8007158 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b02      	cmp	r3, #2
 8007176:	bf14      	ite	ne
 8007178:	2301      	movne	r3, #1
 800717a:	2300      	moveq	r3, #0
 800717c:	b2db      	uxtb	r3, r3
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000060 	.word	0x20000060

08007190 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	e01f      	b.n	80071e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80071a0:	4a41      	ldr	r2, [pc, #260]	; (80072a8 <inc_lock+0x118>)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	4413      	add	r3, r2
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d113      	bne.n	80071da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80071b2:	4a3d      	ldr	r2, [pc, #244]	; (80072a8 <inc_lock+0x118>)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	4413      	add	r3, r2
 80071ba:	3304      	adds	r3, #4
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d109      	bne.n	80071da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80071c6:	4a38      	ldr	r2, [pc, #224]	; (80072a8 <inc_lock+0x118>)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	4413      	add	r3, r2
 80071ce:	3308      	adds	r3, #8
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d006      	beq.n	80071e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3301      	adds	r3, #1
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d9dc      	bls.n	80071a0 <inc_lock+0x10>
 80071e6:	e000      	b.n	80071ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80071e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d132      	bne.n	8007256 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	e002      	b.n	80071fc <inc_lock+0x6c>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d806      	bhi.n	8007210 <inc_lock+0x80>
 8007202:	4a29      	ldr	r2, [pc, #164]	; (80072a8 <inc_lock+0x118>)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	4413      	add	r3, r2
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1f2      	bne.n	80071f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d101      	bne.n	800721a <inc_lock+0x8a>
 8007216:	2300      	movs	r3, #0
 8007218:	e040      	b.n	800729c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4922      	ldr	r1, [pc, #136]	; (80072a8 <inc_lock+0x118>)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	440b      	add	r3, r1
 8007226:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	491e      	ldr	r1, [pc, #120]	; (80072a8 <inc_lock+0x118>)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	440b      	add	r3, r1
 8007234:	3304      	adds	r3, #4
 8007236:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	695a      	ldr	r2, [r3, #20]
 800723c:	491a      	ldr	r1, [pc, #104]	; (80072a8 <inc_lock+0x118>)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	440b      	add	r3, r1
 8007244:	3308      	adds	r3, #8
 8007246:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007248:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <inc_lock+0x118>)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	4413      	add	r3, r2
 8007250:	330c      	adds	r3, #12
 8007252:	2200      	movs	r2, #0
 8007254:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d009      	beq.n	8007270 <inc_lock+0xe0>
 800725c:	4a12      	ldr	r2, [pc, #72]	; (80072a8 <inc_lock+0x118>)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	4413      	add	r3, r2
 8007264:	330c      	adds	r3, #12
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <inc_lock+0xe0>
 800726c:	2300      	movs	r3, #0
 800726e:	e015      	b.n	800729c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d108      	bne.n	8007288 <inc_lock+0xf8>
 8007276:	4a0c      	ldr	r2, [pc, #48]	; (80072a8 <inc_lock+0x118>)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	4413      	add	r3, r2
 800727e:	330c      	adds	r3, #12
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	3301      	adds	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	e001      	b.n	800728c <inc_lock+0xfc>
 8007288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800728c:	4906      	ldr	r1, [pc, #24]	; (80072a8 <inc_lock+0x118>)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	440b      	add	r3, r1
 8007294:	330c      	adds	r3, #12
 8007296:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	20000060 	.word	0x20000060

080072ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d825      	bhi.n	800730c <dec_lock+0x60>
		n = Files[i].ctr;
 80072c0:	4a17      	ldr	r2, [pc, #92]	; (8007320 <dec_lock+0x74>)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	4413      	add	r3, r2
 80072c8:	330c      	adds	r3, #12
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80072ce:	89fb      	ldrh	r3, [r7, #14]
 80072d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d4:	d101      	bne.n	80072da <dec_lock+0x2e>
 80072d6:	2300      	movs	r3, #0
 80072d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80072da:	89fb      	ldrh	r3, [r7, #14]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <dec_lock+0x3a>
 80072e0:	89fb      	ldrh	r3, [r7, #14]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80072e6:	4a0e      	ldr	r2, [pc, #56]	; (8007320 <dec_lock+0x74>)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	4413      	add	r3, r2
 80072ee:	330c      	adds	r3, #12
 80072f0:	89fa      	ldrh	r2, [r7, #14]
 80072f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80072f4:	89fb      	ldrh	r3, [r7, #14]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d105      	bne.n	8007306 <dec_lock+0x5a>
 80072fa:	4a09      	ldr	r2, [pc, #36]	; (8007320 <dec_lock+0x74>)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	4413      	add	r3, r2
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	737b      	strb	r3, [r7, #13]
 800730a:	e001      	b.n	8007310 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800730c:	2302      	movs	r3, #2
 800730e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007310:	7b7b      	ldrb	r3, [r7, #13]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	20000060 	.word	0x20000060

08007324 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	e010      	b.n	8007354 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007332:	4a0d      	ldr	r2, [pc, #52]	; (8007368 <clear_lock+0x44>)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	4413      	add	r3, r2
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	429a      	cmp	r2, r3
 8007340:	d105      	bne.n	800734e <clear_lock+0x2a>
 8007342:	4a09      	ldr	r2, [pc, #36]	; (8007368 <clear_lock+0x44>)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	4413      	add	r3, r2
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d9eb      	bls.n	8007332 <clear_lock+0xe>
	}
}
 800735a:	bf00      	nop
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000060 	.word	0x20000060

0800736c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	78db      	ldrb	r3, [r3, #3]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d034      	beq.n	80073ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	7858      	ldrb	r0, [r3, #1]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007390:	2301      	movs	r3, #1
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	f7ff fd40 	bl	8006e18 <disk_write>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
 80073a2:	e022      	b.n	80073ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	1ad2      	subs	r2, r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d217      	bcs.n	80073ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	789b      	ldrb	r3, [r3, #2]
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	e010      	b.n	80073e4 <sync_window+0x78>
					wsect += fs->fsize;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4413      	add	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	7858      	ldrb	r0, [r3, #1]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073d6:	2301      	movs	r3, #1
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	f7ff fd1d 	bl	8006e18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	613b      	str	r3, [r7, #16]
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d8eb      	bhi.n	80073c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d01b      	beq.n	8007444 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff ffad 	bl	800736c <sync_window>
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d113      	bne.n	8007444 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	7858      	ldrb	r0, [r3, #1]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007426:	2301      	movs	r3, #1
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	f7ff fcd5 	bl	8006dd8 <disk_read>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007434:	f04f 33ff 	mov.w	r3, #4294967295
 8007438:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800743a:	2301      	movs	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff ff87 	bl	800736c <sync_window>
 800745e:	4603      	mov	r3, r0
 8007460:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d158      	bne.n	800751a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b03      	cmp	r3, #3
 800746e:	d148      	bne.n	8007502 <sync_fs+0xb2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	791b      	ldrb	r3, [r3, #4]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d144      	bne.n	8007502 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3330      	adds	r3, #48	; 0x30
 800747c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007480:	2100      	movs	r1, #0
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fda9 	bl	8006fda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3330      	adds	r3, #48	; 0x30
 800748c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007490:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff fd38 	bl	8006f0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3330      	adds	r3, #48	; 0x30
 800749e:	4921      	ldr	r1, [pc, #132]	; (8007524 <sync_fs+0xd4>)
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff fd4d 	bl	8006f40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3330      	adds	r3, #48	; 0x30
 80074aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80074ae:	491e      	ldr	r1, [pc, #120]	; (8007528 <sync_fs+0xd8>)
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff fd45 	bl	8006f40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3330      	adds	r3, #48	; 0x30
 80074ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	4619      	mov	r1, r3
 80074c4:	4610      	mov	r0, r2
 80074c6:	f7ff fd3b 	bl	8006f40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3330      	adds	r3, #48	; 0x30
 80074ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f7ff fd31 	bl	8006f40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	7858      	ldrb	r0, [r3, #1]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f6:	2301      	movs	r3, #1
 80074f8:	f7ff fc8e 	bl	8006e18 <disk_write>
			fs->fsi_flag = 0;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	2200      	movs	r2, #0
 8007508:	2100      	movs	r1, #0
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff fca4 	bl	8006e58 <disk_ioctl>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <sync_fs+0xca>
 8007516:	2301      	movs	r3, #1
 8007518:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	41615252 	.word	0x41615252
 8007528:	61417272 	.word	0x61417272

0800752c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	3b02      	subs	r3, #2
 800753a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	3b02      	subs	r3, #2
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d301      	bcc.n	800754c <clust2sect+0x20>
 8007548:	2300      	movs	r3, #0
 800754a:	e008      	b.n	800755e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	895b      	ldrh	r3, [r3, #10]
 8007550:	461a      	mov	r2, r3
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	fb03 f202 	mul.w	r2, r3, r2
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755c:	4413      	add	r3, r2
}
 800755e:	4618      	mov	r0, r3
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b086      	sub	sp, #24
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d904      	bls.n	800758a <get_fat+0x20>
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d302      	bcc.n	8007590 <get_fat+0x26>
		val = 1;	/* Internal error */
 800758a:	2301      	movs	r3, #1
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e08c      	b.n	80076aa <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007590:	f04f 33ff 	mov.w	r3, #4294967295
 8007594:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d045      	beq.n	800762a <get_fat+0xc0>
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d05d      	beq.n	800765e <get_fat+0xf4>
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d177      	bne.n	8007696 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	085b      	lsrs	r3, r3, #1
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4413      	add	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	6a1a      	ldr	r2, [r3, #32]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	0a5b      	lsrs	r3, r3, #9
 80075bc:	4413      	add	r3, r2
 80075be:	4619      	mov	r1, r3
 80075c0:	6938      	ldr	r0, [r7, #16]
 80075c2:	f7ff ff17 	bl	80073f4 <move_window>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d167      	bne.n	800769c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	60fa      	str	r2, [r7, #12]
 80075d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	4413      	add	r3, r2
 80075da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075de:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	0a5b      	lsrs	r3, r3, #9
 80075e8:	4413      	add	r3, r2
 80075ea:	4619      	mov	r1, r3
 80075ec:	6938      	ldr	r0, [r7, #16]
 80075ee:	f7ff ff01 	bl	80073f4 <move_window>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d153      	bne.n	80076a0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4413      	add	r3, r2
 8007602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	461a      	mov	r2, r3
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	4313      	orrs	r3, r2
 800760e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <get_fat+0xb6>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	091b      	lsrs	r3, r3, #4
 800761e:	e002      	b.n	8007626 <get_fat+0xbc>
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007626:	617b      	str	r3, [r7, #20]
			break;
 8007628:	e03f      	b.n	80076aa <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	6a1a      	ldr	r2, [r3, #32]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	0a1b      	lsrs	r3, r3, #8
 8007632:	4413      	add	r3, r2
 8007634:	4619      	mov	r1, r3
 8007636:	6938      	ldr	r0, [r7, #16]
 8007638:	f7ff fedc 	bl	80073f4 <move_window>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d130      	bne.n	80076a4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007650:	4413      	add	r3, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fc1e 	bl	8006e94 <ld_word>
 8007658:	4603      	mov	r3, r0
 800765a:	617b      	str	r3, [r7, #20]
			break;
 800765c:	e025      	b.n	80076aa <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	6a1a      	ldr	r2, [r3, #32]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	09db      	lsrs	r3, r3, #7
 8007666:	4413      	add	r3, r2
 8007668:	4619      	mov	r1, r3
 800766a:	6938      	ldr	r0, [r7, #16]
 800766c:	f7ff fec2 	bl	80073f4 <move_window>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d118      	bne.n	80076a8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007684:	4413      	add	r3, r2
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff fc1c 	bl	8006ec4 <ld_dword>
 800768c:	4603      	mov	r3, r0
 800768e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007692:	617b      	str	r3, [r7, #20]
			break;
 8007694:	e009      	b.n	80076aa <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007696:	2301      	movs	r3, #1
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	e006      	b.n	80076aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800769c:	bf00      	nop
 800769e:	e004      	b.n	80076aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076a0:	bf00      	nop
 80076a2:	e002      	b.n	80076aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80076a4:	bf00      	nop
 80076a6:	e000      	b.n	80076aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80076a8:	bf00      	nop
		}
	}

	return val;
 80076aa:	697b      	ldr	r3, [r7, #20]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80076b4:	b590      	push	{r4, r7, lr}
 80076b6:	b089      	sub	sp, #36	; 0x24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80076c0:	2302      	movs	r3, #2
 80076c2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	f240 80d6 	bls.w	8007878 <put_fat+0x1c4>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	f080 80d0 	bcs.w	8007878 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d073      	beq.n	80077c8 <put_fat+0x114>
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	f000 8091 	beq.w	8007808 <put_fat+0x154>
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	f040 80c6 	bne.w	8007878 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	61bb      	str	r3, [r7, #24]
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	085b      	lsrs	r3, r3, #1
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	4413      	add	r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a1a      	ldr	r2, [r3, #32]
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	0a5b      	lsrs	r3, r3, #9
 8007702:	4413      	add	r3, r2
 8007704:	4619      	mov	r1, r3
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff fe74 	bl	80073f4 <move_window>
 800770c:	4603      	mov	r3, r0
 800770e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007710:	7ffb      	ldrb	r3, [r7, #31]
 8007712:	2b00      	cmp	r3, #0
 8007714:	f040 80a9 	bne.w	800786a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	1c59      	adds	r1, r3, #1
 8007722:	61b9      	str	r1, [r7, #24]
 8007724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007728:	4413      	add	r3, r2
 800772a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00d      	beq.n	8007752 <put_fat+0x9e>
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b25b      	sxtb	r3, r3
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	b25a      	sxtb	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	b25b      	sxtb	r3, r3
 800774a:	4313      	orrs	r3, r2
 800774c:	b25b      	sxtb	r3, r3
 800774e:	b2db      	uxtb	r3, r3
 8007750:	e001      	b.n	8007756 <put_fat+0xa2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a1a      	ldr	r2, [r3, #32]
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	0a5b      	lsrs	r3, r3, #9
 8007768:	4413      	add	r3, r2
 800776a:	4619      	mov	r1, r3
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f7ff fe41 	bl	80073f4 <move_window>
 8007772:	4603      	mov	r3, r0
 8007774:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007776:	7ffb      	ldrb	r3, [r7, #31]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d178      	bne.n	800786e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007788:	4413      	add	r3, r2
 800778a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <put_fat+0xea>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	091b      	lsrs	r3, r3, #4
 800779a:	b2db      	uxtb	r3, r3
 800779c:	e00e      	b.n	80077bc <put_fat+0x108>
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b25b      	sxtb	r3, r3
 80077a4:	f023 030f 	bic.w	r3, r3, #15
 80077a8:	b25a      	sxtb	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	0a1b      	lsrs	r3, r3, #8
 80077ae:	b25b      	sxtb	r3, r3
 80077b0:	f003 030f 	and.w	r3, r3, #15
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	4313      	orrs	r3, r2
 80077b8:	b25b      	sxtb	r3, r3
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2201      	movs	r2, #1
 80077c4:	70da      	strb	r2, [r3, #3]
			break;
 80077c6:	e057      	b.n	8007878 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a1a      	ldr	r2, [r3, #32]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	0a1b      	lsrs	r3, r3, #8
 80077d0:	4413      	add	r3, r2
 80077d2:	4619      	mov	r1, r3
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff fe0d 	bl	80073f4 <move_window>
 80077da:	4603      	mov	r3, r0
 80077dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077de:	7ffb      	ldrb	r3, [r7, #31]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d146      	bne.n	8007872 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80077f2:	4413      	add	r3, r2
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	b292      	uxth	r2, r2
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff fb85 	bl	8006f0a <st_word>
			fs->wflag = 1;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	70da      	strb	r2, [r3, #3]
			break;
 8007806:	e037      	b.n	8007878 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a1a      	ldr	r2, [r3, #32]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	09db      	lsrs	r3, r3, #7
 8007810:	4413      	add	r3, r2
 8007812:	4619      	mov	r1, r3
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f7ff fded 	bl	80073f4 <move_window>
 800781a:	4603      	mov	r3, r0
 800781c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800781e:	7ffb      	ldrb	r3, [r7, #31]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d128      	bne.n	8007876 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007838:	4413      	add	r3, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff fb42 	bl	8006ec4 <ld_dword>
 8007840:	4603      	mov	r3, r0
 8007842:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007846:	4323      	orrs	r3, r4
 8007848:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007858:	4413      	add	r3, r2
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fb6f 	bl	8006f40 <st_dword>
			fs->wflag = 1;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2201      	movs	r2, #1
 8007866:	70da      	strb	r2, [r3, #3]
			break;
 8007868:	e006      	b.n	8007878 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800786a:	bf00      	nop
 800786c:	e004      	b.n	8007878 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800786e:	bf00      	nop
 8007870:	e002      	b.n	8007878 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007872:	bf00      	nop
 8007874:	e000      	b.n	8007878 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007876:	bf00      	nop
		}
	}
	return res;
 8007878:	7ffb      	ldrb	r3, [r7, #31]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3724      	adds	r7, #36	; 0x24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd90      	pop	{r4, r7, pc}

08007882 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b088      	sub	sp, #32
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d904      	bls.n	80078a8 <remove_chain+0x26>
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d301      	bcc.n	80078ac <remove_chain+0x2a>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e04b      	b.n	8007944 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00c      	beq.n	80078cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80078b2:	f04f 32ff 	mov.w	r2, #4294967295
 80078b6:	6879      	ldr	r1, [r7, #4]
 80078b8:	69b8      	ldr	r0, [r7, #24]
 80078ba:	f7ff fefb 	bl	80076b4 <put_fat>
 80078be:	4603      	mov	r3, r0
 80078c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80078c2:	7ffb      	ldrb	r3, [r7, #31]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <remove_chain+0x4a>
 80078c8:	7ffb      	ldrb	r3, [r7, #31]
 80078ca:	e03b      	b.n	8007944 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f7ff fe4b 	bl	800756a <get_fat>
 80078d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d031      	beq.n	8007940 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d101      	bne.n	80078e6 <remove_chain+0x64>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e02e      	b.n	8007944 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ec:	d101      	bne.n	80078f2 <remove_chain+0x70>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e028      	b.n	8007944 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80078f2:	2200      	movs	r2, #0
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	69b8      	ldr	r0, [r7, #24]
 80078f8:	f7ff fedc 	bl	80076b4 <put_fat>
 80078fc:	4603      	mov	r3, r0
 80078fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007900:	7ffb      	ldrb	r3, [r7, #31]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <remove_chain+0x88>
 8007906:	7ffb      	ldrb	r3, [r7, #31]
 8007908:	e01c      	b.n	8007944 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	691a      	ldr	r2, [r3, #16]
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	3b02      	subs	r3, #2
 8007914:	429a      	cmp	r2, r3
 8007916:	d20b      	bcs.n	8007930 <remove_chain+0xae>
			fs->free_clst++;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	791b      	ldrb	r3, [r3, #4]
 8007926:	f043 0301 	orr.w	r3, r3, #1
 800792a:	b2da      	uxtb	r2, r3
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	429a      	cmp	r2, r3
 800793c:	d3c6      	bcc.n	80078cc <remove_chain+0x4a>
 800793e:	e000      	b.n	8007942 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007940:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3720      	adds	r7, #32
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10d      	bne.n	800797e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d004      	beq.n	8007978 <create_chain+0x2c>
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	429a      	cmp	r2, r3
 8007976:	d31b      	bcc.n	80079b0 <create_chain+0x64>
 8007978:	2301      	movs	r3, #1
 800797a:	61bb      	str	r3, [r7, #24]
 800797c:	e018      	b.n	80079b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff fdf2 	bl	800756a <get_fat>
 8007986:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d801      	bhi.n	8007992 <create_chain+0x46>
 800798e:	2301      	movs	r3, #1
 8007990:	e070      	b.n	8007a74 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007998:	d101      	bne.n	800799e <create_chain+0x52>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	e06a      	b.n	8007a74 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d201      	bcs.n	80079ac <create_chain+0x60>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	e063      	b.n	8007a74 <create_chain+0x128>
		scl = clst;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	3301      	adds	r3, #1
 80079b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d307      	bcc.n	80079d4 <create_chain+0x88>
				ncl = 2;
 80079c4:	2302      	movs	r3, #2
 80079c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d901      	bls.n	80079d4 <create_chain+0x88>
 80079d0:	2300      	movs	r3, #0
 80079d2:	e04f      	b.n	8007a74 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80079d4:	69f9      	ldr	r1, [r7, #28]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff fdc7 	bl	800756a <get_fat>
 80079dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00e      	beq.n	8007a02 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d003      	beq.n	80079f2 <create_chain+0xa6>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f0:	d101      	bne.n	80079f6 <create_chain+0xaa>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	e03e      	b.n	8007a74 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d1da      	bne.n	80079b4 <create_chain+0x68>
 80079fe:	2300      	movs	r3, #0
 8007a00:	e038      	b.n	8007a74 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007a02:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007a04:	f04f 32ff 	mov.w	r2, #4294967295
 8007a08:	69f9      	ldr	r1, [r7, #28]
 8007a0a:	6938      	ldr	r0, [r7, #16]
 8007a0c:	f7ff fe52 	bl	80076b4 <put_fat>
 8007a10:	4603      	mov	r3, r0
 8007a12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d109      	bne.n	8007a2e <create_chain+0xe2>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007a20:	69fa      	ldr	r2, [r7, #28]
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6938      	ldr	r0, [r7, #16]
 8007a26:	f7ff fe45 	bl	80076b4 <put_fat>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d116      	bne.n	8007a62 <create_chain+0x116>
		fs->last_clst = ncl;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	691a      	ldr	r2, [r3, #16]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	3b02      	subs	r3, #2
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d804      	bhi.n	8007a52 <create_chain+0x106>
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	1e5a      	subs	r2, r3, #1
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	791b      	ldrb	r3, [r3, #4]
 8007a56:	f043 0301 	orr.w	r3, r3, #1
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	711a      	strb	r2, [r3, #4]
 8007a60:	e007      	b.n	8007a72 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d102      	bne.n	8007a6e <create_chain+0x122>
 8007a68:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6c:	e000      	b.n	8007a70 <create_chain+0x124>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007a72:	69fb      	ldr	r3, [r7, #28]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3720      	adds	r7, #32
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	3304      	adds	r3, #4
 8007a92:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	0a5b      	lsrs	r3, r3, #9
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	8952      	ldrh	r2, [r2, #10]
 8007a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1d1a      	adds	r2, r3, #4
 8007aa6:	613a      	str	r2, [r7, #16]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <clmt_clust+0x3a>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e010      	b.n	8007ad8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d307      	bcc.n	8007ace <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007acc:	e7e9      	b.n	8007aa2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007ace:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	4413      	add	r3, r2
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007afa:	d204      	bcs.n	8007b06 <dir_sdi+0x22>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	f003 031f 	and.w	r3, r3, #31
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007b06:	2302      	movs	r3, #2
 8007b08:	e063      	b.n	8007bd2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d106      	bne.n	8007b2a <dir_sdi+0x46>
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d902      	bls.n	8007b2a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10c      	bne.n	8007b4a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	095b      	lsrs	r3, r3, #5
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	8912      	ldrh	r2, [r2, #8]
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d301      	bcc.n	8007b40 <dir_sdi+0x5c>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e048      	b.n	8007bd2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	61da      	str	r2, [r3, #28]
 8007b48:	e029      	b.n	8007b9e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	895b      	ldrh	r3, [r3, #10]
 8007b4e:	025b      	lsls	r3, r3, #9
 8007b50:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b52:	e019      	b.n	8007b88 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6979      	ldr	r1, [r7, #20]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff fd06 	bl	800756a <get_fat>
 8007b5e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b66:	d101      	bne.n	8007b6c <dir_sdi+0x88>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e032      	b.n	8007bd2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d904      	bls.n	8007b7c <dir_sdi+0x98>
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d301      	bcc.n	8007b80 <dir_sdi+0x9c>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	e028      	b.n	8007bd2 <dir_sdi+0xee>
			ofs -= csz;
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d2e1      	bcs.n	8007b54 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007b90:	6979      	ldr	r1, [r7, #20]
 8007b92:	6938      	ldr	r0, [r7, #16]
 8007b94:	f7ff fcca 	bl	800752c <clust2sect>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <dir_sdi+0xcc>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e010      	b.n	8007bd2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	69da      	ldr	r2, [r3, #28]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	0a5b      	lsrs	r3, r3, #9
 8007bb8:	441a      	add	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bca:	441a      	add	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b086      	sub	sp, #24
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	3320      	adds	r3, #32
 8007bf0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <dir_next+0x28>
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c00:	d301      	bcc.n	8007c06 <dir_next+0x2c>
 8007c02:	2304      	movs	r3, #4
 8007c04:	e0aa      	b.n	8007d5c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 8098 	bne.w	8007d42 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10b      	bne.n	8007c3c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	8912      	ldrh	r2, [r2, #8]
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	f0c0 8088 	bcc.w	8007d42 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	61da      	str	r2, [r3, #28]
 8007c38:	2304      	movs	r3, #4
 8007c3a:	e08f      	b.n	8007d5c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	0a5b      	lsrs	r3, r3, #9
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	8952      	ldrh	r2, [r2, #10]
 8007c44:	3a01      	subs	r2, #1
 8007c46:	4013      	ands	r3, r2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d17a      	bne.n	8007d42 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	4619      	mov	r1, r3
 8007c54:	4610      	mov	r0, r2
 8007c56:	f7ff fc88 	bl	800756a <get_fat>
 8007c5a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d801      	bhi.n	8007c66 <dir_next+0x8c>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e07a      	b.n	8007d5c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d101      	bne.n	8007c72 <dir_next+0x98>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e074      	b.n	8007d5c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d358      	bcc.n	8007d2e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d104      	bne.n	8007c8c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	61da      	str	r2, [r3, #28]
 8007c88:	2304      	movs	r3, #4
 8007c8a:	e067      	b.n	8007d5c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	4619      	mov	r1, r3
 8007c94:	4610      	mov	r0, r2
 8007c96:	f7ff fe59 	bl	800794c <create_chain>
 8007c9a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <dir_next+0xcc>
 8007ca2:	2307      	movs	r3, #7
 8007ca4:	e05a      	b.n	8007d5c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <dir_next+0xd6>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e055      	b.n	8007d5c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb6:	d101      	bne.n	8007cbc <dir_next+0xe2>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e04f      	b.n	8007d5c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff fb55 	bl	800736c <sync_window>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <dir_next+0xf2>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e047      	b.n	8007d5c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3330      	adds	r3, #48	; 0x30
 8007cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff f97f 	bl	8006fda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007cdc:	2300      	movs	r3, #0
 8007cde:	613b      	str	r3, [r7, #16]
 8007ce0:	6979      	ldr	r1, [r7, #20]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff fc22 	bl	800752c <clust2sect>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8007cee:	e012      	b.n	8007d16 <dir_next+0x13c>
						fs->wflag = 1;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff fb38 	bl	800736c <sync_window>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <dir_next+0x12c>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e02a      	b.n	8007d5c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	895b      	ldrh	r3, [r3, #10]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d3e6      	bcc.n	8007cf0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	1ad2      	subs	r2, r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007d34:	6979      	ldr	r1, [r7, #20]
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff fbf8 	bl	800752c <clust2sect>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d54:	441a      	add	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007d74:	2100      	movs	r1, #0
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff feb4 	bl	8007ae4 <dir_sdi>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d12b      	bne.n	8007dde <dir_alloc+0x7a>
		n = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f7ff fb2f 	bl	80073f4 <move_window>
 8007d96:	4603      	mov	r3, r0
 8007d98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d11d      	bne.n	8007ddc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2be5      	cmp	r3, #229	; 0xe5
 8007da8:	d004      	beq.n	8007db4 <dir_alloc+0x50>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d107      	bne.n	8007dc4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	3301      	adds	r3, #1
 8007db8:	613b      	str	r3, [r7, #16]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d102      	bne.n	8007dc8 <dir_alloc+0x64>
 8007dc2:	e00c      	b.n	8007dde <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007dc8:	2101      	movs	r1, #1
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff ff05 	bl	8007bda <dir_next>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0d7      	beq.n	8007d8a <dir_alloc+0x26>
 8007dda:	e000      	b.n	8007dde <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007ddc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d101      	bne.n	8007de8 <dir_alloc+0x84>
 8007de4:	2307      	movs	r3, #7
 8007de6:	75fb      	strb	r3, [r7, #23]
	return res;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	331a      	adds	r3, #26
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff f847 	bl	8006e94 <ld_word>
 8007e06:	4603      	mov	r3, r0
 8007e08:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d109      	bne.n	8007e26 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff f83c 	bl	8006e94 <ld_word>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007e26:	68fb      	ldr	r3, [r7, #12]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	331a      	adds	r3, #26
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	b292      	uxth	r2, r2
 8007e44:	4611      	mov	r1, r2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff f85f 	bl	8006f0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d109      	bne.n	8007e68 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f103 0214 	add.w	r2, r3, #20
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	0c1b      	lsrs	r3, r3, #16
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	4619      	mov	r1, r3
 8007e62:	4610      	mov	r0, r2
 8007e64:	f7ff f851 	bl	8006f0a <st_word>
	}
}
 8007e68:	bf00      	nop
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007e7e:	2100      	movs	r1, #0
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff fe2f 	bl	8007ae4 <dir_sdi>
 8007e86:	4603      	mov	r3, r0
 8007e88:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <dir_find+0x24>
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
 8007e92:	e03e      	b.n	8007f12 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6938      	ldr	r0, [r7, #16]
 8007e9c:	f7ff faaa 	bl	80073f4 <move_window>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d12f      	bne.n	8007f0a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <dir_find+0x4e>
 8007eb8:	2304      	movs	r3, #4
 8007eba:	75fb      	strb	r3, [r7, #23]
 8007ebc:	e028      	b.n	8007f10 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	330b      	adds	r3, #11
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	330b      	adds	r3, #11
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10a      	bne.n	8007ef6 <dir_find+0x86>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a18      	ldr	r0, [r3, #32]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3324      	adds	r3, #36	; 0x24
 8007ee8:	220b      	movs	r2, #11
 8007eea:	4619      	mov	r1, r3
 8007eec:	f7ff f88f 	bl	800700e <mem_cmp>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00b      	beq.n	8007f0e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fe6e 	bl	8007bda <dir_next>
 8007efe:	4603      	mov	r3, r0
 8007f00:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0c5      	beq.n	8007e94 <dir_find+0x24>
 8007f08:	e002      	b.n	8007f10 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007f0a:	bf00      	nop
 8007f0c:	e000      	b.n	8007f10 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007f0e:	bf00      	nop

	return res;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007f28:	2101      	movs	r1, #1
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff ff1a 	bl	8007d64 <dir_alloc>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d11c      	bne.n	8007f74 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	68b8      	ldr	r0, [r7, #8]
 8007f42:	f7ff fa57 	bl	80073f4 <move_window>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d111      	bne.n	8007f74 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	2220      	movs	r2, #32
 8007f56:	2100      	movs	r1, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff f83e 	bl	8006fda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a18      	ldr	r0, [r3, #32]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	3324      	adds	r3, #36	; 0x24
 8007f66:	220b      	movs	r2, #11
 8007f68:	4619      	mov	r1, r3
 8007f6a:	f7ff f815 	bl	8006f98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2201      	movs	r2, #1
 8007f72:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3324      	adds	r3, #36	; 0x24
 8007f94:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007f96:	220b      	movs	r2, #11
 8007f98:	2120      	movs	r1, #32
 8007f9a:	68b8      	ldr	r0, [r7, #8]
 8007f9c:	f7ff f81d 	bl	8006fda <mem_set>
	si = i = 0; ni = 8;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	613b      	str	r3, [r7, #16]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	2308      	movs	r3, #8
 8007faa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	617a      	str	r2, [r7, #20]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007fba:	7ffb      	ldrb	r3, [r7, #31]
 8007fbc:	2b20      	cmp	r3, #32
 8007fbe:	d94e      	bls.n	800805e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007fc0:	7ffb      	ldrb	r3, [r7, #31]
 8007fc2:	2b2f      	cmp	r3, #47	; 0x2f
 8007fc4:	d006      	beq.n	8007fd4 <create_name+0x54>
 8007fc6:	7ffb      	ldrb	r3, [r7, #31]
 8007fc8:	2b5c      	cmp	r3, #92	; 0x5c
 8007fca:	d110      	bne.n	8007fee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007fcc:	e002      	b.n	8007fd4 <create_name+0x54>
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	617b      	str	r3, [r7, #20]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	4413      	add	r3, r2
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b2f      	cmp	r3, #47	; 0x2f
 8007fde:	d0f6      	beq.n	8007fce <create_name+0x4e>
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b5c      	cmp	r3, #92	; 0x5c
 8007fea:	d0f0      	beq.n	8007fce <create_name+0x4e>
			break;
 8007fec:	e038      	b.n	8008060 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007fee:	7ffb      	ldrb	r3, [r7, #31]
 8007ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ff2:	d003      	beq.n	8007ffc <create_name+0x7c>
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d30c      	bcc.n	8008016 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	2b0b      	cmp	r3, #11
 8008000:	d002      	beq.n	8008008 <create_name+0x88>
 8008002:	7ffb      	ldrb	r3, [r7, #31]
 8008004:	2b2e      	cmp	r3, #46	; 0x2e
 8008006:	d001      	beq.n	800800c <create_name+0x8c>
 8008008:	2306      	movs	r3, #6
 800800a:	e044      	b.n	8008096 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800800c:	2308      	movs	r3, #8
 800800e:	613b      	str	r3, [r7, #16]
 8008010:	230b      	movs	r3, #11
 8008012:	61bb      	str	r3, [r7, #24]
			continue;
 8008014:	e022      	b.n	800805c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008016:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800801a:	2b00      	cmp	r3, #0
 800801c:	da04      	bge.n	8008028 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800801e:	7ffb      	ldrb	r3, [r7, #31]
 8008020:	3b80      	subs	r3, #128	; 0x80
 8008022:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <create_name+0x120>)
 8008024:	5cd3      	ldrb	r3, [r2, r3]
 8008026:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008028:	7ffb      	ldrb	r3, [r7, #31]
 800802a:	4619      	mov	r1, r3
 800802c:	481d      	ldr	r0, [pc, #116]	; (80080a4 <create_name+0x124>)
 800802e:	f7ff f815 	bl	800705c <chk_chr>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <create_name+0xbc>
 8008038:	2306      	movs	r3, #6
 800803a:	e02c      	b.n	8008096 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800803c:	7ffb      	ldrb	r3, [r7, #31]
 800803e:	2b60      	cmp	r3, #96	; 0x60
 8008040:	d905      	bls.n	800804e <create_name+0xce>
 8008042:	7ffb      	ldrb	r3, [r7, #31]
 8008044:	2b7a      	cmp	r3, #122	; 0x7a
 8008046:	d802      	bhi.n	800804e <create_name+0xce>
 8008048:	7ffb      	ldrb	r3, [r7, #31]
 800804a:	3b20      	subs	r3, #32
 800804c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	613a      	str	r2, [r7, #16]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	4413      	add	r3, r2
 8008058:	7ffa      	ldrb	r2, [r7, #31]
 800805a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800805c:	e7a6      	b.n	8007fac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800805e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	441a      	add	r2, r3
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <create_name+0xf4>
 8008070:	2306      	movs	r3, #6
 8008072:	e010      	b.n	8008096 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2be5      	cmp	r3, #229	; 0xe5
 800807a:	d102      	bne.n	8008082 <create_name+0x102>
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2205      	movs	r2, #5
 8008080:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008082:	7ffb      	ldrb	r3, [r7, #31]
 8008084:	2b20      	cmp	r3, #32
 8008086:	d801      	bhi.n	800808c <create_name+0x10c>
 8008088:	2204      	movs	r2, #4
 800808a:	e000      	b.n	800808e <create_name+0x10e>
 800808c:	2200      	movs	r2, #0
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	330b      	adds	r3, #11
 8008092:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008094:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008096:	4618      	mov	r0, r3
 8008098:	3720      	adds	r7, #32
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	08009e20 	.word	0x08009e20
 80080a4:	08009db4 	.word	0x08009db4

080080a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80080bc:	e002      	b.n	80080c4 <follow_path+0x1c>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	3301      	adds	r3, #1
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b2f      	cmp	r3, #47	; 0x2f
 80080ca:	d0f8      	beq.n	80080be <follow_path+0x16>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b5c      	cmp	r3, #92	; 0x5c
 80080d2:	d0f4      	beq.n	80080be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2200      	movs	r2, #0
 80080d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	2b1f      	cmp	r3, #31
 80080e0:	d80a      	bhi.n	80080f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2280      	movs	r2, #128	; 0x80
 80080e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80080ea:	2100      	movs	r1, #0
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff fcf9 	bl	8007ae4 <dir_sdi>
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]
 80080f6:	e043      	b.n	8008180 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080f8:	463b      	mov	r3, r7
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff ff3f 	bl	8007f80 <create_name>
 8008102:	4603      	mov	r3, r0
 8008104:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d134      	bne.n	8008176 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff feaf 	bl	8007e70 <dir_find>
 8008112:	4603      	mov	r3, r0
 8008114:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800811c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00a      	beq.n	800813a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008124:	7dfb      	ldrb	r3, [r7, #23]
 8008126:	2b04      	cmp	r3, #4
 8008128:	d127      	bne.n	800817a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b00      	cmp	r3, #0
 8008132:	d122      	bne.n	800817a <follow_path+0xd2>
 8008134:	2305      	movs	r3, #5
 8008136:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008138:	e01f      	b.n	800817a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800813a:	7afb      	ldrb	r3, [r7, #11]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d11c      	bne.n	800817e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	799b      	ldrb	r3, [r3, #6]
 8008148:	f003 0310 	and.w	r3, r3, #16
 800814c:	2b00      	cmp	r3, #0
 800814e:	d102      	bne.n	8008156 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008150:	2305      	movs	r3, #5
 8008152:	75fb      	strb	r3, [r7, #23]
 8008154:	e014      	b.n	8008180 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008164:	4413      	add	r3, r2
 8008166:	4619      	mov	r1, r3
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fe42 	bl	8007df2 <ld_clust>
 800816e:	4602      	mov	r2, r0
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008174:	e7c0      	b.n	80080f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008176:	bf00      	nop
 8008178:	e002      	b.n	8008180 <follow_path+0xd8>
				break;
 800817a:	bf00      	nop
 800817c:	e000      	b.n	8008180 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800817e:	bf00      	nop
			}
		}
	}

	return res;
 8008180:	7dfb      	ldrb	r3, [r7, #23]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800818a:	b480      	push	{r7}
 800818c:	b087      	sub	sp, #28
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008192:	f04f 33ff 	mov.w	r3, #4294967295
 8008196:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d031      	beq.n	8008204 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	617b      	str	r3, [r7, #20]
 80081a6:	e002      	b.n	80081ae <get_ldnumber+0x24>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	3301      	adds	r3, #1
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b20      	cmp	r3, #32
 80081b4:	d903      	bls.n	80081be <get_ldnumber+0x34>
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b3a      	cmp	r3, #58	; 0x3a
 80081bc:	d1f4      	bne.n	80081a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	2b3a      	cmp	r3, #58	; 0x3a
 80081c4:	d11c      	bne.n	8008200 <get_ldnumber+0x76>
			tp = *path;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	60fa      	str	r2, [r7, #12]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	3b30      	subs	r3, #48	; 0x30
 80081d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2b09      	cmp	r3, #9
 80081dc:	d80e      	bhi.n	80081fc <get_ldnumber+0x72>
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d10a      	bne.n	80081fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d107      	bne.n	80081fc <get_ldnumber+0x72>
					vol = (int)i;
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	3301      	adds	r3, #1
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	e002      	b.n	8008206 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008200:	2300      	movs	r3, #0
 8008202:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008204:	693b      	ldr	r3, [r7, #16]
}
 8008206:	4618      	mov	r0, r3
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
	...

08008214 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	70da      	strb	r2, [r3, #3]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f04f 32ff 	mov.w	r2, #4294967295
 800822a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff f8e0 	bl	80073f4 <move_window>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <check_fs+0x2a>
 800823a:	2304      	movs	r3, #4
 800823c:	e038      	b.n	80082b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3330      	adds	r3, #48	; 0x30
 8008242:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fe24 	bl	8006e94 <ld_word>
 800824c:	4603      	mov	r3, r0
 800824e:	461a      	mov	r2, r3
 8008250:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008254:	429a      	cmp	r2, r3
 8008256:	d001      	beq.n	800825c <check_fs+0x48>
 8008258:	2303      	movs	r3, #3
 800825a:	e029      	b.n	80082b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008262:	2be9      	cmp	r3, #233	; 0xe9
 8008264:	d009      	beq.n	800827a <check_fs+0x66>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800826c:	2beb      	cmp	r3, #235	; 0xeb
 800826e:	d11e      	bne.n	80082ae <check_fs+0x9a>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008276:	2b90      	cmp	r3, #144	; 0x90
 8008278:	d119      	bne.n	80082ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3330      	adds	r3, #48	; 0x30
 800827e:	3336      	adds	r3, #54	; 0x36
 8008280:	4618      	mov	r0, r3
 8008282:	f7fe fe1f 	bl	8006ec4 <ld_dword>
 8008286:	4603      	mov	r3, r0
 8008288:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800828c:	4a0a      	ldr	r2, [pc, #40]	; (80082b8 <check_fs+0xa4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d101      	bne.n	8008296 <check_fs+0x82>
 8008292:	2300      	movs	r3, #0
 8008294:	e00c      	b.n	80082b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3330      	adds	r3, #48	; 0x30
 800829a:	3352      	adds	r3, #82	; 0x52
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe fe11 	bl	8006ec4 <ld_dword>
 80082a2:	4602      	mov	r2, r0
 80082a4:	4b05      	ldr	r3, [pc, #20]	; (80082bc <check_fs+0xa8>)
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d101      	bne.n	80082ae <check_fs+0x9a>
 80082aa:	2300      	movs	r3, #0
 80082ac:	e000      	b.n	80082b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80082ae:	2302      	movs	r3, #2
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	00544146 	.word	0x00544146
 80082bc:	33544146 	.word	0x33544146

080082c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b096      	sub	sp, #88	; 0x58
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff ff58 	bl	800818a <get_ldnumber>
 80082da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80082dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da01      	bge.n	80082e6 <find_volume+0x26>
 80082e2:	230b      	movs	r3, #11
 80082e4:	e22e      	b.n	8008744 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80082e6:	4aa8      	ldr	r2, [pc, #672]	; (8008588 <find_volume+0x2c8>)
 80082e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <find_volume+0x3a>
 80082f6:	230c      	movs	r3, #12
 80082f8:	e224      	b.n	8008744 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d01a      	beq.n	8008346 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	4618      	mov	r0, r3
 8008316:	f7fe fd1f 	bl	8006d58 <disk_status>
 800831a:	4603      	mov	r3, r0
 800831c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008320:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10c      	bne.n	8008346 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d007      	beq.n	8008342 <find_volume+0x82>
 8008332:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800833e:	230a      	movs	r3, #10
 8008340:	e200      	b.n	8008744 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8008342:	2300      	movs	r3, #0
 8008344:	e1fe      	b.n	8008744 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	2200      	movs	r2, #0
 800834a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	b2da      	uxtb	r2, r3
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	4618      	mov	r0, r3
 800835a:	f7fe fd17 	bl	8006d8c <disk_initialize>
 800835e:	4603      	mov	r3, r0
 8008360:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008364:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008370:	2303      	movs	r3, #3
 8008372:	e1e7      	b.n	8008744 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d007      	beq.n	800838a <find_volume+0xca>
 800837a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800837e:	f003 0304 	and.w	r3, r3, #4
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008386:	230a      	movs	r3, #10
 8008388:	e1dc      	b.n	8008744 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800838a:	2300      	movs	r3, #0
 800838c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800838e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008390:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008392:	f7ff ff3f 	bl	8008214 <check_fs>
 8008396:	4603      	mov	r3, r0
 8008398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800839c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d14b      	bne.n	800843c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083a4:	2300      	movs	r3, #0
 80083a6:	643b      	str	r3, [r7, #64]	; 0x40
 80083a8:	e01f      	b.n	80083ea <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083b2:	011b      	lsls	r3, r3, #4
 80083b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80083b8:	4413      	add	r3, r2
 80083ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	3304      	adds	r3, #4
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d006      	beq.n	80083d4 <find_volume+0x114>
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	3308      	adds	r3, #8
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe fd7a 	bl	8006ec4 <ld_dword>
 80083d0:	4602      	mov	r2, r0
 80083d2:	e000      	b.n	80083d6 <find_volume+0x116>
 80083d4:	2200      	movs	r2, #0
 80083d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80083de:	440b      	add	r3, r1
 80083e0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083e6:	3301      	adds	r3, #1
 80083e8:	643b      	str	r3, [r7, #64]	; 0x40
 80083ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d9dc      	bls.n	80083aa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80083f0:	2300      	movs	r3, #0
 80083f2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80083f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <find_volume+0x140>
 80083fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083fc:	3b01      	subs	r3, #1
 80083fe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008408:	4413      	add	r3, r2
 800840a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800840e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <find_volume+0x162>
 8008416:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800841a:	f7ff fefb 	bl	8008214 <check_fs>
 800841e:	4603      	mov	r3, r0
 8008420:	e000      	b.n	8008424 <find_volume+0x164>
 8008422:	2303      	movs	r3, #3
 8008424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008428:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800842c:	2b01      	cmp	r3, #1
 800842e:	d905      	bls.n	800843c <find_volume+0x17c>
 8008430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008432:	3301      	adds	r3, #1
 8008434:	643b      	str	r3, [r7, #64]	; 0x40
 8008436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008438:	2b03      	cmp	r3, #3
 800843a:	d9e1      	bls.n	8008400 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800843c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008440:	2b04      	cmp	r3, #4
 8008442:	d101      	bne.n	8008448 <find_volume+0x188>
 8008444:	2301      	movs	r3, #1
 8008446:	e17d      	b.n	8008744 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008448:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800844c:	2b01      	cmp	r3, #1
 800844e:	d901      	bls.n	8008454 <find_volume+0x194>
 8008450:	230d      	movs	r3, #13
 8008452:	e177      	b.n	8008744 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008456:	3330      	adds	r3, #48	; 0x30
 8008458:	330b      	adds	r3, #11
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe fd1a 	bl	8006e94 <ld_word>
 8008460:	4603      	mov	r3, r0
 8008462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008466:	d001      	beq.n	800846c <find_volume+0x1ac>
 8008468:	230d      	movs	r3, #13
 800846a:	e16b      	b.n	8008744 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	3330      	adds	r3, #48	; 0x30
 8008470:	3316      	adds	r3, #22
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe fd0e 	bl	8006e94 <ld_word>
 8008478:	4603      	mov	r3, r0
 800847a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800847c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847e:	2b00      	cmp	r3, #0
 8008480:	d106      	bne.n	8008490 <find_volume+0x1d0>
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	3330      	adds	r3, #48	; 0x30
 8008486:	3324      	adds	r3, #36	; 0x24
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fd1b 	bl	8006ec4 <ld_dword>
 800848e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008494:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	789b      	ldrb	r3, [r3, #2]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d005      	beq.n	80084b4 <find_volume+0x1f4>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	789b      	ldrb	r3, [r3, #2]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d001      	beq.n	80084b4 <find_volume+0x1f4>
 80084b0:	230d      	movs	r3, #13
 80084b2:	e147      	b.n	8008744 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	789b      	ldrb	r3, [r3, #2]
 80084b8:	461a      	mov	r2, r3
 80084ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084bc:	fb02 f303 	mul.w	r3, r2, r3
 80084c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	895b      	ldrh	r3, [r3, #10]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d008      	beq.n	80084e8 <find_volume+0x228>
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	895b      	ldrh	r3, [r3, #10]
 80084da:	461a      	mov	r2, r3
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	895b      	ldrh	r3, [r3, #10]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	4013      	ands	r3, r2
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <find_volume+0x22c>
 80084e8:	230d      	movs	r3, #13
 80084ea:	e12b      	b.n	8008744 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	3330      	adds	r3, #48	; 0x30
 80084f0:	3311      	adds	r3, #17
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe fcce 	bl	8006e94 <ld_word>
 80084f8:	4603      	mov	r3, r0
 80084fa:	461a      	mov	r2, r3
 80084fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	891b      	ldrh	r3, [r3, #8]
 8008504:	f003 030f 	and.w	r3, r3, #15
 8008508:	b29b      	uxth	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <find_volume+0x252>
 800850e:	230d      	movs	r3, #13
 8008510:	e118      	b.n	8008744 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	3330      	adds	r3, #48	; 0x30
 8008516:	3313      	adds	r3, #19
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe fcbb 	bl	8006e94 <ld_word>
 800851e:	4603      	mov	r3, r0
 8008520:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008524:	2b00      	cmp	r3, #0
 8008526:	d106      	bne.n	8008536 <find_volume+0x276>
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	3330      	adds	r3, #48	; 0x30
 800852c:	3320      	adds	r3, #32
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe fcc8 	bl	8006ec4 <ld_dword>
 8008534:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	3330      	adds	r3, #48	; 0x30
 800853a:	330e      	adds	r3, #14
 800853c:	4618      	mov	r0, r3
 800853e:	f7fe fca9 	bl	8006e94 <ld_word>
 8008542:	4603      	mov	r3, r0
 8008544:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008546:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <find_volume+0x290>
 800854c:	230d      	movs	r3, #13
 800854e:	e0f9      	b.n	8008744 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008550:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008554:	4413      	add	r3, r2
 8008556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008558:	8912      	ldrh	r2, [r2, #8]
 800855a:	0912      	lsrs	r2, r2, #4
 800855c:	b292      	uxth	r2, r2
 800855e:	4413      	add	r3, r2
 8008560:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	429a      	cmp	r2, r3
 8008568:	d201      	bcs.n	800856e <find_volume+0x2ae>
 800856a:	230d      	movs	r3, #13
 800856c:	e0ea      	b.n	8008744 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800856e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008576:	8952      	ldrh	r2, [r2, #10]
 8008578:	fbb3 f3f2 	udiv	r3, r3, r2
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	2b00      	cmp	r3, #0
 8008582:	d103      	bne.n	800858c <find_volume+0x2cc>
 8008584:	230d      	movs	r3, #13
 8008586:	e0dd      	b.n	8008744 <find_volume+0x484>
 8008588:	20000058 	.word	0x20000058
		fmt = FS_FAT32;
 800858c:	2303      	movs	r3, #3
 800858e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008598:	4293      	cmp	r3, r2
 800859a:	d802      	bhi.n	80085a2 <find_volume+0x2e2>
 800859c:	2302      	movs	r3, #2
 800859e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d802      	bhi.n	80085b2 <find_volume+0x2f2>
 80085ac:	2301      	movs	r3, #1
 80085ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	1c9a      	adds	r2, r3, #2
 80085b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085be:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80085c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c4:	441a      	add	r2, r3
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80085ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	441a      	add	r2, r3
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80085d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d11e      	bne.n	800861a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	3330      	adds	r3, #48	; 0x30
 80085e0:	332a      	adds	r3, #42	; 0x2a
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe fc56 	bl	8006e94 <ld_word>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <find_volume+0x332>
 80085ee:	230d      	movs	r3, #13
 80085f0:	e0a8      	b.n	8008744 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	891b      	ldrh	r3, [r3, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <find_volume+0x33e>
 80085fa:	230d      	movs	r3, #13
 80085fc:	e0a2      	b.n	8008744 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	3330      	adds	r3, #48	; 0x30
 8008602:	332c      	adds	r3, #44	; 0x2c
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fc5d 	bl	8006ec4 <ld_dword>
 800860a:	4602      	mov	r2, r0
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	647b      	str	r3, [r7, #68]	; 0x44
 8008618:	e01f      	b.n	800865a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	891b      	ldrh	r3, [r3, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <find_volume+0x366>
 8008622:	230d      	movs	r3, #13
 8008624:	e08e      	b.n	8008744 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	6a1a      	ldr	r2, [r3, #32]
 800862a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862c:	441a      	add	r2, r3
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008632:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008636:	2b02      	cmp	r3, #2
 8008638:	d103      	bne.n	8008642 <find_volume+0x382>
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	e00a      	b.n	8008658 <find_volume+0x398>
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	695a      	ldr	r2, [r3, #20]
 8008646:	4613      	mov	r3, r2
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	4413      	add	r3, r2
 800864c:	085a      	lsrs	r2, r3, #1
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008658:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865c:	699a      	ldr	r2, [r3, #24]
 800865e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008660:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008664:	0a5b      	lsrs	r3, r3, #9
 8008666:	429a      	cmp	r2, r3
 8008668:	d201      	bcs.n	800866e <find_volume+0x3ae>
 800866a:	230d      	movs	r3, #13
 800866c:	e06a      	b.n	8008744 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800866e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008670:	f04f 32ff 	mov.w	r2, #4294967295
 8008674:	611a      	str	r2, [r3, #16]
 8008676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008678:	691a      	ldr	r2, [r3, #16]
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800867e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008680:	2280      	movs	r2, #128	; 0x80
 8008682:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008688:	2b03      	cmp	r3, #3
 800868a:	d149      	bne.n	8008720 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	3330      	adds	r3, #48	; 0x30
 8008690:	3330      	adds	r3, #48	; 0x30
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe fbfe 	bl	8006e94 <ld_word>
 8008698:	4603      	mov	r3, r0
 800869a:	2b01      	cmp	r3, #1
 800869c:	d140      	bne.n	8008720 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800869e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a0:	3301      	adds	r3, #1
 80086a2:	4619      	mov	r1, r3
 80086a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086a6:	f7fe fea5 	bl	80073f4 <move_window>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d137      	bne.n	8008720 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	2200      	movs	r2, #0
 80086b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	3330      	adds	r3, #48	; 0x30
 80086ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe fbe8 	bl	8006e94 <ld_word>
 80086c4:	4603      	mov	r3, r0
 80086c6:	461a      	mov	r2, r3
 80086c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d127      	bne.n	8008720 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	3330      	adds	r3, #48	; 0x30
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe fbf5 	bl	8006ec4 <ld_dword>
 80086da:	4602      	mov	r2, r0
 80086dc:	4b1b      	ldr	r3, [pc, #108]	; (800874c <find_volume+0x48c>)
 80086de:	429a      	cmp	r2, r3
 80086e0:	d11e      	bne.n	8008720 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	3330      	adds	r3, #48	; 0x30
 80086e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe fbea 	bl	8006ec4 <ld_dword>
 80086f0:	4602      	mov	r2, r0
 80086f2:	4b17      	ldr	r3, [pc, #92]	; (8008750 <find_volume+0x490>)
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d113      	bne.n	8008720 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	3330      	adds	r3, #48	; 0x30
 80086fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fbdf 	bl	8006ec4 <ld_dword>
 8008706:	4602      	mov	r2, r0
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	3330      	adds	r3, #48	; 0x30
 8008710:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe fbd5 	bl	8006ec4 <ld_dword>
 800871a:	4602      	mov	r2, r0
 800871c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008726:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008728:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <find_volume+0x494>)
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	3301      	adds	r3, #1
 800872e:	b29a      	uxth	r2, r3
 8008730:	4b08      	ldr	r3, [pc, #32]	; (8008754 <find_volume+0x494>)
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	4b07      	ldr	r3, [pc, #28]	; (8008754 <find_volume+0x494>)
 8008736:	881a      	ldrh	r2, [r3, #0]
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800873c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800873e:	f7fe fdf1 	bl	8007324 <clear_lock>
#endif
	return FR_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3758      	adds	r7, #88	; 0x58
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	41615252 	.word	0x41615252
 8008750:	61417272 	.word	0x61417272
 8008754:	2000005c 	.word	0x2000005c

08008758 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008762:	2309      	movs	r3, #9
 8008764:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d01c      	beq.n	80087a6 <validate+0x4e>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d018      	beq.n	80087a6 <validate+0x4e>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d013      	beq.n	80087a6 <validate+0x4e>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	889a      	ldrh	r2, [r3, #4]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	88db      	ldrh	r3, [r3, #6]
 8008788:	429a      	cmp	r2, r3
 800878a:	d10c      	bne.n	80087a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	785b      	ldrb	r3, [r3, #1]
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fae0 	bl	8006d58 <disk_status>
 8008798:	4603      	mov	r3, r0
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <validate+0x4e>
			res = FR_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d102      	bne.n	80087b2 <validate+0x5a>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	e000      	b.n	80087b4 <validate+0x5c>
 80087b2:	2300      	movs	r3, #0
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	6013      	str	r3, [r2, #0]
	return res;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b088      	sub	sp, #32
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80087d6:	f107 0310 	add.w	r3, r7, #16
 80087da:	4618      	mov	r0, r3
 80087dc:	f7ff fcd5 	bl	800818a <get_ldnumber>
 80087e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	da01      	bge.n	80087ec <f_mount+0x28>
 80087e8:	230b      	movs	r3, #11
 80087ea:	e02b      	b.n	8008844 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80087ec:	4a17      	ldr	r2, [pc, #92]	; (800884c <f_mount+0x88>)
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80087fc:	69b8      	ldr	r0, [r7, #24]
 80087fe:	f7fe fd91 	bl	8007324 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	490d      	ldr	r1, [pc, #52]	; (800884c <f_mount+0x88>)
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <f_mount+0x66>
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d001      	beq.n	800882e <f_mount+0x6a>
 800882a:	2300      	movs	r3, #0
 800882c:	e00a      	b.n	8008844 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800882e:	f107 010c 	add.w	r1, r7, #12
 8008832:	f107 0308 	add.w	r3, r7, #8
 8008836:	2200      	movs	r2, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff fd41 	bl	80082c0 <find_volume>
 800883e:	4603      	mov	r3, r0
 8008840:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008842:	7dfb      	ldrb	r3, [r7, #23]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3720      	adds	r7, #32
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20000058 	.word	0x20000058

08008850 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b098      	sub	sp, #96	; 0x60
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4613      	mov	r3, r2
 800885c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <f_open+0x18>
 8008864:	2309      	movs	r3, #9
 8008866:	e1ad      	b.n	8008bc4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008868:	79fb      	ldrb	r3, [r7, #7]
 800886a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800886e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008870:	79fa      	ldrb	r2, [r7, #7]
 8008872:	f107 0110 	add.w	r1, r7, #16
 8008876:	f107 0308 	add.w	r3, r7, #8
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff fd20 	bl	80082c0 <find_volume>
 8008880:	4603      	mov	r3, r0
 8008882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800888a:	2b00      	cmp	r3, #0
 800888c:	f040 8191 	bne.w	8008bb2 <f_open+0x362>
		dj.obj.fs = fs;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	f107 0314 	add.w	r3, r7, #20
 800889a:	4611      	mov	r1, r2
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fc03 	bl	80080a8 <follow_path>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80088a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d11a      	bne.n	80088e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80088b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80088b4:	b25b      	sxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	da03      	bge.n	80088c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80088ba:	2306      	movs	r3, #6
 80088bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80088c0:	e011      	b.n	80088e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80088c2:	79fb      	ldrb	r3, [r7, #7]
 80088c4:	f023 0301 	bic.w	r3, r3, #1
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bf14      	ite	ne
 80088cc:	2301      	movne	r3, #1
 80088ce:	2300      	moveq	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	461a      	mov	r2, r3
 80088d4:	f107 0314 	add.w	r3, r7, #20
 80088d8:	4611      	mov	r1, r2
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe fbda 	bl	8007094 <chk_lock>
 80088e0:	4603      	mov	r3, r0
 80088e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	f003 031c 	and.w	r3, r3, #28
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d07f      	beq.n	80089f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80088f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d017      	beq.n	8008928 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80088f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d10e      	bne.n	800891e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008900:	f7fe fc24 	bl	800714c <enq_lock>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d006      	beq.n	8008918 <f_open+0xc8>
 800890a:	f107 0314 	add.w	r3, r7, #20
 800890e:	4618      	mov	r0, r3
 8008910:	f7ff fb03 	bl	8007f1a <dir_register>
 8008914:	4603      	mov	r3, r0
 8008916:	e000      	b.n	800891a <f_open+0xca>
 8008918:	2312      	movs	r3, #18
 800891a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	f043 0308 	orr.w	r3, r3, #8
 8008924:	71fb      	strb	r3, [r7, #7]
 8008926:	e010      	b.n	800894a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008928:	7ebb      	ldrb	r3, [r7, #26]
 800892a:	f003 0311 	and.w	r3, r3, #17
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <f_open+0xea>
					res = FR_DENIED;
 8008932:	2307      	movs	r3, #7
 8008934:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008938:	e007      	b.n	800894a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <f_open+0xfa>
 8008944:	2308      	movs	r3, #8
 8008946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800894a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800894e:	2b00      	cmp	r3, #0
 8008950:	d168      	bne.n	8008a24 <f_open+0x1d4>
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	f003 0308 	and.w	r3, r3, #8
 8008958:	2b00      	cmp	r3, #0
 800895a:	d063      	beq.n	8008a24 <f_open+0x1d4>
				dw = GET_FATTIME();
 800895c:	f7fc fef0 	bl	8005740 <get_fattime>
 8008960:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008964:	330e      	adds	r3, #14
 8008966:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe fae9 	bl	8006f40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800896e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008970:	3316      	adds	r3, #22
 8008972:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008974:	4618      	mov	r0, r3
 8008976:	f7fe fae3 	bl	8006f40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800897a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897c:	330b      	adds	r3, #11
 800897e:	2220      	movs	r2, #32
 8008980:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008986:	4611      	mov	r1, r2
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fa32 	bl	8007df2 <ld_clust>
 800898e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008994:	2200      	movs	r2, #0
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff fa4a 	bl	8007e30 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800899c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899e:	331c      	adds	r3, #28
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe facc 	bl	8006f40 <st_dword>
					fs->wflag = 1;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	2201      	movs	r2, #1
 80089ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80089ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d037      	beq.n	8008a24 <f_open+0x1d4>
						dw = fs->winsect;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80089ba:	f107 0314 	add.w	r3, r7, #20
 80089be:	2200      	movs	r2, #0
 80089c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe ff5d 	bl	8007882 <remove_chain>
 80089c8:	4603      	mov	r3, r0
 80089ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80089ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d126      	bne.n	8008a24 <f_open+0x1d4>
							res = move_window(fs, dw);
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fd0a 	bl	80073f4 <move_window>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089ea:	3a01      	subs	r2, #1
 80089ec:	60da      	str	r2, [r3, #12]
 80089ee:	e019      	b.n	8008a24 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80089f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d115      	bne.n	8008a24 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80089f8:	7ebb      	ldrb	r3, [r7, #26]
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008a02:	2304      	movs	r3, #4
 8008a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a08:	e00c      	b.n	8008a24 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <f_open+0x1d4>
 8008a14:	7ebb      	ldrb	r3, [r7, #26]
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <f_open+0x1d4>
						res = FR_DENIED;
 8008a1e:	2307      	movs	r3, #7
 8008a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008a24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d128      	bne.n	8008a7e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d003      	beq.n	8008a3e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a3c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	f023 0301 	bic.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bf14      	ite	ne
 8008a56:	2301      	movne	r3, #1
 8008a58:	2300      	moveq	r3, #0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f107 0314 	add.w	r3, r7, #20
 8008a62:	4611      	mov	r1, r2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe fb93 	bl	8007190 <inc_lock>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d102      	bne.n	8008a7e <f_open+0x22e>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008a7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f040 8095 	bne.w	8008bb2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff f9af 	bl	8007df2 <ld_clust>
 8008a94:	4602      	mov	r2, r0
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9c:	331c      	adds	r3, #28
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fa10 	bl	8006ec4 <ld_dword>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	88da      	ldrh	r2, [r3, #6]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	79fa      	ldrb	r2, [r7, #7]
 8008ac2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3330      	adds	r3, #48	; 0x30
 8008ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ade:	2100      	movs	r1, #0
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fe fa7a 	bl	8006fda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	f003 0320 	and.w	r3, r3, #32
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d060      	beq.n	8008bb2 <f_open+0x362>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d05c      	beq.n	8008bb2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	68da      	ldr	r2, [r3, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	895b      	ldrh	r3, [r3, #10]
 8008b04:	025b      	lsls	r3, r3, #9
 8008b06:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	657b      	str	r3, [r7, #84]	; 0x54
 8008b14:	e016      	b.n	8008b44 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe fd25 	bl	800756a <get_fat>
 8008b20:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d802      	bhi.n	8008b2e <f_open+0x2de>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b34:	d102      	bne.n	8008b3c <f_open+0x2ec>
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	657b      	str	r3, [r7, #84]	; 0x54
 8008b44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d103      	bne.n	8008b54 <f_open+0x304>
 8008b4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d8e0      	bhi.n	8008b16 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b58:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008b5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d127      	bne.n	8008bb2 <f_open+0x362>
 8008b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d022      	beq.n	8008bb2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fe fcdb 	bl	800752c <clust2sect>
 8008b76:	6478      	str	r0, [r7, #68]	; 0x44
 8008b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d103      	bne.n	8008b86 <f_open+0x336>
						res = FR_INT_ERR;
 8008b7e:	2302      	movs	r3, #2
 8008b80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b84:	e015      	b.n	8008bb2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b88:	0a5a      	lsrs	r2, r3, #9
 8008b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b8c:	441a      	add	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	7858      	ldrb	r0, [r3, #1]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a1a      	ldr	r2, [r3, #32]
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f7fe f919 	bl	8006dd8 <disk_read>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <f_open+0x362>
 8008bac:	2301      	movs	r3, #1
 8008bae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008bb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <f_open+0x370>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3760      	adds	r7, #96	; 0x60
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08c      	sub	sp, #48	; 0x30
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f107 0210 	add.w	r2, r7, #16
 8008bea:	4611      	mov	r1, r2
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7ff fdb3 	bl	8008758 <validate>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d107      	bne.n	8008c10 <f_write+0x44>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	7d5b      	ldrb	r3, [r3, #21]
 8008c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <f_write+0x4a>
 8008c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c14:	e14b      	b.n	8008eae <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	7d1b      	ldrb	r3, [r3, #20]
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <f_write+0x5a>
 8008c22:	2307      	movs	r3, #7
 8008c24:	e143      	b.n	8008eae <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	699a      	ldr	r2, [r3, #24]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	441a      	add	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	f080 812d 	bcs.w	8008e92 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	43db      	mvns	r3, r3
 8008c3e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008c40:	e127      	b.n	8008e92 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f040 80e3 	bne.w	8008e16 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	0a5b      	lsrs	r3, r3, #9
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	8952      	ldrh	r2, [r2, #10]
 8008c5a:	3a01      	subs	r2, #1
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d143      	bne.n	8008cee <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10c      	bne.n	8008c88 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d11a      	bne.n	8008cb0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe fe64 	bl	800794c <create_chain>
 8008c84:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c86:	e013      	b.n	8008cb0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d007      	beq.n	8008ca0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	4619      	mov	r1, r3
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7fe fef0 	bl	8007a7c <clmt_clust>
 8008c9c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c9e:	e007      	b.n	8008cb0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4610      	mov	r0, r2
 8008caa:	f7fe fe4f 	bl	800794c <create_chain>
 8008cae:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 80f2 	beq.w	8008e9c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d104      	bne.n	8008cc8 <f_write+0xfc>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	755a      	strb	r2, [r3, #21]
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	e0f2      	b.n	8008eae <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cce:	d104      	bne.n	8008cda <f_write+0x10e>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	755a      	strb	r2, [r3, #21]
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e0e9      	b.n	8008eae <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cde:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d102      	bne.n	8008cee <f_write+0x122>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cec:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	7d1b      	ldrb	r3, [r3, #20]
 8008cf2:	b25b      	sxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	da18      	bge.n	8008d2a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	7858      	ldrb	r0, [r3, #1]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	2301      	movs	r3, #1
 8008d08:	f7fe f886 	bl	8006e18 <disk_write>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d004      	beq.n	8008d1c <f_write+0x150>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2201      	movs	r2, #1
 8008d16:	755a      	strb	r2, [r3, #21]
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e0c8      	b.n	8008eae <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	7d1b      	ldrb	r3, [r3, #20]
 8008d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	4619      	mov	r1, r3
 8008d32:	4610      	mov	r0, r2
 8008d34:	f7fe fbfa 	bl	800752c <clust2sect>
 8008d38:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <f_write+0x17e>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2202      	movs	r2, #2
 8008d44:	755a      	strb	r2, [r3, #21]
 8008d46:	2302      	movs	r3, #2
 8008d48:	e0b1      	b.n	8008eae <f_write+0x2e2>
			sect += csect;
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	4413      	add	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	0a5b      	lsrs	r3, r3, #9
 8008d56:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d58:	6a3b      	ldr	r3, [r7, #32]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d03c      	beq.n	8008dd8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	4413      	add	r3, r2
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	8952      	ldrh	r2, [r2, #10]
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d905      	bls.n	8008d78 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	895b      	ldrh	r3, [r3, #10]
 8008d70:	461a      	mov	r2, r3
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	7858      	ldrb	r0, [r3, #1]
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	69f9      	ldr	r1, [r7, #28]
 8008d82:	f7fe f849 	bl	8006e18 <disk_write>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d004      	beq.n	8008d96 <f_write+0x1ca>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	755a      	strb	r2, [r3, #21]
 8008d92:	2301      	movs	r3, #1
 8008d94:	e08b      	b.n	8008eae <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a1a      	ldr	r2, [r3, #32]
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	6a3a      	ldr	r2, [r7, #32]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d915      	bls.n	8008dd0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6a1a      	ldr	r2, [r3, #32]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	025b      	lsls	r3, r3, #9
 8008db4:	69fa      	ldr	r2, [r7, #28]
 8008db6:	4413      	add	r3, r2
 8008db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	f7fe f8eb 	bl	8006f98 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	7d1b      	ldrb	r3, [r3, #20]
 8008dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	025b      	lsls	r3, r3, #9
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008dd6:	e03f      	b.n	8008e58 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d016      	beq.n	8008e10 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	699a      	ldr	r2, [r3, #24]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d210      	bcs.n	8008e10 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	7858      	ldrb	r0, [r3, #1]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008df8:	2301      	movs	r3, #1
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	f7fd ffec 	bl	8006dd8 <disk_read>
 8008e00:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d004      	beq.n	8008e10 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	755a      	strb	r2, [r3, #21]
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e04e      	b.n	8008eae <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d901      	bls.n	8008e30 <f_write+0x264>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3e:	4413      	add	r3, r2
 8008e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e42:	69f9      	ldr	r1, [r7, #28]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe f8a7 	bl	8006f98 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	7d1b      	ldrb	r3, [r3, #20]
 8008e4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e58:	69fa      	ldr	r2, [r7, #28]
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	4413      	add	r3, r2
 8008e5e:	61fb      	str	r3, [r7, #28]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	441a      	add	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	619a      	str	r2, [r3, #24]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	68da      	ldr	r2, [r3, #12]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	bf38      	it	cc
 8008e78:	461a      	movcc	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	60da      	str	r2, [r3, #12]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	441a      	add	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f47f aed4 	bne.w	8008c42 <f_write+0x76>
 8008e9a:	e000      	b.n	8008e9e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008e9c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	7d1b      	ldrb	r3, [r3, #20]
 8008ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3730      	adds	r7, #48	; 0x30
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b086      	sub	sp, #24
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f107 0208 	add.w	r2, r7, #8
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff fc46 	bl	8008758 <validate>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d168      	bne.n	8008fa8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	7d1b      	ldrb	r3, [r3, #20]
 8008eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d062      	beq.n	8008fa8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	7d1b      	ldrb	r3, [r3, #20]
 8008ee6:	b25b      	sxtb	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	da15      	bge.n	8008f18 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	7858      	ldrb	r0, [r3, #1]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1a      	ldr	r2, [r3, #32]
 8008efa:	2301      	movs	r3, #1
 8008efc:	f7fd ff8c 	bl	8006e18 <disk_write>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <f_sync+0x54>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e04f      	b.n	8008faa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	7d1b      	ldrb	r3, [r3, #20]
 8008f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008f18:	f7fc fc12 	bl	8005740 <get_fattime>
 8008f1c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	4619      	mov	r1, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	f7fe fa64 	bl	80073f4 <move_window>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d138      	bne.n	8008fa8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	330b      	adds	r3, #11
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	330b      	adds	r3, #11
 8008f46:	f042 0220 	orr.w	r2, r2, #32
 8008f4a:	b2d2      	uxtb	r2, r2
 8008f4c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	461a      	mov	r2, r3
 8008f58:	68f9      	ldr	r1, [r7, #12]
 8008f5a:	f7fe ff69 	bl	8007e30 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f103 021c 	add.w	r2, r3, #28
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	f7fd ffe8 	bl	8006f40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3316      	adds	r3, #22
 8008f74:	6939      	ldr	r1, [r7, #16]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fd ffe2 	bl	8006f40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	3312      	adds	r3, #18
 8008f80:	2100      	movs	r1, #0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fd ffc1 	bl	8006f0a <st_word>
					fs->wflag = 1;
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe fa5d 	bl	8007450 <sync_fs>
 8008f96:	4603      	mov	r3, r0
 8008f98:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7d1b      	ldrb	r3, [r3, #20]
 8008f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff ff7b 	bl	8008eb6 <f_sync>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d118      	bne.n	8008ffc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f107 0208 	add.w	r2, r7, #8
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7ff fbc0 	bl	8008758 <validate>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10c      	bne.n	8008ffc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe f960 	bl	80072ac <dec_lock>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d102      	bne.n	8008ffc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b090      	sub	sp, #64	; 0x40
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f107 0208 	add.w	r2, r7, #8
 8009016:	4611      	mov	r1, r2
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff fb9d 	bl	8008758 <validate>
 800901e:	4603      	mov	r3, r0
 8009020:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009024:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009028:	2b00      	cmp	r3, #0
 800902a:	d103      	bne.n	8009034 <f_lseek+0x2e>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	7d5b      	ldrb	r3, [r3, #21]
 8009030:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009034:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009038:	2b00      	cmp	r3, #0
 800903a:	d002      	beq.n	8009042 <f_lseek+0x3c>
 800903c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009040:	e1e6      	b.n	8009410 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 80d1 	beq.w	80091ee <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d15a      	bne.n	800910a <f_lseek+0x104>
			tbl = fp->cltbl;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	1d1a      	adds	r2, r3, #4
 800905e:	627a      	str	r2, [r7, #36]	; 0x24
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	2302      	movs	r3, #2
 8009066:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	2b00      	cmp	r3, #0
 8009072:	d03a      	beq.n	80090ea <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	613b      	str	r3, [r7, #16]
 8009078:	2300      	movs	r3, #0
 800907a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907e:	3302      	adds	r3, #2
 8009080:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	60fb      	str	r3, [r7, #12]
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	3301      	adds	r3, #1
 800908a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe fa6a 	bl	800756a <get_fat>
 8009096:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	2b01      	cmp	r3, #1
 800909c:	d804      	bhi.n	80090a8 <f_lseek+0xa2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2202      	movs	r2, #2
 80090a2:	755a      	strb	r2, [r3, #21]
 80090a4:	2302      	movs	r3, #2
 80090a6:	e1b3      	b.n	8009410 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ae:	d104      	bne.n	80090ba <f_lseek+0xb4>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	755a      	strb	r2, [r3, #21]
 80090b6:	2301      	movs	r3, #1
 80090b8:	e1aa      	b.n	8009410 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3301      	adds	r3, #1
 80090be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d0de      	beq.n	8009082 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80090c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d809      	bhi.n	80090e0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	1d1a      	adds	r2, r3, #4
 80090d0:	627a      	str	r2, [r7, #36]	; 0x24
 80090d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	1d1a      	adds	r2, r3, #4
 80090da:	627a      	str	r2, [r7, #36]	; 0x24
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d3c4      	bcc.n	8009074 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090f0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80090f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d803      	bhi.n	8009102 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	2200      	movs	r2, #0
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	e184      	b.n	800940c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009102:	2311      	movs	r3, #17
 8009104:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009108:	e180      	b.n	800940c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	429a      	cmp	r2, r3
 8009112:	d902      	bls.n	800911a <f_lseek+0x114>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 8172 	beq.w	800940c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	3b01      	subs	r3, #1
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7fe fca4 	bl	8007a7c <clmt_clust>
 8009134:	4602      	mov	r2, r0
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	4619      	mov	r1, r3
 8009142:	4610      	mov	r0, r2
 8009144:	f7fe f9f2 	bl	800752c <clust2sect>
 8009148:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d104      	bne.n	800915a <f_lseek+0x154>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	755a      	strb	r2, [r3, #21]
 8009156:	2302      	movs	r3, #2
 8009158:	e15a      	b.n	8009410 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	3b01      	subs	r3, #1
 800915e:	0a5b      	lsrs	r3, r3, #9
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	8952      	ldrh	r2, [r2, #10]
 8009164:	3a01      	subs	r2, #1
 8009166:	4013      	ands	r3, r2
 8009168:	69ba      	ldr	r2, [r7, #24]
 800916a:	4413      	add	r3, r2
 800916c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 8148 	beq.w	800940c <f_lseek+0x406>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	429a      	cmp	r2, r3
 8009184:	f000 8142 	beq.w	800940c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	7d1b      	ldrb	r3, [r3, #20]
 800918c:	b25b      	sxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	da18      	bge.n	80091c4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	7858      	ldrb	r0, [r3, #1]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1a      	ldr	r2, [r3, #32]
 80091a0:	2301      	movs	r3, #1
 80091a2:	f7fd fe39 	bl	8006e18 <disk_write>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d004      	beq.n	80091b6 <f_lseek+0x1b0>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	755a      	strb	r2, [r3, #21]
 80091b2:	2301      	movs	r3, #1
 80091b4:	e12c      	b.n	8009410 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	7d1b      	ldrb	r3, [r3, #20]
 80091ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	7858      	ldrb	r0, [r3, #1]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091ce:	2301      	movs	r3, #1
 80091d0:	69ba      	ldr	r2, [r7, #24]
 80091d2:	f7fd fe01 	bl	8006dd8 <disk_read>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d004      	beq.n	80091e6 <f_lseek+0x1e0>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	755a      	strb	r2, [r3, #21]
 80091e2:	2301      	movs	r3, #1
 80091e4:	e114      	b.n	8009410 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	621a      	str	r2, [r3, #32]
 80091ec:	e10e      	b.n	800940c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d908      	bls.n	800920a <f_lseek+0x204>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	7d1b      	ldrb	r3, [r3, #20]
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d102      	bne.n	800920a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009210:	2300      	movs	r3, #0
 8009212:	637b      	str	r3, [r7, #52]	; 0x34
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009218:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 80a7 	beq.w	8009370 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	895b      	ldrh	r3, [r3, #10]
 8009226:	025b      	lsls	r3, r3, #9
 8009228:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d01b      	beq.n	8009268 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	1e5a      	subs	r2, r3, #1
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	fbb2 f2f3 	udiv	r2, r2, r3
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	1e59      	subs	r1, r3, #1
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009244:	429a      	cmp	r2, r3
 8009246:	d30f      	bcc.n	8009268 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	1e5a      	subs	r2, r3, #1
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	425b      	negs	r3, r3
 8009250:	401a      	ands	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	63bb      	str	r3, [r7, #56]	; 0x38
 8009266:	e022      	b.n	80092ae <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009270:	2b00      	cmp	r3, #0
 8009272:	d119      	bne.n	80092a8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2100      	movs	r1, #0
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fb67 	bl	800794c <create_chain>
 800927e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	2b01      	cmp	r3, #1
 8009284:	d104      	bne.n	8009290 <f_lseek+0x28a>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2202      	movs	r2, #2
 800928a:	755a      	strb	r2, [r3, #21]
 800928c:	2302      	movs	r3, #2
 800928e:	e0bf      	b.n	8009410 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009296:	d104      	bne.n	80092a2 <f_lseek+0x29c>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	755a      	strb	r2, [r3, #21]
 800929e:	2301      	movs	r3, #1
 80092a0:	e0b6      	b.n	8009410 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ac:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80092ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d05d      	beq.n	8009370 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80092b4:	e03a      	b.n	800932c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	603b      	str	r3, [r7, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	699a      	ldr	r2, [r3, #24]
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	441a      	add	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	7d1b      	ldrb	r3, [r3, #20]
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00b      	beq.n	80092ee <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fe fb36 	bl	800794c <create_chain>
 80092e0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80092e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d108      	bne.n	80092fa <f_lseek+0x2f4>
							ofs = 0; break;
 80092e8:	2300      	movs	r3, #0
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	e022      	b.n	8009334 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe f939 	bl	800756a <get_fat>
 80092f8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009300:	d104      	bne.n	800930c <f_lseek+0x306>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	755a      	strb	r2, [r3, #21]
 8009308:	2301      	movs	r3, #1
 800930a:	e081      	b.n	8009410 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800930c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930e:	2b01      	cmp	r3, #1
 8009310:	d904      	bls.n	800931c <f_lseek+0x316>
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009318:	429a      	cmp	r2, r3
 800931a:	d304      	bcc.n	8009326 <f_lseek+0x320>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	755a      	strb	r2, [r3, #21]
 8009322:	2302      	movs	r3, #2
 8009324:	e074      	b.n	8009410 <f_lseek+0x40a>
					fp->clust = clst;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800932a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	429a      	cmp	r2, r3
 8009332:	d8c0      	bhi.n	80092b6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	699a      	ldr	r2, [r3, #24]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	441a      	add	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009346:	2b00      	cmp	r3, #0
 8009348:	d012      	beq.n	8009370 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe f8ec 	bl	800752c <clust2sect>
 8009354:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	2b00      	cmp	r3, #0
 800935a:	d104      	bne.n	8009366 <f_lseek+0x360>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2202      	movs	r2, #2
 8009360:	755a      	strb	r2, [r3, #21]
 8009362:	2302      	movs	r3, #2
 8009364:	e054      	b.n	8009410 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	0a5b      	lsrs	r3, r3, #9
 800936a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800936c:	4413      	add	r3, r2
 800936e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699a      	ldr	r2, [r3, #24]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	429a      	cmp	r2, r3
 800937a:	d90a      	bls.n	8009392 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	699a      	ldr	r2, [r3, #24]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	7d1b      	ldrb	r3, [r3, #20]
 8009388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800938c:	b2da      	uxtb	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939a:	2b00      	cmp	r3, #0
 800939c:	d036      	beq.n	800940c <f_lseek+0x406>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d031      	beq.n	800940c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	7d1b      	ldrb	r3, [r3, #20]
 80093ac:	b25b      	sxtb	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	da18      	bge.n	80093e4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	7858      	ldrb	r0, [r3, #1]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a1a      	ldr	r2, [r3, #32]
 80093c0:	2301      	movs	r3, #1
 80093c2:	f7fd fd29 	bl	8006e18 <disk_write>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d004      	beq.n	80093d6 <f_lseek+0x3d0>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	755a      	strb	r2, [r3, #21]
 80093d2:	2301      	movs	r3, #1
 80093d4:	e01c      	b.n	8009410 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7d1b      	ldrb	r3, [r3, #20]
 80093da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	7858      	ldrb	r0, [r3, #1]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093ee:	2301      	movs	r3, #1
 80093f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093f2:	f7fd fcf1 	bl	8006dd8 <disk_read>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d004      	beq.n	8009406 <f_lseek+0x400>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	755a      	strb	r2, [r3, #21]
 8009402:	2301      	movs	r3, #1
 8009404:	e004      	b.n	8009410 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800940a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800940c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009410:	4618      	mov	r0, r3
 8009412:	3740      	adds	r7, #64	; 0x40
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8009418:	b590      	push	{r4, r7, lr}
 800941a:	b09d      	sub	sp, #116	; 0x74
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	607a      	str	r2, [r7, #4]
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	460b      	mov	r3, r1
 8009426:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8009428:	2301      	movs	r3, #1
 800942a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800942c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009430:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8009432:	f107 030c 	add.w	r3, r7, #12
 8009436:	4618      	mov	r0, r3
 8009438:	f7fe fea7 	bl	800818a <get_ldnumber>
 800943c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800943e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009440:	2b00      	cmp	r3, #0
 8009442:	da02      	bge.n	800944a <f_mkfs+0x32>
 8009444:	230b      	movs	r3, #11
 8009446:	f000 bc0d 	b.w	8009c64 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800944a:	4a94      	ldr	r2, [pc, #592]	; (800969c <f_mkfs+0x284>)
 800944c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d005      	beq.n	8009462 <f_mkfs+0x4a>
 8009456:	4a91      	ldr	r2, [pc, #580]	; (800969c <f_mkfs+0x284>)
 8009458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800945a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800945e:	2200      	movs	r2, #0
 8009460:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8009462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009464:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8009468:	2300      	movs	r3, #0
 800946a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800946e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009472:	4618      	mov	r0, r3
 8009474:	f7fd fc8a 	bl	8006d8c <disk_initialize>
 8009478:	4603      	mov	r3, r0
 800947a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800947e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <f_mkfs+0x76>
 800948a:	2303      	movs	r3, #3
 800948c:	e3ea      	b.n	8009c64 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800948e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <f_mkfs+0x86>
 800949a:	230a      	movs	r3, #10
 800949c:	e3e2      	b.n	8009c64 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800949e:	f107 0214 	add.w	r2, r7, #20
 80094a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80094a6:	2103      	movs	r1, #3
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fd fcd5 	bl	8006e58 <disk_ioctl>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10c      	bne.n	80094ce <f_mkfs+0xb6>
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d009      	beq.n	80094ce <f_mkfs+0xb6>
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094c0:	d805      	bhi.n	80094ce <f_mkfs+0xb6>
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	1e5a      	subs	r2, r3, #1
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	4013      	ands	r3, r2
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <f_mkfs+0xba>
 80094ce:	2301      	movs	r3, #1
 80094d0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80094d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094d6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <f_mkfs+0xce>
 80094de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d309      	bcc.n	80094fa <f_mkfs+0xe2>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094ec:	d805      	bhi.n	80094fa <f_mkfs+0xe2>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	1e5a      	subs	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4013      	ands	r3, r2
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <f_mkfs+0xe6>
 80094fa:	2313      	movs	r3, #19
 80094fc:	e3b2      	b.n	8009c64 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80094fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	fbb2 f3f3 	udiv	r3, r2, r3
 8009506:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800950c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800950e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009512:	fbb2 f3f3 	udiv	r3, r2, r3
 8009516:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8009518:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	fb02 f303 	mul.w	r3, r2, r3
 8009520:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <f_mkfs+0x114>
 8009528:	230e      	movs	r3, #14
 800952a:	e39b      	b.n	8009c64 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800952c:	f107 0210 	add.w	r2, r7, #16
 8009530:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009534:	2101      	movs	r1, #1
 8009536:	4618      	mov	r0, r3
 8009538:	f7fd fc8e 	bl	8006e58 <disk_ioctl>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <f_mkfs+0x12e>
 8009542:	2301      	movs	r3, #1
 8009544:	e38e      	b.n	8009c64 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <f_mkfs+0x13c>
 8009550:	2300      	movs	r3, #0
 8009552:	e000      	b.n	8009556 <f_mkfs+0x13e>
 8009554:	233f      	movs	r3, #63	; 0x3f
 8009556:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800955c:	429a      	cmp	r2, r3
 800955e:	d901      	bls.n	8009564 <f_mkfs+0x14c>
 8009560:	230e      	movs	r3, #14
 8009562:	e37f      	b.n	8009c64 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	2b7f      	cmp	r3, #127	; 0x7f
 8009570:	d801      	bhi.n	8009576 <f_mkfs+0x15e>
 8009572:	230e      	movs	r3, #14
 8009574:	e376      	b.n	8009c64 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b80      	cmp	r3, #128	; 0x80
 800957a:	d901      	bls.n	8009580 <f_mkfs+0x168>
 800957c:	2313      	movs	r3, #19
 800957e:	e371      	b.n	8009c64 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8009580:	7afb      	ldrb	r3, [r7, #11]
 8009582:	f003 0302 	and.w	r3, r3, #2
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00d      	beq.n	80095a6 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800958a:	7afb      	ldrb	r3, [r7, #11]
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	2b02      	cmp	r3, #2
 8009592:	d004      	beq.n	800959e <f_mkfs+0x186>
 8009594:	7afb      	ldrb	r3, [r7, #11]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d103      	bne.n	80095a6 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800959e:	2303      	movs	r3, #3
 80095a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80095a4:	e009      	b.n	80095ba <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80095a6:	7afb      	ldrb	r3, [r7, #11]
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <f_mkfs+0x19c>
 80095b0:	2313      	movs	r3, #19
 80095b2:	e357      	b.n	8009c64 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80095b4:	2302      	movs	r3, #2
 80095b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80095be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d13c      	bne.n	8009640 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80095c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d11b      	bne.n	8009604 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	0c5b      	lsrs	r3, r3, #17
 80095d0:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80095d2:	2300      	movs	r3, #0
 80095d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80095d6:	2301      	movs	r3, #1
 80095d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095da:	e005      	b.n	80095e8 <f_mkfs+0x1d0>
 80095dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095de:	3301      	adds	r3, #1
 80095e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80095e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095e8:	4a2d      	ldr	r2, [pc, #180]	; (80096a0 <f_mkfs+0x288>)
 80095ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d007      	beq.n	8009604 <f_mkfs+0x1ec>
 80095f4:	4a2a      	ldr	r2, [pc, #168]	; (80096a0 <f_mkfs+0x288>)
 80095f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095fc:	461a      	mov	r2, r3
 80095fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009600:	4293      	cmp	r3, r2
 8009602:	d2eb      	bcs.n	80095dc <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009608:	fbb2 f3f3 	udiv	r3, r2, r3
 800960c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	3302      	adds	r3, #2
 8009612:	009a      	lsls	r2, r3, #2
 8009614:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009616:	4413      	add	r3, r2
 8009618:	1e5a      	subs	r2, r3, #1
 800961a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800961c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009620:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8009622:	2320      	movs	r3, #32
 8009624:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 8009626:	2300      	movs	r3, #0
 8009628:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009630:	4293      	cmp	r3, r2
 8009632:	d903      	bls.n	800963c <f_mkfs+0x224>
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	4a1b      	ldr	r2, [pc, #108]	; (80096a4 <f_mkfs+0x28c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d952      	bls.n	80096e2 <f_mkfs+0x2ca>
 800963c:	230e      	movs	r3, #14
 800963e:	e311      	b.n	8009c64 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8009640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009642:	2b00      	cmp	r3, #0
 8009644:	d11b      	bne.n	800967e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	0b1b      	lsrs	r3, r3, #12
 800964a:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800964c:	2300      	movs	r3, #0
 800964e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009650:	2301      	movs	r3, #1
 8009652:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009654:	e005      	b.n	8009662 <f_mkfs+0x24a>
 8009656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009658:	3301      	adds	r3, #1
 800965a:	64bb      	str	r3, [r7, #72]	; 0x48
 800965c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800965e:	005b      	lsls	r3, r3, #1
 8009660:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009662:	4a11      	ldr	r2, [pc, #68]	; (80096a8 <f_mkfs+0x290>)
 8009664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d007      	beq.n	800967e <f_mkfs+0x266>
 800966e:	4a0e      	ldr	r2, [pc, #56]	; (80096a8 <f_mkfs+0x290>)
 8009670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009676:	461a      	mov	r2, r3
 8009678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800967a:	4293      	cmp	r3, r2
 800967c:	d2eb      	bcs.n	8009656 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009682:	fbb2 f3f3 	udiv	r3, r2, r3
 8009686:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800968e:	4293      	cmp	r3, r2
 8009690:	d90c      	bls.n	80096ac <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	3302      	adds	r3, #2
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	663b      	str	r3, [r7, #96]	; 0x60
 800969a:	e012      	b.n	80096c2 <f_mkfs+0x2aa>
 800969c:	20000058 	.word	0x20000058
 80096a0:	08009ea0 	.word	0x08009ea0
 80096a4:	0ffffff5 	.word	0x0ffffff5
 80096a8:	08009eb0 	.word	0x08009eb0
				} else {
					fmt = FS_FAT12;
 80096ac:	2301      	movs	r3, #1
 80096ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80096b2:	6a3a      	ldr	r2, [r7, #32]
 80096b4:	4613      	mov	r3, r2
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	4413      	add	r3, r2
 80096ba:	3301      	adds	r3, #1
 80096bc:	085b      	lsrs	r3, r3, #1
 80096be:	3303      	adds	r3, #3
 80096c0:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80096c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80096c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096c6:	4413      	add	r3, r2
 80096c8:	1e5a      	subs	r2, r3, #1
 80096ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80096cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 80096d2:	2301      	movs	r3, #1
 80096d4:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80096d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80096dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e0:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80096e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096e6:	4413      	add	r3, r2
 80096e8:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80096ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096ee:	fb02 f203 	mul.w	r2, r2, r3
 80096f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096f4:	4413      	add	r3, r2
 80096f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096f8:	4413      	add	r3, r2
 80096fa:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	4413      	add	r3, r2
 8009702:	1e5a      	subs	r2, r3, #1
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	425b      	negs	r3, r3
 8009708:	401a      	ands	r2, r3
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8009710:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009714:	2b03      	cmp	r3, #3
 8009716:	d108      	bne.n	800972a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8009718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800971a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800971c:	4413      	add	r3, r2
 800971e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009720:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009724:	4413      	add	r3, r2
 8009726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009728:	e006      	b.n	8009738 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800972a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800972c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800972e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009732:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009734:	4413      	add	r3, r2
 8009736:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8009738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800973a:	011a      	lsls	r2, r3, #4
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	441a      	add	r2, r3
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	1ad2      	subs	r2, r2, r3
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	429a      	cmp	r2, r3
 8009748:	d901      	bls.n	800974e <f_mkfs+0x336>
 800974a:	230e      	movs	r3, #14
 800974c:	e28a      	b.n	8009c64 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009752:	1ad2      	subs	r2, r2, r3
 8009754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009758:	fb01 f303 	mul.w	r3, r1, r3
 800975c:	1ad2      	subs	r2, r2, r3
 800975e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009760:	1ad2      	subs	r2, r2, r3
 8009762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009764:	fbb2 f3f3 	udiv	r3, r2, r3
 8009768:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800976a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800976e:	2b03      	cmp	r3, #3
 8009770:	d10f      	bne.n	8009792 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009778:	4293      	cmp	r3, r2
 800977a:	d80a      	bhi.n	8009792 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <f_mkfs+0x376>
 8009782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009784:	085b      	lsrs	r3, r3, #1
 8009786:	607b      	str	r3, [r7, #4]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d144      	bne.n	8009818 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800978e:	230e      	movs	r3, #14
 8009790:	e268      	b.n	8009c64 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8009792:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009796:	2b02      	cmp	r3, #2
 8009798:	d133      	bne.n	8009802 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d91e      	bls.n	80097e2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d107      	bne.n	80097ba <f_mkfs+0x3a2>
 80097aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	2b40      	cmp	r3, #64	; 0x40
 80097b0:	d803      	bhi.n	80097ba <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80097b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	607b      	str	r3, [r7, #4]
 80097b8:	e033      	b.n	8009822 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80097ba:	7afb      	ldrb	r3, [r7, #11]
 80097bc:	f003 0302 	and.w	r3, r3, #2
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80097c4:	2303      	movs	r3, #3
 80097c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80097ca:	e02a      	b.n	8009822 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d105      	bne.n	80097de <f_mkfs+0x3c6>
 80097d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	607b      	str	r3, [r7, #4]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b80      	cmp	r3, #128	; 0x80
 80097dc:	d91e      	bls.n	800981c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80097de:	230e      	movs	r3, #14
 80097e0:	e240      	b.n	8009c64 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d80a      	bhi.n	8009802 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d105      	bne.n	80097fe <f_mkfs+0x3e6>
 80097f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	607b      	str	r3, [r7, #4]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b80      	cmp	r3, #128	; 0x80
 80097fc:	d910      	bls.n	8009820 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80097fe:	230e      	movs	r3, #14
 8009800:	e230      	b.n	8009c64 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8009802:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009806:	2b01      	cmp	r3, #1
 8009808:	d10c      	bne.n	8009824 <f_mkfs+0x40c>
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009810:	4293      	cmp	r3, r2
 8009812:	d907      	bls.n	8009824 <f_mkfs+0x40c>
 8009814:	230e      	movs	r3, #14
 8009816:	e225      	b.n	8009c64 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009818:	bf00      	nop
 800981a:	e6ce      	b.n	80095ba <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800981c:	bf00      	nop
 800981e:	e6cc      	b.n	80095ba <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009820:	bf00      	nop
			pau = au;
 8009822:	e6ca      	b.n	80095ba <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8009824:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8009826:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009828:	461a      	mov	r2, r3
 800982a:	2100      	movs	r1, #0
 800982c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800982e:	f7fd fbd4 	bl	8006fda <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8009832:	220b      	movs	r2, #11
 8009834:	49bc      	ldr	r1, [pc, #752]	; (8009b28 <f_mkfs+0x710>)
 8009836:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009838:	f7fd fbae 	bl	8006f98 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	330b      	adds	r3, #11
 8009840:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009842:	4611      	mov	r1, r2
 8009844:	4618      	mov	r0, r3
 8009846:	f7fd fb60 	bl	8006f0a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	330d      	adds	r3, #13
 800984e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009850:	b2d2      	uxtb	r2, r2
 8009852:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	330e      	adds	r3, #14
 8009858:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800985a:	b292      	uxth	r2, r2
 800985c:	4611      	mov	r1, r2
 800985e:	4618      	mov	r0, r3
 8009860:	f7fd fb53 	bl	8006f0a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009866:	3310      	adds	r3, #16
 8009868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800986a:	b2d2      	uxtb	r2, r2
 800986c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	f103 0211 	add.w	r2, r3, #17
 8009874:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009878:	2b03      	cmp	r3, #3
 800987a:	d002      	beq.n	8009882 <f_mkfs+0x46a>
 800987c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800987e:	b29b      	uxth	r3, r3
 8009880:	e000      	b.n	8009884 <f_mkfs+0x46c>
 8009882:	2300      	movs	r3, #0
 8009884:	4619      	mov	r1, r3
 8009886:	4610      	mov	r0, r2
 8009888:	f7fd fb3f 	bl	8006f0a <st_word>
		if (sz_vol < 0x10000) {
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009892:	d208      	bcs.n	80098a6 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	3313      	adds	r3, #19
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	b292      	uxth	r2, r2
 800989c:	4611      	mov	r1, r2
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fd fb33 	bl	8006f0a <st_word>
 80098a4:	e006      	b.n	80098b4 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	3320      	adds	r3, #32
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	4611      	mov	r1, r2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fd fb46 	bl	8006f40 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80098b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b6:	3315      	adds	r3, #21
 80098b8:	22f8      	movs	r2, #248	; 0xf8
 80098ba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	3318      	adds	r3, #24
 80098c0:	213f      	movs	r1, #63	; 0x3f
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fd fb21 	bl	8006f0a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80098c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ca:	331a      	adds	r3, #26
 80098cc:	21ff      	movs	r1, #255	; 0xff
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fd fb1b 	bl	8006f0a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80098d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d6:	331c      	adds	r3, #28
 80098d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fd fb30 	bl	8006f40 <st_dword>
		if (fmt == FS_FAT32) {
 80098e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d131      	bne.n	800994c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80098ee:	f7fb ff27 	bl	8005740 <get_fattime>
 80098f2:	4603      	mov	r3, r0
 80098f4:	4619      	mov	r1, r3
 80098f6:	4620      	mov	r0, r4
 80098f8:	f7fd fb22 	bl	8006f40 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80098fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fe:	3324      	adds	r3, #36	; 0x24
 8009900:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009902:	4618      	mov	r0, r3
 8009904:	f7fd fb1c 	bl	8006f40 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8009908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990a:	332c      	adds	r3, #44	; 0x2c
 800990c:	2102      	movs	r1, #2
 800990e:	4618      	mov	r0, r3
 8009910:	f7fd fb16 	bl	8006f40 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8009914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009916:	3330      	adds	r3, #48	; 0x30
 8009918:	2101      	movs	r1, #1
 800991a:	4618      	mov	r0, r3
 800991c:	f7fd faf5 	bl	8006f0a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	3332      	adds	r3, #50	; 0x32
 8009924:	2106      	movs	r1, #6
 8009926:	4618      	mov	r0, r3
 8009928:	f7fd faef 	bl	8006f0a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	3340      	adds	r3, #64	; 0x40
 8009930:	2280      	movs	r2, #128	; 0x80
 8009932:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	3342      	adds	r3, #66	; 0x42
 8009938:	2229      	movs	r2, #41	; 0x29
 800993a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	3347      	adds	r3, #71	; 0x47
 8009940:	2213      	movs	r2, #19
 8009942:	497a      	ldr	r1, [pc, #488]	; (8009b2c <f_mkfs+0x714>)
 8009944:	4618      	mov	r0, r3
 8009946:	f7fd fb27 	bl	8006f98 <mem_cpy>
 800994a:	e020      	b.n	800998e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800994c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8009952:	f7fb fef5 	bl	8005740 <get_fattime>
 8009956:	4603      	mov	r3, r0
 8009958:	4619      	mov	r1, r3
 800995a:	4620      	mov	r0, r4
 800995c:	f7fd faf0 	bl	8006f40 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	3316      	adds	r3, #22
 8009964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009966:	b292      	uxth	r2, r2
 8009968:	4611      	mov	r1, r2
 800996a:	4618      	mov	r0, r3
 800996c:	f7fd facd 	bl	8006f0a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	3324      	adds	r3, #36	; 0x24
 8009974:	2280      	movs	r2, #128	; 0x80
 8009976:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8009978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997a:	3326      	adds	r3, #38	; 0x26
 800997c:	2229      	movs	r2, #41	; 0x29
 800997e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8009980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009982:	332b      	adds	r3, #43	; 0x2b
 8009984:	2213      	movs	r2, #19
 8009986:	496a      	ldr	r1, [pc, #424]	; (8009b30 <f_mkfs+0x718>)
 8009988:	4618      	mov	r0, r3
 800998a:	f7fd fb05 	bl	8006f98 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009994:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009998:	4618      	mov	r0, r3
 800999a:	f7fd fab6 	bl	8006f0a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800999e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80099a2:	2301      	movs	r3, #1
 80099a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099a8:	f7fd fa36 	bl	8006e18 <disk_write>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <f_mkfs+0x59e>
 80099b2:	2301      	movs	r3, #1
 80099b4:	e156      	b.n	8009c64 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80099b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d140      	bne.n	8009a40 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	1d9a      	adds	r2, r3, #6
 80099c2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80099c6:	2301      	movs	r3, #1
 80099c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099ca:	f7fd fa25 	bl	8006e18 <disk_write>
			mem_set(buf, 0, ss);
 80099ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099d0:	461a      	mov	r2, r3
 80099d2:	2100      	movs	r1, #0
 80099d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099d6:	f7fd fb00 	bl	8006fda <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80099da:	4956      	ldr	r1, [pc, #344]	; (8009b34 <f_mkfs+0x71c>)
 80099dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099de:	f7fd faaf 	bl	8006f40 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80099e8:	4953      	ldr	r1, [pc, #332]	; (8009b38 <f_mkfs+0x720>)
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fd faa8 	bl	8006f40 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	4619      	mov	r1, r3
 80099fc:	4610      	mov	r0, r2
 80099fe:	f7fd fa9f 	bl	8006f40 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009a08:	2102      	movs	r1, #2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fd fa98 	bl	8006f40 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a16:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fd fa75 	bl	8006f0a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	1dda      	adds	r2, r3, #7
 8009a24:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009a28:	2301      	movs	r3, #1
 8009a2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a2c:	f7fd f9f4 	bl	8006e18 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009a38:	2301      	movs	r3, #1
 8009a3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a3c:	f7fd f9ec 	bl	8006e18 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8009a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a42:	2100      	movs	r1, #0
 8009a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a46:	f7fd fac8 	bl	8006fda <mem_set>
		sect = b_fat;		/* FAT start sector */
 8009a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a4c:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8009a4e:	2300      	movs	r3, #0
 8009a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a52:	e04b      	b.n	8009aec <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8009a54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d113      	bne.n	8009a84 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8009a5c:	f06f 0107 	mvn.w	r1, #7
 8009a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a62:	f7fd fa6d 	bl	8006f40 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8009a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a68:	3304      	adds	r3, #4
 8009a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fd fa66 	bl	8006f40 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8009a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a76:	3308      	adds	r3, #8
 8009a78:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fd fa5f 	bl	8006f40 <st_dword>
 8009a82:	e00b      	b.n	8009a9c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8009a84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d101      	bne.n	8009a90 <f_mkfs+0x678>
 8009a8c:	4b2b      	ldr	r3, [pc, #172]	; (8009b3c <f_mkfs+0x724>)
 8009a8e:	e001      	b.n	8009a94 <f_mkfs+0x67c>
 8009a90:	f06f 0307 	mvn.w	r3, #7
 8009a94:	4619      	mov	r1, r3
 8009a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a98:	f7fd fa52 	bl	8006f40 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8009a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a9e:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8009aa0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	bf28      	it	cs
 8009aa8:	4613      	movcs	r3, r2
 8009aaa:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8009aac:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ab2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ab6:	f7fd f9af 	bl	8006e18 <disk_write>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <f_mkfs+0x6ac>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e0cf      	b.n	8009c64 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8009ac4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	2100      	movs	r1, #0
 8009aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009acc:	f7fd fa85 	bl	8006fda <mem_set>
				sect += n; nsect -= n;
 8009ad0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ad4:	4413      	add	r3, r2
 8009ad6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ad8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 8009ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1dc      	bne.n	8009aa0 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8009ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ae8:	3301      	adds	r3, #1
 8009aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8009aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d3af      	bcc.n	8009a54 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8009af4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009af8:	2b03      	cmp	r3, #3
 8009afa:	d101      	bne.n	8009b00 <f_mkfs+0x6e8>
 8009afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009afe:	e000      	b.n	8009b02 <f_mkfs+0x6ea>
 8009b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b02:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8009b04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	bf28      	it	cs
 8009b0c:	4613      	movcs	r3, r2
 8009b0e:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8009b10:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b1a:	f7fd f97d 	bl	8006e18 <disk_write>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00d      	beq.n	8009b40 <f_mkfs+0x728>
 8009b24:	2301      	movs	r3, #1
 8009b26:	e09d      	b.n	8009c64 <f_mkfs+0x84c>
 8009b28:	08009dc4 	.word	0x08009dc4
 8009b2c:	08009dd0 	.word	0x08009dd0
 8009b30:	08009de4 	.word	0x08009de4
 8009b34:	41615252 	.word	0x41615252
 8009b38:	61417272 	.word	0x61417272
 8009b3c:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8009b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b44:	4413      	add	r3, r2
 8009b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 8009b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1d6      	bne.n	8009b04 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8009b56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d103      	bne.n	8009b66 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8009b5e:	230c      	movs	r3, #12
 8009b60:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009b64:	e010      	b.n	8009b88 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b6c:	d303      	bcc.n	8009b76 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8009b6e:	2306      	movs	r3, #6
 8009b70:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009b74:	e008      	b.n	8009b88 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8009b76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d101      	bne.n	8009b82 <f_mkfs+0x76a>
 8009b7e:	2304      	movs	r3, #4
 8009b80:	e000      	b.n	8009b84 <f_mkfs+0x76c>
 8009b82:	2301      	movs	r3, #1
 8009b84:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	f003 0308 	and.w	r3, r3, #8
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d15b      	bne.n	8009c4a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8009b92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b94:	461a      	mov	r2, r3
 8009b96:	2100      	movs	r1, #0
 8009b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b9a:	f7fd fa1e 	bl	8006fda <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009ba4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fd f9ae 	bl	8006f0a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009bb4:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	3302      	adds	r3, #2
 8009bc8:	2201      	movs	r2, #1
 8009bca:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	3303      	adds	r3, #3
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009bdc:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	441a      	add	r2, r3
 8009be4:	4b21      	ldr	r3, [pc, #132]	; (8009c6c <f_mkfs+0x854>)
 8009be6:	fba3 1302 	umull	r1, r3, r3, r2
 8009bea:	1ad2      	subs	r2, r2, r3
 8009bec:	0852      	lsrs	r2, r2, #1
 8009bee:	4413      	add	r3, r2
 8009bf0:	0b5b      	lsrs	r3, r3, #13
 8009bf2:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	3305      	adds	r3, #5
 8009bf8:	22fe      	movs	r2, #254	; 0xfe
 8009bfa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8009bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bfe:	089b      	lsrs	r3, r3, #2
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	3306      	adds	r3, #6
 8009c06:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8009c0a:	b2d2      	uxtb	r2, r2
 8009c0c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	3307      	adds	r3, #7
 8009c12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c14:	b2d2      	uxtb	r2, r2
 8009c16:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fd f98e 	bl	8006f40 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	330c      	adds	r3, #12
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fd f987 	bl	8006f40 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8009c32:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009c36:	2301      	movs	r3, #1
 8009c38:	2200      	movs	r2, #0
 8009c3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c3c:	f7fd f8ec 	bl	8006e18 <disk_write>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <f_mkfs+0x832>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e00c      	b.n	8009c64 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8009c4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2100      	movs	r1, #0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fd f900 	bl	8006e58 <disk_ioctl>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <f_mkfs+0x84a>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e000      	b.n	8009c64 <f_mkfs+0x84c>

	return FR_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3774      	adds	r7, #116	; 0x74
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd90      	pop	{r4, r7, pc}
 8009c6c:	0515565b 	.word	0x0515565b

08009c70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009c86:	4b1f      	ldr	r3, [pc, #124]	; (8009d04 <FATFS_LinkDriverEx+0x94>)
 8009c88:	7a5b      	ldrb	r3, [r3, #9]
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d131      	bne.n	8009cf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c90:	4b1c      	ldr	r3, [pc, #112]	; (8009d04 <FATFS_LinkDriverEx+0x94>)
 8009c92:	7a5b      	ldrb	r3, [r3, #9]
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	461a      	mov	r2, r3
 8009c98:	4b1a      	ldr	r3, [pc, #104]	; (8009d04 <FATFS_LinkDriverEx+0x94>)
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009c9e:	4b19      	ldr	r3, [pc, #100]	; (8009d04 <FATFS_LinkDriverEx+0x94>)
 8009ca0:	7a5b      	ldrb	r3, [r3, #9]
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	4a17      	ldr	r2, [pc, #92]	; (8009d04 <FATFS_LinkDriverEx+0x94>)
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009cae:	4b15      	ldr	r3, [pc, #84]	; (8009d04 <FATFS_LinkDriverEx+0x94>)
 8009cb0:	7a5b      	ldrb	r3, [r3, #9]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4b13      	ldr	r3, [pc, #76]	; (8009d04 <FATFS_LinkDriverEx+0x94>)
 8009cb8:	4413      	add	r3, r2
 8009cba:	79fa      	ldrb	r2, [r7, #7]
 8009cbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009cbe:	4b11      	ldr	r3, [pc, #68]	; (8009d04 <FATFS_LinkDriverEx+0x94>)
 8009cc0:	7a5b      	ldrb	r3, [r3, #9]
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	b2d1      	uxtb	r1, r2
 8009cc8:	4a0e      	ldr	r2, [pc, #56]	; (8009d04 <FATFS_LinkDriverEx+0x94>)
 8009cca:	7251      	strb	r1, [r2, #9]
 8009ccc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009cce:	7dbb      	ldrb	r3, [r7, #22]
 8009cd0:	3330      	adds	r3, #48	; 0x30
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	223a      	movs	r2, #58	; 0x3a
 8009cde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	3302      	adds	r3, #2
 8009ce4:	222f      	movs	r2, #47	; 0x2f
 8009ce6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	3303      	adds	r3, #3
 8009cec:	2200      	movs	r2, #0
 8009cee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	20000080 	.word	0x20000080

08009d08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d12:	2200      	movs	r2, #0
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff ffaa 	bl	8009c70 <FATFS_LinkDriverEx>
 8009d1c:	4603      	mov	r3, r0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <__libc_init_array>:
 8009d28:	b570      	push	{r4, r5, r6, lr}
 8009d2a:	4e0d      	ldr	r6, [pc, #52]	; (8009d60 <__libc_init_array+0x38>)
 8009d2c:	4c0d      	ldr	r4, [pc, #52]	; (8009d64 <__libc_init_array+0x3c>)
 8009d2e:	1ba4      	subs	r4, r4, r6
 8009d30:	10a4      	asrs	r4, r4, #2
 8009d32:	2500      	movs	r5, #0
 8009d34:	42a5      	cmp	r5, r4
 8009d36:	d109      	bne.n	8009d4c <__libc_init_array+0x24>
 8009d38:	4e0b      	ldr	r6, [pc, #44]	; (8009d68 <__libc_init_array+0x40>)
 8009d3a:	4c0c      	ldr	r4, [pc, #48]	; (8009d6c <__libc_init_array+0x44>)
 8009d3c:	f000 f820 	bl	8009d80 <_init>
 8009d40:	1ba4      	subs	r4, r4, r6
 8009d42:	10a4      	asrs	r4, r4, #2
 8009d44:	2500      	movs	r5, #0
 8009d46:	42a5      	cmp	r5, r4
 8009d48:	d105      	bne.n	8009d56 <__libc_init_array+0x2e>
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}
 8009d4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d50:	4798      	blx	r3
 8009d52:	3501      	adds	r5, #1
 8009d54:	e7ee      	b.n	8009d34 <__libc_init_array+0xc>
 8009d56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d5a:	4798      	blx	r3
 8009d5c:	3501      	adds	r5, #1
 8009d5e:	e7f2      	b.n	8009d46 <__libc_init_array+0x1e>
 8009d60:	08009ec8 	.word	0x08009ec8
 8009d64:	08009ec8 	.word	0x08009ec8
 8009d68:	08009ec8 	.word	0x08009ec8
 8009d6c:	08009ecc 	.word	0x08009ecc

08009d70 <memset>:
 8009d70:	4402      	add	r2, r0
 8009d72:	4603      	mov	r3, r0
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d100      	bne.n	8009d7a <memset+0xa>
 8009d78:	4770      	bx	lr
 8009d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d7e:	e7f9      	b.n	8009d74 <memset+0x4>

08009d80 <_init>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	bf00      	nop
 8009d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d86:	bc08      	pop	{r3}
 8009d88:	469e      	mov	lr, r3
 8009d8a:	4770      	bx	lr

08009d8c <_fini>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	bf00      	nop
 8009d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d92:	bc08      	pop	{r3}
 8009d94:	469e      	mov	lr, r3
 8009d96:	4770      	bx	lr
