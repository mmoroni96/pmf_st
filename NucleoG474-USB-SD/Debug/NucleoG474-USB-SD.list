
NucleoG474-USB-SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b710  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800b8e8  0800b8e8  0001b8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb38  0800bb38  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb38  0800bb38  0001bb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb40  0800bb40  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb40  0800bb40  0001bb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb44  0800bb44  0001bb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800bb48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000adc  200001f4  0800bd3c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd0  0800bd3c  00020cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021dfd  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d1d  00000000  00000000  00042021  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f8  00000000  00000000  00045d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001818  00000000  00000000  00047738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a89c  00000000  00000000  00048f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a2cd  00000000  00000000  000737ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010966c  00000000  00000000  0008dab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00197125  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e50  00000000  00000000  001971a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001f4 	.word	0x200001f4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b8d0 	.word	0x0800b8d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001f8 	.word	0x200001f8
 8000214:	0800b8d0 	.word	0x0800b8d0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_FDCAN1_Init+0x84>)
 800051e:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <MX_FDCAN1_Init+0x88>)
 8000520:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_FDCAN1_Init+0x84>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000536:	2200      	movs	r2, #0
 8000538:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_FDCAN1_Init+0x84>)
 800053c:	2200      	movs	r2, #0
 800053e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000542:	2200      	movs	r2, #0
 8000544:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 40;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000548:	2228      	movs	r2, #40	; 0x28
 800054a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_FDCAN1_Init+0x84>)
 800054e:	2201      	movs	r2, #1
 8000550:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000554:	220d      	movs	r2, #13
 8000556:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_FDCAN1_Init+0x84>)
 800055a:	2202      	movs	r2, #2
 800055c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000560:	2201      	movs	r2, #1
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000566:	2201      	movs	r2, #1
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_FDCAN1_Init+0x84>)
 800056c:	2201      	movs	r2, #1
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000572:	2201      	movs	r2, #1
 8000574:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000578:	2200      	movs	r2, #0
 800057a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_FDCAN1_Init+0x84>)
 800057e:	2200      	movs	r2, #0
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_FDCAN1_Init+0x84>)
 800058a:	f001 f8f3 	bl	8001774 <HAL_FDCAN_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000594:	f000 fc7e 	bl	8000e94 <Error_Handler>
  }

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000260 	.word	0x20000260
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <HAL_FDCAN_MspInit+0x80>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d129      	bne.n	800061a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000608:	2309      	movs	r3, #9
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f001 fdfd 	bl	8002214 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40006400 	.word	0x40006400
 8000628:	40021000 	.word	0x40021000

0800062c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 ff4d 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_GPIO_Init+0xc8>)
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_GPIO_Init+0xcc>)
 80006c4:	f001 fda6 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006c8:	2320      	movs	r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f001 fd97 	bl	8002214 <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	48000800 	.word	0x48000800

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	f5ad 6d0b 	sub.w	sp, sp, #2224	; 0x8b0
 8000702:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 fe93 	bl	800142e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f8e8 	bl	80008dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Initialize the micro SD Card */
  if(MY_SD_Init(0) != BSP_ERROR_NONE){
 800070c:	2000      	movs	r0, #0
 800070e:	f006 f937 	bl	8006980 <MY_SD_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <main+0x20>
	  Error_Handler();
 8000718:	f000 fbbc 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff86 	bl	800062c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000720:	f000 fdd4 	bl	80012cc <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000724:	f000 fc32 	bl	8000f8c <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000728:	f006 f90a 	bl	8006940 <MX_FATFS_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <main+0x3a>
    Error_Handler();
 8000732:	f000 fbaf 	bl	8000e94 <Error_Handler>
  }
  MX_FDCAN1_Init();
 8000736:	f7ff feef 	bl	8000518 <MX_FDCAN1_Init>
  MX_RTC_Init();
 800073a:	f000 fbaf 	bl	8000e9c <MX_RTC_Init>
  MX_TIM16_Init();
 800073e:	f000 fd45 	bl	80011cc <MX_TIM16_Init>
  MX_TIM17_Init();
 8000742:	f000 fd69 	bl	8001218 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000746:	f000 f947 	bl	80009d8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.Identifier = 0x0;
 800074a:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <main+0x1b8>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000750:	4b58      	ldr	r3, [pc, #352]	; (80008b4 <main+0x1b8>)
 8000752:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000756:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000758:	4b56      	ldr	r3, [pc, #344]	; (80008b4 <main+0x1b8>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <main+0x1b8>)
 8000760:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000764:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000766:	4b53      	ldr	r3, [pc, #332]	; (80008b4 <main+0x1b8>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800076c:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <main+0x1b8>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000772:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <main+0x1b8>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000778:	4b4e      	ldr	r3, [pc, #312]	; (80008b4 <main+0x1b8>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <main+0x1b8>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
    TxData[0] = ubKeyNumber++;
 8000784:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <main+0x1bc>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	b2d1      	uxtb	r1, r2
 800078c:	4a4a      	ldr	r2, [pc, #296]	; (80008b8 <main+0x1bc>)
 800078e:	7011      	strb	r1, [r2, #0]
 8000790:	4a4a      	ldr	r2, [pc, #296]	; (80008bc <main+0x1c0>)
 8000792:	7013      	strb	r3, [r2, #0]
    TxData[1] = 0xAD;
 8000794:	4b49      	ldr	r3, [pc, #292]	; (80008bc <main+0x1c0>)
 8000796:	22ad      	movs	r2, #173	; 0xad
 8000798:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0xDE;
 800079a:	4b48      	ldr	r3, [pc, #288]	; (80008bc <main+0x1c0>)
 800079c:	22de      	movs	r2, #222	; 0xde
 800079e:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0xAD;
 80007a0:	4b46      	ldr	r3, [pc, #280]	; (80008bc <main+0x1c0>)
 80007a2:	22ad      	movs	r2, #173	; 0xad
 80007a4:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0xBE;
 80007a6:	4b45      	ldr	r3, [pc, #276]	; (80008bc <main+0x1c0>)
 80007a8:	22be      	movs	r2, #190	; 0xbe
 80007aa:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0xEF;
 80007ac:	4b43      	ldr	r3, [pc, #268]	; (80008bc <main+0x1c0>)
 80007ae:	22ef      	movs	r2, #239	; 0xef
 80007b0:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0xFA;
 80007b2:	4b42      	ldr	r3, [pc, #264]	; (80008bc <main+0x1c0>)
 80007b4:	22fa      	movs	r2, #250	; 0xfa
 80007b6:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0xCE;
 80007b8:	4b40      	ldr	r3, [pc, #256]	; (80008bc <main+0x1c0>)
 80007ba:	22ce      	movs	r2, #206	; 0xce
 80007bc:	71da      	strb	r2, [r3, #7]
    uint16_t aug=3456;
 80007be:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 80007c2:	f8a7 38a6 	strh.w	r3, [r7, #2214]	; 0x8a6
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80007c6:	483e      	ldr	r0, [pc, #248]	; (80008c0 <main+0x1c4>)
 80007c8:	f001 f92e 	bl	8001a28 <HAL_FDCAN_Start>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <main+0xda>
        {
          /* Start Error */
          Error_Handler();
 80007d2:	f000 fb5f 	bl	8000e94 <Error_Handler>
        }

      if ( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80007d6:	2200      	movs	r2, #0
 80007d8:	2101      	movs	r1, #1
 80007da:	4839      	ldr	r0, [pc, #228]	; (80008c0 <main+0x1c4>)
 80007dc:	f001 fa26 	bl	8001c2c <HAL_FDCAN_ActivateNotification>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <main+0xee>
        {
          /* Notification Error */
          Error_Handler();
 80007e6:	f000 fb55 	bl	8000e94 <Error_Handler>
      uint8_t workBuffer[_MAX_SS];

      FIL USERFile,readFile,writeFile;       /* File  object for USER */
      char USERPath[4];   /* USER logical drive path */
      FRESULT res,res1; /* FatFs function common result code */
      uint8_t path1[] = "STM32.TXT";
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4a35      	ldr	r2, [pc, #212]	; (80008c4 <main+0x1c8>)
 80007ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f0:	c303      	stmia	r3!, {r0, r1}
 80007f2:	801a      	strh	r2, [r3, #0]

      if(MY_SD_GetCardState(0) == BSP_ERROR_NONE){
 80007f4:	2000      	movs	r0, #0
 80007f6:	f006 fab5 	bl	8006d64 <MY_SD_GetCardState>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d12c      	bne.n	800085a <main+0x15e>

    	  if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin)==GPIO_PIN_SET){
 8000800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000804:	4830      	ldr	r0, [pc, #192]	; (80008c8 <main+0x1cc>)
 8000806:	f001 fe87 	bl	8002518 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b01      	cmp	r3, #1
 800080e:	d124      	bne.n	800085a <main+0x15e>
    		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2120      	movs	r1, #32
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f001 fe96 	bl	8002548 <HAL_GPIO_WritePin>
    		  res = f_mkfs(USERPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 800081c:	f207 62a4 	addw	r2, r7, #1700	; 0x6a4
 8000820:	f107 0010 	add.w	r0, r7, #16
 8000824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	4613      	mov	r3, r2
 800082c:	2200      	movs	r2, #0
 800082e:	2107      	movs	r1, #7
 8000830:	f00a f84a 	bl	800a8c8 <f_mkfs>
 8000834:	4603      	mov	r3, r0
 8000836:	f887 38a5 	strb.w	r3, [r7, #2213]	; 0x8a5
    		  if (res != FR_OK){
 800083a:	f897 38a5 	ldrb.w	r3, [r7, #2213]	; 0x8a5
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <main+0x14a>
    			  Error_Handler();
 8000842:	f000 fb27 	bl	8000e94 <Error_Handler>
    		  }
    		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f001 fe7b 	bl	8002548 <HAL_GPIO_WritePin>
    		  HAL_Delay(2000);
 8000852:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000856:	f000 fe5b 	bl	8001510 <HAL_Delay>
}

      }
      res = f_mount(&USERFatFs, (TCHAR const*)USERPath, 0);
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	481a      	ldr	r0, [pc, #104]	; (80008cc <main+0x1d0>)
 8000864:	f009 f8c6 	bl	80099f4 <f_mount>
 8000868:	4603      	mov	r3, r0
 800086a:	f887 38a5 	strb.w	r3, [r7, #2213]	; 0x8a5
      res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 800086e:	1d39      	adds	r1, r7, #4
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2208      	movs	r2, #8
 8000876:	4618      	mov	r0, r3
 8000878:	f009 f902 	bl	8009a80 <f_open>
 800087c:	4603      	mov	r3, r0
 800087e:	f887 38a5 	strb.w	r3, [r7, #2213]	; 0x8a5
      res = f_close(&writeFile);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4618      	mov	r0, r3
 8000888:	f009 fdea 	bl	800a460 <f_close>
 800088c:	4603      	mov	r3, r0
 800088e:	f887 38a5 	strb.w	r3, [r7, #2213]	; 0x8a5
      if(flag == 0){
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <main+0x1d4>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10a      	bne.n	80008b0 <main+0x1b4>
		  flag = 1;
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <main+0x1d4>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
		  MX_NVIC_Init();
 80008a0:	f000 f89a 	bl	80009d8 <MX_NVIC_Init>

		  HAL_TIM_Base_Start_IT(&htim17);
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <main+0x1d8>)
 80008a6:	f004 f8ef 	bl	8004a88 <HAL_TIM_Base_Start_IT>
		  HAL_TIM_Base_Start_IT(&htim16);
 80008aa:	480b      	ldr	r0, [pc, #44]	; (80008d8 <main+0x1dc>)
 80008ac:	f004 f8ec 	bl	8004a88 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
 80008b0:	e7fe      	b.n	80008b0 <main+0x1b4>
 80008b2:	bf00      	nop
 80008b4:	200003ec 	.word	0x200003ec
 80008b8:	20000210 	.word	0x20000210
 80008bc:	200003b4 	.word	0x200003b4
 80008c0:	20000260 	.word	0x20000260
 80008c4:	0800b8e8 	.word	0x0800b8e8
 80008c8:	48000800 	.word	0x48000800
 80008cc:	20000440 	.word	0x20000440
 80008d0:	2000021c 	.word	0x2000021c
 80008d4:	20000710 	.word	0x20000710
 80008d8:	2000075c 	.word	0x2000075c

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0a8      	sub	sp, #160	; 0xa0
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008e6:	2238      	movs	r2, #56	; 0x38
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00a ff34 	bl	800b758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2254      	movs	r2, #84	; 0x54
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f00a ff26 	bl	800b758 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000910:	f001 fe80 	bl	8002614 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000914:	f001 fe6e 	bl	80025f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000918:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <SystemClock_Config+0xf4>)
 800091a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800091e:	4a2c      	ldr	r2, [pc, #176]	; (80009d0 <SystemClock_Config+0xf4>)
 8000920:	f023 0318 	bic.w	r3, r3, #24
 8000924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000928:	2306      	movs	r3, #6
 800092a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000934:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 32;
 800094c:	2320      	movs	r3, #32
 800094e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000958:	2306      	movs	r3, #6
 800095a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095e:	2302      	movs	r3, #2
 8000960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000968:	4618      	mov	r0, r3
 800096a:	f001 fef7 	bl	800275c <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000974:	f000 fa8e 	bl	8000e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	230f      	movs	r3, #15
 800097a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097c:	2303      	movs	r3, #3
 800097e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800098c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000990:	2106      	movs	r1, #6
 8000992:	4618      	mov	r0, r3
 8000994:	f002 f9fa 	bl	8002d8c <HAL_RCC_ClockConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800099e:	f000 fa79 	bl	8000e94 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <SystemClock_Config+0xf8>)
 80009a4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80009aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fc03 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80009c4:	f000 fa66 	bl	8000e94 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	37a0      	adds	r7, #160	; 0xa0
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40021000 	.word	0x40021000
 80009d4:	00081020 	.word	0x00081020

080009d8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2015      	movs	r0, #21
 80009e2:	f000 fe92 	bl	800170a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80009e6:	2015      	movs	r0, #21
 80009e8:	f000 fea9 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	2028      	movs	r0, #40	; 0x28
 80009f2:	f000 fe8a 	bl	800170a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f6:	2028      	movs	r0, #40	; 0x28
 80009f8:	f000 fea1 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	201a      	movs	r0, #26
 8000a02:	f000 fe82 	bl	800170a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000a06:	201a      	movs	r0, #26
 8000a08:	f000 fe99 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2019      	movs	r0, #25
 8000a12:	f000 fe7a 	bl	800170a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a16:	2019      	movs	r0, #25
 8000a18:	f000 fe91 	bl	800173e <HAL_NVIC_EnableIRQ>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u) != HAL_OK){
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000a2c:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000a2e:	2140      	movs	r1, #64	; 0x40
 8000a30:	4810      	ldr	r0, [pc, #64]	; (8000a74 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8000a32:	f001 f821 	bl	8001a78 <HAL_FDCAN_GetRxMessage>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_FDCAN_RxFifo0Callback+0x20>
		/* Transmission request Error */
		Error_Handler();
 8000a3c:	f000 fa2a 	bl	8000e94 <Error_Handler>
	}
	ID = RxHeader.Identifier;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000a46:	6013      	str	r3, [r2, #0]
	readSigmaData();
 8000a48:	f000 f840 	bl	8000acc <readSigmaData>
    if(flag == 1){
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d101      	bne.n	8000a58 <HAL_FDCAN_RxFifo0Callback+0x38>
    	scrivi();
 8000a54:	f000 f998 	bl	8000d88 <scrivi>
    }

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2120      	movs	r1, #32
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f001 fd72 	bl	8002548 <HAL_GPIO_WritePin>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200002c4 	.word	0x200002c4
 8000a70:	20000410 	.word	0x20000410
 8000a74:	20000260 	.word	0x20000260
 8000a78:	20000220 	.word	0x20000220
 8000a7c:	2000021c 	.word	0x2000021c

08000a80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17) //check if the interrupt comes from TIM2
        {


        }
    if (htim->Instance==TIM16) //check if the interrupt comes from TIM2
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d114      	bne.n	8000abc <HAL_TIM_PeriodElapsedCallback+0x3c>
            {
        	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a92:	2120      	movs	r1, #32
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f001 fd6e 	bl	8002578 <HAL_GPIO_TogglePin>
        	leggi();
 8000a9c:	f000 f92e 	bl	8000cfc <leggi>
        	scrivi();
 8000aa0:	f000 f972 	bl	8000d88 <scrivi>
        	if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin)==GPIO_PIN_SET)
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000aaa:	f001 fd35 	bl	8002518 <HAL_GPIO_ReadPin>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d103      	bne.n	8000abc <HAL_TIM_PeriodElapsedCallback+0x3c>
        	{
        		HAL_Delay(10000);
 8000ab4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ab8:	f000 fd2a 	bl	8001510 <HAL_Delay>
        	}
            }
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40014400 	.word	0x40014400
 8000ac8:	48000800 	.word	0x48000800

08000acc <readSigmaData>:

void readSigmaData(void){
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	switch(ID){
 8000ad0:	4b36      	ldr	r3, [pc, #216]	; (8000bac <readSigmaData+0xe0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ad8:	d01d      	beq.n	8000b16 <readSigmaData+0x4a>
 8000ada:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000ade:	d047      	beq.n	8000b70 <readSigmaData+0xa4>
 8000ae0:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000ae4:	d000      	beq.n	8000ae8 <readSigmaData+0x1c>
			cs.MotorTemperature		= rxData.Data8u[1];
			cs.BDI					= rxData.Data8u[2];
			cs.FaultSubCode			= rxData.Data8u[3]<<8 | rxData.Data8u[4];
	break;
	}
}
 8000ae6:	e05c      	b.n	8000ba2 <readSigmaData+0xd6>
			ms.MotorSpeed			= rxData.Data16u[0];
 8000ae8:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <readSigmaData+0xe4>)
 8000aea:	881a      	ldrh	r2, [r3, #0]
 8000aec:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <readSigmaData+0xe8>)
 8000aee:	801a      	strh	r2, [r3, #0]
			ms.MotorCurrent			= rxData.Data16[1];
 8000af0:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <readSigmaData+0xe4>)
 8000af2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <readSigmaData+0xe8>)
 8000af8:	805a      	strh	r2, [r3, #2]
			ms.MotorVoltage			= rxData.Data8u[4];
 8000afa:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <readSigmaData+0xe4>)
 8000afc:	791a      	ldrb	r2, [r3, #4]
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <readSigmaData+0xe8>)
 8000b00:	711a      	strb	r2, [r3, #4]
			ms.BatteryVoltage		= rxData.Data8u[5];
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <readSigmaData+0xe4>)
 8000b04:	795a      	ldrb	r2, [r3, #5]
 8000b06:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <readSigmaData+0xe8>)
 8000b08:	715a      	strb	r2, [r3, #5]
			ms.BatteryCurrent		= rxData.Data16[4];
 8000b0a:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <readSigmaData+0xe4>)
 8000b0c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <readSigmaData+0xe8>)
 8000b12:	80da      	strh	r2, [r3, #6]
	break;
 8000b14:	e045      	b.n	8000ba2 <readSigmaData+0xd6>
			ds.ActualTorque			= rxData.Data16[0];
 8000b16:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <readSigmaData+0xe4>)
 8000b18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b1c:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <readSigmaData+0xec>)
 8000b1e:	801a      	strh	r2, [r3, #0]
			ds.ActualSpeed			= rxData.Data16[1];
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <readSigmaData+0xe4>)
 8000b22:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b26:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <readSigmaData+0xec>)
 8000b28:	805a      	strh	r2, [r3, #2]
			ds.DriveStatusIndicator	= rxData.Data8u[4] & 0x0F;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <readSigmaData+0xe4>)
 8000b2c:	791b      	ldrb	r3, [r3, #4]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <readSigmaData+0xec>)
 8000b36:	711a      	strb	r2, [r3, #4]
			ds.SpeedLimitIndicator	= rxData.Data8u[4] >> 4;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <readSigmaData+0xe4>)
 8000b3a:	791b      	ldrb	r3, [r3, #4]
 8000b3c:	091b      	lsrs	r3, r3, #4
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <readSigmaData+0xec>)
 8000b42:	715a      	strb	r2, [r3, #5]
			ds.TorqueLimitIndicator	= rxData.Data8u[5] & 0x0F;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <readSigmaData+0xe4>)
 8000b46:	795b      	ldrb	r3, [r3, #5]
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <readSigmaData+0xec>)
 8000b50:	719a      	strb	r2, [r3, #6]
			ds.MotorLimitIndicator	= rxData.Data8u[5] >> 4;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <readSigmaData+0xe4>)
 8000b54:	795b      	ldrb	r3, [r3, #5]
 8000b56:	091b      	lsrs	r3, r3, #4
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <readSigmaData+0xec>)
 8000b5c:	71da      	strb	r2, [r3, #7]
			ds.FaultCode			= rxData.Data8u[6];
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <readSigmaData+0xe4>)
 8000b60:	799a      	ldrb	r2, [r3, #6]
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <readSigmaData+0xec>)
 8000b64:	721a      	strb	r2, [r3, #8]
			ds.Code					= rxData.Data8u[7];
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <readSigmaData+0xe4>)
 8000b68:	79da      	ldrb	r2, [r3, #7]
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <readSigmaData+0xec>)
 8000b6c:	725a      	strb	r2, [r3, #9]
	break;
 8000b6e:	e018      	b.n	8000ba2 <readSigmaData+0xd6>
			cs.ControllerTemperature= rxData.Data8u[0];
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <readSigmaData+0xe4>)
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <readSigmaData+0xf0>)
 8000b76:	701a      	strb	r2, [r3, #0]
			cs.MotorTemperature		= rxData.Data8u[1];
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <readSigmaData+0xe4>)
 8000b7a:	785a      	ldrb	r2, [r3, #1]
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <readSigmaData+0xf0>)
 8000b7e:	705a      	strb	r2, [r3, #1]
			cs.BDI					= rxData.Data8u[2];
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <readSigmaData+0xe4>)
 8000b82:	789a      	ldrb	r2, [r3, #2]
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <readSigmaData+0xf0>)
 8000b86:	709a      	strb	r2, [r3, #2]
			cs.FaultSubCode			= rxData.Data8u[3]<<8 | rxData.Data8u[4];
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <readSigmaData+0xe4>)
 8000b8a:	78db      	ldrb	r3, [r3, #3]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <readSigmaData+0xe4>)
 8000b92:	791b      	ldrb	r3, [r3, #4]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <readSigmaData+0xf0>)
 8000b9e:	809a      	strh	r2, [r3, #4]
	break;
 8000ba0:	bf00      	nop
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	20000220 	.word	0x20000220
 8000bb0:	200002c4 	.word	0x200002c4
 8000bb4:	20000338 	.word	0x20000338
 8000bb8:	200002d4 	.word	0x200002d4
 8000bbc:	200002cc 	.word	0x200002cc

08000bc0 <chartotime>:
  //printf("** Success. ** \n\r");
  while(1)
  {
  }
}
uint32_t chartotime(char* buff,uint8_t off, uint8_t leng ){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	70bb      	strb	r3, [r7, #2]
	char str[8];
	for(int i=off;i<leng+off;i++){
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e00c      	b.n	8000bf0 <chartotime+0x30>
    str[i]=buff[i];
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	7819      	ldrb	r1, [r3, #0]
 8000bde:	f107 020c 	add.w	r2, r7, #12
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4413      	add	r3, r2
 8000be6:	460a      	mov	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
	for(int i=off;i<leng+off;i++){
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	78ba      	ldrb	r2, [r7, #2]
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbec      	blt.n	8000bd6 <chartotime+0x16>
	}
	return (uint32_t)atoi(str);
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00a fd80 	bl	800b706 <atoi>
 8000c06:	4603      	mov	r3, r0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <chartocurr>:
int32_t chartocurr(char* buff,uint8_t off, uint8_t leng ){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	70bb      	strb	r3, [r7, #2]
	char str[8];
	for(int i=0;i<leng;i++){
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e00f      	b.n	8000c46 <chartocurr+0x36>
    str[i]=buff[i+off];
 8000c26:	78fa      	ldrb	r2, [r7, #3]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	7819      	ldrb	r1, [r3, #0]
 8000c34:	f107 020c 	add.w	r2, r7, #12
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<leng;i++){
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	3301      	adds	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	78bb      	ldrb	r3, [r7, #2]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbeb      	blt.n	8000c26 <chartocurr+0x16>
	}
	return (int32_t)atoi(str);
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00a fd57 	bl	800b706 <atoi>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <PuntaeSepara>:
uint32_t PuntaeSepara(char* buff){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	uint8_t h;
	uint8_t e;
	for(h=0;h<64;h++){
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e011      	b.n	8000c96 <PuntaeSepara+0x32>
		if(readBuff[h]==','){
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <PuntaeSepara+0x8c>)
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	2b2c      	cmp	r3, #44	; 0x2c
 8000c7a:	d109      	bne.n	8000c90 <PuntaeSepara+0x2c>
			time=chartotime(readBuff,0,h);
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	2100      	movs	r1, #0
 8000c82:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <PuntaeSepara+0x8c>)
 8000c84:	f7ff ff9c 	bl	8000bc0 <chartotime>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <PuntaeSepara+0x90>)
 8000c8c:	601a      	str	r2, [r3, #0]
			break;
 8000c8e:	e005      	b.n	8000c9c <PuntaeSepara+0x38>
	for(h=0;h<64;h++){
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	3301      	adds	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	2b3f      	cmp	r3, #63	; 0x3f
 8000c9a:	d9ea      	bls.n	8000c72 <PuntaeSepara+0xe>
		}
	}
	for(e=h;e<64;e++){
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	73bb      	strb	r3, [r7, #14]
 8000ca0:	e01c      	b.n	8000cdc <PuntaeSepara+0x78>
		if(readBuff[e]==0xd&&readBuff[e+1]==0xa){
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <PuntaeSepara+0x8c>)
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	2b0d      	cmp	r3, #13
 8000caa:	d114      	bne.n	8000cd6 <PuntaeSepara+0x72>
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <PuntaeSepara+0x8c>)
 8000cb2:	5cd3      	ldrb	r3, [r2, r3]
 8000cb4:	2b0a      	cmp	r3, #10
 8000cb6:	d10e      	bne.n	8000cd6 <PuntaeSepara+0x72>
			curr=chartocurr(readBuff,h+1,e-h);
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b2d9      	uxtb	r1, r3
 8000cbe:	7bba      	ldrb	r2, [r7, #14]
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <PuntaeSepara+0x8c>)
 8000cca:	f7ff ffa1 	bl	8000c10 <chartocurr>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <PuntaeSepara+0x94>)
 8000cd2:	601a      	str	r2, [r3, #0]
			break;
 8000cd4:	e005      	b.n	8000ce2 <PuntaeSepara+0x7e>
	for(e=h;e<64;e++){
 8000cd6:	7bbb      	ldrb	r3, [r7, #14]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	73bb      	strb	r3, [r7, #14]
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	2b3f      	cmp	r3, #63	; 0x3f
 8000ce0:	d9df      	bls.n	8000ca2 <PuntaeSepara+0x3e>
		}
	}
	return (uint32_t)(e+2);//aggiungo i due caratteri di terminazione
 8000ce2:	7bbb      	ldrb	r3, [r7, #14]
 8000ce4:	3302      	adds	r3, #2
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200002e0 	.word	0x200002e0
 8000cf4:	200003bc 	.word	0x200003bc
 8000cf8:	20000340 	.word	0x20000340

08000cfc <leggi>:
FRESULT leggi(){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8000d02:	af00      	add	r7, sp, #0
	FIL readFile;       /* File  object for USER */
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */
	char USERPath[4];   /* USER logical drive path */
	uint8_t bytesWrote;
	uint8_t path1[] = "current.txt";
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <leggi+0x7c>)
 8000d08:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	res = f_open(&readFile, &path1, FA_READ);
 8000d0e:	1d39      	adds	r1, r7, #4
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2201      	movs	r2, #1
 8000d16:	4618      	mov	r0, r3
 8000d18:	f008 feb2 	bl	8009a80 <f_open>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	f_lseek(&readFile, indice);
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <leggi+0x80>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f009 fbc1 	bl	800a4b4 <f_lseek>
	res = f_read(&readFile,readBuff, 34, &br);
 8000d32:	f107 0014 	add.w	r0, r7, #20
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <leggi+0x84>)
 8000d38:	2222      	movs	r2, #34	; 0x22
 8000d3a:	4912      	ldr	r1, [pc, #72]	; (8000d84 <leggi+0x88>)
 8000d3c:	f009 f85e 	bl	8009dfc <f_read>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	indice =indice+ PuntaeSepara(readBuff);
 8000d46:	480f      	ldr	r0, [pc, #60]	; (8000d84 <leggi+0x88>)
 8000d48:	f7ff ff8c 	bl	8000c64 <PuntaeSepara>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <leggi+0x80>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <leggi+0x80>)
 8000d56:	6013      	str	r3, [r2, #0]
	res = f_close(&readFile);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f009 fb7f 	bl	800a460 <f_close>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	return res;
 8000d68:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247

}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	0800b8f4 	.word	0x0800b8f4
 8000d7c:	20000214 	.word	0x20000214
 8000d80:	20000334 	.word	0x20000334
 8000d84:	200002e0 	.word	0x200002e0

08000d88 <scrivi>:
FRESULT scrivi(){
 8000d88:	b5b0      	push	{r4, r5, r7, lr}
 8000d8a:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000d8e:	af04      	add	r7, sp, #16
	FIL writeFile;       /* File  object for USER */
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */
	char USERPath[4];   /* USER logical drive path */
	uint8_t bytesWrote;
	uint8_t path1[] = "STM32.TXT";
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4a37      	ldr	r2, [pc, #220]	; (8000e70 <scrivi+0xe8>)
 8000d94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d96:	c303      	stmia	r3!, {r0, r1}
 8000d98:	801a      	strh	r2, [r3, #0]
	//res1 = f_mount(&USERFatFs, (TCHAR const*)USERPath, 0);
	res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 8000d9a:	1d39      	adds	r1, r7, #4
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2208      	movs	r2, #8
 8000da2:	4618      	mov	r0, r3
 8000da4:	f008 fe6c 	bl	8009a80 <f_open>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	res = f_close(&writeFile);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4618      	mov	r0, r3
 8000db4:	f009 fb54 	bl	800a460 <f_close>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 8000dbe:	1d39      	adds	r1, r7, #4
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2212      	movs	r2, #18
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f008 fe5a 	bl	8009a80 <f_open>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	if(res==FR_OK) {
 8000dd2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d13b      	bne.n	8000e52 <scrivi+0xca>
		f_lseek(&writeFile, indox);
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <scrivi+0xec>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f009 fb65 	bl	800a4b4 <f_lseek>

		//res1 = f_write(&writeFile, readBuf, size, &bytesWrote);}
		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 8000dea:	2200      	movs	r2, #0
 8000dec:	4922      	ldr	r1, [pc, #136]	; (8000e78 <scrivi+0xf0>)
 8000dee:	4823      	ldr	r0, [pc, #140]	; (8000e7c <scrivi+0xf4>)
 8000df0:	f002 fd38 	bl	8003864 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 8000df4:	2200      	movs	r2, #0
 8000df6:	4922      	ldr	r1, [pc, #136]	; (8000e80 <scrivi+0xf8>)
 8000df8:	4820      	ldr	r0, [pc, #128]	; (8000e7c <scrivi+0xf4>)
 8000dfa:	f002 fe15 	bl	8003a28 <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <scrivi+0xf0>)
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <scrivi+0xfc>)
 8000e04:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <scrivi+0xf0>)
 8000e08:	785a      	ldrb	r2, [r3, #1]
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <scrivi+0xfc>)
 8000e0c:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <scrivi+0xf0>)
 8000e10:	789a      	ldrb	r2, [r3, #2]
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <scrivi+0xfc>)
 8000e14:	709a      	strb	r2, [r3, #2]

		indox=indox+f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,cs.MotorTemperature);}
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <scrivi+0xfc>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461c      	mov	r4, r3
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <scrivi+0xfc>)
 8000e1e:	785b      	ldrb	r3, [r3, #1]
 8000e20:	461d      	mov	r5, r3
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <scrivi+0xfc>)
 8000e24:	789b      	ldrb	r3, [r3, #2]
 8000e26:	4619      	mov	r1, r3
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <scrivi+0x100>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <scrivi+0x104>)
 8000e2e:	7852      	ldrb	r2, [r2, #1]
 8000e30:	f107 0014 	add.w	r0, r7, #20
 8000e34:	9202      	str	r2, [sp, #8]
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	9100      	str	r1, [sp, #0]
 8000e3a:	462b      	mov	r3, r5
 8000e3c:	4622      	mov	r2, r4
 8000e3e:	4914      	ldr	r1, [pc, #80]	; (8000e90 <scrivi+0x108>)
 8000e40:	f00a f9e6 	bl	800b210 <f_printf>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <scrivi+0xec>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <scrivi+0xec>)
 8000e50:	6013      	str	r3, [r2, #0]
		res = f_close(&writeFile);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4618      	mov	r0, r3
 8000e58:	f009 fb02 	bl	800a460 <f_close>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247

	return res;
 8000e62:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e70:	0800b8e8 	.word	0x0800b8e8
 8000e74:	20000218 	.word	0x20000218
 8000e78:	20000670 	.word	0x20000670
 8000e7c:	20000684 	.word	0x20000684
 8000e80:	2000034c 	.word	0x2000034c
 8000e84:	200003e8 	.word	0x200003e8
 8000e88:	20000340 	.word	0x20000340
 8000e8c:	200002cc 	.word	0x200002cc
 8000e90:	0800b900 	.word	0x0800b900

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//printf("** Error. ** \n\r");
	while(1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x4>
	...

08000e9c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <MX_RTC_Init+0xb0>)
 8000eb6:	4a26      	ldr	r2, [pc, #152]	; (8000f50 <MX_RTC_Init+0xb4>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eba:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_RTC_Init+0xb0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_RTC_Init+0xb0>)
 8000ec2:	227f      	movs	r2, #127	; 0x7f
 8000ec4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <MX_RTC_Init+0xb0>)
 8000ec8:	22ff      	movs	r2, #255	; 0xff
 8000eca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_RTC_Init+0xb0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_RTC_Init+0xb0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MX_RTC_Init+0xb0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ede:	481b      	ldr	r0, [pc, #108]	; (8000f4c <MX_RTC_Init+0xb0>)
 8000ee0:	f002 fbbc 	bl	800365c <HAL_RTC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000eea:	f7ff ffd3 	bl	8000e94 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480f      	ldr	r0, [pc, #60]	; (8000f4c <MX_RTC_Init+0xb0>)
 8000f0e:	f002 fc13 	bl	8003738 <HAL_RTC_SetTime>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8000f18:	f7ff ffbc 	bl	8000e94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f20:	2301      	movs	r3, #1
 8000f22:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <MX_RTC_Init+0xb0>)
 8000f34:	f002 fcf2 	bl	800391c <HAL_RTC_SetDate>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000f3e:	f7ff ffa9 	bl	8000e94 <Error_Handler>
  }

}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000684 	.word	0x20000684
 8000f50:	40002800 	.word	0x40002800

08000f54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_RTC_MspInit+0x30>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d107      	bne.n	8000f76 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_RTC_MspInit+0x34>)
 8000f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_RTC_MspInit+0x34>)
 8000f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40002800 	.word	0x40002800
 8000f88:	40021000 	.word	0x40021000

08000f8c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_SPI2_Init+0x74>)
 8000f92:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <MX_SPI2_Init+0x78>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <MX_SPI2_Init+0x74>)
 8000f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fa6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000faa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fbe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fc2:	2210      	movs	r2, #16
 8000fc4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fda:	2207      	movs	r2, #7
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_SPI2_Init+0x74>)
 8000fec:	f002 fe3e 	bl	8003c6c <HAL_SPI_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ff6:	f7ff ff4d 	bl	8000e94 <Error_Handler>
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200006ac 	.word	0x200006ac
 8001004:	40003800 	.word	0x40003800

08001008 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a17      	ldr	r2, [pc, #92]	; (8001084 <HAL_SPI_MspInit+0x7c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d128      	bne.n	800107c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_SPI_MspInit+0x80>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a16      	ldr	r2, [pc, #88]	; (8001088 <HAL_SPI_MspInit+0x80>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_SPI_MspInit+0x80>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_SPI_MspInit+0x80>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_SPI_MspInit+0x80>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_SPI_MspInit+0x80>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800105a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800106c:	2305      	movs	r3, #5
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_SPI_MspInit+0x84>)
 8001078:	f001 f8cc 	bl	8002214 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	; 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40003800 	.word	0x40003800
 8001088:	40021000 	.word	0x40021000
 800108c:	48000400 	.word	0x48000400

08001090 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	6093      	str	r3, [r2, #8]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40007000 	.word	0x40007000

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_MspInit+0x44>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_MspInit+0x44>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6613      	str	r3, [r2, #96]	; 0x60
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_MspInit+0x44>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x44>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x44>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6593      	str	r3, [r2, #88]	; 0x58
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x44>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80010e6:	f7ff ffd3 	bl	8001090 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 f9c2 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <FDCAN1_IT0_IRQHandler+0x10>)
 800115a:	f000 fe4d 	bl	8001df8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000260 	.word	0x20000260

08001168 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800116e:	f003 fcc1 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000075c 	.word	0x2000075c

0800117c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001182:	f003 fcb7 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000710 	.word	0x20000710

08001190 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001194:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001198:	f001 fa08 	bl	80025ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <SystemInit+0x28>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <SystemInit+0x28>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SystemInit+0x28>)
 80011b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ba:	609a      	str	r2, [r3, #8]
#endif
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_TIM16_Init+0x44>)
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <MX_TIM16_Init+0x48>)
 80011d4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 127;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_TIM16_Init+0x44>)
 80011d8:	227f      	movs	r2, #127	; 0x7f
 80011da:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_TIM16_Init+0x44>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_TIM16_Init+0x44>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_TIM16_Init+0x44>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_TIM16_Init+0x44>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_TIM16_Init+0x44>)
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_TIM16_Init+0x44>)
 80011fc:	f003 fbec 	bl	80049d8 <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001206:	f7ff fe45 	bl	8000e94 <Error_Handler>
  }

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000075c 	.word	0x2000075c
 8001214:	40014400 	.word	0x40014400

08001218 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_TIM17_Init+0x44>)
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <MX_TIM17_Init+0x48>)
 8001220:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_TIM17_Init+0x44>)
 8001224:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001228:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_TIM17_Init+0x44>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <MX_TIM17_Init+0x44>)
 8001232:	2201      	movs	r2, #1
 8001234:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_TIM17_Init+0x44>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <MX_TIM17_Init+0x44>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_TIM17_Init+0x44>)
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_TIM17_Init+0x44>)
 800124a:	f003 fbc5 	bl	80049d8 <HAL_TIM_Base_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001254:	f7ff fe1e 	bl	8000e94 <Error_Handler>
  }

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000710 	.word	0x20000710
 8001260:	40014800 	.word	0x40014800

08001264 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <HAL_TIM_Base_MspInit+0x5c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10c      	bne.n	8001290 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_TIM_Base_MspInit+0x60>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <HAL_TIM_Base_MspInit+0x60>)
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	6613      	str	r3, [r2, #96]	; 0x60
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_TIM_Base_MspInit+0x60>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800128e:	e010      	b.n	80012b2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <HAL_TIM_Base_MspInit+0x64>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d10b      	bne.n	80012b2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_TIM_Base_MspInit+0x60>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <HAL_TIM_Base_MspInit+0x60>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6613      	str	r3, [r2, #96]	; 0x60
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <HAL_TIM_Base_MspInit+0x60>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40014400 	.word	0x40014400
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40014800 	.word	0x40014800

080012cc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 80012d2:	4a20      	ldr	r2, [pc, #128]	; (8001354 <MX_LPUART1_UART_Init+0x88>)
 80012d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012d6:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 800130a:	f003 fe89 	bl	8005020 <HAL_UART_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001314:	f7ff fdbe 	bl	8000e94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 800131c:	f005 fa2b 	bl	8006776 <HAL_UARTEx_SetTxFifoThreshold>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 8001326:	f7ff fdb5 	bl	8000e94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4808      	ldr	r0, [pc, #32]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 800132e:	f005 fa60 	bl	80067f2 <HAL_UARTEx_SetRxFifoThreshold>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8001338:	f7ff fdac 	bl	8000e94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_LPUART1_UART_Init+0x84>)
 800133e:	f005 f9e1 	bl	8006704 <HAL_UARTEx_DisableFifoMode>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8001348:	f7ff fda4 	bl	8000e94 <Error_Handler>
  }

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200007a8 	.word	0x200007a8
 8001354:	40008000 	.word	0x40008000

08001358 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <HAL_UART_MspInit+0x7c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d128      	bne.n	80013cc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_UART_MspInit+0x80>)
 800137c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_UART_MspInit+0x80>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0x80>)
 8001388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_UART_MspInit+0x80>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_UART_MspInit+0x80>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_UART_MspInit+0x80>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80013aa:	230c      	movs	r3, #12
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80013ba:	230c      	movs	r3, #12
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f000 ff24 	bl	8002214 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40008000 	.word	0x40008000
 80013d8:	40021000 	.word	0x40021000

080013dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <LoopForever+0x6>)
  ldr r1, =_edata
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <LoopForever+0xe>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f8:	4c0b      	ldr	r4, [pc, #44]	; (8001428 <LoopForever+0x16>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001406:	f7ff fecb 	bl	80011a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140a:	f00a f981 	bl	800b710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800140e:	f7ff f975 	bl	80006fc <main>

08001412 <LoopForever>:

LoopForever:
    b LoopForever
 8001412:	e7fe      	b.n	8001412 <LoopForever>
  ldr   r0, =_estack
 8001414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001420:	0800bb48 	.word	0x0800bb48
  ldr r2, =_sbss
 8001424:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001428:	20000cd0 	.word	0x20000cd0

0800142c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_2_IRQHandler>

0800142e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f95b 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800143e:	2000      	movs	r0, #0
 8001440:	f000 f80e 	bl	8001460 <HAL_InitTick>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	e001      	b.n	8001454 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001450:	f7ff fe2e 	bl	80010b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001454:	79fb      	ldrb	r3, [r7, #7]

}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_InitTick+0x68>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d022      	beq.n	80014ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_InitTick+0x6c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_InitTick+0x68>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001480:	fbb1 f3f3 	udiv	r3, r1, r3
 8001484:	fbb2 f3f3 	udiv	r3, r2, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f966 	bl	800175a <HAL_SYSTICK_Config>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10f      	bne.n	80014b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	d809      	bhi.n	80014ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149a:	2200      	movs	r2, #0
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	f04f 30ff 	mov.w	r0, #4294967295
 80014a2:	f000 f932 	bl	800170a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_InitTick+0x70>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	e007      	b.n	80014be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e004      	b.n	80014be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e001      	b.n	80014be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000004 	.word	0x20000004

080014d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_IncTick+0x1c>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_IncTick+0x20>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a03      	ldr	r2, [pc, #12]	; (80014f0 <HAL_IncTick+0x1c>)
 80014e4:	6013      	str	r3, [r2, #0]
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	20000834 	.word	0x20000834
 80014f4:	20000008 	.word	0x20000008

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000834 	.word	0x20000834

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d004      	beq.n	8001534 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_Delay+0x40>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001534:	bf00      	nop
 8001536:	f7ff ffdf 	bl	80014f8 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	429a      	cmp	r2, r3
 8001544:	d8f7      	bhi.n	8001536 <HAL_Delay+0x26>
  {
  }
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000008 	.word	0x20000008

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff8e 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff29 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001718:	f7ff ff40 	bl	800159c <__NVIC_GetPriorityGrouping>
 800171c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6978      	ldr	r0, [r7, #20]
 8001724:	f7ff ff90 	bl	8001648 <NVIC_EncodePriority>
 8001728:	4602      	mov	r2, r0
 800172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff5f 	bl	80015f4 <__NVIC_SetPriority>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff33 	bl	80015b8 <__NVIC_EnableIRQ>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffa4 	bl	80016b0 <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e147      	b.n	8001a16 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7fe ff02 	bl	80005a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699a      	ldr	r2, [r3, #24]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0210 	bic.w	r2, r2, #16
 80017ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b0:	f7ff fea2 	bl	80014f8 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017b6:	e012      	b.n	80017de <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017b8:	f7ff fe9e 	bl	80014f8 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b0a      	cmp	r3, #10
 80017c4:	d90b      	bls.n	80017de <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e11b      	b.n	8001a16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d0e5      	beq.n	80017b8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017fc:	f7ff fe7c 	bl	80014f8 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001802:	e012      	b.n	800182a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001804:	f7ff fe78 	bl	80014f8 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b0a      	cmp	r3, #10
 8001810:	d90b      	bls.n	800182a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	f043 0201 	orr.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2203      	movs	r2, #3
 8001822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0f5      	b.n	8001a16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0e5      	beq.n	8001804 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0202 	orr.w	r2, r2, #2
 8001846:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a74      	ldr	r2, [pc, #464]	; (8001a20 <HAL_FDCAN_Init+0x2ac>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d103      	bne.n	800185a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001852:	4a74      	ldr	r2, [pc, #464]	; (8001a24 <HAL_FDCAN_Init+0x2b0>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7c1b      	ldrb	r3, [r3, #16]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d108      	bne.n	8001874 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699a      	ldr	r2, [r3, #24]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001870:	619a      	str	r2, [r3, #24]
 8001872:	e007      	b.n	8001884 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001882:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7c5b      	ldrb	r3, [r3, #17]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800189a:	619a      	str	r2, [r3, #24]
 800189c:	e007      	b.n	80018ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699a      	ldr	r2, [r3, #24]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7c9b      	ldrb	r3, [r3, #18]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d108      	bne.n	80018c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018c4:	619a      	str	r2, [r3, #24]
 80018c6:	e007      	b.n	80018d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80018d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80018fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0210 	bic.w	r2, r2, #16
 800190c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0204 	orr.w	r2, r2, #4
 8001924:	619a      	str	r2, [r3, #24]
 8001926:	e02c      	b.n	8001982 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d028      	beq.n	8001982 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d01c      	beq.n	8001972 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001946:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0210 	orr.w	r2, r2, #16
 8001956:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d110      	bne.n	8001982 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0220 	orr.w	r2, r2, #32
 800196e:	619a      	str	r2, [r3, #24]
 8001970:	e007      	b.n	8001982 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0220 	orr.w	r2, r2, #32
 8001980:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	3b01      	subs	r3, #1
 8001988:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	3b01      	subs	r3, #1
 8001990:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001992:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800199a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019aa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019ac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019b6:	d115      	bne.n	80019e4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	3b01      	subs	r3, #1
 80019c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	3b01      	subs	r3, #1
 80019ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019d0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	3b01      	subs	r3, #1
 80019da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fb9e 	bl	800213c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40006400 	.word	0x40006400
 8001a24:	40006500 	.word	0x40006500

08001a28 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d110      	bne.n	8001a5e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699a      	ldr	r2, [r3, #24]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e006      	b.n	8001a6c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	f043 0204 	orr.w	r2, r3, #4
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
  }
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b08b      	sub	sp, #44	; 0x2c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a8c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001a8e:	7efb      	ldrb	r3, [r7, #27]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	f040 80bc 	bne.w	8001c0e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b40      	cmp	r3, #64	; 0x40
 8001a9a:	d121      	bne.n	8001ae0 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d107      	bne.n	8001abc <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0af      	b.n	8001c1c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	e020      	b.n	8001b22 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e08d      	b.n	8001c1c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d107      	bne.n	8001b46 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e005      	b.n	8001b52 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	0e1b      	lsrs	r3, r3, #24
 8001ba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0fda      	lsrs	r2, r3, #31
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3304      	adds	r3, #4
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	e00a      	b.n	8001bdc <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	441a      	add	r2, r3
 8001bcc:	6839      	ldr	r1, [r7, #0]
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	440b      	add	r3, r1
 8001bd2:	7812      	ldrb	r2, [r2, #0]
 8001bd4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	461a      	mov	r2, r3
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d3eb      	bcc.n	8001bc6 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b40      	cmp	r3, #64	; 0x40
 8001bf2:	d105      	bne.n	8001c00 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001bfe:	e004      	b.n	8001c0a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e006      	b.n	8001c1c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c12:	f043 0208 	orr.w	r2, r3, #8
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
  }
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	372c      	adds	r7, #44	; 0x2c
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	0800b97c 	.word	0x0800b97c

08001c2c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c3e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d003      	beq.n	8001c4e <HAL_FDCAN_ActivateNotification+0x22>
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	f040 80c8 	bne.w	8001dde <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_FDCAN_ActivateNotification+0x3e>
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d03b      	beq.n	8001ce2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d031      	beq.n	8001ce2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d004      	beq.n	8001c92 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d027      	beq.n	8001ce2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d01d      	beq.n	8001ce2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d013      	beq.n	8001ce2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00c      	beq.n	8001cf2 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d107      	bne.n	8001cf2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <HAL_FDCAN_ActivateNotification+0xda>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d13b      	bne.n	8001d7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d131      	bne.n	8001d7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d127      	bne.n	8001d7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d004      	beq.n	8001d42 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d11d      	bne.n	8001d7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d113      	bne.n	8001d7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00c      	beq.n	8001d8e <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0202 	orr.w	r2, r2, #2
 8001d8c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d009      	beq.n	8001dac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e006      	b.n	8001dec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	f043 0202 	orr.w	r2, r3, #2
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
  }
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e06:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e14:	4013      	ands	r3, r2
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2a:	6a3a      	ldr	r2, [r7, #32]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e3a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e4e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001e52:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e6a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4013      	ands	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00d      	beq.n	8001ea2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2240      	movs	r2, #64	; 0x40
 8001e9a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f92e 	bl	80020fe <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d014      	beq.n	8001ee8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ec6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ede:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001ee0:	6939      	ldr	r1, [r7, #16]
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8ec 	bl	80020c0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f8b6 	bl	800206a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6a3a      	ldr	r2, [r7, #32]
 8001f0a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f0c:	6a39      	ldr	r1, [r7, #32]
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fd86 	bl	8000a20 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d007      	beq.n	8001f2a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f22:	69f9      	ldr	r1, [r7, #28]
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8ab 	bl	8002080 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00e      	beq.n	8001f56 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8a0 	bl	8002096 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01a      	beq.n	8001f9a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d013      	beq.n	8001f9a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f7a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001f92:	68f9      	ldr	r1, [r7, #12]
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f888 	bl	80020aa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00e      	beq.n	8001fc6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fbe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f888 	bl	80020d6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00e      	beq.n	8001ff2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f87c 	bl	80020ea <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d011      	beq.n	8002024 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002016:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002032:	6979      	ldr	r1, [r7, #20]
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f876 	bl	8002126 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f858 	bl	8002112 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	; 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002144:	4b30      	ldr	r3, [pc, #192]	; (8002208 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002146:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2f      	ldr	r2, [pc, #188]	; (800220c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d103      	bne.n	800215a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002158:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a2c      	ldr	r2, [pc, #176]	; (8002210 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d103      	bne.n	800216c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800216a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800217a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	041a      	lsls	r2, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021a0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	061a      	lsls	r2, r3, #24
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e005      	b.n	80021ee <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3304      	adds	r3, #4
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d3f3      	bcc.n	80021e2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	4000a400 	.word	0x4000a400
 800220c:	40006800 	.word	0x40006800
 8002210:	40006c00 	.word	0x40006c00

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002222:	e15a      	b.n	80024da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 814c 	beq.w	80024d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d00b      	beq.n	800225c <HAL_GPIO_Init+0x48>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d007      	beq.n	800225c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002250:	2b11      	cmp	r3, #17
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b12      	cmp	r3, #18
 800225a:	d130      	bne.n	80022be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002292:	2201      	movs	r2, #1
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	f003 0201 	and.w	r2, r3, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0xea>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b12      	cmp	r3, #18
 80022fc:	d123      	bne.n	8002346 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	6939      	ldr	r1, [r7, #16]
 8002342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0203 	and.w	r2, r3, #3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80a6 	beq.w	80024d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002388:	4b5b      	ldr	r3, [pc, #364]	; (80024f8 <HAL_GPIO_Init+0x2e4>)
 800238a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238c:	4a5a      	ldr	r2, [pc, #360]	; (80024f8 <HAL_GPIO_Init+0x2e4>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6613      	str	r3, [r2, #96]	; 0x60
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_GPIO_Init+0x2e4>)
 8002396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a0:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_GPIO_Init+0x2e8>)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023ca:	d01f      	beq.n	800240c <HAL_GPIO_Init+0x1f8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <HAL_GPIO_Init+0x2ec>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d019      	beq.n	8002408 <HAL_GPIO_Init+0x1f4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a4b      	ldr	r2, [pc, #300]	; (8002504 <HAL_GPIO_Init+0x2f0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d013      	beq.n	8002404 <HAL_GPIO_Init+0x1f0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a4a      	ldr	r2, [pc, #296]	; (8002508 <HAL_GPIO_Init+0x2f4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00d      	beq.n	8002400 <HAL_GPIO_Init+0x1ec>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a49      	ldr	r2, [pc, #292]	; (800250c <HAL_GPIO_Init+0x2f8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d007      	beq.n	80023fc <HAL_GPIO_Init+0x1e8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a48      	ldr	r2, [pc, #288]	; (8002510 <HAL_GPIO_Init+0x2fc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_GPIO_Init+0x1e4>
 80023f4:	2305      	movs	r3, #5
 80023f6:	e00a      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 80023f8:	2306      	movs	r3, #6
 80023fa:	e008      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 80023fc:	2304      	movs	r3, #4
 80023fe:	e006      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 8002400:	2303      	movs	r3, #3
 8002402:	e004      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 8002404:	2302      	movs	r3, #2
 8002406:	e002      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 800240c:	2300      	movs	r3, #0
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	f002 0203 	and.w	r2, r2, #3
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	4093      	lsls	r3, r2
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241e:	4937      	ldr	r1, [pc, #220]	; (80024fc <HAL_GPIO_Init+0x2e8>)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800242c:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_GPIO_Init+0x300>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002450:	4a30      	ldr	r2, [pc, #192]	; (8002514 <HAL_GPIO_Init+0x300>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002456:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <HAL_GPIO_Init+0x300>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800247a:	4a26      	ldr	r2, [pc, #152]	; (8002514 <HAL_GPIO_Init+0x300>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_GPIO_Init+0x300>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <HAL_GPIO_Init+0x300>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_GPIO_Init+0x300>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024ce:	4a11      	ldr	r2, [pc, #68]	; (8002514 <HAL_GPIO_Init+0x300>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f ae9d 	bne.w	8002224 <HAL_GPIO_Init+0x10>
  }
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000
 8002500:	48000400 	.word	0x48000400
 8002504:	48000800 	.word	0x48000800
 8002508:	48000c00 	.word	0x48000c00
 800250c:	48001000 	.word	0x48001000
 8002510:	48001400 	.word	0x48001400
 8002514:	40010400 	.word	0x40010400

08002518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e001      	b.n	800253a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002564:	e002      	b.n	800256c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002590:	887a      	ldrh	r2, [r7, #2]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002596:	e002      	b.n	800259e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002598:	887a      	ldrh	r2, [r7, #2]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025c2:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f806 	bl	80025dc <HAL_GPIO_EXTI_Callback>
  }
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40010400 	.word	0x40010400

080025dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40007000 	.word	0x40007000

08002614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d141      	bne.n	80026a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002622:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262e:	d131      	bne.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002630:	4b47      	ldr	r3, [pc, #284]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002636:	4a46      	ldr	r2, [pc, #280]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800263c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002640:	4b43      	ldr	r3, [pc, #268]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002648:	4a41      	ldr	r2, [pc, #260]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800264e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2232      	movs	r2, #50	; 0x32
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	4a3f      	ldr	r2, [pc, #252]	; (8002758 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	0c9b      	lsrs	r3, r3, #18
 8002662:	3301      	adds	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002666:	e002      	b.n	800266e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3b01      	subs	r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800266e:	4b38      	ldr	r3, [pc, #224]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267a:	d102      	bne.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f2      	bne.n	8002668 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002682:	4b33      	ldr	r3, [pc, #204]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268e:	d158      	bne.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e057      	b.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002694:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800269a:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026a4:	e04d      	b.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ac:	d141      	bne.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ae:	4b28      	ldr	r3, [pc, #160]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	d131      	bne.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026bc:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c2:	4a23      	ldr	r2, [pc, #140]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026cc:	4b20      	ldr	r3, [pc, #128]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026d4:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2232      	movs	r2, #50	; 0x32
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	0c9b      	lsrs	r3, r3, #18
 80026ee:	3301      	adds	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f2:	e002      	b.n	80026fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002706:	d102      	bne.n	800270e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f2      	bne.n	80026f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271a:	d112      	bne.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e011      	b.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002730:	e007      	b.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002740:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40007000 	.word	0x40007000
 8002754:	20000000 	.word	0x20000000
 8002758:	431bde83 	.word	0x431bde83

0800275c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e308      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d075      	beq.n	8002866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277a:	4ba3      	ldr	r3, [pc, #652]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002784:	4ba0      	ldr	r3, [pc, #640]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2b0c      	cmp	r3, #12
 8002792:	d102      	bne.n	800279a <HAL_RCC_OscConfig+0x3e>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d002      	beq.n	80027a0 <HAL_RCC_OscConfig+0x44>
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d10b      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	4b99      	ldr	r3, [pc, #612]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d05b      	beq.n	8002864 <HAL_RCC_OscConfig+0x108>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d157      	bne.n	8002864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e2e3      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c0:	d106      	bne.n	80027d0 <HAL_RCC_OscConfig+0x74>
 80027c2:	4b91      	ldr	r3, [pc, #580]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a90      	ldr	r2, [pc, #576]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e01d      	b.n	800280c <HAL_RCC_OscConfig+0xb0>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x98>
 80027da:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a8a      	ldr	r2, [pc, #552]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b88      	ldr	r3, [pc, #544]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a87      	ldr	r2, [pc, #540]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0xb0>
 80027f4:	4b84      	ldr	r3, [pc, #528]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a83      	ldr	r2, [pc, #524]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b81      	ldr	r3, [pc, #516]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a80      	ldr	r2, [pc, #512]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fe70 	bl	80014f8 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fe6c 	bl	80014f8 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e2a8      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282e:	4b76      	ldr	r3, [pc, #472]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0xc0>
 800283a:	e014      	b.n	8002866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fe5c 	bl	80014f8 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe fe58 	bl	80014f8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e294      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002856:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0xe8>
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d075      	beq.n	800295e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002872:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800287c:	4b62      	ldr	r3, [pc, #392]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d102      	bne.n	8002892 <HAL_RCC_OscConfig+0x136>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d002      	beq.n	8002898 <HAL_RCC_OscConfig+0x13c>
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d11f      	bne.n	80028d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002898:	4b5b      	ldr	r3, [pc, #364]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_OscConfig+0x154>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e267      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b55      	ldr	r3, [pc, #340]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	4952      	ldr	r1, [pc, #328]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028c4:	4b51      	ldr	r3, [pc, #324]	; (8002a0c <HAL_RCC_OscConfig+0x2b0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fdc9 	bl	8001460 <HAL_InitTick>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d043      	beq.n	800295c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e253      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d023      	beq.n	8002928 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e0:	4b49      	ldr	r3, [pc, #292]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a48      	ldr	r2, [pc, #288]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fe04 	bl	80014f8 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f4:	f7fe fe00 	bl	80014f8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e23c      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002906:	4b40      	ldr	r3, [pc, #256]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	4939      	ldr	r1, [pc, #228]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
 8002926:	e01a      	b.n	800295e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002928:	4b37      	ldr	r3, [pc, #220]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a36      	ldr	r2, [pc, #216]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 800292e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fde0 	bl	80014f8 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293c:	f7fe fddc 	bl	80014f8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e218      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800294e:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x1e0>
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800295c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d03c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01c      	beq.n	80029ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002972:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002978:	4a23      	ldr	r2, [pc, #140]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe fdb9 	bl	80014f8 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298a:	f7fe fdb5 	bl	80014f8 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1f1      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ef      	beq.n	800298a <HAL_RCC_OscConfig+0x22e>
 80029aa:	e01b      	b.n	80029e4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b2:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe fd9c 	bl	80014f8 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c4:	f7fe fd98 	bl	80014f8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1d4      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ef      	bne.n	80029c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80ab 	beq.w	8002b48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2b4>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e005      	b.n	8002a12 <HAL_RCC_OscConfig+0x2b6>
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	20000004 	.word	0x20000004
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4baf      	ldr	r3, [pc, #700]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	4aae      	ldr	r2, [pc, #696]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6593      	str	r3, [r2, #88]	; 0x58
 8002a22:	4bac      	ldr	r3, [pc, #688]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a32:	4ba9      	ldr	r3, [pc, #676]	; (8002cd8 <HAL_RCC_OscConfig+0x57c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d118      	bne.n	8002a70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a3e:	4ba6      	ldr	r3, [pc, #664]	; (8002cd8 <HAL_RCC_OscConfig+0x57c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4aa5      	ldr	r2, [pc, #660]	; (8002cd8 <HAL_RCC_OscConfig+0x57c>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fd55 	bl	80014f8 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7fe fd51 	bl	80014f8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e18d      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a64:	4b9c      	ldr	r3, [pc, #624]	; (8002cd8 <HAL_RCC_OscConfig+0x57c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d108      	bne.n	8002a8a <HAL_RCC_OscConfig+0x32e>
 8002a78:	4b96      	ldr	r3, [pc, #600]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	4a95      	ldr	r2, [pc, #596]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a88:	e024      	b.n	8002ad4 <HAL_RCC_OscConfig+0x378>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d110      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x358>
 8002a92:	4b90      	ldr	r3, [pc, #576]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	4a8e      	ldr	r2, [pc, #568]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aa2:	4b8c      	ldr	r3, [pc, #560]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	4a8a      	ldr	r2, [pc, #552]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab2:	e00f      	b.n	8002ad4 <HAL_RCC_OscConfig+0x378>
 8002ab4:	4b87      	ldr	r3, [pc, #540]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	4a86      	ldr	r2, [pc, #536]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac4:	4b83      	ldr	r3, [pc, #524]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	4a82      	ldr	r2, [pc, #520]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d016      	beq.n	8002b0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7fe fd0c 	bl	80014f8 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fd08 	bl	80014f8 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e142      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ed      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x388>
 8002b08:	e015      	b.n	8002b36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fcf5 	bl	80014f8 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fe fcf1 	bl	80014f8 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e12b      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b28:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ed      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b36:	7ffb      	ldrb	r3, [r7, #31]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	4a64      	ldr	r2, [pc, #400]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d03c      	beq.n	8002bce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01c      	beq.n	8002b96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b5c:	4b5d      	ldr	r3, [pc, #372]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b62:	4a5c      	ldr	r2, [pc, #368]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fcc4 	bl	80014f8 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b74:	f7fe fcc0 	bl	80014f8 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0fc      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b86:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ef      	beq.n	8002b74 <HAL_RCC_OscConfig+0x418>
 8002b94:	e01b      	b.n	8002bce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b96:	4b4f      	ldr	r3, [pc, #316]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b9c:	4a4d      	ldr	r2, [pc, #308]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fca7 	bl	80014f8 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bae:	f7fe fca3 	bl	80014f8 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0df      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bc0:	4b44      	ldr	r3, [pc, #272]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ef      	bne.n	8002bae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80d3 	beq.w	8002d7e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bd8:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	f000 808d 	beq.w	8002d00 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d15a      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a38      	ldr	r2, [pc, #224]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fc7d 	bl	80014f8 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe fc79 	bl	80014f8 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0b5      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c14:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c20:	4b2c      	ldr	r3, [pc, #176]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_RCC_OscConfig+0x580>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6a11      	ldr	r1, [r2, #32]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c30:	3a01      	subs	r2, #1
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c3a:	0212      	lsls	r2, r2, #8
 8002c3c:	4311      	orrs	r1, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c42:	0852      	lsrs	r2, r2, #1
 8002c44:	3a01      	subs	r2, #1
 8002c46:	0552      	lsls	r2, r2, #21
 8002c48:	4311      	orrs	r1, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c4e:	0852      	lsrs	r2, r2, #1
 8002c50:	3a01      	subs	r2, #1
 8002c52:	0652      	lsls	r2, r2, #25
 8002c54:	4311      	orrs	r1, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c5a:	06d2      	lsls	r2, r2, #27
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	491d      	ldr	r1, [pc, #116]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1a      	ldr	r2, [pc, #104]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c70:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fc3c 	bl	80014f8 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe fc38 	bl	80014f8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e074      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x528>
 8002ca2:	e06c      	b.n	8002d7e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <HAL_RCC_OscConfig+0x578>)
 8002cc2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fc14 	bl	80014f8 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd2:	e00e      	b.n	8002cf2 <HAL_RCC_OscConfig+0x596>
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe fc0a 	bl	80014f8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e046      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf2:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_RCC_OscConfig+0x62c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x584>
 8002cfe:	e03e      	b.n	8002d7e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e039      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <HAL_RCC_OscConfig+0x62c>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 0203 	and.w	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d12c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d123      	bne.n	8002d7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d11b      	bne.n	8002d7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d113      	bne.n	8002d7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d109      	bne.n	8002d7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	085b      	lsrs	r3, r3, #1
 8002d72:	3b01      	subs	r3, #1
 8002d74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000

08002d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e11e      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da4:	4b91      	ldr	r3, [pc, #580]	; (8002fec <HAL_RCC_ClockConfig+0x260>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d910      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b8e      	ldr	r3, [pc, #568]	; (8002fec <HAL_RCC_ClockConfig+0x260>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 020f 	bic.w	r2, r3, #15
 8002dba:	498c      	ldr	r1, [pc, #560]	; (8002fec <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b8a      	ldr	r3, [pc, #552]	; (8002fec <HAL_RCC_ClockConfig+0x260>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e106      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d073      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d129      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de8:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0f4      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002df8:	f000 f99e 	bl	8003138 <RCC_GetSysClockFreqFromPLLSource>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4a7c      	ldr	r2, [pc, #496]	; (8002ff4 <HAL_RCC_ClockConfig+0x268>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d93f      	bls.n	8002e86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e06:	4b7a      	ldr	r3, [pc, #488]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d033      	beq.n	8002e86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d12f      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e26:	4b72      	ldr	r3, [pc, #456]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2e:	4a70      	ldr	r2, [pc, #448]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e024      	b.n	8002e86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e44:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0c6      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e54:	4b66      	ldr	r3, [pc, #408]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0be      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e64:	f000 f8ce 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4a61      	ldr	r2, [pc, #388]	; (8002ff4 <HAL_RCC_ClockConfig+0x268>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d909      	bls.n	8002e86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e72:	4b5f      	ldr	r3, [pc, #380]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e7a:	4a5d      	ldr	r2, [pc, #372]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	4b5a      	ldr	r3, [pc, #360]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4957      	ldr	r1, [pc, #348]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fe fb2e 	bl	80014f8 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fe fb2a 	bl	80014f8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e095      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	4b4e      	ldr	r3, [pc, #312]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1eb      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d023      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee0:	4b43      	ldr	r3, [pc, #268]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4a42      	ldr	r2, [pc, #264]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002ee6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ef8:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f00:	4a3b      	ldr	r2, [pc, #236]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002f02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f08:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4936      	ldr	r1, [pc, #216]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b80      	cmp	r3, #128	; 0x80
 8002f20:	d105      	bne.n	8002f2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f22:	4b33      	ldr	r3, [pc, #204]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	4a32      	ldr	r2, [pc, #200]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002f28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_RCC_ClockConfig+0x260>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d21d      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCC_ClockConfig+0x260>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 020f 	bic.w	r2, r3, #15
 8002f44:	4929      	ldr	r1, [pc, #164]	; (8002fec <HAL_RCC_ClockConfig+0x260>)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f4c:	f7fe fad4 	bl	80014f8 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7fe fad0 	bl	80014f8 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e03b      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1ed      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4917      	ldr	r1, [pc, #92]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa2:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	490f      	ldr	r1, [pc, #60]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fb6:	f000 f825 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fba:	4601      	mov	r1, r0
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_RCC_ClockConfig+0x264>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <HAL_RCC_ClockConfig+0x26c>)
 8002fc8:	5cd3      	ldrb	r3, [r2, r3]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	fa21 f303 	lsr.w	r3, r1, r3
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <HAL_RCC_ClockConfig+0x270>)
 8002fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <HAL_RCC_ClockConfig+0x274>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fa40 	bl	8001460 <HAL_InitTick>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	04c4b400 	.word	0x04c4b400
 8002ff8:	0800b964 	.word	0x0800b964
 8002ffc:	20000000 	.word	0x20000000
 8003000:	20000004 	.word	0x20000004

08003004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800300a:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b04      	cmp	r3, #4
 8003014:	d102      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003016:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	e047      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b08      	cmp	r3, #8
 8003026:	d102      	bne.n	800302e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003028:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	e03e      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800302e:	4b23      	ldr	r3, [pc, #140]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d136      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	3301      	adds	r3, #1
 8003050:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d10c      	bne.n	8003072 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003058:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	4a16      	ldr	r2, [pc, #88]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003062:	68d2      	ldr	r2, [r2, #12]
 8003064:	0a12      	lsrs	r2, r2, #8
 8003066:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	617b      	str	r3, [r7, #20]
      break;
 8003070:	e00c      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003072:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	4a10      	ldr	r2, [pc, #64]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800307c:	68d2      	ldr	r2, [r2, #12]
 800307e:	0a12      	lsrs	r2, r2, #8
 8003080:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003084:	fb02 f303 	mul.w	r3, r2, r3
 8003088:	617b      	str	r3, [r7, #20]
      break;
 800308a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	0e5b      	lsrs	r3, r3, #25
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	3301      	adds	r3, #1
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	e001      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030ac:	693b      	ldr	r3, [r7, #16]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	016e3600 	.word	0x016e3600

080030c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000000 	.word	0x20000000

080030e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030e4:	f7ff fff0 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e8:	4601      	mov	r1, r0
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	0800b974 	.word	0x0800b974

0800310c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003110:	f7ff ffda 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8003114:	4601      	mov	r1, r0
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0adb      	lsrs	r3, r3, #11
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4a04      	ldr	r2, [pc, #16]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003122:	5cd3      	ldrb	r3, [r2, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa21 f303 	lsr.w	r3, r1, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	0800b974 	.word	0x0800b974

08003138 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800313e:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3301      	adds	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d10c      	bne.n	8003176 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800315c:	4a17      	ldr	r2, [pc, #92]	; (80031bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003166:	68d2      	ldr	r2, [r2, #12]
 8003168:	0a12      	lsrs	r2, r2, #8
 800316a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	617b      	str	r3, [r7, #20]
    break;
 8003174:	e00c      	b.n	8003190 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	0a12      	lsrs	r2, r2, #8
 8003184:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
    break;
 800318e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0e5b      	lsrs	r3, r3, #25
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	3301      	adds	r3, #1
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031aa:	687b      	ldr	r3, [r7, #4]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40021000 	.word	0x40021000
 80031bc:	016e3600 	.word	0x016e3600
 80031c0:	00f42400 	.word	0x00f42400

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031cc:	2300      	movs	r3, #0
 80031ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d0:	2300      	movs	r3, #0
 80031d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8098 	beq.w	8003312 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e6:	4b43      	ldr	r3, [pc, #268]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10d      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	4b40      	ldr	r3, [pc, #256]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	4a3f      	ldr	r2, [pc, #252]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6593      	str	r3, [r2, #88]	; 0x58
 80031fe:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320a:	2301      	movs	r3, #1
 800320c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800320e:	4b3a      	ldr	r3, [pc, #232]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a39      	ldr	r2, [pc, #228]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003218:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800321a:	f7fe f96d 	bl	80014f8 <HAL_GetTick>
 800321e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003220:	e009      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003222:	f7fe f969 	bl	80014f8 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d902      	bls.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	74fb      	strb	r3, [r7, #19]
        break;
 8003234:	e005      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003236:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0ef      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d159      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003248:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003252:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01e      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	429a      	cmp	r2, r3
 8003262:	d019      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003270:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003280:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe f929 	bl	80014f8 <HAL_GetTick>
 80032a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a8:	e00b      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fe f925 	bl	80014f8 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d902      	bls.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	74fb      	strb	r3, [r7, #19]
            break;
 80032c0:	e006      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ec      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032d6:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e4:	4903      	ldr	r1, [pc, #12]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032ec:	e008      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	74bb      	strb	r3, [r7, #18]
 80032f2:	e005      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003300:	7c7b      	ldrb	r3, [r7, #17]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d105      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003306:	4baf      	ldr	r3, [pc, #700]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	4aae      	ldr	r2, [pc, #696]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800330c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003310:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800331e:	4ba9      	ldr	r3, [pc, #676]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f023 0203 	bic.w	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	49a5      	ldr	r1, [pc, #660]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003340:	4ba0      	ldr	r3, [pc, #640]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f023 020c 	bic.w	r2, r3, #12
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	499d      	ldr	r1, [pc, #628]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003362:	4b98      	ldr	r3, [pc, #608]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4994      	ldr	r1, [pc, #592]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003384:	4b8f      	ldr	r3, [pc, #572]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	498c      	ldr	r1, [pc, #560]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033a6:	4b87      	ldr	r3, [pc, #540]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	4983      	ldr	r1, [pc, #524]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033c8:	4b7e      	ldr	r3, [pc, #504]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	497b      	ldr	r1, [pc, #492]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	4972      	ldr	r1, [pc, #456]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800340c:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	496a      	ldr	r1, [pc, #424]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800342e:	4b65      	ldr	r3, [pc, #404]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	4961      	ldr	r1, [pc, #388]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003450:	4b5c      	ldr	r3, [pc, #368]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003456:	f023 0203 	bic.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	4959      	ldr	r1, [pc, #356]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003472:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003478:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	4950      	ldr	r1, [pc, #320]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d015      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003494:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4948      	ldr	r1, [pc, #288]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b2:	d105      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b4:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a42      	ldr	r2, [pc, #264]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d015      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034cc:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034da:	493a      	ldr	r1, [pc, #232]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ea:	d105      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ec:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a34      	ldr	r2, [pc, #208]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d015      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003504:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	492c      	ldr	r1, [pc, #176]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003522:	d105      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003524:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800352a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800352e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800353c:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354a:	491e      	ldr	r1, [pc, #120]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800355a:	d105      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003566:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d015      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4910      	ldr	r1, [pc, #64]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003592:	d105      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800359a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800359e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d018      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	4902      	ldr	r1, [pc, #8]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035c2:	e001      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80035c4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d0:	d105      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035d2:	4b21      	ldr	r3, [pc, #132]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	4a20      	ldr	r2, [pc, #128]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035dc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d015      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80035ea:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	4917      	ldr	r1, [pc, #92]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003608:	d105      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d015      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003624:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003628:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	4909      	ldr	r1, [pc, #36]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003640:	d105      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4a04      	ldr	r2, [pc, #16]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800364c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800364e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021000 	.word	0x40021000

0800365c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d05c      	beq.n	8003728 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd fc66 	bl	8000f54 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HAL_RTC_Init+0xd8>)
 8003692:	22ca      	movs	r2, #202	; 0xca
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_RTC_Init+0xd8>)
 8003698:	2253      	movs	r2, #83	; 0x53
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fa37 	bl	8003b10 <RTC_EnterInitMode>
 80036a2:	4603      	mov	r3, r0
 80036a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d133      	bne.n	8003714 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80036ac:	4b21      	ldr	r3, [pc, #132]	; (8003734 <HAL_RTC_Init+0xd8>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	4a20      	ldr	r2, [pc, #128]	; (8003734 <HAL_RTC_Init+0xd8>)
 80036b2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80036b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ba:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80036bc:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <HAL_RTC_Init+0xd8>)
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6859      	ldr	r1, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	4319      	orrs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	430b      	orrs	r3, r1
 80036d0:	4918      	ldr	r1, [pc, #96]	; (8003734 <HAL_RTC_Init+0xd8>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	041b      	lsls	r3, r3, #16
 80036e0:	4914      	ldr	r1, [pc, #80]	; (8003734 <HAL_RTC_Init+0xd8>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa46 	bl	8003b78 <RTC_ExitInitMode>
 80036ec:	4603      	mov	r3, r0
 80036ee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10e      	bne.n	8003714 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_RTC_Init+0xd8>)
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a19      	ldr	r1, [r3, #32]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4319      	orrs	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	430b      	orrs	r3, r1
 800370e:	4909      	ldr	r1, [pc, #36]	; (8003734 <HAL_RTC_Init+0xd8>)
 8003710:	4313      	orrs	r3, r2
 8003712:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <HAL_RTC_Init+0xd8>)
 8003716:	22ff      	movs	r2, #255	; 0xff
 8003718:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d103      	bne.n	8003728 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40002800 	.word	0x40002800

08003738 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_RTC_SetTime+0x1a>
 800374e:	2302      	movs	r3, #2
 8003750:	e081      	b.n	8003856 <HAL_RTC_SetTime+0x11e>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003762:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RTC_SetTime+0x128>)
 8003764:	22ca      	movs	r2, #202	; 0xca
 8003766:	625a      	str	r2, [r3, #36]	; 0x24
 8003768:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_RTC_SetTime+0x128>)
 800376a:	2253      	movs	r2, #83	; 0x53
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f9ce 	bl	8003b10 <RTC_EnterInitMode>
 8003774:	4603      	mov	r3, r0
 8003776:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d15c      	bne.n	8003838 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d125      	bne.n	80037d0 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003784:	4b36      	ldr	r3, [pc, #216]	; (8003860 <HAL_RTC_SetTime+0x128>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d102      	bne.n	8003796 <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2200      	movs	r2, #0
 8003794:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fa2a 	bl	8003bf4 <RTC_ByteToBcd2>
 80037a0:	4603      	mov	r3, r0
 80037a2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fa23 	bl	8003bf4 <RTC_ByteToBcd2>
 80037ae:	4603      	mov	r3, r0
 80037b0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037b2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	789b      	ldrb	r3, [r3, #2]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fa1b 	bl	8003bf4 <RTC_ByteToBcd2>
 80037be:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037c0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	78db      	ldrb	r3, [r3, #3]
 80037c8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	e017      	b.n	8003800 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_RTC_SetTime+0x128>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2200      	movs	r2, #0
 80037e0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	785b      	ldrb	r3, [r3, #1]
 80037ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037ee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037f4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	78db      	ldrb	r3, [r3, #3]
 80037fa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003800:	4a17      	ldr	r2, [pc, #92]	; (8003860 <HAL_RTC_SetTime+0x128>)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003808:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800380c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800380e:	4b14      	ldr	r3, [pc, #80]	; (8003860 <HAL_RTC_SetTime+0x128>)
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	4a13      	ldr	r2, [pc, #76]	; (8003860 <HAL_RTC_SetTime+0x128>)
 8003814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003818:	6193      	str	r3, [r2, #24]

    /* Configure the RTC_CR register */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800381a:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_RTC_SetTime+0x128>)
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	68d9      	ldr	r1, [r3, #12]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	430b      	orrs	r3, r1
 8003828:	490d      	ldr	r1, [pc, #52]	; (8003860 <HAL_RTC_SetTime+0x128>)
 800382a:	4313      	orrs	r3, r2
 800382c:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f9a2 	bl	8003b78 <RTC_ExitInitMode>
 8003834:	4603      	mov	r3, r0
 8003836:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RTC_SetTime+0x128>)
 800383a:	22ff      	movs	r2, #255	; 0xff
 800383c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d103      	bne.n	800384c <HAL_RTC_SetTime+0x114>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
}
 8003856:	4618      	mov	r0, r3
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	bd90      	pop	{r4, r7, pc}
 800385e:	bf00      	nop
 8003860:	40002800 	.word	0x40002800

08003864 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003870:	4b29      	ldr	r3, [pc, #164]	; (8003918 <HAL_RTC_GetTime+0xb4>)
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8003878:	4b27      	ldr	r3, [pc, #156]	; (8003918 <HAL_RTC_GetTime+0xb4>)
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003884:	4b24      	ldr	r3, [pc, #144]	; (8003918 <HAL_RTC_GetTime+0xb4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800388c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003890:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	0d9b      	lsrs	r3, r3, #22
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11a      	bne.n	800390c <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f9aa 	bl	8003c34 <RTC_Bcd2ToByte>
 80038e0:	4603      	mov	r3, r0
 80038e2:	461a      	mov	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	785b      	ldrb	r3, [r3, #1]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 f9a1 	bl	8003c34 <RTC_Bcd2ToByte>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	789b      	ldrb	r3, [r3, #2]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f998 	bl	8003c34 <RTC_Bcd2ToByte>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40002800 	.word	0x40002800

0800391c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_RTC_SetDate+0x1a>
 8003932:	2302      	movs	r3, #2
 8003934:	e071      	b.n	8003a1a <HAL_RTC_SetDate+0xfe>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10e      	bne.n	800396a <HAL_RTC_SetDate+0x4e>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	785b      	ldrb	r3, [r3, #1]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	785b      	ldrb	r3, [r3, #1]
 800395c:	f023 0310 	bic.w	r3, r3, #16
 8003960:	b2db      	uxtb	r3, r3
 8003962:	330a      	adds	r3, #10
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11c      	bne.n	80039aa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	78db      	ldrb	r3, [r3, #3]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 f93d 	bl	8003bf4 <RTC_ByteToBcd2>
 800397a:	4603      	mov	r3, r0
 800397c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	785b      	ldrb	r3, [r3, #1]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f936 	bl	8003bf4 <RTC_ByteToBcd2>
 8003988:	4603      	mov	r3, r0
 800398a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800398c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	789b      	ldrb	r3, [r3, #2]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f92e 	bl	8003bf4 <RTC_ByteToBcd2>
 8003998:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800399a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	e00e      	b.n	80039c8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	78db      	ldrb	r3, [r3, #3]
 80039ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039b6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039c8:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <HAL_RTC_SetDate+0x108>)
 80039ca:	22ca      	movs	r2, #202	; 0xca
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
 80039ce:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <HAL_RTC_SetDate+0x108>)
 80039d0:	2253      	movs	r2, #83	; 0x53
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f89b 	bl	8003b10 <RTC_EnterInitMode>
 80039da:	4603      	mov	r3, r0
 80039dc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80039e4:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <HAL_RTC_SetDate+0x108>)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f8c0 	bl	8003b78 <RTC_ExitInitMode>
 80039f8:	4603      	mov	r3, r0
 80039fa:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RTC_SetDate+0x108>)
 80039fe:	22ff      	movs	r2, #255	; 0xff
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <HAL_RTC_SetDate+0xf4>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd90      	pop	{r4, r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40002800 	.word	0x40002800

08003a28 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003a34:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <HAL_RTC_GetDate+0x98>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a40:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	0b5b      	lsrs	r3, r3, #13
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11a      	bne.n	8003ab6 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	78db      	ldrb	r3, [r3, #3]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f8d5 	bl	8003c34 <RTC_Bcd2ToByte>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	785b      	ldrb	r3, [r3, #1]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f8cc 	bl	8003c34 <RTC_Bcd2ToByte>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	789b      	ldrb	r3, [r3, #2]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 f8c3 	bl	8003c34 <RTC_Bcd2ToByte>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40002800 	.word	0x40002800

08003ac4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_RTC_WaitForSynchro+0x48>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <HAL_RTC_WaitForSynchro+0x48>)
 8003ad2:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8003ad6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003ad8:	f7fd fd0e 	bl	80014f8 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003ade:	e009      	b.n	8003af4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ae0:	f7fd fd0a 	bl	80014f8 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aee:	d901      	bls.n	8003af4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e006      	b.n	8003b02 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RTC_WaitForSynchro+0x48>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ef      	beq.n	8003ae0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40002800 	.word	0x40002800

08003b10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003b1c:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <RTC_EnterInitMode+0x64>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d120      	bne.n	8003b6a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003b28:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <RTC_EnterInitMode+0x64>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <RTC_EnterInitMode+0x64>)
 8003b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b32:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003b34:	f7fd fce0 	bl	80014f8 <HAL_GetTick>
 8003b38:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003b3a:	e00d      	b.n	8003b58 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003b3c:	f7fd fcdc 	bl	80014f8 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b4a:	d905      	bls.n	8003b58 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2203      	movs	r2, #3
 8003b54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <RTC_EnterInitMode+0x64>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <RTC_EnterInitMode+0x5a>
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d1e8      	bne.n	8003b3c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40002800 	.word	0x40002800

08003b78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <RTC_ExitInitMode+0x78>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <RTC_ExitInitMode+0x78>)
 8003b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003b90:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <RTC_ExitInitMode+0x78>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10c      	bne.n	8003bb6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff91 	bl	8003ac4 <HAL_RTC_WaitForSynchro>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01e      	beq.n	8003be6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2203      	movs	r2, #3
 8003bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e017      	b.n	8003be6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <RTC_ExitInitMode+0x78>)
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	4a0d      	ldr	r2, [pc, #52]	; (8003bf0 <RTC_ExitInitMode+0x78>)
 8003bbc:	f023 0320 	bic.w	r3, r3, #32
 8003bc0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ff7e 	bl	8003ac4 <HAL_RTC_WaitForSynchro>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <RTC_ExitInitMode+0x78>)
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <RTC_ExitInitMode+0x78>)
 8003be0:	f043 0320 	orr.w	r3, r3, #32
 8003be4:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40002800 	.word	0x40002800

08003bf4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003c06:	e005      	b.n	8003c14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003c0e:	7afb      	ldrb	r3, [r7, #11]
 8003c10:	3b0a      	subs	r3, #10
 8003c12:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003c14:	7afb      	ldrb	r3, [r7, #11]
 8003c16:	2b09      	cmp	r3, #9
 8003c18:	d8f6      	bhi.n	8003c08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	b2db      	uxtb	r3, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	b2db      	uxtb	r3, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e084      	b.n	8003d88 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d106      	bne.n	8003c9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7fd f9b5 	bl	8001008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cbe:	d902      	bls.n	8003cc6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e002      	b.n	8003ccc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cd4:	d007      	beq.n	8003ce6 <HAL_SPI_Init+0x7a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10b      	bne.n	8003d06 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cf6:	d903      	bls.n	8003d00 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8003cfe:	e002      	b.n	8003d06 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	ea42 0103 	orr.w	r1, r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	f003 0204 	and.w	r2, r3, #4
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	ea42 0103 	orr.w	r1, r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_SPI_Transmit+0x22>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e150      	b.n	8004054 <HAL_SPI_Transmit+0x2c4>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dba:	f7fd fb9d 	bl	80014f8 <HAL_GetTick>
 8003dbe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d002      	beq.n	8003dd6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dd4:	e135      	b.n	8004042 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_SPI_Transmit+0x52>
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003de6:	e12c      	b.n	8004042 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2203      	movs	r2, #3
 8003dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e32:	d107      	bne.n	8003e44 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b40      	cmp	r3, #64	; 0x40
 8003e50:	d007      	beq.n	8003e62 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e6a:	d94b      	bls.n	8003f04 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_SPI_Transmit+0xea>
 8003e74:	8afb      	ldrh	r3, [r7, #22]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d13e      	bne.n	8003ef8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	881a      	ldrh	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	1c9a      	adds	r2, r3, #2
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e9e:	e02b      	b.n	8003ef8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d112      	bne.n	8003ed4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	881a      	ldrh	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ed2:	e011      	b.n	8003ef8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed4:	f7fd fb10 	bl	80014f8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d803      	bhi.n	8003eec <HAL_SPI_Transmit+0x15c>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d102      	bne.n	8003ef2 <HAL_SPI_Transmit+0x162>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ef6:	e0a4      	b.n	8004042 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1ce      	bne.n	8003ea0 <HAL_SPI_Transmit+0x110>
 8003f02:	e07c      	b.n	8003ffe <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_SPI_Transmit+0x182>
 8003f0c:	8afb      	ldrh	r3, [r7, #22]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d170      	bne.n	8003ff4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d912      	bls.n	8003f42 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b02      	subs	r3, #2
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f40:	e058      	b.n	8003ff4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	7812      	ldrb	r2, [r2, #0]
 8003f4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f68:	e044      	b.n	8003ff4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d12b      	bne.n	8003fd0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d912      	bls.n	8003fa8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	881a      	ldrh	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	1c9a      	adds	r2, r3, #2
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b02      	subs	r3, #2
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fa6:	e025      	b.n	8003ff4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fce:	e011      	b.n	8003ff4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fd0:	f7fd fa92 	bl	80014f8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d803      	bhi.n	8003fe8 <HAL_SPI_Transmit+0x258>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe6:	d102      	bne.n	8003fee <HAL_SPI_Transmit+0x25e>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ff2:	e026      	b.n	8004042 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1b5      	bne.n	8003f6a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fca2 	bl	800494c <SPI_EndRxTxTransaction>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e000      	b.n	8004042 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004040:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004052:	7ffb      	ldrb	r3, [r7, #31]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004078:	d112      	bne.n	80040a0 <HAL_SPI_Receive+0x44>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10e      	bne.n	80040a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2204      	movs	r2, #4
 8004086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f908 	bl	80042ac <HAL_SPI_TransmitReceive>
 800409c:	4603      	mov	r3, r0
 800409e:	e101      	b.n	80042a4 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_SPI_Receive+0x52>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e0fa      	b.n	80042a4 <HAL_SPI_Receive+0x248>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040b6:	f7fd fa1f 	bl	80014f8 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d002      	beq.n	80040ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
 80040ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040cc:	e0e1      	b.n	8004292 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_Receive+0x7e>
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d102      	bne.n	80040e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040de:	e0d8      	b.n	8004292 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2204      	movs	r2, #4
 80040e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800412a:	d908      	bls.n	800413e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	e007      	b.n	800414e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800414c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004156:	d107      	bne.n	8004168 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004166:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d007      	beq.n	8004186 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004184:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800418e:	d867      	bhi.n	8004260 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004190:	e030      	b.n	80041f4 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b01      	cmp	r3, #1
 800419e:	d117      	bne.n	80041d0 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f103 020c 	add.w	r2, r3, #12
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	7812      	ldrb	r2, [r2, #0]
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80041ce:	e011      	b.n	80041f4 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d0:	f7fd f992 	bl	80014f8 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d803      	bhi.n	80041e8 <HAL_SPI_Receive+0x18c>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d102      	bne.n	80041ee <HAL_SPI_Receive+0x192>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041f2:	e04e      	b.n	8004292 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1c8      	bne.n	8004192 <HAL_SPI_Receive+0x136>
 8004200:	e034      	b.n	800426c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d115      	bne.n	800423c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	b292      	uxth	r2, r2
 800421c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	1c9a      	adds	r2, r3, #2
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800423a:	e011      	b.n	8004260 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800423c:	f7fd f95c 	bl	80014f8 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d803      	bhi.n	8004254 <HAL_SPI_Receive+0x1f8>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d102      	bne.n	800425a <HAL_SPI_Receive+0x1fe>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800425e:	e018      	b.n	8004292 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ca      	bne.n	8004202 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	6839      	ldr	r1, [r7, #0]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 fb13 	bl	800489c <SPI_EndRxTransaction>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
 800428e:	e000      	b.n	8004292 <HAL_SPI_Receive+0x236>
  }

error :
 8004290:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	; 0x28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042ba:	2301      	movs	r3, #1
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x26>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e1fb      	b.n	80046ca <HAL_SPI_TransmitReceive+0x41e>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042da:	f7fd f90d 	bl	80014f8 <HAL_GetTick>
 80042de:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042e6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80042ee:	887b      	ldrh	r3, [r7, #2]
 80042f0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80042f2:	887b      	ldrh	r3, [r7, #2]
 80042f4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042f6:	7efb      	ldrb	r3, [r7, #27]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d00e      	beq.n	800431a <HAL_SPI_TransmitReceive+0x6e>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004302:	d106      	bne.n	8004312 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d102      	bne.n	8004312 <HAL_SPI_TransmitReceive+0x66>
 800430c:	7efb      	ldrb	r3, [r7, #27]
 800430e:	2b04      	cmp	r3, #4
 8004310:	d003      	beq.n	800431a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004312:	2302      	movs	r3, #2
 8004314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004318:	e1cd      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_SPI_TransmitReceive+0x80>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <HAL_SPI_TransmitReceive+0x80>
 8004326:	887b      	ldrh	r3, [r7, #2]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004332:	e1c0      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b04      	cmp	r3, #4
 800433e:	d003      	beq.n	8004348 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2205      	movs	r2, #5
 8004344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	887a      	ldrh	r2, [r7, #2]
 8004360:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	887a      	ldrh	r2, [r7, #2]
 800436e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800438a:	d802      	bhi.n	8004392 <HAL_SPI_TransmitReceive+0xe6>
 800438c:	8a3b      	ldrh	r3, [r7, #16]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d908      	bls.n	80043a4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043a0:	605a      	str	r2, [r3, #4]
 80043a2:	e007      	b.n	80043b4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d007      	beq.n	80043d2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043da:	d97c      	bls.n	80044d6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SPI_TransmitReceive+0x13e>
 80043e4:	8a7b      	ldrh	r3, [r7, #18]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d169      	bne.n	80044be <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	881a      	ldrh	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	1c9a      	adds	r2, r3, #2
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800440e:	e056      	b.n	80044be <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b02      	cmp	r3, #2
 800441c:	d11b      	bne.n	8004456 <HAL_SPI_TransmitReceive+0x1aa>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d016      	beq.n	8004456 <HAL_SPI_TransmitReceive+0x1aa>
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	2b01      	cmp	r3, #1
 800442c:	d113      	bne.n	8004456 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	881a      	ldrh	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	1c9a      	adds	r2, r3, #2
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d11c      	bne.n	800449e <HAL_SPI_TransmitReceive+0x1f2>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d016      	beq.n	800449e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	b292      	uxth	r2, r2
 800447c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	1c9a      	adds	r2, r3, #2
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800449a:	2301      	movs	r3, #1
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800449e:	f7fd f82b 	bl	80014f8 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d807      	bhi.n	80044be <HAL_SPI_TransmitReceive+0x212>
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d003      	beq.n	80044be <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80044bc:	e0fb      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1a3      	bne.n	8004410 <HAL_SPI_TransmitReceive+0x164>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d19d      	bne.n	8004410 <HAL_SPI_TransmitReceive+0x164>
 80044d4:	e0df      	b.n	8004696 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_SPI_TransmitReceive+0x23a>
 80044de:	8a7b      	ldrh	r3, [r7, #18]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	f040 80cb 	bne.w	800467c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d912      	bls.n	8004516 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	881a      	ldrh	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	1c9a      	adds	r2, r3, #2
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b02      	subs	r3, #2
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004514:	e0b2      	b.n	800467c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	7812      	ldrb	r2, [r2, #0]
 8004522:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800453c:	e09e      	b.n	800467c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b02      	cmp	r3, #2
 800454a:	d134      	bne.n	80045b6 <HAL_SPI_TransmitReceive+0x30a>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d02f      	beq.n	80045b6 <HAL_SPI_TransmitReceive+0x30a>
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	2b01      	cmp	r3, #1
 800455a:	d12c      	bne.n	80045b6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d912      	bls.n	800458c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	881a      	ldrh	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	1c9a      	adds	r2, r3, #2
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b02      	subs	r3, #2
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	87da      	strh	r2, [r3, #62]	; 0x3e
 800458a:	e012      	b.n	80045b2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	7812      	ldrb	r2, [r2, #0]
 8004598:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d148      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x3aa>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d042      	beq.n	8004656 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d923      	bls.n	8004624 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	b292      	uxth	r2, r2
 80045e8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	1c9a      	adds	r2, r3, #2
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b02      	subs	r3, #2
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b01      	cmp	r3, #1
 8004610:	d81f      	bhi.n	8004652 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	e016      	b.n	8004652 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f103 020c 	add.w	r2, r3, #12
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	7812      	ldrb	r2, [r2, #0]
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004652:	2301      	movs	r3, #1
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004656:	f7fc ff4f 	bl	80014f8 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004662:	429a      	cmp	r2, r3
 8004664:	d803      	bhi.n	800466e <HAL_SPI_TransmitReceive+0x3c2>
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466c:	d102      	bne.n	8004674 <HAL_SPI_TransmitReceive+0x3c8>
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	2b00      	cmp	r3, #0
 8004672:	d103      	bne.n	800467c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800467a:	e01c      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	f47f af5b 	bne.w	800453e <HAL_SPI_TransmitReceive+0x292>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	f47f af54 	bne.w	800453e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f956 	bl	800494c <SPI_EndRxTxTransaction>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d006      	beq.n	80046b4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	661a      	str	r2, [r3, #96]	; 0x60
 80046b2:	e000      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80046b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3728      	adds	r7, #40	; 0x28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046e0:	b2db      	uxtb	r3, r3
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	4613      	mov	r3, r2
 80046fc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fe:	e04c      	b.n	800479a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d048      	beq.n	800479a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004708:	f7fc fef6 	bl	80014f8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d902      	bls.n	800471e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d13d      	bne.n	800479a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800472c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004736:	d111      	bne.n	800475c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004740:	d004      	beq.n	800474c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474a:	d107      	bne.n	800475c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004764:	d10f      	bne.n	8004786 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e00f      	b.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d1a3      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80047d0:	e057      	b.n	8004882 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047d8:	d106      	bne.n	80047e8 <SPI_WaitFifoStateUntilTimeout+0x26>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d103      	bne.n	80047e8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ee:	d048      	beq.n	8004882 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80047f0:	f7fc fe82 	bl	80014f8 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d902      	bls.n	8004806 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d13d      	bne.n	8004882 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004814:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481e:	d111      	bne.n	8004844 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004828:	d004      	beq.n	8004834 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004832:	d107      	bne.n	8004844 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004842:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800484c:	d10f      	bne.n	800486e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800486c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e008      	b.n	8004894 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	429a      	cmp	r2, r3
 8004890:	d19f      	bne.n	80047d2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b0:	d111      	bne.n	80048d6 <SPI_EndRxTransaction+0x3a>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ba:	d004      	beq.n	80048c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c4:	d107      	bne.n	80048d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2200      	movs	r2, #0
 80048de:	2180      	movs	r1, #128	; 0x80
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f7ff ff04 	bl	80046ee <SPI_WaitFlagStateUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e023      	b.n	8004944 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004904:	d11d      	bne.n	8004942 <SPI_EndRxTransaction+0xa6>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490e:	d004      	beq.n	800491a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004918:	d113      	bne.n	8004942 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2200      	movs	r2, #0
 8004922:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7ff ff4b 	bl	80047c2 <SPI_WaitFifoStateUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e000      	b.n	8004944 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f7ff ff2c 	bl	80047c2 <SPI_WaitFifoStateUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004974:	f043 0220 	orr.w	r2, r3, #32
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e027      	b.n	80049d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2200      	movs	r2, #0
 8004988:	2180      	movs	r1, #128	; 0x80
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff feaf 	bl	80046ee <SPI_WaitFlagStateUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d007      	beq.n	80049a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499a:	f043 0220 	orr.w	r2, r3, #32
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e014      	b.n	80049d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7ff ff05 	bl	80047c2 <SPI_WaitFifoStateUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c2:	f043 0220 	orr.w	r2, r3, #32
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e000      	b.n	80049d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e049      	b.n	8004a7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fc fc30 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f000 fa14 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d001      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e021      	b.n	8004ae4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <HAL_TIM_Base_Start_IT+0x68>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b06      	cmp	r3, #6
 8004ac8:	d00b      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0x5a>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d007      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	00010007 	.word	0x00010007

08004af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d122      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d11b      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0202 	mvn.w	r2, #2
 8004b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f965 	bl	8004e06 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f957 	bl	8004df2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f968 	bl	8004e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d122      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0204 	mvn.w	r2, #4
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f93b 	bl	8004e06 <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f92d 	bl	8004df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f93e 	bl	8004e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d122      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0208 	mvn.w	r2, #8
 8004bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2204      	movs	r2, #4
 8004bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f911 	bl	8004e06 <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f903 	bl	8004df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f914 	bl	8004e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d122      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d11b      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0210 	mvn.w	r2, #16
 8004c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2208      	movs	r2, #8
 8004c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8e7 	bl	8004e06 <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8d9 	bl	8004df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f8ea 	bl	8004e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10e      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d107      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0201 	mvn.w	r2, #1
 8004c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fb ff04 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d10e      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c90:	2b80      	cmp	r3, #128	; 0x80
 8004c92:	d107      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f982 	bl	8004fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb2:	d10e      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b80      	cmp	r3, #128	; 0x80
 8004cc0:	d107      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f975 	bl	8004fbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d10e      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d107      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f898 	bl	8004e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d10e      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d107      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f06f 0220 	mvn.w	r2, #32
 8004d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f935 	bl	8004f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d38:	d10f      	bne.n	8004d5a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d48:	d107      	bne.n	8004d5a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f93b 	bl	8004fd0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d68:	d10f      	bne.n	8004d8a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d78:	d107      	bne.n	8004d8a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f92d 	bl	8004fe4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d98:	d10f      	bne.n	8004dba <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da8:	d107      	bne.n	8004dba <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f91f 	bl	8004ff8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dc8:	d10f      	bne.n	8004dea <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dd8:	d107      	bne.n	8004dea <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f911 	bl	800500c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a46      	ldr	r2, [pc, #280]	; (8004f70 <TIM_Base_SetConfig+0x12c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d017      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e62:	d013      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a43      	ldr	r2, [pc, #268]	; (8004f74 <TIM_Base_SetConfig+0x130>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00f      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a42      	ldr	r2, [pc, #264]	; (8004f78 <TIM_Base_SetConfig+0x134>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00b      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a41      	ldr	r2, [pc, #260]	; (8004f7c <TIM_Base_SetConfig+0x138>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d007      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a40      	ldr	r2, [pc, #256]	; (8004f80 <TIM_Base_SetConfig+0x13c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a3f      	ldr	r2, [pc, #252]	; (8004f84 <TIM_Base_SetConfig+0x140>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d108      	bne.n	8004e9e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a33      	ldr	r2, [pc, #204]	; (8004f70 <TIM_Base_SetConfig+0x12c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d023      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eac:	d01f      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a30      	ldr	r2, [pc, #192]	; (8004f74 <TIM_Base_SetConfig+0x130>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01b      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2f      	ldr	r2, [pc, #188]	; (8004f78 <TIM_Base_SetConfig+0x134>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d017      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2e      	ldr	r2, [pc, #184]	; (8004f7c <TIM_Base_SetConfig+0x138>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2d      	ldr	r2, [pc, #180]	; (8004f80 <TIM_Base_SetConfig+0x13c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00f      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2d      	ldr	r2, [pc, #180]	; (8004f88 <TIM_Base_SetConfig+0x144>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <TIM_Base_SetConfig+0x148>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a2b      	ldr	r2, [pc, #172]	; (8004f90 <TIM_Base_SetConfig+0x14c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a26      	ldr	r2, [pc, #152]	; (8004f84 <TIM_Base_SetConfig+0x140>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d108      	bne.n	8004f00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a12      	ldr	r2, [pc, #72]	; (8004f70 <TIM_Base_SetConfig+0x12c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d013      	beq.n	8004f54 <TIM_Base_SetConfig+0x110>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a14      	ldr	r2, [pc, #80]	; (8004f80 <TIM_Base_SetConfig+0x13c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00f      	beq.n	8004f54 <TIM_Base_SetConfig+0x110>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <TIM_Base_SetConfig+0x144>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_Base_SetConfig+0x110>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <TIM_Base_SetConfig+0x148>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_Base_SetConfig+0x110>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a12      	ldr	r2, [pc, #72]	; (8004f90 <TIM_Base_SetConfig+0x14c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_Base_SetConfig+0x110>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <TIM_Base_SetConfig+0x140>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d103      	bne.n	8004f5c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	615a      	str	r2, [r3, #20]
}
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800
 8004f7c:	40000c00 	.word	0x40000c00
 8004f80:	40013400 	.word	0x40013400
 8004f84:	40015000 	.word	0x40015000
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800

08004f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e042      	b.n	80050b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7fc f987 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2224      	movs	r2, #36	; 0x24
 800504e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f82c 	bl	80050c0 <UART_SetConfig>
 8005068:	4603      	mov	r3, r0
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e022      	b.n	80050b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f001 fa0e 	bl	800649c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800508e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800509e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f001 fa95 	bl	80065e0 <UART_CheckIdleState>
 80050b6:	4603      	mov	r3, r0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80050c4:	b08a      	sub	sp, #40	; 0x28
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f4:	4313      	orrs	r3, r2
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4baa      	ldr	r3, [pc, #680]	; (80053a8 <UART_SetConfig+0x2e8>)
 8005100:	4013      	ands	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005108:	430b      	orrs	r3, r1
 800510a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a9f      	ldr	r2, [pc, #636]	; (80053ac <UART_SetConfig+0x2ec>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005138:	4313      	orrs	r3, r2
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005146:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005150:	430b      	orrs	r3, r1
 8005152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	f023 010f 	bic.w	r1, r3, #15
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a90      	ldr	r2, [pc, #576]	; (80053b0 <UART_SetConfig+0x2f0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d126      	bne.n	80051c2 <UART_SetConfig+0x102>
 8005174:	4b8f      	ldr	r3, [pc, #572]	; (80053b4 <UART_SetConfig+0x2f4>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b03      	cmp	r3, #3
 8005180:	d81a      	bhi.n	80051b8 <UART_SetConfig+0xf8>
 8005182:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <UART_SetConfig+0xc8>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	08005199 	.word	0x08005199
 800518c:	080051a9 	.word	0x080051a9
 8005190:	080051a1 	.word	0x080051a1
 8005194:	080051b1 	.word	0x080051b1
 8005198:	2301      	movs	r3, #1
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519e:	e116      	b.n	80053ce <UART_SetConfig+0x30e>
 80051a0:	2302      	movs	r3, #2
 80051a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a6:	e112      	b.n	80053ce <UART_SetConfig+0x30e>
 80051a8:	2304      	movs	r3, #4
 80051aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ae:	e10e      	b.n	80053ce <UART_SetConfig+0x30e>
 80051b0:	2308      	movs	r3, #8
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b6:	e10a      	b.n	80053ce <UART_SetConfig+0x30e>
 80051b8:	2310      	movs	r3, #16
 80051ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051be:	bf00      	nop
 80051c0:	e105      	b.n	80053ce <UART_SetConfig+0x30e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a7c      	ldr	r2, [pc, #496]	; (80053b8 <UART_SetConfig+0x2f8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d138      	bne.n	800523e <UART_SetConfig+0x17e>
 80051cc:	4b79      	ldr	r3, [pc, #484]	; (80053b4 <UART_SetConfig+0x2f4>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d82c      	bhi.n	8005234 <UART_SetConfig+0x174>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <UART_SetConfig+0x120>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005215 	.word	0x08005215
 80051e4:	08005235 	.word	0x08005235
 80051e8:	08005235 	.word	0x08005235
 80051ec:	08005235 	.word	0x08005235
 80051f0:	08005225 	.word	0x08005225
 80051f4:	08005235 	.word	0x08005235
 80051f8:	08005235 	.word	0x08005235
 80051fc:	08005235 	.word	0x08005235
 8005200:	0800521d 	.word	0x0800521d
 8005204:	08005235 	.word	0x08005235
 8005208:	08005235 	.word	0x08005235
 800520c:	08005235 	.word	0x08005235
 8005210:	0800522d 	.word	0x0800522d
 8005214:	2300      	movs	r3, #0
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521a:	e0d8      	b.n	80053ce <UART_SetConfig+0x30e>
 800521c:	2302      	movs	r3, #2
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005222:	e0d4      	b.n	80053ce <UART_SetConfig+0x30e>
 8005224:	2304      	movs	r3, #4
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522a:	e0d0      	b.n	80053ce <UART_SetConfig+0x30e>
 800522c:	2308      	movs	r3, #8
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	e0cc      	b.n	80053ce <UART_SetConfig+0x30e>
 8005234:	2310      	movs	r3, #16
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	bf00      	nop
 800523c:	e0c7      	b.n	80053ce <UART_SetConfig+0x30e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a5e      	ldr	r2, [pc, #376]	; (80053bc <UART_SetConfig+0x2fc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d125      	bne.n	8005294 <UART_SetConfig+0x1d4>
 8005248:	4b5a      	ldr	r3, [pc, #360]	; (80053b4 <UART_SetConfig+0x2f4>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005252:	2b10      	cmp	r3, #16
 8005254:	d011      	beq.n	800527a <UART_SetConfig+0x1ba>
 8005256:	2b10      	cmp	r3, #16
 8005258:	d802      	bhi.n	8005260 <UART_SetConfig+0x1a0>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d005      	beq.n	800526a <UART_SetConfig+0x1aa>
 800525e:	e014      	b.n	800528a <UART_SetConfig+0x1ca>
 8005260:	2b20      	cmp	r3, #32
 8005262:	d006      	beq.n	8005272 <UART_SetConfig+0x1b2>
 8005264:	2b30      	cmp	r3, #48	; 0x30
 8005266:	d00c      	beq.n	8005282 <UART_SetConfig+0x1c2>
 8005268:	e00f      	b.n	800528a <UART_SetConfig+0x1ca>
 800526a:	2300      	movs	r3, #0
 800526c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005270:	e0ad      	b.n	80053ce <UART_SetConfig+0x30e>
 8005272:	2302      	movs	r3, #2
 8005274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005278:	e0a9      	b.n	80053ce <UART_SetConfig+0x30e>
 800527a:	2304      	movs	r3, #4
 800527c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005280:	e0a5      	b.n	80053ce <UART_SetConfig+0x30e>
 8005282:	2308      	movs	r3, #8
 8005284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005288:	e0a1      	b.n	80053ce <UART_SetConfig+0x30e>
 800528a:	2310      	movs	r3, #16
 800528c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005290:	bf00      	nop
 8005292:	e09c      	b.n	80053ce <UART_SetConfig+0x30e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a49      	ldr	r2, [pc, #292]	; (80053c0 <UART_SetConfig+0x300>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d125      	bne.n	80052ea <UART_SetConfig+0x22a>
 800529e:	4b45      	ldr	r3, [pc, #276]	; (80053b4 <UART_SetConfig+0x2f4>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d011      	beq.n	80052d0 <UART_SetConfig+0x210>
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d802      	bhi.n	80052b6 <UART_SetConfig+0x1f6>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <UART_SetConfig+0x200>
 80052b4:	e014      	b.n	80052e0 <UART_SetConfig+0x220>
 80052b6:	2b80      	cmp	r3, #128	; 0x80
 80052b8:	d006      	beq.n	80052c8 <UART_SetConfig+0x208>
 80052ba:	2bc0      	cmp	r3, #192	; 0xc0
 80052bc:	d00c      	beq.n	80052d8 <UART_SetConfig+0x218>
 80052be:	e00f      	b.n	80052e0 <UART_SetConfig+0x220>
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c6:	e082      	b.n	80053ce <UART_SetConfig+0x30e>
 80052c8:	2302      	movs	r3, #2
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ce:	e07e      	b.n	80053ce <UART_SetConfig+0x30e>
 80052d0:	2304      	movs	r3, #4
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d6:	e07a      	b.n	80053ce <UART_SetConfig+0x30e>
 80052d8:	2308      	movs	r3, #8
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052de:	e076      	b.n	80053ce <UART_SetConfig+0x30e>
 80052e0:	2310      	movs	r3, #16
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e6:	bf00      	nop
 80052e8:	e071      	b.n	80053ce <UART_SetConfig+0x30e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a35      	ldr	r2, [pc, #212]	; (80053c4 <UART_SetConfig+0x304>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d129      	bne.n	8005348 <UART_SetConfig+0x288>
 80052f4:	4b2f      	ldr	r3, [pc, #188]	; (80053b4 <UART_SetConfig+0x2f4>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005302:	d014      	beq.n	800532e <UART_SetConfig+0x26e>
 8005304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005308:	d802      	bhi.n	8005310 <UART_SetConfig+0x250>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <UART_SetConfig+0x25e>
 800530e:	e016      	b.n	800533e <UART_SetConfig+0x27e>
 8005310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005314:	d007      	beq.n	8005326 <UART_SetConfig+0x266>
 8005316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531a:	d00c      	beq.n	8005336 <UART_SetConfig+0x276>
 800531c:	e00f      	b.n	800533e <UART_SetConfig+0x27e>
 800531e:	2300      	movs	r3, #0
 8005320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005324:	e053      	b.n	80053ce <UART_SetConfig+0x30e>
 8005326:	2302      	movs	r3, #2
 8005328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532c:	e04f      	b.n	80053ce <UART_SetConfig+0x30e>
 800532e:	2304      	movs	r3, #4
 8005330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005334:	e04b      	b.n	80053ce <UART_SetConfig+0x30e>
 8005336:	2308      	movs	r3, #8
 8005338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533c:	e047      	b.n	80053ce <UART_SetConfig+0x30e>
 800533e:	2310      	movs	r3, #16
 8005340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005344:	bf00      	nop
 8005346:	e042      	b.n	80053ce <UART_SetConfig+0x30e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a17      	ldr	r2, [pc, #92]	; (80053ac <UART_SetConfig+0x2ec>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d13a      	bne.n	80053c8 <UART_SetConfig+0x308>
 8005352:	4b18      	ldr	r3, [pc, #96]	; (80053b4 <UART_SetConfig+0x2f4>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005360:	d014      	beq.n	800538c <UART_SetConfig+0x2cc>
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005366:	d802      	bhi.n	800536e <UART_SetConfig+0x2ae>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <UART_SetConfig+0x2bc>
 800536c:	e016      	b.n	800539c <UART_SetConfig+0x2dc>
 800536e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005372:	d007      	beq.n	8005384 <UART_SetConfig+0x2c4>
 8005374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005378:	d00c      	beq.n	8005394 <UART_SetConfig+0x2d4>
 800537a:	e00f      	b.n	800539c <UART_SetConfig+0x2dc>
 800537c:	2300      	movs	r3, #0
 800537e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005382:	e024      	b.n	80053ce <UART_SetConfig+0x30e>
 8005384:	2302      	movs	r3, #2
 8005386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538a:	e020      	b.n	80053ce <UART_SetConfig+0x30e>
 800538c:	2304      	movs	r3, #4
 800538e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005392:	e01c      	b.n	80053ce <UART_SetConfig+0x30e>
 8005394:	2308      	movs	r3, #8
 8005396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539a:	e018      	b.n	80053ce <UART_SetConfig+0x30e>
 800539c:	2310      	movs	r3, #16
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a2:	bf00      	nop
 80053a4:	e013      	b.n	80053ce <UART_SetConfig+0x30e>
 80053a6:	bf00      	nop
 80053a8:	cfff69f3 	.word	0xcfff69f3
 80053ac:	40008000 	.word	0x40008000
 80053b0:	40013800 	.word	0x40013800
 80053b4:	40021000 	.word	0x40021000
 80053b8:	40004400 	.word	0x40004400
 80053bc:	40004800 	.word	0x40004800
 80053c0:	40004c00 	.word	0x40004c00
 80053c4:	40005000 	.word	0x40005000
 80053c8:	2310      	movs	r3, #16
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a86      	ldr	r2, [pc, #536]	; (80055ec <UART_SetConfig+0x52c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	f040 8422 	bne.w	8005c1e <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053de:	2b08      	cmp	r3, #8
 80053e0:	f200 8173 	bhi.w	80056ca <UART_SetConfig+0x60a>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <UART_SetConfig+0x32c>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005411 	.word	0x08005411
 80053f0:	080056cb 	.word	0x080056cb
 80053f4:	080054b3 	.word	0x080054b3
 80053f8:	080056cb 	.word	0x080056cb
 80053fc:	0800554b 	.word	0x0800554b
 8005400:	080056cb 	.word	0x080056cb
 8005404:	080056cb 	.word	0x080056cb
 8005408:	080056cb 	.word	0x080056cb
 800540c:	0800561d 	.word	0x0800561d
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005410:	f7fd fe66 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8005414:	4602      	mov	r2, r0
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	2b00      	cmp	r3, #0
 800541c:	d044      	beq.n	80054a8 <UART_SetConfig+0x3e8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	2b01      	cmp	r3, #1
 8005424:	d03e      	beq.n	80054a4 <UART_SetConfig+0x3e4>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	2b02      	cmp	r3, #2
 800542c:	d038      	beq.n	80054a0 <UART_SetConfig+0x3e0>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	2b03      	cmp	r3, #3
 8005434:	d032      	beq.n	800549c <UART_SetConfig+0x3dc>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	2b04      	cmp	r3, #4
 800543c:	d02c      	beq.n	8005498 <UART_SetConfig+0x3d8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	2b05      	cmp	r3, #5
 8005444:	d026      	beq.n	8005494 <UART_SetConfig+0x3d4>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	2b06      	cmp	r3, #6
 800544c:	d020      	beq.n	8005490 <UART_SetConfig+0x3d0>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	2b07      	cmp	r3, #7
 8005454:	d01a      	beq.n	800548c <UART_SetConfig+0x3cc>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b08      	cmp	r3, #8
 800545c:	d014      	beq.n	8005488 <UART_SetConfig+0x3c8>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	2b09      	cmp	r3, #9
 8005464:	d00e      	beq.n	8005484 <UART_SetConfig+0x3c4>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	2b0a      	cmp	r3, #10
 800546c:	d008      	beq.n	8005480 <UART_SetConfig+0x3c0>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	2b0b      	cmp	r3, #11
 8005474:	d102      	bne.n	800547c <UART_SetConfig+0x3bc>
 8005476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800547a:	e016      	b.n	80054aa <UART_SetConfig+0x3ea>
 800547c:	2301      	movs	r3, #1
 800547e:	e014      	b.n	80054aa <UART_SetConfig+0x3ea>
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	e012      	b.n	80054aa <UART_SetConfig+0x3ea>
 8005484:	2340      	movs	r3, #64	; 0x40
 8005486:	e010      	b.n	80054aa <UART_SetConfig+0x3ea>
 8005488:	2320      	movs	r3, #32
 800548a:	e00e      	b.n	80054aa <UART_SetConfig+0x3ea>
 800548c:	2310      	movs	r3, #16
 800548e:	e00c      	b.n	80054aa <UART_SetConfig+0x3ea>
 8005490:	230c      	movs	r3, #12
 8005492:	e00a      	b.n	80054aa <UART_SetConfig+0x3ea>
 8005494:	230a      	movs	r3, #10
 8005496:	e008      	b.n	80054aa <UART_SetConfig+0x3ea>
 8005498:	2308      	movs	r3, #8
 800549a:	e006      	b.n	80054aa <UART_SetConfig+0x3ea>
 800549c:	2306      	movs	r3, #6
 800549e:	e004      	b.n	80054aa <UART_SetConfig+0x3ea>
 80054a0:	2304      	movs	r3, #4
 80054a2:	e002      	b.n	80054aa <UART_SetConfig+0x3ea>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e000      	b.n	80054aa <UART_SetConfig+0x3ea>
 80054a8:	2301      	movs	r3, #1
 80054aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ae:	617b      	str	r3, [r7, #20]
        break;
 80054b0:	e10e      	b.n	80056d0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d044      	beq.n	8005544 <UART_SetConfig+0x484>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d03e      	beq.n	8005540 <UART_SetConfig+0x480>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d038      	beq.n	800553c <UART_SetConfig+0x47c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d032      	beq.n	8005538 <UART_SetConfig+0x478>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d02c      	beq.n	8005534 <UART_SetConfig+0x474>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d026      	beq.n	8005530 <UART_SetConfig+0x470>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	2b06      	cmp	r3, #6
 80054e8:	d020      	beq.n	800552c <UART_SetConfig+0x46c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b07      	cmp	r3, #7
 80054f0:	d01a      	beq.n	8005528 <UART_SetConfig+0x468>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d014      	beq.n	8005524 <UART_SetConfig+0x464>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b09      	cmp	r3, #9
 8005500:	d00e      	beq.n	8005520 <UART_SetConfig+0x460>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	2b0a      	cmp	r3, #10
 8005508:	d008      	beq.n	800551c <UART_SetConfig+0x45c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b0b      	cmp	r3, #11
 8005510:	d102      	bne.n	8005518 <UART_SetConfig+0x458>
 8005512:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005516:	e016      	b.n	8005546 <UART_SetConfig+0x486>
 8005518:	4b35      	ldr	r3, [pc, #212]	; (80055f0 <UART_SetConfig+0x530>)
 800551a:	e014      	b.n	8005546 <UART_SetConfig+0x486>
 800551c:	4b35      	ldr	r3, [pc, #212]	; (80055f4 <UART_SetConfig+0x534>)
 800551e:	e012      	b.n	8005546 <UART_SetConfig+0x486>
 8005520:	4b35      	ldr	r3, [pc, #212]	; (80055f8 <UART_SetConfig+0x538>)
 8005522:	e010      	b.n	8005546 <UART_SetConfig+0x486>
 8005524:	4b35      	ldr	r3, [pc, #212]	; (80055fc <UART_SetConfig+0x53c>)
 8005526:	e00e      	b.n	8005546 <UART_SetConfig+0x486>
 8005528:	4b35      	ldr	r3, [pc, #212]	; (8005600 <UART_SetConfig+0x540>)
 800552a:	e00c      	b.n	8005546 <UART_SetConfig+0x486>
 800552c:	4b35      	ldr	r3, [pc, #212]	; (8005604 <UART_SetConfig+0x544>)
 800552e:	e00a      	b.n	8005546 <UART_SetConfig+0x486>
 8005530:	4b35      	ldr	r3, [pc, #212]	; (8005608 <UART_SetConfig+0x548>)
 8005532:	e008      	b.n	8005546 <UART_SetConfig+0x486>
 8005534:	4b35      	ldr	r3, [pc, #212]	; (800560c <UART_SetConfig+0x54c>)
 8005536:	e006      	b.n	8005546 <UART_SetConfig+0x486>
 8005538:	4b35      	ldr	r3, [pc, #212]	; (8005610 <UART_SetConfig+0x550>)
 800553a:	e004      	b.n	8005546 <UART_SetConfig+0x486>
 800553c:	4b35      	ldr	r3, [pc, #212]	; (8005614 <UART_SetConfig+0x554>)
 800553e:	e002      	b.n	8005546 <UART_SetConfig+0x486>
 8005540:	4b35      	ldr	r3, [pc, #212]	; (8005618 <UART_SetConfig+0x558>)
 8005542:	e000      	b.n	8005546 <UART_SetConfig+0x486>
 8005544:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <UART_SetConfig+0x530>)
 8005546:	617b      	str	r3, [r7, #20]
        break;
 8005548:	e0c2      	b.n	80056d0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800554a:	f7fd fd5b 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 800554e:	4602      	mov	r2, r0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	2b00      	cmp	r3, #0
 8005556:	d044      	beq.n	80055e2 <UART_SetConfig+0x522>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	2b01      	cmp	r3, #1
 800555e:	d03e      	beq.n	80055de <UART_SetConfig+0x51e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	2b02      	cmp	r3, #2
 8005566:	d038      	beq.n	80055da <UART_SetConfig+0x51a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	2b03      	cmp	r3, #3
 800556e:	d032      	beq.n	80055d6 <UART_SetConfig+0x516>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	2b04      	cmp	r3, #4
 8005576:	d02c      	beq.n	80055d2 <UART_SetConfig+0x512>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	2b05      	cmp	r3, #5
 800557e:	d026      	beq.n	80055ce <UART_SetConfig+0x50e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	2b06      	cmp	r3, #6
 8005586:	d020      	beq.n	80055ca <UART_SetConfig+0x50a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2b07      	cmp	r3, #7
 800558e:	d01a      	beq.n	80055c6 <UART_SetConfig+0x506>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	2b08      	cmp	r3, #8
 8005596:	d014      	beq.n	80055c2 <UART_SetConfig+0x502>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	2b09      	cmp	r3, #9
 800559e:	d00e      	beq.n	80055be <UART_SetConfig+0x4fe>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	2b0a      	cmp	r3, #10
 80055a6:	d008      	beq.n	80055ba <UART_SetConfig+0x4fa>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	2b0b      	cmp	r3, #11
 80055ae:	d102      	bne.n	80055b6 <UART_SetConfig+0x4f6>
 80055b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055b4:	e016      	b.n	80055e4 <UART_SetConfig+0x524>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e014      	b.n	80055e4 <UART_SetConfig+0x524>
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	e012      	b.n	80055e4 <UART_SetConfig+0x524>
 80055be:	2340      	movs	r3, #64	; 0x40
 80055c0:	e010      	b.n	80055e4 <UART_SetConfig+0x524>
 80055c2:	2320      	movs	r3, #32
 80055c4:	e00e      	b.n	80055e4 <UART_SetConfig+0x524>
 80055c6:	2310      	movs	r3, #16
 80055c8:	e00c      	b.n	80055e4 <UART_SetConfig+0x524>
 80055ca:	230c      	movs	r3, #12
 80055cc:	e00a      	b.n	80055e4 <UART_SetConfig+0x524>
 80055ce:	230a      	movs	r3, #10
 80055d0:	e008      	b.n	80055e4 <UART_SetConfig+0x524>
 80055d2:	2308      	movs	r3, #8
 80055d4:	e006      	b.n	80055e4 <UART_SetConfig+0x524>
 80055d6:	2306      	movs	r3, #6
 80055d8:	e004      	b.n	80055e4 <UART_SetConfig+0x524>
 80055da:	2304      	movs	r3, #4
 80055dc:	e002      	b.n	80055e4 <UART_SetConfig+0x524>
 80055de:	2302      	movs	r3, #2
 80055e0:	e000      	b.n	80055e4 <UART_SetConfig+0x524>
 80055e2:	2301      	movs	r3, #1
 80055e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e8:	617b      	str	r3, [r7, #20]
        break;
 80055ea:	e071      	b.n	80056d0 <UART_SetConfig+0x610>
 80055ec:	40008000 	.word	0x40008000
 80055f0:	00f42400 	.word	0x00f42400
 80055f4:	0001e848 	.word	0x0001e848
 80055f8:	0003d090 	.word	0x0003d090
 80055fc:	0007a120 	.word	0x0007a120
 8005600:	000f4240 	.word	0x000f4240
 8005604:	00145855 	.word	0x00145855
 8005608:	00186a00 	.word	0x00186a00
 800560c:	001e8480 	.word	0x001e8480
 8005610:	0028b0aa 	.word	0x0028b0aa
 8005614:	003d0900 	.word	0x003d0900
 8005618:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	2b00      	cmp	r3, #0
 8005622:	d04e      	beq.n	80056c2 <UART_SetConfig+0x602>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	2b01      	cmp	r3, #1
 800562a:	d047      	beq.n	80056bc <UART_SetConfig+0x5fc>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	2b02      	cmp	r3, #2
 8005632:	d040      	beq.n	80056b6 <UART_SetConfig+0x5f6>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	2b03      	cmp	r3, #3
 800563a:	d039      	beq.n	80056b0 <UART_SetConfig+0x5f0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	2b04      	cmp	r3, #4
 8005642:	d032      	beq.n	80056aa <UART_SetConfig+0x5ea>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	2b05      	cmp	r3, #5
 800564a:	d02b      	beq.n	80056a4 <UART_SetConfig+0x5e4>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	2b06      	cmp	r3, #6
 8005652:	d024      	beq.n	800569e <UART_SetConfig+0x5de>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	2b07      	cmp	r3, #7
 800565a:	d01d      	beq.n	8005698 <UART_SetConfig+0x5d8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	2b08      	cmp	r3, #8
 8005662:	d016      	beq.n	8005692 <UART_SetConfig+0x5d2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	2b09      	cmp	r3, #9
 800566a:	d00f      	beq.n	800568c <UART_SetConfig+0x5cc>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b0a      	cmp	r3, #10
 8005672:	d008      	beq.n	8005686 <UART_SetConfig+0x5c6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	2b0b      	cmp	r3, #11
 800567a:	d101      	bne.n	8005680 <UART_SetConfig+0x5c0>
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	e022      	b.n	80056c6 <UART_SetConfig+0x606>
 8005680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005684:	e01f      	b.n	80056c6 <UART_SetConfig+0x606>
 8005686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800568a:	e01c      	b.n	80056c6 <UART_SetConfig+0x606>
 800568c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005690:	e019      	b.n	80056c6 <UART_SetConfig+0x606>
 8005692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005696:	e016      	b.n	80056c6 <UART_SetConfig+0x606>
 8005698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800569c:	e013      	b.n	80056c6 <UART_SetConfig+0x606>
 800569e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80056a2:	e010      	b.n	80056c6 <UART_SetConfig+0x606>
 80056a4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80056a8:	e00d      	b.n	80056c6 <UART_SetConfig+0x606>
 80056aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ae:	e00a      	b.n	80056c6 <UART_SetConfig+0x606>
 80056b0:	f241 5355 	movw	r3, #5461	; 0x1555
 80056b4:	e007      	b.n	80056c6 <UART_SetConfig+0x606>
 80056b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056ba:	e004      	b.n	80056c6 <UART_SetConfig+0x606>
 80056bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056c0:	e001      	b.n	80056c6 <UART_SetConfig+0x606>
 80056c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c6:	617b      	str	r3, [r7, #20]
        break;
 80056c8:	e002      	b.n	80056d0 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	76fb      	strb	r3, [r7, #27]
        break;
 80056ce:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 86b7 	beq.w	8006446 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	4413      	add	r3, r2
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d305      	bcc.n	80056f4 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d903      	bls.n	80056fc <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	76fb      	strb	r3, [r7, #27]
 80056f8:	f000 bea5 	b.w	8006446 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80056fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005700:	2b08      	cmp	r3, #8
 8005702:	f200 8277 	bhi.w	8005bf4 <UART_SetConfig+0xb34>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <UART_SetConfig+0x64c>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	08005731 	.word	0x08005731
 8005710:	08005bf5 	.word	0x08005bf5
 8005714:	0800586f 	.word	0x0800586f
 8005718:	08005bf5 	.word	0x08005bf5
 800571c:	08005965 	.word	0x08005965
 8005720:	08005bf5 	.word	0x08005bf5
 8005724:	08005bf5 	.word	0x08005bf5
 8005728:	08005bf5 	.word	0x08005bf5
 800572c:	08005aa3 	.word	0x08005aa3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005730:	f7fd fcd6 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8005734:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4618      	mov	r0, r3
 800573a:	f04f 0100 	mov.w	r1, #0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d067      	beq.n	8005816 <UART_SetConfig+0x756>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	2b01      	cmp	r3, #1
 800574c:	d05e      	beq.n	800580c <UART_SetConfig+0x74c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b02      	cmp	r3, #2
 8005754:	d055      	beq.n	8005802 <UART_SetConfig+0x742>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b03      	cmp	r3, #3
 800575c:	d04c      	beq.n	80057f8 <UART_SetConfig+0x738>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	2b04      	cmp	r3, #4
 8005764:	d043      	beq.n	80057ee <UART_SetConfig+0x72e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b05      	cmp	r3, #5
 800576c:	d03a      	beq.n	80057e4 <UART_SetConfig+0x724>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b06      	cmp	r3, #6
 8005774:	d031      	beq.n	80057da <UART_SetConfig+0x71a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b07      	cmp	r3, #7
 800577c:	d028      	beq.n	80057d0 <UART_SetConfig+0x710>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b08      	cmp	r3, #8
 8005784:	d01f      	beq.n	80057c6 <UART_SetConfig+0x706>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	2b09      	cmp	r3, #9
 800578c:	d016      	beq.n	80057bc <UART_SetConfig+0x6fc>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	2b0a      	cmp	r3, #10
 8005794:	d00d      	beq.n	80057b2 <UART_SetConfig+0x6f2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2b0b      	cmp	r3, #11
 800579c:	d104      	bne.n	80057a8 <UART_SetConfig+0x6e8>
 800579e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057a2:	f04f 0400 	mov.w	r4, #0
 80057a6:	e03a      	b.n	800581e <UART_SetConfig+0x75e>
 80057a8:	f04f 0301 	mov.w	r3, #1
 80057ac:	f04f 0400 	mov.w	r4, #0
 80057b0:	e035      	b.n	800581e <UART_SetConfig+0x75e>
 80057b2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80057b6:	f04f 0400 	mov.w	r4, #0
 80057ba:	e030      	b.n	800581e <UART_SetConfig+0x75e>
 80057bc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80057c0:	f04f 0400 	mov.w	r4, #0
 80057c4:	e02b      	b.n	800581e <UART_SetConfig+0x75e>
 80057c6:	f04f 0320 	mov.w	r3, #32
 80057ca:	f04f 0400 	mov.w	r4, #0
 80057ce:	e026      	b.n	800581e <UART_SetConfig+0x75e>
 80057d0:	f04f 0310 	mov.w	r3, #16
 80057d4:	f04f 0400 	mov.w	r4, #0
 80057d8:	e021      	b.n	800581e <UART_SetConfig+0x75e>
 80057da:	f04f 030c 	mov.w	r3, #12
 80057de:	f04f 0400 	mov.w	r4, #0
 80057e2:	e01c      	b.n	800581e <UART_SetConfig+0x75e>
 80057e4:	f04f 030a 	mov.w	r3, #10
 80057e8:	f04f 0400 	mov.w	r4, #0
 80057ec:	e017      	b.n	800581e <UART_SetConfig+0x75e>
 80057ee:	f04f 0308 	mov.w	r3, #8
 80057f2:	f04f 0400 	mov.w	r4, #0
 80057f6:	e012      	b.n	800581e <UART_SetConfig+0x75e>
 80057f8:	f04f 0306 	mov.w	r3, #6
 80057fc:	f04f 0400 	mov.w	r4, #0
 8005800:	e00d      	b.n	800581e <UART_SetConfig+0x75e>
 8005802:	f04f 0304 	mov.w	r3, #4
 8005806:	f04f 0400 	mov.w	r4, #0
 800580a:	e008      	b.n	800581e <UART_SetConfig+0x75e>
 800580c:	f04f 0302 	mov.w	r3, #2
 8005810:	f04f 0400 	mov.w	r4, #0
 8005814:	e003      	b.n	800581e <UART_SetConfig+0x75e>
 8005816:	f04f 0301 	mov.w	r3, #1
 800581a:	f04f 0400 	mov.w	r4, #0
 800581e:	461a      	mov	r2, r3
 8005820:	4623      	mov	r3, r4
 8005822:	f7fa fcf9 	bl	8000218 <__aeabi_uldivmod>
 8005826:	4603      	mov	r3, r0
 8005828:	460c      	mov	r4, r1
 800582a:	4619      	mov	r1, r3
 800582c:	4622      	mov	r2, r4
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	f04f 0400 	mov.w	r4, #0
 8005836:	0214      	lsls	r4, r2, #8
 8005838:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800583c:	020b      	lsls	r3, r1, #8
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6852      	ldr	r2, [r2, #4]
 8005842:	0852      	lsrs	r2, r2, #1
 8005844:	4611      	mov	r1, r2
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	eb13 0b01 	adds.w	fp, r3, r1
 800584e:	eb44 0c02 	adc.w	ip, r4, r2
 8005852:	4658      	mov	r0, fp
 8005854:	4661      	mov	r1, ip
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f04f 0400 	mov.w	r4, #0
 800585e:	461a      	mov	r2, r3
 8005860:	4623      	mov	r3, r4
 8005862:	f7fa fcd9 	bl	8000218 <__aeabi_uldivmod>
 8005866:	4603      	mov	r3, r0
 8005868:	460c      	mov	r4, r1
 800586a:	61fb      	str	r3, [r7, #28]
            break;
 800586c:	e1c5      	b.n	8005bfa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b00      	cmp	r3, #0
 8005874:	d05b      	beq.n	800592e <UART_SetConfig+0x86e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b01      	cmp	r3, #1
 800587c:	d053      	beq.n	8005926 <UART_SetConfig+0x866>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b02      	cmp	r3, #2
 8005884:	d04b      	beq.n	800591e <UART_SetConfig+0x85e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b03      	cmp	r3, #3
 800588c:	d043      	beq.n	8005916 <UART_SetConfig+0x856>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b04      	cmp	r3, #4
 8005894:	d03b      	beq.n	800590e <UART_SetConfig+0x84e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b05      	cmp	r3, #5
 800589c:	d033      	beq.n	8005906 <UART_SetConfig+0x846>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b06      	cmp	r3, #6
 80058a4:	d02b      	beq.n	80058fe <UART_SetConfig+0x83e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	2b07      	cmp	r3, #7
 80058ac:	d023      	beq.n	80058f6 <UART_SetConfig+0x836>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d01b      	beq.n	80058ee <UART_SetConfig+0x82e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b09      	cmp	r3, #9
 80058bc:	d013      	beq.n	80058e6 <UART_SetConfig+0x826>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b0a      	cmp	r3, #10
 80058c4:	d00b      	beq.n	80058de <UART_SetConfig+0x81e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b0b      	cmp	r3, #11
 80058cc:	d103      	bne.n	80058d6 <UART_SetConfig+0x816>
 80058ce:	4bae      	ldr	r3, [pc, #696]	; (8005b88 <UART_SetConfig+0xac8>)
 80058d0:	f04f 0400 	mov.w	r4, #0
 80058d4:	e02e      	b.n	8005934 <UART_SetConfig+0x874>
 80058d6:	4bad      	ldr	r3, [pc, #692]	; (8005b8c <UART_SetConfig+0xacc>)
 80058d8:	f04f 0400 	mov.w	r4, #0
 80058dc:	e02a      	b.n	8005934 <UART_SetConfig+0x874>
 80058de:	4bac      	ldr	r3, [pc, #688]	; (8005b90 <UART_SetConfig+0xad0>)
 80058e0:	f04f 0400 	mov.w	r4, #0
 80058e4:	e026      	b.n	8005934 <UART_SetConfig+0x874>
 80058e6:	4bab      	ldr	r3, [pc, #684]	; (8005b94 <UART_SetConfig+0xad4>)
 80058e8:	f04f 0400 	mov.w	r4, #0
 80058ec:	e022      	b.n	8005934 <UART_SetConfig+0x874>
 80058ee:	4baa      	ldr	r3, [pc, #680]	; (8005b98 <UART_SetConfig+0xad8>)
 80058f0:	f04f 0400 	mov.w	r4, #0
 80058f4:	e01e      	b.n	8005934 <UART_SetConfig+0x874>
 80058f6:	4ba9      	ldr	r3, [pc, #676]	; (8005b9c <UART_SetConfig+0xadc>)
 80058f8:	f04f 0400 	mov.w	r4, #0
 80058fc:	e01a      	b.n	8005934 <UART_SetConfig+0x874>
 80058fe:	a49e      	add	r4, pc, #632	; (adr r4, 8005b78 <UART_SetConfig+0xab8>)
 8005900:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005904:	e016      	b.n	8005934 <UART_SetConfig+0x874>
 8005906:	4ba6      	ldr	r3, [pc, #664]	; (8005ba0 <UART_SetConfig+0xae0>)
 8005908:	f04f 0400 	mov.w	r4, #0
 800590c:	e012      	b.n	8005934 <UART_SetConfig+0x874>
 800590e:	4ba5      	ldr	r3, [pc, #660]	; (8005ba4 <UART_SetConfig+0xae4>)
 8005910:	f04f 0400 	mov.w	r4, #0
 8005914:	e00e      	b.n	8005934 <UART_SetConfig+0x874>
 8005916:	a49a      	add	r4, pc, #616	; (adr r4, 8005b80 <UART_SetConfig+0xac0>)
 8005918:	e9d4 3400 	ldrd	r3, r4, [r4]
 800591c:	e00a      	b.n	8005934 <UART_SetConfig+0x874>
 800591e:	4ba2      	ldr	r3, [pc, #648]	; (8005ba8 <UART_SetConfig+0xae8>)
 8005920:	f04f 0400 	mov.w	r4, #0
 8005924:	e006      	b.n	8005934 <UART_SetConfig+0x874>
 8005926:	4ba1      	ldr	r3, [pc, #644]	; (8005bac <UART_SetConfig+0xaec>)
 8005928:	f04f 0400 	mov.w	r4, #0
 800592c:	e002      	b.n	8005934 <UART_SetConfig+0x874>
 800592e:	4b97      	ldr	r3, [pc, #604]	; (8005b8c <UART_SetConfig+0xacc>)
 8005930:	f04f 0400 	mov.w	r4, #0
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6852      	ldr	r2, [r2, #4]
 8005938:	0852      	lsrs	r2, r2, #1
 800593a:	4611      	mov	r1, r2
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	eb13 0b01 	adds.w	fp, r3, r1
 8005944:	eb44 0c02 	adc.w	ip, r4, r2
 8005948:	4658      	mov	r0, fp
 800594a:	4661      	mov	r1, ip
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f04f 0400 	mov.w	r4, #0
 8005954:	461a      	mov	r2, r3
 8005956:	4623      	mov	r3, r4
 8005958:	f7fa fc5e 	bl	8000218 <__aeabi_uldivmod>
 800595c:	4603      	mov	r3, r0
 800595e:	460c      	mov	r4, r1
 8005960:	61fb      	str	r3, [r7, #28]
            break;
 8005962:	e14a      	b.n	8005bfa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005964:	f7fd fb4e 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8005968:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4618      	mov	r0, r3
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	2b00      	cmp	r3, #0
 8005978:	d067      	beq.n	8005a4a <UART_SetConfig+0x98a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b01      	cmp	r3, #1
 8005980:	d05e      	beq.n	8005a40 <UART_SetConfig+0x980>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	2b02      	cmp	r3, #2
 8005988:	d055      	beq.n	8005a36 <UART_SetConfig+0x976>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	2b03      	cmp	r3, #3
 8005990:	d04c      	beq.n	8005a2c <UART_SetConfig+0x96c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	2b04      	cmp	r3, #4
 8005998:	d043      	beq.n	8005a22 <UART_SetConfig+0x962>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b05      	cmp	r3, #5
 80059a0:	d03a      	beq.n	8005a18 <UART_SetConfig+0x958>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	2b06      	cmp	r3, #6
 80059a8:	d031      	beq.n	8005a0e <UART_SetConfig+0x94e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2b07      	cmp	r3, #7
 80059b0:	d028      	beq.n	8005a04 <UART_SetConfig+0x944>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d01f      	beq.n	80059fa <UART_SetConfig+0x93a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	2b09      	cmp	r3, #9
 80059c0:	d016      	beq.n	80059f0 <UART_SetConfig+0x930>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	2b0a      	cmp	r3, #10
 80059c8:	d00d      	beq.n	80059e6 <UART_SetConfig+0x926>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b0b      	cmp	r3, #11
 80059d0:	d104      	bne.n	80059dc <UART_SetConfig+0x91c>
 80059d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059d6:	f04f 0400 	mov.w	r4, #0
 80059da:	e03a      	b.n	8005a52 <UART_SetConfig+0x992>
 80059dc:	f04f 0301 	mov.w	r3, #1
 80059e0:	f04f 0400 	mov.w	r4, #0
 80059e4:	e035      	b.n	8005a52 <UART_SetConfig+0x992>
 80059e6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80059ea:	f04f 0400 	mov.w	r4, #0
 80059ee:	e030      	b.n	8005a52 <UART_SetConfig+0x992>
 80059f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80059f4:	f04f 0400 	mov.w	r4, #0
 80059f8:	e02b      	b.n	8005a52 <UART_SetConfig+0x992>
 80059fa:	f04f 0320 	mov.w	r3, #32
 80059fe:	f04f 0400 	mov.w	r4, #0
 8005a02:	e026      	b.n	8005a52 <UART_SetConfig+0x992>
 8005a04:	f04f 0310 	mov.w	r3, #16
 8005a08:	f04f 0400 	mov.w	r4, #0
 8005a0c:	e021      	b.n	8005a52 <UART_SetConfig+0x992>
 8005a0e:	f04f 030c 	mov.w	r3, #12
 8005a12:	f04f 0400 	mov.w	r4, #0
 8005a16:	e01c      	b.n	8005a52 <UART_SetConfig+0x992>
 8005a18:	f04f 030a 	mov.w	r3, #10
 8005a1c:	f04f 0400 	mov.w	r4, #0
 8005a20:	e017      	b.n	8005a52 <UART_SetConfig+0x992>
 8005a22:	f04f 0308 	mov.w	r3, #8
 8005a26:	f04f 0400 	mov.w	r4, #0
 8005a2a:	e012      	b.n	8005a52 <UART_SetConfig+0x992>
 8005a2c:	f04f 0306 	mov.w	r3, #6
 8005a30:	f04f 0400 	mov.w	r4, #0
 8005a34:	e00d      	b.n	8005a52 <UART_SetConfig+0x992>
 8005a36:	f04f 0304 	mov.w	r3, #4
 8005a3a:	f04f 0400 	mov.w	r4, #0
 8005a3e:	e008      	b.n	8005a52 <UART_SetConfig+0x992>
 8005a40:	f04f 0302 	mov.w	r3, #2
 8005a44:	f04f 0400 	mov.w	r4, #0
 8005a48:	e003      	b.n	8005a52 <UART_SetConfig+0x992>
 8005a4a:	f04f 0301 	mov.w	r3, #1
 8005a4e:	f04f 0400 	mov.w	r4, #0
 8005a52:	461a      	mov	r2, r3
 8005a54:	4623      	mov	r3, r4
 8005a56:	f7fa fbdf 	bl	8000218 <__aeabi_uldivmod>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4622      	mov	r2, r4
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	f04f 0400 	mov.w	r4, #0
 8005a6a:	0214      	lsls	r4, r2, #8
 8005a6c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005a70:	020b      	lsls	r3, r1, #8
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6852      	ldr	r2, [r2, #4]
 8005a76:	0852      	lsrs	r2, r2, #1
 8005a78:	4611      	mov	r1, r2
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	eb13 0b01 	adds.w	fp, r3, r1
 8005a82:	eb44 0c02 	adc.w	ip, r4, r2
 8005a86:	4658      	mov	r0, fp
 8005a88:	4661      	mov	r1, ip
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f04f 0400 	mov.w	r4, #0
 8005a92:	461a      	mov	r2, r3
 8005a94:	4623      	mov	r3, r4
 8005a96:	f7fa fbbf 	bl	8000218 <__aeabi_uldivmod>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	61fb      	str	r3, [r7, #28]
            break;
 8005aa0:	e0ab      	b.n	8005bfa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8088 	beq.w	8005bbc <UART_SetConfig+0xafc>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d05b      	beq.n	8005b6c <UART_SetConfig+0xaac>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d052      	beq.n	8005b62 <UART_SetConfig+0xaa2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d04a      	beq.n	8005b5a <UART_SetConfig+0xa9a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d041      	beq.n	8005b50 <UART_SetConfig+0xa90>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	2b05      	cmp	r3, #5
 8005ad2:	d039      	beq.n	8005b48 <UART_SetConfig+0xa88>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	2b06      	cmp	r3, #6
 8005ada:	d031      	beq.n	8005b40 <UART_SetConfig+0xa80>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	2b07      	cmp	r3, #7
 8005ae2:	d028      	beq.n	8005b36 <UART_SetConfig+0xa76>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d01f      	beq.n	8005b2c <UART_SetConfig+0xa6c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	2b09      	cmp	r3, #9
 8005af2:	d016      	beq.n	8005b22 <UART_SetConfig+0xa62>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b0a      	cmp	r3, #10
 8005afa:	d00d      	beq.n	8005b18 <UART_SetConfig+0xa58>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	2b0b      	cmp	r3, #11
 8005b02:	d104      	bne.n	8005b0e <UART_SetConfig+0xa4e>
 8005b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b08:	f04f 0400 	mov.w	r4, #0
 8005b0c:	e05a      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b12:	f04f 0400 	mov.w	r4, #0
 8005b16:	e055      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b1c:	f04f 0400 	mov.w	r4, #0
 8005b20:	e050      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b26:	f04f 0400 	mov.w	r4, #0
 8005b2a:	e04b      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b30:	f04f 0400 	mov.w	r4, #0
 8005b34:	e046      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b3a:	f04f 0400 	mov.w	r4, #0
 8005b3e:	e041      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b40:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <UART_SetConfig+0xaf0>)
 8005b42:	f04f 0400 	mov.w	r4, #0
 8005b46:	e03d      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <UART_SetConfig+0xaf4>)
 8005b4a:	f04f 0400 	mov.w	r4, #0
 8005b4e:	e039      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b54:	f04f 0400 	mov.w	r4, #0
 8005b58:	e034      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b5a:	4b17      	ldr	r3, [pc, #92]	; (8005bb8 <UART_SetConfig+0xaf8>)
 8005b5c:	f04f 0400 	mov.w	r4, #0
 8005b60:	e030      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b66:	f04f 0400 	mov.w	r4, #0
 8005b6a:	e02b      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b70:	f04f 0400 	mov.w	r4, #0
 8005b74:	e026      	b.n	8005bc4 <UART_SetConfig+0xb04>
 8005b76:	bf00      	nop
 8005b78:	14585500 	.word	0x14585500
 8005b7c:	00000000 	.word	0x00000000
 8005b80:	28b0aa00 	.word	0x28b0aa00
 8005b84:	00000000 	.word	0x00000000
 8005b88:	00f42400 	.word	0x00f42400
 8005b8c:	f4240000 	.word	0xf4240000
 8005b90:	01e84800 	.word	0x01e84800
 8005b94:	03d09000 	.word	0x03d09000
 8005b98:	07a12000 	.word	0x07a12000
 8005b9c:	0f424000 	.word	0x0f424000
 8005ba0:	186a0000 	.word	0x186a0000
 8005ba4:	1e848000 	.word	0x1e848000
 8005ba8:	3d090000 	.word	0x3d090000
 8005bac:	7a120000 	.word	0x7a120000
 8005bb0:	000aaa00 	.word	0x000aaa00
 8005bb4:	000ccc00 	.word	0x000ccc00
 8005bb8:	00155500 	.word	0x00155500
 8005bbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005bc0:	f04f 0400 	mov.w	r4, #0
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6852      	ldr	r2, [r2, #4]
 8005bc8:	0852      	lsrs	r2, r2, #1
 8005bca:	4611      	mov	r1, r2
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	eb13 0b01 	adds.w	fp, r3, r1
 8005bd4:	eb44 0c02 	adc.w	ip, r4, r2
 8005bd8:	4658      	mov	r0, fp
 8005bda:	4661      	mov	r1, ip
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f04f 0400 	mov.w	r4, #0
 8005be4:	461a      	mov	r2, r3
 8005be6:	4623      	mov	r3, r4
 8005be8:	f7fa fb16 	bl	8000218 <__aeabi_uldivmod>
 8005bec:	4603      	mov	r3, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	61fb      	str	r3, [r7, #28]
            break;
 8005bf2:	e002      	b.n	8005bfa <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	76fb      	strb	r3, [r7, #27]
            break;
 8005bf8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c00:	d309      	bcc.n	8005c16 <UART_SetConfig+0xb56>
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c08:	d205      	bcs.n	8005c16 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	60da      	str	r2, [r3, #12]
 8005c12:	f000 bc18 	b.w	8006446 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	76fb      	strb	r3, [r7, #27]
 8005c1a:	f000 bc14 	b.w	8006446 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c26:	f040 8204 	bne.w	8006032 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8005c2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	f200 81df 	bhi.w	8005ff2 <UART_SetConfig+0xf32>
 8005c34:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <UART_SetConfig+0xb7c>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c61 	.word	0x08005c61
 8005c40:	08005d19 	.word	0x08005d19
 8005c44:	08005dd1 	.word	0x08005dd1
 8005c48:	08005ff3 	.word	0x08005ff3
 8005c4c:	08005e79 	.word	0x08005e79
 8005c50:	08005ff3 	.word	0x08005ff3
 8005c54:	08005ff3 	.word	0x08005ff3
 8005c58:	08005ff3 	.word	0x08005ff3
 8005c5c:	08005f31 	.word	0x08005f31
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c60:	f7fd fa3e 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8005c64:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d044      	beq.n	8005cf8 <UART_SetConfig+0xc38>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d03e      	beq.n	8005cf4 <UART_SetConfig+0xc34>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d038      	beq.n	8005cf0 <UART_SetConfig+0xc30>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d032      	beq.n	8005cec <UART_SetConfig+0xc2c>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d02c      	beq.n	8005ce8 <UART_SetConfig+0xc28>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	2b05      	cmp	r3, #5
 8005c94:	d026      	beq.n	8005ce4 <UART_SetConfig+0xc24>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b06      	cmp	r3, #6
 8005c9c:	d020      	beq.n	8005ce0 <UART_SetConfig+0xc20>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	2b07      	cmp	r3, #7
 8005ca4:	d01a      	beq.n	8005cdc <UART_SetConfig+0xc1c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d014      	beq.n	8005cd8 <UART_SetConfig+0xc18>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b09      	cmp	r3, #9
 8005cb4:	d00e      	beq.n	8005cd4 <UART_SetConfig+0xc14>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b0a      	cmp	r3, #10
 8005cbc:	d008      	beq.n	8005cd0 <UART_SetConfig+0xc10>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2b0b      	cmp	r3, #11
 8005cc4:	d102      	bne.n	8005ccc <UART_SetConfig+0xc0c>
 8005cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cca:	e016      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e014      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005cd0:	2380      	movs	r3, #128	; 0x80
 8005cd2:	e012      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005cd4:	2340      	movs	r3, #64	; 0x40
 8005cd6:	e010      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005cd8:	2320      	movs	r3, #32
 8005cda:	e00e      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	e00c      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005ce0:	230c      	movs	r3, #12
 8005ce2:	e00a      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005ce4:	230a      	movs	r3, #10
 8005ce6:	e008      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005ce8:	2308      	movs	r3, #8
 8005cea:	e006      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005cec:	2306      	movs	r3, #6
 8005cee:	e004      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	e002      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e000      	b.n	8005cfa <UART_SetConfig+0xc3a>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d00:	005a      	lsls	r2, r3, #1
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	441a      	add	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	61fb      	str	r3, [r7, #28]
        break;
 8005d16:	e16f      	b.n	8005ff8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d18:	f7fd f9f8 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 8005d1c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d044      	beq.n	8005db0 <UART_SetConfig+0xcf0>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d03e      	beq.n	8005dac <UART_SetConfig+0xcec>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d038      	beq.n	8005da8 <UART_SetConfig+0xce8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d032      	beq.n	8005da4 <UART_SetConfig+0xce4>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d02c      	beq.n	8005da0 <UART_SetConfig+0xce0>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b05      	cmp	r3, #5
 8005d4c:	d026      	beq.n	8005d9c <UART_SetConfig+0xcdc>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b06      	cmp	r3, #6
 8005d54:	d020      	beq.n	8005d98 <UART_SetConfig+0xcd8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	2b07      	cmp	r3, #7
 8005d5c:	d01a      	beq.n	8005d94 <UART_SetConfig+0xcd4>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d014      	beq.n	8005d90 <UART_SetConfig+0xcd0>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b09      	cmp	r3, #9
 8005d6c:	d00e      	beq.n	8005d8c <UART_SetConfig+0xccc>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b0a      	cmp	r3, #10
 8005d74:	d008      	beq.n	8005d88 <UART_SetConfig+0xcc8>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	2b0b      	cmp	r3, #11
 8005d7c:	d102      	bne.n	8005d84 <UART_SetConfig+0xcc4>
 8005d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d82:	e016      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e014      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	e012      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	e010      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005d90:	2320      	movs	r3, #32
 8005d92:	e00e      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005d94:	2310      	movs	r3, #16
 8005d96:	e00c      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005d98:	230c      	movs	r3, #12
 8005d9a:	e00a      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005d9c:	230a      	movs	r3, #10
 8005d9e:	e008      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005da0:	2308      	movs	r3, #8
 8005da2:	e006      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005da4:	2306      	movs	r3, #6
 8005da6:	e004      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005da8:	2304      	movs	r3, #4
 8005daa:	e002      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e000      	b.n	8005db2 <UART_SetConfig+0xcf2>
 8005db0:	2301      	movs	r3, #1
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db8:	005a      	lsls	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	441a      	add	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	61fb      	str	r3, [r7, #28]
        break;
 8005dce:	e113      	b.n	8005ff8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d043      	beq.n	8005e60 <UART_SetConfig+0xda0>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d03d      	beq.n	8005e5c <UART_SetConfig+0xd9c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d037      	beq.n	8005e58 <UART_SetConfig+0xd98>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d031      	beq.n	8005e54 <UART_SetConfig+0xd94>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d02b      	beq.n	8005e50 <UART_SetConfig+0xd90>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b05      	cmp	r3, #5
 8005dfe:	d025      	beq.n	8005e4c <UART_SetConfig+0xd8c>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2b06      	cmp	r3, #6
 8005e06:	d01f      	beq.n	8005e48 <UART_SetConfig+0xd88>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b07      	cmp	r3, #7
 8005e0e:	d019      	beq.n	8005e44 <UART_SetConfig+0xd84>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d013      	beq.n	8005e40 <UART_SetConfig+0xd80>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	2b09      	cmp	r3, #9
 8005e1e:	d00d      	beq.n	8005e3c <UART_SetConfig+0xd7c>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b0a      	cmp	r3, #10
 8005e26:	d007      	beq.n	8005e38 <UART_SetConfig+0xd78>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	2b0b      	cmp	r3, #11
 8005e2e:	d101      	bne.n	8005e34 <UART_SetConfig+0xd74>
 8005e30:	4b8d      	ldr	r3, [pc, #564]	; (8006068 <UART_SetConfig+0xfa8>)
 8005e32:	e016      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e34:	4b8d      	ldr	r3, [pc, #564]	; (800606c <UART_SetConfig+0xfac>)
 8005e36:	e014      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e38:	4b8d      	ldr	r3, [pc, #564]	; (8006070 <UART_SetConfig+0xfb0>)
 8005e3a:	e012      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e3c:	4b8d      	ldr	r3, [pc, #564]	; (8006074 <UART_SetConfig+0xfb4>)
 8005e3e:	e010      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e40:	4b8d      	ldr	r3, [pc, #564]	; (8006078 <UART_SetConfig+0xfb8>)
 8005e42:	e00e      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e44:	4b8d      	ldr	r3, [pc, #564]	; (800607c <UART_SetConfig+0xfbc>)
 8005e46:	e00c      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e48:	4b8d      	ldr	r3, [pc, #564]	; (8006080 <UART_SetConfig+0xfc0>)
 8005e4a:	e00a      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e4c:	4b8d      	ldr	r3, [pc, #564]	; (8006084 <UART_SetConfig+0xfc4>)
 8005e4e:	e008      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e50:	4b8d      	ldr	r3, [pc, #564]	; (8006088 <UART_SetConfig+0xfc8>)
 8005e52:	e006      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e54:	4b8d      	ldr	r3, [pc, #564]	; (800608c <UART_SetConfig+0xfcc>)
 8005e56:	e004      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e58:	4b8d      	ldr	r3, [pc, #564]	; (8006090 <UART_SetConfig+0xfd0>)
 8005e5a:	e002      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e5c:	4b8d      	ldr	r3, [pc, #564]	; (8006094 <UART_SetConfig+0xfd4>)
 8005e5e:	e000      	b.n	8005e62 <UART_SetConfig+0xda2>
 8005e60:	4b82      	ldr	r3, [pc, #520]	; (800606c <UART_SetConfig+0xfac>)
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6852      	ldr	r2, [r2, #4]
 8005e66:	0852      	lsrs	r2, r2, #1
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	61fb      	str	r3, [r7, #28]
        break;
 8005e76:	e0bf      	b.n	8005ff8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e78:	f7fd f8c4 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8005e7c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d044      	beq.n	8005f10 <UART_SetConfig+0xe50>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d03e      	beq.n	8005f0c <UART_SetConfig+0xe4c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d038      	beq.n	8005f08 <UART_SetConfig+0xe48>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d032      	beq.n	8005f04 <UART_SetConfig+0xe44>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d02c      	beq.n	8005f00 <UART_SetConfig+0xe40>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	2b05      	cmp	r3, #5
 8005eac:	d026      	beq.n	8005efc <UART_SetConfig+0xe3c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	2b06      	cmp	r3, #6
 8005eb4:	d020      	beq.n	8005ef8 <UART_SetConfig+0xe38>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	2b07      	cmp	r3, #7
 8005ebc:	d01a      	beq.n	8005ef4 <UART_SetConfig+0xe34>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d014      	beq.n	8005ef0 <UART_SetConfig+0xe30>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	2b09      	cmp	r3, #9
 8005ecc:	d00e      	beq.n	8005eec <UART_SetConfig+0xe2c>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b0a      	cmp	r3, #10
 8005ed4:	d008      	beq.n	8005ee8 <UART_SetConfig+0xe28>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	2b0b      	cmp	r3, #11
 8005edc:	d102      	bne.n	8005ee4 <UART_SetConfig+0xe24>
 8005ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ee2:	e016      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e014      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	e012      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005eec:	2340      	movs	r3, #64	; 0x40
 8005eee:	e010      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	e00e      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	e00c      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005ef8:	230c      	movs	r3, #12
 8005efa:	e00a      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005efc:	230a      	movs	r3, #10
 8005efe:	e008      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005f00:	2308      	movs	r3, #8
 8005f02:	e006      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005f04:	2306      	movs	r3, #6
 8005f06:	e004      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	e002      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e000      	b.n	8005f12 <UART_SetConfig+0xe52>
 8005f10:	2301      	movs	r3, #1
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	005a      	lsls	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	441a      	add	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	61fb      	str	r3, [r7, #28]
        break;
 8005f2e:	e063      	b.n	8005ff8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d04f      	beq.n	8005fd8 <UART_SetConfig+0xf18>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d048      	beq.n	8005fd2 <UART_SetConfig+0xf12>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d041      	beq.n	8005fcc <UART_SetConfig+0xf0c>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d03a      	beq.n	8005fc6 <UART_SetConfig+0xf06>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d033      	beq.n	8005fc0 <UART_SetConfig+0xf00>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	2b05      	cmp	r3, #5
 8005f5e:	d02c      	beq.n	8005fba <UART_SetConfig+0xefa>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	2b06      	cmp	r3, #6
 8005f66:	d025      	beq.n	8005fb4 <UART_SetConfig+0xef4>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	2b07      	cmp	r3, #7
 8005f6e:	d01e      	beq.n	8005fae <UART_SetConfig+0xeee>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d017      	beq.n	8005fa8 <UART_SetConfig+0xee8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	2b09      	cmp	r3, #9
 8005f7e:	d010      	beq.n	8005fa2 <UART_SetConfig+0xee2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	2b0a      	cmp	r3, #10
 8005f86:	d009      	beq.n	8005f9c <UART_SetConfig+0xedc>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	2b0b      	cmp	r3, #11
 8005f8e:	d102      	bne.n	8005f96 <UART_SetConfig+0xed6>
 8005f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f94:	e022      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f9a:	e01f      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa0:	e01c      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fa6:	e019      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fac:	e016      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fb2:	e013      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005fb4:	f241 5354 	movw	r3, #5460	; 0x1554
 8005fb8:	e010      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005fba:	f641 1398 	movw	r3, #6552	; 0x1998
 8005fbe:	e00d      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fc4:	e00a      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005fc6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005fca:	e007      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005fd0:	e004      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fd6:	e001      	b.n	8005fdc <UART_SetConfig+0xf1c>
 8005fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6852      	ldr	r2, [r2, #4]
 8005fe0:	0852      	lsrs	r2, r2, #1
 8005fe2:	441a      	add	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	61fb      	str	r3, [r7, #28]
        break;
 8005ff0:	e002      	b.n	8005ff8 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	76fb      	strb	r3, [r7, #27]
        break;
 8005ff6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2b0f      	cmp	r3, #15
 8005ffc:	d916      	bls.n	800602c <UART_SetConfig+0xf6c>
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006004:	d212      	bcs.n	800602c <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	b29b      	uxth	r3, r3
 800600a:	f023 030f 	bic.w	r3, r3, #15
 800600e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	b29b      	uxth	r3, r3
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	b29a      	uxth	r2, r3
 800601c:	89fb      	ldrh	r3, [r7, #14]
 800601e:	4313      	orrs	r3, r2
 8006020:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	89fa      	ldrh	r2, [r7, #14]
 8006028:	60da      	str	r2, [r3, #12]
 800602a:	e20c      	b.n	8006446 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	76fb      	strb	r3, [r7, #27]
 8006030:	e209      	b.n	8006446 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8006032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006036:	2b08      	cmp	r3, #8
 8006038:	f200 81f4 	bhi.w	8006424 <UART_SetConfig+0x1364>
 800603c:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <UART_SetConfig+0xf84>)
 800603e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006042:	bf00      	nop
 8006044:	08006099 	.word	0x08006099
 8006048:	0800614f 	.word	0x0800614f
 800604c:	08006205 	.word	0x08006205
 8006050:	08006425 	.word	0x08006425
 8006054:	080062af 	.word	0x080062af
 8006058:	08006425 	.word	0x08006425
 800605c:	08006425 	.word	0x08006425
 8006060:	08006425 	.word	0x08006425
 8006064:	08006365 	.word	0x08006365
 8006068:	0001e848 	.word	0x0001e848
 800606c:	01e84800 	.word	0x01e84800
 8006070:	0003d090 	.word	0x0003d090
 8006074:	0007a120 	.word	0x0007a120
 8006078:	000f4240 	.word	0x000f4240
 800607c:	001e8480 	.word	0x001e8480
 8006080:	0028b0aa 	.word	0x0028b0aa
 8006084:	0030d400 	.word	0x0030d400
 8006088:	003d0900 	.word	0x003d0900
 800608c:	00516154 	.word	0x00516154
 8006090:	007a1200 	.word	0x007a1200
 8006094:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006098:	f7fd f822 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 800609c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d044      	beq.n	8006130 <UART_SetConfig+0x1070>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d03e      	beq.n	800612c <UART_SetConfig+0x106c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d038      	beq.n	8006128 <UART_SetConfig+0x1068>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d032      	beq.n	8006124 <UART_SetConfig+0x1064>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d02c      	beq.n	8006120 <UART_SetConfig+0x1060>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d026      	beq.n	800611c <UART_SetConfig+0x105c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	2b06      	cmp	r3, #6
 80060d4:	d020      	beq.n	8006118 <UART_SetConfig+0x1058>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	2b07      	cmp	r3, #7
 80060dc:	d01a      	beq.n	8006114 <UART_SetConfig+0x1054>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d014      	beq.n	8006110 <UART_SetConfig+0x1050>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	2b09      	cmp	r3, #9
 80060ec:	d00e      	beq.n	800610c <UART_SetConfig+0x104c>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	2b0a      	cmp	r3, #10
 80060f4:	d008      	beq.n	8006108 <UART_SetConfig+0x1048>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	2b0b      	cmp	r3, #11
 80060fc:	d102      	bne.n	8006104 <UART_SetConfig+0x1044>
 80060fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006102:	e016      	b.n	8006132 <UART_SetConfig+0x1072>
 8006104:	2301      	movs	r3, #1
 8006106:	e014      	b.n	8006132 <UART_SetConfig+0x1072>
 8006108:	2380      	movs	r3, #128	; 0x80
 800610a:	e012      	b.n	8006132 <UART_SetConfig+0x1072>
 800610c:	2340      	movs	r3, #64	; 0x40
 800610e:	e010      	b.n	8006132 <UART_SetConfig+0x1072>
 8006110:	2320      	movs	r3, #32
 8006112:	e00e      	b.n	8006132 <UART_SetConfig+0x1072>
 8006114:	2310      	movs	r3, #16
 8006116:	e00c      	b.n	8006132 <UART_SetConfig+0x1072>
 8006118:	230c      	movs	r3, #12
 800611a:	e00a      	b.n	8006132 <UART_SetConfig+0x1072>
 800611c:	230a      	movs	r3, #10
 800611e:	e008      	b.n	8006132 <UART_SetConfig+0x1072>
 8006120:	2308      	movs	r3, #8
 8006122:	e006      	b.n	8006132 <UART_SetConfig+0x1072>
 8006124:	2306      	movs	r3, #6
 8006126:	e004      	b.n	8006132 <UART_SetConfig+0x1072>
 8006128:	2304      	movs	r3, #4
 800612a:	e002      	b.n	8006132 <UART_SetConfig+0x1072>
 800612c:	2302      	movs	r3, #2
 800612e:	e000      	b.n	8006132 <UART_SetConfig+0x1072>
 8006130:	2301      	movs	r3, #1
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	fbb2 f2f3 	udiv	r2, r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	085b      	lsrs	r3, r3, #1
 800613e:	441a      	add	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	b29b      	uxth	r3, r3
 800614a:	61fb      	str	r3, [r7, #28]
        break;
 800614c:	e16d      	b.n	800642a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800614e:	f7fc ffdd 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 8006152:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	2b00      	cmp	r3, #0
 800615a:	d044      	beq.n	80061e6 <UART_SetConfig+0x1126>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	2b01      	cmp	r3, #1
 8006162:	d03e      	beq.n	80061e2 <UART_SetConfig+0x1122>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	2b02      	cmp	r3, #2
 800616a:	d038      	beq.n	80061de <UART_SetConfig+0x111e>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	2b03      	cmp	r3, #3
 8006172:	d032      	beq.n	80061da <UART_SetConfig+0x111a>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	2b04      	cmp	r3, #4
 800617a:	d02c      	beq.n	80061d6 <UART_SetConfig+0x1116>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	2b05      	cmp	r3, #5
 8006182:	d026      	beq.n	80061d2 <UART_SetConfig+0x1112>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	2b06      	cmp	r3, #6
 800618a:	d020      	beq.n	80061ce <UART_SetConfig+0x110e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	2b07      	cmp	r3, #7
 8006192:	d01a      	beq.n	80061ca <UART_SetConfig+0x110a>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b08      	cmp	r3, #8
 800619a:	d014      	beq.n	80061c6 <UART_SetConfig+0x1106>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	2b09      	cmp	r3, #9
 80061a2:	d00e      	beq.n	80061c2 <UART_SetConfig+0x1102>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	2b0a      	cmp	r3, #10
 80061aa:	d008      	beq.n	80061be <UART_SetConfig+0x10fe>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	2b0b      	cmp	r3, #11
 80061b2:	d102      	bne.n	80061ba <UART_SetConfig+0x10fa>
 80061b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061b8:	e016      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e014      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061be:	2380      	movs	r3, #128	; 0x80
 80061c0:	e012      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061c2:	2340      	movs	r3, #64	; 0x40
 80061c4:	e010      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061c6:	2320      	movs	r3, #32
 80061c8:	e00e      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061ca:	2310      	movs	r3, #16
 80061cc:	e00c      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061ce:	230c      	movs	r3, #12
 80061d0:	e00a      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061d2:	230a      	movs	r3, #10
 80061d4:	e008      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061d6:	2308      	movs	r3, #8
 80061d8:	e006      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061da:	2306      	movs	r3, #6
 80061dc:	e004      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061de:	2304      	movs	r3, #4
 80061e0:	e002      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e000      	b.n	80061e8 <UART_SetConfig+0x1128>
 80061e6:	2301      	movs	r3, #1
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	441a      	add	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fe:	b29b      	uxth	r3, r3
 8006200:	61fb      	str	r3, [r7, #28]
        break;
 8006202:	e112      	b.n	800642a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	2b00      	cmp	r3, #0
 800620a:	d044      	beq.n	8006296 <UART_SetConfig+0x11d6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	2b01      	cmp	r3, #1
 8006212:	d03e      	beq.n	8006292 <UART_SetConfig+0x11d2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2b02      	cmp	r3, #2
 800621a:	d038      	beq.n	800628e <UART_SetConfig+0x11ce>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	2b03      	cmp	r3, #3
 8006222:	d032      	beq.n	800628a <UART_SetConfig+0x11ca>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	2b04      	cmp	r3, #4
 800622a:	d02c      	beq.n	8006286 <UART_SetConfig+0x11c6>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b05      	cmp	r3, #5
 8006232:	d026      	beq.n	8006282 <UART_SetConfig+0x11c2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	2b06      	cmp	r3, #6
 800623a:	d020      	beq.n	800627e <UART_SetConfig+0x11be>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2b07      	cmp	r3, #7
 8006242:	d01a      	beq.n	800627a <UART_SetConfig+0x11ba>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b08      	cmp	r3, #8
 800624a:	d014      	beq.n	8006276 <UART_SetConfig+0x11b6>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	2b09      	cmp	r3, #9
 8006252:	d00e      	beq.n	8006272 <UART_SetConfig+0x11b2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	2b0a      	cmp	r3, #10
 800625a:	d008      	beq.n	800626e <UART_SetConfig+0x11ae>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b0b      	cmp	r3, #11
 8006262:	d102      	bne.n	800626a <UART_SetConfig+0x11aa>
 8006264:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006268:	e016      	b.n	8006298 <UART_SetConfig+0x11d8>
 800626a:	4b81      	ldr	r3, [pc, #516]	; (8006470 <UART_SetConfig+0x13b0>)
 800626c:	e014      	b.n	8006298 <UART_SetConfig+0x11d8>
 800626e:	4b81      	ldr	r3, [pc, #516]	; (8006474 <UART_SetConfig+0x13b4>)
 8006270:	e012      	b.n	8006298 <UART_SetConfig+0x11d8>
 8006272:	4b81      	ldr	r3, [pc, #516]	; (8006478 <UART_SetConfig+0x13b8>)
 8006274:	e010      	b.n	8006298 <UART_SetConfig+0x11d8>
 8006276:	4b81      	ldr	r3, [pc, #516]	; (800647c <UART_SetConfig+0x13bc>)
 8006278:	e00e      	b.n	8006298 <UART_SetConfig+0x11d8>
 800627a:	4b81      	ldr	r3, [pc, #516]	; (8006480 <UART_SetConfig+0x13c0>)
 800627c:	e00c      	b.n	8006298 <UART_SetConfig+0x11d8>
 800627e:	4b81      	ldr	r3, [pc, #516]	; (8006484 <UART_SetConfig+0x13c4>)
 8006280:	e00a      	b.n	8006298 <UART_SetConfig+0x11d8>
 8006282:	4b81      	ldr	r3, [pc, #516]	; (8006488 <UART_SetConfig+0x13c8>)
 8006284:	e008      	b.n	8006298 <UART_SetConfig+0x11d8>
 8006286:	4b81      	ldr	r3, [pc, #516]	; (800648c <UART_SetConfig+0x13cc>)
 8006288:	e006      	b.n	8006298 <UART_SetConfig+0x11d8>
 800628a:	4b81      	ldr	r3, [pc, #516]	; (8006490 <UART_SetConfig+0x13d0>)
 800628c:	e004      	b.n	8006298 <UART_SetConfig+0x11d8>
 800628e:	4b81      	ldr	r3, [pc, #516]	; (8006494 <UART_SetConfig+0x13d4>)
 8006290:	e002      	b.n	8006298 <UART_SetConfig+0x11d8>
 8006292:	4b81      	ldr	r3, [pc, #516]	; (8006498 <UART_SetConfig+0x13d8>)
 8006294:	e000      	b.n	8006298 <UART_SetConfig+0x11d8>
 8006296:	4b76      	ldr	r3, [pc, #472]	; (8006470 <UART_SetConfig+0x13b0>)
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6852      	ldr	r2, [r2, #4]
 800629c:	0852      	lsrs	r2, r2, #1
 800629e:	441a      	add	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	61fb      	str	r3, [r7, #28]
        break;
 80062ac:	e0bd      	b.n	800642a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ae:	f7fc fea9 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 80062b2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d044      	beq.n	8006346 <UART_SetConfig+0x1286>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d03e      	beq.n	8006342 <UART_SetConfig+0x1282>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d038      	beq.n	800633e <UART_SetConfig+0x127e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d032      	beq.n	800633a <UART_SetConfig+0x127a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d02c      	beq.n	8006336 <UART_SetConfig+0x1276>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	2b05      	cmp	r3, #5
 80062e2:	d026      	beq.n	8006332 <UART_SetConfig+0x1272>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b06      	cmp	r3, #6
 80062ea:	d020      	beq.n	800632e <UART_SetConfig+0x126e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	2b07      	cmp	r3, #7
 80062f2:	d01a      	beq.n	800632a <UART_SetConfig+0x126a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d014      	beq.n	8006326 <UART_SetConfig+0x1266>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	2b09      	cmp	r3, #9
 8006302:	d00e      	beq.n	8006322 <UART_SetConfig+0x1262>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	2b0a      	cmp	r3, #10
 800630a:	d008      	beq.n	800631e <UART_SetConfig+0x125e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	2b0b      	cmp	r3, #11
 8006312:	d102      	bne.n	800631a <UART_SetConfig+0x125a>
 8006314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006318:	e016      	b.n	8006348 <UART_SetConfig+0x1288>
 800631a:	2301      	movs	r3, #1
 800631c:	e014      	b.n	8006348 <UART_SetConfig+0x1288>
 800631e:	2380      	movs	r3, #128	; 0x80
 8006320:	e012      	b.n	8006348 <UART_SetConfig+0x1288>
 8006322:	2340      	movs	r3, #64	; 0x40
 8006324:	e010      	b.n	8006348 <UART_SetConfig+0x1288>
 8006326:	2320      	movs	r3, #32
 8006328:	e00e      	b.n	8006348 <UART_SetConfig+0x1288>
 800632a:	2310      	movs	r3, #16
 800632c:	e00c      	b.n	8006348 <UART_SetConfig+0x1288>
 800632e:	230c      	movs	r3, #12
 8006330:	e00a      	b.n	8006348 <UART_SetConfig+0x1288>
 8006332:	230a      	movs	r3, #10
 8006334:	e008      	b.n	8006348 <UART_SetConfig+0x1288>
 8006336:	2308      	movs	r3, #8
 8006338:	e006      	b.n	8006348 <UART_SetConfig+0x1288>
 800633a:	2306      	movs	r3, #6
 800633c:	e004      	b.n	8006348 <UART_SetConfig+0x1288>
 800633e:	2304      	movs	r3, #4
 8006340:	e002      	b.n	8006348 <UART_SetConfig+0x1288>
 8006342:	2302      	movs	r3, #2
 8006344:	e000      	b.n	8006348 <UART_SetConfig+0x1288>
 8006346:	2301      	movs	r3, #1
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	fbb2 f2f3 	udiv	r2, r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	085b      	lsrs	r3, r3, #1
 8006354:	441a      	add	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	fbb2 f3f3 	udiv	r3, r2, r3
 800635e:	b29b      	uxth	r3, r3
 8006360:	61fb      	str	r3, [r7, #28]
        break;
 8006362:	e062      	b.n	800642a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d04e      	beq.n	800640a <UART_SetConfig+0x134a>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b01      	cmp	r3, #1
 8006372:	d047      	beq.n	8006404 <UART_SetConfig+0x1344>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	2b02      	cmp	r3, #2
 800637a:	d040      	beq.n	80063fe <UART_SetConfig+0x133e>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b03      	cmp	r3, #3
 8006382:	d039      	beq.n	80063f8 <UART_SetConfig+0x1338>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	2b04      	cmp	r3, #4
 800638a:	d032      	beq.n	80063f2 <UART_SetConfig+0x1332>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b05      	cmp	r3, #5
 8006392:	d02b      	beq.n	80063ec <UART_SetConfig+0x132c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	2b06      	cmp	r3, #6
 800639a:	d024      	beq.n	80063e6 <UART_SetConfig+0x1326>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b07      	cmp	r3, #7
 80063a2:	d01d      	beq.n	80063e0 <UART_SetConfig+0x1320>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d016      	beq.n	80063da <UART_SetConfig+0x131a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b09      	cmp	r3, #9
 80063b2:	d00f      	beq.n	80063d4 <UART_SetConfig+0x1314>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b0a      	cmp	r3, #10
 80063ba:	d008      	beq.n	80063ce <UART_SetConfig+0x130e>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	2b0b      	cmp	r3, #11
 80063c2:	d101      	bne.n	80063c8 <UART_SetConfig+0x1308>
 80063c4:	2380      	movs	r3, #128	; 0x80
 80063c6:	e022      	b.n	800640e <UART_SetConfig+0x134e>
 80063c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063cc:	e01f      	b.n	800640e <UART_SetConfig+0x134e>
 80063ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063d2:	e01c      	b.n	800640e <UART_SetConfig+0x134e>
 80063d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063d8:	e019      	b.n	800640e <UART_SetConfig+0x134e>
 80063da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063de:	e016      	b.n	800640e <UART_SetConfig+0x134e>
 80063e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063e4:	e013      	b.n	800640e <UART_SetConfig+0x134e>
 80063e6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80063ea:	e010      	b.n	800640e <UART_SetConfig+0x134e>
 80063ec:	f640 43cc 	movw	r3, #3276	; 0xccc
 80063f0:	e00d      	b.n	800640e <UART_SetConfig+0x134e>
 80063f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063f6:	e00a      	b.n	800640e <UART_SetConfig+0x134e>
 80063f8:	f241 5355 	movw	r3, #5461	; 0x1555
 80063fc:	e007      	b.n	800640e <UART_SetConfig+0x134e>
 80063fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006402:	e004      	b.n	800640e <UART_SetConfig+0x134e>
 8006404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006408:	e001      	b.n	800640e <UART_SetConfig+0x134e>
 800640a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6852      	ldr	r2, [r2, #4]
 8006412:	0852      	lsrs	r2, r2, #1
 8006414:	441a      	add	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	b29b      	uxth	r3, r3
 8006420:	61fb      	str	r3, [r7, #28]
        break;
 8006422:	e002      	b.n	800642a <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	76fb      	strb	r3, [r7, #27]
        break;
 8006428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	2b0f      	cmp	r3, #15
 800642e:	d908      	bls.n	8006442 <UART_SetConfig+0x1382>
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006436:	d204      	bcs.n	8006442 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	60da      	str	r2, [r3, #12]
 8006440:	e001      	b.n	8006446 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006462:	7efb      	ldrb	r3, [r7, #27]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3728      	adds	r7, #40	; 0x28
 8006468:	46bd      	mov	sp, r7
 800646a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800646e:	bf00      	nop
 8006470:	00f42400 	.word	0x00f42400
 8006474:	0001e848 	.word	0x0001e848
 8006478:	0003d090 	.word	0x0003d090
 800647c:	0007a120 	.word	0x0007a120
 8006480:	000f4240 	.word	0x000f4240
 8006484:	00145855 	.word	0x00145855
 8006488:	00186a00 	.word	0x00186a00
 800648c:	001e8480 	.word	0x001e8480
 8006490:	0028b0aa 	.word	0x0028b0aa
 8006494:	003d0900 	.word	0x003d0900
 8006498:	007a1200 	.word	0x007a1200

0800649c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800659a:	d10a      	bne.n	80065b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80065f0:	f7fa ff82 	bl	80014f8 <HAL_GetTick>
 80065f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b08      	cmp	r3, #8
 8006602:	d10e      	bne.n	8006622 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f82c 	bl	8006670 <UART_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e022      	b.n	8006668 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b04      	cmp	r3, #4
 800662e:	d10e      	bne.n	800664e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f816 	bl	8006670 <UART_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e00c      	b.n	8006668 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2220      	movs	r2, #32
 8006652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	4613      	mov	r3, r2
 800667e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006680:	e02c      	b.n	80066dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d028      	beq.n	80066dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668a:	f7fa ff35 	bl	80014f8 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	429a      	cmp	r2, r3
 8006698:	d302      	bcc.n	80066a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d11d      	bne.n	80066dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e00f      	b.n	80066fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	69da      	ldr	r2, [r3, #28]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4013      	ands	r3, r2
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	bf0c      	ite	eq
 80066ec:	2301      	moveq	r3, #1
 80066ee:	2300      	movne	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d0c3      	beq.n	8006682 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006712:	2b01      	cmp	r3, #1
 8006714:	d101      	bne.n	800671a <HAL_UARTEx_DisableFifoMode+0x16>
 8006716:	2302      	movs	r3, #2
 8006718:	e027      	b.n	800676a <HAL_UARTEx_DisableFifoMode+0x66>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2224      	movs	r2, #36	; 0x24
 8006726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0201 	bic.w	r2, r2, #1
 8006740:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006748:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800678a:	2302      	movs	r3, #2
 800678c:	e02d      	b.n	80067ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2224      	movs	r2, #36	; 0x24
 800679a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0201 	bic.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f850 	bl	8006870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006806:	2302      	movs	r3, #2
 8006808:	e02d      	b.n	8006866 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2224      	movs	r2, #36	; 0x24
 8006816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0201 	bic.w	r2, r2, #1
 8006830:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f812 	bl	8006870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2220      	movs	r2, #32
 8006858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006870:	b480      	push	{r7}
 8006872:	b089      	sub	sp, #36	; 0x24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006878:	4a2f      	ldr	r2, [pc, #188]	; (8006938 <UARTEx_SetNbDataToProcess+0xc8>)
 800687a:	f107 0314 	add.w	r3, r7, #20
 800687e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006882:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006886:	4a2d      	ldr	r2, [pc, #180]	; (800693c <UARTEx_SetNbDataToProcess+0xcc>)
 8006888:	f107 030c 	add.w	r3, r7, #12
 800688c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006890:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006898:	2b00      	cmp	r3, #0
 800689a:	d108      	bne.n	80068ae <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068ac:	e03d      	b.n	800692a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068ae:	2308      	movs	r3, #8
 80068b0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068b2:	2308      	movs	r3, #8
 80068b4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	0e5b      	lsrs	r3, r3, #25
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	0f5b      	lsrs	r3, r3, #29
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80068d6:	7fbb      	ldrb	r3, [r7, #30]
 80068d8:	7f3a      	ldrb	r2, [r7, #28]
 80068da:	f107 0120 	add.w	r1, r7, #32
 80068de:	440a      	add	r2, r1
 80068e0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80068e4:	fb02 f303 	mul.w	r3, r2, r3
 80068e8:	7f3a      	ldrb	r2, [r7, #28]
 80068ea:	f107 0120 	add.w	r1, r7, #32
 80068ee:	440a      	add	r2, r1
 80068f0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80068f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006900:	7ffb      	ldrb	r3, [r7, #31]
 8006902:	7f7a      	ldrb	r2, [r7, #29]
 8006904:	f107 0120 	add.w	r1, r7, #32
 8006908:	440a      	add	r2, r1
 800690a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800690e:	fb02 f303 	mul.w	r3, r2, r3
 8006912:	7f7a      	ldrb	r2, [r7, #29]
 8006914:	f107 0120 	add.w	r1, r7, #32
 8006918:	440a      	add	r2, r1
 800691a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800691e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006922:	b29a      	uxth	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800692a:	bf00      	nop
 800692c:	3724      	adds	r7, #36	; 0x24
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	0800b910 	.word	0x0800b910
 800693c:	0800b918 	.word	0x0800b918

08006940 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
 
if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8006944:	4907      	ldr	r1, [pc, #28]	; (8006964 <MX_FATFS_Init+0x24>)
 8006946:	4808      	ldr	r0, [pc, #32]	; (8006968 <MX_FATFS_Init+0x28>)
 8006948:	f004 fece 	bl	800b6e8 <FATFS_LinkDriver>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8006952:	f04f 33ff 	mov.w	r3, #4294967295
 8006956:	e003      	b.n	8006960 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006958:	4b04      	ldr	r3, [pc, #16]	; (800696c <MX_FATFS_Init+0x2c>)
 800695a:	2201      	movs	r2, #1
 800695c:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800695e:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8006960:	4618      	mov	r0, r3
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20000838 	.word	0x20000838
 8006968:	20000010 	.word	0x20000010
 800696c:	20000224 	.word	0x20000224

08006970 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006974:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006976:	4618      	mov	r0, r3
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <MY_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t MY_SD_Init(uint32_t Instance)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <MY_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006992:	f06f 0301 	mvn.w	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e010      	b.n	80069bc <MY_SD_Init+0x3c>
  } /* Configure IO functionalities for SD pin */
  else if(SD_IO_Init() != BSP_ERROR_NONE)
 800699a:	f000 fa9b 	bl	8006ed4 <SD_IO_Init>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <MY_SD_Init+0x2c>
  {
    ret = BSP_ERROR_NO_INIT;
 80069a4:	f04f 33ff 	mov.w	r3, #4294967295
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e007      	b.n	80069bc <MY_SD_Init+0x3c>
  }
  else
  {
    /* SD initialized and set to SPI mode properly */
    if(SD_GoIdleState() != BSP_ERROR_NONE)
 80069ac:	f000 ff74 	bl	8007898 <SD_GoIdleState>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <MY_SD_Init+0x3c>
    {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80069b6:	f06f 0305 	mvn.w	r3, #5
 80069ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80069bc:	68fb      	ldr	r3, [r7, #12]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <MY_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t MY_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	61bb      	str	r3, [r7, #24]
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <MY_SD_ReadBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80069e4:	f06f 0301 	mvn.w	r3, #1
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	e0b2      	b.n	8006b52 <MY_SD_ReadBlocks+0x18a>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80069ec:	2300      	movs	r3, #0
 80069ee:	22ff      	movs	r2, #255	; 0xff
 80069f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069f4:	2010      	movs	r0, #16
 80069f6:	f000 fdd1 	bl	800759c <SD_SendCmd>
 80069fa:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 80069fc:	2001      	movs	r0, #1
 80069fe:	f000 fab5 	bl	8006f6c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006a02:	f107 0313 	add.w	r3, r7, #19
 8006a06:	2101      	movs	r1, #1
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 f915 	bl	8007c38 <BSP_SPI2_Send>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <MY_SD_ReadBlocks+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006a14:	f06f 0303 	mvn.w	r3, #3
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	e09a      	b.n	8006b52 <MY_SD_ReadBlocks+0x18a>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00e      	beq.n	8006a42 <MY_SD_ReadBlocks+0x7a>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 8006a24:	2001      	movs	r0, #1
 8006a26:	f000 faa1 	bl	8006f6c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006a2a:	f107 0313 	add.w	r3, r7, #19
 8006a2e:	2101      	movs	r1, #1
 8006a30:	4618      	mov	r0, r3
 8006a32:	f001 f901 	bl	8007c38 <BSP_SPI2_Send>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <MY_SD_ReadBlocks+0x7a>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006a3c:	f06f 0303 	mvn.w	r3, #3
 8006a40:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f040 8084 	bne.w	8006b52 <MY_SD_ReadBlocks+0x18a>
        /* Data transfer */
        do
        {
          /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
          /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U: MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	441a      	add	r2, r3
 8006a50:	4b42      	ldr	r3, [pc, #264]	; (8006b5c <MY_SD_ReadBlocks+0x194>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <MY_SD_ReadBlocks+0x94>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e001      	b.n	8006a60 <MY_SD_ReadBlocks+0x98>
 8006a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a60:	fb02 f103 	mul.w	r1, r2, r3
 8006a64:	2300      	movs	r3, #0
 8006a66:	22ff      	movs	r2, #255	; 0xff
 8006a68:	2011      	movs	r0, #17
 8006a6a:	f000 fd97 	bl	800759c <SD_SendCmd>
 8006a6e:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00f      	beq.n	8006a98 <MY_SD_ReadBlocks+0xd0>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006a78:	2001      	movs	r0, #1
 8006a7a:	f000 fa77 	bl	8006f6c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006a7e:	f107 0313 	add.w	r3, r7, #19
 8006a82:	2101      	movs	r1, #1
 8006a84:	4618      	mov	r0, r3
 8006a86:	f001 f8d7 	bl	8007c38 <BSP_SPI2_Send>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <MY_SD_ReadBlocks+0xd0>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006a90:	f06f 0303 	mvn.w	r3, #3
 8006a94:	61fb      	str	r3, [r7, #28]
              break;
 8006a96:	e05c      	b.n	8006b52 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* Now look for the data token to signify the start of the data */
          if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006a98:	20fe      	movs	r0, #254	; 0xfe
 8006a9a:	f001 f83b 	bl	8007b14 <SD_WaitData>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d12f      	bne.n	8006b04 <MY_SD_ReadBlocks+0x13c>
          {
            /* Read the SD block data : read NumByteToRead data */
            if(BUS_SPIx_Recv((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 f8de 	bl	8007c70 <BSP_SPI2_Recv>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <MY_SD_ReadBlocks+0xfa>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006aba:	f06f 0303 	mvn.w	r3, #3
 8006abe:	61fb      	str	r3, [r7, #28]
              break;
 8006ac0:	e047      	b.n	8006b52 <MY_SD_ReadBlocks+0x18a>
            }

            /* Set next read address*/
            offset += MY_SD_BLOCK_SIZE;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006ac8:	61bb      	str	r3, [r7, #24]
            BlocksNbr--;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	603b      	str	r3, [r7, #0]

            /* get CRC bytes (not really needed by us, but required by SD) */
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006ad0:	f107 0313 	add.w	r3, r7, #19
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 f8ae 	bl	8007c38 <BSP_SPI2_Send>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <MY_SD_ReadBlocks+0x122>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006ae2:	f06f 0303 	mvn.w	r3, #3
 8006ae6:	61fb      	str	r3, [r7, #28]
              break;
 8006ae8:	e033      	b.n	8006b52 <MY_SD_ReadBlocks+0x18a>
            }
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006aea:	f107 0313 	add.w	r3, r7, #19
 8006aee:	2101      	movs	r1, #1
 8006af0:	4618      	mov	r0, r3
 8006af2:	f001 f8a1 	bl	8007c38 <BSP_SPI2_Send>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d013      	beq.n	8006b24 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006afc:	f06f 0303 	mvn.w	r3, #3
 8006b00:	61fb      	str	r3, [r7, #28]
              break;
 8006b02:	e026      	b.n	8006b52 <MY_SD_ReadBlocks+0x18a>
            }
          }
          else
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006b04:	2001      	movs	r0, #1
 8006b06:	f000 fa31 	bl	8006f6c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b0a:	f107 0313 	add.w	r3, r7, #19
 8006b0e:	2101      	movs	r1, #1
 8006b10:	4618      	mov	r0, r3
 8006b12:	f001 f891 	bl	8007c38 <BSP_SPI2_Send>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006b1c:	f06f 0303 	mvn.w	r3, #3
 8006b20:	61fb      	str	r3, [r7, #28]
              break;
 8006b22:	e016      	b.n	8006b52 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* End the command data read cycle */
          SD_IO_CSState(1);
 8006b24:	2001      	movs	r0, #1
 8006b26:	f000 fa21 	bl	8006f6c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b2a:	f107 0313 	add.w	r3, r7, #19
 8006b2e:	2101      	movs	r1, #1
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 f881 	bl	8007c38 <BSP_SPI2_Send>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <MY_SD_ReadBlocks+0x17c>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006b3c:	f06f 0303 	mvn.w	r3, #3
 8006b40:	61fb      	str	r3, [r7, #28]
            break;
 8006b42:	e006      	b.n	8006b52 <MY_SD_ReadBlocks+0x18a>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <MY_SD_ReadBlocks+0x18a>
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f43f af7c 	beq.w	8006a4a <MY_SD_ReadBlocks+0x82>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006b52:	69fb      	ldr	r3, [r7, #28]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3720      	adds	r7, #32
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	20000228 	.word	0x20000228

08006b60 <MY_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t MY_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61bb      	str	r3, [r7, #24]
  uint8_t tmp, data_response;

  if(Instance >= SD_INSTANCES_NBR)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <MY_SD_WriteBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006b7c:	f06f 0301 	mvn.w	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
 8006b82:	e0e8      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006b84:	2300      	movs	r3, #0
 8006b86:	22ff      	movs	r2, #255	; 0xff
 8006b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b8c:	2010      	movs	r0, #16
 8006b8e:	f000 fd05 	bl	800759c <SD_SendCmd>
 8006b92:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 8006b94:	2001      	movs	r0, #1
 8006b96:	f000 f9e9 	bl	8006f6c <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 8006b9a:	23ff      	movs	r3, #255	; 0xff
 8006b9c:	74fb      	strb	r3, [r7, #19]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b9e:	f107 0313 	add.w	r3, r7, #19
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f001 f847 	bl	8007c38 <BSP_SPI2_Send>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <MY_SD_WriteBlocks+0x58>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006bb0:	f06f 0303 	mvn.w	r3, #3
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	e0ce      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00e      	beq.n	8006bde <MY_SD_WriteBlocks+0x7e>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	f000 f9d3 	bl	8006f6c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006bc6:	f107 0313 	add.w	r3, r7, #19
 8006bca:	2101      	movs	r1, #1
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 f833 	bl	8007c38 <BSP_SPI2_Send>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <MY_SD_WriteBlocks+0x7e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006bd8:	f06f 0303 	mvn.w	r3, #3
 8006bdc:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f040 80b8 	bne.w	8006d56 <MY_SD_WriteBlocks+0x1f6>
        /* Data transfer */
        do
        {
          /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
          Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U : MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	441a      	add	r2, r3
 8006bec:	4b5c      	ldr	r3, [pc, #368]	; (8006d60 <MY_SD_WriteBlocks+0x200>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <MY_SD_WriteBlocks+0x98>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e001      	b.n	8006bfc <MY_SD_WriteBlocks+0x9c>
 8006bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bfc:	fb02 f103 	mul.w	r1, r2, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	22ff      	movs	r2, #255	; 0xff
 8006c04:	2018      	movs	r0, #24
 8006c06:	f000 fcc9 	bl	800759c <SD_SendCmd>
 8006c0a:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00f      	beq.n	8006c34 <MY_SD_WriteBlocks+0xd4>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006c14:	2001      	movs	r0, #1
 8006c16:	f000 f9a9 	bl	8006f6c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006c1a:	f107 0313 	add.w	r3, r7, #19
 8006c1e:	2101      	movs	r1, #1
 8006c20:	4618      	mov	r0, r3
 8006c22:	f001 f809 	bl	8007c38 <BSP_SPI2_Send>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <MY_SD_WriteBlocks+0xd4>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006c2c:	f06f 0303 	mvn.w	r3, #3
 8006c30:	61fb      	str	r3, [r7, #28]
              break;
 8006c32:	e090      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          /* Send dummy byte for NWR timing : one byte between CMDWRITE and TOKEN */
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006c34:	f107 0313 	add.w	r3, r7, #19
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fffc 	bl	8007c38 <BSP_SPI2_Send>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <MY_SD_WriteBlocks+0xee>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006c46:	f06f 0303 	mvn.w	r3, #3
 8006c4a:	61fb      	str	r3, [r7, #28]
            break;
 8006c4c:	e083      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006c4e:	f107 0313 	add.w	r3, r7, #19
 8006c52:	2101      	movs	r1, #1
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 ffef 	bl	8007c38 <BSP_SPI2_Send>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <MY_SD_WriteBlocks+0x108>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006c60:	f06f 0303 	mvn.w	r3, #3
 8006c64:	61fb      	str	r3, [r7, #28]
            break;
 8006c66:	e076      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Send the data token to signify the start of the data */
          tmp = SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE;
 8006c68:	23fe      	movs	r3, #254	; 0xfe
 8006c6a:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006c6c:	f107 0313 	add.w	r3, r7, #19
 8006c70:	2101      	movs	r1, #1
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 ffe0 	bl	8007c38 <BSP_SPI2_Send>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <MY_SD_WriteBlocks+0x126>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006c7e:	f06f 0303 	mvn.w	r3, #3
 8006c82:	61fb      	str	r3, [r7, #28]
            break;
 8006c84:	e067      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Write the block data to SD */
          if(BUS_SPIx_Send((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 ffd1 	bl	8007c38 <BSP_SPI2_Send>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <MY_SD_WriteBlocks+0x144>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006c9c:	f06f 0303 	mvn.w	r3, #3
 8006ca0:	61fb      	str	r3, [r7, #28]
            break;
 8006ca2:	e058      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Set next write address */
          offset += MY_SD_BLOCK_SIZE;
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006caa:	61bb      	str	r3, [r7, #24]
          BlocksNbr--;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	603b      	str	r3, [r7, #0]

          /* get CRC bytes (not really needed by us, but required by SD) */
          tmp = SD_DUMMY_BYTE;
 8006cb2:	23ff      	movs	r3, #255	; 0xff
 8006cb4:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006cb6:	f107 0313 	add.w	r3, r7, #19
 8006cba:	2101      	movs	r1, #1
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 ffbb 	bl	8007c38 <BSP_SPI2_Send>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <MY_SD_WriteBlocks+0x170>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006cc8:	f06f 0303 	mvn.w	r3, #3
 8006ccc:	61fb      	str	r3, [r7, #28]
            break;
 8006cce:	e042      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006cd0:	f107 0313 	add.w	r3, r7, #19
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 ffae 	bl	8007c38 <BSP_SPI2_Send>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <MY_SD_WriteBlocks+0x18a>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006ce2:	f06f 0303 	mvn.w	r3, #3
 8006ce6:	61fb      	str	r3, [r7, #28]
            break;
 8006ce8:	e035      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Read data response */
          if(SD_GetDataResponse(&data_response) != BSP_ERROR_NONE)
 8006cea:	f107 0312 	add.w	r3, r7, #18
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fd6c 	bl	80077cc <SD_GetDataResponse>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <MY_SD_WriteBlocks+0x1a2>
          {
            ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006cfa:	f06f 0305 	mvn.w	r3, #5
 8006cfe:	61fb      	str	r3, [r7, #28]
            break;
 8006d00:	e029      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
          }

          if (data_response != (uint8_t)SD_DATA_OK)
 8006d02:	7cbb      	ldrb	r3, [r7, #18]
 8006d04:	2b05      	cmp	r3, #5
 8006d06:	d00f      	beq.n	8006d28 <MY_SD_WriteBlocks+0x1c8>
          {
            /* Set response value to failure */
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006d08:	2001      	movs	r0, #1
 8006d0a:	f000 f92f 	bl	8006f6c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006d0e:	f107 0313 	add.w	r3, r7, #19
 8006d12:	2101      	movs	r1, #1
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 ff8f 	bl	8007c38 <BSP_SPI2_Send>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <MY_SD_WriteBlocks+0x1c8>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006d20:	f06f 0303 	mvn.w	r3, #3
 8006d24:	61fb      	str	r3, [r7, #28]
              break;
 8006d26:	e016      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          SD_IO_CSState(1);
 8006d28:	2001      	movs	r0, #1
 8006d2a:	f000 f91f 	bl	8006f6c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006d2e:	f107 0313 	add.w	r3, r7, #19
 8006d32:	2101      	movs	r1, #1
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 ff7f 	bl	8007c38 <BSP_SPI2_Send>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <MY_SD_WriteBlocks+0x1e8>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006d40:	f06f 0303 	mvn.w	r3, #3
 8006d44:	61fb      	str	r3, [r7, #28]
            break;
 8006d46:	e006      	b.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <MY_SD_WriteBlocks+0x1f6>
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f43f af48 	beq.w	8006be6 <MY_SD_WriteBlocks+0x86>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006d56:	69fb      	ldr	r3, [r7, #28]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3720      	adds	r7, #32
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20000228 	.word	0x20000228

08006d64 <MY_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t MY_SD_GetCardState(uint32_t Instance)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint32_t response;
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <MY_SD_GetCardState+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006d72:	f06f 0301 	mvn.w	r3, #1
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	e026      	b.n	8006dc8 <MY_SD_GetCardState+0x64>
  }
  else
  {
    /* Send CMD13 (SD_SEND_STATUS) to get SD status */
    response = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, (uint8_t)SD_ANSWER_R2_EXPECTED);
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	22ff      	movs	r2, #255	; 0xff
 8006d7e:	2100      	movs	r1, #0
 8006d80:	200d      	movs	r0, #13
 8006d82:	f000 fc0b 	bl	800759c <SD_SendCmd>
 8006d86:	6138      	str	r0, [r7, #16]
    SD_IO_CSState(1);
 8006d88:	2001      	movs	r0, #1
 8006d8a:	f000 f8ef 	bl	8006f6c <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 8006d8e:	23ff      	movs	r3, #255	; 0xff
 8006d90:	73fb      	strb	r3, [r7, #15]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006d92:	f107 030f 	add.w	r3, r7, #15
 8006d96:	2101      	movs	r1, #1
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 ff4d 	bl	8007c38 <BSP_SPI2_Send>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <MY_SD_GetCardState+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006da4:	f06f 0303 	mvn.w	r3, #3
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	e00d      	b.n	8006dc8 <MY_SD_GetCardState+0x64>
    }/* Find SD status according to card state */
    else if(((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR) && ((uint8_t)((response & 0xFF00UL) >> 8) == (uint8_t)SD_R2_NO_ERROR))
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d107      	bne.n	8006dc4 <MY_SD_GetCardState+0x60>
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d102      	bne.n	8006dc4 <MY_SD_GetCardState+0x60>
    {
      ret = (int32_t)SD_TRANSFER_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e001      	b.n	8006dc8 <MY_SD_GetCardState+0x64>
    }
    else
    {
      //ret = (int32_t)SD_TRANSFER_BUSY;
      ret = (int32_t)SD_TRANSFER_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return Status */
  return ret;
 8006dc8:	697b      	ldr	r3, [r7, #20]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <MY_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
int32_t MY_SD_GetCardInfo(uint32_t Instance, MY_SD_CardInfo_t *CardInfo)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <MY_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006de8:	f06f 0301 	mvn.w	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	e069      	b.n	8006ec4 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCSDRegister(&(CardInfo->Csd)) != BSP_ERROR_NONE)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 f8d2 	bl	8006f9c <SD_GetCSDRegister>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <MY_SD_GetCardInfo+0x32>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006dfe:	f06f 0305 	mvn.w	r3, #5
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e05e      	b.n	8006ec4 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCIDRegister(&(CardInfo->Cid)) != BSP_ERROR_NONE)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	3314      	adds	r3, #20
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 faf4 	bl	80073f8 <SD_GetCIDRegister>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <MY_SD_GetCardInfo+0x4a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006e16:	f06f 0305 	mvn.w	r3, #5
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	e052      	b.n	8006ec4 <MY_SD_GetCardInfo+0xf0>
  }
  else if(CardType == MY_CARD_SDHC)
 8006e1e:	4b2c      	ldr	r3, [pc, #176]	; (8006ed0 <MY_SD_GetCardInfo+0xfc>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d11c      	bne.n	8006e60 <MY_SD_GetCardInfo+0x8c>
  {
    CardInfo->LogBlockSize = 512U;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e2c:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = 512U;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity = (CardInfo->Csd.version.v2.DeviceSize + 1U) * 1024U * CardInfo->LogBlockSize;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f3c3 1395 	ubfx	r3, r3, #6, #22
 8006e3e:	3301      	adds	r3, #1
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e44:	fb02 f303 	mul.w	r3, r2, r3
 8006e48:	029a      	lsls	r2, r3, #10
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e56:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	645a      	str	r2, [r3, #68]	; 0x44
 8006e5e:	e031      	b.n	8006ec4 <MY_SD_GetCardInfo+0xf0>
  }
  else
  {
    CardInfo->CardCapacity = ((uint32_t)CardInfo->Csd.version.v1.DeviceSize + 1U) ;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	891b      	ldrh	r3, [r3, #8]
 8006e64:	f3c3 038b 	ubfx	r3, r3, #2, #12
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->CardCapacity *= (1UL << (CardInfo->Csd.version.v1.DeviceSizeMul + 2U));
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	7adb      	ldrb	r3, [r3, #11]
 8006e78:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	3302      	adds	r3, #2
 8006e80:	409a      	lsls	r2, r3
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockSize = 512U;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e8c:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = (1UL << (uint32_t)CardInfo->Csd.RdBlockLen);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	795b      	ldrb	r3, [r3, #5]
 8006e92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	fa03 f202 	lsl.w	r2, r3, r2
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity *= CardInfo->CardBlockSize;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006eac:	fb02 f203 	mul.w	r2, r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return ret;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000228 	.word	0x20000228

08006ed4 <SD_IO_Init>:
  * @brief  Initializes the SD Card and put it into StandBy State (Ready for
  *         data transfer).
  * @retval BSP status
  */
static int32_t SD_IO_Init(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
  uint8_t counter = 0, tmp;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* SD_CS_GPIO Periph clock enable */
  MY_SD_CS_GPIO_CLK_ENABLE();
 8006ee2:	4b20      	ldr	r3, [pc, #128]	; (8006f64 <SD_IO_Init+0x90>)
 8006ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee6:	4a1f      	ldr	r2, [pc, #124]	; (8006f64 <SD_IO_Init+0x90>)
 8006ee8:	f043 0302 	orr.w	r3, r3, #2
 8006eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006eee:	4b1d      	ldr	r3, [pc, #116]	; (8006f64 <SD_IO_Init+0x90>)
 8006ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  GPIO_InitStruct.Pin   = MY_SD_CS_PIN;
 8006efa:	2304      	movs	r3, #4
 8006efc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8006efe:	2301      	movs	r3, #1
 8006f00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8006f02:	2301      	movs	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f06:	2302      	movs	r3, #2
 8006f08:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MY_SD_CS_GPIO_PORT, &GPIO_InitStruct);
 8006f0a:	1d3b      	adds	r3, r7, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4816      	ldr	r0, [pc, #88]	; (8006f68 <SD_IO_Init+0x94>)
 8006f10:	f7fb f980 	bl	8002214 <HAL_GPIO_Init>

  /*------------Put SD in SPI mode--------------*/
  /* SD SPI Config */
  if(BUS_SPIx_Init() != BSP_ERROR_NONE)
 8006f14:	f000 fe40 	bl	8007b98 <BSP_SPI2_Init>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <SD_IO_Init+0x52>
  {
    ret = BSP_ERROR_NO_INIT;
 8006f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	e019      	b.n	8006f5a <SD_IO_Init+0x86>
  }
  else
  {
    /* SD chip select high */
    MY_SD_CS_HIGH();
 8006f26:	2201      	movs	r2, #1
 8006f28:	2104      	movs	r1, #4
 8006f2a:	480f      	ldr	r0, [pc, #60]	; (8006f68 <SD_IO_Init+0x94>)
 8006f2c:	f7fb fb0c 	bl	8002548 <HAL_GPIO_WritePin>

    /* Send dummy byte 0xFF, 10 times with CS high */
    /* Rise CS and MOSI for 80 clocks cycles */
    tmp = SD_DUMMY_BYTE;
 8006f30:	23ff      	movs	r3, #255	; 0xff
 8006f32:	76bb      	strb	r3, [r7, #26]

    do
    {
      /* Send dummy byte 0xFF */
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006f34:	f107 031a 	add.w	r3, r7, #26
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fe7c 	bl	8007c38 <BSP_SPI2_Send>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <SD_IO_Init+0x7a>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006f46:	f06f 0303 	mvn.w	r3, #3
 8006f4a:	61fb      	str	r3, [r7, #28]
        break;
 8006f4c:	e005      	b.n	8006f5a <SD_IO_Init+0x86>
      }
      counter++;
 8006f4e:	7efb      	ldrb	r3, [r7, #27]
 8006f50:	3301      	adds	r3, #1
 8006f52:	76fb      	strb	r3, [r7, #27]
    }while(counter <= 9U);
 8006f54:	7efb      	ldrb	r3, [r7, #27]
 8006f56:	2b09      	cmp	r3, #9
 8006f58:	d9ec      	bls.n	8006f34 <SD_IO_Init+0x60>
  }

  return ret;
 8006f5a:	69fb      	ldr	r3, [r7, #28]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3720      	adds	r7, #32
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	40021000 	.word	0x40021000
 8006f68:	48000400 	.word	0x48000400

08006f6c <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  Value pin's value.
  * @retval None
  */
static void SD_IO_CSState(uint32_t Value)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  if(Value == 1U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d105      	bne.n	8006f86 <SD_IO_CSState+0x1a>
  {
    MY_SD_CS_HIGH();
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	2104      	movs	r1, #4
 8006f7e:	4806      	ldr	r0, [pc, #24]	; (8006f98 <SD_IO_CSState+0x2c>)
 8006f80:	f7fb fae2 	bl	8002548 <HAL_GPIO_WritePin>
  }
  else
  {
    MY_SD_CS_LOW();
  }
}
 8006f84:	e004      	b.n	8006f90 <SD_IO_CSState+0x24>
    MY_SD_CS_LOW();
 8006f86:	2200      	movs	r2, #0
 8006f88:	2104      	movs	r1, #4
 8006f8a:	4803      	ldr	r0, [pc, #12]	; (8006f98 <SD_IO_CSState+0x2c>)
 8006f8c:	f7fb fadc 	bl	8002548 <HAL_GPIO_WritePin>
}
 8006f90:	bf00      	nop
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	48000400 	.word	0x48000400

08006f9c <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd pointer on an SCD register structure
  * @retval SD status
  */
static int32_t SD_GetCSDRegister(SD_CardSpecificData_t* Csd)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b096      	sub	sp, #88	; 0x58
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t CSD_Tab[16];
  uint32_t response;
  uint8_t tmp;

  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006fa8:	2300      	movs	r3, #0
 8006faa:	22ff      	movs	r2, #255	; 0xff
 8006fac:	2100      	movs	r1, #0
 8006fae:	2009      	movs	r0, #9
 8006fb0:	f000 faf4 	bl	800759c <SD_SendCmd>
 8006fb4:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8006fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f040 8202 	bne.w	80073c4 <SD_GetCSDRegister+0x428>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006fc0:	20fe      	movs	r0, #254	; 0xfe
 8006fc2:	f000 fda7 	bl	8007b14 <SD_WaitData>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f040 81fe 	bne.w	80073ca <SD_GetCSDRegister+0x42e>
    {
      tmp = SD_DUMMY_BYTE;
 8006fce:	23ff      	movs	r3, #255	; 0xff
 8006fd0:	72fb      	strb	r3, [r7, #11]
      for (counter = 0U; counter < 16U; counter++)
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	653b      	str	r3, [r7, #80]	; 0x50
 8006fd6:	e014      	b.n	8007002 <SD_GetCSDRegister+0x66>
      {
        /* Store CSD register value on CSD_Tab */
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CSD_Tab[counter], 1U) != BSP_ERROR_NONE)
 8006fd8:	f107 020c 	add.w	r2, r7, #12
 8006fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	18d1      	adds	r1, r2, r3
 8006fe2:	f107 030b 	add.w	r3, r7, #11
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fe5d 	bl	8007ca8 <BSP_SPI2_SendRecv>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <SD_GetCSDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006ff4:	f06f 0303 	mvn.w	r3, #3
 8006ff8:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8006ffa:	e005      	b.n	8007008 <SD_GetCSDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8006ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffe:	3301      	adds	r3, #1
 8007000:	653b      	str	r3, [r7, #80]	; 0x50
 8007002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007004:	2b0f      	cmp	r3, #15
 8007006:	d9e7      	bls.n	8006fd8 <SD_GetCSDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 8007008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 81dd 	bne.w	80073ca <SD_GetCSDRegister+0x42e>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007010:	f107 030b 	add.w	r3, r7, #11
 8007014:	2101      	movs	r1, #1
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fe0e 	bl	8007c38 <BSP_SPI2_Send>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <SD_GetCSDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007022:	f06f 0303 	mvn.w	r3, #3
 8007026:	657b      	str	r3, [r7, #84]	; 0x54
 8007028:	e1cf      	b.n	80073ca <SD_GetCSDRegister+0x42e>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800702a:	f107 030b 	add.w	r3, r7, #11
 800702e:	2101      	movs	r1, #1
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fe01 	bl	8007c38 <BSP_SPI2_Send>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <SD_GetCSDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800703c:	f06f 0303 	mvn.w	r3, #3
 8007040:	657b      	str	r3, [r7, #84]	; 0x54
 8007042:	e1c2      	b.n	80073ca <SD_GetCSDRegister+0x42e>
          /*************************************************************************
          CSD header decoding
          *************************************************************************/

          /* Byte 0 */
          Csd->CSDStruct = (CSD_Tab[0] & 0xC0U) >> 6U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	099b      	lsrs	r3, r3, #6
 8007048:	f003 0303 	and.w	r3, r3, #3
 800704c:	b2d9      	uxtb	r1, r3
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	7813      	ldrb	r3, [r2, #0]
 8007052:	f361 0301 	bfi	r3, r1, #0, #2
 8007056:	7013      	strb	r3, [r2, #0]
          Csd->Reserved1 =  CSD_Tab[0] & 0x3FU;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800705e:	b2d9      	uxtb	r1, r3
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	7813      	ldrb	r3, [r2, #0]
 8007064:	f361 0387 	bfi	r3, r1, #2, #6
 8007068:	7013      	strb	r3, [r2, #0]

          /* Byte 1 */
          Csd->TAAC = CSD_Tab[1];
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	b2da      	uxtb	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	705a      	strb	r2, [r3, #1]

          /* Byte 2 */
          Csd->NSAC = CSD_Tab[2];
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	b2da      	uxtb	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	709a      	strb	r2, [r3, #2]

          /* Byte 3 */
          Csd->MaxBusClkFrec = CSD_Tab[3];
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	70da      	strb	r2, [r3, #3]

          /* Byte 4/5 */
          Csd->CardComdClasses = (uint16_t)(((uint16_t)CSD_Tab[4] << 4U) | ((uint16_t)(CSD_Tab[5] & 0xF0U) >> 4U));
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	b29b      	uxth	r3, r3
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	b21a      	sxth	r2, r3
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	b29b      	uxth	r3, r3
 800708e:	111b      	asrs	r3, r3, #4
 8007090:	b21b      	sxth	r3, r3
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	b21b      	sxth	r3, r3
 8007098:	4313      	orrs	r3, r2
 800709a:	b21b      	sxth	r3, r3
 800709c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070a0:	b299      	uxth	r1, r3
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	8893      	ldrh	r3, [r2, #4]
 80070a6:	f361 030b 	bfi	r3, r1, #0, #12
 80070aa:	8093      	strh	r3, [r2, #4]
          Csd->RdBlockLen = CSD_Tab[5] & 0x0FU;
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	b2d9      	uxtb	r1, r3
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	7953      	ldrb	r3, [r2, #5]
 80070b8:	f361 1307 	bfi	r3, r1, #4, #4
 80070bc:	7153      	strb	r3, [r2, #5]

          /* Byte 6 */
          Csd->PartBlockRead   = (CSD_Tab[6] & 0x80U) >> 7U;
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	09db      	lsrs	r3, r3, #7
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	b2d9      	uxtb	r1, r3
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	7993      	ldrb	r3, [r2, #6]
 80070cc:	f361 0300 	bfi	r3, r1, #0, #1
 80070d0:	7193      	strb	r3, [r2, #6]
          Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40U) >> 6U;
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	099b      	lsrs	r3, r3, #6
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	b2d9      	uxtb	r1, r3
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	7993      	ldrb	r3, [r2, #6]
 80070e0:	f361 0341 	bfi	r3, r1, #1, #1
 80070e4:	7193      	strb	r3, [r2, #6]
          Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20U) >> 5U;
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	095b      	lsrs	r3, r3, #5
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	b2d9      	uxtb	r1, r3
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	7993      	ldrb	r3, [r2, #6]
 80070f4:	f361 0382 	bfi	r3, r1, #2, #1
 80070f8:	7193      	strb	r3, [r2, #6]
          Csd->DSRImpl         = (CSD_Tab[6] & 0x10U) >> 4U;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	091b      	lsrs	r3, r3, #4
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	b2d9      	uxtb	r1, r3
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	7993      	ldrb	r3, [r2, #6]
 8007108:	f361 03c3 	bfi	r3, r1, #3, #1
 800710c:	7193      	strb	r3, [r2, #6]

          /*************************************************************************
          CSD v1/v2 decoding
          *************************************************************************/

          if(CardType == MY_CARD_SDSC)
 800710e:	4bac      	ldr	r3, [pc, #688]	; (80073c0 <SD_GetCSDRegister+0x424>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d165      	bne.n	80071e2 <SD_GetCSDRegister+0x246>
          {
            Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0CU) >> 2U);
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	089b      	lsrs	r3, r3, #2
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	b2d9      	uxtb	r1, r3
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	7a13      	ldrb	r3, [r2, #8]
 8007124:	f361 0301 	bfi	r3, r1, #0, #2
 8007128:	7213      	strb	r3, [r2, #8]

            Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03U) << 10U) | (CSD_Tab[7] << 2U) | ((CSD_Tab[8] & 0xC0U) >> 6U);
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	b29b      	uxth	r3, r3
 800712e:	029b      	lsls	r3, r3, #10
 8007130:	b29b      	uxth	r3, r3
 8007132:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007136:	b29a      	uxth	r2, r3
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	b29b      	uxth	r3, r3
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	b29b      	uxth	r3, r3
 8007140:	4313      	orrs	r3, r2
 8007142:	b29a      	uxth	r2, r3
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	099b      	lsrs	r3, r3, #6
 8007148:	b29b      	uxth	r3, r3
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	b29b      	uxth	r3, r3
 8007150:	4313      	orrs	r3, r2
 8007152:	b29b      	uxth	r3, r3
 8007154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007158:	b299      	uxth	r1, r3
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	8913      	ldrh	r3, [r2, #8]
 800715e:	f361 038d 	bfi	r3, r1, #2, #12
 8007162:	8113      	strh	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38U) >> 3U;
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	08db      	lsrs	r3, r3, #3
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	b2d9      	uxtb	r1, r3
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6893      	ldr	r3, [r2, #8]
 8007172:	f361 3390 	bfi	r3, r1, #14, #3
 8007176:	6093      	str	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07U);
 8007178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	b2d9      	uxtb	r1, r3
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	7a93      	ldrb	r3, [r2, #10]
 8007184:	f361 0343 	bfi	r3, r1, #1, #3
 8007188:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0U) >> 5U;
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	b2d9      	uxtb	r1, r3
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	7a93      	ldrb	r3, [r2, #10]
 8007198:	f361 1306 	bfi	r3, r1, #4, #3
 800719c:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1CU) >> 2U;
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	089b      	lsrs	r3, r3, #2
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	b2d9      	uxtb	r1, r3
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	8953      	ldrh	r3, [r2, #10]
 80071ac:	f361 13c9 	bfi	r3, r1, #7, #3
 80071b0:	8153      	strh	r3, [r2, #10]
            Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03U) << 1U) | ((CSD_Tab[10] & 0x80U) >> 7U);
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	f003 0306 	and.w	r3, r3, #6
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c2:	09db      	lsrs	r3, r3, #7
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	4313      	orrs	r3, r2
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	b2d9      	uxtb	r1, r3
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	7ad3      	ldrb	r3, [r2, #11]
 80071da:	f361 0384 	bfi	r3, r1, #2, #3
 80071de:	72d3      	strb	r3, [r2, #11]
 80071e0:	e02b      	b.n	800723a <SD_GetCSDRegister+0x29e>
          }
          else
          {
            Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0FU) << 2U) | ((CSD_Tab[7] & 0xC0U) >> 6U);
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	099b      	lsrs	r3, r3, #6
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	f003 0303 	and.w	r3, r3, #3
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007204:	b2d9      	uxtb	r1, r3
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	7a13      	ldrb	r3, [r2, #8]
 800720a:	f361 0305 	bfi	r3, r1, #0, #6
 800720e:	7213      	strb	r3, [r2, #8]
            Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3FU) << 16U) | (CSD_Tab[8] << 8U) | CSD_Tab[9];
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721a:	021b      	lsls	r3, r3, #8
 800721c:	431a      	orrs	r2, r3
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	4313      	orrs	r3, r2
 8007222:	f3c3 0115 	ubfx	r1, r3, #0, #22
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6893      	ldr	r3, [r2, #8]
 800722a:	f361 139b 	bfi	r3, r1, #6, #22
 800722e:	6093      	str	r3, [r2, #8]
            Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80U) >> 8U);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7ad3      	ldrb	r3, [r2, #11]
 8007234:	f36f 1304 	bfc	r3, #4, #1
 8007238:	72d3      	strb	r3, [r2, #11]
          }

          Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40U) >> 6U;
 800723a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723c:	099b      	lsrs	r3, r3, #6
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	b2d9      	uxtb	r1, r3
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	7b13      	ldrb	r3, [r2, #12]
 8007248:	f361 0300 	bfi	r3, r1, #0, #1
 800724c:	7313      	strb	r3, [r2, #12]
          Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3FU) << 1U) | ((CSD_Tab[11] & 0x80U) >> 7U);
 800724e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007250:	b2db      	uxtb	r3, r3
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	b2db      	uxtb	r3, r3
 8007256:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	09db      	lsrs	r3, r3, #7
 8007260:	b2db      	uxtb	r3, r3
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	b2db      	uxtb	r3, r3
 8007268:	4313      	orrs	r3, r2
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007270:	b2d9      	uxtb	r1, r3
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	7b13      	ldrb	r3, [r2, #12]
 8007276:	f361 0347 	bfi	r3, r1, #1, #7
 800727a:	7313      	strb	r3, [r2, #12]
          Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7FU);
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007282:	b2d9      	uxtb	r1, r3
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	7b53      	ldrb	r3, [r2, #13]
 8007288:	f361 0306 	bfi	r3, r1, #0, #7
 800728c:	7353      	strb	r3, [r2, #13]
          Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80U) >> 7U;
 800728e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007290:	09db      	lsrs	r3, r3, #7
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	b2d9      	uxtb	r1, r3
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7b53      	ldrb	r3, [r2, #13]
 800729c:	f361 13c7 	bfi	r3, r1, #7, #1
 80072a0:	7353      	strb	r3, [r2, #13]
          Csd->Reserved2         = (CSD_Tab[12] & 0x60U) >> 5U;
 80072a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	b2d9      	uxtb	r1, r3
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	7b93      	ldrb	r3, [r2, #14]
 80072b0:	f361 0301 	bfi	r3, r1, #0, #2
 80072b4:	7393      	strb	r3, [r2, #14]
          Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1CU) >> 2U;
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	089b      	lsrs	r3, r3, #2
 80072ba:	f003 0307 	and.w	r3, r3, #7
 80072be:	b2d9      	uxtb	r1, r3
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	7b93      	ldrb	r3, [r2, #14]
 80072c4:	f361 0384 	bfi	r3, r1, #2, #3
 80072c8:	7393      	strb	r3, [r2, #14]
          Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03U) << 2U) | ((CSD_Tab[13] & 0xC0U) >> 6U);
 80072ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f003 030c 	and.w	r3, r3, #12
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072da:	099b      	lsrs	r3, r3, #6
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	4313      	orrs	r3, r2
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	b2d9      	uxtb	r1, r3
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	89d3      	ldrh	r3, [r2, #14]
 80072f2:	f361 1348 	bfi	r3, r1, #5, #4
 80072f6:	81d3      	strh	r3, [r2, #14]
          Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20U) >> 5U;
 80072f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	b2d9      	uxtb	r1, r3
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	7bd3      	ldrb	r3, [r2, #15]
 8007306:	f361 0341 	bfi	r3, r1, #1, #1
 800730a:	73d3      	strb	r3, [r2, #15]
          Csd->Reserved3         = (CSD_Tab[13] & 0x1FU);
 800730c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800730e:	f003 031f 	and.w	r3, r3, #31
 8007312:	b2d9      	uxtb	r1, r3
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	7bd3      	ldrb	r3, [r2, #15]
 8007318:	f361 0386 	bfi	r3, r1, #2, #5
 800731c:	73d3      	strb	r3, [r2, #15]
          Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80U) >> 7U;
 800731e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007320:	09db      	lsrs	r3, r3, #7
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	b2d9      	uxtb	r1, r3
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	7bd3      	ldrb	r3, [r2, #15]
 800732c:	f361 13c7 	bfi	r3, r1, #7, #1
 8007330:	73d3      	strb	r3, [r2, #15]
          Csd->CopyFlag          = (CSD_Tab[14] & 0x40U) >> 6U;
 8007332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007334:	099b      	lsrs	r3, r3, #6
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	b2d9      	uxtb	r1, r3
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	7c13      	ldrb	r3, [r2, #16]
 8007340:	f361 0300 	bfi	r3, r1, #0, #1
 8007344:	7413      	strb	r3, [r2, #16]
          Csd->PermWrProtect     = (CSD_Tab[14] & 0x20U) >> 5U;
 8007346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	b2d9      	uxtb	r1, r3
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	7c13      	ldrb	r3, [r2, #16]
 8007354:	f361 0341 	bfi	r3, r1, #1, #1
 8007358:	7413      	strb	r3, [r2, #16]
          Csd->TempWrProtect     = (CSD_Tab[14] & 0x10U) >> 4U;
 800735a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800735c:	091b      	lsrs	r3, r3, #4
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	b2d9      	uxtb	r1, r3
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	7c13      	ldrb	r3, [r2, #16]
 8007368:	f361 0382 	bfi	r3, r1, #2, #1
 800736c:	7413      	strb	r3, [r2, #16]
          Csd->FileFormat        = (CSD_Tab[14] & 0x0CU) >> 2U;
 800736e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007370:	089b      	lsrs	r3, r3, #2
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	b2d9      	uxtb	r1, r3
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	7c13      	ldrb	r3, [r2, #16]
 800737c:	f361 03c4 	bfi	r3, r1, #3, #2
 8007380:	7413      	strb	r3, [r2, #16]
          Csd->Reserved4         = (CSD_Tab[14] & 0x03U);
 8007382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007384:	f003 0303 	and.w	r3, r3, #3
 8007388:	b2d9      	uxtb	r1, r3
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	7c13      	ldrb	r3, [r2, #16]
 800738e:	f361 1346 	bfi	r3, r1, #5, #2
 8007392:	7413      	strb	r3, [r2, #16]
          Csd->crc               = (CSD_Tab[15] & 0xFEU) >> 1U;
 8007394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007396:	085b      	lsrs	r3, r3, #1
 8007398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800739c:	b2d9      	uxtb	r1, r3
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	8a13      	ldrh	r3, [r2, #16]
 80073a2:	f361 13cd 	bfi	r3, r1, #7, #7
 80073a6:	8213      	strh	r3, [r2, #16]
          Csd->Reserved5         = (CSD_Tab[15] & 0x01U);
 80073a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	b2d9      	uxtb	r1, r3
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	7c53      	ldrb	r3, [r2, #17]
 80073b4:	f361 1386 	bfi	r3, r1, #6, #1
 80073b8:	7453      	strb	r3, [r2, #17]

          ret = BSP_ERROR_NONE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	657b      	str	r3, [r7, #84]	; 0x54
 80073be:	e004      	b.n	80073ca <SD_GetCSDRegister+0x42e>
 80073c0:	20000228 	.word	0x20000228
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80073c4:	f06f 0305 	mvn.w	r3, #5
 80073c8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 80073ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10e      	bne.n	80073ee <SD_GetCSDRegister+0x452>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 80073d0:	2001      	movs	r0, #1
 80073d2:	f7ff fdcb 	bl	8006f6c <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80073d6:	f107 030b 	add.w	r3, r7, #11
 80073da:	2101      	movs	r1, #1
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fc2b 	bl	8007c38 <BSP_SPI2_Send>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <SD_GetCSDRegister+0x452>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80073e8:	f06f 0303 	mvn.w	r3, #3
 80073ec:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 80073ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3758      	adds	r7, #88	; 0x58
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
static int32_t SD_GetCIDRegister(SD_CardIdData_t* Cid)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b096      	sub	sp, #88	; 0x58
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007400:	2300      	movs	r3, #0
 8007402:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t response;
  uint32_t counter;
  uint8_t tmp;

  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CID, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007404:	2300      	movs	r3, #0
 8007406:	22ff      	movs	r2, #255	; 0xff
 8007408:	2100      	movs	r1, #0
 800740a:	200a      	movs	r0, #10
 800740c:	f000 f8c6 	bl	800759c <SD_SendCmd>
 8007410:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8007412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	f040 80a6 	bne.w	8007568 <SD_GetCIDRegister+0x170>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 800741c:	20fe      	movs	r0, #254	; 0xfe
 800741e:	f000 fb79 	bl	8007b14 <SD_WaitData>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	f040 80a2 	bne.w	800756e <SD_GetCIDRegister+0x176>
    {
      tmp = SD_DUMMY_BYTE;
 800742a:	23ff      	movs	r3, #255	; 0xff
 800742c:	72fb      	strb	r3, [r7, #11]

      /* Store CID register value on CID_Tab */
      for (counter = 0U; counter < 16U; counter++)
 800742e:	2300      	movs	r3, #0
 8007430:	653b      	str	r3, [r7, #80]	; 0x50
 8007432:	e014      	b.n	800745e <SD_GetCIDRegister+0x66>
      {
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CID_Tab[counter], 1U) != BSP_ERROR_NONE)
 8007434:	f107 020c 	add.w	r2, r7, #12
 8007438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	18d1      	adds	r1, r2, r3
 800743e:	f107 030b 	add.w	r3, r7, #11
 8007442:	2201      	movs	r2, #1
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fc2f 	bl	8007ca8 <BSP_SPI2_SendRecv>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <SD_GetCIDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007450:	f06f 0303 	mvn.w	r3, #3
 8007454:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8007456:	e005      	b.n	8007464 <SD_GetCIDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8007458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800745a:	3301      	adds	r3, #1
 800745c:	653b      	str	r3, [r7, #80]	; 0x50
 800745e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007460:	2b0f      	cmp	r3, #15
 8007462:	d9e7      	bls.n	8007434 <SD_GetCIDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 8007464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007466:	2b00      	cmp	r3, #0
 8007468:	f040 8081 	bne.w	800756e <SD_GetCIDRegister+0x176>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800746c:	f107 030b 	add.w	r3, r7, #11
 8007470:	2101      	movs	r1, #1
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fbe0 	bl	8007c38 <BSP_SPI2_Send>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <SD_GetCIDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800747e:	f06f 0303 	mvn.w	r3, #3
 8007482:	657b      	str	r3, [r7, #84]	; 0x54
 8007484:	e073      	b.n	800756e <SD_GetCIDRegister+0x176>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007486:	f107 030b 	add.w	r3, r7, #11
 800748a:	2101      	movs	r1, #1
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fbd3 	bl	8007c38 <BSP_SPI2_Send>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <SD_GetCIDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007498:	f06f 0303 	mvn.w	r3, #3
 800749c:	657b      	str	r3, [r7, #84]	; 0x54
 800749e:	e066      	b.n	800756e <SD_GetCIDRegister+0x176>
        }
        else
        {
          /* Byte 0 */
          Cid->ManufacturerID = CID_Tab[0];
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	601a      	str	r2, [r3, #0]

          /* Byte 1 */
          Cid->OEM_AppliID = CID_Tab[1] << 8U;
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	021a      	lsls	r2, r3, #8
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	605a      	str	r2, [r3, #4]

          /* Byte 2 */
          Cid->OEM_AppliID |= CID_Tab[2];
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	605a      	str	r2, [r3, #4]

          /* Byte 3 */
          Cid->ProdName1 = CID_Tab[3] << 24U;
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	061a      	lsls	r2, r3, #24
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	609a      	str	r2, [r3, #8]

          /* Byte 4 */
          Cid->ProdName1 |= CID_Tab[4] << 16U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	041b      	lsls	r3, r3, #16
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	609a      	str	r2, [r3, #8]

          /* Byte 5 */
          Cid->ProdName1 |= CID_Tab[5] << 8U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	021b      	lsls	r3, r3, #8
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	609a      	str	r2, [r3, #8]

          /* Byte 6 */
          Cid->ProdName1 |= CID_Tab[6];
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	609a      	str	r2, [r3, #8]

          /* Byte 7 */
          Cid->ProdName2 = CID_Tab[7];
 80074ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	60da      	str	r2, [r3, #12]

          /* Byte 8 */
          Cid->ProdRev = CID_Tab[8];
 80074f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	611a      	str	r2, [r3, #16]

          /* Byte 9 */
          Cid->ProdSN = CID_Tab[9] << 24U;
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	061a      	lsls	r2, r3, #24
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	615a      	str	r2, [r3, #20]

          /* Byte 10 */
          Cid->ProdSN |= CID_Tab[10] << 16U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695a      	ldr	r2, [r3, #20]
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	615a      	str	r2, [r3, #20]

          /* Byte 11 */
          Cid->ProdSN |= CID_Tab[11] << 8U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	695a      	ldr	r2, [r3, #20]
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	615a      	str	r2, [r3, #20]

          /* Byte 12 */
          Cid->ProdSN |= CID_Tab[12];
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695a      	ldr	r2, [r3, #20]
 800751e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	615a      	str	r2, [r3, #20]

          /* Byte 13 */
          Cid->Reserved1 |= (CID_Tab[13] & 0xF0U) >> 4U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752c:	091b      	lsrs	r3, r3, #4
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	619a      	str	r2, [r3, #24]
          Cid->ManufactDate = (CID_Tab[13] & 0x0FU) << 8U;
 8007538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800753a:	021b      	lsls	r3, r3, #8
 800753c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	61da      	str	r2, [r3, #28]

          /* Byte 14 */
          Cid->ManufactDate |= CID_Tab[14];
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	69da      	ldr	r2, [r3, #28]
 8007548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	61da      	str	r2, [r3, #28]

          /* Byte 15 */
          Cid->CID_CRC = (CID_Tab[15] & 0xFEU) >> 1U;
 8007550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007552:	085b      	lsrs	r3, r3, #1
 8007554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	621a      	str	r2, [r3, #32]
          Cid->Reserved2 = 1U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	625a      	str	r2, [r3, #36]	; 0x24

          ret = BSP_ERROR_NONE;
 8007562:	2300      	movs	r3, #0
 8007564:	657b      	str	r3, [r7, #84]	; 0x54
 8007566:	e002      	b.n	800756e <SD_GetCIDRegister+0x176>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8007568:	f06f 0305 	mvn.w	r3, #5
 800756c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 800756e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10e      	bne.n	8007592 <SD_GetCIDRegister+0x19a>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 8007574:	2001      	movs	r0, #1
 8007576:	f7ff fcf9 	bl	8006f6c <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800757a:	f107 030b 	add.w	r3, r7, #11
 800757e:	2101      	movs	r1, #1
 8007580:	4618      	mov	r0, r3
 8007582:	f000 fb59 	bl	8007c38 <BSP_SPI2_Send>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <SD_GetCIDRegister+0x19a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800758c:	f06f 0303 	mvn.w	r3, #3
 8007590:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 8007592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8007594:	4618      	mov	r0, r3
 8007596:	3758      	adds	r7, #88	; 0x58
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <SD_SendCmd>:
  * @param  Crc The CRC.
  * @param  Answer SD_ANSWER_NOT_EXPECTED or SD_ANSWER_EXPECTED
  * @retval SD response or 0xFFFF in case of error
  */
static uint32_t SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Answer)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6039      	str	r1, [r7, #0]
 80075a4:	4611      	mov	r1, r2
 80075a6:	461a      	mov	r2, r3
 80075a8:	4603      	mov	r3, r0
 80075aa:	71fb      	strb	r3, [r7, #7]
 80075ac:	460b      	mov	r3, r1
 80075ae:	71bb      	strb	r3, [r7, #6]
 80075b0:	4613      	mov	r3, r2
 80075b2:	717b      	strb	r3, [r7, #5]
  uint8_t frame[SD_CMD_LENGTH], frameout[SD_CMD_LENGTH];
  uint32_t response = 0xFFFF;
 80075b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075b8:	61fb      	str	r3, [r7, #28]
  /* R1 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 1 Bytes answer + NEC(0) = 15bytes */
  /* R1b identical to R1 + Busy information                                                   */
  /* R2 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 2 Bytes answer + NEC(0) = 16bytes */

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40U);         /* Construct byte 1 */
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	753b      	strb	r3, [r7, #20]
  frame[1] = (uint8_t)(Arg >> 24U); /* Construct byte 2 */
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	0e1b      	lsrs	r3, r3, #24
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	757b      	strb	r3, [r7, #21]
  frame[2] = (uint8_t)(Arg >> 16U); /* Construct byte 3 */
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	0c1b      	lsrs	r3, r3, #16
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	75bb      	strb	r3, [r7, #22]
  frame[3] = (uint8_t)(Arg >> 8U);  /* Construct byte 4 */
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	0a1b      	lsrs	r3, r3, #8
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	75fb      	strb	r3, [r7, #23]
  frame[4] = (uint8_t)(Arg);        /* Construct byte 5 */
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	763b      	strb	r3, [r7, #24]
  frame[5] = (Crc | 0x01U);         /* Construct byte 6 */
 80075e2:	79bb      	ldrb	r3, [r7, #6]
 80075e4:	f043 0301 	orr.w	r3, r3, #1
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	767b      	strb	r3, [r7, #25]

  /* Send the command */
  SD_IO_CSState(0);
 80075ec:	2000      	movs	r0, #0
 80075ee:	f7ff fcbd 	bl	8006f6c <SD_IO_CSState>
  /* Send the Cmd bytes */
  if(BUS_SPIx_SendRecv(frame, frameout, SD_CMD_LENGTH) != BSP_ERROR_NONE)
 80075f2:	f107 010c 	add.w	r1, r7, #12
 80075f6:	f107 0314 	add.w	r3, r7, #20
 80075fa:	2206      	movs	r2, #6
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 fb53 	bl	8007ca8 <BSP_SPI2_SendRecv>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <SD_SendCmd+0x72>
  {
    return 0xFFFF;
 8007608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800760c:	e0da      	b.n	80077c4 <SD_SendCmd+0x228>
  }
  tmp = SD_DUMMY_BYTE;
 800760e:	23ff      	movs	r3, #255	; 0xff
 8007610:	72fb      	strb	r3, [r7, #11]
  switch(Answer)
 8007612:	797b      	ldrb	r3, [r7, #5]
 8007614:	2b05      	cmp	r3, #5
 8007616:	f200 80d1 	bhi.w	80077bc <SD_SendCmd+0x220>
 800761a:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <SD_SendCmd+0x84>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007639 	.word	0x08007639
 8007624:	08007655 	.word	0x08007655
 8007628:	080076e7 	.word	0x080076e7
 800762c:	08007729 	.word	0x08007729
 8007630:	080077bd 	.word	0x080077bd
 8007634:	08007729 	.word	0x08007729
  {
  case SD_ANSWER_R1_EXPECTED :
    /* Sends one byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8007638:	f107 030a 	add.w	r3, r7, #10
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fa3f 	bl	8007ac0 <SD_ReadData>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <SD_SendCmd+0xb2>
    {
      return 0xFFFF;
 8007648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800764c:	e0ba      	b.n	80077c4 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 800764e:	7abb      	ldrb	r3, [r7, #10]
 8007650:	61fb      	str	r3, [r7, #28]
    break;
 8007652:	e0b6      	b.n	80077c2 <SD_SendCmd+0x226>
  case SD_ANSWER_R1B_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8007654:	f107 030a 	add.w	r3, r7, #10
 8007658:	4618      	mov	r0, r3
 800765a:	f000 fa31 	bl	8007ac0 <SD_ReadData>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <SD_SendCmd+0xce>
    {
      return 0xFFFF;
 8007664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007668:	e0ac      	b.n	80077c4 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 800766a:	7abb      	ldrb	r3, [r7, #10]
 800766c:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 800766e:	f107 010a 	add.w	r1, r7, #10
 8007672:	f107 030b 	add.w	r3, r7, #11
 8007676:	2201      	movs	r2, #1
 8007678:	4618      	mov	r0, r3
 800767a:	f000 fb15 	bl	8007ca8 <BSP_SPI2_SendRecv>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <SD_SendCmd+0xee>
    {
      return 0xFFFF;
 8007684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007688:	e09c      	b.n	80077c4 <SD_SendCmd+0x228>
    }
    response |= response_tmp;
 800768a:	7abb      	ldrb	r3, [r7, #10]
 800768c:	461a      	mov	r2, r3
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4313      	orrs	r3, r2
 8007692:	61fb      	str	r3, [r7, #28]
    /* Set CS High */
    SD_IO_CSState(1);
 8007694:	2001      	movs	r0, #1
 8007696:	f7ff fc69 	bl	8006f6c <SD_IO_CSState>
    SPI_IO_Delay(1);
 800769a:	2001      	movs	r0, #1
 800769c:	f000 fa67 	bl	8007b6e <SPI_IO_Delay>
    /* Set CS Low */
    SD_IO_CSState(0);
 80076a0:	2000      	movs	r0, #0
 80076a2:	f7ff fc63 	bl	8006f6c <SD_IO_CSState>

    /* Wait IO line return 0xFF */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80076a6:	f107 010a 	add.w	r1, r7, #10
 80076aa:	f107 030b 	add.w	r3, r7, #11
 80076ae:	2201      	movs	r2, #1
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 faf9 	bl	8007ca8 <BSP_SPI2_SendRecv>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d010      	beq.n	80076de <SD_SendCmd+0x142>
    {
      return 0xFFFF;
 80076bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076c0:	e080      	b.n	80077c4 <SD_SendCmd+0x228>
    }
    while(response_tmp != 0xFFU)
    {
      if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80076c2:	f107 010a 	add.w	r1, r7, #10
 80076c6:	f107 030b 	add.w	r3, r7, #11
 80076ca:	2201      	movs	r2, #1
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 faeb 	bl	8007ca8 <BSP_SPI2_SendRecv>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <SD_SendCmd+0x142>
      {
        return 0xFFFF;
 80076d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076dc:	e072      	b.n	80077c4 <SD_SendCmd+0x228>
    while(response_tmp != 0xFFU)
 80076de:	7abb      	ldrb	r3, [r7, #10]
 80076e0:	2bff      	cmp	r3, #255	; 0xff
 80076e2:	d1ee      	bne.n	80076c2 <SD_SendCmd+0x126>
      }
    }
    break;
 80076e4:	e06d      	b.n	80077c2 <SD_SendCmd+0x226>
  case SD_ANSWER_R2_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80076e6:	f107 030a 	add.w	r3, r7, #10
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 f9e8 	bl	8007ac0 <SD_ReadData>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <SD_SendCmd+0x160>
    {
      return 0xFFFF;
 80076f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076fa:	e063      	b.n	80077c4 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80076fc:	7abb      	ldrb	r3, [r7, #10]
 80076fe:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007700:	f107 010a 	add.w	r1, r7, #10
 8007704:	f107 030b 	add.w	r3, r7, #11
 8007708:	2201      	movs	r2, #1
 800770a:	4618      	mov	r0, r3
 800770c:	f000 facc 	bl	8007ca8 <BSP_SPI2_SendRecv>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <SD_SendCmd+0x180>
    {
      return 0xFFFF;
 8007716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800771a:	e053      	b.n	80077c4 <SD_SendCmd+0x228>
    }
    response |= ((uint32_t)response_tmp << 8);
 800771c:	7abb      	ldrb	r3, [r7, #10]
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	4313      	orrs	r3, r2
 8007724:	61fb      	str	r3, [r7, #28]
    break;
 8007726:	e04c      	b.n	80077c2 <SD_SendCmd+0x226>
  case SD_ANSWER_R3_EXPECTED :
  case SD_ANSWER_R7_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8007728:	f107 030a 	add.w	r3, r7, #10
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f9c7 	bl	8007ac0 <SD_ReadData>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <SD_SendCmd+0x1a2>
    {
      return 0xFFFF;
 8007738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800773c:	e042      	b.n	80077c4 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 800773e:	7abb      	ldrb	r3, [r7, #10]
 8007740:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007742:	f107 010a 	add.w	r1, r7, #10
 8007746:	f107 030b 	add.w	r3, r7, #11
 800774a:	2201      	movs	r2, #1
 800774c:	4618      	mov	r0, r3
 800774e:	f000 faab 	bl	8007ca8 <BSP_SPI2_SendRecv>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <SD_SendCmd+0x1c2>
    {
      return 0xFFFF;
 8007758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800775c:	e032      	b.n	80077c4 <SD_SendCmd+0x228>
    }
    /* Only first and second responses are required */
    response |= ((uint32_t)response_tmp << 8U);
 800775e:	7abb      	ldrb	r3, [r7, #10]
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	4313      	orrs	r3, r2
 8007766:	61fb      	str	r3, [r7, #28]
    /* Sends third byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007768:	f107 010a 	add.w	r1, r7, #10
 800776c:	f107 030b 	add.w	r3, r7, #11
 8007770:	2201      	movs	r2, #1
 8007772:	4618      	mov	r0, r3
 8007774:	f000 fa98 	bl	8007ca8 <BSP_SPI2_SendRecv>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <SD_SendCmd+0x1e8>
    {
      return 0xFFFF;
 800777e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007782:	e01f      	b.n	80077c4 <SD_SendCmd+0x228>
    }
    /* Sends fourth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007784:	f107 010a 	add.w	r1, r7, #10
 8007788:	f107 030b 	add.w	r3, r7, #11
 800778c:	2201      	movs	r2, #1
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fa8a 	bl	8007ca8 <BSP_SPI2_SendRecv>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <SD_SendCmd+0x204>
    {
      return 0xFFFF;
 800779a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800779e:	e011      	b.n	80077c4 <SD_SendCmd+0x228>
    }
    /* Sends fifth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80077a0:	f107 010a 	add.w	r1, r7, #10
 80077a4:	f107 030b 	add.w	r3, r7, #11
 80077a8:	2201      	movs	r2, #1
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fa7c 	bl	8007ca8 <BSP_SPI2_SendRecv>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d004      	beq.n	80077c0 <SD_SendCmd+0x224>
    {
      return 0xFFFF;
 80077b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077ba:	e003      	b.n	80077c4 <SD_SendCmd+0x228>
    }

    break;
  default :
    break;
 80077bc:	bf00      	nop
 80077be:	e000      	b.n	80077c2 <SD_SendCmd+0x226>
    break;
 80077c0:	bf00      	nop
  }
  return response;
 80077c2:	69fb      	ldr	r3, [r7, #28]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
static int32_t SD_GetDataResponse(uint8_t *DataResponse)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint8_t dataresponse, tmp, tmp1;
  *DataResponse = (uint8_t)SD_DATA_OTHER_ERROR;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	22ff      	movs	r2, #255	; 0xff
 80077d8:	701a      	strb	r2, [r3, #0]

  tmp = SD_DUMMY_BYTE;
 80077da:	23ff      	movs	r3, #255	; 0xff
 80077dc:	73bb      	strb	r3, [r7, #14]
  if(BUS_SPIx_SendRecv(&tmp, &dataresponse, 1U) != BSP_ERROR_NONE)
 80077de:	f107 010f 	add.w	r1, r7, #15
 80077e2:	f107 030e 	add.w	r3, r7, #14
 80077e6:	2201      	movs	r2, #1
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fa5d 	bl	8007ca8 <BSP_SPI2_SendRecv>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <SD_GetDataResponse+0x2e>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80077f4:	f06f 0303 	mvn.w	r3, #3
 80077f8:	e049      	b.n	800788e <SD_GetDataResponse+0xc2>
  }
  /* read the busy response byte*/
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80077fa:	f107 030e 	add.w	r3, r7, #14
 80077fe:	2101      	movs	r1, #1
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fa19 	bl	8007c38 <BSP_SPI2_Send>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <SD_GetDataResponse+0x46>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800780c:	f06f 0303 	mvn.w	r3, #3
 8007810:	e03d      	b.n	800788e <SD_GetDataResponse+0xc2>
  }
  else
  {
    /* Mask unused bits */
    switch (dataresponse & 0x1FU)
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	f003 031f 	and.w	r3, r3, #31
 8007818:	2b0b      	cmp	r3, #11
 800781a:	d02f      	beq.n	800787c <SD_GetDataResponse+0xb0>
 800781c:	2b0d      	cmp	r3, #13
 800781e:	d031      	beq.n	8007884 <SD_GetDataResponse+0xb8>
 8007820:	2b05      	cmp	r3, #5
 8007822:	d000      	beq.n	8007826 <SD_GetDataResponse+0x5a>
      break;
    case SD_DATA_WRITE_ERROR:
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
      break;
    default:
      break;
 8007824:	e032      	b.n	800788c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_OK;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2205      	movs	r2, #5
 800782a:	701a      	strb	r2, [r3, #0]
      SD_IO_CSState(1);
 800782c:	2001      	movs	r0, #1
 800782e:	f7ff fb9d 	bl	8006f6c <SD_IO_CSState>
      SD_IO_CSState(0);
 8007832:	2000      	movs	r0, #0
 8007834:	f7ff fb9a 	bl	8006f6c <SD_IO_CSState>
      tmp = SD_DUMMY_BYTE;
 8007838:	23ff      	movs	r3, #255	; 0xff
 800783a:	73bb      	strb	r3, [r7, #14]
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 800783c:	f107 010d 	add.w	r1, r7, #13
 8007840:	f107 030e 	add.w	r3, r7, #14
 8007844:	2201      	movs	r2, #1
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fa2e 	bl	8007ca8 <BSP_SPI2_SendRecv>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d010      	beq.n	8007874 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 8007852:	f06f 0303 	mvn.w	r3, #3
 8007856:	e01a      	b.n	800788e <SD_GetDataResponse+0xc2>
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 8007858:	f107 010d 	add.w	r1, r7, #13
 800785c:	f107 030e 	add.w	r3, r7, #14
 8007860:	2201      	movs	r2, #1
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fa20 	bl	8007ca8 <BSP_SPI2_SendRecv>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 800786e:	f06f 0303 	mvn.w	r3, #3
 8007872:	e00c      	b.n	800788e <SD_GetDataResponse+0xc2>
      while(tmp1 != 0xFFU)
 8007874:	7b7b      	ldrb	r3, [r7, #13]
 8007876:	2bff      	cmp	r3, #255	; 0xff
 8007878:	d1ee      	bne.n	8007858 <SD_GetDataResponse+0x8c>
      break;
 800787a:	e007      	b.n	800788c <SD_GetDataResponse+0xc0>
      *DataResponse =  (uint8_t)SD_DATA_CRC_ERROR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	220b      	movs	r2, #11
 8007880:	701a      	strb	r2, [r3, #0]
      break;
 8007882:	e003      	b.n	800788c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	220d      	movs	r2, #13
 8007888:	701a      	strb	r2, [r3, #0]
      break;
 800788a:	bf00      	nop
    }
  }

  /* Return response */
  return BSP_ERROR_NONE;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <SD_GoIdleState>:
  * @brief  Put the SD in Idle state.
  * @param  None
  * @retval SD status
  */
static int32_t SD_GoIdleState(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
  uint32_t response;
  __IO uint8_t counter = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	70fb      	strb	r3, [r7, #3]
  uint8_t tmp = SD_DUMMY_BYTE;
 80078a2:	23ff      	movs	r3, #255	; 0xff
 80078a4:	70bb      	strb	r3, [r7, #2]

  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and
  wait for In Idle State Response (R1 Format) equal to 0x01 */
  do
  {
    counter++;
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	3301      	adds	r3, #1
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	70fb      	strb	r3, [r7, #3]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0U, 0x95U, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80078b0:	2300      	movs	r3, #0
 80078b2:	2295      	movs	r2, #149	; 0x95
 80078b4:	2100      	movs	r1, #0
 80078b6:	2000      	movs	r0, #0
 80078b8:	f7ff fe70 	bl	800759c <SD_SendCmd>
 80078bc:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 80078be:	2001      	movs	r0, #1
 80078c0:	f7ff fb54 	bl	8006f6c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80078c4:	1cbb      	adds	r3, r7, #2
 80078c6:	2101      	movs	r1, #1
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 f9b5 	bl	8007c38 <BSP_SPI2_Send>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <SD_GoIdleState+0x42>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80078d4:	f06f 0303 	mvn.w	r3, #3
 80078d8:	e0ec      	b.n	8007ab4 <SD_GoIdleState+0x21c>
    }
    else
    {
      if(counter >= SD_MAX_TRY)
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b63      	cmp	r3, #99	; 0x63
 80078e0:	d902      	bls.n	80078e8 <SD_GoIdleState+0x50>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 80078e2:	f06f 0305 	mvn.w	r3, #5
 80078e6:	e0e5      	b.n	8007ab4 <SD_GoIdleState+0x21c>
      }
    }
  }while((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d1da      	bne.n	80078a6 <SD_GoIdleState+0xe>

  /* Send CMD8 (SD_CMD_SEND_IF_COND) to check the power supply status
  and wait until response (R7 Format) equal to 0xAA and */
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AAU, 0x87U, (uint8_t)SD_ANSWER_R7_EXPECTED);
 80078f0:	2305      	movs	r3, #5
 80078f2:	2287      	movs	r2, #135	; 0x87
 80078f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80078f8:	2008      	movs	r0, #8
 80078fa:	f7ff fe4f 	bl	800759c <SD_SendCmd>
 80078fe:	6078      	str	r0, [r7, #4]
  SD_IO_CSState(1);
 8007900:	2001      	movs	r0, #1
 8007902:	f7ff fb33 	bl	8006f6c <SD_IO_CSState>
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007906:	1cbb      	adds	r3, r7, #2
 8007908:	2101      	movs	r1, #1
 800790a:	4618      	mov	r0, r3
 800790c:	f000 f994 	bl	8007c38 <BSP_SPI2_Send>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <SD_GoIdleState+0x84>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8007916:	f06f 0303 	mvn.w	r3, #3
 800791a:	e0cb      	b.n	8007ab4 <SD_GoIdleState+0x21c>
  }
  else if(((uint8_t)(response & 0xFFU)  & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	b2db      	uxtb	r3, r3
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d030      	beq.n	800798a <SD_GoIdleState+0xf2>
    /* initialise card V1 */
    do
    {
      /* initialise card V1 */
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007928:	2300      	movs	r3, #0
 800792a:	22ff      	movs	r2, #255	; 0xff
 800792c:	2100      	movs	r1, #0
 800792e:	2037      	movs	r0, #55	; 0x37
 8007930:	f7ff fe34 	bl	800759c <SD_SendCmd>
      SD_IO_CSState(1);
 8007934:	2001      	movs	r0, #1
 8007936:	f7ff fb19 	bl	8006f6c <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800793a:	1cbb      	adds	r3, r7, #2
 800793c:	2101      	movs	r1, #1
 800793e:	4618      	mov	r0, r3
 8007940:	f000 f97a 	bl	8007c38 <BSP_SPI2_Send>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <SD_GoIdleState+0xb8>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 800794a:	f06f 0303 	mvn.w	r3, #3
 800794e:	e0b1      	b.n	8007ab4 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007950:	2300      	movs	r3, #0
 8007952:	22ff      	movs	r2, #255	; 0xff
 8007954:	2100      	movs	r1, #0
 8007956:	2029      	movs	r0, #41	; 0x29
 8007958:	f7ff fe20 	bl	800759c <SD_SendCmd>
 800795c:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 800795e:	2001      	movs	r0, #1
 8007960:	f7ff fb04 	bl	8006f6c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007964:	1cbb      	adds	r3, r7, #2
 8007966:	2101      	movs	r1, #1
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f965 	bl	8007c38 <BSP_SPI2_Send>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <SD_GoIdleState+0xe2>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8007974:	f06f 0303 	mvn.w	r3, #3
 8007978:	e09c      	b.n	8007ab4 <SD_GoIdleState+0x21c>
        }
      }
    }
    while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b01      	cmp	r3, #1
 8007980:	d0d2      	beq.n	8007928 <SD_GoIdleState+0x90>
    CardType = MY_CARD_SDSC;
 8007982:	4b4e      	ldr	r3, [pc, #312]	; (8007abc <SD_GoIdleState+0x224>)
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	e093      	b.n	8007ab2 <SD_GoIdleState+0x21a>
  }
  else if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b01      	cmp	r3, #1
 8007990:	f040 808c 	bne.w	8007aac <SD_GoIdleState+0x214>
  {
    /* initialise card V2 */
    do {
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007994:	2300      	movs	r3, #0
 8007996:	22ff      	movs	r2, #255	; 0xff
 8007998:	2100      	movs	r1, #0
 800799a:	2037      	movs	r0, #55	; 0x37
 800799c:	f7ff fdfe 	bl	800759c <SD_SendCmd>
      SD_IO_CSState(1);
 80079a0:	2001      	movs	r0, #1
 80079a2:	f7ff fae3 	bl	8006f6c <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80079a6:	1cbb      	adds	r3, r7, #2
 80079a8:	2101      	movs	r1, #1
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 f944 	bl	8007c38 <BSP_SPI2_Send>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <SD_GoIdleState+0x124>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 80079b6:	f06f 0303 	mvn.w	r3, #3
 80079ba:	e07b      	b.n	8007ab4 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80079bc:	2300      	movs	r3, #0
 80079be:	22ff      	movs	r2, #255	; 0xff
 80079c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80079c4:	2029      	movs	r0, #41	; 0x29
 80079c6:	f7ff fde9 	bl	800759c <SD_SendCmd>
 80079ca:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 80079cc:	2001      	movs	r0, #1
 80079ce:	f7ff facd 	bl	8006f6c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80079d2:	1cbb      	adds	r3, r7, #2
 80079d4:	2101      	movs	r1, #1
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 f92e 	bl	8007c38 <BSP_SPI2_Send>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <SD_GoIdleState+0x150>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 80079e2:	f06f 0303 	mvn.w	r3, #3
 80079e6:	e065      	b.n	8007ab4 <SD_GoIdleState+0x21c>
        }
      }
    }
    while(((uint8_t)response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d0d1      	beq.n	8007994 <SD_GoIdleState+0xfc>

    if(((uint8_t)(response & 0xFFU) & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d033      	beq.n	8007a64 <SD_GoIdleState+0x1cc>
    {
      do {
        /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
        (void)SD_SendCmd(SD_CMD_APP_CMD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80079fc:	2300      	movs	r3, #0
 80079fe:	22ff      	movs	r2, #255	; 0xff
 8007a00:	2100      	movs	r1, #0
 8007a02:	2037      	movs	r0, #55	; 0x37
 8007a04:	f7ff fdca 	bl	800759c <SD_SendCmd>
        SD_IO_CSState(1);
 8007a08:	2001      	movs	r0, #1
 8007a0a:	f7ff faaf 	bl	8006f6c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007a0e:	1cbb      	adds	r3, r7, #2
 8007a10:	2101      	movs	r1, #1
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 f910 	bl	8007c38 <BSP_SPI2_Send>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <SD_GoIdleState+0x18c>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8007a1e:	f06f 0303 	mvn.w	r3, #3
 8007a22:	e047      	b.n	8007ab4 <SD_GoIdleState+0x21c>
        }
        else
        {
          if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d002      	beq.n	8007a32 <SD_GoIdleState+0x19a>
          {
            return BSP_ERROR_UNKNOWN_FAILURE;
 8007a2c:	f06f 0305 	mvn.w	r3, #5
 8007a30:	e040      	b.n	8007ab4 <SD_GoIdleState+0x21c>
          }
          /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007a32:	2300      	movs	r3, #0
 8007a34:	22ff      	movs	r2, #255	; 0xff
 8007a36:	2100      	movs	r1, #0
 8007a38:	2029      	movs	r0, #41	; 0x29
 8007a3a:	f7ff fdaf 	bl	800759c <SD_SendCmd>
 8007a3e:	6078      	str	r0, [r7, #4]
          SD_IO_CSState(1);
 8007a40:	2001      	movs	r0, #1
 8007a42:	f7ff fa93 	bl	8006f6c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007a46:	1cbb      	adds	r3, r7, #2
 8007a48:	2101      	movs	r1, #1
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f8f4 	bl	8007c38 <BSP_SPI2_Send>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <SD_GoIdleState+0x1c4>
          {
            return BSP_ERROR_PERIPH_FAILURE;
 8007a56:	f06f 0303 	mvn.w	r3, #3
 8007a5a:	e02b      	b.n	8007ab4 <SD_GoIdleState+0x21c>
          }
        }
      }
      while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d0cb      	beq.n	80079fc <SD_GoIdleState+0x164>
    }

    /* Send CMD58 (SD_CMD_READ_OCR) to initialize SDHC or SDXC cards: R3 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R3_EXPECTED);
 8007a64:	2303      	movs	r3, #3
 8007a66:	22ff      	movs	r2, #255	; 0xff
 8007a68:	2100      	movs	r1, #0
 8007a6a:	203a      	movs	r0, #58	; 0x3a
 8007a6c:	f7ff fd96 	bl	800759c <SD_SendCmd>
 8007a70:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 8007a72:	2001      	movs	r0, #1
 8007a74:	f7ff fa7a 	bl	8006f6c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007a78:	1cbb      	adds	r3, r7, #2
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 f8db 	bl	8007c38 <BSP_SPI2_Send>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <SD_GoIdleState+0x1f6>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007a88:	f06f 0303 	mvn.w	r3, #3
 8007a8c:	e012      	b.n	8007ab4 <SD_GoIdleState+0x21c>
    }
    else
    {
      if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <SD_GoIdleState+0x204>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 8007a96:	f06f 0305 	mvn.w	r3, #5
 8007a9a:	e00b      	b.n	8007ab4 <SD_GoIdleState+0x21c>
      }
      CardType = (uint32_t)(((response >> 8U) & 0x40U) >> 6U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	0a1b      	lsrs	r3, r3, #8
 8007aa0:	099b      	lsrs	r3, r3, #6
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	4a05      	ldr	r2, [pc, #20]	; (8007abc <SD_GoIdleState+0x224>)
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	e002      	b.n	8007ab2 <SD_GoIdleState+0x21a>
    }
  }
  else
  {
    return BSP_ERROR_BUSY;
 8007aac:	f06f 0302 	mvn.w	r3, #2
 8007ab0:	e000      	b.n	8007ab4 <SD_GoIdleState+0x21c>
  }

  return BSP_ERROR_NONE;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000228 	.word	0x20000228

08007ac0 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  Data data to be read
  * @retval BSP status
  */
static int32_t SD_ReadData(uint8_t *Data)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint8_t timeout = 0x08U;
 8007ac8:	2308      	movs	r3, #8
 8007aca:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  tmp = SD_DUMMY_BYTE;
 8007acc:	23ff      	movs	r3, #255	; 0xff
 8007ace:	73bb      	strb	r3, [r7, #14]
  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, Data, 1) != BSP_ERROR_NONE)
 8007ad0:	f107 030e 	add.w	r3, r7, #14
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f8e5 	bl	8007ca8 <BSP_SPI2_SendRecv>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <SD_ReadData+0x2a>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007ae4:	f06f 0303 	mvn.w	r3, #3
 8007ae8:	e010      	b.n	8007b0c <SD_ReadData+0x4c>
    }
    timeout--;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]

  }while ((*Data == SD_DUMMY_BYTE) && (timeout != 0U));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2bff      	cmp	r3, #255	; 0xff
 8007af6:	d102      	bne.n	8007afe <SD_ReadData+0x3e>
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e8      	bne.n	8007ad0 <SD_ReadData+0x10>

  if (timeout == 0U)
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <SD_ReadData+0x4a>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 8007b04:	f06f 0302 	mvn.w	r3, #2
 8007b08:	e000      	b.n	8007b0c <SD_ReadData+0x4c>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <SD_WaitData>:
  * @brief  Waits a data from the SD card
  * @param  data  Expected data from the SD card
  * @retval BSP status
  */
static int32_t SD_WaitData(uint8_t Data)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	71fb      	strb	r3, [r7, #7]
  uint16_t timeout = 0xFFFF;
 8007b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b22:	81fb      	strh	r3, [r7, #14]
  uint8_t readvalue, tmp;

  tmp = SD_DUMMY_BYTE;
 8007b24:	23ff      	movs	r3, #255	; 0xff
 8007b26:	733b      	strb	r3, [r7, #12]

  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, &readvalue, 1) != BSP_ERROR_NONE)
 8007b28:	f107 010d 	add.w	r1, r7, #13
 8007b2c:	f107 030c 	add.w	r3, r7, #12
 8007b30:	2201      	movs	r2, #1
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 f8b8 	bl	8007ca8 <BSP_SPI2_SendRecv>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <SD_WaitData+0x30>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007b3e:	f06f 0303 	mvn.w	r3, #3
 8007b42:	e010      	b.n	8007b66 <SD_WaitData+0x52>
    }
    timeout--;
 8007b44:	89fb      	ldrh	r3, [r7, #14]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	81fb      	strh	r3, [r7, #14]
  }while ((readvalue != Data) && (timeout != 0U));
 8007b4a:	7b7b      	ldrb	r3, [r7, #13]
 8007b4c:	79fa      	ldrb	r2, [r7, #7]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d002      	beq.n	8007b58 <SD_WaitData+0x44>
 8007b52:	89fb      	ldrh	r3, [r7, #14]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e7      	bne.n	8007b28 <SD_WaitData+0x14>

  if (timeout == 0U)
 8007b58:	89fb      	ldrh	r3, [r7, #14]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <SD_WaitData+0x50>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 8007b5e:	f06f 0302 	mvn.w	r3, #2
 8007b62:	e000      	b.n	8007b66 <SD_WaitData+0x52>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <SPI_IO_Delay>:
  * @brief  SPI IO delay
  * @param  Delay  Delay in ms
  * @retval None
  */
static void SPI_IO_Delay(uint32_t Delay)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  int32_t tickstart;
  tickstart = BSP_GetTick();
 8007b76:	f000 f8b7 	bl	8007ce8 <BSP_GetTick>
 8007b7a:	60f8      	str	r0, [r7, #12]
  while((BSP_GetTick() - tickstart) < (int32_t)Delay)
 8007b7c:	bf00      	nop
 8007b7e:	f000 f8b3 	bl	8007ce8 <BSP_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	dbf7      	blt.n	8007b7e <SPI_IO_Delay+0x10>
  {
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <BSP_SPI2_Init>:

static void SPI_MspInit(SPI_HandleTypeDef *hspi);
static void SPI_MspDeInit(SPI_HandleTypeDef *hspi);

int32_t BSP_SPI2_Init(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hSpiHandle) == HAL_SPI_STATE_RESET)
 8007b9c:	480a      	ldr	r0, [pc, #40]	; (8007bc8 <BSP_SPI2_Init+0x30>)
 8007b9e:	f7fc fd98 	bl	80046d2 <HAL_SPI_GetState>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10b      	bne.n	8007bc0 <BSP_SPI2_Init+0x28>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI_MspInit(&hSpiHandle);
 8007ba8:	4807      	ldr	r0, [pc, #28]	; (8007bc8 <BSP_SPI2_Init+0x30>)
 8007baa:	f000 f8a5 	bl	8007cf8 <SPI_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_BSP_SPI2_Init(&hSpiHandle) != HAL_OK)
 8007bae:	4806      	ldr	r0, [pc, #24]	; (8007bc8 <BSP_SPI2_Init+0x30>)
 8007bb0:	f000 f80c 	bl	8007bcc <MX_BSP_SPI2_Init>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <BSP_SPI2_Init+0x28>
    {
      return BSP_ERROR_BUS_FAILURE;
 8007bba:	f06f 0307 	mvn.w	r3, #7
 8007bbe:	e000      	b.n	8007bc2 <BSP_SPI2_Init+0x2a>
    }
  }
  return BSP_ERROR_NONE;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000c6c 	.word	0x20000c6c

08007bcc <MX_BSP_SPI2_Init>:
  * @brief  MX SPI initialization.
  * @param  hspi SPI handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_BSP_SPI2_Init(SPI_HandleTypeDef *hspi)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* SPI Config */
  hspi->Instance               = NUCLEO_SPI;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a17      	ldr	r2, [pc, #92]	; (8007c34 <MX_BSP_SPI2_Init+0x68>)
 8007bd8:	601a      	str	r2, [r3, #0]
  hspi->Init.BaudRatePrescaler = NUCLEO_SPI_BAUDRATEPRESCALER;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2210      	movs	r2, #16
 8007bde:	61da      	str	r2, [r3, #28]
  hspi->Init.Direction         = SPI_DIRECTION_2LINES;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	609a      	str	r2, [r3, #8]
  hspi->Init.CLKPhase          = SPI_PHASE_2EDGE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	615a      	str	r2, [r3, #20]
  hspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	611a      	str	r2, [r3, #16]
  hspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial     = 7;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2207      	movs	r2, #7
 8007bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007c04:	60da      	str	r2, [r3, #12]
  hspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	621a      	str	r2, [r3, #32]
  hspi->Init.NSS               = SPI_NSS_SOFT;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c12:	619a      	str	r2, [r3, #24]
  hspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.Mode              = SPI_MODE_MASTER;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007c20:	605a      	str	r2, [r3, #4]

  return HAL_SPI_Init(hspi);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7fc f822 	bl	8003c6c <HAL_SPI_Init>
 8007c28:	4603      	mov	r3, r0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40003800 	.word	0x40003800

08007c38 <BSP_SPI2_Send>:
  * @param  pTxData pointer to TX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pTxData, uint32_t Length)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hSpiHandle, pTxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4806      	ldr	r0, [pc, #24]	; (8007c6c <BSP_SPI2_Send+0x34>)
 8007c52:	f7fc f89d 	bl	8003d90 <HAL_SPI_Transmit>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <BSP_SPI2_Send+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007c5c:	f06f 0307 	mvn.w	r3, #7
 8007c60:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007c62:	68fb      	ldr	r3, [r7, #12]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20000c6c 	.word	0x20000c6c

08007c70 <BSP_SPI2_Recv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Recv(uint8_t *pRxData, uint32_t Length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hSpiHandle, pRxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4806      	ldr	r0, [pc, #24]	; (8007ca4 <BSP_SPI2_Recv+0x34>)
 8007c8a:	f7fc f9e7 	bl	800405c <HAL_SPI_Receive>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <BSP_SPI2_Recv+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007c94:	f06f 0307 	mvn.w	r3, #7
 8007c98:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000c6c 	.word	0x20000c6c

08007ca8 <BSP_SPI2_SendRecv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint32_t Legnth)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hSpiHandle, pTxData, pRxData, (uint16_t)Legnth, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	68f9      	ldr	r1, [r7, #12]
 8007cc8:	4806      	ldr	r0, [pc, #24]	; (8007ce4 <BSP_SPI2_SendRecv+0x3c>)
 8007cca:	f7fc faef 	bl	80042ac <HAL_SPI_TransmitReceive>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <BSP_SPI2_SendRecv+0x32>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007cd4:	f06f 0307 	mvn.w	r3, #7
 8007cd8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007cda:	697b      	ldr	r3, [r7, #20]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000c6c 	.word	0x20000c6c

08007ce8 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8007cec:	f7f9 fc04 	bl	80014f8 <HAL_GetTick>
 8007cf0:	4603      	mov	r3, r0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <SPI_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi SPI handler
  * @retval None
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08c      	sub	sp, #48	; 0x30
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*** Configure the SPI peripheral ***/
  /* Enable SPI clock */
  NUCLEO_SPI_CLK_ENABLE();
 8007d00:	4b2e      	ldr	r3, [pc, #184]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d04:	4a2d      	ldr	r2, [pc, #180]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d0c:	4b2b      	ldr	r3, [pc, #172]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  NUCLEO_SPI_SCK_GPIO_CLK_ENABLE();
 8007d18:	4b28      	ldr	r3, [pc, #160]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1c:	4a27      	ldr	r2, [pc, #156]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d1e:	f043 0301 	orr.w	r3, r3, #1
 8007d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d24:	4b25      	ldr	r3, [pc, #148]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	697b      	ldr	r3, [r7, #20]
  NUCLEO_SPI_MOSI_GPIO_CLK_ENABLE();
 8007d30:	4b22      	ldr	r3, [pc, #136]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d34:	4a21      	ldr	r2, [pc, #132]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d3c:	4b1f      	ldr	r3, [pc, #124]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	613b      	str	r3, [r7, #16]
 8007d46:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPI_MISO_GPIO_CLK_ENABLE();
 8007d48:	4b1c      	ldr	r3, [pc, #112]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4c:	4a1b      	ldr	r2, [pc, #108]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d4e:	f043 0301 	orr.w	r3, r3, #1
 8007d52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d54:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <SPI_MspInit+0xc4>)
 8007d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	68fb      	ldr	r3, [r7, #12]

  /* Configure SPI SCK */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_SCK_PIN;
 8007d60:	2320      	movs	r3, #32
 8007d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007d64:	2302      	movs	r3, #2
 8007d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = NUCLEO_SPI_SCK_AF;
 8007d70:	2305      	movs	r3, #5
 8007d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007d74:	f107 031c 	add.w	r3, r7, #28
 8007d78:	4619      	mov	r1, r3
 8007d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d7e:	f7fa fa49 	bl	8002214 <HAL_GPIO_Init>

  /* Configure SPI MOSI */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_MOSI_PIN;
 8007d82:	2380      	movs	r3, #128	; 0x80
 8007d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MOSI_AF;
 8007d86:	2305      	movs	r3, #5
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8007d8e:	f107 031c 	add.w	r3, r7, #28
 8007d92:	4619      	mov	r1, r3
 8007d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d98:	f7fa fa3c 	bl	8002214 <HAL_GPIO_Init>

  /* Configure SPI MISO */
  GPIO_InitStruct.Pin = NUCLEO_SPI_MISO_PIN;
 8007d9c:	2340      	movs	r3, #64	; 0x40
 8007d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MISO_AF;
 8007da0:	2305      	movs	r3, #5
 8007da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8007da4:	f107 031c 	add.w	r3, r7, #28
 8007da8:	4619      	mov	r1, r3
 8007daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dae:	f7fa fa31 	bl	8002214 <HAL_GPIO_Init>
}
 8007db2:	bf00      	nop
 8007db4:	3730      	adds	r7, #48	; 0x30
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	40021000 	.word	0x40021000

08007dc0 <USER_CheckStatus>:
#define DISABLE_SD_INIT
/* Private variables ---------------------------------------------------------*/
/* Disk status */
static volatile DSTATUS Stat = STA_NOINIT;
static DSTATUS USER_CheckStatus(BYTE lun)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007dca:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <USER_CheckStatus+0x3c>)
 8007dcc:	2201      	movs	r2, #1
 8007dce:	701a      	strb	r2, [r3, #0]
  // TO DO:
  if(MY_SD_GetCardState(0) == BSP_ERROR_NONE)
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	f7fe ffc7 	bl	8006d64 <MY_SD_GetCardState>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d107      	bne.n	8007dec <USER_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 8007ddc:	4b07      	ldr	r3, [pc, #28]	; (8007dfc <USER_CheckStatus+0x3c>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	f023 0301 	bic.w	r3, r3, #1
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	4b04      	ldr	r3, [pc, #16]	; (8007dfc <USER_CheckStatus+0x3c>)
 8007dea:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007dec:	4b03      	ldr	r3, [pc, #12]	; (8007dfc <USER_CheckStatus+0x3c>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	b2db      	uxtb	r3, r3
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	2000000c 	.word	0x2000000c

08007e00 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007e0a:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <USER_initialize+0x30>)
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	701a      	strb	r2, [r3, #0]
	  if(MY_SD_Init(0) == BSP_ERROR_NONE)
	  {
		Stat = USER_CheckStatus(pdrv);
	  }
	#else
	  Stat = USER_CheckStatus(pdrv);
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff ffd4 	bl	8007dc0 <USER_CheckStatus>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <USER_initialize+0x30>)
 8007e1e:	701a      	strb	r2, [r3, #0]
	#endif
    return Stat;
 8007e20:	4b03      	ldr	r3, [pc, #12]	; (8007e30 <USER_initialize+0x30>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	2000000c 	.word	0x2000000c

08007e34 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_CheckStatus(pdrv);
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7ff ffbd 	bl	8007dc0 <USER_CheckStatus>
 8007e46:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	DRESULT res = RES_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_ReadBlocks(0, (uint32_t*)buff,
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	f7fe fdac 	bl	80069c8 <MY_SD_ReadBlocks>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d108      	bne.n	8007e88 <USER_read+0x38>
						   (uint32_t) (sector),
						   count) == BSP_ERROR_NONE)
	  {
		/* wait until the read operation is finished */
		while( MY_SD_GetCardState(0)!= BSP_ERROR_NONE)
 8007e76:	bf00      	nop
 8007e78:	2000      	movs	r0, #0
 8007e7a:	f7fe ff73 	bl	8006d64 <MY_SD_GetCardState>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1f9      	bne.n	8007e78 <USER_read+0x28>
		{
		}
		res = RES_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	75fb      	strb	r3, [r7, #23]
	  }
	  return res;
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END READ */
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b086      	sub	sp, #24
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	DRESULT res = RES_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_WriteBlocks(0, (uint32_t*)buff,
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	68b9      	ldr	r1, [r7, #8]
 8007eac:	2000      	movs	r0, #0
 8007eae:	f7fe fe57 	bl	8006b60 <MY_SD_WriteBlocks>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d108      	bne.n	8007eca <USER_write+0x38>
	                        (uint32_t)(sector),
	                        count) == BSP_ERROR_NONE)
	  {
	  /* wait until the Write operation is finished */
	    while(MY_SD_GetCardState(0) != BSP_ERROR_NONE)
 8007eb8:	bf00      	nop
 8007eba:	2000      	movs	r0, #0
 8007ebc:	f7fe ff52 	bl	8006d64 <MY_SD_GetCardState>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1f9      	bne.n	8007eba <USER_write+0x28>
	    {
	    }
	    res = RES_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]
	  }

	  return res;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END WRITE */
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b096      	sub	sp, #88	; 0x58
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	603a      	str	r2, [r7, #0]
 8007ede:	71fb      	strb	r3, [r7, #7]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  SD_CardInfo_t CardInfo;

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007eea:	4b26      	ldr	r3, [pc, #152]	; (8007f84 <USER_ioctl+0xb0>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <USER_ioctl+0x28>
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e03f      	b.n	8007f7c <USER_ioctl+0xa8>

	  switch (cmd)
 8007efc:	79bb      	ldrb	r3, [r7, #6]
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d837      	bhi.n	8007f72 <USER_ioctl+0x9e>
 8007f02:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <USER_ioctl+0x34>)
 8007f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f08:	08007f19 	.word	0x08007f19
 8007f0c:	08007f21 	.word	0x08007f21
 8007f10:	08007f3b 	.word	0x08007f3b
 8007f14:	08007f57 	.word	0x08007f57
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007f1e:	e02b      	b.n	8007f78 <USER_ioctl+0xa4>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007f20:	f107 0308 	add.w	r3, r7, #8
 8007f24:	4619      	mov	r1, r3
 8007f26:	2000      	movs	r0, #0
 8007f28:	f7fe ff54 	bl	8006dd4 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007f38:	e01e      	b.n	8007f78 <USER_ioctl+0xa4>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007f3a:	f107 0308 	add.w	r3, r7, #8
 8007f3e:	4619      	mov	r1, r3
 8007f40:	2000      	movs	r0, #0
 8007f42:	f7fe ff47 	bl	8006dd4 <MY_SD_GetCardInfo>
	    *(WORD*)buff = CardInfo.LogBlockSize;
 8007f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007f54:	e010      	b.n	8007f78 <USER_ioctl+0xa4>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007f56:	f107 0308 	add.w	r3, r7, #8
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	f7fe ff39 	bl	8006dd4 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f64:	0a5a      	lsrs	r2, r3, #9
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007f70:	e002      	b.n	8007f78 <USER_ioctl+0xa4>

	  default:
	    res = RES_PARERR;
 8007f72:	2304      	movs	r3, #4
 8007f74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  }

	  return res;
 8007f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END IOCTL */
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3758      	adds	r7, #88	; 0x58
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	2000000c 	.word	0x2000000c

08007f88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	4a08      	ldr	r2, [pc, #32]	; (8007fb8 <disk_status+0x30>)
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	79fa      	ldrb	r2, [r7, #7]
 8007fa0:	4905      	ldr	r1, [pc, #20]	; (8007fb8 <disk_status+0x30>)
 8007fa2:	440a      	add	r2, r1
 8007fa4:	7a12      	ldrb	r2, [r2, #8]
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	4798      	blx	r3
 8007faa:	4603      	mov	r3, r0
 8007fac:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000254 	.word	0x20000254

08007fbc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	4a0d      	ldr	r2, [pc, #52]	; (8008004 <disk_initialize+0x48>)
 8007fce:	5cd3      	ldrb	r3, [r2, r3]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d111      	bne.n	8007ff8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	4a0b      	ldr	r2, [pc, #44]	; (8008004 <disk_initialize+0x48>)
 8007fd8:	2101      	movs	r1, #1
 8007fda:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	4a09      	ldr	r2, [pc, #36]	; (8008004 <disk_initialize+0x48>)
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	79fa      	ldrb	r2, [r7, #7]
 8007fea:	4906      	ldr	r1, [pc, #24]	; (8008004 <disk_initialize+0x48>)
 8007fec:	440a      	add	r2, r1
 8007fee:	7a12      	ldrb	r2, [r2, #8]
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4798      	blx	r3
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20000254 	.word	0x20000254

08008008 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008008:	b590      	push	{r4, r7, lr}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	607a      	str	r2, [r7, #4]
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	4a0a      	ldr	r2, [pc, #40]	; (8008044 <disk_read+0x3c>)
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	689c      	ldr	r4, [r3, #8]
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	4a07      	ldr	r2, [pc, #28]	; (8008044 <disk_read+0x3c>)
 8008028:	4413      	add	r3, r2
 800802a:	7a18      	ldrb	r0, [r3, #8]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	68b9      	ldr	r1, [r7, #8]
 8008032:	47a0      	blx	r4
 8008034:	4603      	mov	r3, r0
 8008036:	75fb      	strb	r3, [r7, #23]
  return res;
 8008038:	7dfb      	ldrb	r3, [r7, #23]
}
 800803a:	4618      	mov	r0, r3
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd90      	pop	{r4, r7, pc}
 8008042:	bf00      	nop
 8008044:	20000254 	.word	0x20000254

08008048 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	607a      	str	r2, [r7, #4]
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	4a0a      	ldr	r2, [pc, #40]	; (8008084 <disk_write+0x3c>)
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	68dc      	ldr	r4, [r3, #12]
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	4a07      	ldr	r2, [pc, #28]	; (8008084 <disk_write+0x3c>)
 8008068:	4413      	add	r3, r2
 800806a:	7a18      	ldrb	r0, [r3, #8]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	47a0      	blx	r4
 8008074:	4603      	mov	r3, r0
 8008076:	75fb      	strb	r3, [r7, #23]
  return res;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
}
 800807a:	4618      	mov	r0, r3
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	bd90      	pop	{r4, r7, pc}
 8008082:	bf00      	nop
 8008084:	20000254 	.word	0x20000254

08008088 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	603a      	str	r2, [r7, #0]
 8008092:	71fb      	strb	r3, [r7, #7]
 8008094:	460b      	mov	r3, r1
 8008096:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	4a09      	ldr	r2, [pc, #36]	; (80080c0 <disk_ioctl+0x38>)
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	79fa      	ldrb	r2, [r7, #7]
 80080a6:	4906      	ldr	r1, [pc, #24]	; (80080c0 <disk_ioctl+0x38>)
 80080a8:	440a      	add	r2, r1
 80080aa:	7a10      	ldrb	r0, [r2, #8]
 80080ac:	79b9      	ldrb	r1, [r7, #6]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	4798      	blx	r3
 80080b2:	4603      	mov	r3, r0
 80080b4:	73fb      	strb	r3, [r7, #15]
  return res;
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20000254 	.word	0x20000254

080080c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3301      	adds	r3, #1
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80080d4:	89fb      	ldrh	r3, [r7, #14]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	b21a      	sxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b21b      	sxth	r3, r3
 80080e0:	4313      	orrs	r3, r2
 80080e2:	b21b      	sxth	r3, r3
 80080e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80080e6:	89fb      	ldrh	r3, [r7, #14]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3303      	adds	r3, #3
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	021b      	lsls	r3, r3, #8
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	3202      	adds	r2, #2
 800810c:	7812      	ldrb	r2, [r2, #0]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	3201      	adds	r2, #1
 800811a:	7812      	ldrb	r2, [r2, #0]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	7812      	ldrb	r2, [r2, #0]
 8008128:	4313      	orrs	r3, r2
 800812a:	60fb      	str	r3, [r7, #12]
	return rv;
 800812c:	68fb      	ldr	r3, [r7, #12]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	460b      	mov	r3, r1
 8008144:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	887a      	ldrh	r2, [r7, #2]
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	887b      	ldrh	r3, [r7, #2]
 8008154:	0a1b      	lsrs	r3, r3, #8
 8008156:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	607a      	str	r2, [r7, #4]
 800815e:	887a      	ldrh	r2, [r7, #2]
 8008160:	b2d2      	uxtb	r2, r2
 8008162:	701a      	strb	r2, [r3, #0]
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	b2d2      	uxtb	r2, r2
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	0a1b      	lsrs	r3, r3, #8
 800818a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	607a      	str	r2, [r7, #4]
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	b2d2      	uxtb	r2, r2
 8008196:	701a      	strb	r2, [r3, #0]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	0a1b      	lsrs	r3, r3, #8
 800819c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	0a1b      	lsrs	r3, r3, #8
 80081ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	701a      	strb	r2, [r3, #0]
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00d      	beq.n	80081fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	1c53      	adds	r3, r2, #1
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	1c59      	adds	r1, r3, #1
 80081ec:	6179      	str	r1, [r7, #20]
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	607b      	str	r3, [r7, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1f1      	bne.n	80081e2 <mem_cpy+0x1a>
	}
}
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800820a:	b480      	push	{r7}
 800820c:	b087      	sub	sp, #28
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	617a      	str	r2, [r7, #20]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3b01      	subs	r3, #1
 800822a:	607b      	str	r3, [r7, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1f3      	bne.n	800821a <mem_set+0x10>
}
 8008232:	bf00      	nop
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800823e:	b480      	push	{r7}
 8008240:	b089      	sub	sp, #36	; 0x24
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	60b9      	str	r1, [r7, #8]
 8008248:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	61fa      	str	r2, [r7, #28]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	4619      	mov	r1, r3
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	61ba      	str	r2, [r7, #24]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	1acb      	subs	r3, r1, r3
 800826a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3b01      	subs	r3, #1
 8008270:	607b      	str	r3, [r7, #4]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <mem_cmp+0x40>
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d0eb      	beq.n	8008256 <mem_cmp+0x18>

	return r;
 800827e:	697b      	ldr	r3, [r7, #20]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3724      	adds	r7, #36	; 0x24
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008296:	e002      	b.n	800829e <chk_chr+0x12>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3301      	adds	r3, #1
 800829c:	607b      	str	r3, [r7, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <chk_chr+0x26>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d1f2      	bne.n	8008298 <chk_chr+0xc>
	return *str;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	781b      	ldrb	r3, [r3, #0]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
	...

080082c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80082ce:	2300      	movs	r3, #0
 80082d0:	60bb      	str	r3, [r7, #8]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	e029      	b.n	800832c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80082d8:	4a27      	ldr	r2, [pc, #156]	; (8008378 <chk_lock+0xb4>)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	011b      	lsls	r3, r3, #4
 80082de:	4413      	add	r3, r2
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d01d      	beq.n	8008322 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80082e6:	4a24      	ldr	r2, [pc, #144]	; (8008378 <chk_lock+0xb4>)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	4413      	add	r3, r2
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d116      	bne.n	8008326 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80082f8:	4a1f      	ldr	r2, [pc, #124]	; (8008378 <chk_lock+0xb4>)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	011b      	lsls	r3, r3, #4
 80082fe:	4413      	add	r3, r2
 8008300:	3304      	adds	r3, #4
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008308:	429a      	cmp	r2, r3
 800830a:	d10c      	bne.n	8008326 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800830c:	4a1a      	ldr	r2, [pc, #104]	; (8008378 <chk_lock+0xb4>)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	011b      	lsls	r3, r3, #4
 8008312:	4413      	add	r3, r2
 8008314:	3308      	adds	r3, #8
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800831c:	429a      	cmp	r2, r3
 800831e:	d102      	bne.n	8008326 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008320:	e007      	b.n	8008332 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008322:	2301      	movs	r3, #1
 8008324:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3301      	adds	r3, #1
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d9d2      	bls.n	80082d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d109      	bne.n	800834c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <chk_lock+0x80>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d101      	bne.n	8008348 <chk_lock+0x84>
 8008344:	2300      	movs	r3, #0
 8008346:	e010      	b.n	800836a <chk_lock+0xa6>
 8008348:	2312      	movs	r3, #18
 800834a:	e00e      	b.n	800836a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d108      	bne.n	8008364 <chk_lock+0xa0>
 8008352:	4a09      	ldr	r2, [pc, #36]	; (8008378 <chk_lock+0xb4>)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	011b      	lsls	r3, r3, #4
 8008358:	4413      	add	r3, r2
 800835a:	330c      	adds	r3, #12
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008362:	d101      	bne.n	8008368 <chk_lock+0xa4>
 8008364:	2310      	movs	r3, #16
 8008366:	e000      	b.n	800836a <chk_lock+0xa6>
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	20000234 	.word	0x20000234

0800837c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008382:	2300      	movs	r3, #0
 8008384:	607b      	str	r3, [r7, #4]
 8008386:	e002      	b.n	800838e <enq_lock+0x12>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3301      	adds	r3, #1
 800838c:	607b      	str	r3, [r7, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d806      	bhi.n	80083a2 <enq_lock+0x26>
 8008394:	4a09      	ldr	r2, [pc, #36]	; (80083bc <enq_lock+0x40>)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	4413      	add	r3, r2
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f2      	bne.n	8008388 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	bf14      	ite	ne
 80083a8:	2301      	movne	r3, #1
 80083aa:	2300      	moveq	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	20000234 	.word	0x20000234

080083c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	e01f      	b.n	8008410 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80083d0:	4a41      	ldr	r2, [pc, #260]	; (80084d8 <inc_lock+0x118>)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	011b      	lsls	r3, r3, #4
 80083d6:	4413      	add	r3, r2
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d113      	bne.n	800840a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80083e2:	4a3d      	ldr	r2, [pc, #244]	; (80084d8 <inc_lock+0x118>)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	4413      	add	r3, r2
 80083ea:	3304      	adds	r3, #4
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d109      	bne.n	800840a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80083f6:	4a38      	ldr	r2, [pc, #224]	; (80084d8 <inc_lock+0x118>)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	4413      	add	r3, r2
 80083fe:	3308      	adds	r3, #8
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008406:	429a      	cmp	r2, r3
 8008408:	d006      	beq.n	8008418 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3301      	adds	r3, #1
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d9dc      	bls.n	80083d0 <inc_lock+0x10>
 8008416:	e000      	b.n	800841a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008418:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b02      	cmp	r3, #2
 800841e:	d132      	bne.n	8008486 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	e002      	b.n	800842c <inc_lock+0x6c>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3301      	adds	r3, #1
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d806      	bhi.n	8008440 <inc_lock+0x80>
 8008432:	4a29      	ldr	r2, [pc, #164]	; (80084d8 <inc_lock+0x118>)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	011b      	lsls	r3, r3, #4
 8008438:	4413      	add	r3, r2
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1f2      	bne.n	8008426 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d101      	bne.n	800844a <inc_lock+0x8a>
 8008446:	2300      	movs	r3, #0
 8008448:	e040      	b.n	80084cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	4922      	ldr	r1, [pc, #136]	; (80084d8 <inc_lock+0x118>)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	440b      	add	r3, r1
 8008456:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	491e      	ldr	r1, [pc, #120]	; (80084d8 <inc_lock+0x118>)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	011b      	lsls	r3, r3, #4
 8008462:	440b      	add	r3, r1
 8008464:	3304      	adds	r3, #4
 8008466:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	695a      	ldr	r2, [r3, #20]
 800846c:	491a      	ldr	r1, [pc, #104]	; (80084d8 <inc_lock+0x118>)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	440b      	add	r3, r1
 8008474:	3308      	adds	r3, #8
 8008476:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008478:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <inc_lock+0x118>)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	4413      	add	r3, r2
 8008480:	330c      	adds	r3, #12
 8008482:	2200      	movs	r2, #0
 8008484:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <inc_lock+0xe0>
 800848c:	4a12      	ldr	r2, [pc, #72]	; (80084d8 <inc_lock+0x118>)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	4413      	add	r3, r2
 8008494:	330c      	adds	r3, #12
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <inc_lock+0xe0>
 800849c:	2300      	movs	r3, #0
 800849e:	e015      	b.n	80084cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d108      	bne.n	80084b8 <inc_lock+0xf8>
 80084a6:	4a0c      	ldr	r2, [pc, #48]	; (80084d8 <inc_lock+0x118>)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	4413      	add	r3, r2
 80084ae:	330c      	adds	r3, #12
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	3301      	adds	r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	e001      	b.n	80084bc <inc_lock+0xfc>
 80084b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084bc:	4906      	ldr	r1, [pc, #24]	; (80084d8 <inc_lock+0x118>)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	440b      	add	r3, r1
 80084c4:	330c      	adds	r3, #12
 80084c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3301      	adds	r3, #1
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	20000234 	.word	0x20000234

080084dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	607b      	str	r3, [r7, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d825      	bhi.n	800853c <dec_lock+0x60>
		n = Files[i].ctr;
 80084f0:	4a17      	ldr	r2, [pc, #92]	; (8008550 <dec_lock+0x74>)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	011b      	lsls	r3, r3, #4
 80084f6:	4413      	add	r3, r2
 80084f8:	330c      	adds	r3, #12
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80084fe:	89fb      	ldrh	r3, [r7, #14]
 8008500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008504:	d101      	bne.n	800850a <dec_lock+0x2e>
 8008506:	2300      	movs	r3, #0
 8008508:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800850a:	89fb      	ldrh	r3, [r7, #14]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <dec_lock+0x3a>
 8008510:	89fb      	ldrh	r3, [r7, #14]
 8008512:	3b01      	subs	r3, #1
 8008514:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008516:	4a0e      	ldr	r2, [pc, #56]	; (8008550 <dec_lock+0x74>)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	4413      	add	r3, r2
 800851e:	330c      	adds	r3, #12
 8008520:	89fa      	ldrh	r2, [r7, #14]
 8008522:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008524:	89fb      	ldrh	r3, [r7, #14]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d105      	bne.n	8008536 <dec_lock+0x5a>
 800852a:	4a09      	ldr	r2, [pc, #36]	; (8008550 <dec_lock+0x74>)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	4413      	add	r3, r2
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	737b      	strb	r3, [r7, #13]
 800853a:	e001      	b.n	8008540 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800853c:	2302      	movs	r3, #2
 800853e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008540:	7b7b      	ldrb	r3, [r7, #13]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	20000234 	.word	0x20000234

08008554 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800855c:	2300      	movs	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	e010      	b.n	8008584 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008562:	4a0d      	ldr	r2, [pc, #52]	; (8008598 <clear_lock+0x44>)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	4413      	add	r3, r2
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	429a      	cmp	r2, r3
 8008570:	d105      	bne.n	800857e <clear_lock+0x2a>
 8008572:	4a09      	ldr	r2, [pc, #36]	; (8008598 <clear_lock+0x44>)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	011b      	lsls	r3, r3, #4
 8008578:	4413      	add	r3, r2
 800857a:	2200      	movs	r2, #0
 800857c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3301      	adds	r3, #1
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d9eb      	bls.n	8008562 <clear_lock+0xe>
	}
}
 800858a:	bf00      	nop
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20000234 	.word	0x20000234

0800859c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	78db      	ldrb	r3, [r3, #3]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d034      	beq.n	800861a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7858      	ldrb	r0, [r3, #1]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085c0:	2301      	movs	r3, #1
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	f7ff fd40 	bl	8008048 <disk_write>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	73fb      	strb	r3, [r7, #15]
 80085d2:	e022      	b.n	800861a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	1ad2      	subs	r2, r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d217      	bcs.n	800861a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	789b      	ldrb	r3, [r3, #2]
 80085ee:	613b      	str	r3, [r7, #16]
 80085f0:	e010      	b.n	8008614 <sync_window+0x78>
					wsect += fs->fsize;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	4413      	add	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	7858      	ldrb	r0, [r3, #1]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008606:	2301      	movs	r3, #1
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	f7ff fd1d 	bl	8008048 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	3b01      	subs	r3, #1
 8008612:	613b      	str	r3, [r7, #16]
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d8eb      	bhi.n	80085f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800861a:	7bfb      	ldrb	r3, [r7, #15]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	429a      	cmp	r2, r3
 800863a:	d01b      	beq.n	8008674 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7ff ffad 	bl	800859c <sync_window>
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d113      	bne.n	8008674 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7858      	ldrb	r0, [r3, #1]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008656:	2301      	movs	r3, #1
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	f7ff fcd5 	bl	8008008 <disk_read>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008664:	f04f 33ff 	mov.w	r3, #4294967295
 8008668:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800866a:	2301      	movs	r3, #1
 800866c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008674:	7bfb      	ldrb	r3, [r7, #15]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff ff87 	bl	800859c <sync_window>
 800868e:	4603      	mov	r3, r0
 8008690:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d158      	bne.n	800874a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b03      	cmp	r3, #3
 800869e:	d148      	bne.n	8008732 <sync_fs+0xb2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	791b      	ldrb	r3, [r3, #4]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d144      	bne.n	8008732 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3330      	adds	r3, #48	; 0x30
 80086ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086b0:	2100      	movs	r1, #0
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff fda9 	bl	800820a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3330      	adds	r3, #48	; 0x30
 80086bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086c0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff fd38 	bl	800813a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3330      	adds	r3, #48	; 0x30
 80086ce:	4921      	ldr	r1, [pc, #132]	; (8008754 <sync_fs+0xd4>)
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7ff fd4d 	bl	8008170 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3330      	adds	r3, #48	; 0x30
 80086da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80086de:	491e      	ldr	r1, [pc, #120]	; (8008758 <sync_fs+0xd8>)
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff fd45 	bl	8008170 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3330      	adds	r3, #48	; 0x30
 80086ea:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	4619      	mov	r1, r3
 80086f4:	4610      	mov	r0, r2
 80086f6:	f7ff fd3b 	bl	8008170 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3330      	adds	r3, #48	; 0x30
 80086fe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	4619      	mov	r1, r3
 8008708:	4610      	mov	r0, r2
 800870a:	f7ff fd31 	bl	8008170 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	7858      	ldrb	r0, [r3, #1]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008726:	2301      	movs	r3, #1
 8008728:	f7ff fc8e 	bl	8008048 <disk_write>
			fs->fsi_flag = 0;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	2200      	movs	r2, #0
 8008738:	2100      	movs	r1, #0
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fca4 	bl	8008088 <disk_ioctl>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <sync_fs+0xca>
 8008746:	2301      	movs	r3, #1
 8008748:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	41615252 	.word	0x41615252
 8008758:	61417272 	.word	0x61417272

0800875c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	3b02      	subs	r3, #2
 800876a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	3b02      	subs	r3, #2
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d301      	bcc.n	800877c <clust2sect+0x20>
 8008778:	2300      	movs	r3, #0
 800877a:	e008      	b.n	800878e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	895b      	ldrh	r3, [r3, #10]
 8008780:	461a      	mov	r2, r3
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	fb03 f202 	mul.w	r2, r3, r2
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	4413      	add	r3, r2
}
 800878e:	4618      	mov	r0, r3
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b086      	sub	sp, #24
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d904      	bls.n	80087ba <get_fat+0x20>
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d302      	bcc.n	80087c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80087ba:	2301      	movs	r3, #1
 80087bc:	617b      	str	r3, [r7, #20]
 80087be:	e08c      	b.n	80088da <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80087c0:	f04f 33ff 	mov.w	r3, #4294967295
 80087c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d045      	beq.n	800885a <get_fat+0xc0>
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d05d      	beq.n	800888e <get_fat+0xf4>
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d177      	bne.n	80088c6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	60fb      	str	r3, [r7, #12]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	4413      	add	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	6a1a      	ldr	r2, [r3, #32]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	0a5b      	lsrs	r3, r3, #9
 80087ec:	4413      	add	r3, r2
 80087ee:	4619      	mov	r1, r3
 80087f0:	6938      	ldr	r0, [r7, #16]
 80087f2:	f7ff ff17 	bl	8008624 <move_window>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d167      	bne.n	80088cc <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	1c5a      	adds	r2, r3, #1
 8008800:	60fa      	str	r2, [r7, #12]
 8008802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	4413      	add	r3, r2
 800880a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800880e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	6a1a      	ldr	r2, [r3, #32]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	0a5b      	lsrs	r3, r3, #9
 8008818:	4413      	add	r3, r2
 800881a:	4619      	mov	r1, r3
 800881c:	6938      	ldr	r0, [r7, #16]
 800881e:	f7ff ff01 	bl	8008624 <move_window>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d153      	bne.n	80088d0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4413      	add	r3, r2
 8008832:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008836:	021b      	lsls	r3, r3, #8
 8008838:	461a      	mov	r2, r3
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	4313      	orrs	r3, r2
 800883e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d002      	beq.n	8008850 <get_fat+0xb6>
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	091b      	lsrs	r3, r3, #4
 800884e:	e002      	b.n	8008856 <get_fat+0xbc>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008856:	617b      	str	r3, [r7, #20]
			break;
 8008858:	e03f      	b.n	80088da <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6a1a      	ldr	r2, [r3, #32]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	0a1b      	lsrs	r3, r3, #8
 8008862:	4413      	add	r3, r2
 8008864:	4619      	mov	r1, r3
 8008866:	6938      	ldr	r0, [r7, #16]
 8008868:	f7ff fedc 	bl	8008624 <move_window>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d130      	bne.n	80088d4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008880:	4413      	add	r3, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff fc1e 	bl	80080c4 <ld_word>
 8008888:	4603      	mov	r3, r0
 800888a:	617b      	str	r3, [r7, #20]
			break;
 800888c:	e025      	b.n	80088da <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	6a1a      	ldr	r2, [r3, #32]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	09db      	lsrs	r3, r3, #7
 8008896:	4413      	add	r3, r2
 8008898:	4619      	mov	r1, r3
 800889a:	6938      	ldr	r0, [r7, #16]
 800889c:	f7ff fec2 	bl	8008624 <move_window>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d118      	bne.n	80088d8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80088b4:	4413      	add	r3, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff fc1c 	bl	80080f4 <ld_dword>
 80088bc:	4603      	mov	r3, r0
 80088be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80088c2:	617b      	str	r3, [r7, #20]
			break;
 80088c4:	e009      	b.n	80088da <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80088c6:	2301      	movs	r3, #1
 80088c8:	617b      	str	r3, [r7, #20]
 80088ca:	e006      	b.n	80088da <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088cc:	bf00      	nop
 80088ce:	e004      	b.n	80088da <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088d0:	bf00      	nop
 80088d2:	e002      	b.n	80088da <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80088d4:	bf00      	nop
 80088d6:	e000      	b.n	80088da <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80088d8:	bf00      	nop
		}
	}

	return val;
 80088da:	697b      	ldr	r3, [r7, #20]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80088e4:	b590      	push	{r4, r7, lr}
 80088e6:	b089      	sub	sp, #36	; 0x24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80088f0:	2302      	movs	r3, #2
 80088f2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	f240 80d6 	bls.w	8008aa8 <put_fat+0x1c4>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	429a      	cmp	r2, r3
 8008904:	f080 80d0 	bcs.w	8008aa8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d073      	beq.n	80089f8 <put_fat+0x114>
 8008910:	2b03      	cmp	r3, #3
 8008912:	f000 8091 	beq.w	8008a38 <put_fat+0x154>
 8008916:	2b01      	cmp	r3, #1
 8008918:	f040 80c6 	bne.w	8008aa8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	61bb      	str	r3, [r7, #24]
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	085b      	lsrs	r3, r3, #1
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	4413      	add	r3, r2
 8008928:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6a1a      	ldr	r2, [r3, #32]
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	0a5b      	lsrs	r3, r3, #9
 8008932:	4413      	add	r3, r2
 8008934:	4619      	mov	r1, r3
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f7ff fe74 	bl	8008624 <move_window>
 800893c:	4603      	mov	r3, r0
 800893e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008940:	7ffb      	ldrb	r3, [r7, #31]
 8008942:	2b00      	cmp	r3, #0
 8008944:	f040 80a9 	bne.w	8008a9a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	1c59      	adds	r1, r3, #1
 8008952:	61b9      	str	r1, [r7, #24]
 8008954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008958:	4413      	add	r3, r2
 800895a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00d      	beq.n	8008982 <put_fat+0x9e>
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	b25b      	sxtb	r3, r3
 800896c:	f003 030f 	and.w	r3, r3, #15
 8008970:	b25a      	sxtb	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	b2db      	uxtb	r3, r3
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	b25b      	sxtb	r3, r3
 800897a:	4313      	orrs	r3, r2
 800897c:	b25b      	sxtb	r3, r3
 800897e:	b2db      	uxtb	r3, r3
 8008980:	e001      	b.n	8008986 <put_fat+0xa2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2201      	movs	r2, #1
 800898e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a1a      	ldr	r2, [r3, #32]
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	0a5b      	lsrs	r3, r3, #9
 8008998:	4413      	add	r3, r2
 800899a:	4619      	mov	r1, r3
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f7ff fe41 	bl	8008624 <move_window>
 80089a2:	4603      	mov	r3, r0
 80089a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089a6:	7ffb      	ldrb	r3, [r7, #31]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d178      	bne.n	8008a9e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b8:	4413      	add	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d003      	beq.n	80089ce <put_fat+0xea>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	091b      	lsrs	r3, r3, #4
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	e00e      	b.n	80089ec <put_fat+0x108>
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	b25b      	sxtb	r3, r3
 80089d4:	f023 030f 	bic.w	r3, r3, #15
 80089d8:	b25a      	sxtb	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	0a1b      	lsrs	r3, r3, #8
 80089de:	b25b      	sxtb	r3, r3
 80089e0:	f003 030f 	and.w	r3, r3, #15
 80089e4:	b25b      	sxtb	r3, r3
 80089e6:	4313      	orrs	r3, r2
 80089e8:	b25b      	sxtb	r3, r3
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2201      	movs	r2, #1
 80089f4:	70da      	strb	r2, [r3, #3]
			break;
 80089f6:	e057      	b.n	8008aa8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a1a      	ldr	r2, [r3, #32]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	0a1b      	lsrs	r3, r3, #8
 8008a00:	4413      	add	r3, r2
 8008a02:	4619      	mov	r1, r3
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f7ff fe0d 	bl	8008624 <move_window>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a0e:	7ffb      	ldrb	r3, [r7, #31]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d146      	bne.n	8008aa2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008a22:	4413      	add	r3, r2
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	b292      	uxth	r2, r2
 8008a28:	4611      	mov	r1, r2
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7ff fb85 	bl	800813a <st_word>
			fs->wflag = 1;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	70da      	strb	r2, [r3, #3]
			break;
 8008a36:	e037      	b.n	8008aa8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a1a      	ldr	r2, [r3, #32]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	09db      	lsrs	r3, r3, #7
 8008a40:	4413      	add	r3, r2
 8008a42:	4619      	mov	r1, r3
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7ff fded 	bl	8008624 <move_window>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a4e:	7ffb      	ldrb	r3, [r7, #31]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d128      	bne.n	8008aa6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008a68:	4413      	add	r3, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7ff fb42 	bl	80080f4 <ld_dword>
 8008a70:	4603      	mov	r3, r0
 8008a72:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008a76:	4323      	orrs	r3, r4
 8008a78:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008a88:	4413      	add	r3, r2
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7ff fb6f 	bl	8008170 <st_dword>
			fs->wflag = 1;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	70da      	strb	r2, [r3, #3]
			break;
 8008a98:	e006      	b.n	8008aa8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008a9a:	bf00      	nop
 8008a9c:	e004      	b.n	8008aa8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008a9e:	bf00      	nop
 8008aa0:	e002      	b.n	8008aa8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008aa2:	bf00      	nop
 8008aa4:	e000      	b.n	8008aa8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008aa6:	bf00      	nop
		}
	}
	return res;
 8008aa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3724      	adds	r7, #36	; 0x24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd90      	pop	{r4, r7, pc}

08008ab2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b088      	sub	sp, #32
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d904      	bls.n	8008ad8 <remove_chain+0x26>
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d301      	bcc.n	8008adc <remove_chain+0x2a>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	e04b      	b.n	8008b74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00c      	beq.n	8008afc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	69b8      	ldr	r0, [r7, #24]
 8008aea:	f7ff fefb 	bl	80088e4 <put_fat>
 8008aee:	4603      	mov	r3, r0
 8008af0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008af2:	7ffb      	ldrb	r3, [r7, #31]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <remove_chain+0x4a>
 8008af8:	7ffb      	ldrb	r3, [r7, #31]
 8008afa:	e03b      	b.n	8008b74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f7ff fe4b 	bl	800879a <get_fat>
 8008b04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d031      	beq.n	8008b70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <remove_chain+0x64>
 8008b12:	2302      	movs	r3, #2
 8008b14:	e02e      	b.n	8008b74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1c:	d101      	bne.n	8008b22 <remove_chain+0x70>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e028      	b.n	8008b74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008b22:	2200      	movs	r2, #0
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	69b8      	ldr	r0, [r7, #24]
 8008b28:	f7ff fedc 	bl	80088e4 <put_fat>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008b30:	7ffb      	ldrb	r3, [r7, #31]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <remove_chain+0x88>
 8008b36:	7ffb      	ldrb	r3, [r7, #31]
 8008b38:	e01c      	b.n	8008b74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	691a      	ldr	r2, [r3, #16]
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	3b02      	subs	r3, #2
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d20b      	bcs.n	8008b60 <remove_chain+0xae>
			fs->free_clst++;
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	791b      	ldrb	r3, [r3, #4]
 8008b56:	f043 0301 	orr.w	r3, r3, #1
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d3c6      	bcc.n	8008afc <remove_chain+0x4a>
 8008b6e:	e000      	b.n	8008b72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008b70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3720      	adds	r7, #32
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10d      	bne.n	8008bae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d004      	beq.n	8008ba8 <create_chain+0x2c>
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d31b      	bcc.n	8008be0 <create_chain+0x64>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	61bb      	str	r3, [r7, #24]
 8008bac:	e018      	b.n	8008be0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff fdf2 	bl	800879a <get_fat>
 8008bb6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d801      	bhi.n	8008bc2 <create_chain+0x46>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e070      	b.n	8008ca4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc8:	d101      	bne.n	8008bce <create_chain+0x52>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	e06a      	b.n	8008ca4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d201      	bcs.n	8008bdc <create_chain+0x60>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	e063      	b.n	8008ca4 <create_chain+0x128>
		scl = clst;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	3301      	adds	r3, #1
 8008be8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d307      	bcc.n	8008c04 <create_chain+0x88>
				ncl = 2;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008bf8:	69fa      	ldr	r2, [r7, #28]
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d901      	bls.n	8008c04 <create_chain+0x88>
 8008c00:	2300      	movs	r3, #0
 8008c02:	e04f      	b.n	8008ca4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008c04:	69f9      	ldr	r1, [r7, #28]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fdc7 	bl	800879a <get_fat>
 8008c0c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00e      	beq.n	8008c32 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d003      	beq.n	8008c22 <create_chain+0xa6>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c20:	d101      	bne.n	8008c26 <create_chain+0xaa>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	e03e      	b.n	8008ca4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d1da      	bne.n	8008be4 <create_chain+0x68>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e038      	b.n	8008ca4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008c32:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008c34:	f04f 32ff 	mov.w	r2, #4294967295
 8008c38:	69f9      	ldr	r1, [r7, #28]
 8008c3a:	6938      	ldr	r0, [r7, #16]
 8008c3c:	f7ff fe52 	bl	80088e4 <put_fat>
 8008c40:	4603      	mov	r3, r0
 8008c42:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d109      	bne.n	8008c5e <create_chain+0xe2>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d006      	beq.n	8008c5e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008c50:	69fa      	ldr	r2, [r7, #28]
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6938      	ldr	r0, [r7, #16]
 8008c56:	f7ff fe45 	bl	80088e4 <put_fat>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d116      	bne.n	8008c92 <create_chain+0x116>
		fs->last_clst = ncl;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	691a      	ldr	r2, [r3, #16]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	3b02      	subs	r3, #2
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d804      	bhi.n	8008c82 <create_chain+0x106>
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	1e5a      	subs	r2, r3, #1
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	791b      	ldrb	r3, [r3, #4]
 8008c86:	f043 0301 	orr.w	r3, r3, #1
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	711a      	strb	r2, [r3, #4]
 8008c90:	e007      	b.n	8008ca2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d102      	bne.n	8008c9e <create_chain+0x122>
 8008c98:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9c:	e000      	b.n	8008ca0 <create_chain+0x124>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008ca2:	69fb      	ldr	r3, [r7, #28]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3720      	adds	r7, #32
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	0a5b      	lsrs	r3, r3, #9
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	8952      	ldrh	r2, [r2, #10]
 8008ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	1d1a      	adds	r2, r3, #4
 8008cd6:	613a      	str	r2, [r7, #16]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <clmt_clust+0x3a>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	e010      	b.n	8008d08 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d307      	bcc.n	8008cfe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	617b      	str	r3, [r7, #20]
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	3304      	adds	r3, #4
 8008cfa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008cfc:	e7e9      	b.n	8008cd2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008cfe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	4413      	add	r3, r2
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d2a:	d204      	bcs.n	8008d36 <dir_sdi+0x22>
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	f003 031f 	and.w	r3, r3, #31
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008d36:	2302      	movs	r3, #2
 8008d38:	e063      	b.n	8008e02 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <dir_sdi+0x46>
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d902      	bls.n	8008d5a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10c      	bne.n	8008d7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	095b      	lsrs	r3, r3, #5
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	8912      	ldrh	r2, [r2, #8]
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d301      	bcc.n	8008d70 <dir_sdi+0x5c>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e048      	b.n	8008e02 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	61da      	str	r2, [r3, #28]
 8008d78:	e029      	b.n	8008dce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	895b      	ldrh	r3, [r3, #10]
 8008d7e:	025b      	lsls	r3, r3, #9
 8008d80:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d82:	e019      	b.n	8008db8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6979      	ldr	r1, [r7, #20]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7ff fd06 	bl	800879a <get_fat>
 8008d8e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d96:	d101      	bne.n	8008d9c <dir_sdi+0x88>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e032      	b.n	8008e02 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d904      	bls.n	8008dac <dir_sdi+0x98>
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d301      	bcc.n	8008db0 <dir_sdi+0x9c>
 8008dac:	2302      	movs	r3, #2
 8008dae:	e028      	b.n	8008e02 <dir_sdi+0xee>
			ofs -= csz;
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d2e1      	bcs.n	8008d84 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008dc0:	6979      	ldr	r1, [r7, #20]
 8008dc2:	6938      	ldr	r0, [r7, #16]
 8008dc4:	f7ff fcca 	bl	800875c <clust2sect>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <dir_sdi+0xcc>
 8008ddc:	2302      	movs	r3, #2
 8008dde:	e010      	b.n	8008e02 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	69da      	ldr	r2, [r3, #28]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	0a5b      	lsrs	r3, r3, #9
 8008de8:	441a      	add	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfa:	441a      	add	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	3320      	adds	r3, #32
 8008e20:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <dir_next+0x28>
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e30:	d301      	bcc.n	8008e36 <dir_next+0x2c>
 8008e32:	2304      	movs	r3, #4
 8008e34:	e0aa      	b.n	8008f8c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f040 8098 	bne.w	8008f72 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10b      	bne.n	8008e6c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	095b      	lsrs	r3, r3, #5
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	8912      	ldrh	r2, [r2, #8]
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	f0c0 8088 	bcc.w	8008f72 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	61da      	str	r2, [r3, #28]
 8008e68:	2304      	movs	r3, #4
 8008e6a:	e08f      	b.n	8008f8c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	0a5b      	lsrs	r3, r3, #9
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	8952      	ldrh	r2, [r2, #10]
 8008e74:	3a01      	subs	r2, #1
 8008e76:	4013      	ands	r3, r2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d17a      	bne.n	8008f72 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	4619      	mov	r1, r3
 8008e84:	4610      	mov	r0, r2
 8008e86:	f7ff fc88 	bl	800879a <get_fat>
 8008e8a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d801      	bhi.n	8008e96 <dir_next+0x8c>
 8008e92:	2302      	movs	r3, #2
 8008e94:	e07a      	b.n	8008f8c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9c:	d101      	bne.n	8008ea2 <dir_next+0x98>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e074      	b.n	8008f8c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d358      	bcc.n	8008f5e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d104      	bne.n	8008ebc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	61da      	str	r2, [r3, #28]
 8008eb8:	2304      	movs	r3, #4
 8008eba:	e067      	b.n	8008f8c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	f7ff fe59 	bl	8008b7c <create_chain>
 8008eca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <dir_next+0xcc>
 8008ed2:	2307      	movs	r3, #7
 8008ed4:	e05a      	b.n	8008f8c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <dir_next+0xd6>
 8008edc:	2302      	movs	r3, #2
 8008ede:	e055      	b.n	8008f8c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee6:	d101      	bne.n	8008eec <dir_next+0xe2>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e04f      	b.n	8008f8c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7ff fb55 	bl	800859c <sync_window>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <dir_next+0xf2>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e047      	b.n	8008f8c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	3330      	adds	r3, #48	; 0x30
 8008f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f04:	2100      	movs	r1, #0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff f97f 	bl	800820a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	613b      	str	r3, [r7, #16]
 8008f10:	6979      	ldr	r1, [r7, #20]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7ff fc22 	bl	800875c <clust2sect>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f1e:	e012      	b.n	8008f46 <dir_next+0x13c>
						fs->wflag = 1;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2201      	movs	r2, #1
 8008f24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f7ff fb38 	bl	800859c <sync_window>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <dir_next+0x12c>
 8008f32:	2301      	movs	r3, #1
 8008f34:	e02a      	b.n	8008f8c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	613b      	str	r3, [r7, #16]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	895b      	ldrh	r3, [r3, #10]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d3e6      	bcc.n	8008f20 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	1ad2      	subs	r2, r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008f64:	6979      	ldr	r1, [r7, #20]
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7ff fbf8 	bl	800875c <clust2sect>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f84:	441a      	add	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff feb4 	bl	8008d14 <dir_sdi>
 8008fac:	4603      	mov	r3, r0
 8008fae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d12b      	bne.n	800900e <dir_alloc+0x7a>
		n = 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f7ff fb2f 	bl	8008624 <move_window>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11d      	bne.n	800900c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2be5      	cmp	r3, #229	; 0xe5
 8008fd8:	d004      	beq.n	8008fe4 <dir_alloc+0x50>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d107      	bne.n	8008ff4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	613b      	str	r3, [r7, #16]
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d102      	bne.n	8008ff8 <dir_alloc+0x64>
 8008ff2:	e00c      	b.n	800900e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff ff05 	bl	8008e0a <dir_next>
 8009000:	4603      	mov	r3, r0
 8009002:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009004:	7dfb      	ldrb	r3, [r7, #23]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d0d7      	beq.n	8008fba <dir_alloc+0x26>
 800900a:	e000      	b.n	800900e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800900c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	2b04      	cmp	r3, #4
 8009012:	d101      	bne.n	8009018 <dir_alloc+0x84>
 8009014:	2307      	movs	r3, #7
 8009016:	75fb      	strb	r3, [r7, #23]
	return res;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	331a      	adds	r3, #26
 8009030:	4618      	mov	r0, r3
 8009032:	f7ff f847 	bl	80080c4 <ld_word>
 8009036:	4603      	mov	r3, r0
 8009038:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b03      	cmp	r3, #3
 8009040:	d109      	bne.n	8009056 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	3314      	adds	r3, #20
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff f83c 	bl	80080c4 <ld_word>
 800904c:	4603      	mov	r3, r0
 800904e:	041b      	lsls	r3, r3, #16
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009056:	68fb      	ldr	r3, [r7, #12]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	331a      	adds	r3, #26
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	b292      	uxth	r2, r2
 8009074:	4611      	mov	r1, r2
 8009076:	4618      	mov	r0, r3
 8009078:	f7ff f85f 	bl	800813a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	2b03      	cmp	r3, #3
 8009082:	d109      	bne.n	8009098 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f103 0214 	add.w	r2, r3, #20
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	0c1b      	lsrs	r3, r3, #16
 800908e:	b29b      	uxth	r3, r3
 8009090:	4619      	mov	r1, r3
 8009092:	4610      	mov	r0, r2
 8009094:	f7ff f851 	bl	800813a <st_word>
	}
}
 8009098:	bf00      	nop
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80090ae:	2100      	movs	r1, #0
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7ff fe2f 	bl	8008d14 <dir_sdi>
 80090b6:	4603      	mov	r3, r0
 80090b8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <dir_find+0x24>
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
 80090c2:	e03e      	b.n	8009142 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	4619      	mov	r1, r3
 80090ca:	6938      	ldr	r0, [r7, #16]
 80090cc:	f7ff faaa 	bl	8008624 <move_window>
 80090d0:	4603      	mov	r3, r0
 80090d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80090d4:	7dfb      	ldrb	r3, [r7, #23]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d12f      	bne.n	800913a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d102      	bne.n	80090ee <dir_find+0x4e>
 80090e8:	2304      	movs	r3, #4
 80090ea:	75fb      	strb	r3, [r7, #23]
 80090ec:	e028      	b.n	8009140 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	330b      	adds	r3, #11
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	330b      	adds	r3, #11
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	f003 0308 	and.w	r3, r3, #8
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <dir_find+0x86>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a18      	ldr	r0, [r3, #32]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	3324      	adds	r3, #36	; 0x24
 8009118:	220b      	movs	r2, #11
 800911a:	4619      	mov	r1, r3
 800911c:	f7ff f88f 	bl	800823e <mem_cmp>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00b      	beq.n	800913e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009126:	2100      	movs	r1, #0
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7ff fe6e 	bl	8008e0a <dir_next>
 800912e:	4603      	mov	r3, r0
 8009130:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0c5      	beq.n	80090c4 <dir_find+0x24>
 8009138:	e002      	b.n	8009140 <dir_find+0xa0>
		if (res != FR_OK) break;
 800913a:	bf00      	nop
 800913c:	e000      	b.n	8009140 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800913e:	bf00      	nop

	return res;
 8009140:	7dfb      	ldrb	r3, [r7, #23]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009158:	2101      	movs	r1, #1
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff ff1a 	bl	8008f94 <dir_alloc>
 8009160:	4603      	mov	r3, r0
 8009162:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d11c      	bne.n	80091a4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	4619      	mov	r1, r3
 8009170:	68b8      	ldr	r0, [r7, #8]
 8009172:	f7ff fa57 	bl	8008624 <move_window>
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d111      	bne.n	80091a4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	2220      	movs	r2, #32
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff f83e 	bl	800820a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a18      	ldr	r0, [r3, #32]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3324      	adds	r3, #36	; 0x24
 8009196:	220b      	movs	r2, #11
 8009198:	4619      	mov	r1, r3
 800919a:	f7ff f815 	bl	80081c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2201      	movs	r2, #1
 80091a2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b088      	sub	sp, #32
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60fb      	str	r3, [r7, #12]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3324      	adds	r3, #36	; 0x24
 80091c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80091c6:	220b      	movs	r2, #11
 80091c8:	2120      	movs	r1, #32
 80091ca:	68b8      	ldr	r0, [r7, #8]
 80091cc:	f7ff f81d 	bl	800820a <mem_set>
	si = i = 0; ni = 8;
 80091d0:	2300      	movs	r3, #0
 80091d2:	613b      	str	r3, [r7, #16]
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	2308      	movs	r3, #8
 80091da:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	617a      	str	r2, [r7, #20]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4413      	add	r3, r2
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80091ea:	7ffb      	ldrb	r3, [r7, #31]
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	d94e      	bls.n	800928e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80091f0:	7ffb      	ldrb	r3, [r7, #31]
 80091f2:	2b2f      	cmp	r3, #47	; 0x2f
 80091f4:	d006      	beq.n	8009204 <create_name+0x54>
 80091f6:	7ffb      	ldrb	r3, [r7, #31]
 80091f8:	2b5c      	cmp	r3, #92	; 0x5c
 80091fa:	d110      	bne.n	800921e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80091fc:	e002      	b.n	8009204 <create_name+0x54>
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	3301      	adds	r3, #1
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	4413      	add	r3, r2
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b2f      	cmp	r3, #47	; 0x2f
 800920e:	d0f6      	beq.n	80091fe <create_name+0x4e>
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	4413      	add	r3, r2
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b5c      	cmp	r3, #92	; 0x5c
 800921a:	d0f0      	beq.n	80091fe <create_name+0x4e>
			break;
 800921c:	e038      	b.n	8009290 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800921e:	7ffb      	ldrb	r3, [r7, #31]
 8009220:	2b2e      	cmp	r3, #46	; 0x2e
 8009222:	d003      	beq.n	800922c <create_name+0x7c>
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	429a      	cmp	r2, r3
 800922a:	d30c      	bcc.n	8009246 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	2b0b      	cmp	r3, #11
 8009230:	d002      	beq.n	8009238 <create_name+0x88>
 8009232:	7ffb      	ldrb	r3, [r7, #31]
 8009234:	2b2e      	cmp	r3, #46	; 0x2e
 8009236:	d001      	beq.n	800923c <create_name+0x8c>
 8009238:	2306      	movs	r3, #6
 800923a:	e044      	b.n	80092c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800923c:	2308      	movs	r3, #8
 800923e:	613b      	str	r3, [r7, #16]
 8009240:	230b      	movs	r3, #11
 8009242:	61bb      	str	r3, [r7, #24]
			continue;
 8009244:	e022      	b.n	800928c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009246:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800924a:	2b00      	cmp	r3, #0
 800924c:	da04      	bge.n	8009258 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800924e:	7ffb      	ldrb	r3, [r7, #31]
 8009250:	3b80      	subs	r3, #128	; 0x80
 8009252:	4a1f      	ldr	r2, [pc, #124]	; (80092d0 <create_name+0x120>)
 8009254:	5cd3      	ldrb	r3, [r2, r3]
 8009256:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009258:	7ffb      	ldrb	r3, [r7, #31]
 800925a:	4619      	mov	r1, r3
 800925c:	481d      	ldr	r0, [pc, #116]	; (80092d4 <create_name+0x124>)
 800925e:	f7ff f815 	bl	800828c <chk_chr>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <create_name+0xbc>
 8009268:	2306      	movs	r3, #6
 800926a:	e02c      	b.n	80092c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800926c:	7ffb      	ldrb	r3, [r7, #31]
 800926e:	2b60      	cmp	r3, #96	; 0x60
 8009270:	d905      	bls.n	800927e <create_name+0xce>
 8009272:	7ffb      	ldrb	r3, [r7, #31]
 8009274:	2b7a      	cmp	r3, #122	; 0x7a
 8009276:	d802      	bhi.n	800927e <create_name+0xce>
 8009278:	7ffb      	ldrb	r3, [r7, #31]
 800927a:	3b20      	subs	r3, #32
 800927c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	613a      	str	r2, [r7, #16]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	4413      	add	r3, r2
 8009288:	7ffa      	ldrb	r2, [r7, #31]
 800928a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800928c:	e7a6      	b.n	80091dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800928e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	441a      	add	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <create_name+0xf4>
 80092a0:	2306      	movs	r3, #6
 80092a2:	e010      	b.n	80092c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	2be5      	cmp	r3, #229	; 0xe5
 80092aa:	d102      	bne.n	80092b2 <create_name+0x102>
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2205      	movs	r2, #5
 80092b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80092b2:	7ffb      	ldrb	r3, [r7, #31]
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	d801      	bhi.n	80092bc <create_name+0x10c>
 80092b8:	2204      	movs	r2, #4
 80092ba:	e000      	b.n	80092be <create_name+0x10e>
 80092bc:	2200      	movs	r2, #0
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	330b      	adds	r3, #11
 80092c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80092c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3720      	adds	r7, #32
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	0800b98c 	.word	0x0800b98c
 80092d4:	0800b920 	.word	0x0800b920

080092d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80092ec:	e002      	b.n	80092f4 <follow_path+0x1c>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	3301      	adds	r3, #1
 80092f2:	603b      	str	r3, [r7, #0]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b2f      	cmp	r3, #47	; 0x2f
 80092fa:	d0f8      	beq.n	80092ee <follow_path+0x16>
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	2b5c      	cmp	r3, #92	; 0x5c
 8009302:	d0f4      	beq.n	80092ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	2200      	movs	r2, #0
 8009308:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b1f      	cmp	r3, #31
 8009310:	d80a      	bhi.n	8009328 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2280      	movs	r2, #128	; 0x80
 8009316:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800931a:	2100      	movs	r1, #0
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7ff fcf9 	bl	8008d14 <dir_sdi>
 8009322:	4603      	mov	r3, r0
 8009324:	75fb      	strb	r3, [r7, #23]
 8009326:	e043      	b.n	80093b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009328:	463b      	mov	r3, r7
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff ff3f 	bl	80091b0 <create_name>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d134      	bne.n	80093a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff feaf 	bl	80090a0 <dir_find>
 8009342:	4603      	mov	r3, r0
 8009344:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800934c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00a      	beq.n	800936a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009354:	7dfb      	ldrb	r3, [r7, #23]
 8009356:	2b04      	cmp	r3, #4
 8009358:	d127      	bne.n	80093aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800935a:	7afb      	ldrb	r3, [r7, #11]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d122      	bne.n	80093aa <follow_path+0xd2>
 8009364:	2305      	movs	r3, #5
 8009366:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009368:	e01f      	b.n	80093aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800936a:	7afb      	ldrb	r3, [r7, #11]
 800936c:	f003 0304 	and.w	r3, r3, #4
 8009370:	2b00      	cmp	r3, #0
 8009372:	d11c      	bne.n	80093ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	799b      	ldrb	r3, [r3, #6]
 8009378:	f003 0310 	and.w	r3, r3, #16
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009380:	2305      	movs	r3, #5
 8009382:	75fb      	strb	r3, [r7, #23]
 8009384:	e014      	b.n	80093b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009394:	4413      	add	r3, r2
 8009396:	4619      	mov	r1, r3
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f7ff fe42 	bl	8009022 <ld_clust>
 800939e:	4602      	mov	r2, r0
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80093a4:	e7c0      	b.n	8009328 <follow_path+0x50>
			if (res != FR_OK) break;
 80093a6:	bf00      	nop
 80093a8:	e002      	b.n	80093b0 <follow_path+0xd8>
				break;
 80093aa:	bf00      	nop
 80093ac:	e000      	b.n	80093b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80093ae:	bf00      	nop
			}
		}
	}

	return res;
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b087      	sub	sp, #28
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80093c2:	f04f 33ff 	mov.w	r3, #4294967295
 80093c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d031      	beq.n	8009434 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	617b      	str	r3, [r7, #20]
 80093d6:	e002      	b.n	80093de <get_ldnumber+0x24>
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	3301      	adds	r3, #1
 80093dc:	617b      	str	r3, [r7, #20]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	2b20      	cmp	r3, #32
 80093e4:	d903      	bls.n	80093ee <get_ldnumber+0x34>
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	2b3a      	cmp	r3, #58	; 0x3a
 80093ec:	d1f4      	bne.n	80093d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	2b3a      	cmp	r3, #58	; 0x3a
 80093f4:	d11c      	bne.n	8009430 <get_ldnumber+0x76>
			tp = *path;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	60fa      	str	r2, [r7, #12]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	3b30      	subs	r3, #48	; 0x30
 8009406:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2b09      	cmp	r3, #9
 800940c:	d80e      	bhi.n	800942c <get_ldnumber+0x72>
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	429a      	cmp	r2, r3
 8009414:	d10a      	bne.n	800942c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d107      	bne.n	800942c <get_ldnumber+0x72>
					vol = (int)i;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	3301      	adds	r3, #1
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	e002      	b.n	8009436 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009430:	2300      	movs	r3, #0
 8009432:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009434:	693b      	ldr	r3, [r7, #16]
}
 8009436:	4618      	mov	r0, r3
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
	...

08009444 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	70da      	strb	r2, [r3, #3]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f04f 32ff 	mov.w	r2, #4294967295
 800945a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff f8e0 	bl	8008624 <move_window>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <check_fs+0x2a>
 800946a:	2304      	movs	r3, #4
 800946c:	e038      	b.n	80094e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3330      	adds	r3, #48	; 0x30
 8009472:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009476:	4618      	mov	r0, r3
 8009478:	f7fe fe24 	bl	80080c4 <ld_word>
 800947c:	4603      	mov	r3, r0
 800947e:	461a      	mov	r2, r3
 8009480:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009484:	429a      	cmp	r2, r3
 8009486:	d001      	beq.n	800948c <check_fs+0x48>
 8009488:	2303      	movs	r3, #3
 800948a:	e029      	b.n	80094e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009492:	2be9      	cmp	r3, #233	; 0xe9
 8009494:	d009      	beq.n	80094aa <check_fs+0x66>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800949c:	2beb      	cmp	r3, #235	; 0xeb
 800949e:	d11e      	bne.n	80094de <check_fs+0x9a>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80094a6:	2b90      	cmp	r3, #144	; 0x90
 80094a8:	d119      	bne.n	80094de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	3330      	adds	r3, #48	; 0x30
 80094ae:	3336      	adds	r3, #54	; 0x36
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe fe1f 	bl	80080f4 <ld_dword>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80094bc:	4a0a      	ldr	r2, [pc, #40]	; (80094e8 <check_fs+0xa4>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d101      	bne.n	80094c6 <check_fs+0x82>
 80094c2:	2300      	movs	r3, #0
 80094c4:	e00c      	b.n	80094e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3330      	adds	r3, #48	; 0x30
 80094ca:	3352      	adds	r3, #82	; 0x52
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fe fe11 	bl	80080f4 <ld_dword>
 80094d2:	4602      	mov	r2, r0
 80094d4:	4b05      	ldr	r3, [pc, #20]	; (80094ec <check_fs+0xa8>)
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d101      	bne.n	80094de <check_fs+0x9a>
 80094da:	2300      	movs	r3, #0
 80094dc:	e000      	b.n	80094e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80094de:	2302      	movs	r3, #2
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	00544146 	.word	0x00544146
 80094ec:	33544146 	.word	0x33544146

080094f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b096      	sub	sp, #88	; 0x58
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	4613      	mov	r3, r2
 80094fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f7ff ff58 	bl	80093ba <get_ldnumber>
 800950a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800950c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950e:	2b00      	cmp	r3, #0
 8009510:	da01      	bge.n	8009516 <find_volume+0x26>
 8009512:	230b      	movs	r3, #11
 8009514:	e22e      	b.n	8009974 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009516:	4aa8      	ldr	r2, [pc, #672]	; (80097b8 <find_volume+0x2c8>)
 8009518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800951e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <find_volume+0x3a>
 8009526:	230c      	movs	r3, #12
 8009528:	e224      	b.n	8009974 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800952e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	f023 0301 	bic.w	r3, r3, #1
 8009536:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d01a      	beq.n	8009576 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	785b      	ldrb	r3, [r3, #1]
 8009544:	4618      	mov	r0, r3
 8009546:	f7fe fd1f 	bl	8007f88 <disk_status>
 800954a:	4603      	mov	r3, r0
 800954c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009550:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10c      	bne.n	8009576 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d007      	beq.n	8009572 <find_volume+0x82>
 8009562:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009566:	f003 0304 	and.w	r3, r3, #4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800956e:	230a      	movs	r3, #10
 8009570:	e200      	b.n	8009974 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8009572:	2300      	movs	r3, #0
 8009574:	e1fe      	b.n	8009974 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	2200      	movs	r2, #0
 800957a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800957c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957e:	b2da      	uxtb	r2, r3
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	785b      	ldrb	r3, [r3, #1]
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe fd17 	bl	8007fbc <disk_initialize>
 800958e:	4603      	mov	r3, r0
 8009590:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009594:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80095a0:	2303      	movs	r3, #3
 80095a2:	e1e7      	b.n	8009974 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80095a4:	79fb      	ldrb	r3, [r7, #7]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d007      	beq.n	80095ba <find_volume+0xca>
 80095aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095ae:	f003 0304 	and.w	r3, r3, #4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80095b6:	230a      	movs	r3, #10
 80095b8:	e1dc      	b.n	8009974 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80095be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095c2:	f7ff ff3f 	bl	8009444 <check_fs>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80095cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d14b      	bne.n	800966c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80095d4:	2300      	movs	r3, #0
 80095d6:	643b      	str	r3, [r7, #64]	; 0x40
 80095d8:	e01f      	b.n	800961a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80095da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095e2:	011b      	lsls	r3, r3, #4
 80095e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80095e8:	4413      	add	r3, r2
 80095ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80095ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ee:	3304      	adds	r3, #4
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d006      	beq.n	8009604 <find_volume+0x114>
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	3308      	adds	r3, #8
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fe fd7a 	bl	80080f4 <ld_dword>
 8009600:	4602      	mov	r2, r0
 8009602:	e000      	b.n	8009606 <find_volume+0x116>
 8009604:	2200      	movs	r2, #0
 8009606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800960e:	440b      	add	r3, r1
 8009610:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009616:	3301      	adds	r3, #1
 8009618:	643b      	str	r3, [r7, #64]	; 0x40
 800961a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800961c:	2b03      	cmp	r3, #3
 800961e:	d9dc      	bls.n	80095da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009620:	2300      	movs	r3, #0
 8009622:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <find_volume+0x140>
 800962a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800962c:	3b01      	subs	r3, #1
 800962e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009638:	4413      	add	r3, r2
 800963a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800963e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <find_volume+0x162>
 8009646:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009648:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800964a:	f7ff fefb 	bl	8009444 <check_fs>
 800964e:	4603      	mov	r3, r0
 8009650:	e000      	b.n	8009654 <find_volume+0x164>
 8009652:	2303      	movs	r3, #3
 8009654:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800965c:	2b01      	cmp	r3, #1
 800965e:	d905      	bls.n	800966c <find_volume+0x17c>
 8009660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009662:	3301      	adds	r3, #1
 8009664:	643b      	str	r3, [r7, #64]	; 0x40
 8009666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009668:	2b03      	cmp	r3, #3
 800966a:	d9e1      	bls.n	8009630 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800966c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009670:	2b04      	cmp	r3, #4
 8009672:	d101      	bne.n	8009678 <find_volume+0x188>
 8009674:	2301      	movs	r3, #1
 8009676:	e17d      	b.n	8009974 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800967c:	2b01      	cmp	r3, #1
 800967e:	d901      	bls.n	8009684 <find_volume+0x194>
 8009680:	230d      	movs	r3, #13
 8009682:	e177      	b.n	8009974 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	3330      	adds	r3, #48	; 0x30
 8009688:	330b      	adds	r3, #11
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fd1a 	bl	80080c4 <ld_word>
 8009690:	4603      	mov	r3, r0
 8009692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009696:	d001      	beq.n	800969c <find_volume+0x1ac>
 8009698:	230d      	movs	r3, #13
 800969a:	e16b      	b.n	8009974 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969e:	3330      	adds	r3, #48	; 0x30
 80096a0:	3316      	adds	r3, #22
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe fd0e 	bl	80080c4 <ld_word>
 80096a8:	4603      	mov	r3, r0
 80096aa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80096ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d106      	bne.n	80096c0 <find_volume+0x1d0>
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	3330      	adds	r3, #48	; 0x30
 80096b6:	3324      	adds	r3, #36	; 0x24
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fe fd1b 	bl	80080f4 <ld_dword>
 80096be:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096c4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80096cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	789b      	ldrb	r3, [r3, #2]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d005      	beq.n	80096e4 <find_volume+0x1f4>
 80096d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096da:	789b      	ldrb	r3, [r3, #2]
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d001      	beq.n	80096e4 <find_volume+0x1f4>
 80096e0:	230d      	movs	r3, #13
 80096e2:	e147      	b.n	8009974 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80096e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e6:	789b      	ldrb	r3, [r3, #2]
 80096e8:	461a      	mov	r2, r3
 80096ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ec:	fb02 f303 	mul.w	r3, r2, r3
 80096f0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80096f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	895b      	ldrh	r3, [r3, #10]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d008      	beq.n	8009718 <find_volume+0x228>
 8009706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009708:	895b      	ldrh	r3, [r3, #10]
 800970a:	461a      	mov	r2, r3
 800970c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970e:	895b      	ldrh	r3, [r3, #10]
 8009710:	3b01      	subs	r3, #1
 8009712:	4013      	ands	r3, r2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <find_volume+0x22c>
 8009718:	230d      	movs	r3, #13
 800971a:	e12b      	b.n	8009974 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800971c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971e:	3330      	adds	r3, #48	; 0x30
 8009720:	3311      	adds	r3, #17
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe fcce 	bl	80080c4 <ld_word>
 8009728:	4603      	mov	r3, r0
 800972a:	461a      	mov	r2, r3
 800972c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	891b      	ldrh	r3, [r3, #8]
 8009734:	f003 030f 	and.w	r3, r3, #15
 8009738:	b29b      	uxth	r3, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <find_volume+0x252>
 800973e:	230d      	movs	r3, #13
 8009740:	e118      	b.n	8009974 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	3330      	adds	r3, #48	; 0x30
 8009746:	3313      	adds	r3, #19
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe fcbb 	bl	80080c4 <ld_word>
 800974e:	4603      	mov	r3, r0
 8009750:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009754:	2b00      	cmp	r3, #0
 8009756:	d106      	bne.n	8009766 <find_volume+0x276>
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	3330      	adds	r3, #48	; 0x30
 800975c:	3320      	adds	r3, #32
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe fcc8 	bl	80080f4 <ld_dword>
 8009764:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009768:	3330      	adds	r3, #48	; 0x30
 800976a:	330e      	adds	r3, #14
 800976c:	4618      	mov	r0, r3
 800976e:	f7fe fca9 	bl	80080c4 <ld_word>
 8009772:	4603      	mov	r3, r0
 8009774:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009776:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009778:	2b00      	cmp	r3, #0
 800977a:	d101      	bne.n	8009780 <find_volume+0x290>
 800977c:	230d      	movs	r3, #13
 800977e:	e0f9      	b.n	8009974 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009780:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009784:	4413      	add	r3, r2
 8009786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009788:	8912      	ldrh	r2, [r2, #8]
 800978a:	0912      	lsrs	r2, r2, #4
 800978c:	b292      	uxth	r2, r2
 800978e:	4413      	add	r3, r2
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009796:	429a      	cmp	r2, r3
 8009798:	d201      	bcs.n	800979e <find_volume+0x2ae>
 800979a:	230d      	movs	r3, #13
 800979c:	e0ea      	b.n	8009974 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800979e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097a6:	8952      	ldrh	r2, [r2, #10]
 80097a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80097ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d103      	bne.n	80097bc <find_volume+0x2cc>
 80097b4:	230d      	movs	r3, #13
 80097b6:	e0dd      	b.n	8009974 <find_volume+0x484>
 80097b8:	2000022c 	.word	0x2000022c
		fmt = FS_FAT32;
 80097bc:	2303      	movs	r3, #3
 80097be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d802      	bhi.n	80097d2 <find_volume+0x2e2>
 80097cc:	2302      	movs	r3, #2
 80097ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80097d8:	4293      	cmp	r3, r2
 80097da:	d802      	bhi.n	80097e2 <find_volume+0x2f2>
 80097dc:	2301      	movs	r3, #1
 80097de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	1c9a      	adds	r2, r3, #2
 80097e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80097ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097ee:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80097f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80097f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097f4:	441a      	add	r2, r3
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80097fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	441a      	add	r2, r3
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009808:	2b03      	cmp	r3, #3
 800980a:	d11e      	bne.n	800984a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800980c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980e:	3330      	adds	r3, #48	; 0x30
 8009810:	332a      	adds	r3, #42	; 0x2a
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fc56 	bl	80080c4 <ld_word>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <find_volume+0x332>
 800981e:	230d      	movs	r3, #13
 8009820:	e0a8      	b.n	8009974 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009824:	891b      	ldrh	r3, [r3, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <find_volume+0x33e>
 800982a:	230d      	movs	r3, #13
 800982c:	e0a2      	b.n	8009974 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	3330      	adds	r3, #48	; 0x30
 8009832:	332c      	adds	r3, #44	; 0x2c
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe fc5d 	bl	80080f4 <ld_dword>
 800983a:	4602      	mov	r2, r0
 800983c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	647b      	str	r3, [r7, #68]	; 0x44
 8009848:	e01f      	b.n	800988a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	891b      	ldrh	r3, [r3, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <find_volume+0x366>
 8009852:	230d      	movs	r3, #13
 8009854:	e08e      	b.n	8009974 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009858:	6a1a      	ldr	r2, [r3, #32]
 800985a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985c:	441a      	add	r2, r3
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009862:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009866:	2b02      	cmp	r3, #2
 8009868:	d103      	bne.n	8009872 <find_volume+0x382>
 800986a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	005b      	lsls	r3, r3, #1
 8009870:	e00a      	b.n	8009888 <find_volume+0x398>
 8009872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009874:	695a      	ldr	r2, [r3, #20]
 8009876:	4613      	mov	r3, r2
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	4413      	add	r3, r2
 800987c:	085a      	lsrs	r2, r3, #1
 800987e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009888:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009890:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009894:	0a5b      	lsrs	r3, r3, #9
 8009896:	429a      	cmp	r2, r3
 8009898:	d201      	bcs.n	800989e <find_volume+0x3ae>
 800989a:	230d      	movs	r3, #13
 800989c:	e06a      	b.n	8009974 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295
 80098a4:	611a      	str	r2, [r3, #16]
 80098a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a8:	691a      	ldr	r2, [r3, #16]
 80098aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ac:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80098ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b0:	2280      	movs	r2, #128	; 0x80
 80098b2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80098b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d149      	bne.n	8009950 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	3330      	adds	r3, #48	; 0x30
 80098c0:	3330      	adds	r3, #48	; 0x30
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe fbfe 	bl	80080c4 <ld_word>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d140      	bne.n	8009950 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80098ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098d0:	3301      	adds	r3, #1
 80098d2:	4619      	mov	r1, r3
 80098d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098d6:	f7fe fea5 	bl	8008624 <move_window>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d137      	bne.n	8009950 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	2200      	movs	r2, #0
 80098e4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	3330      	adds	r3, #48	; 0x30
 80098ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fbe8 	bl	80080c4 <ld_word>
 80098f4:	4603      	mov	r3, r0
 80098f6:	461a      	mov	r2, r3
 80098f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d127      	bne.n	8009950 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009902:	3330      	adds	r3, #48	; 0x30
 8009904:	4618      	mov	r0, r3
 8009906:	f7fe fbf5 	bl	80080f4 <ld_dword>
 800990a:	4602      	mov	r2, r0
 800990c:	4b1b      	ldr	r3, [pc, #108]	; (800997c <find_volume+0x48c>)
 800990e:	429a      	cmp	r2, r3
 8009910:	d11e      	bne.n	8009950 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009914:	3330      	adds	r3, #48	; 0x30
 8009916:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fbea 	bl	80080f4 <ld_dword>
 8009920:	4602      	mov	r2, r0
 8009922:	4b17      	ldr	r3, [pc, #92]	; (8009980 <find_volume+0x490>)
 8009924:	429a      	cmp	r2, r3
 8009926:	d113      	bne.n	8009950 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992a:	3330      	adds	r3, #48	; 0x30
 800992c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe fbdf 	bl	80080f4 <ld_dword>
 8009936:	4602      	mov	r2, r0
 8009938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	3330      	adds	r3, #48	; 0x30
 8009940:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fbd5 	bl	80080f4 <ld_dword>
 800994a:	4602      	mov	r2, r0
 800994c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009956:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009958:	4b0a      	ldr	r3, [pc, #40]	; (8009984 <find_volume+0x494>)
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	3301      	adds	r3, #1
 800995e:	b29a      	uxth	r2, r3
 8009960:	4b08      	ldr	r3, [pc, #32]	; (8009984 <find_volume+0x494>)
 8009962:	801a      	strh	r2, [r3, #0]
 8009964:	4b07      	ldr	r3, [pc, #28]	; (8009984 <find_volume+0x494>)
 8009966:	881a      	ldrh	r2, [r3, #0]
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800996c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800996e:	f7fe fdf1 	bl	8008554 <clear_lock>
#endif
	return FR_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3758      	adds	r7, #88	; 0x58
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	41615252 	.word	0x41615252
 8009980:	61417272 	.word	0x61417272
 8009984:	20000230 	.word	0x20000230

08009988 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009992:	2309      	movs	r3, #9
 8009994:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d01c      	beq.n	80099d6 <validate+0x4e>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d018      	beq.n	80099d6 <validate+0x4e>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d013      	beq.n	80099d6 <validate+0x4e>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	889a      	ldrh	r2, [r3, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	88db      	ldrh	r3, [r3, #6]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d10c      	bne.n	80099d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	785b      	ldrb	r3, [r3, #1]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fae0 	bl	8007f88 <disk_status>
 80099c8:	4603      	mov	r3, r0
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <validate+0x4e>
			res = FR_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d102      	bne.n	80099e2 <validate+0x5a>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	e000      	b.n	80099e4 <validate+0x5c>
 80099e2:	2300      	movs	r3, #0
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	6013      	str	r3, [r2, #0]
	return res;
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	4613      	mov	r3, r2
 8009a00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009a06:	f107 0310 	add.w	r3, r7, #16
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff fcd5 	bl	80093ba <get_ldnumber>
 8009a10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	da01      	bge.n	8009a1c <f_mount+0x28>
 8009a18:	230b      	movs	r3, #11
 8009a1a:	e02b      	b.n	8009a74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a1c:	4a17      	ldr	r2, [pc, #92]	; (8009a7c <f_mount+0x88>)
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d005      	beq.n	8009a38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009a2c:	69b8      	ldr	r0, [r7, #24]
 8009a2e:	f7fe fd91 	bl	8008554 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	2200      	movs	r2, #0
 8009a36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	490d      	ldr	r1, [pc, #52]	; (8009a7c <f_mount+0x88>)
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <f_mount+0x66>
 8009a54:	79fb      	ldrb	r3, [r7, #7]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d001      	beq.n	8009a5e <f_mount+0x6a>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e00a      	b.n	8009a74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009a5e:	f107 010c 	add.w	r1, r7, #12
 8009a62:	f107 0308 	add.w	r3, r7, #8
 8009a66:	2200      	movs	r2, #0
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7ff fd41 	bl	80094f0 <find_volume>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3720      	adds	r7, #32
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	2000022c 	.word	0x2000022c

08009a80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b098      	sub	sp, #96	; 0x60
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <f_open+0x18>
 8009a94:	2309      	movs	r3, #9
 8009a96:	e1ad      	b.n	8009df4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009a98:	79fb      	ldrb	r3, [r7, #7]
 8009a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009aa0:	79fa      	ldrb	r2, [r7, #7]
 8009aa2:	f107 0110 	add.w	r1, r7, #16
 8009aa6:	f107 0308 	add.w	r3, r7, #8
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff fd20 	bl	80094f0 <find_volume>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f040 8191 	bne.w	8009de2 <f_open+0x362>
		dj.obj.fs = fs;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	f107 0314 	add.w	r3, r7, #20
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7ff fc03 	bl	80092d8 <follow_path>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d11a      	bne.n	8009b16 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009ae0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ae4:	b25b      	sxtb	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	da03      	bge.n	8009af2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009aea:	2306      	movs	r3, #6
 8009aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009af0:	e011      	b.n	8009b16 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009af2:	79fb      	ldrb	r3, [r7, #7]
 8009af4:	f023 0301 	bic.w	r3, r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	bf14      	ite	ne
 8009afc:	2301      	movne	r3, #1
 8009afe:	2300      	moveq	r3, #0
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	461a      	mov	r2, r3
 8009b04:	f107 0314 	add.w	r3, r7, #20
 8009b08:	4611      	mov	r1, r2
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fbda 	bl	80082c4 <chk_lock>
 8009b10:	4603      	mov	r3, r0
 8009b12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009b16:	79fb      	ldrb	r3, [r7, #7]
 8009b18:	f003 031c 	and.w	r3, r3, #28
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d07f      	beq.n	8009c20 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009b20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d017      	beq.n	8009b58 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009b28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d10e      	bne.n	8009b4e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009b30:	f7fe fc24 	bl	800837c <enq_lock>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d006      	beq.n	8009b48 <f_open+0xc8>
 8009b3a:	f107 0314 	add.w	r3, r7, #20
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7ff fb03 	bl	800914a <dir_register>
 8009b44:	4603      	mov	r3, r0
 8009b46:	e000      	b.n	8009b4a <f_open+0xca>
 8009b48:	2312      	movs	r3, #18
 8009b4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009b4e:	79fb      	ldrb	r3, [r7, #7]
 8009b50:	f043 0308 	orr.w	r3, r3, #8
 8009b54:	71fb      	strb	r3, [r7, #7]
 8009b56:	e010      	b.n	8009b7a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009b58:	7ebb      	ldrb	r3, [r7, #26]
 8009b5a:	f003 0311 	and.w	r3, r3, #17
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <f_open+0xea>
					res = FR_DENIED;
 8009b62:	2307      	movs	r3, #7
 8009b64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b68:	e007      	b.n	8009b7a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <f_open+0xfa>
 8009b74:	2308      	movs	r3, #8
 8009b76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d168      	bne.n	8009c54 <f_open+0x1d4>
 8009b82:	79fb      	ldrb	r3, [r7, #7]
 8009b84:	f003 0308 	and.w	r3, r3, #8
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d063      	beq.n	8009c54 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009b8c:	f7fc fef0 	bl	8006970 <get_fattime>
 8009b90:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b94:	330e      	adds	r3, #14
 8009b96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe fae9 	bl	8008170 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba0:	3316      	adds	r3, #22
 8009ba2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7fe fae3 	bl	8008170 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bac:	330b      	adds	r3, #11
 8009bae:	2220      	movs	r2, #32
 8009bb0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff fa32 	bl	8009022 <ld_clust>
 8009bbe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7ff fa4a 	bl	8009060 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bce:	331c      	adds	r3, #28
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe facc 	bl	8008170 <st_dword>
					fs->wflag = 1;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d037      	beq.n	8009c54 <f_open+0x1d4>
						dw = fs->winsect;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009bea:	f107 0314 	add.w	r3, r7, #20
 8009bee:	2200      	movs	r2, #0
 8009bf0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe ff5d 	bl	8008ab2 <remove_chain>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d126      	bne.n	8009c54 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fe fd0a 	bl	8008624 <move_window>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c1a:	3a01      	subs	r2, #1
 8009c1c:	60da      	str	r2, [r3, #12]
 8009c1e:	e019      	b.n	8009c54 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009c20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d115      	bne.n	8009c54 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009c28:	7ebb      	ldrb	r3, [r7, #26]
 8009c2a:	f003 0310 	and.w	r3, r3, #16
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009c32:	2304      	movs	r3, #4
 8009c34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c38:	e00c      	b.n	8009c54 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009c3a:	79fb      	ldrb	r3, [r7, #7]
 8009c3c:	f003 0302 	and.w	r3, r3, #2
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d007      	beq.n	8009c54 <f_open+0x1d4>
 8009c44:	7ebb      	ldrb	r3, [r7, #26]
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <f_open+0x1d4>
						res = FR_DENIED;
 8009c4e:	2307      	movs	r3, #7
 8009c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d128      	bne.n	8009cae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009c5c:	79fb      	ldrb	r3, [r7, #7]
 8009c5e:	f003 0308 	and.w	r3, r3, #8
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009c66:	79fb      	ldrb	r3, [r7, #7]
 8009c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c6c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c7c:	79fb      	ldrb	r3, [r7, #7]
 8009c7e:	f023 0301 	bic.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	bf14      	ite	ne
 8009c86:	2301      	movne	r3, #1
 8009c88:	2300      	moveq	r3, #0
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	f107 0314 	add.w	r3, r7, #20
 8009c92:	4611      	mov	r1, r2
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fe fb93 	bl	80083c0 <inc_lock>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d102      	bne.n	8009cae <f_open+0x22e>
 8009ca8:	2302      	movs	r3, #2
 8009caa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009cae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f040 8095 	bne.w	8009de2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7ff f9af 	bl	8009022 <ld_clust>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ccc:	331c      	adds	r3, #28
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fa10 	bl	80080f4 <ld_dword>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	88da      	ldrh	r2, [r3, #6]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	79fa      	ldrb	r2, [r7, #7]
 8009cf2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3330      	adds	r3, #48	; 0x30
 8009d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fe fa7a 	bl	800820a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	f003 0320 	and.w	r3, r3, #32
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d060      	beq.n	8009de2 <f_open+0x362>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d05c      	beq.n	8009de2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	68da      	ldr	r2, [r3, #12]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	895b      	ldrh	r3, [r3, #10]
 8009d34:	025b      	lsls	r3, r3, #9
 8009d36:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	657b      	str	r3, [r7, #84]	; 0x54
 8009d44:	e016      	b.n	8009d74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe fd25 	bl	800879a <get_fat>
 8009d50:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d802      	bhi.n	8009d5e <f_open+0x2de>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d64:	d102      	bne.n	8009d6c <f_open+0x2ec>
 8009d66:	2301      	movs	r3, #1
 8009d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009d6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	657b      	str	r3, [r7, #84]	; 0x54
 8009d74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d103      	bne.n	8009d84 <f_open+0x304>
 8009d7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d8e0      	bhi.n	8009d46 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d127      	bne.n	8009de2 <f_open+0x362>
 8009d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d022      	beq.n	8009de2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fe fcdb 	bl	800875c <clust2sect>
 8009da6:	6478      	str	r0, [r7, #68]	; 0x44
 8009da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d103      	bne.n	8009db6 <f_open+0x336>
						res = FR_INT_ERR;
 8009dae:	2302      	movs	r3, #2
 8009db0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009db4:	e015      	b.n	8009de2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009db8:	0a5a      	lsrs	r2, r3, #9
 8009dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dbc:	441a      	add	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	7858      	ldrb	r0, [r3, #1]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6a1a      	ldr	r2, [r3, #32]
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	f7fe f919 	bl	8008008 <disk_read>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <f_open+0x362>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009de2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d002      	beq.n	8009df0 <f_open+0x370>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009df0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3760      	adds	r7, #96	; 0x60
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08e      	sub	sp, #56	; 0x38
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2200      	movs	r2, #0
 8009e12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f107 0214 	add.w	r2, r7, #20
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7ff fdb3 	bl	8009988 <validate>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009e28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d107      	bne.n	8009e40 <f_read+0x44>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	7d5b      	ldrb	r3, [r3, #21]
 8009e34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009e38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d002      	beq.n	8009e46 <f_read+0x4a>
 8009e40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e44:	e115      	b.n	800a072 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	7d1b      	ldrb	r3, [r3, #20]
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <f_read+0x5a>
 8009e52:	2307      	movs	r3, #7
 8009e54:	e10d      	b.n	800a072 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68da      	ldr	r2, [r3, #12]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	f240 80fe 	bls.w	800a068 <f_read+0x26c>
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009e70:	e0fa      	b.n	800a068 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f040 80c6 	bne.w	800a00c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	0a5b      	lsrs	r3, r3, #9
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	8952      	ldrh	r2, [r2, #10]
 8009e8a:	3a01      	subs	r2, #1
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d12f      	bne.n	8009ef6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d103      	bne.n	8009ea6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	633b      	str	r3, [r7, #48]	; 0x30
 8009ea4:	e013      	b.n	8009ece <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d007      	beq.n	8009ebe <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f7fe fef9 	bl	8008cac <clmt_clust>
 8009eba:	6338      	str	r0, [r7, #48]	; 0x30
 8009ebc:	e007      	b.n	8009ece <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	69db      	ldr	r3, [r3, #28]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4610      	mov	r0, r2
 8009ec8:	f7fe fc67 	bl	800879a <get_fat>
 8009ecc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d804      	bhi.n	8009ede <f_read+0xe2>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	755a      	strb	r2, [r3, #21]
 8009eda:	2302      	movs	r3, #2
 8009edc:	e0c9      	b.n	800a072 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee4:	d104      	bne.n	8009ef0 <f_read+0xf4>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	755a      	strb	r2, [r3, #21]
 8009eec:	2301      	movs	r3, #1
 8009eee:	e0c0      	b.n	800a072 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ef4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	4619      	mov	r1, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	f7fe fc2c 	bl	800875c <clust2sect>
 8009f04:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d104      	bne.n	8009f16 <f_read+0x11a>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	755a      	strb	r2, [r3, #21]
 8009f12:	2302      	movs	r3, #2
 8009f14:	e0ad      	b.n	800a072 <f_read+0x276>
			sect += csect;
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	0a5b      	lsrs	r3, r3, #9
 8009f22:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d039      	beq.n	8009f9e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009f2a:	69fa      	ldr	r2, [r7, #28]
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	4413      	add	r3, r2
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	8952      	ldrh	r2, [r2, #10]
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d905      	bls.n	8009f44 <f_read+0x148>
					cc = fs->csize - csect;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	895b      	ldrh	r3, [r3, #10]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	7858      	ldrb	r0, [r3, #1]
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	69ba      	ldr	r2, [r7, #24]
 8009f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f4e:	f7fe f85b 	bl	8008008 <disk_read>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <f_read+0x166>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	755a      	strb	r2, [r3, #21]
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e087      	b.n	800a072 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	7d1b      	ldrb	r3, [r3, #20]
 8009f66:	b25b      	sxtb	r3, r3
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	da14      	bge.n	8009f96 <f_read+0x19a>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a1a      	ldr	r2, [r3, #32]
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d90d      	bls.n	8009f96 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6a1a      	ldr	r2, [r3, #32]
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	025b      	lsls	r3, r3, #9
 8009f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f86:	18d0      	adds	r0, r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3330      	adds	r3, #48	; 0x30
 8009f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f90:	4619      	mov	r1, r3
 8009f92:	f7fe f919 	bl	80081c8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f98:	025b      	lsls	r3, r3, #9
 8009f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009f9c:	e050      	b.n	800a040 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	69ba      	ldr	r2, [r7, #24]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d02e      	beq.n	800a006 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	7d1b      	ldrb	r3, [r3, #20]
 8009fac:	b25b      	sxtb	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	da18      	bge.n	8009fe4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	7858      	ldrb	r0, [r3, #1]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a1a      	ldr	r2, [r3, #32]
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f7fe f841 	bl	8008048 <disk_write>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d004      	beq.n	8009fd6 <f_read+0x1da>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	755a      	strb	r2, [r3, #21]
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e04d      	b.n	800a072 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	7d1b      	ldrb	r3, [r3, #20]
 8009fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	7858      	ldrb	r0, [r3, #1]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fee:	2301      	movs	r3, #1
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	f7fe f809 	bl	8008008 <disk_read>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <f_read+0x20a>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2201      	movs	r2, #1
 800a000:	755a      	strb	r2, [r3, #21]
 800a002:	2301      	movs	r3, #1
 800a004:	e035      	b.n	800a072 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	69ba      	ldr	r2, [r7, #24]
 800a00a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a014:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a018:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a01a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d901      	bls.n	800a026 <f_read+0x22a>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a034:	4413      	add	r3, r2
 800a036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a038:	4619      	mov	r1, r3
 800a03a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a03c:	f7fe f8c4 	bl	80081c8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a044:	4413      	add	r3, r2
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	699a      	ldr	r2, [r3, #24]
 800a04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04e:	441a      	add	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	619a      	str	r2, [r3, #24]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	441a      	add	r2, r3
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f47f af01 	bne.w	8009e72 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3738      	adds	r7, #56	; 0x38
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b08c      	sub	sp, #48	; 0x30
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
 800a086:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f107 0210 	add.w	r2, r7, #16
 800a098:	4611      	mov	r1, r2
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7ff fc74 	bl	8009988 <validate>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a0a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d107      	bne.n	800a0be <f_write+0x44>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	7d5b      	ldrb	r3, [r3, #21]
 800a0b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a0b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <f_write+0x4a>
 800a0be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0c2:	e14b      	b.n	800a35c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	7d1b      	ldrb	r3, [r3, #20]
 800a0c8:	f003 0302 	and.w	r3, r3, #2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <f_write+0x5a>
 800a0d0:	2307      	movs	r3, #7
 800a0d2:	e143      	b.n	800a35c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	699a      	ldr	r2, [r3, #24]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	441a      	add	r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	f080 812d 	bcs.w	800a340 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	43db      	mvns	r3, r3
 800a0ec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a0ee:	e127      	b.n	800a340 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f040 80e3 	bne.w	800a2c4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	0a5b      	lsrs	r3, r3, #9
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	8952      	ldrh	r2, [r2, #10]
 800a108:	3a01      	subs	r2, #1
 800a10a:	4013      	ands	r3, r2
 800a10c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d143      	bne.n	800a19c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10c      	bne.n	800a136 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	2b00      	cmp	r3, #0
 800a126:	d11a      	bne.n	800a15e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2100      	movs	r1, #0
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe fd25 	bl	8008b7c <create_chain>
 800a132:	62b8      	str	r0, [r7, #40]	; 0x28
 800a134:	e013      	b.n	800a15e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	4619      	mov	r1, r3
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7fe fdb1 	bl	8008cac <clmt_clust>
 800a14a:	62b8      	str	r0, [r7, #40]	; 0x28
 800a14c:	e007      	b.n	800a15e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	69db      	ldr	r3, [r3, #28]
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	f7fe fd10 	bl	8008b7c <create_chain>
 800a15c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 80f2 	beq.w	800a34a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d104      	bne.n	800a176 <f_write+0xfc>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2202      	movs	r2, #2
 800a170:	755a      	strb	r2, [r3, #21]
 800a172:	2302      	movs	r3, #2
 800a174:	e0f2      	b.n	800a35c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17c:	d104      	bne.n	800a188 <f_write+0x10e>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2201      	movs	r2, #1
 800a182:	755a      	strb	r2, [r3, #21]
 800a184:	2301      	movs	r3, #1
 800a186:	e0e9      	b.n	800a35c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a18c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <f_write+0x122>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a19a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	7d1b      	ldrb	r3, [r3, #20]
 800a1a0:	b25b      	sxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	da18      	bge.n	800a1d8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	7858      	ldrb	r0, [r3, #1]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6a1a      	ldr	r2, [r3, #32]
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	f7fd ff47 	bl	8008048 <disk_write>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d004      	beq.n	800a1ca <f_write+0x150>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	755a      	strb	r2, [r3, #21]
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e0c8      	b.n	800a35c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	7d1b      	ldrb	r3, [r3, #20]
 800a1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	f7fe fabb 	bl	800875c <clust2sect>
 800a1e6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d104      	bne.n	800a1f8 <f_write+0x17e>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2202      	movs	r2, #2
 800a1f2:	755a      	strb	r2, [r3, #21]
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	e0b1      	b.n	800a35c <f_write+0x2e2>
			sect += csect;
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	0a5b      	lsrs	r3, r3, #9
 800a204:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d03c      	beq.n	800a286 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a20c:	69ba      	ldr	r2, [r7, #24]
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	4413      	add	r3, r2
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	8952      	ldrh	r2, [r2, #10]
 800a216:	4293      	cmp	r3, r2
 800a218:	d905      	bls.n	800a226 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	895b      	ldrh	r3, [r3, #10]
 800a21e:	461a      	mov	r2, r3
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	7858      	ldrb	r0, [r3, #1]
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	69f9      	ldr	r1, [r7, #28]
 800a230:	f7fd ff0a 	bl	8008048 <disk_write>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d004      	beq.n	800a244 <f_write+0x1ca>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2201      	movs	r2, #1
 800a23e:	755a      	strb	r2, [r3, #21]
 800a240:	2301      	movs	r3, #1
 800a242:	e08b      	b.n	800a35c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6a1a      	ldr	r2, [r3, #32]
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	6a3a      	ldr	r2, [r7, #32]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d915      	bls.n	800a27e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a1a      	ldr	r2, [r3, #32]
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	025b      	lsls	r3, r3, #9
 800a262:	69fa      	ldr	r2, [r7, #28]
 800a264:	4413      	add	r3, r2
 800a266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a26a:	4619      	mov	r1, r3
 800a26c:	f7fd ffac 	bl	80081c8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	7d1b      	ldrb	r3, [r3, #20]
 800a274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	025b      	lsls	r3, r3, #9
 800a282:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a284:	e03f      	b.n	800a306 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d016      	beq.n	800a2be <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	699a      	ldr	r2, [r3, #24]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a298:	429a      	cmp	r2, r3
 800a29a:	d210      	bcs.n	800a2be <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	7858      	ldrb	r0, [r3, #1]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	f7fd fead 	bl	8008008 <disk_read>
 800a2ae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d004      	beq.n	800a2be <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	755a      	strb	r2, [r3, #21]
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e04e      	b.n	800a35c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a2d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a2d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d901      	bls.n	800a2de <f_write+0x264>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ec:	4413      	add	r3, r2
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f0:	69f9      	ldr	r1, [r7, #28]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fd ff68 	bl	80081c8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	7d1b      	ldrb	r3, [r3, #20]
 800a2fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a300:	b2da      	uxtb	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a306:	69fa      	ldr	r2, [r7, #28]
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	4413      	add	r3, r2
 800a30c:	61fb      	str	r3, [r7, #28]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	699a      	ldr	r2, [r3, #24]
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	441a      	add	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	619a      	str	r2, [r3, #24]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	68da      	ldr	r2, [r3, #12]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	429a      	cmp	r2, r3
 800a324:	bf38      	it	cc
 800a326:	461a      	movcc	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	60da      	str	r2, [r3, #12]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	441a      	add	r2, r3
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	601a      	str	r2, [r3, #0]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	f47f aed4 	bne.w	800a0f0 <f_write+0x76>
 800a348:	e000      	b.n	800a34c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a34a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	7d1b      	ldrb	r3, [r3, #20]
 800a350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a354:	b2da      	uxtb	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3730      	adds	r7, #48	; 0x30
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b086      	sub	sp, #24
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f107 0208 	add.w	r2, r7, #8
 800a372:	4611      	mov	r1, r2
 800a374:	4618      	mov	r0, r3
 800a376:	f7ff fb07 	bl	8009988 <validate>
 800a37a:	4603      	mov	r3, r0
 800a37c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d168      	bne.n	800a456 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	7d1b      	ldrb	r3, [r3, #20]
 800a388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d062      	beq.n	800a456 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	7d1b      	ldrb	r3, [r3, #20]
 800a394:	b25b      	sxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	da15      	bge.n	800a3c6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	7858      	ldrb	r0, [r3, #1]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a1a      	ldr	r2, [r3, #32]
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	f7fd fe4d 	bl	8008048 <disk_write>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <f_sync+0x54>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e04f      	b.n	800a458 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	7d1b      	ldrb	r3, [r3, #20]
 800a3bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a3c6:	f7fc fad3 	bl	8006970 <get_fattime>
 800a3ca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	f7fe f925 	bl	8008624 <move_window>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d138      	bne.n	800a456 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	330b      	adds	r3, #11
 800a3ee:	781a      	ldrb	r2, [r3, #0]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	330b      	adds	r3, #11
 800a3f4:	f042 0220 	orr.w	r2, r2, #32
 800a3f8:	b2d2      	uxtb	r2, r2
 800a3fa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6818      	ldr	r0, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	461a      	mov	r2, r3
 800a406:	68f9      	ldr	r1, [r7, #12]
 800a408:	f7fe fe2a 	bl	8009060 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f103 021c 	add.w	r2, r3, #28
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	4619      	mov	r1, r3
 800a418:	4610      	mov	r0, r2
 800a41a:	f7fd fea9 	bl	8008170 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3316      	adds	r3, #22
 800a422:	6939      	ldr	r1, [r7, #16]
 800a424:	4618      	mov	r0, r3
 800a426:	f7fd fea3 	bl	8008170 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3312      	adds	r3, #18
 800a42e:	2100      	movs	r1, #0
 800a430:	4618      	mov	r0, r3
 800a432:	f7fd fe82 	bl	800813a <st_word>
					fs->wflag = 1;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2201      	movs	r2, #1
 800a43a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe f91e 	bl	8008680 <sync_fs>
 800a444:	4603      	mov	r3, r0
 800a446:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	7d1b      	ldrb	r3, [r3, #20]
 800a44c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a450:	b2da      	uxtb	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a456:	7dfb      	ldrb	r3, [r7, #23]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3718      	adds	r7, #24
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff ff7b 	bl	800a364 <f_sync>
 800a46e:	4603      	mov	r3, r0
 800a470:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d118      	bne.n	800a4aa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f107 0208 	add.w	r2, r7, #8
 800a47e:	4611      	mov	r1, r2
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fa81 	bl	8009988 <validate>
 800a486:	4603      	mov	r3, r0
 800a488:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10c      	bne.n	800a4aa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	4618      	mov	r0, r3
 800a496:	f7fe f821 	bl	80084dc <dec_lock>
 800a49a:	4603      	mov	r3, r0
 800a49c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d102      	bne.n	800a4aa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b090      	sub	sp, #64	; 0x40
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f107 0208 	add.w	r2, r7, #8
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7ff fa5e 	bl	8009988 <validate>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a4d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d103      	bne.n	800a4e2 <f_lseek+0x2e>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	7d5b      	ldrb	r3, [r3, #21]
 800a4de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a4e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d002      	beq.n	800a4f0 <f_lseek+0x3c>
 800a4ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4ee:	e1e6      	b.n	800a8be <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 80d1 	beq.w	800a69c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a500:	d15a      	bne.n	800a5b8 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a506:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	1d1a      	adds	r2, r3, #4
 800a50c:	627a      	str	r2, [r7, #36]	; 0x24
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	617b      	str	r3, [r7, #20]
 800a512:	2302      	movs	r3, #2
 800a514:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d03a      	beq.n	800a598 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	613b      	str	r3, [r7, #16]
 800a526:	2300      	movs	r3, #0
 800a528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	3302      	adds	r3, #2
 800a52e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	3301      	adds	r3, #1
 800a538:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe f92b 	bl	800879a <get_fat>
 800a544:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d804      	bhi.n	800a556 <f_lseek+0xa2>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2202      	movs	r2, #2
 800a550:	755a      	strb	r2, [r3, #21]
 800a552:	2302      	movs	r3, #2
 800a554:	e1b3      	b.n	800a8be <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55c:	d104      	bne.n	800a568 <f_lseek+0xb4>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	755a      	strb	r2, [r3, #21]
 800a564:	2301      	movs	r3, #1
 800a566:	e1aa      	b.n	800a8be <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	3301      	adds	r3, #1
 800a56c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a56e:	429a      	cmp	r2, r3
 800a570:	d0de      	beq.n	800a530 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	429a      	cmp	r2, r3
 800a578:	d809      	bhi.n	800a58e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	1d1a      	adds	r2, r3, #4
 800a57e:	627a      	str	r2, [r7, #36]	; 0x24
 800a580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	1d1a      	adds	r2, r3, #4
 800a588:	627a      	str	r2, [r7, #36]	; 0x24
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a594:	429a      	cmp	r2, r3
 800a596:	d3c4      	bcc.n	800a522 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a59e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a5a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d803      	bhi.n	800a5b0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	e184      	b.n	800a8ba <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a5b0:	2311      	movs	r3, #17
 800a5b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a5b6:	e180      	b.n	800a8ba <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d902      	bls.n	800a5c8 <f_lseek+0x114>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 8172 	beq.w	800a8ba <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7fe fb65 	bl	8008cac <clmt_clust>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	f7fe f8b3 	bl	800875c <clust2sect>
 800a5f6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d104      	bne.n	800a608 <f_lseek+0x154>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2202      	movs	r2, #2
 800a602:	755a      	strb	r2, [r3, #21]
 800a604:	2302      	movs	r3, #2
 800a606:	e15a      	b.n	800a8be <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	0a5b      	lsrs	r3, r3, #9
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	8952      	ldrh	r2, [r2, #10]
 800a612:	3a01      	subs	r2, #1
 800a614:	4013      	ands	r3, r2
 800a616:	69ba      	ldr	r2, [r7, #24]
 800a618:	4413      	add	r3, r2
 800a61a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 8148 	beq.w	800a8ba <f_lseek+0x406>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	429a      	cmp	r2, r3
 800a632:	f000 8142 	beq.w	800a8ba <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	7d1b      	ldrb	r3, [r3, #20]
 800a63a:	b25b      	sxtb	r3, r3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	da18      	bge.n	800a672 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	7858      	ldrb	r0, [r3, #1]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1a      	ldr	r2, [r3, #32]
 800a64e:	2301      	movs	r3, #1
 800a650:	f7fd fcfa 	bl	8008048 <disk_write>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d004      	beq.n	800a664 <f_lseek+0x1b0>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	755a      	strb	r2, [r3, #21]
 800a660:	2301      	movs	r3, #1
 800a662:	e12c      	b.n	800a8be <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	7d1b      	ldrb	r3, [r3, #20]
 800a668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	7858      	ldrb	r0, [r3, #1]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a67c:	2301      	movs	r3, #1
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	f7fd fcc2 	bl	8008008 <disk_read>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d004      	beq.n	800a694 <f_lseek+0x1e0>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2201      	movs	r2, #1
 800a68e:	755a      	strb	r2, [r3, #21]
 800a690:	2301      	movs	r3, #1
 800a692:	e114      	b.n	800a8be <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	69ba      	ldr	r2, [r7, #24]
 800a698:	621a      	str	r2, [r3, #32]
 800a69a:	e10e      	b.n	800a8ba <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d908      	bls.n	800a6b8 <f_lseek+0x204>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	7d1b      	ldrb	r3, [r3, #20]
 800a6aa:	f003 0302 	and.w	r3, r3, #2
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d102      	bne.n	800a6b8 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6c6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 80a7 	beq.w	800a81e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	895b      	ldrh	r3, [r3, #10]
 800a6d4:	025b      	lsls	r3, r3, #9
 800a6d6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d01b      	beq.n	800a716 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	1e5a      	subs	r2, r3, #1
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	1e59      	subs	r1, r3, #1
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d30f      	bcc.n	800a716 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	1e5a      	subs	r2, r3, #1
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	425b      	negs	r3, r3
 800a6fe:	401a      	ands	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	63bb      	str	r3, [r7, #56]	; 0x38
 800a714:	e022      	b.n	800a75c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d119      	bne.n	800a756 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2100      	movs	r1, #0
 800a726:	4618      	mov	r0, r3
 800a728:	f7fe fa28 	bl	8008b7c <create_chain>
 800a72c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a730:	2b01      	cmp	r3, #1
 800a732:	d104      	bne.n	800a73e <f_lseek+0x28a>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2202      	movs	r2, #2
 800a738:	755a      	strb	r2, [r3, #21]
 800a73a:	2302      	movs	r3, #2
 800a73c:	e0bf      	b.n	800a8be <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a744:	d104      	bne.n	800a750 <f_lseek+0x29c>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	755a      	strb	r2, [r3, #21]
 800a74c:	2301      	movs	r3, #1
 800a74e:	e0b6      	b.n	800a8be <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a754:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a75a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d05d      	beq.n	800a81e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a762:	e03a      	b.n	800a7da <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	699a      	ldr	r2, [r3, #24]
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	441a      	add	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	7d1b      	ldrb	r3, [r3, #20]
 800a77c:	f003 0302 	and.w	r3, r3, #2
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00b      	beq.n	800a79c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe f9f7 	bl	8008b7c <create_chain>
 800a78e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	2b00      	cmp	r3, #0
 800a794:	d108      	bne.n	800a7a8 <f_lseek+0x2f4>
							ofs = 0; break;
 800a796:	2300      	movs	r3, #0
 800a798:	603b      	str	r3, [r7, #0]
 800a79a:	e022      	b.n	800a7e2 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fd fffa 	bl	800879a <get_fat>
 800a7a6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ae:	d104      	bne.n	800a7ba <f_lseek+0x306>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	755a      	strb	r2, [r3, #21]
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e081      	b.n	800a8be <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d904      	bls.n	800a7ca <f_lseek+0x316>
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d304      	bcc.n	800a7d4 <f_lseek+0x320>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	755a      	strb	r2, [r3, #21]
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e074      	b.n	800a8be <f_lseek+0x40a>
					fp->clust = clst;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7d8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d8c0      	bhi.n	800a764 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	699a      	ldr	r2, [r3, #24]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	441a      	add	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d012      	beq.n	800a81e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fd ffad 	bl	800875c <clust2sect>
 800a802:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a806:	2b00      	cmp	r3, #0
 800a808:	d104      	bne.n	800a814 <f_lseek+0x360>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2202      	movs	r2, #2
 800a80e:	755a      	strb	r2, [r3, #21]
 800a810:	2302      	movs	r3, #2
 800a812:	e054      	b.n	800a8be <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	0a5b      	lsrs	r3, r3, #9
 800a818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a81a:	4413      	add	r3, r2
 800a81c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	699a      	ldr	r2, [r3, #24]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	429a      	cmp	r2, r3
 800a828:	d90a      	bls.n	800a840 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	699a      	ldr	r2, [r3, #24]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	7d1b      	ldrb	r3, [r3, #20]
 800a836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d036      	beq.n	800a8ba <f_lseek+0x406>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a1b      	ldr	r3, [r3, #32]
 800a850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a852:	429a      	cmp	r2, r3
 800a854:	d031      	beq.n	800a8ba <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	7d1b      	ldrb	r3, [r3, #20]
 800a85a:	b25b      	sxtb	r3, r3
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	da18      	bge.n	800a892 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	7858      	ldrb	r0, [r3, #1]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a1a      	ldr	r2, [r3, #32]
 800a86e:	2301      	movs	r3, #1
 800a870:	f7fd fbea 	bl	8008048 <disk_write>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d004      	beq.n	800a884 <f_lseek+0x3d0>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	755a      	strb	r2, [r3, #21]
 800a880:	2301      	movs	r3, #1
 800a882:	e01c      	b.n	800a8be <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	7d1b      	ldrb	r3, [r3, #20]
 800a888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	7858      	ldrb	r0, [r3, #1]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a89c:	2301      	movs	r3, #1
 800a89e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8a0:	f7fd fbb2 	bl	8008008 <disk_read>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d004      	beq.n	800a8b4 <f_lseek+0x400>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	755a      	strb	r2, [r3, #21]
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e004      	b.n	800a8be <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8b8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a8ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3740      	adds	r7, #64	; 0x40
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800a8c8:	b590      	push	{r4, r7, lr}
 800a8ca:	b09d      	sub	sp, #116	; 0x74
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	607a      	str	r2, [r7, #4]
 800a8d2:	603b      	str	r3, [r7, #0]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800a8d8:	2301      	movs	r3, #1
 800a8da:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800a8dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8e0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a8e2:	f107 030c 	add.w	r3, r7, #12
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fe fd67 	bl	80093ba <get_ldnumber>
 800a8ec:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	da02      	bge.n	800a8fa <f_mkfs+0x32>
 800a8f4:	230b      	movs	r3, #11
 800a8f6:	f000 bc0d 	b.w	800b114 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800a8fa:	4a94      	ldr	r2, [pc, #592]	; (800ab4c <f_mkfs+0x284>)
 800a8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <f_mkfs+0x4a>
 800a906:	4a91      	ldr	r2, [pc, #580]	; (800ab4c <f_mkfs+0x284>)
 800a908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a90e:	2200      	movs	r2, #0
 800a910:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800a912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a914:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800a918:	2300      	movs	r3, #0
 800a91a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800a91e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a922:	4618      	mov	r0, r3
 800a924:	f7fd fb4a 	bl	8007fbc <disk_initialize>
 800a928:	4603      	mov	r3, r0
 800a92a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a92e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a932:	f003 0301 	and.w	r3, r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <f_mkfs+0x76>
 800a93a:	2303      	movs	r3, #3
 800a93c:	e3ea      	b.n	800b114 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a93e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a942:	f003 0304 	and.w	r3, r3, #4
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <f_mkfs+0x86>
 800a94a:	230a      	movs	r3, #10
 800a94c:	e3e2      	b.n	800b114 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800a94e:	f107 0214 	add.w	r2, r7, #20
 800a952:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a956:	2103      	movs	r1, #3
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fd fb95 	bl	8008088 <disk_ioctl>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10c      	bne.n	800a97e <f_mkfs+0xb6>
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d009      	beq.n	800a97e <f_mkfs+0xb6>
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a970:	d805      	bhi.n	800a97e <f_mkfs+0xb6>
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	1e5a      	subs	r2, r3, #1
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	4013      	ands	r3, r2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <f_mkfs+0xba>
 800a97e:	2301      	movs	r3, #1
 800a980:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800a982:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a986:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d003      	beq.n	800a996 <f_mkfs+0xce>
 800a98e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	429a      	cmp	r2, r3
 800a994:	d309      	bcc.n	800a9aa <f_mkfs+0xe2>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a99c:	d805      	bhi.n	800a9aa <f_mkfs+0xe2>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	1e5a      	subs	r2, r3, #1
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <f_mkfs+0xe6>
 800a9aa:	2313      	movs	r3, #19
 800a9ac:	e3b2      	b.n	800b114 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800a9ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800a9bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a9be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a9c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800a9c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9cc:	fb02 f303 	mul.w	r3, r2, r3
 800a9d0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800a9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d101      	bne.n	800a9dc <f_mkfs+0x114>
 800a9d8:	230e      	movs	r3, #14
 800a9da:	e39b      	b.n	800b114 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800a9dc:	f107 0210 	add.w	r2, r7, #16
 800a9e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fd fb4e 	bl	8008088 <disk_ioctl>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <f_mkfs+0x12e>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e38e      	b.n	800b114 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800a9f6:	7afb      	ldrb	r3, [r7, #11]
 800a9f8:	f003 0308 	and.w	r3, r3, #8
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <f_mkfs+0x13c>
 800aa00:	2300      	movs	r3, #0
 800aa02:	e000      	b.n	800aa06 <f_mkfs+0x13e>
 800aa04:	233f      	movs	r3, #63	; 0x3f
 800aa06:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d901      	bls.n	800aa14 <f_mkfs+0x14c>
 800aa10:	230e      	movs	r3, #14
 800aa12:	e37f      	b.n	800b114 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	2b7f      	cmp	r3, #127	; 0x7f
 800aa20:	d801      	bhi.n	800aa26 <f_mkfs+0x15e>
 800aa22:	230e      	movs	r3, #14
 800aa24:	e376      	b.n	800b114 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2b80      	cmp	r3, #128	; 0x80
 800aa2a:	d901      	bls.n	800aa30 <f_mkfs+0x168>
 800aa2c:	2313      	movs	r3, #19
 800aa2e:	e371      	b.n	800b114 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800aa30:	7afb      	ldrb	r3, [r7, #11]
 800aa32:	f003 0302 	and.w	r3, r3, #2
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00d      	beq.n	800aa56 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800aa3a:	7afb      	ldrb	r3, [r7, #11]
 800aa3c:	f003 0307 	and.w	r3, r3, #7
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d004      	beq.n	800aa4e <f_mkfs+0x186>
 800aa44:	7afb      	ldrb	r3, [r7, #11]
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d103      	bne.n	800aa56 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800aa54:	e009      	b.n	800aa6a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800aa56:	7afb      	ldrb	r3, [r7, #11]
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <f_mkfs+0x19c>
 800aa60:	2313      	movs	r3, #19
 800aa62:	e357      	b.n	800b114 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800aa64:	2302      	movs	r3, #2
 800aa66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800aa6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d13c      	bne.n	800aaf0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800aa76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d11b      	bne.n	800aab4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	0c5b      	lsrs	r3, r3, #17
 800aa80:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800aa82:	2300      	movs	r3, #0
 800aa84:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa86:	2301      	movs	r3, #1
 800aa88:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa8a:	e005      	b.n	800aa98 <f_mkfs+0x1d0>
 800aa8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa8e:	3301      	adds	r3, #1
 800aa90:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa98:	4a2d      	ldr	r2, [pc, #180]	; (800ab50 <f_mkfs+0x288>)
 800aa9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d007      	beq.n	800aab4 <f_mkfs+0x1ec>
 800aaa4:	4a2a      	ldr	r2, [pc, #168]	; (800ab50 <f_mkfs+0x288>)
 800aaa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaac:	461a      	mov	r2, r3
 800aaae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d2eb      	bcs.n	800aa8c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aab8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aabc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	3302      	adds	r3, #2
 800aac2:	009a      	lsls	r2, r3, #2
 800aac4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aac6:	4413      	add	r3, r2
 800aac8:	1e5a      	subs	r2, r3, #1
 800aaca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aacc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800aad2:	2320      	movs	r3, #32
 800aad4:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 800aad6:	2300      	movs	r3, #0
 800aad8:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d903      	bls.n	800aaec <f_mkfs+0x224>
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	4a1b      	ldr	r2, [pc, #108]	; (800ab54 <f_mkfs+0x28c>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d952      	bls.n	800ab92 <f_mkfs+0x2ca>
 800aaec:	230e      	movs	r3, #14
 800aaee:	e311      	b.n	800b114 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800aaf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d11b      	bne.n	800ab2e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	0b1b      	lsrs	r3, r3, #12
 800aafa:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800aafc:	2300      	movs	r3, #0
 800aafe:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab00:	2301      	movs	r3, #1
 800ab02:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab04:	e005      	b.n	800ab12 <f_mkfs+0x24a>
 800ab06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab08:	3301      	adds	r3, #1
 800ab0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab12:	4a11      	ldr	r2, [pc, #68]	; (800ab58 <f_mkfs+0x290>)
 800ab14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d007      	beq.n	800ab2e <f_mkfs+0x266>
 800ab1e:	4a0e      	ldr	r2, [pc, #56]	; (800ab58 <f_mkfs+0x290>)
 800ab20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab26:	461a      	mov	r2, r3
 800ab28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d2eb      	bcs.n	800ab06 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab36:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d90c      	bls.n	800ab5c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800ab42:	6a3b      	ldr	r3, [r7, #32]
 800ab44:	3302      	adds	r3, #2
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	663b      	str	r3, [r7, #96]	; 0x60
 800ab4a:	e012      	b.n	800ab72 <f_mkfs+0x2aa>
 800ab4c:	2000022c 	.word	0x2000022c
 800ab50:	0800ba0c 	.word	0x0800ba0c
 800ab54:	0ffffff5 	.word	0x0ffffff5
 800ab58:	0800ba1c 	.word	0x0800ba1c
				} else {
					fmt = FS_FAT12;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800ab62:	6a3a      	ldr	r2, [r7, #32]
 800ab64:	4613      	mov	r3, r2
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	4413      	add	r3, r2
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	085b      	lsrs	r3, r3, #1
 800ab6e:	3303      	adds	r3, #3
 800ab70:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800ab72:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ab74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab76:	4413      	add	r3, r2
 800ab78:	1e5a      	subs	r2, r3, #1
 800ab7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab80:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800ab82:	2301      	movs	r3, #1
 800ab84:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800ab86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab88:	015a      	lsls	r2, r3, #5
 800ab8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab90:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ab92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab96:	4413      	add	r3, r2
 800ab98:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800ab9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab9e:	fb02 f203 	mul.w	r2, r2, r3
 800aba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aba4:	4413      	add	r3, r2
 800aba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aba8:	4413      	add	r3, r2
 800abaa:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	4413      	add	r3, r2
 800abb2:	1e5a      	subs	r2, r3, #1
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	425b      	negs	r3, r3
 800abb8:	401a      	ands	r2, r3
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	1ad3      	subs	r3, r2, r3
 800abbe:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800abc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	d108      	bne.n	800abda <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800abc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800abca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abcc:	4413      	add	r3, r2
 800abce:	65bb      	str	r3, [r7, #88]	; 0x58
 800abd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800abd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abd4:	4413      	add	r3, r2
 800abd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abd8:	e006      	b.n	800abe8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800abda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abde:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abe4:	4413      	add	r3, r2
 800abe6:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800abe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abea:	011a      	lsls	r2, r3, #4
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	441a      	add	r2, r3
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	1ad2      	subs	r2, r2, r3
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d901      	bls.n	800abfe <f_mkfs+0x336>
 800abfa:	230e      	movs	r3, #14
 800abfc:	e28a      	b.n	800b114 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac02:	1ad2      	subs	r2, r2, r3
 800ac04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac08:	fb01 f303 	mul.w	r3, r1, r3
 800ac0c:	1ad2      	subs	r2, r2, r3
 800ac0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac10:	1ad2      	subs	r2, r2, r3
 800ac12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac18:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800ac1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac1e:	2b03      	cmp	r3, #3
 800ac20:	d10f      	bne.n	800ac42 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d80a      	bhi.n	800ac42 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d105      	bne.n	800ac3e <f_mkfs+0x376>
 800ac32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac34:	085b      	lsrs	r3, r3, #1
 800ac36:	607b      	str	r3, [r7, #4]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d144      	bne.n	800acc8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800ac3e:	230e      	movs	r3, #14
 800ac40:	e268      	b.n	800b114 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800ac42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d133      	bne.n	800acb2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d91e      	bls.n	800ac92 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d107      	bne.n	800ac6a <f_mkfs+0x3a2>
 800ac5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac5c:	005b      	lsls	r3, r3, #1
 800ac5e:	2b40      	cmp	r3, #64	; 0x40
 800ac60:	d803      	bhi.n	800ac6a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800ac62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	607b      	str	r3, [r7, #4]
 800ac68:	e033      	b.n	800acd2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800ac6a:	7afb      	ldrb	r3, [r7, #11]
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d003      	beq.n	800ac7c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800ac74:	2303      	movs	r3, #3
 800ac76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ac7a:	e02a      	b.n	800acd2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d105      	bne.n	800ac8e <f_mkfs+0x3c6>
 800ac82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	607b      	str	r3, [r7, #4]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b80      	cmp	r3, #128	; 0x80
 800ac8c:	d91e      	bls.n	800accc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800ac8e:	230e      	movs	r3, #14
 800ac90:	e240      	b.n	800b114 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d80a      	bhi.n	800acb2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d105      	bne.n	800acae <f_mkfs+0x3e6>
 800aca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	607b      	str	r3, [r7, #4]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b80      	cmp	r3, #128	; 0x80
 800acac:	d910      	bls.n	800acd0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800acae:	230e      	movs	r3, #14
 800acb0:	e230      	b.n	800b114 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800acb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d10c      	bne.n	800acd4 <f_mkfs+0x40c>
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d907      	bls.n	800acd4 <f_mkfs+0x40c>
 800acc4:	230e      	movs	r3, #14
 800acc6:	e225      	b.n	800b114 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800acc8:	bf00      	nop
 800acca:	e6ce      	b.n	800aa6a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800accc:	bf00      	nop
 800acce:	e6cc      	b.n	800aa6a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800acd0:	bf00      	nop
			pau = au;
 800acd2:	e6ca      	b.n	800aa6a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800acd4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800acd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800acd8:	461a      	mov	r2, r3
 800acda:	2100      	movs	r1, #0
 800acdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acde:	f7fd fa94 	bl	800820a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800ace2:	220b      	movs	r2, #11
 800ace4:	49bc      	ldr	r1, [pc, #752]	; (800afd8 <f_mkfs+0x710>)
 800ace6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ace8:	f7fd fa6e 	bl	80081c8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	330b      	adds	r3, #11
 800acf0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fd fa20 	bl	800813a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	330d      	adds	r3, #13
 800acfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad00:	b2d2      	uxtb	r2, r2
 800ad02:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad06:	330e      	adds	r3, #14
 800ad08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad0a:	b292      	uxth	r2, r2
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fd fa13 	bl	800813a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad16:	3310      	adds	r3, #16
 800ad18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad20:	f103 0211 	add.w	r2, r3, #17
 800ad24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ad28:	2b03      	cmp	r3, #3
 800ad2a:	d002      	beq.n	800ad32 <f_mkfs+0x46a>
 800ad2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	e000      	b.n	800ad34 <f_mkfs+0x46c>
 800ad32:	2300      	movs	r3, #0
 800ad34:	4619      	mov	r1, r3
 800ad36:	4610      	mov	r0, r2
 800ad38:	f7fd f9ff 	bl	800813a <st_word>
		if (sz_vol < 0x10000) {
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad42:	d208      	bcs.n	800ad56 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	3313      	adds	r3, #19
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	b292      	uxth	r2, r2
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fd f9f3 	bl	800813a <st_word>
 800ad54:	e006      	b.n	800ad64 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad58:	3320      	adds	r3, #32
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fd fa06 	bl	8008170 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	3315      	adds	r3, #21
 800ad68:	22f8      	movs	r2, #248	; 0xf8
 800ad6a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800ad6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6e:	3318      	adds	r3, #24
 800ad70:	213f      	movs	r1, #63	; 0x3f
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fd f9e1 	bl	800813a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7a:	331a      	adds	r3, #26
 800ad7c:	21ff      	movs	r1, #255	; 0xff
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fd f9db 	bl	800813a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	331c      	adds	r3, #28
 800ad88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fd f9f0 	bl	8008170 <st_dword>
		if (fmt == FS_FAT32) {
 800ad90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	d131      	bne.n	800adfc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800ad9e:	f7fb fde7 	bl	8006970 <get_fattime>
 800ada2:	4603      	mov	r3, r0
 800ada4:	4619      	mov	r1, r3
 800ada6:	4620      	mov	r0, r4
 800ada8:	f7fd f9e2 	bl	8008170 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	3324      	adds	r3, #36	; 0x24
 800adb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fd f9dc 	bl	8008170 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	332c      	adds	r3, #44	; 0x2c
 800adbc:	2102      	movs	r1, #2
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fd f9d6 	bl	8008170 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	3330      	adds	r3, #48	; 0x30
 800adc8:	2101      	movs	r1, #1
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fd f9b5 	bl	800813a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	3332      	adds	r3, #50	; 0x32
 800add4:	2106      	movs	r1, #6
 800add6:	4618      	mov	r0, r3
 800add8:	f7fd f9af 	bl	800813a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	3340      	adds	r3, #64	; 0x40
 800ade0:	2280      	movs	r2, #128	; 0x80
 800ade2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	3342      	adds	r3, #66	; 0x42
 800ade8:	2229      	movs	r2, #41	; 0x29
 800adea:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adee:	3347      	adds	r3, #71	; 0x47
 800adf0:	2213      	movs	r2, #19
 800adf2:	497a      	ldr	r1, [pc, #488]	; (800afdc <f_mkfs+0x714>)
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fd f9e7 	bl	80081c8 <mem_cpy>
 800adfa:	e020      	b.n	800ae3e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800ae02:	f7fb fdb5 	bl	8006970 <get_fattime>
 800ae06:	4603      	mov	r3, r0
 800ae08:	4619      	mov	r1, r3
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f7fd f9b0 	bl	8008170 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	3316      	adds	r3, #22
 800ae14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae16:	b292      	uxth	r2, r2
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fd f98d 	bl	800813a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	3324      	adds	r3, #36	; 0x24
 800ae24:	2280      	movs	r2, #128	; 0x80
 800ae26:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	3326      	adds	r3, #38	; 0x26
 800ae2c:	2229      	movs	r2, #41	; 0x29
 800ae2e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	332b      	adds	r3, #43	; 0x2b
 800ae34:	2213      	movs	r2, #19
 800ae36:	496a      	ldr	r1, [pc, #424]	; (800afe0 <f_mkfs+0x718>)
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7fd f9c5 	bl	80081c8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae44:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fd f976 	bl	800813a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800ae4e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ae52:	2301      	movs	r3, #1
 800ae54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae58:	f7fd f8f6 	bl	8008048 <disk_write>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <f_mkfs+0x59e>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e156      	b.n	800b114 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800ae66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d140      	bne.n	800aef0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	1d9a      	adds	r2, r3, #6
 800ae72:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ae76:	2301      	movs	r3, #1
 800ae78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae7a:	f7fd f8e5 	bl	8008048 <disk_write>
			mem_set(buf, 0, ss);
 800ae7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae80:	461a      	mov	r2, r3
 800ae82:	2100      	movs	r1, #0
 800ae84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae86:	f7fd f9c0 	bl	800820a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800ae8a:	4956      	ldr	r1, [pc, #344]	; (800afe4 <f_mkfs+0x71c>)
 800ae8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae8e:	f7fd f96f 	bl	8008170 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ae98:	4953      	ldr	r1, [pc, #332]	; (800afe8 <f_mkfs+0x720>)
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7fd f968 	bl	8008170 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800aea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800aea6:	6a3b      	ldr	r3, [r7, #32]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	4619      	mov	r1, r3
 800aeac:	4610      	mov	r0, r2
 800aeae:	f7fd f95f 	bl	8008170 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aeb8:	2102      	movs	r1, #2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fd f958 	bl	8008170 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aec6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fd f935 	bl	800813a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	1dda      	adds	r2, r3, #7
 800aed4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800aed8:	2301      	movs	r3, #1
 800aeda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aedc:	f7fd f8b4 	bl	8008048 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800aee8:	2301      	movs	r3, #1
 800aeea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aeec:	f7fd f8ac 	bl	8008048 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800aef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aef2:	2100      	movs	r1, #0
 800aef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aef6:	f7fd f988 	bl	800820a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800aefa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aefc:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800aefe:	2300      	movs	r3, #0
 800af00:	64bb      	str	r3, [r7, #72]	; 0x48
 800af02:	e04b      	b.n	800af9c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800af04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800af08:	2b03      	cmp	r3, #3
 800af0a:	d113      	bne.n	800af34 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800af0c:	f06f 0107 	mvn.w	r1, #7
 800af10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af12:	f7fd f92d 	bl	8008170 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	3304      	adds	r3, #4
 800af1a:	f04f 31ff 	mov.w	r1, #4294967295
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fd f926 	bl	8008170 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800af24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af26:	3308      	adds	r3, #8
 800af28:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fd f91f 	bl	8008170 <st_dword>
 800af32:	e00b      	b.n	800af4c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800af34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d101      	bne.n	800af40 <f_mkfs+0x678>
 800af3c:	4b2b      	ldr	r3, [pc, #172]	; (800afec <f_mkfs+0x724>)
 800af3e:	e001      	b.n	800af44 <f_mkfs+0x67c>
 800af40:	f06f 0307 	mvn.w	r3, #7
 800af44:	4619      	mov	r1, r3
 800af46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af48:	f7fd f912 	bl	8008170 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800af4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af4e:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800af50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af54:	4293      	cmp	r3, r2
 800af56:	bf28      	it	cs
 800af58:	4613      	movcs	r3, r2
 800af5a:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800af5c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800af60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af66:	f7fd f86f 	bl	8008048 <disk_write>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <f_mkfs+0x6ac>
 800af70:	2301      	movs	r3, #1
 800af72:	e0cf      	b.n	800b114 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800af74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af76:	461a      	mov	r2, r3
 800af78:	2100      	movs	r1, #0
 800af7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af7c:	f7fd f945 	bl	800820a <mem_set>
				sect += n; nsect -= n;
 800af80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af84:	4413      	add	r3, r2
 800af86:	66bb      	str	r3, [r7, #104]	; 0x68
 800af88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800af90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1dc      	bne.n	800af50 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800af96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af98:	3301      	adds	r3, #1
 800af9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d3af      	bcc.n	800af04 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800afa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	d101      	bne.n	800afb0 <f_mkfs+0x6e8>
 800afac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afae:	e000      	b.n	800afb2 <f_mkfs+0x6ea>
 800afb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afb2:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800afb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb8:	4293      	cmp	r3, r2
 800afba:	bf28      	it	cs
 800afbc:	4613      	movcs	r3, r2
 800afbe:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800afc0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800afc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afca:	f7fd f83d 	bl	8008048 <disk_write>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00d      	beq.n	800aff0 <f_mkfs+0x728>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e09d      	b.n	800b114 <f_mkfs+0x84c>
 800afd8:	0800b930 	.word	0x0800b930
 800afdc:	0800b93c 	.word	0x0800b93c
 800afe0:	0800b950 	.word	0x0800b950
 800afe4:	41615252 	.word	0x41615252
 800afe8:	61417272 	.word	0x61417272
 800afec:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800aff0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aff4:	4413      	add	r3, r2
 800aff6:	66bb      	str	r3, [r7, #104]	; 0x68
 800aff8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800affa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800b000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1d6      	bne.n	800afb4 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800b006:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d103      	bne.n	800b016 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800b00e:	230c      	movs	r3, #12
 800b010:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800b014:	e010      	b.n	800b038 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b01c:	d303      	bcc.n	800b026 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800b01e:	2306      	movs	r3, #6
 800b020:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800b024:	e008      	b.n	800b038 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800b026:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	d101      	bne.n	800b032 <f_mkfs+0x76a>
 800b02e:	2304      	movs	r3, #4
 800b030:	e000      	b.n	800b034 <f_mkfs+0x76c>
 800b032:	2301      	movs	r3, #1
 800b034:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800b038:	7afb      	ldrb	r3, [r7, #11]
 800b03a:	f003 0308 	and.w	r3, r3, #8
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d15b      	bne.n	800b0fa <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800b042:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b044:	461a      	mov	r2, r3
 800b046:	2100      	movs	r1, #0
 800b048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b04a:	f7fd f8de 	bl	800820a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b054:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b058:	4618      	mov	r0, r3
 800b05a:	f7fd f86e 	bl	800813a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800b05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b060:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b064:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	2200      	movs	r2, #0
 800b06a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	3301      	adds	r3, #1
 800b070:	2201      	movs	r2, #1
 800b072:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	3302      	adds	r3, #2
 800b078:	2201      	movs	r2, #1
 800b07a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	3303      	adds	r3, #3
 800b080:	2200      	movs	r2, #0
 800b082:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	3304      	adds	r3, #4
 800b088:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800b08c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b092:	441a      	add	r2, r3
 800b094:	4b21      	ldr	r3, [pc, #132]	; (800b11c <f_mkfs+0x854>)
 800b096:	fba3 1302 	umull	r1, r3, r3, r2
 800b09a:	1ad2      	subs	r2, r2, r3
 800b09c:	0852      	lsrs	r2, r2, #1
 800b09e:	4413      	add	r3, r2
 800b0a0:	0b5b      	lsrs	r3, r3, #13
 800b0a2:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	3305      	adds	r3, #5
 800b0a8:	22fe      	movs	r2, #254	; 0xfe
 800b0aa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800b0ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0ae:	089b      	lsrs	r3, r3, #2
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	3306      	adds	r3, #6
 800b0b6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	3307      	adds	r3, #7
 800b0c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b0c4:	b2d2      	uxtb	r2, r2
 800b0c6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fd f84e 	bl	8008170 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	330c      	adds	r3, #12
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	4611      	mov	r1, r2
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fd f847 	bl	8008170 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800b0e2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0ec:	f7fc ffac 	bl	8008048 <disk_write>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d001      	beq.n	800b0fa <f_mkfs+0x832>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e00c      	b.n	800b114 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800b0fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b0fe:	2200      	movs	r2, #0
 800b100:	2100      	movs	r1, #0
 800b102:	4618      	mov	r0, r3
 800b104:	f7fc ffc0 	bl	8008088 <disk_ioctl>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <f_mkfs+0x84a>
 800b10e:	2301      	movs	r3, #1
 800b110:	e000      	b.n	800b114 <f_mkfs+0x84c>

	return FR_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3774      	adds	r7, #116	; 0x74
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd90      	pop	{r4, r7, pc}
 800b11c:	0515565b 	.word	0x0515565b

0800b120 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b12c:	78fb      	ldrb	r3, [r7, #3]
 800b12e:	2b0a      	cmp	r3, #10
 800b130:	d103      	bne.n	800b13a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b132:	210d      	movs	r1, #13
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7ff fff3 	bl	800b120 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	db25      	blt.n	800b192 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	1c5a      	adds	r2, r3, #1
 800b14a:	60fa      	str	r2, [r7, #12]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	4413      	add	r3, r2
 800b150:	78fa      	ldrb	r2, [r7, #3]
 800b152:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b3c      	cmp	r3, #60	; 0x3c
 800b158:	dd12      	ble.n	800b180 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6818      	ldr	r0, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f103 010c 	add.w	r1, r3, #12
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	f107 0308 	add.w	r3, r7, #8
 800b16a:	f7fe ff86 	bl	800a07a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b16e:	68ba      	ldr	r2, [r7, #8]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	429a      	cmp	r2, r3
 800b174:	d101      	bne.n	800b17a <putc_bfd+0x5a>
 800b176:	2300      	movs	r3, #0
 800b178:	e001      	b.n	800b17e <putc_bfd+0x5e>
 800b17a:	f04f 33ff 	mov.w	r3, #4294967295
 800b17e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	1c5a      	adds	r2, r3, #1
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	609a      	str	r2, [r3, #8]
 800b190:	e000      	b.n	800b194 <putc_bfd+0x74>
	if (i < 0) return;
 800b192:	bf00      	nop
}
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	db17      	blt.n	800b1da <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6818      	ldr	r0, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f103 010c 	add.w	r1, r3, #12
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	f107 030c 	add.w	r3, r7, #12
 800b1be:	f7fe ff5c 	bl	800a07a <f_write>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d108      	bne.n	800b1da <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d102      	bne.n	800b1da <putc_flush+0x40>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	e001      	b.n	800b1de <putc_flush+0x44>
	return EOF;
 800b1da:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	605a      	str	r2, [r3, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	609a      	str	r2, [r3, #8]
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b210:	b40e      	push	{r1, r2, r3}
 800b212:	b580      	push	{r7, lr}
 800b214:	b0a7      	sub	sp, #156	; 0x9c
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b21a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b21e:	6879      	ldr	r1, [r7, #4]
 800b220:	4618      	mov	r0, r3
 800b222:	f7ff ffe0 	bl	800b1e6 <putc_init>

	va_start(arp, fmt);
 800b226:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b22a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b22c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b23c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 81f4 	beq.w	800b62e <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800b246:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b24a:	2b25      	cmp	r3, #37	; 0x25
 800b24c:	d008      	beq.n	800b260 <f_printf+0x50>
			putc_bfd(&pb, c);
 800b24e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b256:	4611      	mov	r1, r2
 800b258:	4618      	mov	r0, r3
 800b25a:	f7ff ff61 	bl	800b120 <putc_bfd>
			continue;
 800b25e:	e1e5      	b.n	800b62c <f_printf+0x41c>
		}
		w = f = 0;
 800b260:	2300      	movs	r3, #0
 800b262:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b266:	2300      	movs	r3, #0
 800b268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b26c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b27c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b280:	2b30      	cmp	r3, #48	; 0x30
 800b282:	d10b      	bne.n	800b29c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b284:	2301      	movs	r3, #1
 800b286:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b28a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b29a:	e024      	b.n	800b2e6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b29c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b2a0:	2b2d      	cmp	r3, #45	; 0x2d
 800b2a2:	d120      	bne.n	800b2e6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b2aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b2ba:	e014      	b.n	800b2e6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b2bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b2ce:	4413      	add	r3, r2
 800b2d0:	3b30      	subs	r3, #48	; 0x30
 800b2d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b2d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2da:	1c5a      	adds	r2, r3, #1
 800b2dc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b2e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b2ea:	2b2f      	cmp	r3, #47	; 0x2f
 800b2ec:	d903      	bls.n	800b2f6 <f_printf+0xe6>
 800b2ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b2f2:	2b39      	cmp	r3, #57	; 0x39
 800b2f4:	d9e2      	bls.n	800b2bc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b2f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b2fa:	2b6c      	cmp	r3, #108	; 0x6c
 800b2fc:	d003      	beq.n	800b306 <f_printf+0xf6>
 800b2fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b302:	2b4c      	cmp	r3, #76	; 0x4c
 800b304:	d10d      	bne.n	800b322 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b306:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b30a:	f043 0304 	orr.w	r3, r3, #4
 800b30e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b316:	1c5a      	adds	r2, r3, #1
 800b318:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b322:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b326:	2b00      	cmp	r3, #0
 800b328:	f000 8183 	beq.w	800b632 <f_printf+0x422>
		d = c;
 800b32c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b330:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b334:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b338:	2b60      	cmp	r3, #96	; 0x60
 800b33a:	d908      	bls.n	800b34e <f_printf+0x13e>
 800b33c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b340:	2b7a      	cmp	r3, #122	; 0x7a
 800b342:	d804      	bhi.n	800b34e <f_printf+0x13e>
 800b344:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b348:	3b20      	subs	r3, #32
 800b34a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b34e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b352:	3b42      	subs	r3, #66	; 0x42
 800b354:	2b16      	cmp	r3, #22
 800b356:	f200 8098 	bhi.w	800b48a <f_printf+0x27a>
 800b35a:	a201      	add	r2, pc, #4	; (adr r2, 800b360 <f_printf+0x150>)
 800b35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b360:	0800b46b 	.word	0x0800b46b
 800b364:	0800b453 	.word	0x0800b453
 800b368:	0800b47b 	.word	0x0800b47b
 800b36c:	0800b48b 	.word	0x0800b48b
 800b370:	0800b48b 	.word	0x0800b48b
 800b374:	0800b48b 	.word	0x0800b48b
 800b378:	0800b48b 	.word	0x0800b48b
 800b37c:	0800b48b 	.word	0x0800b48b
 800b380:	0800b48b 	.word	0x0800b48b
 800b384:	0800b48b 	.word	0x0800b48b
 800b388:	0800b48b 	.word	0x0800b48b
 800b38c:	0800b48b 	.word	0x0800b48b
 800b390:	0800b48b 	.word	0x0800b48b
 800b394:	0800b473 	.word	0x0800b473
 800b398:	0800b48b 	.word	0x0800b48b
 800b39c:	0800b48b 	.word	0x0800b48b
 800b3a0:	0800b48b 	.word	0x0800b48b
 800b3a4:	0800b3bd 	.word	0x0800b3bd
 800b3a8:	0800b48b 	.word	0x0800b48b
 800b3ac:	0800b47b 	.word	0x0800b47b
 800b3b0:	0800b48b 	.word	0x0800b48b
 800b3b4:	0800b48b 	.word	0x0800b48b
 800b3b8:	0800b483 	.word	0x0800b483
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b3bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3be:	1d1a      	adds	r2, r3, #4
 800b3c0:	67ba      	str	r2, [r7, #120]	; 0x78
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b3cc:	e004      	b.n	800b3d8 <f_printf+0x1c8>
 800b3ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b3d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b3da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3de:	4413      	add	r3, r2
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1f3      	bne.n	800b3ce <f_printf+0x1be>
			if (!(f & 2)) {
 800b3e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b3ea:	f003 0302 	and.w	r3, r3, #2
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d11a      	bne.n	800b428 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b3f2:	e005      	b.n	800b400 <f_printf+0x1f0>
 800b3f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3f8:	2120      	movs	r1, #32
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7ff fe90 	bl	800b120 <putc_bfd>
 800b400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b404:	1c5a      	adds	r2, r3, #1
 800b406:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b40a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b40e:	429a      	cmp	r2, r3
 800b410:	d8f0      	bhi.n	800b3f4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b412:	e009      	b.n	800b428 <f_printf+0x218>
 800b414:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b41a:	781a      	ldrb	r2, [r3, #0]
 800b41c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b420:	4611      	mov	r1, r2
 800b422:	4618      	mov	r0, r3
 800b424:	f7ff fe7c 	bl	800b120 <putc_bfd>
 800b428:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d1f1      	bne.n	800b414 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b430:	e005      	b.n	800b43e <f_printf+0x22e>
 800b432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b436:	2120      	movs	r1, #32
 800b438:	4618      	mov	r0, r3
 800b43a:	f7ff fe71 	bl	800b120 <putc_bfd>
 800b43e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b448:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d8f0      	bhi.n	800b432 <f_printf+0x222>
			continue;
 800b450:	e0ec      	b.n	800b62c <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b454:	1d1a      	adds	r2, r3, #4
 800b456:	67ba      	str	r2, [r7, #120]	; 0x78
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b460:	4611      	mov	r1, r2
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff fe5c 	bl	800b120 <putc_bfd>
 800b468:	e0e0      	b.n	800b62c <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800b46a:	2302      	movs	r3, #2
 800b46c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b470:	e014      	b.n	800b49c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b472:	2308      	movs	r3, #8
 800b474:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b478:	e010      	b.n	800b49c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b47a:	230a      	movs	r3, #10
 800b47c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b480:	e00c      	b.n	800b49c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b482:	2310      	movs	r3, #16
 800b484:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b488:	e008      	b.n	800b49c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b48a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b48e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b492:	4611      	mov	r1, r2
 800b494:	4618      	mov	r0, r3
 800b496:	f7ff fe43 	bl	800b120 <putc_bfd>
 800b49a:	e0c7      	b.n	800b62c <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b49c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b4a0:	f003 0304 	and.w	r3, r3, #4
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d004      	beq.n	800b4b2 <f_printf+0x2a2>
 800b4a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4aa:	1d1a      	adds	r2, r3, #4
 800b4ac:	67ba      	str	r2, [r7, #120]	; 0x78
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	e00c      	b.n	800b4cc <f_printf+0x2bc>
 800b4b2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b4b6:	2b44      	cmp	r3, #68	; 0x44
 800b4b8:	d104      	bne.n	800b4c4 <f_printf+0x2b4>
 800b4ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4bc:	1d1a      	adds	r2, r3, #4
 800b4be:	67ba      	str	r2, [r7, #120]	; 0x78
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	e003      	b.n	800b4cc <f_printf+0x2bc>
 800b4c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4c6:	1d1a      	adds	r2, r3, #4
 800b4c8:	67ba      	str	r2, [r7, #120]	; 0x78
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b4d0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b4d4:	2b44      	cmp	r3, #68	; 0x44
 800b4d6:	d10e      	bne.n	800b4f6 <f_printf+0x2e6>
 800b4d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	da0a      	bge.n	800b4f6 <f_printf+0x2e6>
			v = 0 - v;
 800b4e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4e4:	425b      	negs	r3, r3
 800b4e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b4ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b4ee:	f043 0308 	orr.w	r3, r3, #8
 800b4f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b4fc:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b504:	fbb3 f1f2 	udiv	r1, r3, r2
 800b508:	fb02 f201 	mul.w	r2, r2, r1
 800b50c:	1a9b      	subs	r3, r3, r2
 800b50e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b512:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b516:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b51e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b522:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b526:	2b09      	cmp	r3, #9
 800b528:	d90b      	bls.n	800b542 <f_printf+0x332>
 800b52a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b52e:	2b78      	cmp	r3, #120	; 0x78
 800b530:	d101      	bne.n	800b536 <f_printf+0x326>
 800b532:	2227      	movs	r2, #39	; 0x27
 800b534:	e000      	b.n	800b538 <f_printf+0x328>
 800b536:	2207      	movs	r2, #7
 800b538:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b53c:	4413      	add	r3, r2
 800b53e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b542:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b54c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b550:	3230      	adds	r2, #48	; 0x30
 800b552:	b2d2      	uxtb	r2, r2
 800b554:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800b558:	440b      	add	r3, r1
 800b55a:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b55e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <f_printf+0x35e>
 800b566:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b56a:	2b1f      	cmp	r3, #31
 800b56c:	d9c6      	bls.n	800b4fc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b56e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b572:	f003 0308 	and.w	r3, r3, #8
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00a      	beq.n	800b590 <f_printf+0x380>
 800b57a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b584:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b588:	4413      	add	r3, r2
 800b58a:	222d      	movs	r2, #45	; 0x2d
 800b58c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b590:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b598:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b59c:	f003 0301 	and.w	r3, r3, #1
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <f_printf+0x398>
 800b5a4:	2330      	movs	r3, #48	; 0x30
 800b5a6:	e000      	b.n	800b5aa <f_printf+0x39a>
 800b5a8:	2320      	movs	r3, #32
 800b5aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b5ae:	e007      	b.n	800b5c0 <f_printf+0x3b0>
 800b5b0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b5b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7ff fdb0 	bl	800b120 <putc_bfd>
 800b5c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b5c4:	f003 0302 	and.w	r3, r3, #2
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d108      	bne.n	800b5de <f_printf+0x3ce>
 800b5cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b5d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d8e8      	bhi.n	800b5b0 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800b5de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5e8:	f107 020c 	add.w	r2, r7, #12
 800b5ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5f0:	4413      	add	r3, r2
 800b5f2:	781a      	ldrb	r2, [r3, #0]
 800b5f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7ff fd90 	bl	800b120 <putc_bfd>
		} while (i);
 800b600:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1ea      	bne.n	800b5de <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800b608:	e007      	b.n	800b61a <f_printf+0x40a>
 800b60a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b60e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b612:	4611      	mov	r1, r2
 800b614:	4618      	mov	r0, r3
 800b616:	f7ff fd83 	bl	800b120 <putc_bfd>
 800b61a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b61e:	1c5a      	adds	r2, r3, #1
 800b620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b624:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b628:	429a      	cmp	r2, r3
 800b62a:	d8ee      	bhi.n	800b60a <f_printf+0x3fa>
		c = *fmt++;
 800b62c:	e5fe      	b.n	800b22c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b62e:	bf00      	nop
 800b630:	e000      	b.n	800b634 <f_printf+0x424>
		if (!c) break;
 800b632:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b638:	4618      	mov	r0, r3
 800b63a:	f7ff fdae 	bl	800b19a <putc_flush>
 800b63e:	4603      	mov	r3, r0
}
 800b640:	4618      	mov	r0, r3
 800b642:	379c      	adds	r7, #156	; 0x9c
 800b644:	46bd      	mov	sp, r7
 800b646:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b64a:	b003      	add	sp, #12
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop

0800b650 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b650:	b480      	push	{r7}
 800b652:	b087      	sub	sp, #28
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	4613      	mov	r3, r2
 800b65c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b65e:	2301      	movs	r3, #1
 800b660:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b662:	2300      	movs	r3, #0
 800b664:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b666:	4b1f      	ldr	r3, [pc, #124]	; (800b6e4 <FATFS_LinkDriverEx+0x94>)
 800b668:	7a5b      	ldrb	r3, [r3, #9]
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d131      	bne.n	800b6d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b670:	4b1c      	ldr	r3, [pc, #112]	; (800b6e4 <FATFS_LinkDriverEx+0x94>)
 800b672:	7a5b      	ldrb	r3, [r3, #9]
 800b674:	b2db      	uxtb	r3, r3
 800b676:	461a      	mov	r2, r3
 800b678:	4b1a      	ldr	r3, [pc, #104]	; (800b6e4 <FATFS_LinkDriverEx+0x94>)
 800b67a:	2100      	movs	r1, #0
 800b67c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b67e:	4b19      	ldr	r3, [pc, #100]	; (800b6e4 <FATFS_LinkDriverEx+0x94>)
 800b680:	7a5b      	ldrb	r3, [r3, #9]
 800b682:	b2db      	uxtb	r3, r3
 800b684:	4a17      	ldr	r2, [pc, #92]	; (800b6e4 <FATFS_LinkDriverEx+0x94>)
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	4413      	add	r3, r2
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b68e:	4b15      	ldr	r3, [pc, #84]	; (800b6e4 <FATFS_LinkDriverEx+0x94>)
 800b690:	7a5b      	ldrb	r3, [r3, #9]
 800b692:	b2db      	uxtb	r3, r3
 800b694:	461a      	mov	r2, r3
 800b696:	4b13      	ldr	r3, [pc, #76]	; (800b6e4 <FATFS_LinkDriverEx+0x94>)
 800b698:	4413      	add	r3, r2
 800b69a:	79fa      	ldrb	r2, [r7, #7]
 800b69c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b69e:	4b11      	ldr	r3, [pc, #68]	; (800b6e4 <FATFS_LinkDriverEx+0x94>)
 800b6a0:	7a5b      	ldrb	r3, [r3, #9]
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	b2d1      	uxtb	r1, r2
 800b6a8:	4a0e      	ldr	r2, [pc, #56]	; (800b6e4 <FATFS_LinkDriverEx+0x94>)
 800b6aa:	7251      	strb	r1, [r2, #9]
 800b6ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b6ae:	7dbb      	ldrb	r3, [r7, #22]
 800b6b0:	3330      	adds	r3, #48	; 0x30
 800b6b2:	b2da      	uxtb	r2, r3
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	223a      	movs	r2, #58	; 0x3a
 800b6be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	3302      	adds	r3, #2
 800b6c4:	222f      	movs	r2, #47	; 0x2f
 800b6c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	3303      	adds	r3, #3
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	371c      	adds	r7, #28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	20000254 	.word	0x20000254

0800b6e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f7ff ffaa 	bl	800b650 <FATFS_LinkDriverEx>
 800b6fc:	4603      	mov	r3, r0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <atoi>:
 800b706:	220a      	movs	r2, #10
 800b708:	2100      	movs	r1, #0
 800b70a:	f000 b8a9 	b.w	800b860 <strtol>
	...

0800b710 <__libc_init_array>:
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	4e0d      	ldr	r6, [pc, #52]	; (800b748 <__libc_init_array+0x38>)
 800b714:	4c0d      	ldr	r4, [pc, #52]	; (800b74c <__libc_init_array+0x3c>)
 800b716:	1ba4      	subs	r4, r4, r6
 800b718:	10a4      	asrs	r4, r4, #2
 800b71a:	2500      	movs	r5, #0
 800b71c:	42a5      	cmp	r5, r4
 800b71e:	d109      	bne.n	800b734 <__libc_init_array+0x24>
 800b720:	4e0b      	ldr	r6, [pc, #44]	; (800b750 <__libc_init_array+0x40>)
 800b722:	4c0c      	ldr	r4, [pc, #48]	; (800b754 <__libc_init_array+0x44>)
 800b724:	f000 f8d4 	bl	800b8d0 <_init>
 800b728:	1ba4      	subs	r4, r4, r6
 800b72a:	10a4      	asrs	r4, r4, #2
 800b72c:	2500      	movs	r5, #0
 800b72e:	42a5      	cmp	r5, r4
 800b730:	d105      	bne.n	800b73e <__libc_init_array+0x2e>
 800b732:	bd70      	pop	{r4, r5, r6, pc}
 800b734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b738:	4798      	blx	r3
 800b73a:	3501      	adds	r5, #1
 800b73c:	e7ee      	b.n	800b71c <__libc_init_array+0xc>
 800b73e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b742:	4798      	blx	r3
 800b744:	3501      	adds	r5, #1
 800b746:	e7f2      	b.n	800b72e <__libc_init_array+0x1e>
 800b748:	0800bb40 	.word	0x0800bb40
 800b74c:	0800bb40 	.word	0x0800bb40
 800b750:	0800bb40 	.word	0x0800bb40
 800b754:	0800bb44 	.word	0x0800bb44

0800b758 <memset>:
 800b758:	4402      	add	r2, r0
 800b75a:	4603      	mov	r3, r0
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d100      	bne.n	800b762 <memset+0xa>
 800b760:	4770      	bx	lr
 800b762:	f803 1b01 	strb.w	r1, [r3], #1
 800b766:	e7f9      	b.n	800b75c <memset+0x4>

0800b768 <_strtol_l.isra.0>:
 800b768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b76c:	4680      	mov	r8, r0
 800b76e:	4689      	mov	r9, r1
 800b770:	4692      	mov	sl, r2
 800b772:	461e      	mov	r6, r3
 800b774:	460f      	mov	r7, r1
 800b776:	463d      	mov	r5, r7
 800b778:	9808      	ldr	r0, [sp, #32]
 800b77a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b77e:	f000 f885 	bl	800b88c <__locale_ctype_ptr_l>
 800b782:	4420      	add	r0, r4
 800b784:	7843      	ldrb	r3, [r0, #1]
 800b786:	f013 0308 	ands.w	r3, r3, #8
 800b78a:	d132      	bne.n	800b7f2 <_strtol_l.isra.0+0x8a>
 800b78c:	2c2d      	cmp	r4, #45	; 0x2d
 800b78e:	d132      	bne.n	800b7f6 <_strtol_l.isra.0+0x8e>
 800b790:	787c      	ldrb	r4, [r7, #1]
 800b792:	1cbd      	adds	r5, r7, #2
 800b794:	2201      	movs	r2, #1
 800b796:	2e00      	cmp	r6, #0
 800b798:	d05d      	beq.n	800b856 <_strtol_l.isra.0+0xee>
 800b79a:	2e10      	cmp	r6, #16
 800b79c:	d109      	bne.n	800b7b2 <_strtol_l.isra.0+0x4a>
 800b79e:	2c30      	cmp	r4, #48	; 0x30
 800b7a0:	d107      	bne.n	800b7b2 <_strtol_l.isra.0+0x4a>
 800b7a2:	782b      	ldrb	r3, [r5, #0]
 800b7a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b7a8:	2b58      	cmp	r3, #88	; 0x58
 800b7aa:	d14f      	bne.n	800b84c <_strtol_l.isra.0+0xe4>
 800b7ac:	786c      	ldrb	r4, [r5, #1]
 800b7ae:	2610      	movs	r6, #16
 800b7b0:	3502      	adds	r5, #2
 800b7b2:	2a00      	cmp	r2, #0
 800b7b4:	bf14      	ite	ne
 800b7b6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b7ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b7be:	2700      	movs	r7, #0
 800b7c0:	fbb1 fcf6 	udiv	ip, r1, r6
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b7ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b7ce:	2b09      	cmp	r3, #9
 800b7d0:	d817      	bhi.n	800b802 <_strtol_l.isra.0+0x9a>
 800b7d2:	461c      	mov	r4, r3
 800b7d4:	42a6      	cmp	r6, r4
 800b7d6:	dd23      	ble.n	800b820 <_strtol_l.isra.0+0xb8>
 800b7d8:	1c7b      	adds	r3, r7, #1
 800b7da:	d007      	beq.n	800b7ec <_strtol_l.isra.0+0x84>
 800b7dc:	4584      	cmp	ip, r0
 800b7de:	d31c      	bcc.n	800b81a <_strtol_l.isra.0+0xb2>
 800b7e0:	d101      	bne.n	800b7e6 <_strtol_l.isra.0+0x7e>
 800b7e2:	45a6      	cmp	lr, r4
 800b7e4:	db19      	blt.n	800b81a <_strtol_l.isra.0+0xb2>
 800b7e6:	fb00 4006 	mla	r0, r0, r6, r4
 800b7ea:	2701      	movs	r7, #1
 800b7ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7f0:	e7eb      	b.n	800b7ca <_strtol_l.isra.0+0x62>
 800b7f2:	462f      	mov	r7, r5
 800b7f4:	e7bf      	b.n	800b776 <_strtol_l.isra.0+0xe>
 800b7f6:	2c2b      	cmp	r4, #43	; 0x2b
 800b7f8:	bf04      	itt	eq
 800b7fa:	1cbd      	addeq	r5, r7, #2
 800b7fc:	787c      	ldrbeq	r4, [r7, #1]
 800b7fe:	461a      	mov	r2, r3
 800b800:	e7c9      	b.n	800b796 <_strtol_l.isra.0+0x2e>
 800b802:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b806:	2b19      	cmp	r3, #25
 800b808:	d801      	bhi.n	800b80e <_strtol_l.isra.0+0xa6>
 800b80a:	3c37      	subs	r4, #55	; 0x37
 800b80c:	e7e2      	b.n	800b7d4 <_strtol_l.isra.0+0x6c>
 800b80e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b812:	2b19      	cmp	r3, #25
 800b814:	d804      	bhi.n	800b820 <_strtol_l.isra.0+0xb8>
 800b816:	3c57      	subs	r4, #87	; 0x57
 800b818:	e7dc      	b.n	800b7d4 <_strtol_l.isra.0+0x6c>
 800b81a:	f04f 37ff 	mov.w	r7, #4294967295
 800b81e:	e7e5      	b.n	800b7ec <_strtol_l.isra.0+0x84>
 800b820:	1c7b      	adds	r3, r7, #1
 800b822:	d108      	bne.n	800b836 <_strtol_l.isra.0+0xce>
 800b824:	2322      	movs	r3, #34	; 0x22
 800b826:	f8c8 3000 	str.w	r3, [r8]
 800b82a:	4608      	mov	r0, r1
 800b82c:	f1ba 0f00 	cmp.w	sl, #0
 800b830:	d107      	bne.n	800b842 <_strtol_l.isra.0+0xda>
 800b832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b836:	b102      	cbz	r2, 800b83a <_strtol_l.isra.0+0xd2>
 800b838:	4240      	negs	r0, r0
 800b83a:	f1ba 0f00 	cmp.w	sl, #0
 800b83e:	d0f8      	beq.n	800b832 <_strtol_l.isra.0+0xca>
 800b840:	b10f      	cbz	r7, 800b846 <_strtol_l.isra.0+0xde>
 800b842:	f105 39ff 	add.w	r9, r5, #4294967295
 800b846:	f8ca 9000 	str.w	r9, [sl]
 800b84a:	e7f2      	b.n	800b832 <_strtol_l.isra.0+0xca>
 800b84c:	2430      	movs	r4, #48	; 0x30
 800b84e:	2e00      	cmp	r6, #0
 800b850:	d1af      	bne.n	800b7b2 <_strtol_l.isra.0+0x4a>
 800b852:	2608      	movs	r6, #8
 800b854:	e7ad      	b.n	800b7b2 <_strtol_l.isra.0+0x4a>
 800b856:	2c30      	cmp	r4, #48	; 0x30
 800b858:	d0a3      	beq.n	800b7a2 <_strtol_l.isra.0+0x3a>
 800b85a:	260a      	movs	r6, #10
 800b85c:	e7a9      	b.n	800b7b2 <_strtol_l.isra.0+0x4a>
	...

0800b860 <strtol>:
 800b860:	4b08      	ldr	r3, [pc, #32]	; (800b884 <strtol+0x24>)
 800b862:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b864:	681c      	ldr	r4, [r3, #0]
 800b866:	4d08      	ldr	r5, [pc, #32]	; (800b888 <strtol+0x28>)
 800b868:	6a23      	ldr	r3, [r4, #32]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	bf08      	it	eq
 800b86e:	462b      	moveq	r3, r5
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	4613      	mov	r3, r2
 800b874:	460a      	mov	r2, r1
 800b876:	4601      	mov	r1, r0
 800b878:	4620      	mov	r0, r4
 800b87a:	f7ff ff75 	bl	800b768 <_strtol_l.isra.0>
 800b87e:	b003      	add	sp, #12
 800b880:	bd30      	pop	{r4, r5, pc}
 800b882:	bf00      	nop
 800b884:	20000024 	.word	0x20000024
 800b888:	20000088 	.word	0x20000088

0800b88c <__locale_ctype_ptr_l>:
 800b88c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b890:	4770      	bx	lr

0800b892 <__ascii_mbtowc>:
 800b892:	b082      	sub	sp, #8
 800b894:	b901      	cbnz	r1, 800b898 <__ascii_mbtowc+0x6>
 800b896:	a901      	add	r1, sp, #4
 800b898:	b142      	cbz	r2, 800b8ac <__ascii_mbtowc+0x1a>
 800b89a:	b14b      	cbz	r3, 800b8b0 <__ascii_mbtowc+0x1e>
 800b89c:	7813      	ldrb	r3, [r2, #0]
 800b89e:	600b      	str	r3, [r1, #0]
 800b8a0:	7812      	ldrb	r2, [r2, #0]
 800b8a2:	1c10      	adds	r0, r2, #0
 800b8a4:	bf18      	it	ne
 800b8a6:	2001      	movne	r0, #1
 800b8a8:	b002      	add	sp, #8
 800b8aa:	4770      	bx	lr
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	e7fb      	b.n	800b8a8 <__ascii_mbtowc+0x16>
 800b8b0:	f06f 0001 	mvn.w	r0, #1
 800b8b4:	e7f8      	b.n	800b8a8 <__ascii_mbtowc+0x16>

0800b8b6 <__ascii_wctomb>:
 800b8b6:	b149      	cbz	r1, 800b8cc <__ascii_wctomb+0x16>
 800b8b8:	2aff      	cmp	r2, #255	; 0xff
 800b8ba:	bf85      	ittet	hi
 800b8bc:	238a      	movhi	r3, #138	; 0x8a
 800b8be:	6003      	strhi	r3, [r0, #0]
 800b8c0:	700a      	strbls	r2, [r1, #0]
 800b8c2:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8c6:	bf98      	it	ls
 800b8c8:	2001      	movls	r0, #1
 800b8ca:	4770      	bx	lr
 800b8cc:	4608      	mov	r0, r1
 800b8ce:	4770      	bx	lr

0800b8d0 <_init>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	bf00      	nop
 800b8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d6:	bc08      	pop	{r3}
 800b8d8:	469e      	mov	lr, r3
 800b8da:	4770      	bx	lr

0800b8dc <_fini>:
 800b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8de:	bf00      	nop
 800b8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8e2:	bc08      	pop	{r3}
 800b8e4:	469e      	mov	lr, r3
 800b8e6:	4770      	bx	lr
