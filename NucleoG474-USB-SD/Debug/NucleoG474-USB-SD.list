
NucleoG474-USB-SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089cc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cb8  08008cb8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cc0  08008cc0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cc0  08008cc0  00018cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cc4  08008cc4  00018cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08008cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a8  20000024  08008cec  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  08008cec  000209cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188e7  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003098  00000000  00000000  0003893b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c0  00000000  00000000  0003b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  0003cb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000279f1  00000000  00000000  0003dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000133f2  00000000  00000000  000655c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0b06  00000000  00000000  000789bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001694c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004848  00000000  00000000  0016953c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008b8c 	.word	0x08008b8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	08008b8c 	.word	0x08008b8c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_FDCAN1_Init+0x84>)
 800051e:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <MX_FDCAN1_Init+0x88>)
 8000520:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_FDCAN1_Init+0x84>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000536:	2200      	movs	r2, #0
 8000538:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_FDCAN1_Init+0x84>)
 800053c:	2200      	movs	r2, #0
 800053e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000542:	2200      	movs	r2, #0
 8000544:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000548:	2205      	movs	r2, #5
 800054a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_FDCAN1_Init+0x84>)
 800054e:	2201      	movs	r2, #1
 8000550:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000554:	220d      	movs	r2, #13
 8000556:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_FDCAN1_Init+0x84>)
 800055a:	2202      	movs	r2, #2
 800055c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000560:	2201      	movs	r2, #1
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000566:	2201      	movs	r2, #1
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_FDCAN1_Init+0x84>)
 800056c:	2201      	movs	r2, #1
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000572:	2201      	movs	r2, #1
 8000574:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000578:	2200      	movs	r2, #0
 800057a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_FDCAN1_Init+0x84>)
 800057e:	2200      	movs	r2, #0
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_FDCAN1_Init+0x84>)
 800058a:	f000 fd73 	bl	8001074 <HAL_FDCAN_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000594:	f000 fa14 	bl	80009c0 <Error_Handler>
  }

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <HAL_FDCAN_MspInit+0x80>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d129      	bne.n	800061a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000608:	2309      	movs	r3, #9
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f001 f8c1 	bl	800179c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40006400 	.word	0x40006400
 8000628:	40021000 	.word	0x40021000

0800062c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a2e      	ldr	r2, [pc, #184]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <MX_GPIO_Init+0xd4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a28      	ldr	r2, [pc, #160]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a22      	ldr	r2, [pc, #136]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_GPIO_Init+0xd4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 f9f9 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_GPIO_Init+0xd8>)
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_GPIO_Init+0xdc>)
 80006c4:	f001 f86a 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006c8:	2320      	movs	r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f001 f85b 	bl	800179c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2028      	movs	r0, #40	; 0x28
 80006ec:	f000 fc8d 	bl	800100a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006f0:	2028      	movs	r0, #40	; 0x28
 80006f2:	f000 fca4 	bl	800103e <HAL_NVIC_EnableIRQ>

}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	10110000 	.word	0x10110000
 8000708:	48000800 	.word	0x48000800

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 8000712:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fb0b 	bl	8000d2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f8e6 	bl	80008e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Initialize the micro SD Card */
  if(MY_SD_Init(0) != BSP_ERROR_NONE){
 800071c:	2000      	movs	r0, #0
 800071e:	f004 fd87 	bl	8005230 <MY_SD_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <main+0x20>
	  Error_Handler();
 8000728:	f000 f94a 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f7ff ff7e 	bl	800062c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000730:	f000 fa4c 	bl	8000bcc <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000734:	f000 f948 	bl	80009c8 <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000738:	f004 fd5a 	bl	80051f0 <MX_FATFS_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <main+0x3a>
    Error_Handler();
 8000742:	f000 f93d 	bl	80009c0 <Error_Handler>
  }
  MX_FDCAN1_Init();
 8000746:	f7ff fee7 	bl	8000518 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.Identifier = 0x0;
 800074a:	4b5f      	ldr	r3, [pc, #380]	; (80008c8 <main+0x1bc>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000750:	4b5d      	ldr	r3, [pc, #372]	; (80008c8 <main+0x1bc>)
 8000752:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000756:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000758:	4b5b      	ldr	r3, [pc, #364]	; (80008c8 <main+0x1bc>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800075e:	4b5a      	ldr	r3, [pc, #360]	; (80008c8 <main+0x1bc>)
 8000760:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000764:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000766:	4b58      	ldr	r3, [pc, #352]	; (80008c8 <main+0x1bc>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800076c:	4b56      	ldr	r3, [pc, #344]	; (80008c8 <main+0x1bc>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000772:	4b55      	ldr	r3, [pc, #340]	; (80008c8 <main+0x1bc>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000778:	4b53      	ldr	r3, [pc, #332]	; (80008c8 <main+0x1bc>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 800077e:	4b52      	ldr	r3, [pc, #328]	; (80008c8 <main+0x1bc>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
    TxData[0] = ubKeyNumber++;
 8000784:	4b51      	ldr	r3, [pc, #324]	; (80008cc <main+0x1c0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	b2d1      	uxtb	r1, r2
 800078c:	4a4f      	ldr	r2, [pc, #316]	; (80008cc <main+0x1c0>)
 800078e:	7011      	strb	r1, [r2, #0]
 8000790:	4a4f      	ldr	r2, [pc, #316]	; (80008d0 <main+0x1c4>)
 8000792:	7013      	strb	r3, [r2, #0]
    TxData[1] = 0xAD;
 8000794:	4b4e      	ldr	r3, [pc, #312]	; (80008d0 <main+0x1c4>)
 8000796:	22ad      	movs	r2, #173	; 0xad
 8000798:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0xDE;
 800079a:	4b4d      	ldr	r3, [pc, #308]	; (80008d0 <main+0x1c4>)
 800079c:	22de      	movs	r2, #222	; 0xde
 800079e:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0xAD;
 80007a0:	4b4b      	ldr	r3, [pc, #300]	; (80008d0 <main+0x1c4>)
 80007a2:	22ad      	movs	r2, #173	; 0xad
 80007a4:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0xBE;
 80007a6:	4b4a      	ldr	r3, [pc, #296]	; (80008d0 <main+0x1c4>)
 80007a8:	22be      	movs	r2, #190	; 0xbe
 80007aa:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0xEF;
 80007ac:	4b48      	ldr	r3, [pc, #288]	; (80008d0 <main+0x1c4>)
 80007ae:	22ef      	movs	r2, #239	; 0xef
 80007b0:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0xFA;
 80007b2:	4b47      	ldr	r3, [pc, #284]	; (80008d0 <main+0x1c4>)
 80007b4:	22fa      	movs	r2, #250	; 0xfa
 80007b6:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0xCE;
 80007b8:	4b45      	ldr	r3, [pc, #276]	; (80008d0 <main+0x1c4>)
 80007ba:	22ce      	movs	r2, #206	; 0xce
 80007bc:	71da      	strb	r2, [r3, #7]
    uint16_t aug=3456;
 80007be:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 80007c2:	f8a7 3492 	strh.w	r3, [r7, #1170]	; 0x492
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80007c6:	4843      	ldr	r0, [pc, #268]	; (80008d4 <main+0x1c8>)
 80007c8:	f000 fdae 	bl	8001328 <HAL_FDCAN_Start>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <main+0xca>
        {
          /* Start Error */
          Error_Handler();
 80007d2:	f000 f8f5 	bl	80009c0 <Error_Handler>
        }

      if ( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80007d6:	2200      	movs	r2, #0
 80007d8:	2101      	movs	r1, #1
 80007da:	483e      	ldr	r0, [pc, #248]	; (80008d4 <main+0x1c8>)
 80007dc:	f000 fe10 	bl	8001400 <HAL_FDCAN_ActivateNotification>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <main+0xde>
        {
          /* Notification Error */
          Error_Handler();
 80007e6:	f000 f8eb 	bl	80009c0 <Error_Handler>
	uint8_t workBuffer[_MAX_SS];
	FATFS USERFatFs;    /* File system object for USER logical drive */
	FIL USERFile;       /* File  object for USER */
	char USERPath[4];   /* USER logical drive path */
	FRESULT res; /* FatFs function common result code */
	if(MY_SD_GetCardState(0) == BSP_ERROR_NONE){
 80007ea:	2000      	movs	r0, #0
 80007ec:	f004 ff12 	bl	8005614 <MY_SD_GetCardState>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d15b      	bne.n	80008ae <main+0x1a2>
		//res = f_mkfs(USERPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));

		if (res != FR_OK){
 80007f6:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <main+0xf6>
			Error_Handler();
 80007fe:	f000 f8df 	bl	80009c0 <Error_Handler>
		}/*
		uint32_t byteswritten, bytesread; /* File write/read counts
		uint8_t wtext[] = "This is STM32 working with FatFs and uSD diskio driver"; /* File write buffer */
		uint8_t rtext[100]; /* File read buffer */
		uint8_t path[] = "STM32.TXT";
 8000802:	4a35      	ldr	r2, [pc, #212]	; (80008d8 <main+0x1cc>)
 8000804:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8000808:	ca07      	ldmia	r2, {r0, r1, r2}
 800080a:	c303      	stmia	r3!, {r0, r1}
 800080c:	801a      	strh	r2, [r3, #0]

		/* Register the file system object to the FatFs module */
		res = f_mount(&USERFatFs, (TCHAR const*)USERPath, 0);
 800080e:	f207 418c 	addw	r1, r7, #1164	; 0x48c
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f007 fd44 	bl	80082a4 <f_mount>
 800081c:	4603      	mov	r3, r0
 800081e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		if(res == FR_OK){}
 8000822:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <main+0x120>
		else while(1);
 800082a:	e7fe      	b.n	800082a <main+0x11e>
		/* Create and Open a new text file object with write access */
		for(uint32_t  e=0;e<1;e++){
 800082c:	2300      	movs	r3, #0
 800082e:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8000832:	e034      	b.n	800089e <main+0x192>
		res = f_open(&USERFile, &path, FA_READ );
 8000834:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8000838:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800083c:	2201      	movs	r2, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f007 fd76 	bl	8008330 <f_open>
 8000844:	4603      	mov	r3, r0
 8000846:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		for(uint32_t  i=0;i<1;i++){
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8000850:	e014      	b.n	800087c <main+0x170>
			BYTE readBuf[30];
			strncpy((char*)readBuf, "1616161616", 10);
 8000852:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8000856:	4a21      	ldr	r2, [pc, #132]	; (80008dc <main+0x1d0>)
 8000858:	ca07      	ldmia	r2, {r0, r1, r2}
 800085a:	c303      	stmia	r3!, {r0, r1}
 800085c:	801a      	strh	r2, [r3, #0]
			UINT bytesWrote;
			//res = f_write(&USERFile, readBuf, 10,&bytesWrote);

			res = f_read(&USERFile,readBuff, 64, &br);
 800085e:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <main+0x1d4>)
 8000864:	2240      	movs	r2, #64	; 0x40
 8000866:	491f      	ldr	r1, [pc, #124]	; (80008e4 <main+0x1d8>)
 8000868:	f007 ff20 	bl	80086ac <f_read>
 800086c:	4603      	mov	r3, r0
 800086e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		for(uint32_t  i=0;i<1;i++){
 8000872:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8000876:	3301      	adds	r3, #1
 8000878:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800087c:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0e6      	beq.n	8000852 <main+0x146>
			}

		res = f_close(&USERFile);
 8000884:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000888:	4618      	mov	r0, r3
 800088a:	f008 f8cc 	bl	8008a26 <f_close>
 800088e:	4603      	mov	r3, r0
 8000890:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
		for(uint32_t  e=0;e<1;e++){
 8000894:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8000898:	3301      	adds	r3, #1
 800089a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800089e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d0c6      	beq.n	8000834 <main+0x128>

		}
		HAL_Delay(50);
 80008a6:	2032      	movs	r0, #50	; 0x32
 80008a8:	f000 fab2 	bl	8000e10 <HAL_Delay>
 80008ac:	e001      	b.n	80008b2 <main+0x1a6>



	}
	else{
		Error_Handler();
 80008ae:	f000 f887 	bl	80009c0 <Error_Handler>
	}

		   if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80008b2:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <main+0x1c4>)
 80008b4:	4904      	ldr	r1, [pc, #16]	; (80008c8 <main+0x1bc>)
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <main+0x1c8>)
 80008b8:	f000 fd5e 	bl	8001378 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d093      	beq.n	80007ea <main+0xde>
		  	{
		  	  //Transmission request Error
		  	  Error_Handler();
 80008c2:	f000 f87d 	bl	80009c0 <Error_Handler>
  {
 80008c6:	e790      	b.n	80007ea <main+0xde>
 80008c8:	200001bc 	.word	0x200001bc
 80008cc:	20000040 	.word	0x20000040
 80008d0:	200001ac 	.word	0x200001ac
 80008d4:	2000007c 	.word	0x2000007c
 80008d8:	08008bb0 	.word	0x08008bb0
 80008dc:	08008ba4 	.word	0x08008ba4
 80008e0:	20000120 	.word	0x20000120
 80008e4:	200000e0 	.word	0x200000e0

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0a8      	sub	sp, #160	; 0xa0
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008f2:	2238      	movs	r2, #56	; 0x38
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f008 f940 	bl	8008b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2254      	movs	r2, #84	; 0x54
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f008 f932 	bl	8008b7c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000918:	f44f 7000 	mov.w	r0, #512	; 0x200
 800091c:	f001 f8fc 	bl	8001b18 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000928:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800093a:	2302      	movs	r3, #2
 800093c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000940:	2320      	movs	r3, #32
 8000942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 800094c:	2306      	movs	r3, #6
 800094e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800095c:	4618      	mov	r0, r3
 800095e:	f001 f97f 	bl	8001c60 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000968:	f000 f82a 	bl	80009c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2303      	movs	r3, #3
 8000972:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000980:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000984:	2106      	movs	r1, #6
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fc82 	bl	8002290 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000992:	f000 f815 	bl	80009c0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_FDCAN;
 8000996:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800099a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80009a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fe8d 	bl	80026c8 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009b4:	f000 f804 	bl	80009c0 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	37a0      	adds	r7, #160	; 0xa0
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//printf("** Error. ** \n\r");
	while(1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x4>
	...

080009c8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_SPI2_Init+0x74>)
 80009ce:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <MX_SPI2_Init+0x78>)
 80009d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_SPI2_Init+0x74>)
 80009d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_SPI2_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_SPI2_Init+0x74>)
 80009e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_SPI2_Init+0x74>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_SPI2_Init+0x74>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_SPI2_Init+0x74>)
 80009f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_SPI2_Init+0x74>)
 80009fe:	2210      	movs	r2, #16
 8000a00:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_SPI2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_SPI2_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_SPI2_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_SPI2_Init+0x74>)
 8000a16:	2207      	movs	r2, #7
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_SPI2_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_SPI2_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_SPI2_Init+0x74>)
 8000a28:	f002 f89a 	bl	8002b60 <HAL_SPI_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a32:	f7ff ffc5 	bl	80009c0 <Error_Handler>
  }

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000210 	.word	0x20000210
 8000a40:	40003800 	.word	0x40003800

08000a44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_SPI_MspInit+0x7c>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d128      	bne.n	8000ab8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <HAL_SPI_MspInit+0x80>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	4a16      	ldr	r2, [pc, #88]	; (8000ac4 <HAL_SPI_MspInit+0x80>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6593      	str	r3, [r2, #88]	; 0x58
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <HAL_SPI_MspInit+0x80>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_SPI_MspInit+0x80>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <HAL_SPI_MspInit+0x80>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_SPI_MspInit+0x80>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <HAL_SPI_MspInit+0x84>)
 8000ab4:	f000 fe72 	bl	800179c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	; 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40003800 	.word	0x40003800
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000400 	.word	0x48000400

08000acc <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ada:	6093      	str	r3, [r2, #8]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40007000 	.word	0x40007000

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_MspInit+0x44>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6613      	str	r3, [r2, #96]	; 0x60
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000b22:	f7ff ffd3 	bl	8000acc <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f924 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b98:	f000 ff9a 	bl	8001ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <SystemInit+0x28>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <SystemInit+0x28>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <SystemInit+0x28>)
 8000bb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bba:	609a      	str	r2, [r3, #8]
#endif
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000bd2:	4a20      	ldr	r2, [pc, #128]	; (8000c54 <MX_LPUART1_UART_Init+0x88>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000c0a:	f002 fe5f 	bl	80038cc <HAL_UART_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000c14:	f7ff fed4 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000c1c:	f004 fa03 	bl	8005026 <HAL_UARTEx_SetTxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000c26:	f7ff fecb 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000c2e:	f004 fa38 	bl	80050a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8000c38:	f7ff fec2 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_LPUART1_UART_Init+0x84>)
 8000c3e:	f004 f9b9 	bl	8004fb4 <HAL_UARTEx_DisableFifoMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8000c48:	f7ff feba 	bl	80009c0 <Error_Handler>
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000274 	.word	0x20000274
 8000c54:	40008000 	.word	0x40008000

08000c58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0x7c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d128      	bne.n	8000ccc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_UART_MspInit+0x80>)
 8000c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c7e:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <HAL_UART_MspInit+0x80>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_UART_MspInit+0x80>)
 8000c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_UART_MspInit+0x80>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_UART_MspInit+0x80>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_UART_MspInit+0x80>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000caa:	230c      	movs	r3, #12
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000cba:	230c      	movs	r3, #12
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fd68 	bl	800179c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40008000 	.word	0x40008000
 8000cd8:	40021000 	.word	0x40021000

08000cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490e      	ldr	r1, [pc, #56]	; (8000d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0b      	ldr	r4, [pc, #44]	; (8000d28 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d06:	f7ff ff4b 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f007 ff13 	bl	8008b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0e:	f7ff fcfd 	bl	800070c <main>

08000d12 <LoopForever>:

LoopForever:
    b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   r0, =_estack
 8000d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000d20:	08008cc8 	.word	0x08008cc8
  ldr r2, =_sbss
 8000d24:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d28:	200009cc 	.word	0x200009cc

08000d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_2_IRQHandler>

08000d2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f95b 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f000 f80e 	bl	8000d60 <HAL_InitTick>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d002      	beq.n	8000d50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	71fb      	strb	r3, [r7, #7]
 8000d4e:	e001      	b.n	8000d54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d50:	f7ff fecc 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d54:	79fb      	ldrb	r3, [r7, #7]

}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_InitTick+0x68>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d022      	beq.n	8000dba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_InitTick+0x6c>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_InitTick+0x68>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f966 	bl	800105a <HAL_SYSTICK_Config>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10f      	bne.n	8000db4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b0f      	cmp	r3, #15
 8000d98:	d809      	bhi.n	8000dae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000da2:	f000 f932 	bl	800100a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_InitTick+0x70>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	e007      	b.n	8000dbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	e004      	b.n	8000dbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e001      	b.n	8000dbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x1c>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x20>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_IncTick+0x1c>)
 8000de4:	6013      	str	r3, [r2, #0]
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	20000300 	.word	0x20000300
 8000df4:	20000008 	.word	0x20000008

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000300 	.word	0x20000300

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff ffee 	bl	8000df8 <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e28:	d004      	beq.n	8000e34 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_Delay+0x40>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	4413      	add	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e34:	bf00      	nop
 8000e36:	f7ff ffdf 	bl	8000df8 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d8f7      	bhi.n	8000e36 <HAL_Delay+0x26>
  {
  }
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	; (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff29 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff40 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff90 	bl	8000f48 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5f 	bl	8000ef4 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff33 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa4 	bl	8000fb0 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e147      	b.n	8001316 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d106      	bne.n	80010a0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fa82 	bl	80005a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	699a      	ldr	r2, [r3, #24]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0210 	bic.w	r2, r2, #16
 80010ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b0:	f7ff fea2 	bl	8000df8 <HAL_GetTick>
 80010b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010b6:	e012      	b.n	80010de <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010b8:	f7ff fe9e 	bl	8000df8 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b0a      	cmp	r3, #10
 80010c4:	d90b      	bls.n	80010de <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ca:	f043 0201 	orr.w	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2203      	movs	r2, #3
 80010d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e11b      	b.n	8001316 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d0e5      	beq.n	80010b8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010fc:	f7ff fe7c 	bl	8000df8 <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001102:	e012      	b.n	800112a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001104:	f7ff fe78 	bl	8000df8 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b0a      	cmp	r3, #10
 8001110:	d90b      	bls.n	800112a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e0f5      	b.n	8001316 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0e5      	beq.n	8001104 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	699a      	ldr	r2, [r3, #24]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0202 	orr.w	r2, r2, #2
 8001146:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a74      	ldr	r2, [pc, #464]	; (8001320 <HAL_FDCAN_Init+0x2ac>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d103      	bne.n	800115a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001152:	4a74      	ldr	r2, [pc, #464]	; (8001324 <HAL_FDCAN_Init+0x2b0>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7c1b      	ldrb	r3, [r3, #16]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d108      	bne.n	8001174 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699a      	ldr	r2, [r3, #24]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001170:	619a      	str	r2, [r3, #24]
 8001172:	e007      	b.n	8001184 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001182:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7c5b      	ldrb	r3, [r3, #17]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d108      	bne.n	800119e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800119a:	619a      	str	r2, [r3, #24]
 800119c:	e007      	b.n	80011ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7c9b      	ldrb	r3, [r3, #18]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d108      	bne.n	80011c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011c4:	619a      	str	r2, [r3, #24]
 80011c6:	e007      	b.n	80011d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80011fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0210 	bic.w	r2, r2, #16
 800120c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d108      	bne.n	8001228 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0204 	orr.w	r2, r2, #4
 8001224:	619a      	str	r2, [r3, #24]
 8001226:	e02c      	b.n	8001282 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d028      	beq.n	8001282 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d01c      	beq.n	8001272 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	699a      	ldr	r2, [r3, #24]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001246:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0210 	orr.w	r2, r2, #16
 8001256:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d110      	bne.n	8001282 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0220 	orr.w	r2, r2, #32
 800126e:	619a      	str	r2, [r3, #24]
 8001270:	e007      	b.n	8001282 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	699a      	ldr	r2, [r3, #24]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0220 	orr.w	r2, r2, #32
 8001280:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	3b01      	subs	r3, #1
 8001288:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	3b01      	subs	r3, #1
 8001290:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001292:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800129a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012aa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012ac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80012b6:	d115      	bne.n	80012e4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	3b01      	subs	r3, #1
 80012c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	3b01      	subs	r3, #1
 80012ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012d0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	3b01      	subs	r3, #1
 80012da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f966 	bl	80015cc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40006400 	.word	0x40006400
 8001324:	40006500 	.word	0x40006500

08001328 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d110      	bne.n	800135e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e006      	b.n	800136c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	f043 0204 	orr.w	r2, r3, #4
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
  }
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d12c      	bne.n	80013ea <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e023      	b.n	80013f8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80013b8:	0c1b      	lsrs	r3, r3, #16
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f96c 	bl	80016a4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2101      	movs	r1, #1
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	fa01 f202 	lsl.w	r2, r1, r2
 80013d8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80013dc:	2201      	movs	r2, #1
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	409a      	lsls	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e006      	b.n	80013f8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ee:	f043 0208 	orr.w	r2, r3, #8
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
  }
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001412:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d003      	beq.n	8001422 <HAL_FDCAN_ActivateNotification+0x22>
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2b02      	cmp	r3, #2
 800141e:	f040 80c8 	bne.w	80015b2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <HAL_FDCAN_ActivateNotification+0x3e>
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d03b      	beq.n	80014b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001444:	2b00      	cmp	r3, #0
 8001446:	d004      	beq.n	8001452 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d031      	beq.n	80014b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001458:	2b00      	cmp	r3, #0
 800145a:	d004      	beq.n	8001466 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	d027      	beq.n	80014b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01d      	beq.n	80014b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001480:	2b00      	cmp	r3, #0
 8001482:	d004      	beq.n	800148e <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	d013      	beq.n	80014b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00c      	beq.n	80014c6 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d107      	bne.n	80014c6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <HAL_FDCAN_ActivateNotification+0xda>
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d13b      	bne.n	8001552 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d131      	bne.n	8001552 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d127      	bne.n	8001552 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d11d      	bne.n	8001552 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2b00      	cmp	r3, #0
 8001528:	d113      	bne.n	8001552 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00c      	beq.n	8001562 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0202 	orr.w	r2, r2, #2
 8001560:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	430a      	orrs	r2, r1
 800157c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	430a      	orrs	r2, r1
 800159a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e006      	b.n	80015c0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b6:	f043 0202 	orr.w	r2, r3, #2
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
  }
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80015d4:	4b30      	ldr	r3, [pc, #192]	; (8001698 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80015d6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a2f      	ldr	r2, [pc, #188]	; (800169c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d103      	bne.n	80015ea <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80015e8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d103      	bne.n	80015fc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80015fa:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800160a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001612:	041a      	lsls	r2, r3, #16
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001630:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001638:	061a      	lsls	r2, r3, #24
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e005      	b.n	800167e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3304      	adds	r3, #4
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	429a      	cmp	r2, r3
 8001688:	d3f3      	bcc.n	8001672 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	4000a400 	.word	0x4000a400
 800169c:	40006800 	.word	0x40006800
 80016a0:	40006c00 	.word	0x40006c00

080016a4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10a      	bne.n	80016d0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80016c2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	e00a      	b.n	80016e6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80016d8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80016de:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016e4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80016f0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80016f6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80016fc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	3304      	adds	r3, #4
 8001722:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	3304      	adds	r3, #4
 800172e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e020      	b.n	8001778 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3303      	adds	r3, #3
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3302      	adds	r3, #2
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	440b      	add	r3, r1
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800174e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3301      	adds	r3, #1
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	440b      	add	r3, r1
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800175c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	440a      	add	r2, r1
 8001764:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001766:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	3304      	adds	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3304      	adds	r3, #4
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	4a06      	ldr	r2, [pc, #24]	; (8001798 <FDCAN_CopyMessageToRAM+0xf4>)
 8001780:	5cd3      	ldrb	r3, [r2, r3]
 8001782:	461a      	mov	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	4293      	cmp	r3, r2
 8001788:	d3d5      	bcc.n	8001736 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800178a:	bf00      	nop
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	08008c28 	.word	0x08008c28

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017aa:	e15a      	b.n	8001a62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 814c 	beq.w	8001a5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x38>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b12      	cmp	r3, #18
 80017d2:	d123      	bne.n	800181c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	08da      	lsrs	r2, r3, #3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3208      	adds	r2, #8
 80017dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	6939      	ldr	r1, [r7, #16]
 8001818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0203 	and.w	r2, r3, #3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d00b      	beq.n	8001870 <HAL_GPIO_Init+0xd4>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d007      	beq.n	8001870 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001864:	2b11      	cmp	r3, #17
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b12      	cmp	r3, #18
 800186e:	d130      	bne.n	80018d2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018a6:	2201      	movs	r2, #1
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	f003 0201 	and.w	r2, r3, #1
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80a6 	beq.w	8001a5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001910:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_GPIO_Init+0x2e4>)
 8001912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001914:	4a5a      	ldr	r2, [pc, #360]	; (8001a80 <HAL_GPIO_Init+0x2e4>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6613      	str	r3, [r2, #96]	; 0x60
 800191c:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <HAL_GPIO_Init+0x2e4>)
 800191e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001928:	4a56      	ldr	r2, [pc, #344]	; (8001a84 <HAL_GPIO_Init+0x2e8>)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001952:	d01f      	beq.n	8001994 <HAL_GPIO_Init+0x1f8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a4c      	ldr	r2, [pc, #304]	; (8001a88 <HAL_GPIO_Init+0x2ec>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d019      	beq.n	8001990 <HAL_GPIO_Init+0x1f4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a4b      	ldr	r2, [pc, #300]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_GPIO_Init+0x1f0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a4a      	ldr	r2, [pc, #296]	; (8001a90 <HAL_GPIO_Init+0x2f4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00d      	beq.n	8001988 <HAL_GPIO_Init+0x1ec>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a49      	ldr	r2, [pc, #292]	; (8001a94 <HAL_GPIO_Init+0x2f8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_GPIO_Init+0x1e8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a48      	ldr	r2, [pc, #288]	; (8001a98 <HAL_GPIO_Init+0x2fc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_GPIO_Init+0x1e4>
 800197c:	2305      	movs	r3, #5
 800197e:	e00a      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001980:	2306      	movs	r3, #6
 8001982:	e008      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001984:	2304      	movs	r3, #4
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001988:	2303      	movs	r3, #3
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001994:	2300      	movs	r3, #0
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a6:	4937      	ldr	r1, [pc, #220]	; (8001a84 <HAL_GPIO_Init+0x2e8>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019b4:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_GPIO_Init+0x300>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019d8:	4a30      	ldr	r2, [pc, #192]	; (8001a9c <HAL_GPIO_Init+0x300>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019de:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <HAL_GPIO_Init+0x300>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a02:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a56:	4a11      	ldr	r2, [pc, #68]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f ae9d 	bne.w	80017ac <HAL_GPIO_Init+0x10>
  }
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	48001000 	.word	0x48001000
 8001a98:	48001400 	.word	0x48001400
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f806 	bl	8001b00 <HAL_GPIO_EXTI_Callback>
  }
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40010400 	.word	0x40010400

08001b00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d141      	bne.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b26:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b32:	d131      	bne.n	8001b98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b34:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b3a:	4a46      	ldr	r2, [pc, #280]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b44:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b4c:	4a41      	ldr	r2, [pc, #260]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b54:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2232      	movs	r2, #50	; 0x32
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4a3f      	ldr	r2, [pc, #252]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	0c9b      	lsrs	r3, r3, #18
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6a:	e002      	b.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7e:	d102      	bne.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f2      	bne.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b86:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b92:	d158      	bne.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e057      	b.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b98:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b9e:	4a2d      	ldr	r2, [pc, #180]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ba8:	e04d      	b.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb0:	d141      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d131      	bne.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bc6:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bd8:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2232      	movs	r2, #50	; 0x32
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	0c9b      	lsrs	r3, r3, #18
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf6:	e002      	b.n	8001bfe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0a:	d102      	bne.n	8001c12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f2      	bne.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c1e:	d112      	bne.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e011      	b.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c34:	e007      	b.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40007000 	.word	0x40007000
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	431bde83 	.word	0x431bde83

08001c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e308      	b.n	8002284 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d075      	beq.n	8001d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7e:	4ba3      	ldr	r3, [pc, #652]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c88:	4ba0      	ldr	r3, [pc, #640]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	2b0c      	cmp	r3, #12
 8001c96:	d102      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3e>
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d002      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x44>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d10b      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	4b99      	ldr	r3, [pc, #612]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d05b      	beq.n	8001d68 <HAL_RCC_OscConfig+0x108>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d157      	bne.n	8001d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e2e3      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d106      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x74>
 8001cc6:	4b91      	ldr	r3, [pc, #580]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a90      	ldr	r2, [pc, #576]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e01d      	b.n	8001d10 <HAL_RCC_OscConfig+0xb0>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x98>
 8001cde:	4b8b      	ldr	r3, [pc, #556]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a8a      	ldr	r2, [pc, #552]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b88      	ldr	r3, [pc, #544]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a87      	ldr	r2, [pc, #540]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	4b84      	ldr	r3, [pc, #528]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a83      	ldr	r2, [pc, #524]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b81      	ldr	r3, [pc, #516]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a80      	ldr	r2, [pc, #512]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff f86e 	bl	8000df8 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff f86a 	bl	8000df8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e2a8      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d32:	4b76      	ldr	r3, [pc, #472]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0xc0>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f85a 	bl	8000df8 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff f856 	bl	8000df8 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e294      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5a:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0xe8>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d075      	beq.n	8001e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d76:	4b65      	ldr	r3, [pc, #404]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d80:	4b62      	ldr	r3, [pc, #392]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_OscConfig+0x136>
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d002      	beq.n	8001d9c <HAL_RCC_OscConfig+0x13c>
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d11f      	bne.n	8001ddc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d9c:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x154>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e267      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b55      	ldr	r3, [pc, #340]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	4952      	ldr	r1, [pc, #328]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dc8:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <HAL_RCC_OscConfig+0x2b0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ffc7 	bl	8000d60 <HAL_InitTick>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d043      	beq.n	8001e60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e253      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d023      	beq.n	8001e2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de4:	4b49      	ldr	r3, [pc, #292]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff f802 	bl	8000df8 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df8:	f7fe fffe 	bl	8000df8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e23c      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0a:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	061b      	lsls	r3, r3, #24
 8001e24:	4939      	ldr	r1, [pc, #228]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
 8001e2a:	e01a      	b.n	8001e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2c:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a36      	ldr	r2, [pc, #216]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7fe ffde 	bl	8000df8 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e40:	f7fe ffda 	bl	8000df8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e218      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x1e0>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d03c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01c      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e76:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7c:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e86:	f7fe ffb7 	bl	8000df8 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7fe ffb3 	bl	8000df8 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e1f1      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0ef      	beq.n	8001e8e <HAL_RCC_OscConfig+0x22e>
 8001eae:	e01b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7fe ff9a 	bl	8000df8 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7fe ff96 	bl	8000df8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1d4      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ef      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80ab 	beq.w	800204c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2b4>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e005      	b.n	8001f16 <HAL_RCC_OscConfig+0x2b6>
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	20000004 	.word	0x20000004
 8001f14:	2300      	movs	r3, #0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00d      	beq.n	8001f36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	4baf      	ldr	r3, [pc, #700]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	4aae      	ldr	r2, [pc, #696]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	6593      	str	r3, [r2, #88]	; 0x58
 8001f26:	4bac      	ldr	r3, [pc, #688]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f32:	2301      	movs	r3, #1
 8001f34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f36:	4ba9      	ldr	r3, [pc, #676]	; (80021dc <HAL_RCC_OscConfig+0x57c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d118      	bne.n	8001f74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f42:	4ba6      	ldr	r3, [pc, #664]	; (80021dc <HAL_RCC_OscConfig+0x57c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4aa5      	ldr	r2, [pc, #660]	; (80021dc <HAL_RCC_OscConfig+0x57c>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4e:	f7fe ff53 	bl	8000df8 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f56:	f7fe ff4f 	bl	8000df8 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e18d      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f68:	4b9c      	ldr	r3, [pc, #624]	; (80021dc <HAL_RCC_OscConfig+0x57c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d108      	bne.n	8001f8e <HAL_RCC_OscConfig+0x32e>
 8001f7c:	4b96      	ldr	r3, [pc, #600]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	4a95      	ldr	r2, [pc, #596]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8c:	e024      	b.n	8001fd8 <HAL_RCC_OscConfig+0x378>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d110      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x358>
 8001f96:	4b90      	ldr	r3, [pc, #576]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	4a8e      	ldr	r2, [pc, #568]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001f9e:	f043 0304 	orr.w	r3, r3, #4
 8001fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa6:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	4a8a      	ldr	r2, [pc, #552]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb6:	e00f      	b.n	8001fd8 <HAL_RCC_OscConfig+0x378>
 8001fb8:	4b87      	ldr	r3, [pc, #540]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	4a86      	ldr	r2, [pc, #536]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc8:	4b83      	ldr	r3, [pc, #524]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	4a82      	ldr	r2, [pc, #520]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d016      	beq.n	800200e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7fe ff0a 	bl	8000df8 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7fe ff06 	bl	8000df8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e142      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffe:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ed      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x388>
 800200c:	e015      	b.n	800203a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200e:	f7fe fef3 	bl	8000df8 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe feef 	bl	8000df8 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e12b      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ed      	bne.n	8002016 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800203a:	7ffb      	ldrb	r3, [r7, #31]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d105      	bne.n	800204c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002040:	4b65      	ldr	r3, [pc, #404]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	4a64      	ldr	r2, [pc, #400]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8002046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d03c      	beq.n	80020d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01c      	beq.n	800209a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002060:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8002062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002066:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7fe fec2 	bl	8000df8 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002078:	f7fe febe 	bl	8000df8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0fc      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 800208c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ef      	beq.n	8002078 <HAL_RCC_OscConfig+0x418>
 8002098:	e01b      	b.n	80020d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800209a:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 800209c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a0:	4a4d      	ldr	r2, [pc, #308]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020aa:	f7fe fea5 	bl	8000df8 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b2:	f7fe fea1 	bl	8000df8 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0df      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c4:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 80020c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ef      	bne.n	80020b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80d3 	beq.w	8002282 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020dc:	4b3e      	ldr	r3, [pc, #248]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	f000 808d 	beq.w	8002204 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d15a      	bne.n	80021a8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a38      	ldr	r2, [pc, #224]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 80020f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7fe fe7b 	bl	8000df8 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe fe77 	bl	8000df8 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e0b5      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002124:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_RCC_OscConfig+0x580>)
 800212a:	4013      	ands	r3, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6a11      	ldr	r1, [r2, #32]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002134:	3a01      	subs	r2, #1
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	4311      	orrs	r1, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800213e:	0212      	lsls	r2, r2, #8
 8002140:	4311      	orrs	r1, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002146:	0852      	lsrs	r2, r2, #1
 8002148:	3a01      	subs	r2, #1
 800214a:	0552      	lsls	r2, r2, #21
 800214c:	4311      	orrs	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002152:	0852      	lsrs	r2, r2, #1
 8002154:	3a01      	subs	r2, #1
 8002156:	0652      	lsls	r2, r2, #25
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800215e:	06d2      	lsls	r2, r2, #27
 8002160:	430a      	orrs	r2, r1
 8002162:	491d      	ldr	r1, [pc, #116]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8002164:	4313      	orrs	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 800216e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002172:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe fe3a 	bl	8000df8 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7fe fe36 	bl	8000df8 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e074      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x528>
 80021a6:	e06c      	b.n	8002282 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 80021ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fe12 	bl	8000df8 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d6:	e00e      	b.n	80021f6 <HAL_RCC_OscConfig+0x596>
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
 80021e0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe fe08 	bl	8000df8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e046      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_RCC_OscConfig+0x62c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x584>
 8002202:	e03e      	b.n	8002282 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e039      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_RCC_OscConfig+0x62c>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	429a      	cmp	r2, r3
 8002222:	d12c      	bne.n	800227e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	3b01      	subs	r3, #1
 8002230:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d123      	bne.n	800227e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d11b      	bne.n	800227e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d113      	bne.n	800227e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	3b01      	subs	r3, #1
 8002264:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d109      	bne.n	800227e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e11e      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a8:	4b91      	ldr	r3, [pc, #580]	; (80024f0 <HAL_RCC_ClockConfig+0x260>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d910      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b8e      	ldr	r3, [pc, #568]	; (80024f0 <HAL_RCC_ClockConfig+0x260>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 020f 	bic.w	r2, r3, #15
 80022be:	498c      	ldr	r1, [pc, #560]	; (80024f0 <HAL_RCC_ClockConfig+0x260>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b8a      	ldr	r3, [pc, #552]	; (80024f0 <HAL_RCC_ClockConfig+0x260>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e106      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d073      	beq.n	80023cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d129      	bne.n	8002340 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ec:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0f4      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022fc:	f000 f99e 	bl	800263c <RCC_GetSysClockFreqFromPLLSource>
 8002300:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4a7c      	ldr	r2, [pc, #496]	; (80024f8 <HAL_RCC_ClockConfig+0x268>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d93f      	bls.n	800238a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800230a:	4b7a      	ldr	r3, [pc, #488]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800231e:	2b00      	cmp	r3, #0
 8002320:	d033      	beq.n	800238a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d12f      	bne.n	800238a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800232a:	4b72      	ldr	r3, [pc, #456]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002332:	4a70      	ldr	r2, [pc, #448]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002338:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e024      	b.n	800238a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d107      	bne.n	8002358 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002348:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0c6      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002358:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0be      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002368:	f000 f8ce 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 800236c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4a61      	ldr	r2, [pc, #388]	; (80024f8 <HAL_RCC_ClockConfig+0x268>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d909      	bls.n	800238a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002376:	4b5f      	ldr	r3, [pc, #380]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800237e:	4a5d      	ldr	r2, [pc, #372]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002384:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b5a      	ldr	r3, [pc, #360]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4957      	ldr	r1, [pc, #348]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239c:	f7fe fd2c 	bl	8000df8 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7fe fd28 	bl	8000df8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e095      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b4e      	ldr	r3, [pc, #312]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d023      	beq.n	8002420 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a42      	ldr	r2, [pc, #264]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80023ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023fc:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002404:	4a3b      	ldr	r2, [pc, #236]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002406:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800240a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240c:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4936      	ldr	r1, [pc, #216]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
 800241e:	e008      	b.n	8002432 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b80      	cmp	r3, #128	; 0x80
 8002424:	d105      	bne.n	8002432 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002426:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4a32      	ldr	r2, [pc, #200]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800242c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002430:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002432:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <HAL_RCC_ClockConfig+0x260>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d21d      	bcs.n	800247c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002440:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <HAL_RCC_ClockConfig+0x260>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 020f 	bic.w	r2, r3, #15
 8002448:	4929      	ldr	r1, [pc, #164]	; (80024f0 <HAL_RCC_ClockConfig+0x260>)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	4313      	orrs	r3, r2
 800244e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002450:	f7fe fcd2 	bl	8000df8 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe fcce 	bl	8000df8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e03b      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_RCC_ClockConfig+0x260>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d1ed      	bne.n	8002458 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4917      	ldr	r1, [pc, #92]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	490f      	ldr	r1, [pc, #60]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ba:	f000 f825 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024be:	4601      	mov	r1, r0
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <HAL_RCC_ClockConfig+0x26c>)
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	fa21 f303 	lsr.w	r3, r1, r3
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x270>)
 80024d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_RCC_ClockConfig+0x274>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fc3e 	bl	8000d60 <HAL_InitTick>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	04c4b400 	.word	0x04c4b400
 80024fc:	08008c10 	.word	0x08008c10
 8002500:	20000000 	.word	0x20000000
 8002504:	20000004 	.word	0x20000004

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800250e:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d102      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800251a:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	e047      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d102      	bne.n	8002532 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	e03e      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002532:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d136      	bne.n	80025ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3301      	adds	r3, #1
 8002554:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d10c      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800255c:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002566:	68d2      	ldr	r2, [r2, #12]
 8002568:	0a12      	lsrs	r2, r2, #8
 800256a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	617b      	str	r3, [r7, #20]
      break;
 8002574:	e00c      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002580:	68d2      	ldr	r2, [r2, #12]
 8002582:	0a12      	lsrs	r2, r2, #8
 8002584:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
      break;
 800258e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0e5b      	lsrs	r3, r3, #25
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	3301      	adds	r3, #1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e001      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025b0:	693b      	ldr	r3, [r7, #16]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	016e3600 	.word	0x016e3600

080025cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000000 	.word	0x20000000

080025e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025e8:	f7ff fff0 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 80025ec:	4601      	mov	r1, r0
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_RCC_GetPCLK1Freq+0x28>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	08008c20 	.word	0x08008c20

08002610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002614:	f7ff ffda 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8002618:	4601      	mov	r1, r0
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x24>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	0adb      	lsrs	r3, r3, #11
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	08008c20 	.word	0x08008c20

0800263c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3301      	adds	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d10c      	bne.n	800267a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002660:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800266a:	68d2      	ldr	r2, [r2, #12]
 800266c:	0a12      	lsrs	r2, r2, #8
 800266e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	617b      	str	r3, [r7, #20]
    break;
 8002678:	e00c      	b.n	8002694 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002684:	68d2      	ldr	r2, [r2, #12]
 8002686:	0a12      	lsrs	r2, r2, #8
 8002688:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
    break;
 8002692:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0e5b      	lsrs	r3, r3, #25
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	3301      	adds	r3, #1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026ae:	687b      	ldr	r3, [r7, #4]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40021000 	.word	0x40021000
 80026c0:	016e3600 	.word	0x016e3600
 80026c4:	00f42400 	.word	0x00f42400

080026c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026d0:	2300      	movs	r3, #0
 80026d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026d4:	2300      	movs	r3, #0
 80026d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8098 	beq.w	8002816 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10d      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	4a3f      	ldr	r2, [pc, #252]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6593      	str	r3, [r2, #88]	; 0x58
 8002702:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270e:	2301      	movs	r3, #1
 8002710:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002712:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a39      	ldr	r2, [pc, #228]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800271e:	f7fe fb6b 	bl	8000df8 <HAL_GetTick>
 8002722:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002724:	e009      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe fb67 	bl	8000df8 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d902      	bls.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	74fb      	strb	r3, [r7, #19]
        break;
 8002738:	e005      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ef      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d159      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800274c:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01e      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	429a      	cmp	r2, r3
 8002766:	d019      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002772:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002774:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002784:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	4a1b      	ldr	r2, [pc, #108]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800278c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002794:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fb27 	bl	8000df8 <HAL_GetTick>
 80027aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ac:	e00b      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe fb23 	bl	8000df8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d902      	bls.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	74fb      	strb	r3, [r7, #19]
            break;
 80027c4:	e006      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ec      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10b      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027f0:	e008      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	74bb      	strb	r3, [r7, #18]
 80027f6:	e005      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002804:	7c7b      	ldrb	r3, [r7, #17]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d105      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280a:	4baf      	ldr	r3, [pc, #700]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	4aae      	ldr	r2, [pc, #696]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002814:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002822:	4ba9      	ldr	r3, [pc, #676]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	f023 0203 	bic.w	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	49a5      	ldr	r1, [pc, #660]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002844:	4ba0      	ldr	r3, [pc, #640]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f023 020c 	bic.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	499d      	ldr	r1, [pc, #628]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002866:	4b98      	ldr	r3, [pc, #608]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4994      	ldr	r1, [pc, #592]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002888:	4b8f      	ldr	r3, [pc, #572]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	498c      	ldr	r1, [pc, #560]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028aa:	4b87      	ldr	r3, [pc, #540]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	4983      	ldr	r1, [pc, #524]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028cc:	4b7e      	ldr	r3, [pc, #504]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	497b      	ldr	r1, [pc, #492]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ee:	4b76      	ldr	r3, [pc, #472]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	4972      	ldr	r1, [pc, #456]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002910:	4b6d      	ldr	r3, [pc, #436]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	496a      	ldr	r1, [pc, #424]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002932:	4b65      	ldr	r3, [pc, #404]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	4961      	ldr	r1, [pc, #388]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002954:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800295a:	f023 0203 	bic.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	4959      	ldr	r1, [pc, #356]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002976:	4b54      	ldr	r3, [pc, #336]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	4950      	ldr	r1, [pc, #320]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002998:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4948      	ldr	r1, [pc, #288]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b6:	d105      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b8:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a42      	ldr	r2, [pc, #264]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d015      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029d0:	4b3d      	ldr	r3, [pc, #244]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	493a      	ldr	r1, [pc, #232]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ee:	d105      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f0:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a34      	ldr	r2, [pc, #208]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a08:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	492c      	ldr	r1, [pc, #176]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a26:	d105      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a28:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a26      	ldr	r2, [pc, #152]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	491e      	ldr	r1, [pc, #120]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4910      	ldr	r1, [pc, #64]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d018      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4902      	ldr	r1, [pc, #8]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ac6:	e001      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002ac8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad4:	d105      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ad6:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4a20      	ldr	r2, [pc, #128]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d015      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afc:	4917      	ldr	r1, [pc, #92]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d105      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b34:	4909      	ldr	r1, [pc, #36]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b44:	d105      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b50:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b52:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e084      	b.n	8002c7c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d106      	bne.n	8002b92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7fd ff59 	bl	8000a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bb2:	d902      	bls.n	8002bba <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e002      	b.n	8002bc0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002bc8:	d007      	beq.n	8002bda <HAL_SPI_Init+0x7a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bd2:	d002      	beq.n	8002bda <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10b      	bne.n	8002bfa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bea:	d903      	bls.n	8002bf4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf2:	e002      	b.n	8002bfa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	ea42 0103 	orr.w	r1, r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	f003 0204 	and.w	r2, r3, #4
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	ea42 0103 	orr.w	r1, r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_SPI_Transmit+0x22>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e150      	b.n	8002f48 <HAL_SPI_Transmit+0x2c4>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cae:	f7fe f8a3 	bl	8000df8 <HAL_GetTick>
 8002cb2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d002      	beq.n	8002cca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cc8:	e135      	b.n	8002f36 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_SPI_Transmit+0x52>
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cda:	e12c      	b.n	8002f36 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d26:	d107      	bne.n	8002d38 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b40      	cmp	r3, #64	; 0x40
 8002d44:	d007      	beq.n	8002d56 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d5e:	d94b      	bls.n	8002df8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_SPI_Transmit+0xea>
 8002d68:	8afb      	ldrh	r3, [r7, #22]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d13e      	bne.n	8002dec <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	881a      	ldrh	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	1c9a      	adds	r2, r3, #2
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d92:	e02b      	b.n	8002dec <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d112      	bne.n	8002dc8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	881a      	ldrh	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	1c9a      	adds	r2, r3, #2
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dc6:	e011      	b.n	8002dec <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc8:	f7fe f816 	bl	8000df8 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d803      	bhi.n	8002de0 <HAL_SPI_Transmit+0x15c>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d102      	bne.n	8002de6 <HAL_SPI_Transmit+0x162>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dea:	e0a4      	b.n	8002f36 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1ce      	bne.n	8002d94 <HAL_SPI_Transmit+0x110>
 8002df6:	e07c      	b.n	8002ef2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_SPI_Transmit+0x182>
 8002e00:	8afb      	ldrh	r3, [r7, #22]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d170      	bne.n	8002ee8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d912      	bls.n	8002e36 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	881a      	ldrh	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	1c9a      	adds	r2, r3, #2
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b02      	subs	r3, #2
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e34:	e058      	b.n	8002ee8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	7812      	ldrb	r2, [r2, #0]
 8002e42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e5c:	e044      	b.n	8002ee8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d12b      	bne.n	8002ec4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d912      	bls.n	8002e9c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7a:	881a      	ldrh	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	1c9a      	adds	r2, r3, #2
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b02      	subs	r3, #2
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e9a:	e025      	b.n	8002ee8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	7812      	ldrb	r2, [r2, #0]
 8002ea8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ec2:	e011      	b.n	8002ee8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec4:	f7fd ff98 	bl	8000df8 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d803      	bhi.n	8002edc <HAL_SPI_Transmit+0x258>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eda:	d102      	bne.n	8002ee2 <HAL_SPI_Transmit+0x25e>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ee6:	e026      	b.n	8002f36 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1b5      	bne.n	8002e5e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fca2 	bl	8003840 <SPI_EndRxTxTransaction>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e000      	b.n	8002f36 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002f34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f46:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3720      	adds	r7, #32
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f6c:	d112      	bne.n	8002f94 <HAL_SPI_Receive+0x44>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10e      	bne.n	8002f94 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2204      	movs	r2, #4
 8002f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f908 	bl	80031a0 <HAL_SPI_TransmitReceive>
 8002f90:	4603      	mov	r3, r0
 8002f92:	e101      	b.n	8003198 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_SPI_Receive+0x52>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e0fa      	b.n	8003198 <HAL_SPI_Receive+0x248>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002faa:	f7fd ff25 	bl	8000df8 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d002      	beq.n	8002fc2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fc0:	e0e1      	b.n	8003186 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_SPI_Receive+0x7e>
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fd2:	e0d8      	b.n	8003186 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	88fa      	ldrh	r2, [r7, #6]
 8002fec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	88fa      	ldrh	r2, [r7, #6]
 8002ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800301e:	d908      	bls.n	8003032 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	e007      	b.n	8003042 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003040:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304a:	d107      	bne.n	800305c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800305a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d007      	beq.n	800307a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003078:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003082:	d867      	bhi.n	8003154 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003084:	e030      	b.n	80030e8 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d117      	bne.n	80030c4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f103 020c 	add.w	r2, r3, #12
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	7812      	ldrb	r2, [r2, #0]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80030c2:	e011      	b.n	80030e8 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c4:	f7fd fe98 	bl	8000df8 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d803      	bhi.n	80030dc <HAL_SPI_Receive+0x18c>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030da:	d102      	bne.n	80030e2 <HAL_SPI_Receive+0x192>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030e6:	e04e      	b.n	8003186 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1c8      	bne.n	8003086 <HAL_SPI_Receive+0x136>
 80030f4:	e034      	b.n	8003160 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d115      	bne.n	8003130 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	b292      	uxth	r2, r2
 8003110:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	1c9a      	adds	r2, r3, #2
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800312e:	e011      	b.n	8003154 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003130:	f7fd fe62 	bl	8000df8 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d803      	bhi.n	8003148 <HAL_SPI_Receive+0x1f8>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	d102      	bne.n	800314e <HAL_SPI_Receive+0x1fe>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003152:	e018      	b.n	8003186 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ca      	bne.n	80030f6 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	6839      	ldr	r1, [r7, #0]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fb13 	bl	8003790 <SPI_EndRxTransaction>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	75fb      	strb	r3, [r7, #23]
 8003182:	e000      	b.n	8003186 <HAL_SPI_Receive+0x236>
  }

error :
 8003184:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	; 0x28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031ae:	2301      	movs	r3, #1
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_SPI_TransmitReceive+0x26>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e1fb      	b.n	80035be <HAL_SPI_TransmitReceive+0x41e>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ce:	f7fd fe13 	bl	8000df8 <HAL_GetTick>
 80031d2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031da:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80031e2:	887b      	ldrh	r3, [r7, #2]
 80031e4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80031e6:	887b      	ldrh	r3, [r7, #2]
 80031e8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031ea:	7efb      	ldrb	r3, [r7, #27]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d00e      	beq.n	800320e <HAL_SPI_TransmitReceive+0x6e>
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f6:	d106      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x66>
 8003200:	7efb      	ldrb	r3, [r7, #27]
 8003202:	2b04      	cmp	r3, #4
 8003204:	d003      	beq.n	800320e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800320c:	e1cd      	b.n	80035aa <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x80>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x80>
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d103      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003226:	e1c0      	b.n	80035aa <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b04      	cmp	r3, #4
 8003232:	d003      	beq.n	800323c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2205      	movs	r2, #5
 8003238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	887a      	ldrh	r2, [r7, #2]
 8003262:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800327e:	d802      	bhi.n	8003286 <HAL_SPI_TransmitReceive+0xe6>
 8003280:	8a3b      	ldrh	r3, [r7, #16]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d908      	bls.n	8003298 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	e007      	b.n	80032a8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b40      	cmp	r3, #64	; 0x40
 80032b4:	d007      	beq.n	80032c6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032ce:	d97c      	bls.n	80033ca <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <HAL_SPI_TransmitReceive+0x13e>
 80032d8:	8a7b      	ldrh	r3, [r7, #18]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d169      	bne.n	80033b2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	881a      	ldrh	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	1c9a      	adds	r2, r3, #2
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003302:	e056      	b.n	80033b2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d11b      	bne.n	800334a <HAL_SPI_TransmitReceive+0x1aa>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d016      	beq.n	800334a <HAL_SPI_TransmitReceive+0x1aa>
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	2b01      	cmp	r3, #1
 8003320:	d113      	bne.n	800334a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	881a      	ldrh	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	1c9a      	adds	r2, r3, #2
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b01      	cmp	r3, #1
 8003356:	d11c      	bne.n	8003392 <HAL_SPI_TransmitReceive+0x1f2>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d016      	beq.n	8003392 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	b292      	uxth	r2, r2
 8003370:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	1c9a      	adds	r2, r3, #2
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800338e:	2301      	movs	r3, #1
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003392:	f7fd fd31 	bl	8000df8 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339e:	429a      	cmp	r2, r3
 80033a0:	d807      	bhi.n	80033b2 <HAL_SPI_TransmitReceive+0x212>
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d003      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80033b0:	e0fb      	b.n	80035aa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1a3      	bne.n	8003304 <HAL_SPI_TransmitReceive+0x164>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d19d      	bne.n	8003304 <HAL_SPI_TransmitReceive+0x164>
 80033c8:	e0df      	b.n	800358a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_SPI_TransmitReceive+0x23a>
 80033d2:	8a7b      	ldrh	r3, [r7, #18]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f040 80cb 	bne.w	8003570 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d912      	bls.n	800340a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	881a      	ldrh	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	1c9a      	adds	r2, r3, #2
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b02      	subs	r3, #2
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003408:	e0b2      	b.n	8003570 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	7812      	ldrb	r2, [r2, #0]
 8003416:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003430:	e09e      	b.n	8003570 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d134      	bne.n	80034aa <HAL_SPI_TransmitReceive+0x30a>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d02f      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x30a>
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	2b01      	cmp	r3, #1
 800344e:	d12c      	bne.n	80034aa <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d912      	bls.n	8003480 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	881a      	ldrh	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	1c9a      	adds	r2, r3, #2
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b02      	subs	r3, #2
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800347e:	e012      	b.n	80034a6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d148      	bne.n	800354a <HAL_SPI_TransmitReceive+0x3aa>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d042      	beq.n	800354a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d923      	bls.n	8003518 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	b292      	uxth	r2, r2
 80034dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	1c9a      	adds	r2, r3, #2
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b02      	subs	r3, #2
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d81f      	bhi.n	8003546 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	e016      	b.n	8003546 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f103 020c 	add.w	r2, r3, #12
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	7812      	ldrb	r2, [r2, #0]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003546:	2301      	movs	r3, #1
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800354a:	f7fd fc55 	bl	8000df8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003556:	429a      	cmp	r2, r3
 8003558:	d803      	bhi.n	8003562 <HAL_SPI_TransmitReceive+0x3c2>
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d102      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x3c8>
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800356e:	e01c      	b.n	80035aa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	f47f af5b 	bne.w	8003432 <HAL_SPI_TransmitReceive+0x292>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f af54 	bne.w	8003432 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f956 	bl	8003840 <SPI_EndRxTxTransaction>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	661a      	str	r2, [r3, #96]	; 0x60
 80035a6:	e000      	b.n	80035aa <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80035a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3728      	adds	r7, #40	; 0x28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035d4:	b2db      	uxtb	r3, r3
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4613      	mov	r3, r2
 80035f0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035f2:	e04c      	b.n	800368e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d048      	beq.n	800368e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035fc:	f7fd fbfc 	bl	8000df8 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d902      	bls.n	8003612 <SPI_WaitFlagStateUntilTimeout+0x30>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d13d      	bne.n	800368e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003620:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800362a:	d111      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003634:	d004      	beq.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363e:	d107      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003658:	d10f      	bne.n	800367a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003678:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e00f      	b.n	80036ae <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1a3      	bne.n	80035f4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80036c4:	e057      	b.n	8003776 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036cc:	d106      	bne.n	80036dc <SPI_WaitFifoStateUntilTimeout+0x26>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d103      	bne.n	80036dc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	d048      	beq.n	8003776 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80036e4:	f7fd fb88 	bl	8000df8 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d902      	bls.n	80036fa <SPI_WaitFifoStateUntilTimeout+0x44>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d13d      	bne.n	8003776 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003708:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003712:	d111      	bne.n	8003738 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371c:	d004      	beq.n	8003728 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003726:	d107      	bne.n	8003738 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003736:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003740:	d10f      	bne.n	8003762 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e008      	b.n	8003788 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4013      	ands	r3, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d19f      	bne.n	80036c6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a4:	d111      	bne.n	80037ca <SPI_EndRxTransaction+0x3a>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ae:	d004      	beq.n	80037ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b8:	d107      	bne.n	80037ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2180      	movs	r1, #128	; 0x80
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7ff ff04 	bl	80035e2 <SPI_WaitFlagStateUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e023      	b.n	8003838 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f8:	d11d      	bne.n	8003836 <SPI_EndRxTransaction+0xa6>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003802:	d004      	beq.n	800380e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380c:	d113      	bne.n	8003836 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2200      	movs	r2, #0
 8003816:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7ff ff4b 	bl	80036b6 <SPI_WaitFifoStateUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e000      	b.n	8003838 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2200      	movs	r2, #0
 8003854:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7ff ff2c 	bl	80036b6 <SPI_WaitFifoStateUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e027      	b.n	80038c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2200      	movs	r2, #0
 800387c:	2180      	movs	r1, #128	; 0x80
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7ff feaf 	bl	80035e2 <SPI_WaitFlagStateUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e014      	b.n	80038c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f7ff ff05 	bl	80036b6 <SPI_WaitFifoStateUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e000      	b.n	80038c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e042      	b.n	8003964 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7fd f9b1 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2224      	movs	r2, #36	; 0x24
 80038fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f82e 	bl	8003970 <UART_SetConfig>
 8003914:	4603      	mov	r3, r0
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e022      	b.n	8003964 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f001 fa10 	bl	8004d4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800393a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800394a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f001 fa97 	bl	8004e90 <UART_CheckIdleState>
 8003962:	4603      	mov	r3, r0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	0000      	movs	r0, r0
	...

08003970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003970:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003974:	b08a      	sub	sp, #40	; 0x28
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4313      	orrs	r3, r2
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a4:	4313      	orrs	r3, r2
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4baa      	ldr	r3, [pc, #680]	; (8003c58 <UART_SetConfig+0x2e8>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a9f      	ldr	r2, [pc, #636]	; (8003c5c <UART_SetConfig+0x2ec>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	4313      	orrs	r3, r2
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80039f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f023 010f 	bic.w	r1, r3, #15
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a90      	ldr	r2, [pc, #576]	; (8003c60 <UART_SetConfig+0x2f0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d126      	bne.n	8003a72 <UART_SetConfig+0x102>
 8003a24:	4b8f      	ldr	r3, [pc, #572]	; (8003c64 <UART_SetConfig+0x2f4>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d81a      	bhi.n	8003a68 <UART_SetConfig+0xf8>
 8003a32:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <UART_SetConfig+0xc8>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a49 	.word	0x08003a49
 8003a3c:	08003a59 	.word	0x08003a59
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a61 	.word	0x08003a61
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4e:	e116      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003a50:	2302      	movs	r3, #2
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a56:	e112      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5e:	e10e      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003a60:	2308      	movs	r3, #8
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a66:	e10a      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6e:	bf00      	nop
 8003a70:	e105      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7c      	ldr	r2, [pc, #496]	; (8003c68 <UART_SetConfig+0x2f8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d138      	bne.n	8003aee <UART_SetConfig+0x17e>
 8003a7c:	4b79      	ldr	r3, [pc, #484]	; (8003c64 <UART_SetConfig+0x2f4>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b0c      	cmp	r3, #12
 8003a88:	d82c      	bhi.n	8003ae4 <UART_SetConfig+0x174>
 8003a8a:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <UART_SetConfig+0x120>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003ac5 	.word	0x08003ac5
 8003a94:	08003ae5 	.word	0x08003ae5
 8003a98:	08003ae5 	.word	0x08003ae5
 8003a9c:	08003ae5 	.word	0x08003ae5
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003ae5 	.word	0x08003ae5
 8003aa8:	08003ae5 	.word	0x08003ae5
 8003aac:	08003ae5 	.word	0x08003ae5
 8003ab0:	08003acd 	.word	0x08003acd
 8003ab4:	08003ae5 	.word	0x08003ae5
 8003ab8:	08003ae5 	.word	0x08003ae5
 8003abc:	08003ae5 	.word	0x08003ae5
 8003ac0:	08003add 	.word	0x08003add
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aca:	e0d8      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003acc:	2302      	movs	r3, #2
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad2:	e0d4      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ada:	e0d0      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003adc:	2308      	movs	r3, #8
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae2:	e0cc      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aea:	bf00      	nop
 8003aec:	e0c7      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a5e      	ldr	r2, [pc, #376]	; (8003c6c <UART_SetConfig+0x2fc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d125      	bne.n	8003b44 <UART_SetConfig+0x1d4>
 8003af8:	4b5a      	ldr	r3, [pc, #360]	; (8003c64 <UART_SetConfig+0x2f4>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d011      	beq.n	8003b2a <UART_SetConfig+0x1ba>
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d802      	bhi.n	8003b10 <UART_SetConfig+0x1a0>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <UART_SetConfig+0x1aa>
 8003b0e:	e014      	b.n	8003b3a <UART_SetConfig+0x1ca>
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d006      	beq.n	8003b22 <UART_SetConfig+0x1b2>
 8003b14:	2b30      	cmp	r3, #48	; 0x30
 8003b16:	d00c      	beq.n	8003b32 <UART_SetConfig+0x1c2>
 8003b18:	e00f      	b.n	8003b3a <UART_SetConfig+0x1ca>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b20:	e0ad      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003b22:	2302      	movs	r3, #2
 8003b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b28:	e0a9      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b30:	e0a5      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003b32:	2308      	movs	r3, #8
 8003b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b38:	e0a1      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b40:	bf00      	nop
 8003b42:	e09c      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a49      	ldr	r2, [pc, #292]	; (8003c70 <UART_SetConfig+0x300>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d125      	bne.n	8003b9a <UART_SetConfig+0x22a>
 8003b4e:	4b45      	ldr	r3, [pc, #276]	; (8003c64 <UART_SetConfig+0x2f4>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d011      	beq.n	8003b80 <UART_SetConfig+0x210>
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d802      	bhi.n	8003b66 <UART_SetConfig+0x1f6>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <UART_SetConfig+0x200>
 8003b64:	e014      	b.n	8003b90 <UART_SetConfig+0x220>
 8003b66:	2b80      	cmp	r3, #128	; 0x80
 8003b68:	d006      	beq.n	8003b78 <UART_SetConfig+0x208>
 8003b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b6c:	d00c      	beq.n	8003b88 <UART_SetConfig+0x218>
 8003b6e:	e00f      	b.n	8003b90 <UART_SetConfig+0x220>
 8003b70:	2300      	movs	r3, #0
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b76:	e082      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7e:	e07e      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003b80:	2304      	movs	r3, #4
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b86:	e07a      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003b88:	2308      	movs	r3, #8
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8e:	e076      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003b90:	2310      	movs	r3, #16
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b96:	bf00      	nop
 8003b98:	e071      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a35      	ldr	r2, [pc, #212]	; (8003c74 <UART_SetConfig+0x304>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d129      	bne.n	8003bf8 <UART_SetConfig+0x288>
 8003ba4:	4b2f      	ldr	r3, [pc, #188]	; (8003c64 <UART_SetConfig+0x2f4>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb2:	d014      	beq.n	8003bde <UART_SetConfig+0x26e>
 8003bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb8:	d802      	bhi.n	8003bc0 <UART_SetConfig+0x250>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <UART_SetConfig+0x25e>
 8003bbe:	e016      	b.n	8003bee <UART_SetConfig+0x27e>
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc4:	d007      	beq.n	8003bd6 <UART_SetConfig+0x266>
 8003bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bca:	d00c      	beq.n	8003be6 <UART_SetConfig+0x276>
 8003bcc:	e00f      	b.n	8003bee <UART_SetConfig+0x27e>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd4:	e053      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bdc:	e04f      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003bde:	2304      	movs	r3, #4
 8003be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be4:	e04b      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003be6:	2308      	movs	r3, #8
 8003be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bec:	e047      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003bee:	2310      	movs	r3, #16
 8003bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf4:	bf00      	nop
 8003bf6:	e042      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <UART_SetConfig+0x2ec>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d13a      	bne.n	8003c78 <UART_SetConfig+0x308>
 8003c02:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <UART_SetConfig+0x2f4>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c10:	d014      	beq.n	8003c3c <UART_SetConfig+0x2cc>
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c16:	d802      	bhi.n	8003c1e <UART_SetConfig+0x2ae>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <UART_SetConfig+0x2bc>
 8003c1c:	e016      	b.n	8003c4c <UART_SetConfig+0x2dc>
 8003c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c22:	d007      	beq.n	8003c34 <UART_SetConfig+0x2c4>
 8003c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c28:	d00c      	beq.n	8003c44 <UART_SetConfig+0x2d4>
 8003c2a:	e00f      	b.n	8003c4c <UART_SetConfig+0x2dc>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c32:	e024      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003c34:	2302      	movs	r3, #2
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3a:	e020      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e01c      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003c44:	2308      	movs	r3, #8
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e018      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c52:	bf00      	nop
 8003c54:	e013      	b.n	8003c7e <UART_SetConfig+0x30e>
 8003c56:	bf00      	nop
 8003c58:	cfff69f3 	.word	0xcfff69f3
 8003c5c:	40008000 	.word	0x40008000
 8003c60:	40013800 	.word	0x40013800
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40004400 	.word	0x40004400
 8003c6c:	40004800 	.word	0x40004800
 8003c70:	40004c00 	.word	0x40004c00
 8003c74:	40005000 	.word	0x40005000
 8003c78:	2310      	movs	r3, #16
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a86      	ldr	r2, [pc, #536]	; (8003e9c <UART_SetConfig+0x52c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	f040 8422 	bne.w	80044ce <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	f200 8173 	bhi.w	8003f7a <UART_SetConfig+0x60a>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <UART_SetConfig+0x32c>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003f7b 	.word	0x08003f7b
 8003ca4:	08003d63 	.word	0x08003d63
 8003ca8:	08003f7b 	.word	0x08003f7b
 8003cac:	08003dfb 	.word	0x08003dfb
 8003cb0:	08003f7b 	.word	0x08003f7b
 8003cb4:	08003f7b 	.word	0x08003f7b
 8003cb8:	08003f7b 	.word	0x08003f7b
 8003cbc:	08003ecd 	.word	0x08003ecd
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003cc0:	f7fe fc90 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d044      	beq.n	8003d58 <UART_SetConfig+0x3e8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d03e      	beq.n	8003d54 <UART_SetConfig+0x3e4>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d038      	beq.n	8003d50 <UART_SetConfig+0x3e0>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d032      	beq.n	8003d4c <UART_SetConfig+0x3dc>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d02c      	beq.n	8003d48 <UART_SetConfig+0x3d8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	2b05      	cmp	r3, #5
 8003cf4:	d026      	beq.n	8003d44 <UART_SetConfig+0x3d4>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d020      	beq.n	8003d40 <UART_SetConfig+0x3d0>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	2b07      	cmp	r3, #7
 8003d04:	d01a      	beq.n	8003d3c <UART_SetConfig+0x3cc>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d014      	beq.n	8003d38 <UART_SetConfig+0x3c8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2b09      	cmp	r3, #9
 8003d14:	d00e      	beq.n	8003d34 <UART_SetConfig+0x3c4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	2b0a      	cmp	r3, #10
 8003d1c:	d008      	beq.n	8003d30 <UART_SetConfig+0x3c0>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	2b0b      	cmp	r3, #11
 8003d24:	d102      	bne.n	8003d2c <UART_SetConfig+0x3bc>
 8003d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d2a:	e016      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e014      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	e012      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d34:	2340      	movs	r3, #64	; 0x40
 8003d36:	e010      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d38:	2320      	movs	r3, #32
 8003d3a:	e00e      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	e00c      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d40:	230c      	movs	r3, #12
 8003d42:	e00a      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d44:	230a      	movs	r3, #10
 8003d46:	e008      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d48:	2308      	movs	r3, #8
 8003d4a:	e006      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d4c:	2306      	movs	r3, #6
 8003d4e:	e004      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d50:	2304      	movs	r3, #4
 8003d52:	e002      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e000      	b.n	8003d5a <UART_SetConfig+0x3ea>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5e:	617b      	str	r3, [r7, #20]
        break;
 8003d60:	e10e      	b.n	8003f80 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d044      	beq.n	8003df4 <UART_SetConfig+0x484>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d03e      	beq.n	8003df0 <UART_SetConfig+0x480>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d038      	beq.n	8003dec <UART_SetConfig+0x47c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d032      	beq.n	8003de8 <UART_SetConfig+0x478>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d02c      	beq.n	8003de4 <UART_SetConfig+0x474>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	d026      	beq.n	8003de0 <UART_SetConfig+0x470>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	2b06      	cmp	r3, #6
 8003d98:	d020      	beq.n	8003ddc <UART_SetConfig+0x46c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	2b07      	cmp	r3, #7
 8003da0:	d01a      	beq.n	8003dd8 <UART_SetConfig+0x468>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d014      	beq.n	8003dd4 <UART_SetConfig+0x464>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	2b09      	cmp	r3, #9
 8003db0:	d00e      	beq.n	8003dd0 <UART_SetConfig+0x460>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	2b0a      	cmp	r3, #10
 8003db8:	d008      	beq.n	8003dcc <UART_SetConfig+0x45c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	2b0b      	cmp	r3, #11
 8003dc0:	d102      	bne.n	8003dc8 <UART_SetConfig+0x458>
 8003dc2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003dc6:	e016      	b.n	8003df6 <UART_SetConfig+0x486>
 8003dc8:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <UART_SetConfig+0x530>)
 8003dca:	e014      	b.n	8003df6 <UART_SetConfig+0x486>
 8003dcc:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <UART_SetConfig+0x534>)
 8003dce:	e012      	b.n	8003df6 <UART_SetConfig+0x486>
 8003dd0:	4b35      	ldr	r3, [pc, #212]	; (8003ea8 <UART_SetConfig+0x538>)
 8003dd2:	e010      	b.n	8003df6 <UART_SetConfig+0x486>
 8003dd4:	4b35      	ldr	r3, [pc, #212]	; (8003eac <UART_SetConfig+0x53c>)
 8003dd6:	e00e      	b.n	8003df6 <UART_SetConfig+0x486>
 8003dd8:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <UART_SetConfig+0x540>)
 8003dda:	e00c      	b.n	8003df6 <UART_SetConfig+0x486>
 8003ddc:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <UART_SetConfig+0x544>)
 8003dde:	e00a      	b.n	8003df6 <UART_SetConfig+0x486>
 8003de0:	4b35      	ldr	r3, [pc, #212]	; (8003eb8 <UART_SetConfig+0x548>)
 8003de2:	e008      	b.n	8003df6 <UART_SetConfig+0x486>
 8003de4:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <UART_SetConfig+0x54c>)
 8003de6:	e006      	b.n	8003df6 <UART_SetConfig+0x486>
 8003de8:	4b35      	ldr	r3, [pc, #212]	; (8003ec0 <UART_SetConfig+0x550>)
 8003dea:	e004      	b.n	8003df6 <UART_SetConfig+0x486>
 8003dec:	4b35      	ldr	r3, [pc, #212]	; (8003ec4 <UART_SetConfig+0x554>)
 8003dee:	e002      	b.n	8003df6 <UART_SetConfig+0x486>
 8003df0:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <UART_SetConfig+0x558>)
 8003df2:	e000      	b.n	8003df6 <UART_SetConfig+0x486>
 8003df4:	4b2a      	ldr	r3, [pc, #168]	; (8003ea0 <UART_SetConfig+0x530>)
 8003df6:	617b      	str	r3, [r7, #20]
        break;
 8003df8:	e0c2      	b.n	8003f80 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003dfa:	f7fe fb85 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d044      	beq.n	8003e92 <UART_SetConfig+0x522>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d03e      	beq.n	8003e8e <UART_SetConfig+0x51e>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d038      	beq.n	8003e8a <UART_SetConfig+0x51a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d032      	beq.n	8003e86 <UART_SetConfig+0x516>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d02c      	beq.n	8003e82 <UART_SetConfig+0x512>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2b05      	cmp	r3, #5
 8003e2e:	d026      	beq.n	8003e7e <UART_SetConfig+0x50e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	2b06      	cmp	r3, #6
 8003e36:	d020      	beq.n	8003e7a <UART_SetConfig+0x50a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	2b07      	cmp	r3, #7
 8003e3e:	d01a      	beq.n	8003e76 <UART_SetConfig+0x506>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d014      	beq.n	8003e72 <UART_SetConfig+0x502>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2b09      	cmp	r3, #9
 8003e4e:	d00e      	beq.n	8003e6e <UART_SetConfig+0x4fe>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	2b0a      	cmp	r3, #10
 8003e56:	d008      	beq.n	8003e6a <UART_SetConfig+0x4fa>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	2b0b      	cmp	r3, #11
 8003e5e:	d102      	bne.n	8003e66 <UART_SetConfig+0x4f6>
 8003e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e64:	e016      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e014      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	e012      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e6e:	2340      	movs	r3, #64	; 0x40
 8003e70:	e010      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e72:	2320      	movs	r3, #32
 8003e74:	e00e      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e76:	2310      	movs	r3, #16
 8003e78:	e00c      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	e00a      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e7e:	230a      	movs	r3, #10
 8003e80:	e008      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e82:	2308      	movs	r3, #8
 8003e84:	e006      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e86:	2306      	movs	r3, #6
 8003e88:	e004      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	e002      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e000      	b.n	8003e94 <UART_SetConfig+0x524>
 8003e92:	2301      	movs	r3, #1
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
        break;
 8003e9a:	e071      	b.n	8003f80 <UART_SetConfig+0x610>
 8003e9c:	40008000 	.word	0x40008000
 8003ea0:	00f42400 	.word	0x00f42400
 8003ea4:	0001e848 	.word	0x0001e848
 8003ea8:	0003d090 	.word	0x0003d090
 8003eac:	0007a120 	.word	0x0007a120
 8003eb0:	000f4240 	.word	0x000f4240
 8003eb4:	00145855 	.word	0x00145855
 8003eb8:	00186a00 	.word	0x00186a00
 8003ebc:	001e8480 	.word	0x001e8480
 8003ec0:	0028b0aa 	.word	0x0028b0aa
 8003ec4:	003d0900 	.word	0x003d0900
 8003ec8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d04e      	beq.n	8003f72 <UART_SetConfig+0x602>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d047      	beq.n	8003f6c <UART_SetConfig+0x5fc>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d040      	beq.n	8003f66 <UART_SetConfig+0x5f6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d039      	beq.n	8003f60 <UART_SetConfig+0x5f0>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d032      	beq.n	8003f5a <UART_SetConfig+0x5ea>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2b05      	cmp	r3, #5
 8003efa:	d02b      	beq.n	8003f54 <UART_SetConfig+0x5e4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2b06      	cmp	r3, #6
 8003f02:	d024      	beq.n	8003f4e <UART_SetConfig+0x5de>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	2b07      	cmp	r3, #7
 8003f0a:	d01d      	beq.n	8003f48 <UART_SetConfig+0x5d8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d016      	beq.n	8003f42 <UART_SetConfig+0x5d2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2b09      	cmp	r3, #9
 8003f1a:	d00f      	beq.n	8003f3c <UART_SetConfig+0x5cc>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	2b0a      	cmp	r3, #10
 8003f22:	d008      	beq.n	8003f36 <UART_SetConfig+0x5c6>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	2b0b      	cmp	r3, #11
 8003f2a:	d101      	bne.n	8003f30 <UART_SetConfig+0x5c0>
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	e022      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f34:	e01f      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f3a:	e01c      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f40:	e019      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f46:	e016      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f4c:	e013      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f4e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003f52:	e010      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f54:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003f58:	e00d      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f5e:	e00a      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f60:	f241 5355 	movw	r3, #5461	; 0x1555
 8003f64:	e007      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f6a:	e004      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f70:	e001      	b.n	8003f76 <UART_SetConfig+0x606>
 8003f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f76:	617b      	str	r3, [r7, #20]
        break;
 8003f78:	e002      	b.n	8003f80 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	76fb      	strb	r3, [r7, #27]
        break;
 8003f7e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 86b7 	beq.w	8004cf6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	4413      	add	r3, r2
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d305      	bcc.n	8003fa4 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d903      	bls.n	8003fac <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	76fb      	strb	r3, [r7, #27]
 8003fa8:	f000 bea5 	b.w	8004cf6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 8003fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	f200 8277 	bhi.w	80044a4 <UART_SetConfig+0xb34>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <UART_SetConfig+0x64c>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	080044a5 	.word	0x080044a5
 8003fc4:	0800411f 	.word	0x0800411f
 8003fc8:	080044a5 	.word	0x080044a5
 8003fcc:	08004215 	.word	0x08004215
 8003fd0:	080044a5 	.word	0x080044a5
 8003fd4:	080044a5 	.word	0x080044a5
 8003fd8:	080044a5 	.word	0x080044a5
 8003fdc:	08004353 	.word	0x08004353
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7fe fb00 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 8003fe4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d067      	beq.n	80040c6 <UART_SetConfig+0x756>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d05e      	beq.n	80040bc <UART_SetConfig+0x74c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b02      	cmp	r3, #2
 8004004:	d055      	beq.n	80040b2 <UART_SetConfig+0x742>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b03      	cmp	r3, #3
 800400c:	d04c      	beq.n	80040a8 <UART_SetConfig+0x738>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b04      	cmp	r3, #4
 8004014:	d043      	beq.n	800409e <UART_SetConfig+0x72e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b05      	cmp	r3, #5
 800401c:	d03a      	beq.n	8004094 <UART_SetConfig+0x724>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b06      	cmp	r3, #6
 8004024:	d031      	beq.n	800408a <UART_SetConfig+0x71a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b07      	cmp	r3, #7
 800402c:	d028      	beq.n	8004080 <UART_SetConfig+0x710>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b08      	cmp	r3, #8
 8004034:	d01f      	beq.n	8004076 <UART_SetConfig+0x706>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2b09      	cmp	r3, #9
 800403c:	d016      	beq.n	800406c <UART_SetConfig+0x6fc>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b0a      	cmp	r3, #10
 8004044:	d00d      	beq.n	8004062 <UART_SetConfig+0x6f2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	2b0b      	cmp	r3, #11
 800404c:	d104      	bne.n	8004058 <UART_SetConfig+0x6e8>
 800404e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004052:	f04f 0400 	mov.w	r4, #0
 8004056:	e03a      	b.n	80040ce <UART_SetConfig+0x75e>
 8004058:	f04f 0301 	mov.w	r3, #1
 800405c:	f04f 0400 	mov.w	r4, #0
 8004060:	e035      	b.n	80040ce <UART_SetConfig+0x75e>
 8004062:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004066:	f04f 0400 	mov.w	r4, #0
 800406a:	e030      	b.n	80040ce <UART_SetConfig+0x75e>
 800406c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004070:	f04f 0400 	mov.w	r4, #0
 8004074:	e02b      	b.n	80040ce <UART_SetConfig+0x75e>
 8004076:	f04f 0320 	mov.w	r3, #32
 800407a:	f04f 0400 	mov.w	r4, #0
 800407e:	e026      	b.n	80040ce <UART_SetConfig+0x75e>
 8004080:	f04f 0310 	mov.w	r3, #16
 8004084:	f04f 0400 	mov.w	r4, #0
 8004088:	e021      	b.n	80040ce <UART_SetConfig+0x75e>
 800408a:	f04f 030c 	mov.w	r3, #12
 800408e:	f04f 0400 	mov.w	r4, #0
 8004092:	e01c      	b.n	80040ce <UART_SetConfig+0x75e>
 8004094:	f04f 030a 	mov.w	r3, #10
 8004098:	f04f 0400 	mov.w	r4, #0
 800409c:	e017      	b.n	80040ce <UART_SetConfig+0x75e>
 800409e:	f04f 0308 	mov.w	r3, #8
 80040a2:	f04f 0400 	mov.w	r4, #0
 80040a6:	e012      	b.n	80040ce <UART_SetConfig+0x75e>
 80040a8:	f04f 0306 	mov.w	r3, #6
 80040ac:	f04f 0400 	mov.w	r4, #0
 80040b0:	e00d      	b.n	80040ce <UART_SetConfig+0x75e>
 80040b2:	f04f 0304 	mov.w	r3, #4
 80040b6:	f04f 0400 	mov.w	r4, #0
 80040ba:	e008      	b.n	80040ce <UART_SetConfig+0x75e>
 80040bc:	f04f 0302 	mov.w	r3, #2
 80040c0:	f04f 0400 	mov.w	r4, #0
 80040c4:	e003      	b.n	80040ce <UART_SetConfig+0x75e>
 80040c6:	f04f 0301 	mov.w	r3, #1
 80040ca:	f04f 0400 	mov.w	r4, #0
 80040ce:	461a      	mov	r2, r3
 80040d0:	4623      	mov	r3, r4
 80040d2:	f7fc f8a1 	bl	8000218 <__aeabi_uldivmod>
 80040d6:	4603      	mov	r3, r0
 80040d8:	460c      	mov	r4, r1
 80040da:	4619      	mov	r1, r3
 80040dc:	4622      	mov	r2, r4
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	f04f 0400 	mov.w	r4, #0
 80040e6:	0214      	lsls	r4, r2, #8
 80040e8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80040ec:	020b      	lsls	r3, r1, #8
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6852      	ldr	r2, [r2, #4]
 80040f2:	0852      	lsrs	r2, r2, #1
 80040f4:	4611      	mov	r1, r2
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	eb13 0b01 	adds.w	fp, r3, r1
 80040fe:	eb44 0c02 	adc.w	ip, r4, r2
 8004102:	4658      	mov	r0, fp
 8004104:	4661      	mov	r1, ip
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f04f 0400 	mov.w	r4, #0
 800410e:	461a      	mov	r2, r3
 8004110:	4623      	mov	r3, r4
 8004112:	f7fc f881 	bl	8000218 <__aeabi_uldivmod>
 8004116:	4603      	mov	r3, r0
 8004118:	460c      	mov	r4, r1
 800411a:	61fb      	str	r3, [r7, #28]
            break;
 800411c:	e1c5      	b.n	80044aa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	2b00      	cmp	r3, #0
 8004124:	d05b      	beq.n	80041de <UART_SetConfig+0x86e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	2b01      	cmp	r3, #1
 800412c:	d053      	beq.n	80041d6 <UART_SetConfig+0x866>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	2b02      	cmp	r3, #2
 8004134:	d04b      	beq.n	80041ce <UART_SetConfig+0x85e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	2b03      	cmp	r3, #3
 800413c:	d043      	beq.n	80041c6 <UART_SetConfig+0x856>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	2b04      	cmp	r3, #4
 8004144:	d03b      	beq.n	80041be <UART_SetConfig+0x84e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	2b05      	cmp	r3, #5
 800414c:	d033      	beq.n	80041b6 <UART_SetConfig+0x846>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	2b06      	cmp	r3, #6
 8004154:	d02b      	beq.n	80041ae <UART_SetConfig+0x83e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2b07      	cmp	r3, #7
 800415c:	d023      	beq.n	80041a6 <UART_SetConfig+0x836>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	2b08      	cmp	r3, #8
 8004164:	d01b      	beq.n	800419e <UART_SetConfig+0x82e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	2b09      	cmp	r3, #9
 800416c:	d013      	beq.n	8004196 <UART_SetConfig+0x826>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	2b0a      	cmp	r3, #10
 8004174:	d00b      	beq.n	800418e <UART_SetConfig+0x81e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	2b0b      	cmp	r3, #11
 800417c:	d103      	bne.n	8004186 <UART_SetConfig+0x816>
 800417e:	4bae      	ldr	r3, [pc, #696]	; (8004438 <UART_SetConfig+0xac8>)
 8004180:	f04f 0400 	mov.w	r4, #0
 8004184:	e02e      	b.n	80041e4 <UART_SetConfig+0x874>
 8004186:	4bad      	ldr	r3, [pc, #692]	; (800443c <UART_SetConfig+0xacc>)
 8004188:	f04f 0400 	mov.w	r4, #0
 800418c:	e02a      	b.n	80041e4 <UART_SetConfig+0x874>
 800418e:	4bac      	ldr	r3, [pc, #688]	; (8004440 <UART_SetConfig+0xad0>)
 8004190:	f04f 0400 	mov.w	r4, #0
 8004194:	e026      	b.n	80041e4 <UART_SetConfig+0x874>
 8004196:	4bab      	ldr	r3, [pc, #684]	; (8004444 <UART_SetConfig+0xad4>)
 8004198:	f04f 0400 	mov.w	r4, #0
 800419c:	e022      	b.n	80041e4 <UART_SetConfig+0x874>
 800419e:	4baa      	ldr	r3, [pc, #680]	; (8004448 <UART_SetConfig+0xad8>)
 80041a0:	f04f 0400 	mov.w	r4, #0
 80041a4:	e01e      	b.n	80041e4 <UART_SetConfig+0x874>
 80041a6:	4ba9      	ldr	r3, [pc, #676]	; (800444c <UART_SetConfig+0xadc>)
 80041a8:	f04f 0400 	mov.w	r4, #0
 80041ac:	e01a      	b.n	80041e4 <UART_SetConfig+0x874>
 80041ae:	a49e      	add	r4, pc, #632	; (adr r4, 8004428 <UART_SetConfig+0xab8>)
 80041b0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80041b4:	e016      	b.n	80041e4 <UART_SetConfig+0x874>
 80041b6:	4ba6      	ldr	r3, [pc, #664]	; (8004450 <UART_SetConfig+0xae0>)
 80041b8:	f04f 0400 	mov.w	r4, #0
 80041bc:	e012      	b.n	80041e4 <UART_SetConfig+0x874>
 80041be:	4ba5      	ldr	r3, [pc, #660]	; (8004454 <UART_SetConfig+0xae4>)
 80041c0:	f04f 0400 	mov.w	r4, #0
 80041c4:	e00e      	b.n	80041e4 <UART_SetConfig+0x874>
 80041c6:	a49a      	add	r4, pc, #616	; (adr r4, 8004430 <UART_SetConfig+0xac0>)
 80041c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80041cc:	e00a      	b.n	80041e4 <UART_SetConfig+0x874>
 80041ce:	4ba2      	ldr	r3, [pc, #648]	; (8004458 <UART_SetConfig+0xae8>)
 80041d0:	f04f 0400 	mov.w	r4, #0
 80041d4:	e006      	b.n	80041e4 <UART_SetConfig+0x874>
 80041d6:	4ba1      	ldr	r3, [pc, #644]	; (800445c <UART_SetConfig+0xaec>)
 80041d8:	f04f 0400 	mov.w	r4, #0
 80041dc:	e002      	b.n	80041e4 <UART_SetConfig+0x874>
 80041de:	4b97      	ldr	r3, [pc, #604]	; (800443c <UART_SetConfig+0xacc>)
 80041e0:	f04f 0400 	mov.w	r4, #0
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6852      	ldr	r2, [r2, #4]
 80041e8:	0852      	lsrs	r2, r2, #1
 80041ea:	4611      	mov	r1, r2
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	eb13 0b01 	adds.w	fp, r3, r1
 80041f4:	eb44 0c02 	adc.w	ip, r4, r2
 80041f8:	4658      	mov	r0, fp
 80041fa:	4661      	mov	r1, ip
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f04f 0400 	mov.w	r4, #0
 8004204:	461a      	mov	r2, r3
 8004206:	4623      	mov	r3, r4
 8004208:	f7fc f806 	bl	8000218 <__aeabi_uldivmod>
 800420c:	4603      	mov	r3, r0
 800420e:	460c      	mov	r4, r1
 8004210:	61fb      	str	r3, [r7, #28]
            break;
 8004212:	e14a      	b.n	80044aa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004214:	f7fe f978 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8004218:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4618      	mov	r0, r3
 800421e:	f04f 0100 	mov.w	r1, #0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	2b00      	cmp	r3, #0
 8004228:	d067      	beq.n	80042fa <UART_SetConfig+0x98a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	2b01      	cmp	r3, #1
 8004230:	d05e      	beq.n	80042f0 <UART_SetConfig+0x980>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	2b02      	cmp	r3, #2
 8004238:	d055      	beq.n	80042e6 <UART_SetConfig+0x976>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	2b03      	cmp	r3, #3
 8004240:	d04c      	beq.n	80042dc <UART_SetConfig+0x96c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2b04      	cmp	r3, #4
 8004248:	d043      	beq.n	80042d2 <UART_SetConfig+0x962>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	2b05      	cmp	r3, #5
 8004250:	d03a      	beq.n	80042c8 <UART_SetConfig+0x958>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2b06      	cmp	r3, #6
 8004258:	d031      	beq.n	80042be <UART_SetConfig+0x94e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2b07      	cmp	r3, #7
 8004260:	d028      	beq.n	80042b4 <UART_SetConfig+0x944>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	2b08      	cmp	r3, #8
 8004268:	d01f      	beq.n	80042aa <UART_SetConfig+0x93a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	2b09      	cmp	r3, #9
 8004270:	d016      	beq.n	80042a0 <UART_SetConfig+0x930>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	2b0a      	cmp	r3, #10
 8004278:	d00d      	beq.n	8004296 <UART_SetConfig+0x926>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	2b0b      	cmp	r3, #11
 8004280:	d104      	bne.n	800428c <UART_SetConfig+0x91c>
 8004282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004286:	f04f 0400 	mov.w	r4, #0
 800428a:	e03a      	b.n	8004302 <UART_SetConfig+0x992>
 800428c:	f04f 0301 	mov.w	r3, #1
 8004290:	f04f 0400 	mov.w	r4, #0
 8004294:	e035      	b.n	8004302 <UART_SetConfig+0x992>
 8004296:	f04f 0380 	mov.w	r3, #128	; 0x80
 800429a:	f04f 0400 	mov.w	r4, #0
 800429e:	e030      	b.n	8004302 <UART_SetConfig+0x992>
 80042a0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80042a4:	f04f 0400 	mov.w	r4, #0
 80042a8:	e02b      	b.n	8004302 <UART_SetConfig+0x992>
 80042aa:	f04f 0320 	mov.w	r3, #32
 80042ae:	f04f 0400 	mov.w	r4, #0
 80042b2:	e026      	b.n	8004302 <UART_SetConfig+0x992>
 80042b4:	f04f 0310 	mov.w	r3, #16
 80042b8:	f04f 0400 	mov.w	r4, #0
 80042bc:	e021      	b.n	8004302 <UART_SetConfig+0x992>
 80042be:	f04f 030c 	mov.w	r3, #12
 80042c2:	f04f 0400 	mov.w	r4, #0
 80042c6:	e01c      	b.n	8004302 <UART_SetConfig+0x992>
 80042c8:	f04f 030a 	mov.w	r3, #10
 80042cc:	f04f 0400 	mov.w	r4, #0
 80042d0:	e017      	b.n	8004302 <UART_SetConfig+0x992>
 80042d2:	f04f 0308 	mov.w	r3, #8
 80042d6:	f04f 0400 	mov.w	r4, #0
 80042da:	e012      	b.n	8004302 <UART_SetConfig+0x992>
 80042dc:	f04f 0306 	mov.w	r3, #6
 80042e0:	f04f 0400 	mov.w	r4, #0
 80042e4:	e00d      	b.n	8004302 <UART_SetConfig+0x992>
 80042e6:	f04f 0304 	mov.w	r3, #4
 80042ea:	f04f 0400 	mov.w	r4, #0
 80042ee:	e008      	b.n	8004302 <UART_SetConfig+0x992>
 80042f0:	f04f 0302 	mov.w	r3, #2
 80042f4:	f04f 0400 	mov.w	r4, #0
 80042f8:	e003      	b.n	8004302 <UART_SetConfig+0x992>
 80042fa:	f04f 0301 	mov.w	r3, #1
 80042fe:	f04f 0400 	mov.w	r4, #0
 8004302:	461a      	mov	r2, r3
 8004304:	4623      	mov	r3, r4
 8004306:	f7fb ff87 	bl	8000218 <__aeabi_uldivmod>
 800430a:	4603      	mov	r3, r0
 800430c:	460c      	mov	r4, r1
 800430e:	4619      	mov	r1, r3
 8004310:	4622      	mov	r2, r4
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	f04f 0400 	mov.w	r4, #0
 800431a:	0214      	lsls	r4, r2, #8
 800431c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004320:	020b      	lsls	r3, r1, #8
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6852      	ldr	r2, [r2, #4]
 8004326:	0852      	lsrs	r2, r2, #1
 8004328:	4611      	mov	r1, r2
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	eb13 0b01 	adds.w	fp, r3, r1
 8004332:	eb44 0c02 	adc.w	ip, r4, r2
 8004336:	4658      	mov	r0, fp
 8004338:	4661      	mov	r1, ip
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f04f 0400 	mov.w	r4, #0
 8004342:	461a      	mov	r2, r3
 8004344:	4623      	mov	r3, r4
 8004346:	f7fb ff67 	bl	8000218 <__aeabi_uldivmod>
 800434a:	4603      	mov	r3, r0
 800434c:	460c      	mov	r4, r1
 800434e:	61fb      	str	r3, [r7, #28]
            break;
 8004350:	e0ab      	b.n	80044aa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8088 	beq.w	800446c <UART_SetConfig+0xafc>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	2b01      	cmp	r3, #1
 8004362:	d05b      	beq.n	800441c <UART_SetConfig+0xaac>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	2b02      	cmp	r3, #2
 800436a:	d052      	beq.n	8004412 <UART_SetConfig+0xaa2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	2b03      	cmp	r3, #3
 8004372:	d04a      	beq.n	800440a <UART_SetConfig+0xa9a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	2b04      	cmp	r3, #4
 800437a:	d041      	beq.n	8004400 <UART_SetConfig+0xa90>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	2b05      	cmp	r3, #5
 8004382:	d039      	beq.n	80043f8 <UART_SetConfig+0xa88>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b06      	cmp	r3, #6
 800438a:	d031      	beq.n	80043f0 <UART_SetConfig+0xa80>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	2b07      	cmp	r3, #7
 8004392:	d028      	beq.n	80043e6 <UART_SetConfig+0xa76>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2b08      	cmp	r3, #8
 800439a:	d01f      	beq.n	80043dc <UART_SetConfig+0xa6c>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	2b09      	cmp	r3, #9
 80043a2:	d016      	beq.n	80043d2 <UART_SetConfig+0xa62>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b0a      	cmp	r3, #10
 80043aa:	d00d      	beq.n	80043c8 <UART_SetConfig+0xa58>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b0b      	cmp	r3, #11
 80043b2:	d104      	bne.n	80043be <UART_SetConfig+0xa4e>
 80043b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b8:	f04f 0400 	mov.w	r4, #0
 80043bc:	e05a      	b.n	8004474 <UART_SetConfig+0xb04>
 80043be:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80043c2:	f04f 0400 	mov.w	r4, #0
 80043c6:	e055      	b.n	8004474 <UART_SetConfig+0xb04>
 80043c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043cc:	f04f 0400 	mov.w	r4, #0
 80043d0:	e050      	b.n	8004474 <UART_SetConfig+0xb04>
 80043d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043d6:	f04f 0400 	mov.w	r4, #0
 80043da:	e04b      	b.n	8004474 <UART_SetConfig+0xb04>
 80043dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043e0:	f04f 0400 	mov.w	r4, #0
 80043e4:	e046      	b.n	8004474 <UART_SetConfig+0xb04>
 80043e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043ea:	f04f 0400 	mov.w	r4, #0
 80043ee:	e041      	b.n	8004474 <UART_SetConfig+0xb04>
 80043f0:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <UART_SetConfig+0xaf0>)
 80043f2:	f04f 0400 	mov.w	r4, #0
 80043f6:	e03d      	b.n	8004474 <UART_SetConfig+0xb04>
 80043f8:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <UART_SetConfig+0xaf4>)
 80043fa:	f04f 0400 	mov.w	r4, #0
 80043fe:	e039      	b.n	8004474 <UART_SetConfig+0xb04>
 8004400:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004404:	f04f 0400 	mov.w	r4, #0
 8004408:	e034      	b.n	8004474 <UART_SetConfig+0xb04>
 800440a:	4b17      	ldr	r3, [pc, #92]	; (8004468 <UART_SetConfig+0xaf8>)
 800440c:	f04f 0400 	mov.w	r4, #0
 8004410:	e030      	b.n	8004474 <UART_SetConfig+0xb04>
 8004412:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004416:	f04f 0400 	mov.w	r4, #0
 800441a:	e02b      	b.n	8004474 <UART_SetConfig+0xb04>
 800441c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004420:	f04f 0400 	mov.w	r4, #0
 8004424:	e026      	b.n	8004474 <UART_SetConfig+0xb04>
 8004426:	bf00      	nop
 8004428:	14585500 	.word	0x14585500
 800442c:	00000000 	.word	0x00000000
 8004430:	28b0aa00 	.word	0x28b0aa00
 8004434:	00000000 	.word	0x00000000
 8004438:	00f42400 	.word	0x00f42400
 800443c:	f4240000 	.word	0xf4240000
 8004440:	01e84800 	.word	0x01e84800
 8004444:	03d09000 	.word	0x03d09000
 8004448:	07a12000 	.word	0x07a12000
 800444c:	0f424000 	.word	0x0f424000
 8004450:	186a0000 	.word	0x186a0000
 8004454:	1e848000 	.word	0x1e848000
 8004458:	3d090000 	.word	0x3d090000
 800445c:	7a120000 	.word	0x7a120000
 8004460:	000aaa00 	.word	0x000aaa00
 8004464:	000ccc00 	.word	0x000ccc00
 8004468:	00155500 	.word	0x00155500
 800446c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004470:	f04f 0400 	mov.w	r4, #0
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6852      	ldr	r2, [r2, #4]
 8004478:	0852      	lsrs	r2, r2, #1
 800447a:	4611      	mov	r1, r2
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	eb13 0b01 	adds.w	fp, r3, r1
 8004484:	eb44 0c02 	adc.w	ip, r4, r2
 8004488:	4658      	mov	r0, fp
 800448a:	4661      	mov	r1, ip
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f04f 0400 	mov.w	r4, #0
 8004494:	461a      	mov	r2, r3
 8004496:	4623      	mov	r3, r4
 8004498:	f7fb febe 	bl	8000218 <__aeabi_uldivmod>
 800449c:	4603      	mov	r3, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	61fb      	str	r3, [r7, #28]
            break;
 80044a2:	e002      	b.n	80044aa <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	76fb      	strb	r3, [r7, #27]
            break;
 80044a8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b0:	d309      	bcc.n	80044c6 <UART_SetConfig+0xb56>
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b8:	d205      	bcs.n	80044c6 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	f000 bc18 	b.w	8004cf6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	76fb      	strb	r3, [r7, #27]
 80044ca:	f000 bc14 	b.w	8004cf6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d6:	f040 8204 	bne.w	80048e2 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 80044da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044de:	2b08      	cmp	r3, #8
 80044e0:	f200 81df 	bhi.w	80048a2 <UART_SetConfig+0xf32>
 80044e4:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <UART_SetConfig+0xb7c>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	08004511 	.word	0x08004511
 80044f0:	080045c9 	.word	0x080045c9
 80044f4:	08004681 	.word	0x08004681
 80044f8:	080048a3 	.word	0x080048a3
 80044fc:	08004729 	.word	0x08004729
 8004500:	080048a3 	.word	0x080048a3
 8004504:	080048a3 	.word	0x080048a3
 8004508:	080048a3 	.word	0x080048a3
 800450c:	080047e1 	.word	0x080047e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004510:	f7fe f868 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 8004514:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	2b00      	cmp	r3, #0
 800451c:	d044      	beq.n	80045a8 <UART_SetConfig+0xc38>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	2b01      	cmp	r3, #1
 8004524:	d03e      	beq.n	80045a4 <UART_SetConfig+0xc34>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	2b02      	cmp	r3, #2
 800452c:	d038      	beq.n	80045a0 <UART_SetConfig+0xc30>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	2b03      	cmp	r3, #3
 8004534:	d032      	beq.n	800459c <UART_SetConfig+0xc2c>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	2b04      	cmp	r3, #4
 800453c:	d02c      	beq.n	8004598 <UART_SetConfig+0xc28>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b05      	cmp	r3, #5
 8004544:	d026      	beq.n	8004594 <UART_SetConfig+0xc24>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b06      	cmp	r3, #6
 800454c:	d020      	beq.n	8004590 <UART_SetConfig+0xc20>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b07      	cmp	r3, #7
 8004554:	d01a      	beq.n	800458c <UART_SetConfig+0xc1c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	2b08      	cmp	r3, #8
 800455c:	d014      	beq.n	8004588 <UART_SetConfig+0xc18>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	2b09      	cmp	r3, #9
 8004564:	d00e      	beq.n	8004584 <UART_SetConfig+0xc14>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	2b0a      	cmp	r3, #10
 800456c:	d008      	beq.n	8004580 <UART_SetConfig+0xc10>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	2b0b      	cmp	r3, #11
 8004574:	d102      	bne.n	800457c <UART_SetConfig+0xc0c>
 8004576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800457a:	e016      	b.n	80045aa <UART_SetConfig+0xc3a>
 800457c:	2301      	movs	r3, #1
 800457e:	e014      	b.n	80045aa <UART_SetConfig+0xc3a>
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	e012      	b.n	80045aa <UART_SetConfig+0xc3a>
 8004584:	2340      	movs	r3, #64	; 0x40
 8004586:	e010      	b.n	80045aa <UART_SetConfig+0xc3a>
 8004588:	2320      	movs	r3, #32
 800458a:	e00e      	b.n	80045aa <UART_SetConfig+0xc3a>
 800458c:	2310      	movs	r3, #16
 800458e:	e00c      	b.n	80045aa <UART_SetConfig+0xc3a>
 8004590:	230c      	movs	r3, #12
 8004592:	e00a      	b.n	80045aa <UART_SetConfig+0xc3a>
 8004594:	230a      	movs	r3, #10
 8004596:	e008      	b.n	80045aa <UART_SetConfig+0xc3a>
 8004598:	2308      	movs	r3, #8
 800459a:	e006      	b.n	80045aa <UART_SetConfig+0xc3a>
 800459c:	2306      	movs	r3, #6
 800459e:	e004      	b.n	80045aa <UART_SetConfig+0xc3a>
 80045a0:	2304      	movs	r3, #4
 80045a2:	e002      	b.n	80045aa <UART_SetConfig+0xc3a>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e000      	b.n	80045aa <UART_SetConfig+0xc3a>
 80045a8:	2301      	movs	r3, #1
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	005a      	lsls	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	441a      	add	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	61fb      	str	r3, [r7, #28]
        break;
 80045c6:	e16f      	b.n	80048a8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7fe f822 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 80045cc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d044      	beq.n	8004660 <UART_SetConfig+0xcf0>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d03e      	beq.n	800465c <UART_SetConfig+0xcec>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d038      	beq.n	8004658 <UART_SetConfig+0xce8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d032      	beq.n	8004654 <UART_SetConfig+0xce4>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d02c      	beq.n	8004650 <UART_SetConfig+0xce0>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	d026      	beq.n	800464c <UART_SetConfig+0xcdc>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b06      	cmp	r3, #6
 8004604:	d020      	beq.n	8004648 <UART_SetConfig+0xcd8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b07      	cmp	r3, #7
 800460c:	d01a      	beq.n	8004644 <UART_SetConfig+0xcd4>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	2b08      	cmp	r3, #8
 8004614:	d014      	beq.n	8004640 <UART_SetConfig+0xcd0>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b09      	cmp	r3, #9
 800461c:	d00e      	beq.n	800463c <UART_SetConfig+0xccc>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	2b0a      	cmp	r3, #10
 8004624:	d008      	beq.n	8004638 <UART_SetConfig+0xcc8>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	2b0b      	cmp	r3, #11
 800462c:	d102      	bne.n	8004634 <UART_SetConfig+0xcc4>
 800462e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004632:	e016      	b.n	8004662 <UART_SetConfig+0xcf2>
 8004634:	2301      	movs	r3, #1
 8004636:	e014      	b.n	8004662 <UART_SetConfig+0xcf2>
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	e012      	b.n	8004662 <UART_SetConfig+0xcf2>
 800463c:	2340      	movs	r3, #64	; 0x40
 800463e:	e010      	b.n	8004662 <UART_SetConfig+0xcf2>
 8004640:	2320      	movs	r3, #32
 8004642:	e00e      	b.n	8004662 <UART_SetConfig+0xcf2>
 8004644:	2310      	movs	r3, #16
 8004646:	e00c      	b.n	8004662 <UART_SetConfig+0xcf2>
 8004648:	230c      	movs	r3, #12
 800464a:	e00a      	b.n	8004662 <UART_SetConfig+0xcf2>
 800464c:	230a      	movs	r3, #10
 800464e:	e008      	b.n	8004662 <UART_SetConfig+0xcf2>
 8004650:	2308      	movs	r3, #8
 8004652:	e006      	b.n	8004662 <UART_SetConfig+0xcf2>
 8004654:	2306      	movs	r3, #6
 8004656:	e004      	b.n	8004662 <UART_SetConfig+0xcf2>
 8004658:	2304      	movs	r3, #4
 800465a:	e002      	b.n	8004662 <UART_SetConfig+0xcf2>
 800465c:	2302      	movs	r3, #2
 800465e:	e000      	b.n	8004662 <UART_SetConfig+0xcf2>
 8004660:	2301      	movs	r3, #1
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	005a      	lsls	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	b29b      	uxth	r3, r3
 800467c:	61fb      	str	r3, [r7, #28]
        break;
 800467e:	e113      	b.n	80048a8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	2b00      	cmp	r3, #0
 8004686:	d043      	beq.n	8004710 <UART_SetConfig+0xda0>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	2b01      	cmp	r3, #1
 800468e:	d03d      	beq.n	800470c <UART_SetConfig+0xd9c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	2b02      	cmp	r3, #2
 8004696:	d037      	beq.n	8004708 <UART_SetConfig+0xd98>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	2b03      	cmp	r3, #3
 800469e:	d031      	beq.n	8004704 <UART_SetConfig+0xd94>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d02b      	beq.n	8004700 <UART_SetConfig+0xd90>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d025      	beq.n	80046fc <UART_SetConfig+0xd8c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d01f      	beq.n	80046f8 <UART_SetConfig+0xd88>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	2b07      	cmp	r3, #7
 80046be:	d019      	beq.n	80046f4 <UART_SetConfig+0xd84>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d013      	beq.n	80046f0 <UART_SetConfig+0xd80>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	2b09      	cmp	r3, #9
 80046ce:	d00d      	beq.n	80046ec <UART_SetConfig+0xd7c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	2b0a      	cmp	r3, #10
 80046d6:	d007      	beq.n	80046e8 <UART_SetConfig+0xd78>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	2b0b      	cmp	r3, #11
 80046de:	d101      	bne.n	80046e4 <UART_SetConfig+0xd74>
 80046e0:	4b8d      	ldr	r3, [pc, #564]	; (8004918 <UART_SetConfig+0xfa8>)
 80046e2:	e016      	b.n	8004712 <UART_SetConfig+0xda2>
 80046e4:	4b8d      	ldr	r3, [pc, #564]	; (800491c <UART_SetConfig+0xfac>)
 80046e6:	e014      	b.n	8004712 <UART_SetConfig+0xda2>
 80046e8:	4b8d      	ldr	r3, [pc, #564]	; (8004920 <UART_SetConfig+0xfb0>)
 80046ea:	e012      	b.n	8004712 <UART_SetConfig+0xda2>
 80046ec:	4b8d      	ldr	r3, [pc, #564]	; (8004924 <UART_SetConfig+0xfb4>)
 80046ee:	e010      	b.n	8004712 <UART_SetConfig+0xda2>
 80046f0:	4b8d      	ldr	r3, [pc, #564]	; (8004928 <UART_SetConfig+0xfb8>)
 80046f2:	e00e      	b.n	8004712 <UART_SetConfig+0xda2>
 80046f4:	4b8d      	ldr	r3, [pc, #564]	; (800492c <UART_SetConfig+0xfbc>)
 80046f6:	e00c      	b.n	8004712 <UART_SetConfig+0xda2>
 80046f8:	4b8d      	ldr	r3, [pc, #564]	; (8004930 <UART_SetConfig+0xfc0>)
 80046fa:	e00a      	b.n	8004712 <UART_SetConfig+0xda2>
 80046fc:	4b8d      	ldr	r3, [pc, #564]	; (8004934 <UART_SetConfig+0xfc4>)
 80046fe:	e008      	b.n	8004712 <UART_SetConfig+0xda2>
 8004700:	4b8d      	ldr	r3, [pc, #564]	; (8004938 <UART_SetConfig+0xfc8>)
 8004702:	e006      	b.n	8004712 <UART_SetConfig+0xda2>
 8004704:	4b8d      	ldr	r3, [pc, #564]	; (800493c <UART_SetConfig+0xfcc>)
 8004706:	e004      	b.n	8004712 <UART_SetConfig+0xda2>
 8004708:	4b8d      	ldr	r3, [pc, #564]	; (8004940 <UART_SetConfig+0xfd0>)
 800470a:	e002      	b.n	8004712 <UART_SetConfig+0xda2>
 800470c:	4b8d      	ldr	r3, [pc, #564]	; (8004944 <UART_SetConfig+0xfd4>)
 800470e:	e000      	b.n	8004712 <UART_SetConfig+0xda2>
 8004710:	4b82      	ldr	r3, [pc, #520]	; (800491c <UART_SetConfig+0xfac>)
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6852      	ldr	r2, [r2, #4]
 8004716:	0852      	lsrs	r2, r2, #1
 8004718:	441a      	add	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	b29b      	uxth	r3, r3
 8004724:	61fb      	str	r3, [r7, #28]
        break;
 8004726:	e0bf      	b.n	80048a8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004728:	f7fd feee 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 800472c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d044      	beq.n	80047c0 <UART_SetConfig+0xe50>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2b01      	cmp	r3, #1
 800473c:	d03e      	beq.n	80047bc <UART_SetConfig+0xe4c>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2b02      	cmp	r3, #2
 8004744:	d038      	beq.n	80047b8 <UART_SetConfig+0xe48>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	2b03      	cmp	r3, #3
 800474c:	d032      	beq.n	80047b4 <UART_SetConfig+0xe44>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	2b04      	cmp	r3, #4
 8004754:	d02c      	beq.n	80047b0 <UART_SetConfig+0xe40>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	2b05      	cmp	r3, #5
 800475c:	d026      	beq.n	80047ac <UART_SetConfig+0xe3c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2b06      	cmp	r3, #6
 8004764:	d020      	beq.n	80047a8 <UART_SetConfig+0xe38>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	2b07      	cmp	r3, #7
 800476c:	d01a      	beq.n	80047a4 <UART_SetConfig+0xe34>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b08      	cmp	r3, #8
 8004774:	d014      	beq.n	80047a0 <UART_SetConfig+0xe30>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2b09      	cmp	r3, #9
 800477c:	d00e      	beq.n	800479c <UART_SetConfig+0xe2c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	2b0a      	cmp	r3, #10
 8004784:	d008      	beq.n	8004798 <UART_SetConfig+0xe28>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	2b0b      	cmp	r3, #11
 800478c:	d102      	bne.n	8004794 <UART_SetConfig+0xe24>
 800478e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004792:	e016      	b.n	80047c2 <UART_SetConfig+0xe52>
 8004794:	2301      	movs	r3, #1
 8004796:	e014      	b.n	80047c2 <UART_SetConfig+0xe52>
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	e012      	b.n	80047c2 <UART_SetConfig+0xe52>
 800479c:	2340      	movs	r3, #64	; 0x40
 800479e:	e010      	b.n	80047c2 <UART_SetConfig+0xe52>
 80047a0:	2320      	movs	r3, #32
 80047a2:	e00e      	b.n	80047c2 <UART_SetConfig+0xe52>
 80047a4:	2310      	movs	r3, #16
 80047a6:	e00c      	b.n	80047c2 <UART_SetConfig+0xe52>
 80047a8:	230c      	movs	r3, #12
 80047aa:	e00a      	b.n	80047c2 <UART_SetConfig+0xe52>
 80047ac:	230a      	movs	r3, #10
 80047ae:	e008      	b.n	80047c2 <UART_SetConfig+0xe52>
 80047b0:	2308      	movs	r3, #8
 80047b2:	e006      	b.n	80047c2 <UART_SetConfig+0xe52>
 80047b4:	2306      	movs	r3, #6
 80047b6:	e004      	b.n	80047c2 <UART_SetConfig+0xe52>
 80047b8:	2304      	movs	r3, #4
 80047ba:	e002      	b.n	80047c2 <UART_SetConfig+0xe52>
 80047bc:	2302      	movs	r3, #2
 80047be:	e000      	b.n	80047c2 <UART_SetConfig+0xe52>
 80047c0:	2301      	movs	r3, #1
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	005a      	lsls	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	441a      	add	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047da:	b29b      	uxth	r3, r3
 80047dc:	61fb      	str	r3, [r7, #28]
        break;
 80047de:	e063      	b.n	80048a8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d04f      	beq.n	8004888 <UART_SetConfig+0xf18>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d048      	beq.n	8004882 <UART_SetConfig+0xf12>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d041      	beq.n	800487c <UART_SetConfig+0xf0c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d03a      	beq.n	8004876 <UART_SetConfig+0xf06>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2b04      	cmp	r3, #4
 8004806:	d033      	beq.n	8004870 <UART_SetConfig+0xf00>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2b05      	cmp	r3, #5
 800480e:	d02c      	beq.n	800486a <UART_SetConfig+0xefa>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2b06      	cmp	r3, #6
 8004816:	d025      	beq.n	8004864 <UART_SetConfig+0xef4>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	2b07      	cmp	r3, #7
 800481e:	d01e      	beq.n	800485e <UART_SetConfig+0xeee>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	2b08      	cmp	r3, #8
 8004826:	d017      	beq.n	8004858 <UART_SetConfig+0xee8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	2b09      	cmp	r3, #9
 800482e:	d010      	beq.n	8004852 <UART_SetConfig+0xee2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	2b0a      	cmp	r3, #10
 8004836:	d009      	beq.n	800484c <UART_SetConfig+0xedc>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	2b0b      	cmp	r3, #11
 800483e:	d102      	bne.n	8004846 <UART_SetConfig+0xed6>
 8004840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004844:	e022      	b.n	800488c <UART_SetConfig+0xf1c>
 8004846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800484a:	e01f      	b.n	800488c <UART_SetConfig+0xf1c>
 800484c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004850:	e01c      	b.n	800488c <UART_SetConfig+0xf1c>
 8004852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004856:	e019      	b.n	800488c <UART_SetConfig+0xf1c>
 8004858:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800485c:	e016      	b.n	800488c <UART_SetConfig+0xf1c>
 800485e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004862:	e013      	b.n	800488c <UART_SetConfig+0xf1c>
 8004864:	f241 5354 	movw	r3, #5460	; 0x1554
 8004868:	e010      	b.n	800488c <UART_SetConfig+0xf1c>
 800486a:	f641 1398 	movw	r3, #6552	; 0x1998
 800486e:	e00d      	b.n	800488c <UART_SetConfig+0xf1c>
 8004870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004874:	e00a      	b.n	800488c <UART_SetConfig+0xf1c>
 8004876:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800487a:	e007      	b.n	800488c <UART_SetConfig+0xf1c>
 800487c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004880:	e004      	b.n	800488c <UART_SetConfig+0xf1c>
 8004882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004886:	e001      	b.n	800488c <UART_SetConfig+0xf1c>
 8004888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6852      	ldr	r2, [r2, #4]
 8004890:	0852      	lsrs	r2, r2, #1
 8004892:	441a      	add	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	b29b      	uxth	r3, r3
 800489e:	61fb      	str	r3, [r7, #28]
        break;
 80048a0:	e002      	b.n	80048a8 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	76fb      	strb	r3, [r7, #27]
        break;
 80048a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	d916      	bls.n	80048dc <UART_SetConfig+0xf6c>
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b4:	d212      	bcs.n	80048dc <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	f023 030f 	bic.w	r3, r3, #15
 80048be:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	89fb      	ldrh	r3, [r7, #14]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	89fa      	ldrh	r2, [r7, #14]
 80048d8:	60da      	str	r2, [r3, #12]
 80048da:	e20c      	b.n	8004cf6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	76fb      	strb	r3, [r7, #27]
 80048e0:	e209      	b.n	8004cf6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 80048e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	f200 81f4 	bhi.w	8004cd4 <UART_SetConfig+0x1364>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <UART_SetConfig+0xf84>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004949 	.word	0x08004949
 80048f8:	080049ff 	.word	0x080049ff
 80048fc:	08004ab5 	.word	0x08004ab5
 8004900:	08004cd5 	.word	0x08004cd5
 8004904:	08004b5f 	.word	0x08004b5f
 8004908:	08004cd5 	.word	0x08004cd5
 800490c:	08004cd5 	.word	0x08004cd5
 8004910:	08004cd5 	.word	0x08004cd5
 8004914:	08004c15 	.word	0x08004c15
 8004918:	0001e848 	.word	0x0001e848
 800491c:	01e84800 	.word	0x01e84800
 8004920:	0003d090 	.word	0x0003d090
 8004924:	0007a120 	.word	0x0007a120
 8004928:	000f4240 	.word	0x000f4240
 800492c:	001e8480 	.word	0x001e8480
 8004930:	0028b0aa 	.word	0x0028b0aa
 8004934:	0030d400 	.word	0x0030d400
 8004938:	003d0900 	.word	0x003d0900
 800493c:	00516154 	.word	0x00516154
 8004940:	007a1200 	.word	0x007a1200
 8004944:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004948:	f7fd fe4c 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 800494c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d044      	beq.n	80049e0 <UART_SetConfig+0x1070>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b01      	cmp	r3, #1
 800495c:	d03e      	beq.n	80049dc <UART_SetConfig+0x106c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	2b02      	cmp	r3, #2
 8004964:	d038      	beq.n	80049d8 <UART_SetConfig+0x1068>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b03      	cmp	r3, #3
 800496c:	d032      	beq.n	80049d4 <UART_SetConfig+0x1064>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2b04      	cmp	r3, #4
 8004974:	d02c      	beq.n	80049d0 <UART_SetConfig+0x1060>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b05      	cmp	r3, #5
 800497c:	d026      	beq.n	80049cc <UART_SetConfig+0x105c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b06      	cmp	r3, #6
 8004984:	d020      	beq.n	80049c8 <UART_SetConfig+0x1058>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2b07      	cmp	r3, #7
 800498c:	d01a      	beq.n	80049c4 <UART_SetConfig+0x1054>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	2b08      	cmp	r3, #8
 8004994:	d014      	beq.n	80049c0 <UART_SetConfig+0x1050>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b09      	cmp	r3, #9
 800499c:	d00e      	beq.n	80049bc <UART_SetConfig+0x104c>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	2b0a      	cmp	r3, #10
 80049a4:	d008      	beq.n	80049b8 <UART_SetConfig+0x1048>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b0b      	cmp	r3, #11
 80049ac:	d102      	bne.n	80049b4 <UART_SetConfig+0x1044>
 80049ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049b2:	e016      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e014      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	e012      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049bc:	2340      	movs	r3, #64	; 0x40
 80049be:	e010      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049c0:	2320      	movs	r3, #32
 80049c2:	e00e      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049c4:	2310      	movs	r3, #16
 80049c6:	e00c      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049c8:	230c      	movs	r3, #12
 80049ca:	e00a      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049cc:	230a      	movs	r3, #10
 80049ce:	e008      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049d0:	2308      	movs	r3, #8
 80049d2:	e006      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049d4:	2306      	movs	r3, #6
 80049d6:	e004      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049d8:	2304      	movs	r3, #4
 80049da:	e002      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049dc:	2302      	movs	r3, #2
 80049de:	e000      	b.n	80049e2 <UART_SetConfig+0x1072>
 80049e0:	2301      	movs	r3, #1
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	441a      	add	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	61fb      	str	r3, [r7, #28]
        break;
 80049fc:	e16d      	b.n	8004cda <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049fe:	f7fd fe07 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 8004a02:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d044      	beq.n	8004a96 <UART_SetConfig+0x1126>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d03e      	beq.n	8004a92 <UART_SetConfig+0x1122>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d038      	beq.n	8004a8e <UART_SetConfig+0x111e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d032      	beq.n	8004a8a <UART_SetConfig+0x111a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d02c      	beq.n	8004a86 <UART_SetConfig+0x1116>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d026      	beq.n	8004a82 <UART_SetConfig+0x1112>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	2b06      	cmp	r3, #6
 8004a3a:	d020      	beq.n	8004a7e <UART_SetConfig+0x110e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	2b07      	cmp	r3, #7
 8004a42:	d01a      	beq.n	8004a7a <UART_SetConfig+0x110a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d014      	beq.n	8004a76 <UART_SetConfig+0x1106>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	2b09      	cmp	r3, #9
 8004a52:	d00e      	beq.n	8004a72 <UART_SetConfig+0x1102>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	2b0a      	cmp	r3, #10
 8004a5a:	d008      	beq.n	8004a6e <UART_SetConfig+0x10fe>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	2b0b      	cmp	r3, #11
 8004a62:	d102      	bne.n	8004a6a <UART_SetConfig+0x10fa>
 8004a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a68:	e016      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e014      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	e012      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a72:	2340      	movs	r3, #64	; 0x40
 8004a74:	e010      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a76:	2320      	movs	r3, #32
 8004a78:	e00e      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	e00c      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	e00a      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a82:	230a      	movs	r3, #10
 8004a84:	e008      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a86:	2308      	movs	r3, #8
 8004a88:	e006      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a8a:	2306      	movs	r3, #6
 8004a8c:	e004      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a8e:	2304      	movs	r3, #4
 8004a90:	e002      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e000      	b.n	8004a98 <UART_SetConfig+0x1128>
 8004a96:	2301      	movs	r3, #1
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	441a      	add	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	61fb      	str	r3, [r7, #28]
        break;
 8004ab2:	e112      	b.n	8004cda <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d044      	beq.n	8004b46 <UART_SetConfig+0x11d6>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d03e      	beq.n	8004b42 <UART_SetConfig+0x11d2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d038      	beq.n	8004b3e <UART_SetConfig+0x11ce>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d032      	beq.n	8004b3a <UART_SetConfig+0x11ca>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d02c      	beq.n	8004b36 <UART_SetConfig+0x11c6>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d026      	beq.n	8004b32 <UART_SetConfig+0x11c2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	2b06      	cmp	r3, #6
 8004aea:	d020      	beq.n	8004b2e <UART_SetConfig+0x11be>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	2b07      	cmp	r3, #7
 8004af2:	d01a      	beq.n	8004b2a <UART_SetConfig+0x11ba>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d014      	beq.n	8004b26 <UART_SetConfig+0x11b6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	2b09      	cmp	r3, #9
 8004b02:	d00e      	beq.n	8004b22 <UART_SetConfig+0x11b2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	2b0a      	cmp	r3, #10
 8004b0a:	d008      	beq.n	8004b1e <UART_SetConfig+0x11ae>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	2b0b      	cmp	r3, #11
 8004b12:	d102      	bne.n	8004b1a <UART_SetConfig+0x11aa>
 8004b14:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004b18:	e016      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b1a:	4b81      	ldr	r3, [pc, #516]	; (8004d20 <UART_SetConfig+0x13b0>)
 8004b1c:	e014      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b1e:	4b81      	ldr	r3, [pc, #516]	; (8004d24 <UART_SetConfig+0x13b4>)
 8004b20:	e012      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b22:	4b81      	ldr	r3, [pc, #516]	; (8004d28 <UART_SetConfig+0x13b8>)
 8004b24:	e010      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b26:	4b81      	ldr	r3, [pc, #516]	; (8004d2c <UART_SetConfig+0x13bc>)
 8004b28:	e00e      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b2a:	4b81      	ldr	r3, [pc, #516]	; (8004d30 <UART_SetConfig+0x13c0>)
 8004b2c:	e00c      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b2e:	4b81      	ldr	r3, [pc, #516]	; (8004d34 <UART_SetConfig+0x13c4>)
 8004b30:	e00a      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b32:	4b81      	ldr	r3, [pc, #516]	; (8004d38 <UART_SetConfig+0x13c8>)
 8004b34:	e008      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b36:	4b81      	ldr	r3, [pc, #516]	; (8004d3c <UART_SetConfig+0x13cc>)
 8004b38:	e006      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b3a:	4b81      	ldr	r3, [pc, #516]	; (8004d40 <UART_SetConfig+0x13d0>)
 8004b3c:	e004      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b3e:	4b81      	ldr	r3, [pc, #516]	; (8004d44 <UART_SetConfig+0x13d4>)
 8004b40:	e002      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b42:	4b81      	ldr	r3, [pc, #516]	; (8004d48 <UART_SetConfig+0x13d8>)
 8004b44:	e000      	b.n	8004b48 <UART_SetConfig+0x11d8>
 8004b46:	4b76      	ldr	r3, [pc, #472]	; (8004d20 <UART_SetConfig+0x13b0>)
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6852      	ldr	r2, [r2, #4]
 8004b4c:	0852      	lsrs	r2, r2, #1
 8004b4e:	441a      	add	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	61fb      	str	r3, [r7, #28]
        break;
 8004b5c:	e0bd      	b.n	8004cda <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5e:	f7fd fcd3 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8004b62:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d044      	beq.n	8004bf6 <UART_SetConfig+0x1286>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d03e      	beq.n	8004bf2 <UART_SetConfig+0x1282>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d038      	beq.n	8004bee <UART_SetConfig+0x127e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d032      	beq.n	8004bea <UART_SetConfig+0x127a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d02c      	beq.n	8004be6 <UART_SetConfig+0x1276>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2b05      	cmp	r3, #5
 8004b92:	d026      	beq.n	8004be2 <UART_SetConfig+0x1272>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	2b06      	cmp	r3, #6
 8004b9a:	d020      	beq.n	8004bde <UART_SetConfig+0x126e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	2b07      	cmp	r3, #7
 8004ba2:	d01a      	beq.n	8004bda <UART_SetConfig+0x126a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d014      	beq.n	8004bd6 <UART_SetConfig+0x1266>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	2b09      	cmp	r3, #9
 8004bb2:	d00e      	beq.n	8004bd2 <UART_SetConfig+0x1262>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	2b0a      	cmp	r3, #10
 8004bba:	d008      	beq.n	8004bce <UART_SetConfig+0x125e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	2b0b      	cmp	r3, #11
 8004bc2:	d102      	bne.n	8004bca <UART_SetConfig+0x125a>
 8004bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bc8:	e016      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e014      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	e012      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004bd2:	2340      	movs	r3, #64	; 0x40
 8004bd4:	e010      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004bd6:	2320      	movs	r3, #32
 8004bd8:	e00e      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004bda:	2310      	movs	r3, #16
 8004bdc:	e00c      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004bde:	230c      	movs	r3, #12
 8004be0:	e00a      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004be2:	230a      	movs	r3, #10
 8004be4:	e008      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004be6:	2308      	movs	r3, #8
 8004be8:	e006      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004bea:	2306      	movs	r3, #6
 8004bec:	e004      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004bee:	2304      	movs	r3, #4
 8004bf0:	e002      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e000      	b.n	8004bf8 <UART_SetConfig+0x1288>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	441a      	add	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	61fb      	str	r3, [r7, #28]
        break;
 8004c12:	e062      	b.n	8004cda <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d04e      	beq.n	8004cba <UART_SetConfig+0x134a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d047      	beq.n	8004cb4 <UART_SetConfig+0x1344>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d040      	beq.n	8004cae <UART_SetConfig+0x133e>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d039      	beq.n	8004ca8 <UART_SetConfig+0x1338>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d032      	beq.n	8004ca2 <UART_SetConfig+0x1332>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	2b05      	cmp	r3, #5
 8004c42:	d02b      	beq.n	8004c9c <UART_SetConfig+0x132c>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	2b06      	cmp	r3, #6
 8004c4a:	d024      	beq.n	8004c96 <UART_SetConfig+0x1326>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2b07      	cmp	r3, #7
 8004c52:	d01d      	beq.n	8004c90 <UART_SetConfig+0x1320>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d016      	beq.n	8004c8a <UART_SetConfig+0x131a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	d00f      	beq.n	8004c84 <UART_SetConfig+0x1314>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	2b0a      	cmp	r3, #10
 8004c6a:	d008      	beq.n	8004c7e <UART_SetConfig+0x130e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	2b0b      	cmp	r3, #11
 8004c72:	d101      	bne.n	8004c78 <UART_SetConfig+0x1308>
 8004c74:	2380      	movs	r3, #128	; 0x80
 8004c76:	e022      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7c:	e01f      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c82:	e01c      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c88:	e019      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c8e:	e016      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004c90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c94:	e013      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004c96:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004c9a:	e010      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004c9c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004ca0:	e00d      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ca6:	e00a      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004ca8:	f241 5355 	movw	r3, #5461	; 0x1555
 8004cac:	e007      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cb2:	e004      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004cb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cb8:	e001      	b.n	8004cbe <UART_SetConfig+0x134e>
 8004cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6852      	ldr	r2, [r2, #4]
 8004cc2:	0852      	lsrs	r2, r2, #1
 8004cc4:	441a      	add	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	61fb      	str	r3, [r7, #28]
        break;
 8004cd2:	e002      	b.n	8004cda <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	76fb      	strb	r3, [r7, #27]
        break;
 8004cd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b0f      	cmp	r3, #15
 8004cde:	d908      	bls.n	8004cf2 <UART_SetConfig+0x1382>
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce6:	d204      	bcs.n	8004cf2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	60da      	str	r2, [r3, #12]
 8004cf0:	e001      	b.n	8004cf6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004d12:	7efb      	ldrb	r3, [r7, #27]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3728      	adds	r7, #40	; 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004d1e:	bf00      	nop
 8004d20:	00f42400 	.word	0x00f42400
 8004d24:	0001e848 	.word	0x0001e848
 8004d28:	0003d090 	.word	0x0003d090
 8004d2c:	0007a120 	.word	0x0007a120
 8004d30:	000f4240 	.word	0x000f4240
 8004d34:	00145855 	.word	0x00145855
 8004d38:	00186a00 	.word	0x00186a00
 8004d3c:	001e8480 	.word	0x001e8480
 8004d40:	0028b0aa 	.word	0x0028b0aa
 8004d44:	003d0900 	.word	0x003d0900
 8004d48:	007a1200 	.word	0x007a1200

08004d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01a      	beq.n	8004e62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4a:	d10a      	bne.n	8004e62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ea0:	f7fb ffaa 	bl	8000df8 <HAL_GetTick>
 8004ea4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d10e      	bne.n	8004ed2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f82c 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e022      	b.n	8004f18 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d10e      	bne.n	8004efe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f816 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e00c      	b.n	8004f18 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f30:	e02c      	b.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d028      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3a:	f7fb ff5d 	bl	8000df8 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d11d      	bne.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f5e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e00f      	b.n	8004fac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d0c3      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_UARTEx_DisableFifoMode+0x16>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e027      	b.n	800501a <HAL_UARTEx_DisableFifoMode+0x66>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2224      	movs	r2, #36	; 0x24
 8004fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0201 	bic.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ff8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800503a:	2302      	movs	r3, #2
 800503c:	e02d      	b.n	800509a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2224      	movs	r2, #36	; 0x24
 800504a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f850 	bl	8005120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e02d      	b.n	8005116 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2224      	movs	r2, #36	; 0x24
 80050c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f812 	bl	8005120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b089      	sub	sp, #36	; 0x24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005128:	4a2f      	ldr	r2, [pc, #188]	; (80051e8 <UARTEx_SetNbDataToProcess+0xc8>)
 800512a:	f107 0314 	add.w	r3, r7, #20
 800512e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005132:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005136:	4a2d      	ldr	r2, [pc, #180]	; (80051ec <UARTEx_SetNbDataToProcess+0xcc>)
 8005138:	f107 030c 	add.w	r3, r7, #12
 800513c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005140:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005148:	2b00      	cmp	r3, #0
 800514a:	d108      	bne.n	800515e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800515c:	e03d      	b.n	80051da <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800515e:	2308      	movs	r3, #8
 8005160:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005162:	2308      	movs	r3, #8
 8005164:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	0e5b      	lsrs	r3, r3, #25
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	0f5b      	lsrs	r3, r3, #29
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005186:	7fbb      	ldrb	r3, [r7, #30]
 8005188:	7f3a      	ldrb	r2, [r7, #28]
 800518a:	f107 0120 	add.w	r1, r7, #32
 800518e:	440a      	add	r2, r1
 8005190:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005194:	fb02 f303 	mul.w	r3, r2, r3
 8005198:	7f3a      	ldrb	r2, [r7, #28]
 800519a:	f107 0120 	add.w	r1, r7, #32
 800519e:	440a      	add	r2, r1
 80051a0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80051a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80051b0:	7ffb      	ldrb	r3, [r7, #31]
 80051b2:	7f7a      	ldrb	r2, [r7, #29]
 80051b4:	f107 0120 	add.w	r1, r7, #32
 80051b8:	440a      	add	r2, r1
 80051ba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	7f7a      	ldrb	r2, [r7, #29]
 80051c4:	f107 0120 	add.w	r1, r7, #32
 80051c8:	440a      	add	r2, r1
 80051ca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80051ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80051da:	bf00      	nop
 80051dc:	3724      	adds	r7, #36	; 0x24
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	08008bbc 	.word	0x08008bbc
 80051ec:	08008bc4 	.word	0x08008bc4

080051f0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
 
if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80051f4:	4907      	ldr	r1, [pc, #28]	; (8005214 <MX_FATFS_Init+0x24>)
 80051f6:	4808      	ldr	r0, [pc, #32]	; (8005218 <MX_FATFS_Init+0x28>)
 80051f8:	f003 fc8c 	bl	8008b14 <FATFS_LinkDriver>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295
 8005206:	e003      	b.n	8005210 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <MX_FATFS_Init+0x2c>)
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800520e:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8005210:	4618      	mov	r0, r3
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000304 	.word	0x20000304
 8005218:	20000010 	.word	0x20000010
 800521c:	20000041 	.word	0x20000041

08005220 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005224:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8005226:	4618      	mov	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <MY_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t MY_SD_Init(uint32_t Instance)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <MY_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005242:	f06f 0301 	mvn.w	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e010      	b.n	800526c <MY_SD_Init+0x3c>
  } /* Configure IO functionalities for SD pin */
  else if(SD_IO_Init() != BSP_ERROR_NONE)
 800524a:	f000 fa9b 	bl	8005784 <SD_IO_Init>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <MY_SD_Init+0x2c>
  {
    ret = BSP_ERROR_NO_INIT;
 8005254:	f04f 33ff 	mov.w	r3, #4294967295
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	e007      	b.n	800526c <MY_SD_Init+0x3c>
  }
  else
  {
    /* SD initialized and set to SPI mode properly */
    if(SD_GoIdleState() != BSP_ERROR_NONE)
 800525c:	f000 ff74 	bl	8006148 <SD_GoIdleState>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <MY_SD_Init+0x3c>
    {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005266:	f06f 0305 	mvn.w	r3, #5
 800526a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800526c:	68fb      	ldr	r3, [r7, #12]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <MY_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t MY_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	61bb      	str	r3, [r7, #24]
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <MY_SD_ReadBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005294:	f06f 0301 	mvn.w	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	e0b2      	b.n	8005402 <MY_SD_ReadBlocks+0x18a>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800529c:	2300      	movs	r3, #0
 800529e:	22ff      	movs	r2, #255	; 0xff
 80052a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052a4:	2010      	movs	r0, #16
 80052a6:	f000 fdd1 	bl	8005e4c <SD_SendCmd>
 80052aa:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 80052ac:	2001      	movs	r0, #1
 80052ae:	f000 fab5 	bl	800581c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80052b2:	f107 0313 	add.w	r3, r7, #19
 80052b6:	2101      	movs	r1, #1
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 f915 	bl	80064e8 <BSP_SPI2_Send>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <MY_SD_ReadBlocks+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80052c4:	f06f 0303 	mvn.w	r3, #3
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	e09a      	b.n	8005402 <MY_SD_ReadBlocks+0x18a>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00e      	beq.n	80052f2 <MY_SD_ReadBlocks+0x7a>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 80052d4:	2001      	movs	r0, #1
 80052d6:	f000 faa1 	bl	800581c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80052da:	f107 0313 	add.w	r3, r7, #19
 80052de:	2101      	movs	r1, #1
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 f901 	bl	80064e8 <BSP_SPI2_Send>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <MY_SD_ReadBlocks+0x7a>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80052ec:	f06f 0303 	mvn.w	r3, #3
 80052f0:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 8084 	bne.w	8005402 <MY_SD_ReadBlocks+0x18a>
        /* Data transfer */
        do
        {
          /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
          /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U: MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	441a      	add	r2, r3
 8005300:	4b42      	ldr	r3, [pc, #264]	; (800540c <MY_SD_ReadBlocks+0x194>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <MY_SD_ReadBlocks+0x94>
 8005308:	2301      	movs	r3, #1
 800530a:	e001      	b.n	8005310 <MY_SD_ReadBlocks+0x98>
 800530c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005310:	fb02 f103 	mul.w	r1, r2, r3
 8005314:	2300      	movs	r3, #0
 8005316:	22ff      	movs	r2, #255	; 0xff
 8005318:	2011      	movs	r0, #17
 800531a:	f000 fd97 	bl	8005e4c <SD_SendCmd>
 800531e:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00f      	beq.n	8005348 <MY_SD_ReadBlocks+0xd0>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8005328:	2001      	movs	r0, #1
 800532a:	f000 fa77 	bl	800581c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800532e:	f107 0313 	add.w	r3, r7, #19
 8005332:	2101      	movs	r1, #1
 8005334:	4618      	mov	r0, r3
 8005336:	f001 f8d7 	bl	80064e8 <BSP_SPI2_Send>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <MY_SD_ReadBlocks+0xd0>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8005340:	f06f 0303 	mvn.w	r3, #3
 8005344:	61fb      	str	r3, [r7, #28]
              break;
 8005346:	e05c      	b.n	8005402 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* Now look for the data token to signify the start of the data */
          if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8005348:	20fe      	movs	r0, #254	; 0xfe
 800534a:	f001 f83b 	bl	80063c4 <SD_WaitData>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d12f      	bne.n	80053b4 <MY_SD_ReadBlocks+0x13c>
          {
            /* Read the SD block data : read NumByteToRead data */
            if(BUS_SPIx_Recv((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	4413      	add	r3, r2
 800535a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800535e:	4618      	mov	r0, r3
 8005360:	f001 f8de 	bl	8006520 <BSP_SPI2_Recv>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <MY_SD_ReadBlocks+0xfa>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 800536a:	f06f 0303 	mvn.w	r3, #3
 800536e:	61fb      	str	r3, [r7, #28]
              break;
 8005370:	e047      	b.n	8005402 <MY_SD_ReadBlocks+0x18a>
            }

            /* Set next read address*/
            offset += MY_SD_BLOCK_SIZE;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005378:	61bb      	str	r3, [r7, #24]
            BlocksNbr--;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	3b01      	subs	r3, #1
 800537e:	603b      	str	r3, [r7, #0]

            /* get CRC bytes (not really needed by us, but required by SD) */
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005380:	f107 0313 	add.w	r3, r7, #19
 8005384:	2101      	movs	r1, #1
 8005386:	4618      	mov	r0, r3
 8005388:	f001 f8ae 	bl	80064e8 <BSP_SPI2_Send>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <MY_SD_ReadBlocks+0x122>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8005392:	f06f 0303 	mvn.w	r3, #3
 8005396:	61fb      	str	r3, [r7, #28]
              break;
 8005398:	e033      	b.n	8005402 <MY_SD_ReadBlocks+0x18a>
            }
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800539a:	f107 0313 	add.w	r3, r7, #19
 800539e:	2101      	movs	r1, #1
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 f8a1 	bl	80064e8 <BSP_SPI2_Send>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d013      	beq.n	80053d4 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80053ac:	f06f 0303 	mvn.w	r3, #3
 80053b0:	61fb      	str	r3, [r7, #28]
              break;
 80053b2:	e026      	b.n	8005402 <MY_SD_ReadBlocks+0x18a>
            }
          }
          else
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 80053b4:	2001      	movs	r0, #1
 80053b6:	f000 fa31 	bl	800581c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80053ba:	f107 0313 	add.w	r3, r7, #19
 80053be:	2101      	movs	r1, #1
 80053c0:	4618      	mov	r0, r3
 80053c2:	f001 f891 	bl	80064e8 <BSP_SPI2_Send>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80053cc:	f06f 0303 	mvn.w	r3, #3
 80053d0:	61fb      	str	r3, [r7, #28]
              break;
 80053d2:	e016      	b.n	8005402 <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* End the command data read cycle */
          SD_IO_CSState(1);
 80053d4:	2001      	movs	r0, #1
 80053d6:	f000 fa21 	bl	800581c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80053da:	f107 0313 	add.w	r3, r7, #19
 80053de:	2101      	movs	r1, #1
 80053e0:	4618      	mov	r0, r3
 80053e2:	f001 f881 	bl	80064e8 <BSP_SPI2_Send>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <MY_SD_ReadBlocks+0x17c>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80053ec:	f06f 0303 	mvn.w	r3, #3
 80053f0:	61fb      	str	r3, [r7, #28]
            break;
 80053f2:	e006      	b.n	8005402 <MY_SD_ReadBlocks+0x18a>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <MY_SD_ReadBlocks+0x18a>
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f43f af7c 	beq.w	80052fa <MY_SD_ReadBlocks+0x82>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8005402:	69fb      	ldr	r3, [r7, #28]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3720      	adds	r7, #32
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000044 	.word	0x20000044

08005410 <MY_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t MY_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
  uint8_t tmp, data_response;

  if(Instance >= SD_INSTANCES_NBR)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <MY_SD_WriteBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800542c:	f06f 0301 	mvn.w	r3, #1
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	e0e8      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8005434:	2300      	movs	r3, #0
 8005436:	22ff      	movs	r2, #255	; 0xff
 8005438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800543c:	2010      	movs	r0, #16
 800543e:	f000 fd05 	bl	8005e4c <SD_SendCmd>
 8005442:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 8005444:	2001      	movs	r0, #1
 8005446:	f000 f9e9 	bl	800581c <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 800544a:	23ff      	movs	r3, #255	; 0xff
 800544c:	74fb      	strb	r3, [r7, #19]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800544e:	f107 0313 	add.w	r3, r7, #19
 8005452:	2101      	movs	r1, #1
 8005454:	4618      	mov	r0, r3
 8005456:	f001 f847 	bl	80064e8 <BSP_SPI2_Send>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <MY_SD_WriteBlocks+0x58>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005460:	f06f 0303 	mvn.w	r3, #3
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	e0ce      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00e      	beq.n	800548e <MY_SD_WriteBlocks+0x7e>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 8005470:	2001      	movs	r0, #1
 8005472:	f000 f9d3 	bl	800581c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005476:	f107 0313 	add.w	r3, r7, #19
 800547a:	2101      	movs	r1, #1
 800547c:	4618      	mov	r0, r3
 800547e:	f001 f833 	bl	80064e8 <BSP_SPI2_Send>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <MY_SD_WriteBlocks+0x7e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005488:	f06f 0303 	mvn.w	r3, #3
 800548c:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	2b00      	cmp	r3, #0
 8005492:	f040 80b8 	bne.w	8005606 <MY_SD_WriteBlocks+0x1f6>
        /* Data transfer */
        do
        {
          /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
          Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U : MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	441a      	add	r2, r3
 800549c:	4b5c      	ldr	r3, [pc, #368]	; (8005610 <MY_SD_WriteBlocks+0x200>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <MY_SD_WriteBlocks+0x98>
 80054a4:	2301      	movs	r3, #1
 80054a6:	e001      	b.n	80054ac <MY_SD_WriteBlocks+0x9c>
 80054a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ac:	fb02 f103 	mul.w	r1, r2, r3
 80054b0:	2300      	movs	r3, #0
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	2018      	movs	r0, #24
 80054b6:	f000 fcc9 	bl	8005e4c <SD_SendCmd>
 80054ba:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00f      	beq.n	80054e4 <MY_SD_WriteBlocks+0xd4>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 80054c4:	2001      	movs	r0, #1
 80054c6:	f000 f9a9 	bl	800581c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80054ca:	f107 0313 	add.w	r3, r7, #19
 80054ce:	2101      	movs	r1, #1
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 f809 	bl	80064e8 <BSP_SPI2_Send>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <MY_SD_WriteBlocks+0xd4>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80054dc:	f06f 0303 	mvn.w	r3, #3
 80054e0:	61fb      	str	r3, [r7, #28]
              break;
 80054e2:	e090      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          /* Send dummy byte for NWR timing : one byte between CMDWRITE and TOKEN */
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80054e4:	f107 0313 	add.w	r3, r7, #19
 80054e8:	2101      	movs	r1, #1
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fffc 	bl	80064e8 <BSP_SPI2_Send>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <MY_SD_WriteBlocks+0xee>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80054f6:	f06f 0303 	mvn.w	r3, #3
 80054fa:	61fb      	str	r3, [r7, #28]
            break;
 80054fc:	e083      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80054fe:	f107 0313 	add.w	r3, r7, #19
 8005502:	2101      	movs	r1, #1
 8005504:	4618      	mov	r0, r3
 8005506:	f000 ffef 	bl	80064e8 <BSP_SPI2_Send>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <MY_SD_WriteBlocks+0x108>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005510:	f06f 0303 	mvn.w	r3, #3
 8005514:	61fb      	str	r3, [r7, #28]
            break;
 8005516:	e076      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Send the data token to signify the start of the data */
          tmp = SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE;
 8005518:	23fe      	movs	r3, #254	; 0xfe
 800551a:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800551c:	f107 0313 	add.w	r3, r7, #19
 8005520:	2101      	movs	r1, #1
 8005522:	4618      	mov	r0, r3
 8005524:	f000 ffe0 	bl	80064e8 <BSP_SPI2_Send>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <MY_SD_WriteBlocks+0x126>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 800552e:	f06f 0303 	mvn.w	r3, #3
 8005532:	61fb      	str	r3, [r7, #28]
            break;
 8005534:	e067      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Write the block data to SD */
          if(BUS_SPIx_Send((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	4413      	add	r3, r2
 800553c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005540:	4618      	mov	r0, r3
 8005542:	f000 ffd1 	bl	80064e8 <BSP_SPI2_Send>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <MY_SD_WriteBlocks+0x144>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 800554c:	f06f 0303 	mvn.w	r3, #3
 8005550:	61fb      	str	r3, [r7, #28]
            break;
 8005552:	e058      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Set next write address */
          offset += MY_SD_BLOCK_SIZE;
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800555a:	61bb      	str	r3, [r7, #24]
          BlocksNbr--;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	3b01      	subs	r3, #1
 8005560:	603b      	str	r3, [r7, #0]

          /* get CRC bytes (not really needed by us, but required by SD) */
          tmp = SD_DUMMY_BYTE;
 8005562:	23ff      	movs	r3, #255	; 0xff
 8005564:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005566:	f107 0313 	add.w	r3, r7, #19
 800556a:	2101      	movs	r1, #1
 800556c:	4618      	mov	r0, r3
 800556e:	f000 ffbb 	bl	80064e8 <BSP_SPI2_Send>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <MY_SD_WriteBlocks+0x170>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005578:	f06f 0303 	mvn.w	r3, #3
 800557c:	61fb      	str	r3, [r7, #28]
            break;
 800557e:	e042      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005580:	f107 0313 	add.w	r3, r7, #19
 8005584:	2101      	movs	r1, #1
 8005586:	4618      	mov	r0, r3
 8005588:	f000 ffae 	bl	80064e8 <BSP_SPI2_Send>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <MY_SD_WriteBlocks+0x18a>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005592:	f06f 0303 	mvn.w	r3, #3
 8005596:	61fb      	str	r3, [r7, #28]
            break;
 8005598:	e035      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
          }

          /* Read data response */
          if(SD_GetDataResponse(&data_response) != BSP_ERROR_NONE)
 800559a:	f107 0312 	add.w	r3, r7, #18
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fd6c 	bl	800607c <SD_GetDataResponse>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <MY_SD_WriteBlocks+0x1a2>
          {
            ret = BSP_ERROR_UNKNOWN_FAILURE;
 80055aa:	f06f 0305 	mvn.w	r3, #5
 80055ae:	61fb      	str	r3, [r7, #28]
            break;
 80055b0:	e029      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
          }

          if (data_response != (uint8_t)SD_DATA_OK)
 80055b2:	7cbb      	ldrb	r3, [r7, #18]
 80055b4:	2b05      	cmp	r3, #5
 80055b6:	d00f      	beq.n	80055d8 <MY_SD_WriteBlocks+0x1c8>
          {
            /* Set response value to failure */
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 80055b8:	2001      	movs	r0, #1
 80055ba:	f000 f92f 	bl	800581c <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80055be:	f107 0313 	add.w	r3, r7, #19
 80055c2:	2101      	movs	r1, #1
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 ff8f 	bl	80064e8 <BSP_SPI2_Send>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <MY_SD_WriteBlocks+0x1c8>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80055d0:	f06f 0303 	mvn.w	r3, #3
 80055d4:	61fb      	str	r3, [r7, #28]
              break;
 80055d6:	e016      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
            }
          }

          SD_IO_CSState(1);
 80055d8:	2001      	movs	r0, #1
 80055da:	f000 f91f 	bl	800581c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80055de:	f107 0313 	add.w	r3, r7, #19
 80055e2:	2101      	movs	r1, #1
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 ff7f 	bl	80064e8 <BSP_SPI2_Send>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <MY_SD_WriteBlocks+0x1e8>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80055f0:	f06f 0303 	mvn.w	r3, #3
 80055f4:	61fb      	str	r3, [r7, #28]
            break;
 80055f6:	e006      	b.n	8005606 <MY_SD_WriteBlocks+0x1f6>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <MY_SD_WriteBlocks+0x1f6>
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f43f af48 	beq.w	8005496 <MY_SD_WriteBlocks+0x86>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8005606:	69fb      	ldr	r3, [r7, #28]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20000044 	.word	0x20000044

08005614 <MY_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t MY_SD_GetCardState(uint32_t Instance)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint32_t response;
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <MY_SD_GetCardState+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005622:	f06f 0301 	mvn.w	r3, #1
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e026      	b.n	8005678 <MY_SD_GetCardState+0x64>
  }
  else
  {
    /* Send CMD13 (SD_SEND_STATUS) to get SD status */
    response = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, (uint8_t)SD_ANSWER_R2_EXPECTED);
 800562a:	2302      	movs	r3, #2
 800562c:	22ff      	movs	r2, #255	; 0xff
 800562e:	2100      	movs	r1, #0
 8005630:	200d      	movs	r0, #13
 8005632:	f000 fc0b 	bl	8005e4c <SD_SendCmd>
 8005636:	6138      	str	r0, [r7, #16]
    SD_IO_CSState(1);
 8005638:	2001      	movs	r0, #1
 800563a:	f000 f8ef 	bl	800581c <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 800563e:	23ff      	movs	r3, #255	; 0xff
 8005640:	73fb      	strb	r3, [r7, #15]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005642:	f107 030f 	add.w	r3, r7, #15
 8005646:	2101      	movs	r1, #1
 8005648:	4618      	mov	r0, r3
 800564a:	f000 ff4d 	bl	80064e8 <BSP_SPI2_Send>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <MY_SD_GetCardState+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005654:	f06f 0303 	mvn.w	r3, #3
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	e00d      	b.n	8005678 <MY_SD_GetCardState+0x64>
    }/* Find SD status according to card state */
    else if(((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR) && ((uint8_t)((response & 0xFF00UL) >> 8) == (uint8_t)SD_R2_NO_ERROR))
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d107      	bne.n	8005674 <MY_SD_GetCardState+0x60>
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d102      	bne.n	8005674 <MY_SD_GetCardState+0x60>
    {
      ret = (int32_t)SD_TRANSFER_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e001      	b.n	8005678 <MY_SD_GetCardState+0x64>
    }
    else
    {
      //ret = (int32_t)SD_TRANSFER_BUSY;
      ret = (int32_t)SD_TRANSFER_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return Status */
  return ret;
 8005678:	697b      	ldr	r3, [r7, #20]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <MY_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
int32_t MY_SD_GetCardInfo(uint32_t Instance, MY_SD_CardInfo_t *CardInfo)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <MY_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005698:	f06f 0301 	mvn.w	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	e069      	b.n	8005774 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCSDRegister(&(CardInfo->Csd)) != BSP_ERROR_NONE)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f8d2 	bl	800584c <SD_GetCSDRegister>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <MY_SD_GetCardInfo+0x32>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80056ae:	f06f 0305 	mvn.w	r3, #5
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e05e      	b.n	8005774 <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCIDRegister(&(CardInfo->Cid)) != BSP_ERROR_NONE)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 faf4 	bl	8005ca8 <SD_GetCIDRegister>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <MY_SD_GetCardInfo+0x4a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80056c6:	f06f 0305 	mvn.w	r3, #5
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	e052      	b.n	8005774 <MY_SD_GetCardInfo+0xf0>
  }
  else if(CardType == MY_CARD_SDHC)
 80056ce:	4b2c      	ldr	r3, [pc, #176]	; (8005780 <MY_SD_GetCardInfo+0xfc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d11c      	bne.n	8005710 <MY_SD_GetCardInfo+0x8c>
  {
    CardInfo->LogBlockSize = 512U;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056dc:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = 512U;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e4:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity = (CardInfo->Csd.version.v2.DeviceSize + 1U) * 1024U * CardInfo->LogBlockSize;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f3c3 1395 	ubfx	r3, r3, #6, #22
 80056ee:	3301      	adds	r3, #1
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056f4:	fb02 f303 	mul.w	r3, r2, r3
 80056f8:	029a      	lsls	r2, r3, #10
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005706:	fbb2 f2f3 	udiv	r2, r2, r3
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	645a      	str	r2, [r3, #68]	; 0x44
 800570e:	e031      	b.n	8005774 <MY_SD_GetCardInfo+0xf0>
  }
  else
  {
    CardInfo->CardCapacity = ((uint32_t)CardInfo->Csd.version.v1.DeviceSize + 1U) ;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	891b      	ldrh	r3, [r3, #8]
 8005714:	f3c3 038b 	ubfx	r3, r3, #2, #12
 8005718:	b29b      	uxth	r3, r3
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->CardCapacity *= (1UL << (CardInfo->Csd.version.v1.DeviceSizeMul + 2U));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	7adb      	ldrb	r3, [r3, #11]
 8005728:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800572c:	b2db      	uxtb	r3, r3
 800572e:	3302      	adds	r3, #2
 8005730:	409a      	lsls	r2, r3
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockSize = 512U;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800573c:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = (1UL << (uint32_t)CardInfo->Csd.RdBlockLen);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	795b      	ldrb	r3, [r3, #5]
 8005742:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005746:	b2db      	uxtb	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	2301      	movs	r3, #1
 800574c:	fa03 f202 	lsl.w	r2, r3, r2
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity *= CardInfo->CardBlockSize;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800575c:	fb02 f203 	mul.w	r2, r2, r3
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800576c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return ret;
 8005774:	68fb      	ldr	r3, [r7, #12]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000044 	.word	0x20000044

08005784 <SD_IO_Init>:
  * @brief  Initializes the SD Card and put it into StandBy State (Ready for
  *         data transfer).
  * @retval BSP status
  */
static int32_t SD_IO_Init(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
  uint8_t counter = 0, tmp;
 800578e:	2300      	movs	r3, #0
 8005790:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* SD_CS_GPIO Periph clock enable */
  MY_SD_CS_GPIO_CLK_ENABLE();
 8005792:	4b20      	ldr	r3, [pc, #128]	; (8005814 <SD_IO_Init+0x90>)
 8005794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005796:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <SD_IO_Init+0x90>)
 8005798:	f043 0302 	orr.w	r3, r3, #2
 800579c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800579e:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <SD_IO_Init+0x90>)
 80057a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  GPIO_InitStruct.Pin   = MY_SD_CS_PIN;
 80057aa:	2304      	movs	r3, #4
 80057ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80057ae:	2301      	movs	r3, #1
 80057b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80057b2:	2301      	movs	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80057b6:	2302      	movs	r3, #2
 80057b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MY_SD_CS_GPIO_PORT, &GPIO_InitStruct);
 80057ba:	1d3b      	adds	r3, r7, #4
 80057bc:	4619      	mov	r1, r3
 80057be:	4816      	ldr	r0, [pc, #88]	; (8005818 <SD_IO_Init+0x94>)
 80057c0:	f7fb ffec 	bl	800179c <HAL_GPIO_Init>

  /*------------Put SD in SPI mode--------------*/
  /* SD SPI Config */
  if(BUS_SPIx_Init() != BSP_ERROR_NONE)
 80057c4:	f000 fe40 	bl	8006448 <BSP_SPI2_Init>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <SD_IO_Init+0x52>
  {
    ret = BSP_ERROR_NO_INIT;
 80057ce:	f04f 33ff 	mov.w	r3, #4294967295
 80057d2:	61fb      	str	r3, [r7, #28]
 80057d4:	e019      	b.n	800580a <SD_IO_Init+0x86>
  }
  else
  {
    /* SD chip select high */
    MY_SD_CS_HIGH();
 80057d6:	2201      	movs	r2, #1
 80057d8:	2104      	movs	r1, #4
 80057da:	480f      	ldr	r0, [pc, #60]	; (8005818 <SD_IO_Init+0x94>)
 80057dc:	f7fc f960 	bl	8001aa0 <HAL_GPIO_WritePin>

    /* Send dummy byte 0xFF, 10 times with CS high */
    /* Rise CS and MOSI for 80 clocks cycles */
    tmp = SD_DUMMY_BYTE;
 80057e0:	23ff      	movs	r3, #255	; 0xff
 80057e2:	76bb      	strb	r3, [r7, #26]

    do
    {
      /* Send dummy byte 0xFF */
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80057e4:	f107 031a 	add.w	r3, r7, #26
 80057e8:	2101      	movs	r1, #1
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fe7c 	bl	80064e8 <BSP_SPI2_Send>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <SD_IO_Init+0x7a>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80057f6:	f06f 0303 	mvn.w	r3, #3
 80057fa:	61fb      	str	r3, [r7, #28]
        break;
 80057fc:	e005      	b.n	800580a <SD_IO_Init+0x86>
      }
      counter++;
 80057fe:	7efb      	ldrb	r3, [r7, #27]
 8005800:	3301      	adds	r3, #1
 8005802:	76fb      	strb	r3, [r7, #27]
    }while(counter <= 9U);
 8005804:	7efb      	ldrb	r3, [r7, #27]
 8005806:	2b09      	cmp	r3, #9
 8005808:	d9ec      	bls.n	80057e4 <SD_IO_Init+0x60>
  }

  return ret;
 800580a:	69fb      	ldr	r3, [r7, #28]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3720      	adds	r7, #32
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40021000 	.word	0x40021000
 8005818:	48000400 	.word	0x48000400

0800581c <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  Value pin's value.
  * @retval None
  */
static void SD_IO_CSState(uint32_t Value)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  if(Value == 1U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d105      	bne.n	8005836 <SD_IO_CSState+0x1a>
  {
    MY_SD_CS_HIGH();
 800582a:	2201      	movs	r2, #1
 800582c:	2104      	movs	r1, #4
 800582e:	4806      	ldr	r0, [pc, #24]	; (8005848 <SD_IO_CSState+0x2c>)
 8005830:	f7fc f936 	bl	8001aa0 <HAL_GPIO_WritePin>
  }
  else
  {
    MY_SD_CS_LOW();
  }
}
 8005834:	e004      	b.n	8005840 <SD_IO_CSState+0x24>
    MY_SD_CS_LOW();
 8005836:	2200      	movs	r2, #0
 8005838:	2104      	movs	r1, #4
 800583a:	4803      	ldr	r0, [pc, #12]	; (8005848 <SD_IO_CSState+0x2c>)
 800583c:	f7fc f930 	bl	8001aa0 <HAL_GPIO_WritePin>
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	48000400 	.word	0x48000400

0800584c <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd pointer on an SCD register structure
  * @retval SD status
  */
static int32_t SD_GetCSDRegister(SD_CardSpecificData_t* Csd)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b096      	sub	sp, #88	; 0x58
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005854:	2300      	movs	r3, #0
 8005856:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t CSD_Tab[16];
  uint32_t response;
  uint8_t tmp;

  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8005858:	2300      	movs	r3, #0
 800585a:	22ff      	movs	r2, #255	; 0xff
 800585c:	2100      	movs	r1, #0
 800585e:	2009      	movs	r0, #9
 8005860:	f000 faf4 	bl	8005e4c <SD_SendCmd>
 8005864:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8005866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	f040 8202 	bne.w	8005c74 <SD_GetCSDRegister+0x428>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8005870:	20fe      	movs	r0, #254	; 0xfe
 8005872:	f000 fda7 	bl	80063c4 <SD_WaitData>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	f040 81fe 	bne.w	8005c7a <SD_GetCSDRegister+0x42e>
    {
      tmp = SD_DUMMY_BYTE;
 800587e:	23ff      	movs	r3, #255	; 0xff
 8005880:	72fb      	strb	r3, [r7, #11]
      for (counter = 0U; counter < 16U; counter++)
 8005882:	2300      	movs	r3, #0
 8005884:	653b      	str	r3, [r7, #80]	; 0x50
 8005886:	e014      	b.n	80058b2 <SD_GetCSDRegister+0x66>
      {
        /* Store CSD register value on CSD_Tab */
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CSD_Tab[counter], 1U) != BSP_ERROR_NONE)
 8005888:	f107 020c 	add.w	r2, r7, #12
 800588c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	18d1      	adds	r1, r2, r3
 8005892:	f107 030b 	add.w	r3, r7, #11
 8005896:	2201      	movs	r2, #1
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fe5d 	bl	8006558 <BSP_SPI2_SendRecv>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <SD_GetCSDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80058a4:	f06f 0303 	mvn.w	r3, #3
 80058a8:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 80058aa:	e005      	b.n	80058b8 <SD_GetCSDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 80058ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ae:	3301      	adds	r3, #1
 80058b0:	653b      	str	r3, [r7, #80]	; 0x50
 80058b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b4:	2b0f      	cmp	r3, #15
 80058b6:	d9e7      	bls.n	8005888 <SD_GetCSDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 80058b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f040 81dd 	bne.w	8005c7a <SD_GetCSDRegister+0x42e>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80058c0:	f107 030b 	add.w	r3, r7, #11
 80058c4:	2101      	movs	r1, #1
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fe0e 	bl	80064e8 <BSP_SPI2_Send>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <SD_GetCSDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80058d2:	f06f 0303 	mvn.w	r3, #3
 80058d6:	657b      	str	r3, [r7, #84]	; 0x54
 80058d8:	e1cf      	b.n	8005c7a <SD_GetCSDRegister+0x42e>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80058da:	f107 030b 	add.w	r3, r7, #11
 80058de:	2101      	movs	r1, #1
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fe01 	bl	80064e8 <BSP_SPI2_Send>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <SD_GetCSDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80058ec:	f06f 0303 	mvn.w	r3, #3
 80058f0:	657b      	str	r3, [r7, #84]	; 0x54
 80058f2:	e1c2      	b.n	8005c7a <SD_GetCSDRegister+0x42e>
          /*************************************************************************
          CSD header decoding
          *************************************************************************/

          /* Byte 0 */
          Csd->CSDStruct = (CSD_Tab[0] & 0xC0U) >> 6U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	099b      	lsrs	r3, r3, #6
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	b2d9      	uxtb	r1, r3
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	7813      	ldrb	r3, [r2, #0]
 8005902:	f361 0301 	bfi	r3, r1, #0, #2
 8005906:	7013      	strb	r3, [r2, #0]
          Csd->Reserved1 =  CSD_Tab[0] & 0x3FU;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800590e:	b2d9      	uxtb	r1, r3
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	7813      	ldrb	r3, [r2, #0]
 8005914:	f361 0387 	bfi	r3, r1, #2, #6
 8005918:	7013      	strb	r3, [r2, #0]

          /* Byte 1 */
          Csd->TAAC = CSD_Tab[1];
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	b2da      	uxtb	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	705a      	strb	r2, [r3, #1]

          /* Byte 2 */
          Csd->NSAC = CSD_Tab[2];
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	709a      	strb	r2, [r3, #2]

          /* Byte 3 */
          Csd->MaxBusClkFrec = CSD_Tab[3];
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	b2da      	uxtb	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	70da      	strb	r2, [r3, #3]

          /* Byte 4/5 */
          Csd->CardComdClasses = (uint16_t)(((uint16_t)CSD_Tab[4] << 4U) | ((uint16_t)(CSD_Tab[5] & 0xF0U) >> 4U));
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	b29b      	uxth	r3, r3
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	b21a      	sxth	r2, r3
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	b29b      	uxth	r3, r3
 800593e:	111b      	asrs	r3, r3, #4
 8005940:	b21b      	sxth	r3, r3
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	b21b      	sxth	r3, r3
 8005948:	4313      	orrs	r3, r2
 800594a:	b21b      	sxth	r3, r3
 800594c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005950:	b299      	uxth	r1, r3
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	8893      	ldrh	r3, [r2, #4]
 8005956:	f361 030b 	bfi	r3, r1, #0, #12
 800595a:	8093      	strh	r3, [r2, #4]
          Csd->RdBlockLen = CSD_Tab[5] & 0x0FU;
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	b2d9      	uxtb	r1, r3
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	7953      	ldrb	r3, [r2, #5]
 8005968:	f361 1307 	bfi	r3, r1, #4, #4
 800596c:	7153      	strb	r3, [r2, #5]

          /* Byte 6 */
          Csd->PartBlockRead   = (CSD_Tab[6] & 0x80U) >> 7U;
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	09db      	lsrs	r3, r3, #7
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	b2d9      	uxtb	r1, r3
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	7993      	ldrb	r3, [r2, #6]
 800597c:	f361 0300 	bfi	r3, r1, #0, #1
 8005980:	7193      	strb	r3, [r2, #6]
          Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40U) >> 6U;
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	099b      	lsrs	r3, r3, #6
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	b2d9      	uxtb	r1, r3
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	7993      	ldrb	r3, [r2, #6]
 8005990:	f361 0341 	bfi	r3, r1, #1, #1
 8005994:	7193      	strb	r3, [r2, #6]
          Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20U) >> 5U;
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	b2d9      	uxtb	r1, r3
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	7993      	ldrb	r3, [r2, #6]
 80059a4:	f361 0382 	bfi	r3, r1, #2, #1
 80059a8:	7193      	strb	r3, [r2, #6]
          Csd->DSRImpl         = (CSD_Tab[6] & 0x10U) >> 4U;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	b2d9      	uxtb	r1, r3
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	7993      	ldrb	r3, [r2, #6]
 80059b8:	f361 03c3 	bfi	r3, r1, #3, #1
 80059bc:	7193      	strb	r3, [r2, #6]

          /*************************************************************************
          CSD v1/v2 decoding
          *************************************************************************/

          if(CardType == MY_CARD_SDSC)
 80059be:	4bac      	ldr	r3, [pc, #688]	; (8005c70 <SD_GetCSDRegister+0x424>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d165      	bne.n	8005a92 <SD_GetCSDRegister+0x246>
          {
            Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0CU) >> 2U);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	089b      	lsrs	r3, r3, #2
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	b2d9      	uxtb	r1, r3
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	7a13      	ldrb	r3, [r2, #8]
 80059d4:	f361 0301 	bfi	r3, r1, #0, #2
 80059d8:	7213      	strb	r3, [r2, #8]

            Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03U) << 10U) | (CSD_Tab[7] << 2U) | ((CSD_Tab[8] & 0xC0U) >> 6U);
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	b29b      	uxth	r3, r3
 80059de:	029b      	lsls	r3, r3, #10
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	4313      	orrs	r3, r2
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	099b      	lsrs	r3, r3, #6
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	4313      	orrs	r3, r2
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a08:	b299      	uxth	r1, r3
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	8913      	ldrh	r3, [r2, #8]
 8005a0e:	f361 038d 	bfi	r3, r1, #2, #12
 8005a12:	8113      	strh	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38U) >> 3U;
 8005a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a16:	08db      	lsrs	r3, r3, #3
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	b2d9      	uxtb	r1, r3
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6893      	ldr	r3, [r2, #8]
 8005a22:	f361 3390 	bfi	r3, r1, #14, #3
 8005a26:	6093      	str	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07U);
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	b2d9      	uxtb	r1, r3
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	7a93      	ldrb	r3, [r2, #10]
 8005a34:	f361 0343 	bfi	r3, r1, #1, #3
 8005a38:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0U) >> 5U;
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	b2d9      	uxtb	r1, r3
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	7a93      	ldrb	r3, [r2, #10]
 8005a48:	f361 1306 	bfi	r3, r1, #4, #3
 8005a4c:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1CU) >> 2U;
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	089b      	lsrs	r3, r3, #2
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	b2d9      	uxtb	r1, r3
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	8953      	ldrh	r3, [r2, #10]
 8005a5c:	f361 13c9 	bfi	r3, r1, #7, #3
 8005a60:	8153      	strh	r3, [r2, #10]
            Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03U) << 1U) | ((CSD_Tab[10] & 0x80U) >> 7U);
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f003 0306 	and.w	r3, r3, #6
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a72:	09db      	lsrs	r3, r3, #7
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	b2d9      	uxtb	r1, r3
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	7ad3      	ldrb	r3, [r2, #11]
 8005a8a:	f361 0384 	bfi	r3, r1, #2, #3
 8005a8e:	72d3      	strb	r3, [r2, #11]
 8005a90:	e02b      	b.n	8005aea <SD_GetCSDRegister+0x29e>
          }
          else
          {
            Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0FU) << 2U) | ((CSD_Tab[7] & 0xC0U) >> 6U);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	099b      	lsrs	r3, r3, #6
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	4313      	orrs	r3, r2
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ab4:	b2d9      	uxtb	r1, r3
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	7a13      	ldrb	r3, [r2, #8]
 8005aba:	f361 0305 	bfi	r3, r1, #0, #6
 8005abe:	7213      	strb	r3, [r2, #8]
            Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3FU) << 16U) | (CSD_Tab[8] << 8U) | CSD_Tab[9];
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	431a      	orrs	r2, r3
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f3c3 0115 	ubfx	r1, r3, #0, #22
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6893      	ldr	r3, [r2, #8]
 8005ada:	f361 139b 	bfi	r3, r1, #6, #22
 8005ade:	6093      	str	r3, [r2, #8]
            Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80U) >> 8U);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	7ad3      	ldrb	r3, [r2, #11]
 8005ae4:	f36f 1304 	bfc	r3, #4, #1
 8005ae8:	72d3      	strb	r3, [r2, #11]
          }

          Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40U) >> 6U;
 8005aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aec:	099b      	lsrs	r3, r3, #6
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	b2d9      	uxtb	r1, r3
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	7b13      	ldrb	r3, [r2, #12]
 8005af8:	f361 0300 	bfi	r3, r1, #0, #1
 8005afc:	7313      	strb	r3, [r2, #12]
          Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3FU) << 1U) | ((CSD_Tab[11] & 0x80U) >> 7U);
 8005afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	09db      	lsrs	r3, r3, #7
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b20:	b2d9      	uxtb	r1, r3
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	7b13      	ldrb	r3, [r2, #12]
 8005b26:	f361 0347 	bfi	r3, r1, #1, #7
 8005b2a:	7313      	strb	r3, [r2, #12]
          Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7FU);
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b32:	b2d9      	uxtb	r1, r3
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	7b53      	ldrb	r3, [r2, #13]
 8005b38:	f361 0306 	bfi	r3, r1, #0, #7
 8005b3c:	7353      	strb	r3, [r2, #13]
          Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80U) >> 7U;
 8005b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b40:	09db      	lsrs	r3, r3, #7
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	b2d9      	uxtb	r1, r3
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	7b53      	ldrb	r3, [r2, #13]
 8005b4c:	f361 13c7 	bfi	r3, r1, #7, #1
 8005b50:	7353      	strb	r3, [r2, #13]
          Csd->Reserved2         = (CSD_Tab[12] & 0x60U) >> 5U;
 8005b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b54:	095b      	lsrs	r3, r3, #5
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	b2d9      	uxtb	r1, r3
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	7b93      	ldrb	r3, [r2, #14]
 8005b60:	f361 0301 	bfi	r3, r1, #0, #2
 8005b64:	7393      	strb	r3, [r2, #14]
          Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1CU) >> 2U;
 8005b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b68:	089b      	lsrs	r3, r3, #2
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	b2d9      	uxtb	r1, r3
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	7b93      	ldrb	r3, [r2, #14]
 8005b74:	f361 0384 	bfi	r3, r1, #2, #3
 8005b78:	7393      	strb	r3, [r2, #14]
          Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03U) << 2U) | ((CSD_Tab[13] & 0xC0U) >> 6U);
 8005b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	f003 030c 	and.w	r3, r3, #12
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8a:	099b      	lsrs	r3, r3, #6
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	4313      	orrs	r3, r2
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	b2d9      	uxtb	r1, r3
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	89d3      	ldrh	r3, [r2, #14]
 8005ba2:	f361 1348 	bfi	r3, r1, #5, #4
 8005ba6:	81d3      	strh	r3, [r2, #14]
          Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20U) >> 5U;
 8005ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	b2d9      	uxtb	r1, r3
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	7bd3      	ldrb	r3, [r2, #15]
 8005bb6:	f361 0341 	bfi	r3, r1, #1, #1
 8005bba:	73d3      	strb	r3, [r2, #15]
          Csd->Reserved3         = (CSD_Tab[13] & 0x1FU);
 8005bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bbe:	f003 031f 	and.w	r3, r3, #31
 8005bc2:	b2d9      	uxtb	r1, r3
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	7bd3      	ldrb	r3, [r2, #15]
 8005bc8:	f361 0386 	bfi	r3, r1, #2, #5
 8005bcc:	73d3      	strb	r3, [r2, #15]
          Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80U) >> 7U;
 8005bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd0:	09db      	lsrs	r3, r3, #7
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	b2d9      	uxtb	r1, r3
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	7bd3      	ldrb	r3, [r2, #15]
 8005bdc:	f361 13c7 	bfi	r3, r1, #7, #1
 8005be0:	73d3      	strb	r3, [r2, #15]
          Csd->CopyFlag          = (CSD_Tab[14] & 0x40U) >> 6U;
 8005be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	b2d9      	uxtb	r1, r3
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	7c13      	ldrb	r3, [r2, #16]
 8005bf0:	f361 0300 	bfi	r3, r1, #0, #1
 8005bf4:	7413      	strb	r3, [r2, #16]
          Csd->PermWrProtect     = (CSD_Tab[14] & 0x20U) >> 5U;
 8005bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	b2d9      	uxtb	r1, r3
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	7c13      	ldrb	r3, [r2, #16]
 8005c04:	f361 0341 	bfi	r3, r1, #1, #1
 8005c08:	7413      	strb	r3, [r2, #16]
          Csd->TempWrProtect     = (CSD_Tab[14] & 0x10U) >> 4U;
 8005c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0c:	091b      	lsrs	r3, r3, #4
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	b2d9      	uxtb	r1, r3
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	7c13      	ldrb	r3, [r2, #16]
 8005c18:	f361 0382 	bfi	r3, r1, #2, #1
 8005c1c:	7413      	strb	r3, [r2, #16]
          Csd->FileFormat        = (CSD_Tab[14] & 0x0CU) >> 2U;
 8005c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c20:	089b      	lsrs	r3, r3, #2
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	b2d9      	uxtb	r1, r3
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	7c13      	ldrb	r3, [r2, #16]
 8005c2c:	f361 03c4 	bfi	r3, r1, #3, #2
 8005c30:	7413      	strb	r3, [r2, #16]
          Csd->Reserved4         = (CSD_Tab[14] & 0x03U);
 8005c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	b2d9      	uxtb	r1, r3
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	7c13      	ldrb	r3, [r2, #16]
 8005c3e:	f361 1346 	bfi	r3, r1, #5, #2
 8005c42:	7413      	strb	r3, [r2, #16]
          Csd->crc               = (CSD_Tab[15] & 0xFEU) >> 1U;
 8005c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c4c:	b2d9      	uxtb	r1, r3
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	8a13      	ldrh	r3, [r2, #16]
 8005c52:	f361 13cd 	bfi	r3, r1, #7, #7
 8005c56:	8213      	strh	r3, [r2, #16]
          Csd->Reserved5         = (CSD_Tab[15] & 0x01U);
 8005c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	b2d9      	uxtb	r1, r3
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	7c53      	ldrb	r3, [r2, #17]
 8005c64:	f361 1386 	bfi	r3, r1, #6, #1
 8005c68:	7453      	strb	r3, [r2, #17]

          ret = BSP_ERROR_NONE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c6e:	e004      	b.n	8005c7a <SD_GetCSDRegister+0x42e>
 8005c70:	20000044 	.word	0x20000044
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005c74:	f06f 0305 	mvn.w	r3, #5
 8005c78:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 8005c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10e      	bne.n	8005c9e <SD_GetCSDRegister+0x452>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 8005c80:	2001      	movs	r0, #1
 8005c82:	f7ff fdcb 	bl	800581c <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005c86:	f107 030b 	add.w	r3, r7, #11
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fc2b 	bl	80064e8 <BSP_SPI2_Send>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <SD_GetCSDRegister+0x452>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c98:	f06f 0303 	mvn.w	r3, #3
 8005c9c:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 8005c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3758      	adds	r7, #88	; 0x58
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
static int32_t SD_GetCIDRegister(SD_CardIdData_t* Cid)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b096      	sub	sp, #88	; 0x58
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t response;
  uint32_t counter;
  uint8_t tmp;

  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CID, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	22ff      	movs	r2, #255	; 0xff
 8005cb8:	2100      	movs	r1, #0
 8005cba:	200a      	movs	r0, #10
 8005cbc:	f000 f8c6 	bl	8005e4c <SD_SendCmd>
 8005cc0:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8005cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f040 80a6 	bne.w	8005e18 <SD_GetCIDRegister+0x170>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8005ccc:	20fe      	movs	r0, #254	; 0xfe
 8005cce:	f000 fb79 	bl	80063c4 <SD_WaitData>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 80a2 	bne.w	8005e1e <SD_GetCIDRegister+0x176>
    {
      tmp = SD_DUMMY_BYTE;
 8005cda:	23ff      	movs	r3, #255	; 0xff
 8005cdc:	72fb      	strb	r3, [r7, #11]

      /* Store CID register value on CID_Tab */
      for (counter = 0U; counter < 16U; counter++)
 8005cde:	2300      	movs	r3, #0
 8005ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8005ce2:	e014      	b.n	8005d0e <SD_GetCIDRegister+0x66>
      {
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CID_Tab[counter], 1U) != BSP_ERROR_NONE)
 8005ce4:	f107 020c 	add.w	r2, r7, #12
 8005ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	18d1      	adds	r1, r2, r3
 8005cee:	f107 030b 	add.w	r3, r7, #11
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fc2f 	bl	8006558 <BSP_SPI2_SendRecv>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <SD_GetCIDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005d00:	f06f 0303 	mvn.w	r3, #3
 8005d04:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8005d06:	e005      	b.n	8005d14 <SD_GetCIDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8005d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	653b      	str	r3, [r7, #80]	; 0x50
 8005d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d10:	2b0f      	cmp	r3, #15
 8005d12:	d9e7      	bls.n	8005ce4 <SD_GetCIDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 8005d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f040 8081 	bne.w	8005e1e <SD_GetCIDRegister+0x176>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005d1c:	f107 030b 	add.w	r3, r7, #11
 8005d20:	2101      	movs	r1, #1
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fbe0 	bl	80064e8 <BSP_SPI2_Send>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <SD_GetCIDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005d2e:	f06f 0303 	mvn.w	r3, #3
 8005d32:	657b      	str	r3, [r7, #84]	; 0x54
 8005d34:	e073      	b.n	8005e1e <SD_GetCIDRegister+0x176>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005d36:	f107 030b 	add.w	r3, r7, #11
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fbd3 	bl	80064e8 <BSP_SPI2_Send>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <SD_GetCIDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005d48:	f06f 0303 	mvn.w	r3, #3
 8005d4c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d4e:	e066      	b.n	8005e1e <SD_GetCIDRegister+0x176>
        }
        else
        {
          /* Byte 0 */
          Cid->ManufacturerID = CID_Tab[0];
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	601a      	str	r2, [r3, #0]

          /* Byte 1 */
          Cid->OEM_AppliID = CID_Tab[1] << 8U;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	021a      	lsls	r2, r3, #8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	605a      	str	r2, [r3, #4]

          /* Byte 2 */
          Cid->OEM_AppliID |= CID_Tab[2];
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]

          /* Byte 3 */
          Cid->ProdName1 = CID_Tab[3] << 24U;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	061a      	lsls	r2, r3, #24
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	609a      	str	r2, [r3, #8]

          /* Byte 4 */
          Cid->ProdName1 |= CID_Tab[4] << 16U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	041b      	lsls	r3, r3, #16
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	609a      	str	r2, [r3, #8]

          /* Byte 5 */
          Cid->ProdName1 |= CID_Tab[5] << 8U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	609a      	str	r2, [r3, #8]

          /* Byte 6 */
          Cid->ProdName1 |= CID_Tab[6];
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	609a      	str	r2, [r3, #8]

          /* Byte 7 */
          Cid->ProdName2 = CID_Tab[7];
 8005d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	60da      	str	r2, [r3, #12]

          /* Byte 8 */
          Cid->ProdRev = CID_Tab[8];
 8005da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	611a      	str	r2, [r3, #16]

          /* Byte 9 */
          Cid->ProdSN = CID_Tab[9] << 24U;
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	061a      	lsls	r2, r3, #24
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	615a      	str	r2, [r3, #20]

          /* Byte 10 */
          Cid->ProdSN |= CID_Tab[10] << 16U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	041b      	lsls	r3, r3, #16
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	615a      	str	r2, [r3, #20]

          /* Byte 11 */
          Cid->ProdSN |= CID_Tab[11] << 8U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695a      	ldr	r2, [r3, #20]
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	615a      	str	r2, [r3, #20]

          /* Byte 12 */
          Cid->ProdSN |= CID_Tab[12];
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695a      	ldr	r2, [r3, #20]
 8005dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	615a      	str	r2, [r3, #20]

          /* Byte 13 */
          Cid->Reserved1 |= (CID_Tab[13] & 0xF0U) >> 4U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699a      	ldr	r2, [r3, #24]
 8005dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ddc:	091b      	lsrs	r3, r3, #4
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	619a      	str	r2, [r3, #24]
          Cid->ManufactDate = (CID_Tab[13] & 0x0FU) << 8U;
 8005de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	61da      	str	r2, [r3, #28]

          /* Byte 14 */
          Cid->ManufactDate |= CID_Tab[14];
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	61da      	str	r2, [r3, #28]

          /* Byte 15 */
          Cid->CID_CRC = (CID_Tab[15] & 0xFEU) >> 1U;
 8005e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	621a      	str	r2, [r3, #32]
          Cid->Reserved2 = 1U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	625a      	str	r2, [r3, #36]	; 0x24

          ret = BSP_ERROR_NONE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	657b      	str	r3, [r7, #84]	; 0x54
 8005e16:	e002      	b.n	8005e1e <SD_GetCIDRegister+0x176>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005e18:	f06f 0305 	mvn.w	r3, #5
 8005e1c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 8005e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10e      	bne.n	8005e42 <SD_GetCIDRegister+0x19a>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 8005e24:	2001      	movs	r0, #1
 8005e26:	f7ff fcf9 	bl	800581c <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8005e2a:	f107 030b 	add.w	r3, r7, #11
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fb59 	bl	80064e8 <BSP_SPI2_Send>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <SD_GetCIDRegister+0x19a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005e3c:	f06f 0303 	mvn.w	r3, #3
 8005e40:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 8005e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3758      	adds	r7, #88	; 0x58
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <SD_SendCmd>:
  * @param  Crc The CRC.
  * @param  Answer SD_ANSWER_NOT_EXPECTED or SD_ANSWER_EXPECTED
  * @retval SD response or 0xFFFF in case of error
  */
static uint32_t SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Answer)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6039      	str	r1, [r7, #0]
 8005e54:	4611      	mov	r1, r2
 8005e56:	461a      	mov	r2, r3
 8005e58:	4603      	mov	r3, r0
 8005e5a:	71fb      	strb	r3, [r7, #7]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	71bb      	strb	r3, [r7, #6]
 8005e60:	4613      	mov	r3, r2
 8005e62:	717b      	strb	r3, [r7, #5]
  uint8_t frame[SD_CMD_LENGTH], frameout[SD_CMD_LENGTH];
  uint32_t response = 0xFFFF;
 8005e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e68:	61fb      	str	r3, [r7, #28]
  /* R1 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 1 Bytes answer + NEC(0) = 15bytes */
  /* R1b identical to R1 + Busy information                                                   */
  /* R2 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 2 Bytes answer + NEC(0) = 16bytes */

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40U);         /* Construct byte 1 */
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	753b      	strb	r3, [r7, #20]
  frame[1] = (uint8_t)(Arg >> 24U); /* Construct byte 2 */
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	0e1b      	lsrs	r3, r3, #24
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	757b      	strb	r3, [r7, #21]
  frame[2] = (uint8_t)(Arg >> 16U); /* Construct byte 3 */
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	0c1b      	lsrs	r3, r3, #16
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	75bb      	strb	r3, [r7, #22]
  frame[3] = (uint8_t)(Arg >> 8U);  /* Construct byte 4 */
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	0a1b      	lsrs	r3, r3, #8
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	75fb      	strb	r3, [r7, #23]
  frame[4] = (uint8_t)(Arg);        /* Construct byte 5 */
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	763b      	strb	r3, [r7, #24]
  frame[5] = (Crc | 0x01U);         /* Construct byte 6 */
 8005e92:	79bb      	ldrb	r3, [r7, #6]
 8005e94:	f043 0301 	orr.w	r3, r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	767b      	strb	r3, [r7, #25]

  /* Send the command */
  SD_IO_CSState(0);
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	f7ff fcbd 	bl	800581c <SD_IO_CSState>
  /* Send the Cmd bytes */
  if(BUS_SPIx_SendRecv(frame, frameout, SD_CMD_LENGTH) != BSP_ERROR_NONE)
 8005ea2:	f107 010c 	add.w	r1, r7, #12
 8005ea6:	f107 0314 	add.w	r3, r7, #20
 8005eaa:	2206      	movs	r2, #6
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fb53 	bl	8006558 <BSP_SPI2_SendRecv>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <SD_SendCmd+0x72>
  {
    return 0xFFFF;
 8005eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ebc:	e0da      	b.n	8006074 <SD_SendCmd+0x228>
  }
  tmp = SD_DUMMY_BYTE;
 8005ebe:	23ff      	movs	r3, #255	; 0xff
 8005ec0:	72fb      	strb	r3, [r7, #11]
  switch(Answer)
 8005ec2:	797b      	ldrb	r3, [r7, #5]
 8005ec4:	2b05      	cmp	r3, #5
 8005ec6:	f200 80d1 	bhi.w	800606c <SD_SendCmd+0x220>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <SD_SendCmd+0x84>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ee9 	.word	0x08005ee9
 8005ed4:	08005f05 	.word	0x08005f05
 8005ed8:	08005f97 	.word	0x08005f97
 8005edc:	08005fd9 	.word	0x08005fd9
 8005ee0:	0800606d 	.word	0x0800606d
 8005ee4:	08005fd9 	.word	0x08005fd9
  {
  case SD_ANSWER_R1_EXPECTED :
    /* Sends one byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8005ee8:	f107 030a 	add.w	r3, r7, #10
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fa3f 	bl	8006370 <SD_ReadData>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <SD_SendCmd+0xb2>
    {
      return 0xFFFF;
 8005ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005efc:	e0ba      	b.n	8006074 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 8005efe:	7abb      	ldrb	r3, [r7, #10]
 8005f00:	61fb      	str	r3, [r7, #28]
    break;
 8005f02:	e0b6      	b.n	8006072 <SD_SendCmd+0x226>
  case SD_ANSWER_R1B_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8005f04:	f107 030a 	add.w	r3, r7, #10
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fa31 	bl	8006370 <SD_ReadData>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <SD_SendCmd+0xce>
    {
      return 0xFFFF;
 8005f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f18:	e0ac      	b.n	8006074 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 8005f1a:	7abb      	ldrb	r3, [r7, #10]
 8005f1c:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8005f1e:	f107 010a 	add.w	r1, r7, #10
 8005f22:	f107 030b 	add.w	r3, r7, #11
 8005f26:	2201      	movs	r2, #1
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fb15 	bl	8006558 <BSP_SPI2_SendRecv>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <SD_SendCmd+0xee>
    {
      return 0xFFFF;
 8005f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f38:	e09c      	b.n	8006074 <SD_SendCmd+0x228>
    }
    response |= response_tmp;
 8005f3a:	7abb      	ldrb	r3, [r7, #10]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61fb      	str	r3, [r7, #28]
    /* Set CS High */
    SD_IO_CSState(1);
 8005f44:	2001      	movs	r0, #1
 8005f46:	f7ff fc69 	bl	800581c <SD_IO_CSState>
    SPI_IO_Delay(1);
 8005f4a:	2001      	movs	r0, #1
 8005f4c:	f000 fa67 	bl	800641e <SPI_IO_Delay>
    /* Set CS Low */
    SD_IO_CSState(0);
 8005f50:	2000      	movs	r0, #0
 8005f52:	f7ff fc63 	bl	800581c <SD_IO_CSState>

    /* Wait IO line return 0xFF */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8005f56:	f107 010a 	add.w	r1, r7, #10
 8005f5a:	f107 030b 	add.w	r3, r7, #11
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 faf9 	bl	8006558 <BSP_SPI2_SendRecv>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d010      	beq.n	8005f8e <SD_SendCmd+0x142>
    {
      return 0xFFFF;
 8005f6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f70:	e080      	b.n	8006074 <SD_SendCmd+0x228>
    }
    while(response_tmp != 0xFFU)
    {
      if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8005f72:	f107 010a 	add.w	r1, r7, #10
 8005f76:	f107 030b 	add.w	r3, r7, #11
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 faeb 	bl	8006558 <BSP_SPI2_SendRecv>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <SD_SendCmd+0x142>
      {
        return 0xFFFF;
 8005f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f8c:	e072      	b.n	8006074 <SD_SendCmd+0x228>
    while(response_tmp != 0xFFU)
 8005f8e:	7abb      	ldrb	r3, [r7, #10]
 8005f90:	2bff      	cmp	r3, #255	; 0xff
 8005f92:	d1ee      	bne.n	8005f72 <SD_SendCmd+0x126>
      }
    }
    break;
 8005f94:	e06d      	b.n	8006072 <SD_SendCmd+0x226>
  case SD_ANSWER_R2_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8005f96:	f107 030a 	add.w	r3, r7, #10
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f9e8 	bl	8006370 <SD_ReadData>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <SD_SendCmd+0x160>
    {
      return 0xFFFF;
 8005fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005faa:	e063      	b.n	8006074 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 8005fac:	7abb      	ldrb	r3, [r7, #10]
 8005fae:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8005fb0:	f107 010a 	add.w	r1, r7, #10
 8005fb4:	f107 030b 	add.w	r3, r7, #11
 8005fb8:	2201      	movs	r2, #1
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 facc 	bl	8006558 <BSP_SPI2_SendRecv>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <SD_SendCmd+0x180>
    {
      return 0xFFFF;
 8005fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fca:	e053      	b.n	8006074 <SD_SendCmd+0x228>
    }
    response |= ((uint32_t)response_tmp << 8);
 8005fcc:	7abb      	ldrb	r3, [r7, #10]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61fb      	str	r3, [r7, #28]
    break;
 8005fd6:	e04c      	b.n	8006072 <SD_SendCmd+0x226>
  case SD_ANSWER_R3_EXPECTED :
  case SD_ANSWER_R7_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 8005fd8:	f107 030a 	add.w	r3, r7, #10
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 f9c7 	bl	8006370 <SD_ReadData>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <SD_SendCmd+0x1a2>
    {
      return 0xFFFF;
 8005fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fec:	e042      	b.n	8006074 <SD_SendCmd+0x228>
    }
    response = response_tmp;
 8005fee:	7abb      	ldrb	r3, [r7, #10]
 8005ff0:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8005ff2:	f107 010a 	add.w	r1, r7, #10
 8005ff6:	f107 030b 	add.w	r3, r7, #11
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 faab 	bl	8006558 <BSP_SPI2_SendRecv>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <SD_SendCmd+0x1c2>
    {
      return 0xFFFF;
 8006008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800600c:	e032      	b.n	8006074 <SD_SendCmd+0x228>
    }
    /* Only first and second responses are required */
    response |= ((uint32_t)response_tmp << 8U);
 800600e:	7abb      	ldrb	r3, [r7, #10]
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	4313      	orrs	r3, r2
 8006016:	61fb      	str	r3, [r7, #28]
    /* Sends third byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8006018:	f107 010a 	add.w	r1, r7, #10
 800601c:	f107 030b 	add.w	r3, r7, #11
 8006020:	2201      	movs	r2, #1
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fa98 	bl	8006558 <BSP_SPI2_SendRecv>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <SD_SendCmd+0x1e8>
    {
      return 0xFFFF;
 800602e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006032:	e01f      	b.n	8006074 <SD_SendCmd+0x228>
    }
    /* Sends fourth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8006034:	f107 010a 	add.w	r1, r7, #10
 8006038:	f107 030b 	add.w	r3, r7, #11
 800603c:	2201      	movs	r2, #1
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fa8a 	bl	8006558 <BSP_SPI2_SendRecv>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <SD_SendCmd+0x204>
    {
      return 0xFFFF;
 800604a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800604e:	e011      	b.n	8006074 <SD_SendCmd+0x228>
    }
    /* Sends fifth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8006050:	f107 010a 	add.w	r1, r7, #10
 8006054:	f107 030b 	add.w	r3, r7, #11
 8006058:	2201      	movs	r2, #1
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fa7c 	bl	8006558 <BSP_SPI2_SendRecv>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <SD_SendCmd+0x224>
    {
      return 0xFFFF;
 8006066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800606a:	e003      	b.n	8006074 <SD_SendCmd+0x228>
    }

    break;
  default :
    break;
 800606c:	bf00      	nop
 800606e:	e000      	b.n	8006072 <SD_SendCmd+0x226>
    break;
 8006070:	bf00      	nop
  }
  return response;
 8006072:	69fb      	ldr	r3, [r7, #28]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
static int32_t SD_GetDataResponse(uint8_t *DataResponse)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint8_t dataresponse, tmp, tmp1;
  *DataResponse = (uint8_t)SD_DATA_OTHER_ERROR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	22ff      	movs	r2, #255	; 0xff
 8006088:	701a      	strb	r2, [r3, #0]

  tmp = SD_DUMMY_BYTE;
 800608a:	23ff      	movs	r3, #255	; 0xff
 800608c:	73bb      	strb	r3, [r7, #14]
  if(BUS_SPIx_SendRecv(&tmp, &dataresponse, 1U) != BSP_ERROR_NONE)
 800608e:	f107 010f 	add.w	r1, r7, #15
 8006092:	f107 030e 	add.w	r3, r7, #14
 8006096:	2201      	movs	r2, #1
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fa5d 	bl	8006558 <BSP_SPI2_SendRecv>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <SD_GetDataResponse+0x2e>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80060a4:	f06f 0303 	mvn.w	r3, #3
 80060a8:	e049      	b.n	800613e <SD_GetDataResponse+0xc2>
  }
  /* read the busy response byte*/
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80060aa:	f107 030e 	add.w	r3, r7, #14
 80060ae:	2101      	movs	r1, #1
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fa19 	bl	80064e8 <BSP_SPI2_Send>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <SD_GetDataResponse+0x46>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80060bc:	f06f 0303 	mvn.w	r3, #3
 80060c0:	e03d      	b.n	800613e <SD_GetDataResponse+0xc2>
  }
  else
  {
    /* Mask unused bits */
    switch (dataresponse & 0x1FU)
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	f003 031f 	and.w	r3, r3, #31
 80060c8:	2b0b      	cmp	r3, #11
 80060ca:	d02f      	beq.n	800612c <SD_GetDataResponse+0xb0>
 80060cc:	2b0d      	cmp	r3, #13
 80060ce:	d031      	beq.n	8006134 <SD_GetDataResponse+0xb8>
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	d000      	beq.n	80060d6 <SD_GetDataResponse+0x5a>
      break;
    case SD_DATA_WRITE_ERROR:
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
      break;
    default:
      break;
 80060d4:	e032      	b.n	800613c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_OK;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2205      	movs	r2, #5
 80060da:	701a      	strb	r2, [r3, #0]
      SD_IO_CSState(1);
 80060dc:	2001      	movs	r0, #1
 80060de:	f7ff fb9d 	bl	800581c <SD_IO_CSState>
      SD_IO_CSState(0);
 80060e2:	2000      	movs	r0, #0
 80060e4:	f7ff fb9a 	bl	800581c <SD_IO_CSState>
      tmp = SD_DUMMY_BYTE;
 80060e8:	23ff      	movs	r3, #255	; 0xff
 80060ea:	73bb      	strb	r3, [r7, #14]
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 80060ec:	f107 010d 	add.w	r1, r7, #13
 80060f0:	f107 030e 	add.w	r3, r7, #14
 80060f4:	2201      	movs	r2, #1
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fa2e 	bl	8006558 <BSP_SPI2_SendRecv>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d010      	beq.n	8006124 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 8006102:	f06f 0303 	mvn.w	r3, #3
 8006106:	e01a      	b.n	800613e <SD_GetDataResponse+0xc2>
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 8006108:	f107 010d 	add.w	r1, r7, #13
 800610c:	f107 030e 	add.w	r3, r7, #14
 8006110:	2201      	movs	r2, #1
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fa20 	bl	8006558 <BSP_SPI2_SendRecv>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 800611e:	f06f 0303 	mvn.w	r3, #3
 8006122:	e00c      	b.n	800613e <SD_GetDataResponse+0xc2>
      while(tmp1 != 0xFFU)
 8006124:	7b7b      	ldrb	r3, [r7, #13]
 8006126:	2bff      	cmp	r3, #255	; 0xff
 8006128:	d1ee      	bne.n	8006108 <SD_GetDataResponse+0x8c>
      break;
 800612a:	e007      	b.n	800613c <SD_GetDataResponse+0xc0>
      *DataResponse =  (uint8_t)SD_DATA_CRC_ERROR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	220b      	movs	r2, #11
 8006130:	701a      	strb	r2, [r3, #0]
      break;
 8006132:	e003      	b.n	800613c <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	220d      	movs	r2, #13
 8006138:	701a      	strb	r2, [r3, #0]
      break;
 800613a:	bf00      	nop
    }
  }

  /* Return response */
  return BSP_ERROR_NONE;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <SD_GoIdleState>:
  * @brief  Put the SD in Idle state.
  * @param  None
  * @retval SD status
  */
static int32_t SD_GoIdleState(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
  uint32_t response;
  __IO uint8_t counter = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	70fb      	strb	r3, [r7, #3]
  uint8_t tmp = SD_DUMMY_BYTE;
 8006152:	23ff      	movs	r3, #255	; 0xff
 8006154:	70bb      	strb	r3, [r7, #2]

  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and
  wait for In Idle State Response (R1 Format) equal to 0x01 */
  do
  {
    counter++;
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	3301      	adds	r3, #1
 800615c:	b2db      	uxtb	r3, r3
 800615e:	70fb      	strb	r3, [r7, #3]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0U, 0x95U, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006160:	2300      	movs	r3, #0
 8006162:	2295      	movs	r2, #149	; 0x95
 8006164:	2100      	movs	r1, #0
 8006166:	2000      	movs	r0, #0
 8006168:	f7ff fe70 	bl	8005e4c <SD_SendCmd>
 800616c:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 800616e:	2001      	movs	r0, #1
 8006170:	f7ff fb54 	bl	800581c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006174:	1cbb      	adds	r3, r7, #2
 8006176:	2101      	movs	r1, #1
 8006178:	4618      	mov	r0, r3
 800617a:	f000 f9b5 	bl	80064e8 <BSP_SPI2_Send>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <SD_GoIdleState+0x42>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8006184:	f06f 0303 	mvn.w	r3, #3
 8006188:	e0ec      	b.n	8006364 <SD_GoIdleState+0x21c>
    }
    else
    {
      if(counter >= SD_MAX_TRY)
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b63      	cmp	r3, #99	; 0x63
 8006190:	d902      	bls.n	8006198 <SD_GoIdleState+0x50>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 8006192:	f06f 0305 	mvn.w	r3, #5
 8006196:	e0e5      	b.n	8006364 <SD_GoIdleState+0x21c>
      }
    }
  }while((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b01      	cmp	r3, #1
 800619e:	d1da      	bne.n	8006156 <SD_GoIdleState+0xe>

  /* Send CMD8 (SD_CMD_SEND_IF_COND) to check the power supply status
  and wait until response (R7 Format) equal to 0xAA and */
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AAU, 0x87U, (uint8_t)SD_ANSWER_R7_EXPECTED);
 80061a0:	2305      	movs	r3, #5
 80061a2:	2287      	movs	r2, #135	; 0x87
 80061a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061a8:	2008      	movs	r0, #8
 80061aa:	f7ff fe4f 	bl	8005e4c <SD_SendCmd>
 80061ae:	6078      	str	r0, [r7, #4]
  SD_IO_CSState(1);
 80061b0:	2001      	movs	r0, #1
 80061b2:	f7ff fb33 	bl	800581c <SD_IO_CSState>
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80061b6:	1cbb      	adds	r3, r7, #2
 80061b8:	2101      	movs	r1, #1
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f994 	bl	80064e8 <BSP_SPI2_Send>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <SD_GoIdleState+0x84>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80061c6:	f06f 0303 	mvn.w	r3, #3
 80061ca:	e0cb      	b.n	8006364 <SD_GoIdleState+0x21c>
  }
  else if(((uint8_t)(response & 0xFFU)  & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d030      	beq.n	800623a <SD_GoIdleState+0xf2>
    /* initialise card V1 */
    do
    {
      /* initialise card V1 */
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80061d8:	2300      	movs	r3, #0
 80061da:	22ff      	movs	r2, #255	; 0xff
 80061dc:	2100      	movs	r1, #0
 80061de:	2037      	movs	r0, #55	; 0x37
 80061e0:	f7ff fe34 	bl	8005e4c <SD_SendCmd>
      SD_IO_CSState(1);
 80061e4:	2001      	movs	r0, #1
 80061e6:	f7ff fb19 	bl	800581c <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80061ea:	1cbb      	adds	r3, r7, #2
 80061ec:	2101      	movs	r1, #1
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 f97a 	bl	80064e8 <BSP_SPI2_Send>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <SD_GoIdleState+0xb8>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 80061fa:	f06f 0303 	mvn.w	r3, #3
 80061fe:	e0b1      	b.n	8006364 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006200:	2300      	movs	r3, #0
 8006202:	22ff      	movs	r2, #255	; 0xff
 8006204:	2100      	movs	r1, #0
 8006206:	2029      	movs	r0, #41	; 0x29
 8006208:	f7ff fe20 	bl	8005e4c <SD_SendCmd>
 800620c:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 800620e:	2001      	movs	r0, #1
 8006210:	f7ff fb04 	bl	800581c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006214:	1cbb      	adds	r3, r7, #2
 8006216:	2101      	movs	r1, #1
 8006218:	4618      	mov	r0, r3
 800621a:	f000 f965 	bl	80064e8 <BSP_SPI2_Send>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <SD_GoIdleState+0xe2>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8006224:	f06f 0303 	mvn.w	r3, #3
 8006228:	e09c      	b.n	8006364 <SD_GoIdleState+0x21c>
        }
      }
    }
    while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b01      	cmp	r3, #1
 8006230:	d0d2      	beq.n	80061d8 <SD_GoIdleState+0x90>
    CardType = MY_CARD_SDSC;
 8006232:	4b4e      	ldr	r3, [pc, #312]	; (800636c <SD_GoIdleState+0x224>)
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e093      	b.n	8006362 <SD_GoIdleState+0x21a>
  }
  else if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b01      	cmp	r3, #1
 8006240:	f040 808c 	bne.w	800635c <SD_GoIdleState+0x214>
  {
    /* initialise card V2 */
    do {
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006244:	2300      	movs	r3, #0
 8006246:	22ff      	movs	r2, #255	; 0xff
 8006248:	2100      	movs	r1, #0
 800624a:	2037      	movs	r0, #55	; 0x37
 800624c:	f7ff fdfe 	bl	8005e4c <SD_SendCmd>
      SD_IO_CSState(1);
 8006250:	2001      	movs	r0, #1
 8006252:	f7ff fae3 	bl	800581c <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006256:	1cbb      	adds	r3, r7, #2
 8006258:	2101      	movs	r1, #1
 800625a:	4618      	mov	r0, r3
 800625c:	f000 f944 	bl	80064e8 <BSP_SPI2_Send>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <SD_GoIdleState+0x124>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8006266:	f06f 0303 	mvn.w	r3, #3
 800626a:	e07b      	b.n	8006364 <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800626c:	2300      	movs	r3, #0
 800626e:	22ff      	movs	r2, #255	; 0xff
 8006270:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006274:	2029      	movs	r0, #41	; 0x29
 8006276:	f7ff fde9 	bl	8005e4c <SD_SendCmd>
 800627a:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 800627c:	2001      	movs	r0, #1
 800627e:	f7ff facd 	bl	800581c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006282:	1cbb      	adds	r3, r7, #2
 8006284:	2101      	movs	r1, #1
 8006286:	4618      	mov	r0, r3
 8006288:	f000 f92e 	bl	80064e8 <BSP_SPI2_Send>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <SD_GoIdleState+0x150>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 8006292:	f06f 0303 	mvn.w	r3, #3
 8006296:	e065      	b.n	8006364 <SD_GoIdleState+0x21c>
        }
      }
    }
    while(((uint8_t)response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	d0d1      	beq.n	8006244 <SD_GoIdleState+0xfc>

    if(((uint8_t)(response & 0xFFU) & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d033      	beq.n	8006314 <SD_GoIdleState+0x1cc>
    {
      do {
        /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
        (void)SD_SendCmd(SD_CMD_APP_CMD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80062ac:	2300      	movs	r3, #0
 80062ae:	22ff      	movs	r2, #255	; 0xff
 80062b0:	2100      	movs	r1, #0
 80062b2:	2037      	movs	r0, #55	; 0x37
 80062b4:	f7ff fdca 	bl	8005e4c <SD_SendCmd>
        SD_IO_CSState(1);
 80062b8:	2001      	movs	r0, #1
 80062ba:	f7ff faaf 	bl	800581c <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80062be:	1cbb      	adds	r3, r7, #2
 80062c0:	2101      	movs	r1, #1
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f910 	bl	80064e8 <BSP_SPI2_Send>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <SD_GoIdleState+0x18c>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 80062ce:	f06f 0303 	mvn.w	r3, #3
 80062d2:	e047      	b.n	8006364 <SD_GoIdleState+0x21c>
        }
        else
        {
          if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d002      	beq.n	80062e2 <SD_GoIdleState+0x19a>
          {
            return BSP_ERROR_UNKNOWN_FAILURE;
 80062dc:	f06f 0305 	mvn.w	r3, #5
 80062e0:	e040      	b.n	8006364 <SD_GoIdleState+0x21c>
          }
          /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80062e2:	2300      	movs	r3, #0
 80062e4:	22ff      	movs	r2, #255	; 0xff
 80062e6:	2100      	movs	r1, #0
 80062e8:	2029      	movs	r0, #41	; 0x29
 80062ea:	f7ff fdaf 	bl	8005e4c <SD_SendCmd>
 80062ee:	6078      	str	r0, [r7, #4]
          SD_IO_CSState(1);
 80062f0:	2001      	movs	r0, #1
 80062f2:	f7ff fa93 	bl	800581c <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80062f6:	1cbb      	adds	r3, r7, #2
 80062f8:	2101      	movs	r1, #1
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f8f4 	bl	80064e8 <BSP_SPI2_Send>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <SD_GoIdleState+0x1c4>
          {
            return BSP_ERROR_PERIPH_FAILURE;
 8006306:	f06f 0303 	mvn.w	r3, #3
 800630a:	e02b      	b.n	8006364 <SD_GoIdleState+0x21c>
          }
        }
      }
      while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b01      	cmp	r3, #1
 8006312:	d0cb      	beq.n	80062ac <SD_GoIdleState+0x164>
    }

    /* Send CMD58 (SD_CMD_READ_OCR) to initialize SDHC or SDXC cards: R3 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R3_EXPECTED);
 8006314:	2303      	movs	r3, #3
 8006316:	22ff      	movs	r2, #255	; 0xff
 8006318:	2100      	movs	r1, #0
 800631a:	203a      	movs	r0, #58	; 0x3a
 800631c:	f7ff fd96 	bl	8005e4c <SD_SendCmd>
 8006320:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 8006322:	2001      	movs	r0, #1
 8006324:	f7ff fa7a 	bl	800581c <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006328:	1cbb      	adds	r3, r7, #2
 800632a:	2101      	movs	r1, #1
 800632c:	4618      	mov	r0, r3
 800632e:	f000 f8db 	bl	80064e8 <BSP_SPI2_Send>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <SD_GoIdleState+0x1f6>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8006338:	f06f 0303 	mvn.w	r3, #3
 800633c:	e012      	b.n	8006364 <SD_GoIdleState+0x21c>
    }
    else
    {
      if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <SD_GoIdleState+0x204>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 8006346:	f06f 0305 	mvn.w	r3, #5
 800634a:	e00b      	b.n	8006364 <SD_GoIdleState+0x21c>
      }
      CardType = (uint32_t)(((response >> 8U) & 0x40U) >> 6U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	0a1b      	lsrs	r3, r3, #8
 8006350:	099b      	lsrs	r3, r3, #6
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	4a05      	ldr	r2, [pc, #20]	; (800636c <SD_GoIdleState+0x224>)
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	e002      	b.n	8006362 <SD_GoIdleState+0x21a>
    }
  }
  else
  {
    return BSP_ERROR_BUSY;
 800635c:	f06f 0302 	mvn.w	r3, #2
 8006360:	e000      	b.n	8006364 <SD_GoIdleState+0x21c>
  }

  return BSP_ERROR_NONE;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	20000044 	.word	0x20000044

08006370 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  Data data to be read
  * @retval BSP status
  */
static int32_t SD_ReadData(uint8_t *Data)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint8_t timeout = 0x08U;
 8006378:	2308      	movs	r3, #8
 800637a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  tmp = SD_DUMMY_BYTE;
 800637c:	23ff      	movs	r3, #255	; 0xff
 800637e:	73bb      	strb	r3, [r7, #14]
  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, Data, 1) != BSP_ERROR_NONE)
 8006380:	f107 030e 	add.w	r3, r7, #14
 8006384:	2201      	movs	r2, #1
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4618      	mov	r0, r3
 800638a:	f000 f8e5 	bl	8006558 <BSP_SPI2_SendRecv>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <SD_ReadData+0x2a>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8006394:	f06f 0303 	mvn.w	r3, #3
 8006398:	e010      	b.n	80063bc <SD_ReadData+0x4c>
    }
    timeout--;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	3b01      	subs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]

  }while ((*Data == SD_DUMMY_BYTE) && (timeout != 0U));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2bff      	cmp	r3, #255	; 0xff
 80063a6:	d102      	bne.n	80063ae <SD_ReadData+0x3e>
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e8      	bne.n	8006380 <SD_ReadData+0x10>

  if (timeout == 0U)
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <SD_ReadData+0x4a>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 80063b4:	f06f 0302 	mvn.w	r3, #2
 80063b8:	e000      	b.n	80063bc <SD_ReadData+0x4c>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <SD_WaitData>:
  * @brief  Waits a data from the SD card
  * @param  data  Expected data from the SD card
  * @retval BSP status
  */
static int32_t SD_WaitData(uint8_t Data)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	71fb      	strb	r3, [r7, #7]
  uint16_t timeout = 0xFFFF;
 80063ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063d2:	81fb      	strh	r3, [r7, #14]
  uint8_t readvalue, tmp;

  tmp = SD_DUMMY_BYTE;
 80063d4:	23ff      	movs	r3, #255	; 0xff
 80063d6:	733b      	strb	r3, [r7, #12]

  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, &readvalue, 1) != BSP_ERROR_NONE)
 80063d8:	f107 010d 	add.w	r1, r7, #13
 80063dc:	f107 030c 	add.w	r3, r7, #12
 80063e0:	2201      	movs	r2, #1
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f8b8 	bl	8006558 <BSP_SPI2_SendRecv>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <SD_WaitData+0x30>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80063ee:	f06f 0303 	mvn.w	r3, #3
 80063f2:	e010      	b.n	8006416 <SD_WaitData+0x52>
    }
    timeout--;
 80063f4:	89fb      	ldrh	r3, [r7, #14]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	81fb      	strh	r3, [r7, #14]
  }while ((readvalue != Data) && (timeout != 0U));
 80063fa:	7b7b      	ldrb	r3, [r7, #13]
 80063fc:	79fa      	ldrb	r2, [r7, #7]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d002      	beq.n	8006408 <SD_WaitData+0x44>
 8006402:	89fb      	ldrh	r3, [r7, #14]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e7      	bne.n	80063d8 <SD_WaitData+0x14>

  if (timeout == 0U)
 8006408:	89fb      	ldrh	r3, [r7, #14]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d102      	bne.n	8006414 <SD_WaitData+0x50>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 800640e:	f06f 0302 	mvn.w	r3, #2
 8006412:	e000      	b.n	8006416 <SD_WaitData+0x52>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <SPI_IO_Delay>:
  * @brief  SPI IO delay
  * @param  Delay  Delay in ms
  * @retval None
  */
static void SPI_IO_Delay(uint32_t Delay)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  int32_t tickstart;
  tickstart = BSP_GetTick();
 8006426:	f000 f8b7 	bl	8006598 <BSP_GetTick>
 800642a:	60f8      	str	r0, [r7, #12]
  while((BSP_GetTick() - tickstart) < (int32_t)Delay)
 800642c:	bf00      	nop
 800642e:	f000 f8b3 	bl	8006598 <BSP_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	429a      	cmp	r2, r3
 800643c:	dbf7      	blt.n	800642e <SPI_IO_Delay+0x10>
  {
  }
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <BSP_SPI2_Init>:

static void SPI_MspInit(SPI_HandleTypeDef *hspi);
static void SPI_MspDeInit(SPI_HandleTypeDef *hspi);

int32_t BSP_SPI2_Init(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hSpiHandle) == HAL_SPI_STATE_RESET)
 800644c:	480a      	ldr	r0, [pc, #40]	; (8006478 <BSP_SPI2_Init+0x30>)
 800644e:	f7fd f8ba 	bl	80035c6 <HAL_SPI_GetState>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10b      	bne.n	8006470 <BSP_SPI2_Init+0x28>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI_MspInit(&hSpiHandle);
 8006458:	4807      	ldr	r0, [pc, #28]	; (8006478 <BSP_SPI2_Init+0x30>)
 800645a:	f000 f8a5 	bl	80065a8 <SPI_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_BSP_SPI2_Init(&hSpiHandle) != HAL_OK)
 800645e:	4806      	ldr	r0, [pc, #24]	; (8006478 <BSP_SPI2_Init+0x30>)
 8006460:	f000 f80c 	bl	800647c <MX_BSP_SPI2_Init>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <BSP_SPI2_Init+0x28>
    {
      return BSP_ERROR_BUS_FAILURE;
 800646a:	f06f 0307 	mvn.w	r3, #7
 800646e:	e000      	b.n	8006472 <BSP_SPI2_Init+0x2a>
    }
  }
  return BSP_ERROR_NONE;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000968 	.word	0x20000968

0800647c <MX_BSP_SPI2_Init>:
  * @brief  MX SPI initialization.
  * @param  hspi SPI handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_BSP_SPI2_Init(SPI_HandleTypeDef *hspi)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* SPI Config */
  hspi->Instance               = NUCLEO_SPI;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a17      	ldr	r2, [pc, #92]	; (80064e4 <MX_BSP_SPI2_Init+0x68>)
 8006488:	601a      	str	r2, [r3, #0]
  hspi->Init.BaudRatePrescaler = NUCLEO_SPI_BAUDRATEPRESCALER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2210      	movs	r2, #16
 800648e:	61da      	str	r2, [r3, #28]
  hspi->Init.Direction         = SPI_DIRECTION_2LINES;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	609a      	str	r2, [r3, #8]
  hspi->Init.CLKPhase          = SPI_PHASE_2EDGE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	615a      	str	r2, [r3, #20]
  hspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	611a      	str	r2, [r3, #16]
  hspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial     = 7;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2207      	movs	r2, #7
 80064ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80064b4:	60da      	str	r2, [r3, #12]
  hspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	621a      	str	r2, [r3, #32]
  hspi->Init.NSS               = SPI_NSS_SOFT;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c2:	619a      	str	r2, [r3, #24]
  hspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.Mode              = SPI_MODE_MASTER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80064d0:	605a      	str	r2, [r3, #4]

  return HAL_SPI_Init(hspi);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fc fb44 	bl	8002b60 <HAL_SPI_Init>
 80064d8:	4603      	mov	r3, r0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40003800 	.word	0x40003800

080064e8 <BSP_SPI2_Send>:
  * @param  pTxData pointer to TX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pTxData, uint32_t Length)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hSpiHandle, pTxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	4806      	ldr	r0, [pc, #24]	; (800651c <BSP_SPI2_Send+0x34>)
 8006502:	f7fc fbbf 	bl	8002c84 <HAL_SPI_Transmit>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <BSP_SPI2_Send+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800650c:	f06f 0307 	mvn.w	r3, #7
 8006510:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006512:	68fb      	ldr	r3, [r7, #12]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20000968 	.word	0x20000968

08006520 <BSP_SPI2_Recv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Recv(uint8_t *pRxData, uint32_t Length)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hSpiHandle, pRxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	b29a      	uxth	r2, r3
 8006532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	4806      	ldr	r0, [pc, #24]	; (8006554 <BSP_SPI2_Recv+0x34>)
 800653a:	f7fc fd09 	bl	8002f50 <HAL_SPI_Receive>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <BSP_SPI2_Recv+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8006544:	f06f 0307 	mvn.w	r3, #7
 8006548:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800654a:	68fb      	ldr	r3, [r7, #12]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000968 	.word	0x20000968

08006558 <BSP_SPI2_SendRecv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint32_t Legnth)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af02      	add	r7, sp, #8
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hSpiHandle, pTxData, pRxData, (uint16_t)Legnth, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	b29a      	uxth	r2, r3
 800656c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	4613      	mov	r3, r2
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	4806      	ldr	r0, [pc, #24]	; (8006594 <BSP_SPI2_SendRecv+0x3c>)
 800657a:	f7fc fe11 	bl	80031a0 <HAL_SPI_TransmitReceive>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <BSP_SPI2_SendRecv+0x32>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8006584:	f06f 0307 	mvn.w	r3, #7
 8006588:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800658a:	697b      	ldr	r3, [r7, #20]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20000968 	.word	0x20000968

08006598 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800659c:	f7fa fc2c 	bl	8000df8 <HAL_GetTick>
 80065a0:	4603      	mov	r3, r0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <SPI_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi SPI handler
  * @retval None
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08c      	sub	sp, #48	; 0x30
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*** Configure the SPI peripheral ***/
  /* Enable SPI clock */
  NUCLEO_SPI_CLK_ENABLE();
 80065b0:	4b2e      	ldr	r3, [pc, #184]	; (800666c <SPI_MspInit+0xc4>)
 80065b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b4:	4a2d      	ldr	r2, [pc, #180]	; (800666c <SPI_MspInit+0xc4>)
 80065b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065ba:	6593      	str	r3, [r2, #88]	; 0x58
 80065bc:	4b2b      	ldr	r3, [pc, #172]	; (800666c <SPI_MspInit+0xc4>)
 80065be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  NUCLEO_SPI_SCK_GPIO_CLK_ENABLE();
 80065c8:	4b28      	ldr	r3, [pc, #160]	; (800666c <SPI_MspInit+0xc4>)
 80065ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065cc:	4a27      	ldr	r2, [pc, #156]	; (800666c <SPI_MspInit+0xc4>)
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065d4:	4b25      	ldr	r3, [pc, #148]	; (800666c <SPI_MspInit+0xc4>)
 80065d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	697b      	ldr	r3, [r7, #20]
  NUCLEO_SPI_MOSI_GPIO_CLK_ENABLE();
 80065e0:	4b22      	ldr	r3, [pc, #136]	; (800666c <SPI_MspInit+0xc4>)
 80065e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e4:	4a21      	ldr	r2, [pc, #132]	; (800666c <SPI_MspInit+0xc4>)
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065ec:	4b1f      	ldr	r3, [pc, #124]	; (800666c <SPI_MspInit+0xc4>)
 80065ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPI_MISO_GPIO_CLK_ENABLE();
 80065f8:	4b1c      	ldr	r3, [pc, #112]	; (800666c <SPI_MspInit+0xc4>)
 80065fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fc:	4a1b      	ldr	r2, [pc, #108]	; (800666c <SPI_MspInit+0xc4>)
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006604:	4b19      	ldr	r3, [pc, #100]	; (800666c <SPI_MspInit+0xc4>)
 8006606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	68fb      	ldr	r3, [r7, #12]

  /* Configure SPI SCK */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_SCK_PIN;
 8006610:	2320      	movs	r3, #32
 8006612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006614:	2302      	movs	r3, #2
 8006616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006618:	2301      	movs	r3, #1
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800661c:	2303      	movs	r3, #3
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = NUCLEO_SPI_SCK_AF;
 8006620:	2305      	movs	r3, #5
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006624:	f107 031c 	add.w	r3, r7, #28
 8006628:	4619      	mov	r1, r3
 800662a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800662e:	f7fb f8b5 	bl	800179c <HAL_GPIO_Init>

  /* Configure SPI MOSI */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_MOSI_PIN;
 8006632:	2380      	movs	r3, #128	; 0x80
 8006634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MOSI_AF;
 8006636:	2305      	movs	r3, #5
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 800663a:	2302      	movs	r3, #2
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800663e:	f107 031c 	add.w	r3, r7, #28
 8006642:	4619      	mov	r1, r3
 8006644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006648:	f7fb f8a8 	bl	800179c <HAL_GPIO_Init>

  /* Configure SPI MISO */
  GPIO_InitStruct.Pin = NUCLEO_SPI_MISO_PIN;
 800664c:	2340      	movs	r3, #64	; 0x40
 800664e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MISO_AF;
 8006650:	2305      	movs	r3, #5
 8006652:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006654:	f107 031c 	add.w	r3, r7, #28
 8006658:	4619      	mov	r1, r3
 800665a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800665e:	f7fb f89d 	bl	800179c <HAL_GPIO_Init>
}
 8006662:	bf00      	nop
 8006664:	3730      	adds	r7, #48	; 0x30
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40021000 	.word	0x40021000

08006670 <USER_CheckStatus>:
#define DISABLE_SD_INIT
/* Private variables ---------------------------------------------------------*/
/* Disk status */
static volatile DSTATUS Stat = STA_NOINIT;
static DSTATUS USER_CheckStatus(BYTE lun)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <USER_CheckStatus+0x3c>)
 800667c:	2201      	movs	r2, #1
 800667e:	701a      	strb	r2, [r3, #0]
  // TO DO:
  if(MY_SD_GetCardState(0) == BSP_ERROR_NONE)
 8006680:	2000      	movs	r0, #0
 8006682:	f7fe ffc7 	bl	8005614 <MY_SD_GetCardState>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d107      	bne.n	800669c <USER_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 800668c:	4b07      	ldr	r3, [pc, #28]	; (80066ac <USER_CheckStatus+0x3c>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f023 0301 	bic.w	r3, r3, #1
 8006696:	b2da      	uxtb	r2, r3
 8006698:	4b04      	ldr	r3, [pc, #16]	; (80066ac <USER_CheckStatus+0x3c>)
 800669a:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800669c:	4b03      	ldr	r3, [pc, #12]	; (80066ac <USER_CheckStatus+0x3c>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b2db      	uxtb	r3, r3
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	2000000c 	.word	0x2000000c

080066b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80066ba:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <USER_initialize+0x30>)
 80066bc:	2201      	movs	r2, #1
 80066be:	701a      	strb	r2, [r3, #0]
	  if(MY_SD_Init(0) == BSP_ERROR_NONE)
	  {
		Stat = USER_CheckStatus(pdrv);
	  }
	#else
	  Stat = USER_CheckStatus(pdrv);
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff ffd4 	bl	8006670 <USER_CheckStatus>
 80066c8:	4603      	mov	r3, r0
 80066ca:	461a      	mov	r2, r3
 80066cc:	4b04      	ldr	r3, [pc, #16]	; (80066e0 <USER_initialize+0x30>)
 80066ce:	701a      	strb	r2, [r3, #0]
	#endif
    return Stat;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <USER_initialize+0x30>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	2000000c 	.word	0x2000000c

080066e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_CheckStatus(pdrv);
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff ffbd 	bl	8006670 <USER_CheckStatus>
 80066f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	4603      	mov	r3, r0
 800670e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	DRESULT res = RES_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_ReadBlocks(0, (uint32_t*)buff,
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	68b9      	ldr	r1, [r7, #8]
 800671a:	2000      	movs	r0, #0
 800671c:	f7fe fdac 	bl	8005278 <MY_SD_ReadBlocks>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d108      	bne.n	8006738 <USER_read+0x38>
						   (uint32_t) (sector),
						   count) == BSP_ERROR_NONE)
	  {
		/* wait until the read operation is finished */
		while( MY_SD_GetCardState(0)!= BSP_ERROR_NONE)
 8006726:	bf00      	nop
 8006728:	2000      	movs	r0, #0
 800672a:	f7fe ff73 	bl	8005614 <MY_SD_GetCardState>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1f9      	bne.n	8006728 <USER_read+0x28>
		{
		}
		res = RES_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	75fb      	strb	r3, [r7, #23]
	  }
	  return res;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END READ */
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006742:	b580      	push	{r7, lr}
 8006744:	b086      	sub	sp, #24
 8006746:	af00      	add	r7, sp, #0
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
 800674e:	4603      	mov	r3, r0
 8006750:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	DRESULT res = RES_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_WriteBlocks(0, (uint32_t*)buff,
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	2000      	movs	r0, #0
 800675e:	f7fe fe57 	bl	8005410 <MY_SD_WriteBlocks>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d108      	bne.n	800677a <USER_write+0x38>
	                        (uint32_t)(sector),
	                        count) == BSP_ERROR_NONE)
	  {
	  /* wait until the Write operation is finished */
	    while(MY_SD_GetCardState(0) != BSP_ERROR_NONE)
 8006768:	bf00      	nop
 800676a:	2000      	movs	r0, #0
 800676c:	f7fe ff52 	bl	8005614 <MY_SD_GetCardState>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f9      	bne.n	800676a <USER_write+0x28>
	    {
	    }
	    res = RES_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]
	  }

	  return res;
 800677a:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END WRITE */
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b096      	sub	sp, #88	; 0x58
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	603a      	str	r2, [r7, #0]
 800678e:	71fb      	strb	r3, [r7, #7]
 8006790:	460b      	mov	r3, r1
 8006792:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  SD_CardInfo_t CardInfo;

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800679a:	4b26      	ldr	r3, [pc, #152]	; (8006834 <USER_ioctl+0xb0>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <USER_ioctl+0x28>
 80067a8:	2303      	movs	r3, #3
 80067aa:	e03f      	b.n	800682c <USER_ioctl+0xa8>

	  switch (cmd)
 80067ac:	79bb      	ldrb	r3, [r7, #6]
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d837      	bhi.n	8006822 <USER_ioctl+0x9e>
 80067b2:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <USER_ioctl+0x34>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067c9 	.word	0x080067c9
 80067bc:	080067d1 	.word	0x080067d1
 80067c0:	080067eb 	.word	0x080067eb
 80067c4:	08006807 	.word	0x08006807
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 80067ce:	e02b      	b.n	8006828 <USER_ioctl+0xa4>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    MY_SD_GetCardInfo(0, &CardInfo);
 80067d0:	f107 0308 	add.w	r3, r7, #8
 80067d4:	4619      	mov	r1, r3
 80067d6:	2000      	movs	r0, #0
 80067d8:	f7fe ff54 	bl	8005684 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80067dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 80067e8:	e01e      	b.n	8006828 <USER_ioctl+0xa4>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 80067ea:	f107 0308 	add.w	r3, r7, #8
 80067ee:	4619      	mov	r1, r3
 80067f0:	2000      	movs	r0, #0
 80067f2:	f7fe ff47 	bl	8005684 <MY_SD_GetCardInfo>
	    *(WORD*)buff = CardInfo.LogBlockSize;
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8006804:	e010      	b.n	8006828 <USER_ioctl+0xa4>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8006806:	f107 0308 	add.w	r3, r7, #8
 800680a:	4619      	mov	r1, r3
 800680c:	2000      	movs	r0, #0
 800680e:	f7fe ff39 	bl	8005684 <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006814:	0a5a      	lsrs	r2, r3, #9
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8006820:	e002      	b.n	8006828 <USER_ioctl+0xa4>

	  default:
	    res = RES_PARERR;
 8006822:	2304      	movs	r3, #4
 8006824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  }

	  return res;
 8006828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END IOCTL */
}
 800682c:	4618      	mov	r0, r3
 800682e:	3758      	adds	r7, #88	; 0x58
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	2000000c 	.word	0x2000000c

08006838 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006842:	79fb      	ldrb	r3, [r7, #7]
 8006844:	4a08      	ldr	r2, [pc, #32]	; (8006868 <disk_status+0x30>)
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	79fa      	ldrb	r2, [r7, #7]
 8006850:	4905      	ldr	r1, [pc, #20]	; (8006868 <disk_status+0x30>)
 8006852:	440a      	add	r2, r1
 8006854:	7a12      	ldrb	r2, [r2, #8]
 8006856:	4610      	mov	r0, r2
 8006858:	4798      	blx	r3
 800685a:	4603      	mov	r3, r0
 800685c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20000070 	.word	0x20000070

0800686c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	4a0d      	ldr	r2, [pc, #52]	; (80068b4 <disk_initialize+0x48>)
 800687e:	5cd3      	ldrb	r3, [r2, r3]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d111      	bne.n	80068a8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	4a0b      	ldr	r2, [pc, #44]	; (80068b4 <disk_initialize+0x48>)
 8006888:	2101      	movs	r1, #1
 800688a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <disk_initialize+0x48>)
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	79fa      	ldrb	r2, [r7, #7]
 800689a:	4906      	ldr	r1, [pc, #24]	; (80068b4 <disk_initialize+0x48>)
 800689c:	440a      	add	r2, r1
 800689e:	7a12      	ldrb	r2, [r2, #8]
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000070 	.word	0x20000070

080068b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80068b8:	b590      	push	{r4, r7, lr}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	4603      	mov	r3, r0
 80068c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <disk_read+0x3c>)
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	689c      	ldr	r4, [r3, #8]
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	4a07      	ldr	r2, [pc, #28]	; (80068f4 <disk_read+0x3c>)
 80068d8:	4413      	add	r3, r2
 80068da:	7a18      	ldrb	r0, [r3, #8]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	47a0      	blx	r4
 80068e4:	4603      	mov	r3, r0
 80068e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80068e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd90      	pop	{r4, r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000070 	.word	0x20000070

080068f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	607a      	str	r2, [r7, #4]
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	4603      	mov	r3, r0
 8006906:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	4a0a      	ldr	r2, [pc, #40]	; (8006934 <disk_write+0x3c>)
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	68dc      	ldr	r4, [r3, #12]
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	4a07      	ldr	r2, [pc, #28]	; (8006934 <disk_write+0x3c>)
 8006918:	4413      	add	r3, r2
 800691a:	7a18      	ldrb	r0, [r3, #8]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	47a0      	blx	r4
 8006924:	4603      	mov	r3, r0
 8006926:	75fb      	strb	r3, [r7, #23]
  return res;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
}
 800692a:	4618      	mov	r0, r3
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	bd90      	pop	{r4, r7, pc}
 8006932:	bf00      	nop
 8006934:	20000070 	.word	0x20000070

08006938 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	603a      	str	r2, [r7, #0]
 8006942:	71fb      	strb	r3, [r7, #7]
 8006944:	460b      	mov	r3, r1
 8006946:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	4a09      	ldr	r2, [pc, #36]	; (8006970 <disk_ioctl+0x38>)
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	79fa      	ldrb	r2, [r7, #7]
 8006956:	4906      	ldr	r1, [pc, #24]	; (8006970 <disk_ioctl+0x38>)
 8006958:	440a      	add	r2, r1
 800695a:	7a10      	ldrb	r0, [r2, #8]
 800695c:	79b9      	ldrb	r1, [r7, #6]
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	4798      	blx	r3
 8006962:	4603      	mov	r3, r0
 8006964:	73fb      	strb	r3, [r7, #15]
  return res;
 8006966:	7bfb      	ldrb	r3, [r7, #15]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20000070 	.word	0x20000070

08006974 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3301      	adds	r3, #1
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006984:	89fb      	ldrh	r3, [r7, #14]
 8006986:	021b      	lsls	r3, r3, #8
 8006988:	b21a      	sxth	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	b21b      	sxth	r3, r3
 8006990:	4313      	orrs	r3, r2
 8006992:	b21b      	sxth	r3, r3
 8006994:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006996:	89fb      	ldrh	r3, [r7, #14]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3303      	adds	r3, #3
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	021b      	lsls	r3, r3, #8
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	3202      	adds	r2, #2
 80069bc:	7812      	ldrb	r2, [r2, #0]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	021b      	lsls	r3, r3, #8
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	3201      	adds	r2, #1
 80069ca:	7812      	ldrb	r2, [r2, #0]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	021b      	lsls	r3, r3, #8
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
	return rv;
 80069dc:	68fb      	ldr	r3, [r7, #12]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	887a      	ldrh	r2, [r7, #2]
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	887b      	ldrh	r3, [r7, #2]
 8006a04:	0a1b      	lsrs	r3, r3, #8
 8006a06:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	607a      	str	r2, [r7, #4]
 8006a0e:	887a      	ldrh	r2, [r7, #2]
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	0a1b      	lsrs	r3, r3, #8
 8006a3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	0a1b      	lsrs	r3, r3, #8
 8006a4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	0a1b      	lsrs	r3, r3, #8
 8006a5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	607a      	str	r2, [r7, #4]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	701a      	strb	r2, [r3, #0]
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00d      	beq.n	8006aae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	1c53      	adds	r3, r2, #1
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	1c59      	adds	r1, r3, #1
 8006a9c:	6179      	str	r1, [r7, #20]
 8006a9e:	7812      	ldrb	r2, [r2, #0]
 8006aa0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1f1      	bne.n	8006a92 <mem_cpy+0x1a>
	}
}
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006aba:	b480      	push	{r7}
 8006abc:	b087      	sub	sp, #28
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	617a      	str	r2, [r7, #20]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	607b      	str	r3, [r7, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f3      	bne.n	8006aca <mem_set+0x10>
}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006aee:	b480      	push	{r7}
 8006af0:	b089      	sub	sp, #36	; 0x24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	61fa      	str	r2, [r7, #28]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	61ba      	str	r2, [r7, #24]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	1acb      	subs	r3, r1, r3
 8006b1a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	607b      	str	r3, [r7, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <mem_cmp+0x40>
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0eb      	beq.n	8006b06 <mem_cmp+0x18>

	return r;
 8006b2e:	697b      	ldr	r3, [r7, #20]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3724      	adds	r7, #36	; 0x24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006b46:	e002      	b.n	8006b4e <chk_chr+0x12>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	607b      	str	r3, [r7, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d005      	beq.n	8006b62 <chk_chr+0x26>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d1f2      	bne.n	8006b48 <chk_chr+0xc>
	return *str;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	781b      	ldrb	r3, [r3, #0]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
	...

08006b74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	e029      	b.n	8006bdc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006b88:	4a27      	ldr	r2, [pc, #156]	; (8006c28 <chk_lock+0xb4>)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	4413      	add	r3, r2
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01d      	beq.n	8006bd2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b96:	4a24      	ldr	r2, [pc, #144]	; (8006c28 <chk_lock+0xb4>)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	4413      	add	r3, r2
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d116      	bne.n	8006bd6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006ba8:	4a1f      	ldr	r2, [pc, #124]	; (8006c28 <chk_lock+0xb4>)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	4413      	add	r3, r2
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d10c      	bne.n	8006bd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006bbc:	4a1a      	ldr	r2, [pc, #104]	; (8006c28 <chk_lock+0xb4>)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d102      	bne.n	8006bd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006bd0:	e007      	b.n	8006be2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d9d2      	bls.n	8006b88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d109      	bne.n	8006bfc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d102      	bne.n	8006bf4 <chk_lock+0x80>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d101      	bne.n	8006bf8 <chk_lock+0x84>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	e010      	b.n	8006c1a <chk_lock+0xa6>
 8006bf8:	2312      	movs	r3, #18
 8006bfa:	e00e      	b.n	8006c1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d108      	bne.n	8006c14 <chk_lock+0xa0>
 8006c02:	4a09      	ldr	r2, [pc, #36]	; (8006c28 <chk_lock+0xb4>)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	4413      	add	r3, r2
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c12:	d101      	bne.n	8006c18 <chk_lock+0xa4>
 8006c14:	2310      	movs	r3, #16
 8006c16:	e000      	b.n	8006c1a <chk_lock+0xa6>
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20000050 	.word	0x20000050

08006c2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c32:	2300      	movs	r3, #0
 8006c34:	607b      	str	r3, [r7, #4]
 8006c36:	e002      	b.n	8006c3e <enq_lock+0x12>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	607b      	str	r3, [r7, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d806      	bhi.n	8006c52 <enq_lock+0x26>
 8006c44:	4a09      	ldr	r2, [pc, #36]	; (8006c6c <enq_lock+0x40>)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	4413      	add	r3, r2
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f2      	bne.n	8006c38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	bf14      	ite	ne
 8006c58:	2301      	movne	r3, #1
 8006c5a:	2300      	moveq	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	20000050 	.word	0x20000050

08006c70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	e01f      	b.n	8006cc0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006c80:	4a41      	ldr	r2, [pc, #260]	; (8006d88 <inc_lock+0x118>)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	4413      	add	r3, r2
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d113      	bne.n	8006cba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006c92:	4a3d      	ldr	r2, [pc, #244]	; (8006d88 <inc_lock+0x118>)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	011b      	lsls	r3, r3, #4
 8006c98:	4413      	add	r3, r2
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d109      	bne.n	8006cba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006ca6:	4a38      	ldr	r2, [pc, #224]	; (8006d88 <inc_lock+0x118>)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	4413      	add	r3, r2
 8006cae:	3308      	adds	r3, #8
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d006      	beq.n	8006cc8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d9dc      	bls.n	8006c80 <inc_lock+0x10>
 8006cc6:	e000      	b.n	8006cca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006cc8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d132      	bne.n	8006d36 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e002      	b.n	8006cdc <inc_lock+0x6c>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d806      	bhi.n	8006cf0 <inc_lock+0x80>
 8006ce2:	4a29      	ldr	r2, [pc, #164]	; (8006d88 <inc_lock+0x118>)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	4413      	add	r3, r2
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f2      	bne.n	8006cd6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d101      	bne.n	8006cfa <inc_lock+0x8a>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e040      	b.n	8006d7c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4922      	ldr	r1, [pc, #136]	; (8006d88 <inc_lock+0x118>)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	440b      	add	r3, r1
 8006d06:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	491e      	ldr	r1, [pc, #120]	; (8006d88 <inc_lock+0x118>)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	011b      	lsls	r3, r3, #4
 8006d12:	440b      	add	r3, r1
 8006d14:	3304      	adds	r3, #4
 8006d16:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	695a      	ldr	r2, [r3, #20]
 8006d1c:	491a      	ldr	r1, [pc, #104]	; (8006d88 <inc_lock+0x118>)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	440b      	add	r3, r1
 8006d24:	3308      	adds	r3, #8
 8006d26:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006d28:	4a17      	ldr	r2, [pc, #92]	; (8006d88 <inc_lock+0x118>)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	4413      	add	r3, r2
 8006d30:	330c      	adds	r3, #12
 8006d32:	2200      	movs	r2, #0
 8006d34:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <inc_lock+0xe0>
 8006d3c:	4a12      	ldr	r2, [pc, #72]	; (8006d88 <inc_lock+0x118>)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	4413      	add	r3, r2
 8006d44:	330c      	adds	r3, #12
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <inc_lock+0xe0>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e015      	b.n	8006d7c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d108      	bne.n	8006d68 <inc_lock+0xf8>
 8006d56:	4a0c      	ldr	r2, [pc, #48]	; (8006d88 <inc_lock+0x118>)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	4413      	add	r3, r2
 8006d5e:	330c      	adds	r3, #12
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	e001      	b.n	8006d6c <inc_lock+0xfc>
 8006d68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d6c:	4906      	ldr	r1, [pc, #24]	; (8006d88 <inc_lock+0x118>)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	440b      	add	r3, r1
 8006d74:	330c      	adds	r3, #12
 8006d76:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	20000050 	.word	0x20000050

08006d8c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d825      	bhi.n	8006dec <dec_lock+0x60>
		n = Files[i].ctr;
 8006da0:	4a17      	ldr	r2, [pc, #92]	; (8006e00 <dec_lock+0x74>)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	4413      	add	r3, r2
 8006da8:	330c      	adds	r3, #12
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006dae:	89fb      	ldrh	r3, [r7, #14]
 8006db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db4:	d101      	bne.n	8006dba <dec_lock+0x2e>
 8006db6:	2300      	movs	r3, #0
 8006db8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006dba:	89fb      	ldrh	r3, [r7, #14]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <dec_lock+0x3a>
 8006dc0:	89fb      	ldrh	r3, [r7, #14]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006dc6:	4a0e      	ldr	r2, [pc, #56]	; (8006e00 <dec_lock+0x74>)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	4413      	add	r3, r2
 8006dce:	330c      	adds	r3, #12
 8006dd0:	89fa      	ldrh	r2, [r7, #14]
 8006dd2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006dd4:	89fb      	ldrh	r3, [r7, #14]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <dec_lock+0x5a>
 8006dda:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <dec_lock+0x74>)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	4413      	add	r3, r2
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	737b      	strb	r3, [r7, #13]
 8006dea:	e001      	b.n	8006df0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006dec:	2302      	movs	r3, #2
 8006dee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006df0:	7b7b      	ldrb	r3, [r7, #13]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20000050 	.word	0x20000050

08006e04 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	e010      	b.n	8006e34 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006e12:	4a0d      	ldr	r2, [pc, #52]	; (8006e48 <clear_lock+0x44>)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	4413      	add	r3, r2
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d105      	bne.n	8006e2e <clear_lock+0x2a>
 8006e22:	4a09      	ldr	r2, [pc, #36]	; (8006e48 <clear_lock+0x44>)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	4413      	add	r3, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3301      	adds	r3, #1
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d9eb      	bls.n	8006e12 <clear_lock+0xe>
	}
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	20000050 	.word	0x20000050

08006e4c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	78db      	ldrb	r3, [r3, #3]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d034      	beq.n	8006eca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	7858      	ldrb	r0, [r3, #1]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e70:	2301      	movs	r3, #1
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	f7ff fd40 	bl	80068f8 <disk_write>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	73fb      	strb	r3, [r7, #15]
 8006e82:	e022      	b.n	8006eca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	1ad2      	subs	r2, r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d217      	bcs.n	8006eca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	789b      	ldrb	r3, [r3, #2]
 8006e9e:	613b      	str	r3, [r7, #16]
 8006ea0:	e010      	b.n	8006ec4 <sync_window+0x78>
					wsect += fs->fsize;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	7858      	ldrb	r0, [r3, #1]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	f7ff fd1d 	bl	80068f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	613b      	str	r3, [r7, #16]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d8eb      	bhi.n	8006ea2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d01b      	beq.n	8006f24 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff ffad 	bl	8006e4c <sync_window>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d113      	bne.n	8006f24 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	7858      	ldrb	r0, [r3, #1]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f06:	2301      	movs	r3, #1
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	f7ff fcd5 	bl	80068b8 <disk_read>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006f14:	f04f 33ff 	mov.w	r3, #4294967295
 8006f18:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff ff87 	bl	8006e4c <sync_window>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d158      	bne.n	8006ffa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d148      	bne.n	8006fe2 <sync_fs+0xb2>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	791b      	ldrb	r3, [r3, #4]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d144      	bne.n	8006fe2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3330      	adds	r3, #48	; 0x30
 8006f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f60:	2100      	movs	r1, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff fda9 	bl	8006aba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3330      	adds	r3, #48	; 0x30
 8006f6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f70:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff fd38 	bl	80069ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3330      	adds	r3, #48	; 0x30
 8006f7e:	4921      	ldr	r1, [pc, #132]	; (8007004 <sync_fs+0xd4>)
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff fd4d 	bl	8006a20 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3330      	adds	r3, #48	; 0x30
 8006f8a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006f8e:	491e      	ldr	r1, [pc, #120]	; (8007008 <sync_fs+0xd8>)
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff fd45 	bl	8006a20 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3330      	adds	r3, #48	; 0x30
 8006f9a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f7ff fd3b 	bl	8006a20 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3330      	adds	r3, #48	; 0x30
 8006fae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f7ff fd31 	bl	8006a20 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	7858      	ldrb	r0, [r3, #1]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f7ff fc8e 	bl	80068f8 <disk_write>
			fs->fsi_flag = 0;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	2100      	movs	r1, #0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff fca4 	bl	8006938 <disk_ioctl>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <sync_fs+0xca>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	41615252 	.word	0x41615252
 8007008:	61417272 	.word	0x61417272

0800700c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	3b02      	subs	r3, #2
 800701a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	3b02      	subs	r3, #2
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d301      	bcc.n	800702c <clust2sect+0x20>
 8007028:	2300      	movs	r3, #0
 800702a:	e008      	b.n	800703e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	895b      	ldrh	r3, [r3, #10]
 8007030:	461a      	mov	r2, r3
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	fb03 f202 	mul.w	r2, r3, r2
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	4413      	add	r3, r2
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b086      	sub	sp, #24
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d904      	bls.n	800706a <get_fat+0x20>
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d302      	bcc.n	8007070 <get_fat+0x26>
		val = 1;	/* Internal error */
 800706a:	2301      	movs	r3, #1
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	e08c      	b.n	800718a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007070:	f04f 33ff 	mov.w	r3, #4294967295
 8007074:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d045      	beq.n	800710a <get_fat+0xc0>
 800707e:	2b03      	cmp	r3, #3
 8007080:	d05d      	beq.n	800713e <get_fat+0xf4>
 8007082:	2b01      	cmp	r3, #1
 8007084:	d177      	bne.n	8007176 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	085b      	lsrs	r3, r3, #1
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	6a1a      	ldr	r2, [r3, #32]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	0a5b      	lsrs	r3, r3, #9
 800709c:	4413      	add	r3, r2
 800709e:	4619      	mov	r1, r3
 80070a0:	6938      	ldr	r0, [r7, #16]
 80070a2:	f7ff ff17 	bl	8006ed4 <move_window>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d167      	bne.n	800717c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	60fa      	str	r2, [r7, #12]
 80070b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4413      	add	r3, r2
 80070ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070be:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	6a1a      	ldr	r2, [r3, #32]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	0a5b      	lsrs	r3, r3, #9
 80070c8:	4413      	add	r3, r2
 80070ca:	4619      	mov	r1, r3
 80070cc:	6938      	ldr	r0, [r7, #16]
 80070ce:	f7ff ff01 	bl	8006ed4 <move_window>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d153      	bne.n	8007180 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4413      	add	r3, r2
 80070e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	461a      	mov	r2, r3
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <get_fat+0xb6>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	091b      	lsrs	r3, r3, #4
 80070fe:	e002      	b.n	8007106 <get_fat+0xbc>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007106:	617b      	str	r3, [r7, #20]
			break;
 8007108:	e03f      	b.n	800718a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	6a1a      	ldr	r2, [r3, #32]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	0a1b      	lsrs	r3, r3, #8
 8007112:	4413      	add	r3, r2
 8007114:	4619      	mov	r1, r3
 8007116:	6938      	ldr	r0, [r7, #16]
 8007118:	f7ff fedc 	bl	8006ed4 <move_window>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d130      	bne.n	8007184 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	005b      	lsls	r3, r3, #1
 800712c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007130:	4413      	add	r3, r2
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff fc1e 	bl	8006974 <ld_word>
 8007138:	4603      	mov	r3, r0
 800713a:	617b      	str	r3, [r7, #20]
			break;
 800713c:	e025      	b.n	800718a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	09db      	lsrs	r3, r3, #7
 8007146:	4413      	add	r3, r2
 8007148:	4619      	mov	r1, r3
 800714a:	6938      	ldr	r0, [r7, #16]
 800714c:	f7ff fec2 	bl	8006ed4 <move_window>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d118      	bne.n	8007188 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007164:	4413      	add	r3, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff fc1c 	bl	80069a4 <ld_dword>
 800716c:	4603      	mov	r3, r0
 800716e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007172:	617b      	str	r3, [r7, #20]
			break;
 8007174:	e009      	b.n	800718a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007176:	2301      	movs	r3, #1
 8007178:	617b      	str	r3, [r7, #20]
 800717a:	e006      	b.n	800718a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800717c:	bf00      	nop
 800717e:	e004      	b.n	800718a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007180:	bf00      	nop
 8007182:	e002      	b.n	800718a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007184:	bf00      	nop
 8007186:	e000      	b.n	800718a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007188:	bf00      	nop
		}
	}

	return val;
 800718a:	697b      	ldr	r3, [r7, #20]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007194:	b590      	push	{r4, r7, lr}
 8007196:	b089      	sub	sp, #36	; 0x24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80071a0:	2302      	movs	r3, #2
 80071a2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	f240 80d6 	bls.w	8007358 <put_fat+0x1c4>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	f080 80d0 	bcs.w	8007358 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d073      	beq.n	80072a8 <put_fat+0x114>
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	f000 8091 	beq.w	80072e8 <put_fat+0x154>
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	f040 80c6 	bne.w	8007358 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	085b      	lsrs	r3, r3, #1
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	4413      	add	r3, r2
 80071d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1a      	ldr	r2, [r3, #32]
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	0a5b      	lsrs	r3, r3, #9
 80071e2:	4413      	add	r3, r2
 80071e4:	4619      	mov	r1, r3
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f7ff fe74 	bl	8006ed4 <move_window>
 80071ec:	4603      	mov	r3, r0
 80071ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071f0:	7ffb      	ldrb	r3, [r7, #31]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 80a9 	bne.w	800734a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	1c59      	adds	r1, r3, #1
 8007202:	61b9      	str	r1, [r7, #24]
 8007204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007208:	4413      	add	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00d      	beq.n	8007232 <put_fat+0x9e>
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	b25b      	sxtb	r3, r3
 800721c:	f003 030f 	and.w	r3, r3, #15
 8007220:	b25a      	sxtb	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	b25b      	sxtb	r3, r3
 800722a:	4313      	orrs	r3, r2
 800722c:	b25b      	sxtb	r3, r3
 800722e:	b2db      	uxtb	r3, r3
 8007230:	e001      	b.n	8007236 <put_fat+0xa2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a1a      	ldr	r2, [r3, #32]
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	0a5b      	lsrs	r3, r3, #9
 8007248:	4413      	add	r3, r2
 800724a:	4619      	mov	r1, r3
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff fe41 	bl	8006ed4 <move_window>
 8007252:	4603      	mov	r3, r0
 8007254:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007256:	7ffb      	ldrb	r3, [r7, #31]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d178      	bne.n	800734e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007268:	4413      	add	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <put_fat+0xea>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	091b      	lsrs	r3, r3, #4
 800727a:	b2db      	uxtb	r3, r3
 800727c:	e00e      	b.n	800729c <put_fat+0x108>
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	b25b      	sxtb	r3, r3
 8007284:	f023 030f 	bic.w	r3, r3, #15
 8007288:	b25a      	sxtb	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	0a1b      	lsrs	r3, r3, #8
 800728e:	b25b      	sxtb	r3, r3
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	b25b      	sxtb	r3, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	b25b      	sxtb	r3, r3
 800729a:	b2db      	uxtb	r3, r3
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	70da      	strb	r2, [r3, #3]
			break;
 80072a6:	e057      	b.n	8007358 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a1a      	ldr	r2, [r3, #32]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	4413      	add	r3, r2
 80072b2:	4619      	mov	r1, r3
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7ff fe0d 	bl	8006ed4 <move_window>
 80072ba:	4603      	mov	r3, r0
 80072bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072be:	7ffb      	ldrb	r3, [r7, #31]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d146      	bne.n	8007352 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80072d2:	4413      	add	r3, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	b292      	uxth	r2, r2
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff fb85 	bl	80069ea <st_word>
			fs->wflag = 1;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2201      	movs	r2, #1
 80072e4:	70da      	strb	r2, [r3, #3]
			break;
 80072e6:	e037      	b.n	8007358 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	09db      	lsrs	r3, r3, #7
 80072f0:	4413      	add	r3, r2
 80072f2:	4619      	mov	r1, r3
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7ff fded 	bl	8006ed4 <move_window>
 80072fa:	4603      	mov	r3, r0
 80072fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072fe:	7ffb      	ldrb	r3, [r7, #31]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d128      	bne.n	8007356 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007318:	4413      	add	r3, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fb42 	bl	80069a4 <ld_dword>
 8007320:	4603      	mov	r3, r0
 8007322:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007326:	4323      	orrs	r3, r4
 8007328:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007338:	4413      	add	r3, r2
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	4618      	mov	r0, r3
 800733e:	f7ff fb6f 	bl	8006a20 <st_dword>
			fs->wflag = 1;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2201      	movs	r2, #1
 8007346:	70da      	strb	r2, [r3, #3]
			break;
 8007348:	e006      	b.n	8007358 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800734a:	bf00      	nop
 800734c:	e004      	b.n	8007358 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800734e:	bf00      	nop
 8007350:	e002      	b.n	8007358 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007352:	bf00      	nop
 8007354:	e000      	b.n	8007358 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007356:	bf00      	nop
		}
	}
	return res;
 8007358:	7ffb      	ldrb	r3, [r7, #31]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3724      	adds	r7, #36	; 0x24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd90      	pop	{r4, r7, pc}

08007362 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b088      	sub	sp, #32
 8007366:	af00      	add	r7, sp, #0
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d904      	bls.n	8007388 <remove_chain+0x26>
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	429a      	cmp	r2, r3
 8007386:	d301      	bcc.n	800738c <remove_chain+0x2a>
 8007388:	2302      	movs	r3, #2
 800738a:	e04b      	b.n	8007424 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00c      	beq.n	80073ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007392:	f04f 32ff 	mov.w	r2, #4294967295
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	69b8      	ldr	r0, [r7, #24]
 800739a:	f7ff fefb 	bl	8007194 <put_fat>
 800739e:	4603      	mov	r3, r0
 80073a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80073a2:	7ffb      	ldrb	r3, [r7, #31]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <remove_chain+0x4a>
 80073a8:	7ffb      	ldrb	r3, [r7, #31]
 80073aa:	e03b      	b.n	8007424 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff fe4b 	bl	800704a <get_fat>
 80073b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d031      	beq.n	8007420 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <remove_chain+0x64>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e02e      	b.n	8007424 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073cc:	d101      	bne.n	80073d2 <remove_chain+0x70>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e028      	b.n	8007424 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80073d2:	2200      	movs	r2, #0
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	69b8      	ldr	r0, [r7, #24]
 80073d8:	f7ff fedc 	bl	8007194 <put_fat>
 80073dc:	4603      	mov	r3, r0
 80073de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80073e0:	7ffb      	ldrb	r3, [r7, #31]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <remove_chain+0x88>
 80073e6:	7ffb      	ldrb	r3, [r7, #31]
 80073e8:	e01c      	b.n	8007424 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	3b02      	subs	r3, #2
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d20b      	bcs.n	8007410 <remove_chain+0xae>
			fs->free_clst++;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	791b      	ldrb	r3, [r3, #4]
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	b2da      	uxtb	r2, r3
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	429a      	cmp	r2, r3
 800741c:	d3c6      	bcc.n	80073ac <remove_chain+0x4a>
 800741e:	e000      	b.n	8007422 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007420:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10d      	bne.n	800745e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d004      	beq.n	8007458 <create_chain+0x2c>
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	429a      	cmp	r2, r3
 8007456:	d31b      	bcc.n	8007490 <create_chain+0x64>
 8007458:	2301      	movs	r3, #1
 800745a:	61bb      	str	r3, [r7, #24]
 800745c:	e018      	b.n	8007490 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff fdf2 	bl	800704a <get_fat>
 8007466:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d801      	bhi.n	8007472 <create_chain+0x46>
 800746e:	2301      	movs	r3, #1
 8007470:	e070      	b.n	8007554 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d101      	bne.n	800747e <create_chain+0x52>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	e06a      	b.n	8007554 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	429a      	cmp	r2, r3
 8007486:	d201      	bcs.n	800748c <create_chain+0x60>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	e063      	b.n	8007554 <create_chain+0x128>
		scl = clst;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	3301      	adds	r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d307      	bcc.n	80074b4 <create_chain+0x88>
				ncl = 2;
 80074a4:	2302      	movs	r3, #2
 80074a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d901      	bls.n	80074b4 <create_chain+0x88>
 80074b0:	2300      	movs	r3, #0
 80074b2:	e04f      	b.n	8007554 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80074b4:	69f9      	ldr	r1, [r7, #28]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff fdc7 	bl	800704a <get_fat>
 80074bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00e      	beq.n	80074e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d003      	beq.n	80074d2 <create_chain+0xa6>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d0:	d101      	bne.n	80074d6 <create_chain+0xaa>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	e03e      	b.n	8007554 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d1da      	bne.n	8007494 <create_chain+0x68>
 80074de:	2300      	movs	r3, #0
 80074e0:	e038      	b.n	8007554 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80074e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80074e4:	f04f 32ff 	mov.w	r2, #4294967295
 80074e8:	69f9      	ldr	r1, [r7, #28]
 80074ea:	6938      	ldr	r0, [r7, #16]
 80074ec:	f7ff fe52 	bl	8007194 <put_fat>
 80074f0:	4603      	mov	r3, r0
 80074f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d109      	bne.n	800750e <create_chain+0xe2>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d006      	beq.n	800750e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6938      	ldr	r0, [r7, #16]
 8007506:	f7ff fe45 	bl	8007194 <put_fat>
 800750a:	4603      	mov	r3, r0
 800750c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800750e:	7dfb      	ldrb	r3, [r7, #23]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d116      	bne.n	8007542 <create_chain+0x116>
		fs->last_clst = ncl;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	691a      	ldr	r2, [r3, #16]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	3b02      	subs	r3, #2
 8007524:	429a      	cmp	r2, r3
 8007526:	d804      	bhi.n	8007532 <create_chain+0x106>
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	1e5a      	subs	r2, r3, #1
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	791b      	ldrb	r3, [r3, #4]
 8007536:	f043 0301 	orr.w	r3, r3, #1
 800753a:	b2da      	uxtb	r2, r3
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	711a      	strb	r2, [r3, #4]
 8007540:	e007      	b.n	8007552 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d102      	bne.n	800754e <create_chain+0x122>
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
 800754c:	e000      	b.n	8007550 <create_chain+0x124>
 800754e:	2301      	movs	r3, #1
 8007550:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007552:	69fb      	ldr	r3, [r7, #28]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800755c:	b480      	push	{r7}
 800755e:	b087      	sub	sp, #28
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	3304      	adds	r3, #4
 8007572:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	0a5b      	lsrs	r3, r3, #9
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	8952      	ldrh	r2, [r2, #10]
 800757c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007580:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	1d1a      	adds	r2, r3, #4
 8007586:	613a      	str	r2, [r7, #16]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <clmt_clust+0x3a>
 8007592:	2300      	movs	r3, #0
 8007594:	e010      	b.n	80075b8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	429a      	cmp	r2, r3
 800759c:	d307      	bcc.n	80075ae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	3304      	adds	r3, #4
 80075aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80075ac:	e7e9      	b.n	8007582 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80075ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	4413      	add	r3, r2
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075da:	d204      	bcs.n	80075e6 <dir_sdi+0x22>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <dir_sdi+0x26>
		return FR_INT_ERR;
 80075e6:	2302      	movs	r3, #2
 80075e8:	e063      	b.n	80076b2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d106      	bne.n	800760a <dir_sdi+0x46>
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d902      	bls.n	800760a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10c      	bne.n	800762a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	8912      	ldrh	r2, [r2, #8]
 8007618:	4293      	cmp	r3, r2
 800761a:	d301      	bcc.n	8007620 <dir_sdi+0x5c>
 800761c:	2302      	movs	r3, #2
 800761e:	e048      	b.n	80076b2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	61da      	str	r2, [r3, #28]
 8007628:	e029      	b.n	800767e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	895b      	ldrh	r3, [r3, #10]
 800762e:	025b      	lsls	r3, r3, #9
 8007630:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007632:	e019      	b.n	8007668 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6979      	ldr	r1, [r7, #20]
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fd06 	bl	800704a <get_fat>
 800763e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007646:	d101      	bne.n	800764c <dir_sdi+0x88>
 8007648:	2301      	movs	r3, #1
 800764a:	e032      	b.n	80076b2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d904      	bls.n	800765c <dir_sdi+0x98>
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	429a      	cmp	r2, r3
 800765a:	d301      	bcc.n	8007660 <dir_sdi+0x9c>
 800765c:	2302      	movs	r3, #2
 800765e:	e028      	b.n	80076b2 <dir_sdi+0xee>
			ofs -= csz;
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	429a      	cmp	r2, r3
 800766e:	d2e1      	bcs.n	8007634 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007670:	6979      	ldr	r1, [r7, #20]
 8007672:	6938      	ldr	r0, [r7, #16]
 8007674:	f7ff fcca 	bl	800700c <clust2sect>
 8007678:	4602      	mov	r2, r0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <dir_sdi+0xcc>
 800768c:	2302      	movs	r3, #2
 800768e:	e010      	b.n	80076b2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	0a5b      	lsrs	r3, r3, #9
 8007698:	441a      	add	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076aa:	441a      	add	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b086      	sub	sp, #24
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	3320      	adds	r3, #32
 80076d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <dir_next+0x28>
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076e0:	d301      	bcc.n	80076e6 <dir_next+0x2c>
 80076e2:	2304      	movs	r3, #4
 80076e4:	e0aa      	b.n	800783c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f040 8098 	bne.w	8007822 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10b      	bne.n	800771c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	095b      	lsrs	r3, r3, #5
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	8912      	ldrh	r2, [r2, #8]
 800770c:	4293      	cmp	r3, r2
 800770e:	f0c0 8088 	bcc.w	8007822 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	61da      	str	r2, [r3, #28]
 8007718:	2304      	movs	r3, #4
 800771a:	e08f      	b.n	800783c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	0a5b      	lsrs	r3, r3, #9
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	8952      	ldrh	r2, [r2, #10]
 8007724:	3a01      	subs	r2, #1
 8007726:	4013      	ands	r3, r2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d17a      	bne.n	8007822 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	4619      	mov	r1, r3
 8007734:	4610      	mov	r0, r2
 8007736:	f7ff fc88 	bl	800704a <get_fat>
 800773a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d801      	bhi.n	8007746 <dir_next+0x8c>
 8007742:	2302      	movs	r3, #2
 8007744:	e07a      	b.n	800783c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774c:	d101      	bne.n	8007752 <dir_next+0x98>
 800774e:	2301      	movs	r3, #1
 8007750:	e074      	b.n	800783c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	429a      	cmp	r2, r3
 800775a:	d358      	bcc.n	800780e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	61da      	str	r2, [r3, #28]
 8007768:	2304      	movs	r3, #4
 800776a:	e067      	b.n	800783c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	4619      	mov	r1, r3
 8007774:	4610      	mov	r0, r2
 8007776:	f7ff fe59 	bl	800742c <create_chain>
 800777a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <dir_next+0xcc>
 8007782:	2307      	movs	r3, #7
 8007784:	e05a      	b.n	800783c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <dir_next+0xd6>
 800778c:	2302      	movs	r3, #2
 800778e:	e055      	b.n	800783c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007796:	d101      	bne.n	800779c <dir_next+0xe2>
 8007798:	2301      	movs	r3, #1
 800779a:	e04f      	b.n	800783c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff fb55 	bl	8006e4c <sync_window>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <dir_next+0xf2>
 80077a8:	2301      	movs	r3, #1
 80077aa:	e047      	b.n	800783c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3330      	adds	r3, #48	; 0x30
 80077b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff f97f 	bl	8006aba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80077bc:	2300      	movs	r3, #0
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	6979      	ldr	r1, [r7, #20]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff fc22 	bl	800700c <clust2sect>
 80077c8:	4602      	mov	r2, r0
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80077ce:	e012      	b.n	80077f6 <dir_next+0x13c>
						fs->wflag = 1;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f7ff fb38 	bl	8006e4c <sync_window>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <dir_next+0x12c>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e02a      	b.n	800783c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	3301      	adds	r3, #1
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	895b      	ldrh	r3, [r3, #10]
 80077fa:	461a      	mov	r2, r3
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	4293      	cmp	r3, r2
 8007800:	d3e6      	bcc.n	80077d0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	1ad2      	subs	r2, r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007814:	6979      	ldr	r1, [r7, #20]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f7ff fbf8 	bl	800700c <clust2sect>
 800781c:	4602      	mov	r2, r0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007834:	441a      	add	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007854:	2100      	movs	r1, #0
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff feb4 	bl	80075c4 <dir_sdi>
 800785c:	4603      	mov	r3, r0
 800785e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d12b      	bne.n	80078be <dir_alloc+0x7a>
		n = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	4619      	mov	r1, r3
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff fb2f 	bl	8006ed4 <move_window>
 8007876:	4603      	mov	r3, r0
 8007878:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800787a:	7dfb      	ldrb	r3, [r7, #23]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d11d      	bne.n	80078bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a1b      	ldr	r3, [r3, #32]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	2be5      	cmp	r3, #229	; 0xe5
 8007888:	d004      	beq.n	8007894 <dir_alloc+0x50>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d107      	bne.n	80078a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	3301      	adds	r3, #1
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d102      	bne.n	80078a8 <dir_alloc+0x64>
 80078a2:	e00c      	b.n	80078be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80078a4:	2300      	movs	r3, #0
 80078a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80078a8:	2101      	movs	r1, #1
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff ff05 	bl	80076ba <dir_next>
 80078b0:	4603      	mov	r3, r0
 80078b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0d7      	beq.n	800786a <dir_alloc+0x26>
 80078ba:	e000      	b.n	80078be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80078bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d101      	bne.n	80078c8 <dir_alloc+0x84>
 80078c4:	2307      	movs	r3, #7
 80078c6:	75fb      	strb	r3, [r7, #23]
	return res;
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	331a      	adds	r3, #26
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff f847 	bl	8006974 <ld_word>
 80078e6:	4603      	mov	r3, r0
 80078e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d109      	bne.n	8007906 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	3314      	adds	r3, #20
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff f83c 	bl	8006974 <ld_word>
 80078fc:	4603      	mov	r3, r0
 80078fe:	041b      	lsls	r3, r3, #16
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007906:	68fb      	ldr	r3, [r7, #12]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	331a      	adds	r3, #26
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	b292      	uxth	r2, r2
 8007924:	4611      	mov	r1, r2
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff f85f 	bl	80069ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b03      	cmp	r3, #3
 8007932:	d109      	bne.n	8007948 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f103 0214 	add.w	r2, r3, #20
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	b29b      	uxth	r3, r3
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f7ff f851 	bl	80069ea <st_word>
	}
}
 8007948:	bf00      	nop
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800795e:	2100      	movs	r1, #0
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff fe2f 	bl	80075c4 <dir_sdi>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <dir_find+0x24>
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	e03e      	b.n	80079f2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	4619      	mov	r1, r3
 800797a:	6938      	ldr	r0, [r7, #16]
 800797c:	f7ff faaa 	bl	8006ed4 <move_window>
 8007980:	4603      	mov	r3, r0
 8007982:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d12f      	bne.n	80079ea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <dir_find+0x4e>
 8007998:	2304      	movs	r3, #4
 800799a:	75fb      	strb	r3, [r7, #23]
 800799c:	e028      	b.n	80079f0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	330b      	adds	r3, #11
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	330b      	adds	r3, #11
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	f003 0308 	and.w	r3, r3, #8
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <dir_find+0x86>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a18      	ldr	r0, [r3, #32]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3324      	adds	r3, #36	; 0x24
 80079c8:	220b      	movs	r2, #11
 80079ca:	4619      	mov	r1, r3
 80079cc:	f7ff f88f 	bl	8006aee <mem_cmp>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00b      	beq.n	80079ee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80079d6:	2100      	movs	r1, #0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff fe6e 	bl	80076ba <dir_next>
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0c5      	beq.n	8007974 <dir_find+0x24>
 80079e8:	e002      	b.n	80079f0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80079ea:	bf00      	nop
 80079ec:	e000      	b.n	80079f0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80079ee:	bf00      	nop

	return res;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007a08:	2101      	movs	r1, #1
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff ff1a 	bl	8007844 <dir_alloc>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d11c      	bne.n	8007a54 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	68b8      	ldr	r0, [r7, #8]
 8007a22:	f7ff fa57 	bl	8006ed4 <move_window>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d111      	bne.n	8007a54 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	2220      	movs	r2, #32
 8007a36:	2100      	movs	r1, #0
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff f83e 	bl	8006aba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a18      	ldr	r0, [r3, #32]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3324      	adds	r3, #36	; 0x24
 8007a46:	220b      	movs	r2, #11
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f7ff f815 	bl	8006a78 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2201      	movs	r2, #1
 8007a52:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3324      	adds	r3, #36	; 0x24
 8007a74:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007a76:	220b      	movs	r2, #11
 8007a78:	2120      	movs	r1, #32
 8007a7a:	68b8      	ldr	r0, [r7, #8]
 8007a7c:	f7ff f81d 	bl	8006aba <mem_set>
	si = i = 0; ni = 8;
 8007a80:	2300      	movs	r3, #0
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	2308      	movs	r3, #8
 8007a8a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	617a      	str	r2, [r7, #20]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	4413      	add	r3, r2
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007a9a:	7ffb      	ldrb	r3, [r7, #31]
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	d94e      	bls.n	8007b3e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007aa0:	7ffb      	ldrb	r3, [r7, #31]
 8007aa2:	2b2f      	cmp	r3, #47	; 0x2f
 8007aa4:	d006      	beq.n	8007ab4 <create_name+0x54>
 8007aa6:	7ffb      	ldrb	r3, [r7, #31]
 8007aa8:	2b5c      	cmp	r3, #92	; 0x5c
 8007aaa:	d110      	bne.n	8007ace <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007aac:	e002      	b.n	8007ab4 <create_name+0x54>
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	4413      	add	r3, r2
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b2f      	cmp	r3, #47	; 0x2f
 8007abe:	d0f6      	beq.n	8007aae <create_name+0x4e>
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b5c      	cmp	r3, #92	; 0x5c
 8007aca:	d0f0      	beq.n	8007aae <create_name+0x4e>
			break;
 8007acc:	e038      	b.n	8007b40 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007ace:	7ffb      	ldrb	r3, [r7, #31]
 8007ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ad2:	d003      	beq.n	8007adc <create_name+0x7c>
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d30c      	bcc.n	8007af6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	2b0b      	cmp	r3, #11
 8007ae0:	d002      	beq.n	8007ae8 <create_name+0x88>
 8007ae2:	7ffb      	ldrb	r3, [r7, #31]
 8007ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ae6:	d001      	beq.n	8007aec <create_name+0x8c>
 8007ae8:	2306      	movs	r3, #6
 8007aea:	e044      	b.n	8007b76 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007aec:	2308      	movs	r3, #8
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	230b      	movs	r3, #11
 8007af2:	61bb      	str	r3, [r7, #24]
			continue;
 8007af4:	e022      	b.n	8007b3c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007af6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da04      	bge.n	8007b08 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007afe:	7ffb      	ldrb	r3, [r7, #31]
 8007b00:	3b80      	subs	r3, #128	; 0x80
 8007b02:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <create_name+0x120>)
 8007b04:	5cd3      	ldrb	r3, [r2, r3]
 8007b06:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007b08:	7ffb      	ldrb	r3, [r7, #31]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	481d      	ldr	r0, [pc, #116]	; (8007b84 <create_name+0x124>)
 8007b0e:	f7ff f815 	bl	8006b3c <chk_chr>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <create_name+0xbc>
 8007b18:	2306      	movs	r3, #6
 8007b1a:	e02c      	b.n	8007b76 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007b1c:	7ffb      	ldrb	r3, [r7, #31]
 8007b1e:	2b60      	cmp	r3, #96	; 0x60
 8007b20:	d905      	bls.n	8007b2e <create_name+0xce>
 8007b22:	7ffb      	ldrb	r3, [r7, #31]
 8007b24:	2b7a      	cmp	r3, #122	; 0x7a
 8007b26:	d802      	bhi.n	8007b2e <create_name+0xce>
 8007b28:	7ffb      	ldrb	r3, [r7, #31]
 8007b2a:	3b20      	subs	r3, #32
 8007b2c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	613a      	str	r2, [r7, #16]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	4413      	add	r3, r2
 8007b38:	7ffa      	ldrb	r2, [r7, #31]
 8007b3a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007b3c:	e7a6      	b.n	8007a8c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007b3e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	441a      	add	r2, r3
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <create_name+0xf4>
 8007b50:	2306      	movs	r3, #6
 8007b52:	e010      	b.n	8007b76 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2be5      	cmp	r3, #229	; 0xe5
 8007b5a:	d102      	bne.n	8007b62 <create_name+0x102>
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2205      	movs	r2, #5
 8007b60:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b62:	7ffb      	ldrb	r3, [r7, #31]
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	d801      	bhi.n	8007b6c <create_name+0x10c>
 8007b68:	2204      	movs	r2, #4
 8007b6a:	e000      	b.n	8007b6e <create_name+0x10e>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	330b      	adds	r3, #11
 8007b72:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007b74:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3720      	adds	r7, #32
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	08008c38 	.word	0x08008c38
 8007b84:	08008bcc 	.word	0x08008bcc

08007b88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007b9c:	e002      	b.n	8007ba4 <follow_path+0x1c>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b2f      	cmp	r3, #47	; 0x2f
 8007baa:	d0f8      	beq.n	8007b9e <follow_path+0x16>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b5c      	cmp	r3, #92	; 0x5c
 8007bb2:	d0f4      	beq.n	8007b9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b1f      	cmp	r3, #31
 8007bc0:	d80a      	bhi.n	8007bd8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2280      	movs	r2, #128	; 0x80
 8007bc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007bca:	2100      	movs	r1, #0
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff fcf9 	bl	80075c4 <dir_sdi>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75fb      	strb	r3, [r7, #23]
 8007bd6:	e043      	b.n	8007c60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007bd8:	463b      	mov	r3, r7
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff ff3f 	bl	8007a60 <create_name>
 8007be2:	4603      	mov	r3, r0
 8007be4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d134      	bne.n	8007c56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff feaf 	bl	8007950 <dir_find>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007bfc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d127      	bne.n	8007c5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d122      	bne.n	8007c5a <follow_path+0xd2>
 8007c14:	2305      	movs	r3, #5
 8007c16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007c18:	e01f      	b.n	8007c5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d11c      	bne.n	8007c5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	799b      	ldrb	r3, [r3, #6]
 8007c28:	f003 0310 	and.w	r3, r3, #16
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d102      	bne.n	8007c36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007c30:	2305      	movs	r3, #5
 8007c32:	75fb      	strb	r3, [r7, #23]
 8007c34:	e014      	b.n	8007c60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c44:	4413      	add	r3, r2
 8007c46:	4619      	mov	r1, r3
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff fe42 	bl	80078d2 <ld_clust>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c54:	e7c0      	b.n	8007bd8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007c56:	bf00      	nop
 8007c58:	e002      	b.n	8007c60 <follow_path+0xd8>
				break;
 8007c5a:	bf00      	nop
 8007c5c:	e000      	b.n	8007c60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007c5e:	bf00      	nop
			}
		}
	}

	return res;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b087      	sub	sp, #28
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007c72:	f04f 33ff 	mov.w	r3, #4294967295
 8007c76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d031      	beq.n	8007ce4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	e002      	b.n	8007c8e <get_ldnumber+0x24>
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d903      	bls.n	8007c9e <get_ldnumber+0x34>
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b3a      	cmp	r3, #58	; 0x3a
 8007c9c:	d1f4      	bne.n	8007c88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b3a      	cmp	r3, #58	; 0x3a
 8007ca4:	d11c      	bne.n	8007ce0 <get_ldnumber+0x76>
			tp = *path;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	60fa      	str	r2, [r7, #12]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	3b30      	subs	r3, #48	; 0x30
 8007cb6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b09      	cmp	r3, #9
 8007cbc:	d80e      	bhi.n	8007cdc <get_ldnumber+0x72>
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d10a      	bne.n	8007cdc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d107      	bne.n	8007cdc <get_ldnumber+0x72>
					vol = (int)i;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	e002      	b.n	8007ce6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007ce4:	693b      	ldr	r3, [r7, #16]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	371c      	adds	r7, #28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
	...

08007cf4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	70da      	strb	r2, [r3, #3]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff f8e0 	bl	8006ed4 <move_window>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <check_fs+0x2a>
 8007d1a:	2304      	movs	r3, #4
 8007d1c:	e038      	b.n	8007d90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3330      	adds	r3, #48	; 0x30
 8007d22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fe24 	bl	8006974 <ld_word>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d001      	beq.n	8007d3c <check_fs+0x48>
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e029      	b.n	8007d90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d42:	2be9      	cmp	r3, #233	; 0xe9
 8007d44:	d009      	beq.n	8007d5a <check_fs+0x66>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d4c:	2beb      	cmp	r3, #235	; 0xeb
 8007d4e:	d11e      	bne.n	8007d8e <check_fs+0x9a>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007d56:	2b90      	cmp	r3, #144	; 0x90
 8007d58:	d119      	bne.n	8007d8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3330      	adds	r3, #48	; 0x30
 8007d5e:	3336      	adds	r3, #54	; 0x36
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fe fe1f 	bl	80069a4 <ld_dword>
 8007d66:	4603      	mov	r3, r0
 8007d68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d6c:	4a0a      	ldr	r2, [pc, #40]	; (8007d98 <check_fs+0xa4>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d101      	bne.n	8007d76 <check_fs+0x82>
 8007d72:	2300      	movs	r3, #0
 8007d74:	e00c      	b.n	8007d90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3330      	adds	r3, #48	; 0x30
 8007d7a:	3352      	adds	r3, #82	; 0x52
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fe11 	bl	80069a4 <ld_dword>
 8007d82:	4602      	mov	r2, r0
 8007d84:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <check_fs+0xa8>)
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d101      	bne.n	8007d8e <check_fs+0x9a>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e000      	b.n	8007d90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007d8e:	2302      	movs	r3, #2
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	00544146 	.word	0x00544146
 8007d9c:	33544146 	.word	0x33544146

08007da0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b096      	sub	sp, #88	; 0x58
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	4613      	mov	r3, r2
 8007dac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff ff58 	bl	8007c6a <get_ldnumber>
 8007dba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	da01      	bge.n	8007dc6 <find_volume+0x26>
 8007dc2:	230b      	movs	r3, #11
 8007dc4:	e22e      	b.n	8008224 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007dc6:	4aa8      	ldr	r2, [pc, #672]	; (8008068 <find_volume+0x2c8>)
 8007dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <find_volume+0x3a>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	e224      	b.n	8008224 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dde:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007de0:	79fb      	ldrb	r3, [r7, #7]
 8007de2:	f023 0301 	bic.w	r3, r3, #1
 8007de6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01a      	beq.n	8007e26 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	785b      	ldrb	r3, [r3, #1]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe fd1f 	bl	8006838 <disk_status>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007e00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10c      	bne.n	8007e26 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <find_volume+0x82>
 8007e12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007e1e:	230a      	movs	r3, #10
 8007e20:	e200      	b.n	8008224 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007e22:	2300      	movs	r3, #0
 8007e24:	e1fe      	b.n	8008224 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	785b      	ldrb	r3, [r3, #1]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fe fd17 	bl	800686c <disk_initialize>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007e44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007e50:	2303      	movs	r3, #3
 8007e52:	e1e7      	b.n	8008224 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d007      	beq.n	8007e6a <find_volume+0xca>
 8007e5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007e66:	230a      	movs	r3, #10
 8007e68:	e1dc      	b.n	8008224 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007e6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e72:	f7ff ff3f 	bl	8007cf4 <check_fs>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d14b      	bne.n	8007f1c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e84:	2300      	movs	r3, #0
 8007e86:	643b      	str	r3, [r7, #64]	; 0x40
 8007e88:	e01f      	b.n	8007eca <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007e98:	4413      	add	r3, r2
 8007e9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d006      	beq.n	8007eb4 <find_volume+0x114>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fd7a 	bl	80069a4 <ld_dword>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	e000      	b.n	8007eb6 <find_volume+0x116>
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007ebe:	440b      	add	r3, r1
 8007ec0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8007eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d9dc      	bls.n	8007e8a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <find_volume+0x140>
 8007eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007edc:	3b01      	subs	r3, #1
 8007ede:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007ee8:	4413      	add	r3, r2
 8007eea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007eee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <find_volume+0x162>
 8007ef6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ef8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007efa:	f7ff fefb 	bl	8007cf4 <check_fs>
 8007efe:	4603      	mov	r3, r0
 8007f00:	e000      	b.n	8007f04 <find_volume+0x164>
 8007f02:	2303      	movs	r3, #3
 8007f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d905      	bls.n	8007f1c <find_volume+0x17c>
 8007f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f12:	3301      	adds	r3, #1
 8007f14:	643b      	str	r3, [r7, #64]	; 0x40
 8007f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d9e1      	bls.n	8007ee0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d101      	bne.n	8007f28 <find_volume+0x188>
 8007f24:	2301      	movs	r3, #1
 8007f26:	e17d      	b.n	8008224 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007f28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d901      	bls.n	8007f34 <find_volume+0x194>
 8007f30:	230d      	movs	r3, #13
 8007f32:	e177      	b.n	8008224 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	3330      	adds	r3, #48	; 0x30
 8007f38:	330b      	adds	r3, #11
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fd1a 	bl	8006974 <ld_word>
 8007f40:	4603      	mov	r3, r0
 8007f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f46:	d001      	beq.n	8007f4c <find_volume+0x1ac>
 8007f48:	230d      	movs	r3, #13
 8007f4a:	e16b      	b.n	8008224 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	3330      	adds	r3, #48	; 0x30
 8007f50:	3316      	adds	r3, #22
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe fd0e 	bl	8006974 <ld_word>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <find_volume+0x1d0>
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	3330      	adds	r3, #48	; 0x30
 8007f66:	3324      	adds	r3, #36	; 0x24
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fe fd1b 	bl	80069a4 <ld_dword>
 8007f6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f74:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	789b      	ldrb	r3, [r3, #2]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d005      	beq.n	8007f94 <find_volume+0x1f4>
 8007f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8a:	789b      	ldrb	r3, [r3, #2]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d001      	beq.n	8007f94 <find_volume+0x1f4>
 8007f90:	230d      	movs	r3, #13
 8007f92:	e147      	b.n	8008224 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	789b      	ldrb	r3, [r3, #2]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f9c:	fb02 f303 	mul.w	r3, r2, r3
 8007fa0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	895b      	ldrh	r3, [r3, #10]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <find_volume+0x228>
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	895b      	ldrh	r3, [r3, #10]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbe:	895b      	ldrh	r3, [r3, #10]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <find_volume+0x22c>
 8007fc8:	230d      	movs	r3, #13
 8007fca:	e12b      	b.n	8008224 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	3330      	adds	r3, #48	; 0x30
 8007fd0:	3311      	adds	r3, #17
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe fcce 	bl	8006974 <ld_word>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	891b      	ldrh	r3, [r3, #8]
 8007fe4:	f003 030f 	and.w	r3, r3, #15
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <find_volume+0x252>
 8007fee:	230d      	movs	r3, #13
 8007ff0:	e118      	b.n	8008224 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	3330      	adds	r3, #48	; 0x30
 8007ff6:	3313      	adds	r3, #19
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe fcbb 	bl	8006974 <ld_word>
 8007ffe:	4603      	mov	r3, r0
 8008000:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <find_volume+0x276>
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	3330      	adds	r3, #48	; 0x30
 800800c:	3320      	adds	r3, #32
 800800e:	4618      	mov	r0, r3
 8008010:	f7fe fcc8 	bl	80069a4 <ld_dword>
 8008014:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	3330      	adds	r3, #48	; 0x30
 800801a:	330e      	adds	r3, #14
 800801c:	4618      	mov	r0, r3
 800801e:	f7fe fca9 	bl	8006974 <ld_word>
 8008022:	4603      	mov	r3, r0
 8008024:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008026:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <find_volume+0x290>
 800802c:	230d      	movs	r3, #13
 800802e:	e0f9      	b.n	8008224 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008030:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008034:	4413      	add	r3, r2
 8008036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008038:	8912      	ldrh	r2, [r2, #8]
 800803a:	0912      	lsrs	r2, r2, #4
 800803c:	b292      	uxth	r2, r2
 800803e:	4413      	add	r3, r2
 8008040:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008046:	429a      	cmp	r2, r3
 8008048:	d201      	bcs.n	800804e <find_volume+0x2ae>
 800804a:	230d      	movs	r3, #13
 800804c:	e0ea      	b.n	8008224 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800804e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008056:	8952      	ldrh	r2, [r2, #10]
 8008058:	fbb3 f3f2 	udiv	r3, r3, r2
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	2b00      	cmp	r3, #0
 8008062:	d103      	bne.n	800806c <find_volume+0x2cc>
 8008064:	230d      	movs	r3, #13
 8008066:	e0dd      	b.n	8008224 <find_volume+0x484>
 8008068:	20000048 	.word	0x20000048
		fmt = FS_FAT32;
 800806c:	2303      	movs	r3, #3
 800806e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008078:	4293      	cmp	r3, r2
 800807a:	d802      	bhi.n	8008082 <find_volume+0x2e2>
 800807c:	2302      	movs	r3, #2
 800807e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008088:	4293      	cmp	r3, r2
 800808a:	d802      	bhi.n	8008092 <find_volume+0x2f2>
 800808c:	2301      	movs	r3, #1
 800808e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	1c9a      	adds	r2, r3, #2
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800809e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80080a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80080a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080a4:	441a      	add	r2, r3
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80080aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	441a      	add	r2, r3
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80080b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d11e      	bne.n	80080fa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	3330      	adds	r3, #48	; 0x30
 80080c0:	332a      	adds	r3, #42	; 0x2a
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fc56 	bl	8006974 <ld_word>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <find_volume+0x332>
 80080ce:	230d      	movs	r3, #13
 80080d0:	e0a8      	b.n	8008224 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	891b      	ldrh	r3, [r3, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <find_volume+0x33e>
 80080da:	230d      	movs	r3, #13
 80080dc:	e0a2      	b.n	8008224 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	3330      	adds	r3, #48	; 0x30
 80080e2:	332c      	adds	r3, #44	; 0x2c
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe fc5d 	bl	80069a4 <ld_dword>
 80080ea:	4602      	mov	r2, r0
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	647b      	str	r3, [r7, #68]	; 0x44
 80080f8:	e01f      	b.n	800813a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	891b      	ldrh	r3, [r3, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <find_volume+0x366>
 8008102:	230d      	movs	r3, #13
 8008104:	e08e      	b.n	8008224 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	6a1a      	ldr	r2, [r3, #32]
 800810a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800810c:	441a      	add	r2, r3
 800810e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008110:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008112:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008116:	2b02      	cmp	r3, #2
 8008118:	d103      	bne.n	8008122 <find_volume+0x382>
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	e00a      	b.n	8008138 <find_volume+0x398>
 8008122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008124:	695a      	ldr	r2, [r3, #20]
 8008126:	4613      	mov	r3, r2
 8008128:	005b      	lsls	r3, r3, #1
 800812a:	4413      	add	r3, r2
 800812c:	085a      	lsrs	r2, r3, #1
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008138:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800813a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813c:	699a      	ldr	r2, [r3, #24]
 800813e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008140:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008144:	0a5b      	lsrs	r3, r3, #9
 8008146:	429a      	cmp	r2, r3
 8008148:	d201      	bcs.n	800814e <find_volume+0x3ae>
 800814a:	230d      	movs	r3, #13
 800814c:	e06a      	b.n	8008224 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	f04f 32ff 	mov.w	r2, #4294967295
 8008154:	611a      	str	r2, [r3, #16]
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	691a      	ldr	r2, [r3, #16]
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800815e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008160:	2280      	movs	r2, #128	; 0x80
 8008162:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008164:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008168:	2b03      	cmp	r3, #3
 800816a:	d149      	bne.n	8008200 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800816c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816e:	3330      	adds	r3, #48	; 0x30
 8008170:	3330      	adds	r3, #48	; 0x30
 8008172:	4618      	mov	r0, r3
 8008174:	f7fe fbfe 	bl	8006974 <ld_word>
 8008178:	4603      	mov	r3, r0
 800817a:	2b01      	cmp	r3, #1
 800817c:	d140      	bne.n	8008200 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800817e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008180:	3301      	adds	r3, #1
 8008182:	4619      	mov	r1, r3
 8008184:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008186:	f7fe fea5 	bl	8006ed4 <move_window>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d137      	bne.n	8008200 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	2200      	movs	r2, #0
 8008194:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	3330      	adds	r3, #48	; 0x30
 800819a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe fbe8 	bl	8006974 <ld_word>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d127      	bne.n	8008200 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	3330      	adds	r3, #48	; 0x30
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fe fbf5 	bl	80069a4 <ld_dword>
 80081ba:	4602      	mov	r2, r0
 80081bc:	4b1b      	ldr	r3, [pc, #108]	; (800822c <find_volume+0x48c>)
 80081be:	429a      	cmp	r2, r3
 80081c0:	d11e      	bne.n	8008200 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	3330      	adds	r3, #48	; 0x30
 80081c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe fbea 	bl	80069a4 <ld_dword>
 80081d0:	4602      	mov	r2, r0
 80081d2:	4b17      	ldr	r3, [pc, #92]	; (8008230 <find_volume+0x490>)
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d113      	bne.n	8008200 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	3330      	adds	r3, #48	; 0x30
 80081dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fe fbdf 	bl	80069a4 <ld_dword>
 80081e6:	4602      	mov	r2, r0
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	3330      	adds	r3, #48	; 0x30
 80081f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fe fbd5 	bl	80069a4 <ld_dword>
 80081fa:	4602      	mov	r2, r0
 80081fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fe:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008206:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008208:	4b0a      	ldr	r3, [pc, #40]	; (8008234 <find_volume+0x494>)
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	3301      	adds	r3, #1
 800820e:	b29a      	uxth	r2, r3
 8008210:	4b08      	ldr	r3, [pc, #32]	; (8008234 <find_volume+0x494>)
 8008212:	801a      	strh	r2, [r3, #0]
 8008214:	4b07      	ldr	r3, [pc, #28]	; (8008234 <find_volume+0x494>)
 8008216:	881a      	ldrh	r2, [r3, #0]
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800821c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800821e:	f7fe fdf1 	bl	8006e04 <clear_lock>
#endif
	return FR_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3758      	adds	r7, #88	; 0x58
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	41615252 	.word	0x41615252
 8008230:	61417272 	.word	0x61417272
 8008234:	2000004c 	.word	0x2000004c

08008238 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008242:	2309      	movs	r3, #9
 8008244:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01c      	beq.n	8008286 <validate+0x4e>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d018      	beq.n	8008286 <validate+0x4e>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d013      	beq.n	8008286 <validate+0x4e>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	889a      	ldrh	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	88db      	ldrh	r3, [r3, #6]
 8008268:	429a      	cmp	r2, r3
 800826a:	d10c      	bne.n	8008286 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	785b      	ldrb	r3, [r3, #1]
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe fae0 	bl	8006838 <disk_status>
 8008278:	4603      	mov	r3, r0
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <validate+0x4e>
			res = FR_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d102      	bne.n	8008292 <validate+0x5a>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	e000      	b.n	8008294 <validate+0x5c>
 8008292:	2300      	movs	r3, #0
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	6013      	str	r3, [r2, #0]
	return res;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80082b6:	f107 0310 	add.w	r3, r7, #16
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff fcd5 	bl	8007c6a <get_ldnumber>
 80082c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	da01      	bge.n	80082cc <f_mount+0x28>
 80082c8:	230b      	movs	r3, #11
 80082ca:	e02b      	b.n	8008324 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80082cc:	4a17      	ldr	r2, [pc, #92]	; (800832c <f_mount+0x88>)
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80082dc:	69b8      	ldr	r0, [r7, #24]
 80082de:	f7fe fd91 	bl	8006e04 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2200      	movs	r2, #0
 80082e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	490d      	ldr	r1, [pc, #52]	; (800832c <f_mount+0x88>)
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <f_mount+0x66>
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d001      	beq.n	800830e <f_mount+0x6a>
 800830a:	2300      	movs	r3, #0
 800830c:	e00a      	b.n	8008324 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800830e:	f107 010c 	add.w	r1, r7, #12
 8008312:	f107 0308 	add.w	r3, r7, #8
 8008316:	2200      	movs	r2, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff fd41 	bl	8007da0 <find_volume>
 800831e:	4603      	mov	r3, r0
 8008320:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008322:	7dfb      	ldrb	r3, [r7, #23]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3720      	adds	r7, #32
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20000048 	.word	0x20000048

08008330 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b098      	sub	sp, #96	; 0x60
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	4613      	mov	r3, r2
 800833c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <f_open+0x18>
 8008344:	2309      	movs	r3, #9
 8008346:	e1ad      	b.n	80086a4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008348:	79fb      	ldrb	r3, [r7, #7]
 800834a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800834e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008350:	79fa      	ldrb	r2, [r7, #7]
 8008352:	f107 0110 	add.w	r1, r7, #16
 8008356:	f107 0308 	add.w	r3, r7, #8
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff fd20 	bl	8007da0 <find_volume>
 8008360:	4603      	mov	r3, r0
 8008362:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800836a:	2b00      	cmp	r3, #0
 800836c:	f040 8191 	bne.w	8008692 <f_open+0x362>
		dj.obj.fs = fs;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	f107 0314 	add.w	r3, r7, #20
 800837a:	4611      	mov	r1, r2
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fc03 	bl	8007b88 <follow_path>
 8008382:	4603      	mov	r3, r0
 8008384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008388:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800838c:	2b00      	cmp	r3, #0
 800838e:	d11a      	bne.n	80083c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008390:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008394:	b25b      	sxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	da03      	bge.n	80083a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800839a:	2306      	movs	r3, #6
 800839c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80083a0:	e011      	b.n	80083c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	f023 0301 	bic.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bf14      	ite	ne
 80083ac:	2301      	movne	r3, #1
 80083ae:	2300      	moveq	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	461a      	mov	r2, r3
 80083b4:	f107 0314 	add.w	r3, r7, #20
 80083b8:	4611      	mov	r1, r2
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe fbda 	bl	8006b74 <chk_lock>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	f003 031c 	and.w	r3, r3, #28
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d07f      	beq.n	80084d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80083d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d017      	beq.n	8008408 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80083d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d10e      	bne.n	80083fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80083e0:	f7fe fc24 	bl	8006c2c <enq_lock>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d006      	beq.n	80083f8 <f_open+0xc8>
 80083ea:	f107 0314 	add.w	r3, r7, #20
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7ff fb03 	bl	80079fa <dir_register>
 80083f4:	4603      	mov	r3, r0
 80083f6:	e000      	b.n	80083fa <f_open+0xca>
 80083f8:	2312      	movs	r3, #18
 80083fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	f043 0308 	orr.w	r3, r3, #8
 8008404:	71fb      	strb	r3, [r7, #7]
 8008406:	e010      	b.n	800842a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008408:	7ebb      	ldrb	r3, [r7, #26]
 800840a:	f003 0311 	and.w	r3, r3, #17
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <f_open+0xea>
					res = FR_DENIED;
 8008412:	2307      	movs	r3, #7
 8008414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008418:	e007      	b.n	800842a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <f_open+0xfa>
 8008424:	2308      	movs	r3, #8
 8008426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800842a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800842e:	2b00      	cmp	r3, #0
 8008430:	d168      	bne.n	8008504 <f_open+0x1d4>
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b00      	cmp	r3, #0
 800843a:	d063      	beq.n	8008504 <f_open+0x1d4>
				dw = GET_FATTIME();
 800843c:	f7fc fef0 	bl	8005220 <get_fattime>
 8008440:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	330e      	adds	r3, #14
 8008446:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008448:	4618      	mov	r0, r3
 800844a:	f7fe fae9 	bl	8006a20 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800844e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008450:	3316      	adds	r3, #22
 8008452:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008454:	4618      	mov	r0, r3
 8008456:	f7fe fae3 	bl	8006a20 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800845a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845c:	330b      	adds	r3, #11
 800845e:	2220      	movs	r2, #32
 8008460:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f7ff fa32 	bl	80078d2 <ld_clust>
 800846e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008474:	2200      	movs	r2, #0
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff fa4a 	bl	8007910 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800847c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847e:	331c      	adds	r3, #28
 8008480:	2100      	movs	r1, #0
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe facc 	bl	8006a20 <st_dword>
					fs->wflag = 1;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	2201      	movs	r2, #1
 800848c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800848e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008490:	2b00      	cmp	r3, #0
 8008492:	d037      	beq.n	8008504 <f_open+0x1d4>
						dw = fs->winsect;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800849a:	f107 0314 	add.w	r3, r7, #20
 800849e:	2200      	movs	r2, #0
 80084a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe ff5d 	bl	8007362 <remove_chain>
 80084a8:	4603      	mov	r3, r0
 80084aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80084ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d126      	bne.n	8008504 <f_open+0x1d4>
							res = move_window(fs, dw);
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fd0a 	bl	8006ed4 <move_window>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084ca:	3a01      	subs	r2, #1
 80084cc:	60da      	str	r2, [r3, #12]
 80084ce:	e019      	b.n	8008504 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80084d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d115      	bne.n	8008504 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80084d8:	7ebb      	ldrb	r3, [r7, #26]
 80084da:	f003 0310 	and.w	r3, r3, #16
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <f_open+0x1ba>
					res = FR_NO_FILE;
 80084e2:	2304      	movs	r3, #4
 80084e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80084e8:	e00c      	b.n	8008504 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	f003 0302 	and.w	r3, r3, #2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d007      	beq.n	8008504 <f_open+0x1d4>
 80084f4:	7ebb      	ldrb	r3, [r7, #26]
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <f_open+0x1d4>
						res = FR_DENIED;
 80084fe:	2307      	movs	r3, #7
 8008500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008508:	2b00      	cmp	r3, #0
 800850a:	d128      	bne.n	800855e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800851c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800852c:	79fb      	ldrb	r3, [r7, #7]
 800852e:	f023 0301 	bic.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	bf14      	ite	ne
 8008536:	2301      	movne	r3, #1
 8008538:	2300      	moveq	r3, #0
 800853a:	b2db      	uxtb	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	f107 0314 	add.w	r3, r7, #20
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe fb93 	bl	8006c70 <inc_lock>
 800854a:	4602      	mov	r2, r0
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d102      	bne.n	800855e <f_open+0x22e>
 8008558:	2302      	movs	r3, #2
 800855a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800855e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008562:	2b00      	cmp	r3, #0
 8008564:	f040 8095 	bne.w	8008692 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff f9af 	bl	80078d2 <ld_clust>
 8008574:	4602      	mov	r2, r0
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857c:	331c      	adds	r3, #28
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fa10 	bl	80069a4 <ld_dword>
 8008584:	4602      	mov	r2, r0
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	88da      	ldrh	r2, [r3, #6]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	79fa      	ldrb	r2, [r7, #7]
 80085a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3330      	adds	r3, #48	; 0x30
 80085ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085be:	2100      	movs	r1, #0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fe fa7a 	bl	8006aba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d060      	beq.n	8008692 <f_open+0x362>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d05c      	beq.n	8008692 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	895b      	ldrh	r3, [r3, #10]
 80085e4:	025b      	lsls	r3, r3, #9
 80085e6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	657b      	str	r3, [r7, #84]	; 0x54
 80085f4:	e016      	b.n	8008624 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fd25 	bl	800704a <get_fat>
 8008600:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008604:	2b01      	cmp	r3, #1
 8008606:	d802      	bhi.n	800860e <f_open+0x2de>
 8008608:	2302      	movs	r3, #2
 800860a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800860e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d102      	bne.n	800861c <f_open+0x2ec>
 8008616:	2301      	movs	r3, #1
 8008618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800861c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800861e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	657b      	str	r3, [r7, #84]	; 0x54
 8008624:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008628:	2b00      	cmp	r3, #0
 800862a:	d103      	bne.n	8008634 <f_open+0x304>
 800862c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800862e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008630:	429a      	cmp	r2, r3
 8008632:	d8e0      	bhi.n	80085f6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008638:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800863a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800863e:	2b00      	cmp	r3, #0
 8008640:	d127      	bne.n	8008692 <f_open+0x362>
 8008642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008648:	2b00      	cmp	r3, #0
 800864a:	d022      	beq.n	8008692 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008650:	4618      	mov	r0, r3
 8008652:	f7fe fcdb 	bl	800700c <clust2sect>
 8008656:	6478      	str	r0, [r7, #68]	; 0x44
 8008658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800865a:	2b00      	cmp	r3, #0
 800865c:	d103      	bne.n	8008666 <f_open+0x336>
						res = FR_INT_ERR;
 800865e:	2302      	movs	r3, #2
 8008660:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008664:	e015      	b.n	8008692 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008668:	0a5a      	lsrs	r2, r3, #9
 800866a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866c:	441a      	add	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	7858      	ldrb	r0, [r3, #1]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a1a      	ldr	r2, [r3, #32]
 8008680:	2301      	movs	r3, #1
 8008682:	f7fe f919 	bl	80068b8 <disk_read>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <f_open+0x362>
 800868c:	2301      	movs	r3, #1
 800868e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008696:	2b00      	cmp	r3, #0
 8008698:	d002      	beq.n	80086a0 <f_open+0x370>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80086a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3760      	adds	r7, #96	; 0x60
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08e      	sub	sp, #56	; 0x38
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f107 0214 	add.w	r2, r7, #20
 80086ca:	4611      	mov	r1, r2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7ff fdb3 	bl	8008238 <validate>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80086d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d107      	bne.n	80086f0 <f_read+0x44>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	7d5b      	ldrb	r3, [r3, #21]
 80086e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80086e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <f_read+0x4a>
 80086f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086f4:	e115      	b.n	8008922 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	7d1b      	ldrb	r3, [r3, #20]
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <f_read+0x5a>
 8008702:	2307      	movs	r3, #7
 8008704:	e10d      	b.n	8008922 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68da      	ldr	r2, [r3, #12]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	429a      	cmp	r2, r3
 8008718:	f240 80fe 	bls.w	8008918 <f_read+0x26c>
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008720:	e0fa      	b.n	8008918 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872a:	2b00      	cmp	r3, #0
 800872c:	f040 80c6 	bne.w	80088bc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	0a5b      	lsrs	r3, r3, #9
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	8952      	ldrh	r2, [r2, #10]
 800873a:	3a01      	subs	r2, #1
 800873c:	4013      	ands	r3, r2
 800873e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d12f      	bne.n	80087a6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d103      	bne.n	8008756 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	633b      	str	r3, [r7, #48]	; 0x30
 8008754:	e013      	b.n	800877e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d007      	beq.n	800876e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	4619      	mov	r1, r3
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7fe fef9 	bl	800755c <clmt_clust>
 800876a:	6338      	str	r0, [r7, #48]	; 0x30
 800876c:	e007      	b.n	800877e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	4619      	mov	r1, r3
 8008776:	4610      	mov	r0, r2
 8008778:	f7fe fc67 	bl	800704a <get_fat>
 800877c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	2b01      	cmp	r3, #1
 8008782:	d804      	bhi.n	800878e <f_read+0xe2>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2202      	movs	r2, #2
 8008788:	755a      	strb	r2, [r3, #21]
 800878a:	2302      	movs	r3, #2
 800878c:	e0c9      	b.n	8008922 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008794:	d104      	bne.n	80087a0 <f_read+0xf4>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	755a      	strb	r2, [r3, #21]
 800879c:	2301      	movs	r3, #1
 800879e:	e0c0      	b.n	8008922 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087a4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f7fe fc2c 	bl	800700c <clust2sect>
 80087b4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <f_read+0x11a>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2202      	movs	r2, #2
 80087c0:	755a      	strb	r2, [r3, #21]
 80087c2:	2302      	movs	r3, #2
 80087c4:	e0ad      	b.n	8008922 <f_read+0x276>
			sect += csect;
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	0a5b      	lsrs	r3, r3, #9
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d039      	beq.n	800884e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	4413      	add	r3, r2
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	8952      	ldrh	r2, [r2, #10]
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d905      	bls.n	80087f4 <f_read+0x148>
					cc = fs->csize - csect;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	895b      	ldrh	r3, [r3, #10]
 80087ec:	461a      	mov	r2, r3
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	7858      	ldrb	r0, [r3, #1]
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087fe:	f7fe f85b 	bl	80068b8 <disk_read>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d004      	beq.n	8008812 <f_read+0x166>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2201      	movs	r2, #1
 800880c:	755a      	strb	r2, [r3, #21]
 800880e:	2301      	movs	r3, #1
 8008810:	e087      	b.n	8008922 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	7d1b      	ldrb	r3, [r3, #20]
 8008816:	b25b      	sxtb	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	da14      	bge.n	8008846 <f_read+0x19a>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6a1a      	ldr	r2, [r3, #32]
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008826:	429a      	cmp	r2, r3
 8008828:	d90d      	bls.n	8008846 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a1a      	ldr	r2, [r3, #32]
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	025b      	lsls	r3, r3, #9
 8008834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008836:	18d0      	adds	r0, r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3330      	adds	r3, #48	; 0x30
 800883c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008840:	4619      	mov	r1, r3
 8008842:	f7fe f919 	bl	8006a78 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008848:	025b      	lsls	r3, r3, #9
 800884a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800884c:	e050      	b.n	80088f0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	429a      	cmp	r2, r3
 8008856:	d02e      	beq.n	80088b6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	7d1b      	ldrb	r3, [r3, #20]
 800885c:	b25b      	sxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	da18      	bge.n	8008894 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	7858      	ldrb	r0, [r3, #1]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a1a      	ldr	r2, [r3, #32]
 8008870:	2301      	movs	r3, #1
 8008872:	f7fe f841 	bl	80068f8 <disk_write>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <f_read+0x1da>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2201      	movs	r2, #1
 8008880:	755a      	strb	r2, [r3, #21]
 8008882:	2301      	movs	r3, #1
 8008884:	e04d      	b.n	8008922 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	7d1b      	ldrb	r3, [r3, #20]
 800888a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888e:	b2da      	uxtb	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	7858      	ldrb	r0, [r3, #1]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800889e:	2301      	movs	r3, #1
 80088a0:	69ba      	ldr	r2, [r7, #24]
 80088a2:	f7fe f809 	bl	80068b8 <disk_read>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d004      	beq.n	80088b6 <f_read+0x20a>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2201      	movs	r2, #1
 80088b0:	755a      	strb	r2, [r3, #21]
 80088b2:	2301      	movs	r3, #1
 80088b4:	e035      	b.n	8008922 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80088c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80088ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d901      	bls.n	80088d6 <f_read+0x22a>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e4:	4413      	add	r3, r2
 80088e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088e8:	4619      	mov	r1, r3
 80088ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088ec:	f7fe f8c4 	bl	8006a78 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80088f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f4:	4413      	add	r3, r2
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	699a      	ldr	r2, [r3, #24]
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	441a      	add	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	619a      	str	r2, [r3, #24]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890a:	441a      	add	r2, r3
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f47f af01 	bne.w	8008722 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3738      	adds	r7, #56	; 0x38
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b086      	sub	sp, #24
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f107 0208 	add.w	r2, r7, #8
 8008938:	4611      	mov	r1, r2
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff fc7c 	bl	8008238 <validate>
 8008940:	4603      	mov	r3, r0
 8008942:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d168      	bne.n	8008a1c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	7d1b      	ldrb	r3, [r3, #20]
 800894e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008952:	2b00      	cmp	r3, #0
 8008954:	d062      	beq.n	8008a1c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	7d1b      	ldrb	r3, [r3, #20]
 800895a:	b25b      	sxtb	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	da15      	bge.n	800898c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	7858      	ldrb	r0, [r3, #1]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1a      	ldr	r2, [r3, #32]
 800896e:	2301      	movs	r3, #1
 8008970:	f7fd ffc2 	bl	80068f8 <disk_write>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <f_sync+0x54>
 800897a:	2301      	movs	r3, #1
 800897c:	e04f      	b.n	8008a1e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	7d1b      	ldrb	r3, [r3, #20]
 8008982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008986:	b2da      	uxtb	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800898c:	f7fc fc48 	bl	8005220 <get_fattime>
 8008990:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	4619      	mov	r1, r3
 800899a:	4610      	mov	r0, r2
 800899c:	f7fe fa9a 	bl	8006ed4 <move_window>
 80089a0:	4603      	mov	r3, r0
 80089a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d138      	bne.n	8008a1c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	330b      	adds	r3, #11
 80089b4:	781a      	ldrb	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	330b      	adds	r3, #11
 80089ba:	f042 0220 	orr.w	r2, r2, #32
 80089be:	b2d2      	uxtb	r2, r2
 80089c0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	461a      	mov	r2, r3
 80089cc:	68f9      	ldr	r1, [r7, #12]
 80089ce:	f7fe ff9f 	bl	8007910 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f103 021c 	add.w	r2, r3, #28
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7fe f81e 	bl	8006a20 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	3316      	adds	r3, #22
 80089e8:	6939      	ldr	r1, [r7, #16]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe f818 	bl	8006a20 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3312      	adds	r3, #18
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fd fff7 	bl	80069ea <st_word>
					fs->wflag = 1;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2201      	movs	r2, #1
 8008a00:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fe fa93 	bl	8006f30 <sync_fs>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	7d1b      	ldrb	r3, [r3, #20]
 8008a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3718      	adds	r7, #24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff ff7b 	bl	800892a <f_sync>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d118      	bne.n	8008a70 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f107 0208 	add.w	r2, r7, #8
 8008a44:	4611      	mov	r1, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff fbf6 	bl	8008238 <validate>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10c      	bne.n	8008a70 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe f996 	bl	8006d8c <dec_lock>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d102      	bne.n	8008a70 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	4613      	mov	r3, r2
 8008a88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a92:	4b1f      	ldr	r3, [pc, #124]	; (8008b10 <FATFS_LinkDriverEx+0x94>)
 8008a94:	7a5b      	ldrb	r3, [r3, #9]
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d131      	bne.n	8008b00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a9c:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <FATFS_LinkDriverEx+0x94>)
 8008a9e:	7a5b      	ldrb	r3, [r3, #9]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	4b1a      	ldr	r3, [pc, #104]	; (8008b10 <FATFS_LinkDriverEx+0x94>)
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008aaa:	4b19      	ldr	r3, [pc, #100]	; (8008b10 <FATFS_LinkDriverEx+0x94>)
 8008aac:	7a5b      	ldrb	r3, [r3, #9]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	4a17      	ldr	r2, [pc, #92]	; (8008b10 <FATFS_LinkDriverEx+0x94>)
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008aba:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <FATFS_LinkDriverEx+0x94>)
 8008abc:	7a5b      	ldrb	r3, [r3, #9]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4b13      	ldr	r3, [pc, #76]	; (8008b10 <FATFS_LinkDriverEx+0x94>)
 8008ac4:	4413      	add	r3, r2
 8008ac6:	79fa      	ldrb	r2, [r7, #7]
 8008ac8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008aca:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <FATFS_LinkDriverEx+0x94>)
 8008acc:	7a5b      	ldrb	r3, [r3, #9]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	b2d1      	uxtb	r1, r2
 8008ad4:	4a0e      	ldr	r2, [pc, #56]	; (8008b10 <FATFS_LinkDriverEx+0x94>)
 8008ad6:	7251      	strb	r1, [r2, #9]
 8008ad8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008ada:	7dbb      	ldrb	r3, [r7, #22]
 8008adc:	3330      	adds	r3, #48	; 0x30
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	223a      	movs	r2, #58	; 0x3a
 8008aea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	3302      	adds	r3, #2
 8008af0:	222f      	movs	r2, #47	; 0x2f
 8008af2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	3303      	adds	r3, #3
 8008af8:	2200      	movs	r2, #0
 8008afa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	371c      	adds	r7, #28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	20000070 	.word	0x20000070

08008b14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b1e:	2200      	movs	r2, #0
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7ff ffaa 	bl	8008a7c <FATFS_LinkDriverEx>
 8008b28:	4603      	mov	r3, r0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <__libc_init_array>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	4e0d      	ldr	r6, [pc, #52]	; (8008b6c <__libc_init_array+0x38>)
 8008b38:	4c0d      	ldr	r4, [pc, #52]	; (8008b70 <__libc_init_array+0x3c>)
 8008b3a:	1ba4      	subs	r4, r4, r6
 8008b3c:	10a4      	asrs	r4, r4, #2
 8008b3e:	2500      	movs	r5, #0
 8008b40:	42a5      	cmp	r5, r4
 8008b42:	d109      	bne.n	8008b58 <__libc_init_array+0x24>
 8008b44:	4e0b      	ldr	r6, [pc, #44]	; (8008b74 <__libc_init_array+0x40>)
 8008b46:	4c0c      	ldr	r4, [pc, #48]	; (8008b78 <__libc_init_array+0x44>)
 8008b48:	f000 f820 	bl	8008b8c <_init>
 8008b4c:	1ba4      	subs	r4, r4, r6
 8008b4e:	10a4      	asrs	r4, r4, #2
 8008b50:	2500      	movs	r5, #0
 8008b52:	42a5      	cmp	r5, r4
 8008b54:	d105      	bne.n	8008b62 <__libc_init_array+0x2e>
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b5c:	4798      	blx	r3
 8008b5e:	3501      	adds	r5, #1
 8008b60:	e7ee      	b.n	8008b40 <__libc_init_array+0xc>
 8008b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b66:	4798      	blx	r3
 8008b68:	3501      	adds	r5, #1
 8008b6a:	e7f2      	b.n	8008b52 <__libc_init_array+0x1e>
 8008b6c:	08008cc0 	.word	0x08008cc0
 8008b70:	08008cc0 	.word	0x08008cc0
 8008b74:	08008cc0 	.word	0x08008cc0
 8008b78:	08008cc4 	.word	0x08008cc4

08008b7c <memset>:
 8008b7c:	4402      	add	r2, r0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d100      	bne.n	8008b86 <memset+0xa>
 8008b84:	4770      	bx	lr
 8008b86:	f803 1b01 	strb.w	r1, [r3], #1
 8008b8a:	e7f9      	b.n	8008b80 <memset+0x4>

08008b8c <_init>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	bf00      	nop
 8008b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b92:	bc08      	pop	{r3}
 8008b94:	469e      	mov	lr, r3
 8008b96:	4770      	bx	lr

08008b98 <_fini>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	bf00      	nop
 8008b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9e:	bc08      	pop	{r3}
 8008ba0:	469e      	mov	lr, r3
 8008ba2:	4770      	bx	lr
